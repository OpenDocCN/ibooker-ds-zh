["```py\nIn [7]: import numpy as np\n\nIn [8]: my_arr = np.arange(1_000_000)\n\nIn [9]: my_list = list(range(1_000_000))\n```", "```py\nIn [10]: %timeit my_arr2 = my_arr * 2\n309 us +- 7.48 us per loop (mean +- std. dev. of 7 runs, 1000 loops each)\n\nIn [11]: %timeit my_list2 = [x * 2 for x in my_list]\n46.4 ms +- 526 us per loop (mean +- std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [12]: import numpy as np\n\nIn [13]: data = np.array([[1.5, -0.1, 3], [0, -3, 6.5]])\n\nIn [14]: data\nOut[14]: \narray([[ 1.5, -0.1,  3. ],\n [ 0. , -3. ,  6.5]])\n```", "```py\nIn [15]: data * 10\nOut[15]: \narray([[ 15.,  -1.,  30.],\n [  0., -30.,  65.]])\n\nIn [16]: data + data\nOut[16]: \narray([[ 3. , -0.2,  6. ],\n [ 0. , -6. , 13. ]])\n```", "```py\nIn [17]: data.shape\nOut[17]: (2, 3)\n\nIn [18]: data.dtype\nOut[18]: dtype('float64')\n```", "```py\nIn [19]: data1 = [6, 7.5, 8, 0, 1]\n\nIn [20]: arr1 = np.array(data1)\n\nIn [21]: arr1\nOut[21]: array([6. , 7.5, 8. , 0. , 1. ])\n```", "```py\nIn [22]: data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\n\nIn [23]: arr2 = np.array(data2)\n\nIn [24]: arr2\nOut[24]: \narray([[1, 2, 3, 4],\n [5, 6, 7, 8]])\n```", "```py\nIn [25]: arr2.ndim\nOut[25]: 2\n\nIn [26]: arr2.shape\nOut[26]: (2, 4)\n```", "```py\nIn [27]: arr1.dtype\nOut[27]: dtype('float64')\n\nIn [28]: arr2.dtype\nOut[28]: dtype('int64')\n```", "```py\nIn [29]: np.zeros(10)\nOut[29]: array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\nIn [30]: np.zeros((3, 6))\nOut[30]: \narray([[0., 0., 0., 0., 0., 0.],\n [0., 0., 0., 0., 0., 0.],\n [0., 0., 0., 0., 0., 0.]])\n\nIn [31]: np.empty((2, 3, 2))\nOut[31]: \narray([[[0., 0.],\n [0., 0.],\n [0., 0.]],\n [[0., 0.],\n [0., 0.],\n [0., 0.]]])\n```", "```py\nIn [32]: np.arange(15)\nOut[32]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n```", "```py\nIn [33]: arr1 = np.array([1, 2, 3], dtype=np.float64)\n\nIn [34]: arr2 = np.array([1, 2, 3], dtype=np.int32)\n\nIn [35]: arr1.dtype\nOut[35]: dtype('float64')\n\nIn [36]: arr2.dtype\nOut[36]: dtype('int32')\n```", "```py\nIn [37]: arr = np.array([1, 2, 3, 4, 5])\n\nIn [38]: arr.dtype\nOut[38]: dtype('int64')\n\nIn [39]: float_arr = arr.astype(np.float64)\n\nIn [40]: float_arr\nOut[40]: array([1., 2., 3., 4., 5.])\n\nIn [41]: float_arr.dtype\nOut[41]: dtype('float64')\n```", "```py\nIn [42]: arr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\n\nIn [43]: arr\nOut[43]: array([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\n\nIn [44]: arr.astype(np.int32)\nOut[44]: array([ 3, -1, -2,  0, 12, 10], dtype=int32)\n```", "```py\nIn [45]: numeric_strings = np.array([\"1.25\", \"-9.6\", \"42\"], dtype=np.string_)\n\nIn [46]: numeric_strings.astype(float)\nOut[46]: array([ 1.25, -9.6 , 42.  ])\n```", "```py\nIn [47]: int_array = np.arange(10)\n\nIn [48]: calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\n\nIn [49]: int_array.astype(calibers.dtype)\nOut[49]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\n```", "```py\nIn [50]: zeros_uint32 = np.zeros(8, dtype=\"u4\")\n\nIn [51]: zeros_uint32\nOut[51]: array([0, 0, 0, 0, 0, 0, 0, 0], dtype=uint32)\n```", "```py\nIn [52]: arr = np.array([[1., 2., 3.], [4., 5., 6.]])\n\nIn [53]: arr\nOut[53]: \narray([[1., 2., 3.],\n [4., 5., 6.]])\n\nIn [54]: arr * arr\nOut[54]: \narray([[ 1.,  4.,  9.],\n [16., 25., 36.]])\n\nIn [55]: arr - arr\nOut[55]: \narray([[0., 0., 0.],\n [0., 0., 0.]])\n```", "```py\nIn [56]: 1 / arr\nOut[56]: \narray([[1.    , 0.5   , 0.3333],\n [0.25  , 0.2   , 0.1667]])\n\nIn [57]: arr ** 2\nOut[57]: \narray([[ 1.,  4.,  9.],\n [16., 25., 36.]])\n```", "```py\nIn [58]: arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\n\nIn [59]: arr2\nOut[59]: \narray([[ 0.,  4.,  1.],\n [ 7.,  2., 12.]])\n\nIn [60]: arr2 > arr\nOut[60]: \narray([[False,  True, False],\n [ True, False,  True]])\n```", "```py\nIn [61]: arr = np.arange(10)\n\nIn [62]: arr\nOut[62]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [63]: arr[5]\nOut[63]: 5\n\nIn [64]: arr[5:8]\nOut[64]: array([5, 6, 7])\n\nIn [65]: arr[5:8] = 12\n\nIn [66]: arr\nOut[66]: array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])\n```", "```py\nIn [67]: arr_slice = arr[5:8]\n\nIn [68]: arr_slice\nOut[68]: array([12, 12, 12])\n```", "```py\nIn [69]: arr_slice[1] = 12345\n\nIn [70]: arr\nOut[70]: \narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n 9])\n```", "```py\nIn [71]: arr_slice[:] = 64\n\nIn [72]: arr\nOut[72]: array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n```", "```py\nIn [73]: arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nIn [74]: arr2d[2]\nOut[74]: array([7, 8, 9])\n```", "```py\nIn [75]: arr2d[0][2]\nOut[75]: 3\n\nIn [76]: arr2d[0, 2]\nOut[76]: 3\n```", "```py\nIn [77]: arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\nIn [78]: arr3d\nOut[78]: \narray([[[ 1,  2,  3],\n [ 4,  5,  6]],\n [[ 7,  8,  9],\n [10, 11, 12]]])\n```", "```py\nIn [79]: arr3d[0]\nOut[79]: \narray([[1, 2, 3],\n [4, 5, 6]])\n```", "```py\nIn [80]: old_values = arr3d[0].copy()\n\nIn [81]: arr3d[0] = 42\n\nIn [82]: arr3d\nOut[82]: \narray([[[42, 42, 42],\n [42, 42, 42]],\n [[ 7,  8,  9],\n [10, 11, 12]]])\n\nIn [83]: arr3d[0] = old_values\n\nIn [84]: arr3d\nOut[84]: \narray([[[ 1,  2,  3],\n [ 4,  5,  6]],\n [[ 7,  8,  9],\n [10, 11, 12]]])\n```", "```py\nIn [85]: arr3d[1, 0]\nOut[85]: array([7, 8, 9])\n```", "```py\nIn [86]: x = arr3d[1]\n\nIn [87]: x\nOut[87]: \narray([[ 7,  8,  9],\n [10, 11, 12]])\n\nIn [88]: x[0]\nOut[88]: array([7, 8, 9])\n```", "```py\nIn [89]: arr\nOut[89]: array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\nIn [90]: arr[1:6]\nOut[90]: array([ 1,  2,  3,  4, 64])\n```", "```py\nIn [91]: arr2d\nOut[91]: \narray([[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]])\n\nIn [92]: arr2d[:2]\nOut[92]: \narray([[1, 2, 3],\n [4, 5, 6]])\n```", "```py\nIn [93]: arr2d[:2, 1:]\nOut[93]: \narray([[2, 3],\n [5, 6]])\n```", "```py\nIn [94]: lower_dim_slice = arr2d[1, :2]\n```", "```py\nIn [95]: lower_dim_slice.shape\nOut[95]: (2,)\n```", "```py\nIn [96]: arr2d[:2, 2]\nOut[96]: array([3, 6])\n```", "```py\nIn [97]: arr2d[:, :1]\nOut[97]: \narray([[1],\n [4],\n [7]])\n```", "```py\nIn [98]: arr2d[:2, 1:] = 0\n\nIn [99]: arr2d\nOut[99]: \narray([[1, 0, 0],\n [4, 0, 0],\n [7, 8, 9]])\n```", "```py\nIn [100]: names = np.array([\"Bob\", \"Joe\", \"Will\", \"Bob\", \"Will\", \"Joe\", \"Joe\"])\n\nIn [101]: data = np.array([[4, 7], [0, 2], [-5, 6], [0, 0], [1, 2],\n .....:                  [-12, -4], [3, 4]])\n\nIn [102]: names\nOut[102]: array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')\n\nIn [103]: data\nOut[103]: \narray([[  4,   7],\n [  0,   2],\n [ -5,   6],\n [  0,   0],\n [  1,   2],\n [-12,  -4],\n [  3,   4]])\n```", "```py\nIn [104]: names == \"Bob\"\nOut[104]: array([ True, False, False,  True, False, False, False])\n```", "```py\nIn [105]: data[names == \"Bob\"]\nOut[105]: \narray([[4, 7],\n [0, 0]])\n```", "```py\nIn [106]: data[names == \"Bob\", 1:]\nOut[106]: \narray([[7],\n [0]])\n\nIn [107]: data[names == \"Bob\", 1]\nOut[107]: array([7, 0])\n```", "```py\nIn [108]: names != \"Bob\"\nOut[108]: array([False,  True,  True, False,  True,  True,  True])\n\nIn [109]: ~(names == \"Bob\")\nOut[109]: array([False,  True,  True, False,  True,  True,  True])\n\nIn [110]: data[~(names == \"Bob\")]\nOut[110]: \narray([[  0,   2],\n [ -5,   6],\n [  1,   2],\n [-12,  -4],\n [  3,   4]])\n```", "```py\nIn [111]: cond = names == \"Bob\"\n\nIn [112]: data[~cond]\nOut[112]: \narray([[  0,   2],\n [ -5,   6],\n [  1,   2],\n [-12,  -4],\n [  3,   4]])\n```", "```py\nIn [113]: mask = (names == \"Bob\") | (names == \"Will\")\n\nIn [114]: mask\nOut[114]: array([ True, False,  True,  True,  True, False, False])\n\nIn [115]: data[mask]\nOut[115]: \narray([[ 4,  7],\n [-5,  6],\n [ 0,  0],\n [ 1,  2]])\n```", "```py\nIn [116]: data[data < 0] = 0\n\nIn [117]: data\nOut[117]: \narray([[4, 7],\n [0, 2],\n [0, 6],\n [0, 0],\n [1, 2],\n [0, 0],\n [3, 4]])\n```", "```py\nIn [118]: data[names != \"Joe\"] = 7\n\nIn [119]: data\nOut[119]: \narray([[7, 7],\n [0, 2],\n [7, 7],\n [7, 7],\n [7, 7],\n [0, 0],\n [3, 4]])\n```", "```py\nIn [120]: arr = np.zeros((8, 4))\n\nIn [121]: for i in range(8):\n .....:     arr[i] = i\n\nIn [122]: arr\nOut[122]: \narray([[0., 0., 0., 0.],\n [1., 1., 1., 1.],\n [2., 2., 2., 2.],\n [3., 3., 3., 3.],\n [4., 4., 4., 4.],\n [5., 5., 5., 5.],\n [6., 6., 6., 6.],\n [7., 7., 7., 7.]])\n```", "```py\nIn [123]: arr[[4, 3, 0, 6]]\nOut[123]: \narray([[4., 4., 4., 4.],\n [3., 3., 3., 3.],\n [0., 0., 0., 0.],\n [6., 6., 6., 6.]])\n```", "```py\nIn [124]: arr[[-3, -5, -7]]\nOut[124]: \narray([[5., 5., 5., 5.],\n [3., 3., 3., 3.],\n [1., 1., 1., 1.]])\n```", "```py\nIn [125]: arr = np.arange(32).reshape((8, 4))\n\nIn [126]: arr\nOut[126]: \narray([[ 0,  1,  2,  3],\n [ 4,  5,  6,  7],\n [ 8,  9, 10, 11],\n [12, 13, 14, 15],\n [16, 17, 18, 19],\n [20, 21, 22, 23],\n [24, 25, 26, 27],\n [28, 29, 30, 31]])\n\nIn [127]: arr[[1, 5, 7, 2], [0, 3, 1, 2]]\nOut[127]: array([ 4, 23, 29, 10])\n```", "```py\nIn [128]: arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]]\nOut[128]: \narray([[ 4,  7,  5,  6],\n [20, 23, 21, 22],\n [28, 31, 29, 30],\n [ 8, 11,  9, 10]])\n```", "```py\nIn [129]: arr[[1, 5, 7, 2], [0, 3, 1, 2]]\nOut[129]: array([ 4, 23, 29, 10])\n\nIn [130]: arr[[1, 5, 7, 2], [0, 3, 1, 2]] = 0\n\nIn [131]: arr\nOut[131]: \narray([[ 0,  1,  2,  3],\n [ 0,  5,  6,  7],\n [ 8,  9,  0, 11],\n [12, 13, 14, 15],\n [16, 17, 18, 19],\n [20, 21, 22,  0],\n [24, 25, 26, 27],\n [28,  0, 30, 31]])\n```", "```py\nIn [132]: arr = np.arange(15).reshape((3, 5))\n\nIn [133]: arr\nOut[133]: \narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n\nIn [134]: arr.T\nOut[134]: \narray([[ 0,  5, 10],\n [ 1,  6, 11],\n [ 2,  7, 12],\n [ 3,  8, 13],\n [ 4,  9, 14]])\n```", "```py\nIn [135]: arr = np.array([[0, 1, 0], [1, 2, -2], [6, 3, 2], [-1, 0, -1], [1, 0, 1\n]])\n\nIn [136]: arr\nOut[136]: \narray([[ 0,  1,  0],\n [ 1,  2, -2],\n [ 6,  3,  2],\n [-1,  0, -1],\n [ 1,  0,  1]])\n\nIn [137]: np.dot(arr.T, arr)\nOut[137]: \narray([[39, 20, 12],\n [20, 14,  2],\n [12,  2, 10]])\n```", "```py\nIn [138]: arr.T @ arr\nOut[138]: \narray([[39, 20, 12],\n [20, 14,  2],\n [12,  2, 10]])\n```", "```py\nIn [139]: arr\nOut[139]: \narray([[ 0,  1,  0],\n [ 1,  2, -2],\n [ 6,  3,  2],\n [-1,  0, -1],\n [ 1,  0,  1]])\n\nIn [140]: arr.swapaxes(0, 1)\nOut[140]: \narray([[ 0,  1,  6, -1,  1],\n [ 1,  2,  3,  0,  0],\n [ 0, -2,  2, -1,  1]])\n```", "```py\nIn [141]: samples = np.random.standard_normal(size=(4, 4))\n\nIn [142]: samples\nOut[142]: \narray([[-0.2047,  0.4789, -0.5194, -0.5557],\n [ 1.9658,  1.3934,  0.0929,  0.2817],\n [ 0.769 ,  1.2464,  1.0072, -1.2962],\n [ 0.275 ,  0.2289,  1.3529,  0.8864]])\n```", "```py\nIn [143]: from random import normalvariate\n\nIn [144]: N = 1_000_000\n\nIn [145]: %timeit samples = [normalvariate(0, 1) for _ in range(N)]\n490 ms +- 2.23 ms per loop (mean +- std. dev. of 7 runs, 1 loop each)\n\nIn [146]: %timeit np.random.standard_normal(N)\n32.6 ms +- 271 us per loop (mean +- std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [147]: rng = np.random.default_rng(seed=12345)\n\nIn [148]: data = rng.standard_normal((2, 3))\n```", "```py\nIn [149]: type(rng)\nOut[149]: numpy.random._generator.Generator\n```", "```py\nIn [150]: arr = np.arange(10)\n\nIn [151]: arr\nOut[151]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [152]: np.sqrt(arr)\nOut[152]: \narray([0.    , 1.    , 1.4142, 1.7321, 2.    , 2.2361, 2.4495, 2.6458,\n 2.8284, 3.    ])\n\nIn [153]: np.exp(arr)\nOut[153]: \narray([   1.    ,    2.7183,    7.3891,   20.0855,   54.5982,  148.4132,\n 403.4288, 1096.6332, 2980.958 , 8103.0839])\n```", "```py\nIn [154]: x = rng.standard_normal(8)\n\nIn [155]: y = rng.standard_normal(8)\n\nIn [156]: x\nOut[156]: \narray([-1.3678,  0.6489,  0.3611, -1.9529,  2.3474,  0.9685, -0.7594,\n 0.9022])\n\nIn [157]: y\nOut[157]: \narray([-0.467 , -0.0607,  0.7888, -1.2567,  0.5759,  1.399 ,  1.3223,\n -0.2997])\n\nIn [158]: np.maximum(x, y)\nOut[158]: \narray([-0.467 ,  0.6489,  0.7888, -1.2567,  2.3474,  1.399 ,  1.3223,\n 0.9022])\n```", "```py\nIn [159]: arr = rng.standard_normal(7) * 5\n\nIn [160]: arr\nOut[160]: array([ 4.5146, -8.1079, -0.7909,  2.2474, -6.718 , -0.4084,  8.6237])\n\nIn [161]: remainder, whole_part = np.modf(arr)\n\nIn [162]: remainder\nOut[162]: array([ 0.5146, -0.1079, -0.7909,  0.2474, -0.718 , -0.4084,  0.6237])\n\nIn [163]: whole_part\nOut[163]: array([ 4., -8., -0.,  2., -6., -0.,  8.])\n```", "```py\nIn [164]: arr\nOut[164]: array([ 4.5146, -8.1079, -0.7909,  2.2474, -6.718 , -0.4084,  8.6237])\n\nIn [165]: out = np.zeros_like(arr)\n\nIn [166]: np.add(arr, 1)\nOut[166]: array([ 5.5146, -7.1079,  0.2091,  3.2474, -5.718 ,  0.5916,  9.6237])\n\nIn [167]: np.add(arr, 1, out=out)\nOut[167]: array([ 5.5146, -7.1079,  0.2091,  3.2474, -5.718 ,  0.5916,  9.6237])\n\nIn [168]: out\nOut[168]: array([ 5.5146, -7.1079,  0.2091,  3.2474, -5.718 ,  0.5916,  9.6237])\n```", "```py\nIn [169]: points = np.arange(-5, 5, 0.01) # 100 equally spaced points\n\nIn [170]: xs, ys = np.meshgrid(points, points)\n\nIn [171]: ys\nOut[171]: \narray([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],\n [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],\n [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],\n ...,\n [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],\n [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],\n [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])\n```", "```py\nIn [172]: z = np.sqrt(xs ** 2 + ys ** 2)\n\nIn [173]: z\nOut[173]: \narray([[7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ],\n [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569],\n [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n ...,\n [7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428],\n [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]])\n```", "```py\nIn [174]: import matplotlib.pyplot as plt\n\nIn [175]: plt.imshow(z, cmap=plt.cm.gray, extent=[-5, 5, -5, 5])\nOut[175]: <matplotlib.image.AxesImage at 0x17f04b040>\n\nIn [176]: plt.colorbar()\nOut[176]: <matplotlib.colorbar.Colorbar at 0x1810661a0>\n\nIn [177]: plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\")\nOut[177]: Text(0.5, 1.0, 'Image plot of $\\\\sqrt{x^2 + y^2}$ for a grid of values'\n)\n```", "```py\nIn [179]: plt.close(\"all\")\n```", "```py\nIn [180]: xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\n\nIn [181]: yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\n\nIn [182]: cond = np.array([True, False, True, True, False])\n```", "```py\nIn [183]: result = [(x if c else y)\n .....:           for x, y, c in zip(xarr, yarr, cond)]\n\nIn [184]: result\nOut[184]: [1.1, 2.2, 1.3, 1.4, 2.5]\n```", "```py\nIn [185]: result = np.where(cond, xarr, yarr)\n\nIn [186]: result\nOut[186]: array([1.1, 2.2, 1.3, 1.4, 2.5])\n```", "```py\nIn [187]: arr = rng.standard_normal((4, 4))\n\nIn [188]: arr\nOut[188]: \narray([[ 2.6182,  0.7774,  0.8286, -0.959 ],\n [-1.2094, -1.4123,  0.5415,  0.7519],\n [-0.6588, -1.2287,  0.2576,  0.3129],\n [-0.1308,  1.27  , -0.093 , -0.0662]])\n\nIn [189]: arr > 0\nOut[189]: \narray([[ True,  True,  True, False],\n [False, False,  True,  True],\n [False, False,  True,  True],\n [False,  True, False, False]])\n\nIn [190]: np.where(arr > 0, 2, -2)\nOut[190]: \narray([[ 2,  2,  2, -2],\n [-2, -2,  2,  2],\n [-2, -2,  2,  2],\n [-2,  2, -2, -2]])\n```", "```py\nIn [191]: np.where(arr > 0, 2, arr) # set only positive values to 2\nOut[191]: \narray([[ 2.    ,  2.    ,  2.    , -0.959 ],\n [-1.2094, -1.4123,  2.    ,  2.    ],\n [-0.6588, -1.2287,  2.    ,  2.    ],\n [-0.1308,  2.    , -0.093 , -0.0662]])\n```", "```py\nIn [192]: arr = rng.standard_normal((5, 4))\n\nIn [193]: arr\nOut[193]: \narray([[-1.1082,  0.136 ,  1.3471,  0.0611],\n [ 0.0709,  0.4337,  0.2775,  0.5303],\n [ 0.5367,  0.6184, -0.795 ,  0.3   ],\n [-1.6027,  0.2668, -1.2616, -0.0713],\n [ 0.474 , -0.4149,  0.0977, -1.6404]])\n\nIn [194]: arr.mean()\nOut[194]: -0.08719744457434529\n\nIn [195]: np.mean(arr)\nOut[195]: -0.08719744457434529\n\nIn [196]: arr.sum()\nOut[196]: -1.743948891486906\n```", "```py\nIn [197]: arr.mean(axis=1)\nOut[197]: array([ 0.109 ,  0.3281,  0.165 , -0.6672, -0.3709])\n\nIn [198]: arr.sum(axis=0)\nOut[198]: array([-1.6292,  1.0399, -0.3344, -0.8203])\n```", "```py\nIn [199]: arr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n\nIn [200]: arr.cumsum()\nOut[200]: array([ 0,  1,  3,  6, 10, 15, 21, 28])\n```", "```py\nIn [201]: arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n\nIn [202]: arr\nOut[202]: \narray([[0, 1, 2],\n [3, 4, 5],\n [6, 7, 8]])\n```", "```py\nIn [203]: arr.cumsum(axis=0)\nOut[203]: \narray([[ 0,  1,  2],\n [ 3,  5,  7],\n [ 9, 12, 15]])\n\nIn [204]: arr.cumsum(axis=1)\nOut[204]: \narray([[ 0,  1,  3],\n [ 3,  7, 12],\n [ 6, 13, 21]])\n```", "```py\nIn [205]: arr = rng.standard_normal(100)\n\nIn [206]: (arr > 0).sum() # Number of positive values\nOut[206]: 48\n\nIn [207]: (arr <= 0).sum() # Number of non-positive values\nOut[207]: 52\n```", "```py\nIn [208]: bools = np.array([False, False, True, False])\n\nIn [209]: bools.any()\nOut[209]: True\n\nIn [210]: bools.all()\nOut[210]: False\n```", "```py\nIn [211]: arr = rng.standard_normal(6)\n\nIn [212]: arr\nOut[212]: array([ 0.0773, -0.6839, -0.7208,  1.1206, -0.0548, -0.0824])\n\nIn [213]: arr.sort()\n\nIn [214]: arr\nOut[214]: array([-0.7208, -0.6839, -0.0824, -0.0548,  0.0773,  1.1206])\n```", "```py\nIn [215]: arr = rng.standard_normal((5, 3))\n\nIn [216]: arr\nOut[216]: \narray([[ 0.936 ,  1.2385,  1.2728],\n [ 0.4059, -0.0503,  0.2893],\n [ 0.1793,  1.3975,  0.292 ],\n [ 0.6384, -0.0279,  1.3711],\n [-2.0528,  0.3805,  0.7554]])\n```", "```py\nIn [217]: arr.sort(axis=0)\n\nIn [218]: arr\nOut[218]: \narray([[-2.0528, -0.0503,  0.2893],\n [ 0.1793, -0.0279,  0.292 ],\n [ 0.4059,  0.3805,  0.7554],\n [ 0.6384,  1.2385,  1.2728],\n [ 0.936 ,  1.3975,  1.3711]])\n\nIn [219]: arr.sort(axis=1)\n\nIn [220]: arr\nOut[220]: \narray([[-2.0528, -0.0503,  0.2893],\n [-0.0279,  0.1793,  0.292 ],\n [ 0.3805,  0.4059,  0.7554],\n [ 0.6384,  1.2385,  1.2728],\n [ 0.936 ,  1.3711,  1.3975]])\n```", "```py\nIn [221]: arr2 = np.array([5, -10, 7, 1, 0, -3])\n\nIn [222]: sorted_arr2 = np.sort(arr2)\n\nIn [223]: sorted_arr2\nOut[223]: array([-10,  -3,   0,   1,   5,   7])\n```", "```py\nIn [224]: names = np.array([\"Bob\", \"Will\", \"Joe\", \"Bob\", \"Will\", \"Joe\", \"Joe\"])\n\nIn [225]: np.unique(names)\nOut[225]: array(['Bob', 'Joe', 'Will'], dtype='<U4')\n\nIn [226]: ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\n\nIn [227]: np.unique(ints)\nOut[227]: array([1, 2, 3, 4])\n```", "```py\nIn [228]: sorted(set(names))\nOut[228]: ['Bob', 'Joe', 'Will']\n```", "```py\nIn [229]: values = np.array([6, 0, 0, 3, 2, 5, 6])\n\nIn [230]: np.in1d(values, [2, 3, 6])\nOut[230]: array([ True, False, False,  True,  True, False,  True])\n```", "```py\nIn [231]: arr = np.arange(10)\n\nIn [232]: np.save(\"some_array\", arr)\n```", "```py\nIn [233]: np.load(\"some_array.npy\")\nOut[233]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nIn [234]: np.savez(\"array_archive.npz\", a=arr, b=arr)\n```", "```py\nIn [235]: arch = np.load(\"array_archive.npz\")\n\nIn [236]: arch[\"b\"]\nOut[236]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nIn [237]: np.savez_compressed(\"arrays_compressed.npz\", a=arr, b=arr)\n```", "```py\nIn [241]: x = np.array([[1., 2., 3.], [4., 5., 6.]])\n\nIn [242]: y = np.array([[6., 23.], [-1, 7], [8, 9]])\n\nIn [243]: x\nOut[243]: \narray([[1., 2., 3.],\n [4., 5., 6.]])\n\nIn [244]: y\nOut[244]: \narray([[ 6., 23.],\n [-1.,  7.],\n [ 8.,  9.]])\n\nIn [245]: x.dot(y)\nOut[245]: \narray([[ 28.,  64.],\n [ 67., 181.]])\n```", "```py\nIn [246]: np.dot(x, y)\nOut[246]: \narray([[ 28.,  64.],\n [ 67., 181.]])\n```", "```py\nIn [247]: x @ np.ones(3)\nOut[247]: array([ 6., 15.])\n```", "```py\nIn [248]: from numpy.linalg import inv, qr\n\nIn [249]: X = rng.standard_normal((5, 5))\n\nIn [250]: mat = X.T @ X\n\nIn [251]: inv(mat)\nOut[251]: \narray([[  3.4993,   2.8444,   3.5956, -16.5538,   4.4733],\n [  2.8444,   2.5667,   2.9002, -13.5774,   3.7678],\n [  3.5956,   2.9002,   4.4823, -18.3453,   4.7066],\n [-16.5538, -13.5774, -18.3453,  84.0102, -22.0484],\n [  4.4733,   3.7678,   4.7066, -22.0484,   6.0525]])\n\nIn [252]: mat @ inv(mat)\nOut[252]: \narray([[ 1.,  0.,  0.,  0.,  0.],\n [ 0.,  1.,  0.,  0.,  0.],\n [ 0.,  0.,  1., -0.,  0.],\n [ 0.,  0.,  0.,  1.,  0.],\n [-0.,  0.,  0.,  0.,  1.]])\n```", "```py\n#! blockstart\nimport random\nposition = 0\nwalk = [position]\nnsteps = 1000\nfor _ in range(nsteps):\n step = 1 if random.randint(0, 1) else -1\n position += step\n walk.append(position)\n#! blockend\n```", "```py\nIn [255]: plt.plot(walk[:100])\n```", "```py\nIn [256]: nsteps = 1000\n\nIn [257]: rng = np.random.default_rng(seed=12345)  # fresh random generator\n\nIn [258]: draws = rng.integers(0, 2, size=nsteps)\n\nIn [259]: steps = np.where(draws == 0, 1, -1)\n\nIn [260]: walk = steps.cumsum()\n```", "```py\nIn [261]: walk.min()\nOut[261]: -8\n\nIn [262]: walk.max()\nOut[262]: 50\n```", "```py\nIn [263]: (np.abs(walk) >= 10).argmax()\nOut[263]: 155\n```", "```py\nIn [264]: nwalks = 5000\n\nIn [265]: nsteps = 1000\n\nIn [266]: draws = rng.integers(0, 2, size=(nwalks, nsteps)) # 0 or 1\n\nIn [267]: steps = np.where(draws > 0, 1, -1)\n\nIn [268]: walks = steps.cumsum(axis=1)\n\nIn [269]: walks\nOut[269]: \narray([[  1,   2,   3, ...,  22,  23,  22],\n [  1,   0,  -1, ..., -50, -49, -48],\n [  1,   2,   3, ...,  50,  49,  48],\n ...,\n [ -1,  -2,  -1, ..., -10,  -9, -10],\n [ -1,  -2,  -3, ...,   8,   9,   8],\n [ -1,   0,   1, ...,  -4,  -3,  -2]])\n```", "```py\nIn [270]: walks.max()\nOut[270]: 114\n\nIn [271]: walks.min()\nOut[271]: -120\n```", "```py\nIn [272]: hits30 = (np.abs(walks) >= 30).any(axis=1)\n\nIn [273]: hits30\nOut[273]: array([False,  True,  True, ...,  True, False,  True])\n\nIn [274]: hits30.sum() # Number that hit 30 or -30\nOut[274]: 3395\n```", "```py\nIn [275]: crossing_times = (np.abs(walks[hits30]) >= 30).argmax(axis=1)\n\nIn [276]: crossing_times\nOut[276]: array([201, 491, 283, ..., 219, 259, 541])\n```", "```py\nIn [277]: crossing_times.mean()\nOut[277]: 500.5699558173785\n```", "```py\nIn [278]: draws = 0.25 * rng.standard_normal((nwalks, nsteps))\n```"]