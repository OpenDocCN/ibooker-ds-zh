- en: '4  NumPy Basics: Arrays and Vectorized Computation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://wesmckinney.com/book/numpy-basics](https://wesmckinney.com/book/numpy-basics)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*This Open Access web version of *Python for Data Analysis 3rd Edition* is
    now available as a companion to the [print and digital editions](https://amzn.to/3DyLaJc).
    If you encounter any errata, [please report them here](https://oreilly.com/catalog/0636920519829/errata).
    Please note that some aspects of this site as produced by Quarto will differ from
    the formatting of the print and eBook versions from O’Reilly.'
  prefs: []
  type: TYPE_NORMAL
- en: If you find the online edition of the book useful, please consider [ordering
    a paper copy](https://amzn.to/3DyLaJc) or a [DRM-free eBook](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)
    to support the author. The content from this website may not be copied or reproduced.
    The code examples are MIT licensed and can be found on GitHub or Gitee.*  *NumPy,
    short for Numerical Python, is one of the most important foundational packages
    for numerical computing in Python. Many computational packages providing scientific
    functionality use NumPy's array objects as one of the standard interface *lingua
    francas* for data exchange. Much of the knowledge about NumPy that I cover is
    transferable to pandas as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the things you''ll find in NumPy:'
  prefs: []
  type: TYPE_NORMAL
- en: ndarray, an efficient multidimensional array providing fast array-oriented arithmetic
    operations and flexible *broadcasting* capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical functions for fast operations on entire arrays of data without
    having to write loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for reading/writing array data to disk and working with memory-mapped
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear algebra, random number generation, and Fourier transform capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A C API for connecting NumPy with libraries written in C, C++, or FORTRAN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because NumPy provides a comprehensive and well-documented C API, it is straightforward
    to pass data to external libraries written in a low-level language, and for external
    libraries to return data to Python as NumPy arrays. This feature has made Python
    a language of choice for wrapping legacy C, C++, or FORTRAN codebases and giving
    them a dynamic and accessible interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'While NumPy by itself does not provide modeling or scientific functionality,
    having an understanding of NumPy arrays and array-oriented computing will help
    you use tools with array computing semantics, like pandas, much more effectively.
    Since NumPy is a large topic, I will cover many advanced NumPy features like broadcasting
    in more depth later (see [Appendix A: Advanced NumPy](/book/advanced-numpy)).
    Many of these advanced features are not needed to follow the rest of this book,
    but they may help you as you go deeper into scientific computing in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For most data analysis applications, the main areas of functionality I’ll focus
    on are:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast array-based operations for data munging and cleaning, subsetting and filtering,
    transformation, and any other kind of computation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common array algorithms like sorting, unique, and set operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient descriptive statistics and aggregating/summarizing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data alignment and relational data manipulations for merging and joining heterogeneous
    datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressing conditional logic as array expressions instead of loops with `if-elif-else`
    branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group-wise data manipulations (aggregation, transformation, and function application)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While NumPy provides a computational foundation for general numerical data processing,
    many readers will want to use pandas as the basis for most kinds of statistics
    or analytics, especially on tabular data. Also, pandas provides some more domain-specific
    functionality like time series manipulation, which is not present in NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note* *Array-oriented computing in Python traces its roots back to 1995, when
    Jim Hugunin created the Numeric library. Over the next 10 years, many scientific
    programming communities began doing array programming in Python, but the library
    ecosystem had become fragmented in the early 2000s. In 2005, Travis Oliphant was
    able to forge the NumPy project from the then Numeric and Numarray projects to
    bring the community together around a single array computing framework.*  *One
    of the reasons NumPy is so important for numerical computations in Python is because
    it is designed for efficiency on large arrays of data. There are a number of reasons
    for this:'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy internally stores data in a contiguous block of memory, independent of
    other built-in Python objects. NumPy's library of algorithms written in the C
    language can operate on this memory without any type checking or other overhead.
    NumPy arrays also use much less memory than built-in Python sequences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy operations perform complex computations on entire arrays without the need
    for Python `for` loops, which can be slow for large sequences. NumPy is faster
    than regular Python code because its C-based algorithms avoid overhead present
    with regular interpreted Python code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To give you an idea of the performance difference, consider a NumPy array of
    one million integers, and the equivalent Python list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s multiply each sequence by 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: NumPy-based algorithms are generally 10 to 100 times faster (or more) than their
    pure Python counterparts and use significantly less memory.
  prefs: []
  type: TYPE_NORMAL
- en: '4.1 The NumPy ndarray: A Multidimensional Array Object'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key features of NumPy is its N-dimensional array object, or ndarray,
    which is a fast, flexible container for large datasets in Python. Arrays enable
    you to perform mathematical operations on whole blocks of data using similar syntax
    to the equivalent operations between scalar elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you a flavor of how NumPy enables batch computations with similar syntax
    to scalar values on built-in Python objects, I first import NumPy and create a
    small array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I then write mathematical operations with `data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the first example, all of the elements have been multiplied by 10\. In the
    second, the corresponding values in each "cell" in the array have been added to
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note* *In this chapter and throughout the book, I use the standard NumPy convention
    of always using `import numpy as np`. It would be possible to put `from numpy
    import *` in your code to avoid having to write `np.`, but I advise against making
    a habit of this. The `numpy` namespace is large and contains a number of functions
    whose names conflict with built-in Python functions (like `min` and `max`). Following
    standard conventions like these is almost always a good idea.*  *An ndarray is
    a generic multidimensional container for homogeneous data; that is, all of the
    elements must be the same type. Every array has a `shape`, a tuple indicating
    the size of each dimension, and a `dtype`, an object describing the *data type*
    of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This chapter will introduce you to the basics of using NumPy arrays, and it
    should be sufficient for following along with the rest of the book. While it’s
    not necessary to have a deep understanding of NumPy for many data analytical applications,
    becoming proficient in array-oriented programming and thinking is a key step along
    the way to becoming a scientific Python guru.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note* *Whenever you see “array,” “NumPy array,” or “ndarray” in the book text,
    in most cases they all refer to the ndarray object.*  *### Creating ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to create an array is to use the `array` function. This accepts
    any sequence-like object (including other arrays) and produces a new NumPy array
    containing the passed data. For example, a list is a good candidate for conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Nested sequences, like a list of equal-length lists, will be converted into
    a multidimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `data2` was a list of lists, the NumPy array `arr2` has two dimensions,
    with shape inferred from the data. We can confirm this by inspecting the `ndim`
    and `shape` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Unless explicitly specified (discussed in [Data Types for ndarrays](#numpy_dtypes)),
    `numpy.array` tries to infer a good data type for the array that it creates. The
    data type is stored in a special `dtype` metadata object; for example, in the
    previous two examples we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to `numpy.array`, there are a number of other functions for creating
    new arrays. As examples, `numpy.zeros` and `numpy.ones` create arrays of 0s or
    1s, respectively, with a given length or shape. `numpy.empty` creates an array
    without initializing its values to any particular value. To create a higher dimensional
    array with these methods, pass a tuple for the shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Caution* *It’s not safe to assume that `numpy.empty` will return an array
    of all zeros. This function returns uninitialized memory and thus may contain
    nonzero "garbage" values. You should use this function only if you intend to populate
    the new array with data.*  *`numpy.arange` is an array-valued version of the built-in
    Python `range` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See [Table 4.1](#tbl-table_array_ctor) for a short list of standard array creation
    functions. Since NumPy is focused on numerical computing, the data type, if not
    specified, will in many cases be `float64` (floating point).
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.1: Some important NumPy array creation functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `array` | Convert input data (list, tuple, array, or other sequence type)
    to an ndarray either by inferring a data type or explicitly specifying a data
    type; copies the input data by default |'
  prefs: []
  type: TYPE_TB
- en: '| `asarray` | Convert input to ndarray, but do not copy if the input is already
    an ndarray |'
  prefs: []
  type: TYPE_TB
- en: '| `arange` | Like the built-in `range` but returns an ndarray instead of a
    list |'
  prefs: []
  type: TYPE_TB
- en: '| `ones, ones_like` | Produce an array of all 1s with the given shape and data
    type; `ones_like` takes another array and produces a `ones` array of the same
    shape and data type |'
  prefs: []
  type: TYPE_TB
- en: '| `zeros, zeros_like` | Like `ones` and `ones_like` but producing arrays of
    0s instead |'
  prefs: []
  type: TYPE_TB
- en: '| `empty, empty_like` | Create new arrays by allocating new memory, but do
    not populate with any values like `ones` and `zeros` |'
  prefs: []
  type: TYPE_TB
- en: '| `full, full_like` | Produce an array of the given shape and data type with
    all values set to the indicated "fill value"; `full_like` takes another array
    and produces a filled array of the same shape and data type |'
  prefs: []
  type: TYPE_TB
- en: '| `eye, identity` | Create a square N × N identity matrix (1s on the diagonal
    and 0s elsewhere) |*  *### Data Types for ndarrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *data type* or `dtype` is a special object containing the information (or
    *metadata*, data about data) the ndarray needs to interpret a chunk of memory
    as a particular type of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Data types are a source of NumPy''s flexibility for interacting with data coming
    from other systems. In most cases they provide a mapping directly onto an underlying
    disk or memory representation, which makes it possible to read and write binary
    streams of data to disk and to connect to code written in a low-level language
    like C or FORTRAN. The numerical data types are named the same way: a type name,
    like `float` or `int`, followed by a number indicating the number of bits per
    element. A standard double-precision floating-point value (what’s used under the
    hood in Python’s `float` object) takes up 8 bytes or 64 bits. Thus, this type
    is known in NumPy as `float64`. See [Table 4.2](#tbl-table_array_dtypes) for a
    full listing of NumPy’s supported data types.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note* *Don’t worry about memorizing the NumPy data types, especially if you’re
    a new user. It’s often only necessary to care about the general *kind* of data
    you’re dealing with, whether floating point, complex, integer, Boolean, string,
    or general Python object. When you need more control over how data is stored in
    memory and on disk, especially large datasets, it is good to know that you have
    control over the storage type.*  *Table 4.2: NumPy data types'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Type code | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `int8, uint8` | `i1, u1` | Signed and unsigned 8-bit (1 byte) integer types
    |'
  prefs: []
  type: TYPE_TB
- en: '| `int16, uint16` | `i2, u2` | Signed and unsigned 16-bit integer types |'
  prefs: []
  type: TYPE_TB
- en: '| `int32, uint32` | `i4, u4` | Signed and unsigned 32-bit integer types |'
  prefs: []
  type: TYPE_TB
- en: '| `int64, uint64` | `i8, u8` | Signed and unsigned 64-bit integer types |'
  prefs: []
  type: TYPE_TB
- en: '| `float16` | `f2` | Half-precision floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `float32` | `f4 or f` | Standard single-precision floating point; compatible
    with C float |'
  prefs: []
  type: TYPE_TB
- en: '| `float64` | `f8 or d` | Standard double-precision floating point; compatible
    with C double and Python `float` object |'
  prefs: []
  type: TYPE_TB
- en: '| `float128` | `f16 or g` | Extended-precision floating point |'
  prefs: []
  type: TYPE_TB
- en: '| `complex64`, `complex128`, `complex256` | `c8, c16, c32` | Complex numbers
    represented by two 32, 64, or 128 floats, respectively |'
  prefs: []
  type: TYPE_TB
- en: '| `bool` | ? | Boolean type storing `True` and `False` values |'
  prefs: []
  type: TYPE_TB
- en: '| `object` | O | Python object type; a value can be any Python object |'
  prefs: []
  type: TYPE_TB
- en: '| `string_` | S | Fixed-length ASCII string type (1 byte per character); for
    example, to create a string data type with length 10, use `''S10''` |'
  prefs: []
  type: TYPE_TB
- en: '| `unicode_` | U | Fixed-length Unicode type (number of bytes platform specific);
    same specification semantics as `string_` (e.g., `''U10''`) |'
  prefs: []
  type: TYPE_TB
- en: '*Note* *There are both *signed* and *unsigned* integer types, and many readers
    will not be familiar with this terminology. A *signed* integer can represent both
    positive and negative integers, while an *unsigned* integer can only represent
    nonzero integers. For example, `int8` (signed 8-bit integer) can represent integers
    from -128 to 127 (inclusive), while `uint8` (unsigned 8-bit integer) can represent
    0 through 255.*  *You can explicitly convert or *cast* an array from one data
    type to another using ndarray’s `astype` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, integers were cast to floating point. If I cast some floating-point
    numbers to be of integer data type, the decimal part will be truncated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have an array of strings representing numbers, you can use `astype`
    to convert them to numeric form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Caution* *Be cautious when using the `numpy.string_` type, as string data
    in NumPy is fixed size and may truncate input without warning. pandas has more
    intuitive out-of-the-box behavior on non-numeric data.*  *If casting were to fail
    for some reason (like a string that cannot be converted to `float64`), a `ValueError`
    will be raised. Before, I was a bit lazy and wrote `float` instead of `np.float64`;
    NumPy aliases the Python types to its own equivalent data types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use another array’s `dtype` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There are shorthand type code strings you can also use to refer to a `dtype`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Note* *Calling `astype` *always* creates a new array (a copy of the data),
    even if the new data type is the same as the old data type.****  ***### Arithmetic
    with NumPy Arrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrays are important because they enable you to express batch operations on
    data without writing any `for` loops. NumPy users call this *vectorization*. Any
    arithmetic operations between equal-size arrays apply the operation element-wise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Arithmetic operations with scalars propagate the scalar argument to each element
    in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Comparisons between arrays of the same size yield Boolean arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Evaluating operations between differently sized arrays is called *broadcasting*
    and will be discussed in more detail in [Appendix A: Advanced NumPy](/book/advanced-numpy).
    Having a deep understanding of broadcasting is not necessary for most of this
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: Basic Indexing and Slicing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy array indexing is a deep topic, as there are many ways you may want to
    select a subset of your data or individual elements. One-dimensional arrays are
    simple; on the surface they act similarly to Python lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, if you assign a scalar value to a slice, as in `arr[5:8] = 12`,
    the value is propagated (or *broadcast* henceforth) to the entire selection.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note* *An important first distinction from Python''s built-in lists is that
    array slices are views on the original array. This means that the data is not
    copied, and any modifications to the view will be reflected in the source array.*  *To
    give an example of this, I first create a slice of `arr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when I change values in `arr_slice`, the mutations are reflected in the
    original array `arr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The "bare" slice `[:]` will assign to all values in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you are new to NumPy, you might be surprised by this, especially if you have
    used other array programming languages that copy data more eagerly. As NumPy has
    been designed to be able to work with very large arrays, you could imagine performance
    and memory problems if NumPy insisted on always copying data.
  prefs: []
  type: TYPE_NORMAL
- en: '*Caution* *If you want a copy of a slice of an ndarray instead of a view, you
    will need to explicitly copy the array—for example, `arr[5:8].copy()`. As you
    will see, pandas works this way, too.*  *With higher dimensional arrays, you have
    many more options. In a two-dimensional array, the elements at each index are
    no longer scalars but rather one-dimensional arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, individual elements can be accessed recursively. But that is a bit too
    much work, so you can pass a comma-separated list of indices to select individual
    elements. So these are equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See [Figure 4.1](#fig-figure_ndarray_indexing) for an illustration of indexing
    on a two-dimensional array. I find it helpful to think of axis 0 as the "rows"
    of the array and axis 1 as the "columns."
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a09620216e4172a26b3283ca34ce702c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Indexing elements in a NumPy array'
  prefs: []
  type: TYPE_NORMAL
- en: 'In multidimensional arrays, if you omit later indices, the returned object
    will be a lower dimensional ndarray consisting of all the data along the higher
    dimensions. So in the 2 × 2 × 3 array `arr3d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`arr3d[0]` is a 2 × 3 array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Both scalar values and arrays can be assigned to `arr3d[0]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, `arr3d[1, 0]` gives you all of the values whose indices start with
    `(1, 0)`, forming a one-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This expression is the same as though we had indexed in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note that in all of these cases where subsections of the array have been selected,
    the returned arrays are views.
  prefs: []
  type: TYPE_NORMAL
- en: '*Caution* *This multidimensional indexing syntax for NumPy arrays will not
    work with regular Python objects, such as lists of lists.*  *#### Indexing with
    slices'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like one-dimensional objects such as Python lists, ndarrays can be sliced with
    the familiar syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the two-dimensional array from before, `arr2d`. Slicing this array
    is a bit different:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it has sliced along axis 0, the first axis. A slice, therefore,
    selects a range of elements along an axis. It can be helpful to read the expression
    `arr2d[:2]` as "select the first two rows of `arr2d`."
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pass multiple slices just like you can pass multiple indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: When slicing like this, you always obtain array views of the same number of
    dimensions. By mixing integer indexes and slices, you get lower dimensional slices.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I can select the second row but only the first two columns, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, while `arr2d` is two-dimensional, `lower_dim_slice` is one-dimensional,
    and its shape is a tuple with one axis size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, I can select the third column but only the first two rows, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'See [Figure 4.2](#fig-figure_ndarray_slicing) for an illustration. Note that
    a colon by itself means to take the entire axis, so you can slice only higher
    dimensional axes by doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, assigning to a slice expression assigns to the whole selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ae89dd22b1516b02323b63614b75f260.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Two-dimensional array slicing***  ***### Boolean Indexing'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example where we have some data in an array and an array
    of names with duplicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose each name corresponds to a row in the `data` array and we wanted to
    select all the rows with the corresponding name `"Bob"`. Like arithmetic operations,
    comparisons (such as `==`) with arrays are also vectorized. Thus, comparing `names`
    with the string `"Bob"` yields a Boolean array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This Boolean array can be passed when indexing the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The Boolean array must be of the same length as the array axis it’s indexing.
    You can even mix and match Boolean arrays with slices or integers (or sequences
    of integers; more on this later).
  prefs: []
  type: TYPE_NORMAL
- en: 'In these examples, I select from the rows where `names == "Bob"` and index
    the columns, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To select everything but `"Bob"` you can either use `!=` or negate the condition
    using `~`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `~` operator can be useful when you want to invert a Boolean array referenced
    by a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To select two of the three names to combine multiple Boolean conditions, use
    Boolean arithmetic operators like `&` (and) and `|` (or):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Selecting data from an array by Boolean indexing and assigning the result to
    a new variable *always* creates a copy of the data, even if the returned array
    is unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '*Caution* *The Python keywords `and` and `or` do not work with Boolean arrays.
    Use `&` (and) and `|` (or) instead.*  *Setting values with Boolean arrays works
    by substituting the value or values on the righthand side into the locations where
    the Boolean array''s values are `True`. To set all of the negative values in `data`
    to 0, we need only do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set whole rows or columns using a one-dimensional Boolean array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As we will see later, these types of operations on two-dimensional data are
    convenient to do with pandas.*  *### Fancy Indexing
  prefs: []
  type: TYPE_NORMAL
- en: '*Fancy indexing* is a term adopted by NumPy to describe indexing using integer
    arrays. Suppose we had an 8 × 4 array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To select a subset of the rows in a particular order, you can simply pass a
    list or ndarray of integers specifying the desired order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Hopefully this code did what you expected! Using negative indices selects rows
    from the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Passing multiple index arrays does something slightly different; it selects
    a one-dimensional array of elements corresponding to each tuple of indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To learn more about the `reshape` method, have a look at [Appendix A: Advanced
    NumPy](/book/advanced-numpy).'
  prefs: []
  type: TYPE_NORMAL
- en: Here the elements `(1, 0), (5, 3), (7, 1)`, and `(2, 2)` were selected. The
    result of fancy indexing with as many integer arrays as there are axes is always
    one-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: 'The behavior of fancy indexing in this case is a bit different from what some
    users might have expected (myself included), which is the rectangular region formed
    by selecting a subset of the matrix’s rows and columns. Here is one way to get
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind that fancy indexing, unlike slicing, always copies the data into
    a new array when assigning the result to a new variable. If you assign values
    with fancy indexing, the indexed values will be modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Transposing Arrays and Swapping Axes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Transposing is a special form of reshaping that similarly returns a view on
    the underlying data without copying anything. Arrays have the `transpose` method
    and the special `T` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'When doing matrix computations, you may do this very often—for example, when
    computing the inner matrix product using `numpy.dot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@` infix operator is another way to do matrix multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Simple transposing with `.T` is a special case of swapping axes. ndarray has
    the method `swapaxes`, which takes a pair of axis numbers and switches the indicated
    axes to rearrange the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`swapaxes` similarly returns a view on the data without making a copy.**********  ***##
    4.2 Pseudorandom Number Generation'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `numpy.random` module supplements the built-in Python `random` module with
    functions for efficiently generating whole arrays of sample values from many kinds
    of probability distributions. For example, you can get a 4 × 4 array of samples
    from the standard normal distribution using `numpy.random.standard_normal`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Python’s built-in `random` module, by contrast, samples only one value at a
    time. As you can see from this benchmark, `numpy.random` is well over an order
    of magnitude faster for generating very large samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'These random numbers are not truly random (rather, *pseudorandom*) but instead
    are generated by a configurable random number generator that determines deterministically
    what values are created. Functions like `numpy.random.standard_normal` use the
    `numpy.random` module''s default random number generator, but your code can be
    configured to use an explicit generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The `seed` argument is what determines the initial state of the generator,
    and the state changes each time the `rng` object is used to generate data. The
    generator object `rng` is also isolated from other code which might use the `numpy.random`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: See [Table 4.3](#tbl-table_numpy_random) for a partial list of methods available
    on random generator objects like `rng`. I will use the `rng` object I created
    above to generate random data throughout the rest of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.3: NumPy random number generator methods'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `permutation` | Return a random permutation of a sequence, or return a permuted
    range |'
  prefs: []
  type: TYPE_TB
- en: '| `shuffle` | Randomly permute a sequence in place |'
  prefs: []
  type: TYPE_TB
- en: '| `uniform` | Draw samples from a uniform distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `integers` | Draw random integers from a given low-to-high range |'
  prefs: []
  type: TYPE_TB
- en: '| `standard_normal` | Draw samples from a normal distribution with mean 0 and
    standard deviation 1 |'
  prefs: []
  type: TYPE_TB
- en: '| `binomial` | Draw samples from a binomial distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `normal` | Draw samples from a normal (Gaussian) distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `beta` | Draw samples from a beta distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `chisquare` | Draw samples from a chi-square distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `gamma` | Draw samples from a gamma distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `uniform` | Draw samples from a uniform [0, 1) distribution |'
  prefs: []
  type: TYPE_TB
- en: '4.3 Universal Functions: Fast Element-Wise Array Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A universal function, or *ufunc*, is a function that performs element-wise operations
    on data in ndarrays. You can think of them as fast vectorized wrappers for simple
    functions that take one or more scalar values and produce one or more scalar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many ufuncs are simple element-wise transformations, like `numpy.sqrt` or `numpy.exp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'These are referred to as *unary* ufuncs. Others, such as `numpy.add` or `numpy.maximum`,
    take two arrays (thus, *binary* ufuncs) and return a single array as the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `numpy.maximum` computed the element-wise maximum of the elements
    in `x` and `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While not common, a ufunc can return multiple arrays. `numpy.modf` is one example:
    a vectorized version of the built-in Python `math.modf`, it returns the fractional
    and integral parts of a floating-point array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Ufuncs accept an optional `out` argument that allows them to assign their results
    into an existing array rather than create a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: See Tables [Table 4.4](#tbl-table_unary_ufuncs) and [Table 4.5](#tbl-table_binary_ufuncs)
    for a listing of some of NumPy's ufuncs. New ufuncs continue to be added to NumPy,
    so consulting the online NumPy documentation is the best way to get a comprehensive
    listing and stay up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.4: Some unary universal functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `abs, fabs` | Compute the absolute value element-wise for integer, floating-point,
    or complex values |'
  prefs: []
  type: TYPE_TB
- en: '| `sqrt` | Compute the square root of each element (equivalent to `arr ** 0.5`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `square` | Compute the square of each element (equivalent to `arr ** 2`)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `exp` | Compute the exponent e^x of each element |'
  prefs: []
  type: TYPE_TB
- en: '| `log, log10, log2, log1p` | Natural logarithm (base *e*), log base 10, log
    base 2, and log(1 + x), respectively |'
  prefs: []
  type: TYPE_TB
- en: '| `sign` | Compute the sign of each element: 1 (positive), 0 (zero), or –1
    (negative) |'
  prefs: []
  type: TYPE_TB
- en: '| `ceil` | Compute the ceiling of each element (i.e., the smallest integer
    greater than or equal to that number) |'
  prefs: []
  type: TYPE_TB
- en: '| `floor` | Compute the floor of each element (i.e., the largest integer less
    than or equal to each element) |'
  prefs: []
  type: TYPE_TB
- en: '| `rint` | Round elements to the nearest integer, preserving the `dtype` |'
  prefs: []
  type: TYPE_TB
- en: '| `modf` | Return fractional and integral parts of array as separate arrays
    |'
  prefs: []
  type: TYPE_TB
- en: '| `isnan` | Return Boolean array indicating whether each value is `NaN` (Not
    a Number) |'
  prefs: []
  type: TYPE_TB
- en: '| `isfinite, isinf` | Return Boolean array indicating whether each element
    is finite (non-`inf`, non-`NaN`) or infinite, respectively |'
  prefs: []
  type: TYPE_TB
- en: '| `cos, cosh, sin, sinh, tan, tanh` | Regular and hyperbolic trigonometric
    functions |'
  prefs: []
  type: TYPE_TB
- en: '| `arccos, arccosh, arcsin, arcsinh, arctan, arctanh` | Inverse trigonometric
    functions |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_not` | Compute truth value of `not` `x` element-wise (equivalent
    to `~arr`) |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.5: Some binary universal functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `add` | Add corresponding elements in arrays |'
  prefs: []
  type: TYPE_TB
- en: '| `subtract` | Subtract elements in second array from first array |'
  prefs: []
  type: TYPE_TB
- en: '| `multiply` | Multiply array elements |'
  prefs: []
  type: TYPE_TB
- en: '| `divide, floor_divide` | Divide or floor divide (truncating the remainder)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `power` | Raise elements in first array to powers indicated in second array
    |'
  prefs: []
  type: TYPE_TB
- en: '| `maximum, fmax` | Element-wise maximum; `fmax` ignores `NaN` |'
  prefs: []
  type: TYPE_TB
- en: '| `minimum, fmin` | Element-wise minimum; `fmin` ignores `NaN` |'
  prefs: []
  type: TYPE_TB
- en: '| `mod` | Element-wise modulus (remainder of division) |'
  prefs: []
  type: TYPE_TB
- en: '| `copysign` | Copy sign of values in second argument to values in first argument
    |'
  prefs: []
  type: TYPE_TB
- en: '| `greater, greater_equal, less, less_equal, equal, not_equal` | Perform element-wise
    comparison, yielding Boolean array (equivalent to infix operators `>, >=, <, <=,
    ==, !=`) |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_and` | Compute element-wise truth value of AND (`&`) logical operation
    |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_or` | Compute element-wise truth value of OR (`&#124;`) logical
    operation |'
  prefs: []
  type: TYPE_TB
- en: '| `logical_xor` | Compute element-wise truth value of XOR (`^`) logical operation
    |'
  prefs: []
  type: TYPE_TB
- en: 4.4 Array-Oriented Programming with Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using NumPy arrays enables you to express many kinds of data processing tasks
    as concise array expressions that might otherwise require writing loops. This
    practice of replacing explicit loops with array expressions is referred to by
    some people as *vectorization*. In general, vectorized array operations will usually
    be significantly faster than their pure Python equivalents, with the biggest impact
    in any kind of numerical computations. Later, in [Appendix A: Advanced NumPy](/book/advanced-numpy),
    I explain *broadcasting*, a powerful method for vectorizing computations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a simple example, suppose we wished to evaluate the function `sqrt(x^2 +
    y^2)` across a regular grid of values. The `numpy.meshgrid` function takes two
    one-dimensional arrays and produces two two-dimensional matrices corresponding
    to all pairs of `(x, y)` in the two arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, evaluating the function is a matter of writing the same expression you
    would write with two points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As a preview of [Ch 9: Plotting and Visualization](/book/plotting-and-visualization),
    I use matplotlib to create visualizations of this two-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In [Plot of function evaluated on a grid](#numpy_vectorize_circle), I used the
    matplotlib function `imshow` to create an image plot from a two-dimensional array
    of function values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c901850a416d7a0f42bc07ffa0092543.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Plot of function evaluated on a grid'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re working in IPython, you can close all open plot windows by executing
    `plt.close("all")`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '*Note* *The term *vectorization* is used to describe some other computer science
    concepts, but in this book I use it to describe operations on whole arrays of
    data at once rather than going value by value using a Python `for` loop.*  *###
    Expressing Conditional Logic as Array Operations'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `numpy.where` function is a vectorized version of the ternary expression
    `x if condition else y`. Suppose we had a Boolean array and two arrays of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we wanted to take a value from `xarr` whenever the corresponding value
    in `cond` is `True`, and otherwise take the value from `yarr`. A list comprehension
    doing this might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'This has multiple problems. First, it will not be very fast for large arrays
    (because all the work is being done in interpreted Python code). Second, it will
    not work with multidimensional arrays. With `numpy.where` you can do this with
    a single function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The second and third arguments to `numpy.where` don’t need to be arrays; one
    or both of them can be scalars. A typical use of `where` in data analysis is to
    produce a new array of values based on another array. Suppose you had a matrix
    of randomly generated data and you wanted to replace all positive values with
    2 and all negative values with –2\. This is possible to do with `numpy.where`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'You can combine scalars and arrays when using `numpy.where`. For example, I
    can replace all positive values in `arr` with the constant 2, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Mathematical and Statistical Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A set of mathematical functions that compute statistics about an entire array
    or about the data along an axis are accessible as methods of the array class.
    You can use aggregations (sometimes called *reductions*) like `sum`, `mean`, and
    `std` (standard deviation) either by calling the array instance method or using
    the top-level NumPy function. When you use the NumPy function, like `numpy.sum`,
    you have to pass the array you want to aggregate as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here I generate some normally distributed random data and compute some aggregate
    statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions like `mean` and `sum` take an optional `axis` argument that computes
    the statistic over the given axis, resulting in an array with one less dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Here, `arr.mean(axis=1)` means "compute mean across the columns," where `arr.sum(axis=0)`
    means "compute sum down the rows."
  prefs: []
  type: TYPE_NORMAL
- en: 'Other methods like `cumsum` and `cumprod` do not aggregate, instead producing
    an array of the intermediate results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'In multidimensional arrays, accumulation functions like `cumsum` return an
    array of the same size but with the partial aggregates computed along the indicated
    axis according to each lower dimensional slice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The expression `arr.cumsum(axis=0)` computes the cumulative sum along the rows,
    while `arr.cumsum(axis=1)` computes the sums along the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: See [Table 4.6](#tbl-table_statistical_methods) for a full listing. We’ll see
    many examples of these methods in action in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.6: Basic array statistical methods'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `sum` | Sum of all the elements in the array or along an axis; zero-length
    arrays have sum 0 |'
  prefs: []
  type: TYPE_TB
- en: '| `mean` | Arithmetic mean; invalid (returns `NaN`) on zero-length arrays |'
  prefs: []
  type: TYPE_TB
- en: '| `std, var` | Standard deviation and variance, respectively |'
  prefs: []
  type: TYPE_TB
- en: '| `min, max` | Minimum and maximum |'
  prefs: []
  type: TYPE_TB
- en: '| `argmin, argmax` | Indices of minimum and maximum elements, respectively
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cumsum` | Cumulative sum of elements starting from 0 |'
  prefs: []
  type: TYPE_TB
- en: '| `cumprod` | Cumulative product of elements starting from 1 |'
  prefs: []
  type: TYPE_TB
- en: Methods for Boolean Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Boolean values are coerced to 1 (`True`) and 0 (`False`) in the preceding methods.
    Thus, `sum` is often used as a means of counting `True` values in a Boolean array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The parentheses here in the expression `(arr > 0).sum()` are necessary to be
    able to call `sum()` on the temporary result of `arr > 0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two additional methods, `any` and `all`, are useful especially for Boolean
    arrays. `any` tests whether one or more values in an array is `True`, while `all`
    checks if every value is `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: These methods also work with non-Boolean arrays, where nonzero elements are
    treated as `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like Python’s built-in list type, NumPy arrays can be sorted in place with
    the `sort` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'You can sort each one-dimensional section of values in a multidimensional array
    in place along an axis by passing the axis number to `sort`. In this example data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '`arr.sort(axis=0)` sorts the values within each column, while `arr.sort(axis=1)`
    sorts across each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The top-level method `numpy.sort` returns a sorted copy of an array (like the
    Python built-in function `sorted`) instead of modifying the array in place. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'For more details on using NumPy’s sorting methods, and more advanced techniques
    like indirect sorts, see [Appendix A: Advanced NumPy](/book/advanced-numpy). Several
    other kinds of data manipulations related to sorting (e.g., sorting a table of
    data by one or more columns) can also be found in pandas.'
  prefs: []
  type: TYPE_NORMAL
- en: Unique and Other Set Logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NumPy has some basic set operations for one-dimensional ndarrays. A commonly
    used one is `numpy.unique`, which returns the sorted unique values in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Contrast `numpy.unique` with the pure Python alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: In many cases, the NumPy version is faster and returns a NumPy array rather
    than a Python list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another function, `numpy.in1d`, tests membership of the values in one array
    in another, returning a Boolean array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: See [Table 4.7](#tbl-table_setops) for a listing of array set operations in
    NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.7: Array set operations'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `unique(x)` | Compute the sorted, unique elements in `x` |'
  prefs: []
  type: TYPE_TB
- en: '| `intersect1d(x, y)` | Compute the sorted, common elements in `x` and `y`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `union1d(x, y)` | Compute the sorted union of elements |'
  prefs: []
  type: TYPE_TB
- en: '| `in1d(x, y)` | Compute a Boolean array indicating whether each element of
    `x` is contained in `y` |'
  prefs: []
  type: TYPE_TB
- en: '| `setdiff1d(x, y)` | Set difference, elements in `x` that are not in `y` |'
  prefs: []
  type: TYPE_TB
- en: '| `setxor1d(x, y)` | Set symmetric differences; elements that are in either
    of the arrays, but not both |*  *## 4.5 File Input and Output with Arrays'
  prefs: []
  type: TYPE_NORMAL
- en: 'NumPy is able to save and load data to and from disk in some text or binary
    formats. In this section I discuss only NumPy''s built-in binary format, since
    most users will prefer pandas and other tools for loading text or tabular data
    (see [Ch 6: Data Loading, Storage, and File Formats](/book/accessing-data) for
    much more).'
  prefs: []
  type: TYPE_NORMAL
- en: '`numpy.save` and `numpy.load` are the two workhorse functions for efficiently
    saving and loading array data on disk. Arrays are saved by default in an uncompressed
    raw binary format with file extension *.npy*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file path does not already end in *.npy*, the extension will be appended.
    The array on disk can then be loaded with `numpy.load`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'You can save multiple arrays in an uncompressed archive using `numpy.savez`
    and passing the arrays as keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'When loading an *.npz* file, you get back a dictionary-like object that loads
    the individual arrays lazily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'If your data compresses well, you may wish to use `numpy.savez_compressed`
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 4.6 Linear Algebra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linear algebra operations, like matrix multiplication, decompositions, determinants,
    and other square matrix math, are an important part of many array libraries. Multiplying
    two two-dimensional arrays with `*` is an element-wise product, while matrix multiplications
    require either using the `dot` function or the `@` infix operator. `dot` is both
    an array method and a function in the `numpy` namespace for doing matrix multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '`x.dot(y)` is equivalent to `np.dot(x, y)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'A matrix product between a two-dimensional array and a suitably sized one-dimensional
    array results in a one-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '`numpy.linalg` has a standard set of matrix decompositions and things like
    inverse and determinant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The expression `X.T.dot(X)` computes the dot product of `X` with its transpose
    `X.T`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Table 4.8](#tbl-table_numpy_linalg) for a list of some of the most commonly
    used linear algebra functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 4.8: Commonly used `numpy.linalg` functions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `diag` | Return the diagonal (or off-diagonal) elements of a square matrix
    as a 1D array, or convert a 1D array into a square matrix with zeros on the off-diagonal
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dot` | Matrix multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| `trace` | Compute the sum of the diagonal elements |'
  prefs: []
  type: TYPE_TB
- en: '| `det` | Compute the matrix determinant |'
  prefs: []
  type: TYPE_TB
- en: '| `eig` | Compute the eigenvalues and eigenvectors of a square matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `inv` | Compute the inverse of a square matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `pinv` | Compute the Moore-Penrose pseudoinverse of a matrix |'
  prefs: []
  type: TYPE_TB
- en: '| `qr` | Compute the QR decomposition |'
  prefs: []
  type: TYPE_TB
- en: '| `svd` | Compute the singular value decomposition (SVD) |'
  prefs: []
  type: TYPE_TB
- en: '| `solve` | Solve the linear system Ax = b for x, where A is a square matrix
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lstsq` | Compute the least-squares solution to `Ax = b` |'
  prefs: []
  type: TYPE_TB
- en: '4.7 Example: Random Walks'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simulation of [*random walks*](https://en.wikipedia.org/wiki/Random_walk)
    provides an illustrative application of utilizing array operations. Let’s first
    consider a simple random walk starting at 0 with steps of 1 and –1 occurring with
    equal probability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a pure Python way to implement a single random walk with 1,000 steps
    using the built-in `random` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'See [Figure 4.4](#fig-figure_random_walk1) for an example plot of the first
    100 values on one of these random walks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f00985b53f21f5e966a370573cb76885.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: A simple random walk'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might make the observation that `walk` is the cumulative sum of the random
    steps and could be evaluated as an array expression. Thus, I use the `numpy.random`
    module to draw 1,000 coin flips at once, set these to 1 and –1, and compute the
    cumulative sum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'From this we can begin to extract statistics like the minimum and maximum value
    along the walk’s trajectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'A more complicated statistic is the *first crossing time*, the step at which
    the random walk reaches a particular value. Here we might want to know how long
    it took the random walk to get at least 10 steps away from the origin 0 in either
    direction. `np.abs(walk) >= 10` gives us a Boolean array indicating where the
    walk has reached or exceeded 10, but we want the index of the *first* 10 or –10\.
    Turns out, we can compute this using `argmax`, which returns the first index of
    the maximum value in the Boolean array (`True` is the maximum value):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Note that using `argmax` here is not always efficient because it always makes
    a full scan of the array. In this special case, once a `True` is observed we know
    it to be the maximum value.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating Many Random Walks at Once
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your goal was to simulate many random walks, say five thousand of them,
    you can generate all of the random walks with minor modifications to the preceding
    code. If passed a 2-tuple, the `numpy.random` functions will generate a two-dimensional
    array of draws, and we can compute the cumulative sum for each row to compute
    all five thousand random walks in one shot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can compute the maximum and minimum values obtained over all of the
    walks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Out of these walks, let’s compute the minimum crossing time to 30 or –30\.
    This is slightly tricky because not all 5,000 of them reach 30\. We can check
    this using the `any` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this Boolean array to select the rows of `walks` that actually cross
    the absolute 30 level, and call `argmax` across axis 1 to get the crossing times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we compute the average minimum crossing time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to experiment with other distributions for the steps other than equal-sized
    coin flips. You need only use a different random generator method, like `standard_normal`
    to generate normally distributed steps with some mean and standard deviation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '*Note* *Keep in mind that this vectorized approach requires creating an array
    with `nwalks * nsteps` elements, which may use a large amount of memory for large
    simulations. If memory is more constrained, then a different approach will be
    required.*  *## 4.8 Conclusion'
  prefs: []
  type: TYPE_NORMAL
- en: 'While much of the rest of the book will focus on building data wrangling skills
    with pandas, we will continue to work in a similar array-based style. In [Appendix
    A: Advanced NumPy](/book/advanced-numpy), we will dig deeper into NumPy features
    to help you further develop your array computing skills.*******'
  prefs: []
  type: TYPE_NORMAL
