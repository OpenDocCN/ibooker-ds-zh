["```py\nIn [14]: float_data = pd.Series([1.2, -3.5, np.nan, 0])\n\nIn [15]: float_data\nOut[15]: \n0    1.2\n1   -3.5\n2    NaN\n3    0.0\ndtype: float64\n```", "```py\nIn [16]: float_data.isna()\nOut[16]: \n0    False\n1    False\n2     True\n3    False\ndtype: bool\n```", "```py\nIn [17]: string_data = pd.Series([\"aardvark\", np.nan, None, \"avocado\"])\n\nIn [18]: string_data\nOut[18]: \n0    aardvark\n1         NaN\n2        None\n3     avocado\ndtype: object\n\nIn [19]: string_data.isna()\nOut[19]: \n0    False\n1     True\n2     True\n3    False\ndtype: bool\n\nIn [20]: float_data = pd.Series([1, 2, None], dtype='float64')\n\nIn [21]: float_data\nOut[21]: \n0    1.0\n1    2.0\n2    NaN\ndtype: float64\n\nIn [22]: float_data.isna()\nOut[22]: \n0    False\n1    False\n2     True\ndtype: bool\n```", "```py\nIn [23]: data = pd.Series([1, np.nan, 3.5, np.nan, 7])\n\nIn [24]: data.dropna()\nOut[24]: \n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n```", "```py\nIn [25]: data[data.notna()]\nOut[25]: \n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n```", "```py\nIn [26]: data = pd.DataFrame([[1., 6.5, 3.], [1., np.nan, np.nan],\n ....:                      [np.nan, np.nan, np.nan], [np.nan, 6.5, 3.]])\n\nIn [27]: data\nOut[27]: \n 0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n\nIn [28]: data.dropna()\nOut[28]: \n 0    1    2\n0  1.0  6.5  3.0\n```", "```py\nIn [29]: data.dropna(how=\"all\")\nOut[29]: \n 0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n3  NaN  6.5  3.0\n```", "```py\nIn [30]: data[4] = np.nan\n\nIn [31]: data\nOut[31]: \n 0    1    2   4\n0  1.0  6.5  3.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  6.5  3.0 NaN\n\nIn [32]: data.dropna(axis=\"columns\", how=\"all\")\nOut[32]: \n 0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n```", "```py\nIn [33]: df = pd.DataFrame(np.random.standard_normal((7, 3)))\n\nIn [34]: df.iloc[:4, 1] = np.nan\n\nIn [35]: df.iloc[:2, 2] = np.nan\n\nIn [36]: df\nOut[36]: \n 0         1         2\n0 -0.204708       NaN       NaN\n1 -0.555730       NaN       NaN\n2  0.092908       NaN  0.769023\n3  1.246435       NaN -1.296221\n4  0.274992  0.228913  1.352917\n5  0.886429 -2.001637 -0.371843\n6  1.669025 -0.438570 -0.539741\n\nIn [37]: df.dropna()\nOut[37]: \n 0         1         2\n4  0.274992  0.228913  1.352917\n5  0.886429 -2.001637 -0.371843\n6  1.669025 -0.438570 -0.539741\n\nIn [38]: df.dropna(thresh=2)\nOut[38]: \n 0         1         2\n2  0.092908       NaN  0.769023\n3  1.246435       NaN -1.296221\n4  0.274992  0.228913  1.352917\n5  0.886429 -2.001637 -0.371843\n6  1.669025 -0.438570 -0.539741\n```", "```py\nIn [39]: df.fillna(0)\nOut[39]: \n 0         1         2\n0 -0.204708  0.000000  0.000000\n1 -0.555730  0.000000  0.000000\n2  0.092908  0.000000  0.769023\n3  1.246435  0.000000 -1.296221\n4  0.274992  0.228913  1.352917\n5  0.886429 -2.001637 -0.371843\n6  1.669025 -0.438570 -0.539741\n```", "```py\nIn [40]: df.fillna({1: 0.5, 2: 0})\nOut[40]: \n 0         1         2\n0 -0.204708  0.500000  0.000000\n1 -0.555730  0.500000  0.000000\n2  0.092908  0.500000  0.769023\n3  1.246435  0.500000 -1.296221\n4  0.274992  0.228913  1.352917\n5  0.886429 -2.001637 -0.371843\n6  1.669025 -0.438570 -0.539741\n```", "```py\nIn [41]: df = pd.DataFrame(np.random.standard_normal((6, 3)))\n\nIn [42]: df.iloc[2:, 1] = np.nan\n\nIn [43]: df.iloc[4:, 2] = np.nan\n\nIn [44]: df\nOut[44]: \n 0         1         2\n0  0.476985  3.248944 -1.021228\n1 -0.577087  0.124121  0.302614\n2  0.523772       NaN  1.343810\n3 -0.713544       NaN -2.370232\n4 -1.860761       NaN       NaN\n5 -1.265934       NaN       NaN\n\nIn [45]: df.fillna(method=\"ffill\")\nOut[45]: \n 0         1         2\n0  0.476985  3.248944 -1.021228\n1 -0.577087  0.124121  0.302614\n2  0.523772  0.124121  1.343810\n3 -0.713544  0.124121 -2.370232\n4 -1.860761  0.124121 -2.370232\n5 -1.265934  0.124121 -2.370232\n\nIn [46]: df.fillna(method=\"ffill\", limit=2)\nOut[46]: \n 0         1         2\n0  0.476985  3.248944 -1.021228\n1 -0.577087  0.124121  0.302614\n2  0.523772  0.124121  1.343810\n3 -0.713544  0.124121 -2.370232\n4 -1.860761       NaN -2.370232\n5 -1.265934       NaN -2.370232\n```", "```py\nIn [47]: data = pd.Series([1., np.nan, 3.5, np.nan, 7])\n\nIn [48]: data.fillna(data.mean())\nOut[48]: \n0    1.000000\n1    3.833333\n2    3.500000\n3    3.833333\n4    7.000000\ndtype: float64\n```", "```py\nIn [49]: data = pd.DataFrame({\"k1\": [\"one\", \"two\"] * 3 + [\"two\"],\n ....:                      \"k2\": [1, 1, 2, 3, 3, 4, 4]})\n\nIn [50]: data\nOut[50]: \n k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4\n6  two   4\n```", "```py\nIn [51]: data.duplicated()\nOut[51]: \n0    False\n1    False\n2    False\n3    False\n4    False\n5    False\n6     True\ndtype: bool\n```", "```py\nIn [52]: data.drop_duplicates()\nOut[52]: \n k1  k2\n0  one   1\n1  two   1\n2  one   2\n3  two   3\n4  one   3\n5  two   4\n```", "```py\nIn [53]: data[\"v1\"] = range(7)\n\nIn [54]: data\nOut[54]: \n k1  k2  v1\n0  one   1   0\n1  two   1   1\n2  one   2   2\n3  two   3   3\n4  one   3   4\n5  two   4   5\n6  two   4   6\n\nIn [55]: data.drop_duplicates(subset=[\"k1\"])\nOut[55]: \n k1  k2  v1\n0  one   1   0\n1  two   1   1\n```", "```py\nIn [56]: data.drop_duplicates([\"k1\", \"k2\"], keep=\"last\")\nOut[56]: \n k1  k2  v1\n0  one   1   0\n1  two   1   1\n2  one   2   2\n3  two   3   3\n4  one   3   4\n6  two   4   6\n```", "```py\nIn [57]: data = pd.DataFrame({\"food\": [\"bacon\", \"pulled pork\", \"bacon\",\n ....:                               \"pastrami\", \"corned beef\", \"bacon\",\n ....:                               \"pastrami\", \"honey ham\", \"nova lox\"],\n ....:                      \"ounces\": [4, 3, 12, 6, 7.5, 8, 3, 5, 6]})\n\nIn [58]: data\nOut[58]: \n food  ounces\n0        bacon     4.0\n1  pulled pork     3.0\n2        bacon    12.0\n3     pastrami     6.0\n4  corned beef     7.5\n5        bacon     8.0\n6     pastrami     3.0\n7    honey ham     5.0\n8     nova lox     6.0\n```", "```py\nmeat_to_animal = {\n \"bacon\": \"pig\",\n \"pulled pork\": \"pig\",\n \"pastrami\": \"cow\",\n \"corned beef\": \"cow\",\n \"honey ham\": \"pig\",\n \"nova lox\": \"salmon\"\n}\n```", "```py\nIn [60]: data[\"animal\"] = data[\"food\"].map(meat_to_animal)\n\nIn [61]: data\nOut[61]: \n food  ounces  animal\n0        bacon     4.0     pig\n1  pulled pork     3.0     pig\n2        bacon    12.0     pig\n3     pastrami     6.0     cow\n4  corned beef     7.5     cow\n5        bacon     8.0     pig\n6     pastrami     3.0     cow\n7    honey ham     5.0     pig\n8     nova lox     6.0  salmon\n```", "```py\nIn [62]: def get_animal(x):\n ....:     return meat_to_animal[x]\n\nIn [63]: data[\"food\"].map(get_animal)\nOut[63]: \n0       pig\n1       pig\n2       pig\n3       cow\n4       cow\n5       pig\n6       cow\n7       pig\n8    salmon\nName: food, dtype: object\n```", "```py\nIn [64]: data = pd.Series([1., -999., 2., -999., -1000., 3.])\n\nIn [65]: data\nOut[65]: \n0       1.0\n1    -999.0\n2       2.0\n3    -999.0\n4   -1000.0\n5       3.0\ndtype: float64\n```", "```py\nIn [66]: data.replace(-999, np.nan)\nOut[66]: \n0       1.0\n1       NaN\n2       2.0\n3       NaN\n4   -1000.0\n5       3.0\ndtype: float64\n```", "```py\nIn [67]: data.replace([-999, -1000], np.nan)\nOut[67]: \n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    NaN\n5    3.0\ndtype: float64\n```", "```py\nIn [68]: data.replace([-999, -1000], [np.nan, 0])\nOut[68]: \n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n```", "```py\nIn [69]: data.replace({-999: np.nan, -1000: 0})\nOut[69]: \n0    1.0\n1    NaN\n2    2.0\n3    NaN\n4    0.0\n5    3.0\ndtype: float64\n```", "```py\nIn [70]: data = pd.DataFrame(np.arange(12).reshape((3, 4)),\n ....:                     index=[\"Ohio\", \"Colorado\", \"New York\"],\n ....:                     columns=[\"one\", \"two\", \"three\", \"four\"])\n```", "```py\nIn [71]: def transform(x):\n ....:     return x[:4].upper()\n\nIn [72]: data.index.map(transform)\nOut[72]: Index(['OHIO', 'COLO', 'NEW '], dtype='object')\n```", "```py\nIn [73]: data.index = data.index.map(transform)\n\nIn [74]: data\nOut[74]: \n one  two  three  four\nOHIO    0    1      2     3\nCOLO    4    5      6     7\nNEW     8    9     10    11\n```", "```py\nIn [75]: data.rename(index=str.title, columns=str.upper)\nOut[75]: \n ONE  TWO  THREE  FOUR\nOhio    0    1      2     3\nColo    4    5      6     7\nNew     8    9     10    11\n```", "```py\nIn [76]: data.rename(index={\"OHIO\": \"INDIANA\"},\n ....:             columns={\"three\": \"peekaboo\"})\nOut[76]: \n one  two  peekaboo  four\nINDIANA    0    1         2     3\nCOLO       4    5         6     7\nNEW        8    9        10    11\n```", "```py\nIn [77]: ages = [20, 22, 25, 27, 21, 23, 37, 31, 61, 45, 41, 32]\n```", "```py\nIn [78]: bins = [18, 25, 35, 60, 100]\n\nIn [79]: age_categories = pd.cut(ages, bins)\n\nIn [80]: age_categories\nOut[80]: \n[(18, 25], (18, 25], (18, 25], (25, 35], (18, 25], ..., (25, 35], (60, 100], (35,\n 60], (35, 60], (25, 35]]\nLength: 12\nCategories (4, interval[int64, right]): [(18, 25] < (25, 35] < (35, 60] < (60, 10\n0]]\n```", "```py\nIn [81]: age_categories.codes\nOut[81]: array([0, 0, 0, 1, 0, 0, 2, 1, 3, 2, 2, 1], dtype=int8)\n\nIn [82]: age_categories.categories\nOut[82]: IntervalIndex([(18, 25], (25, 35], (35, 60], (60, 100]], dtype='interval\n[int64, right]')\n\nIn [83]: age_categories.categories[0]\nOut[83]: Interval(18, 25, closed='right')\n\nIn [84]: pd.value_counts(age_categories)\nOut[84]: \n(18, 25]     5\n(25, 35]     3\n(35, 60]     3\n(60, 100]    1\nName: count, dtype: int64\n```", "```py\nIn [85]: pd.cut(ages, bins, right=False)\nOut[85]: \n[[18, 25), [18, 25), [25, 35), [25, 35), [18, 25), ..., [25, 35), [60, 100), [35,\n 60), [35, 60), [25, 35)]\nLength: 12\nCategories (4, interval[int64, left]): [[18, 25) < [25, 35) < [35, 60) < [60, 100\n)]\n```", "```py\nIn [86]: group_names = [\"Youth\", \"YoungAdult\", \"MiddleAged\", \"Senior\"]\n\nIn [87]: pd.cut(ages, bins, labels=group_names)\nOut[87]: \n['Youth', 'Youth', 'Youth', 'YoungAdult', 'Youth', ..., 'YoungAdult', 'Senior', '\nMiddleAged', 'MiddleAged', 'YoungAdult']\nLength: 12\nCategories (4, object): ['Youth' < 'YoungAdult' < 'MiddleAged' < 'Senior']\n```", "```py\nIn [88]: data = np.random.uniform(size=20)\n\nIn [89]: pd.cut(data, 4, precision=2)\nOut[89]: \n[(0.34, 0.55], (0.34, 0.55], (0.76, 0.97], (0.76, 0.97], (0.34, 0.55], ..., (0.34\n, 0.55], (0.34, 0.55], (0.55, 0.76], (0.34, 0.55], (0.12, 0.34]]\nLength: 20\nCategories (4, interval[float64, right]): [(0.12, 0.34] < (0.34, 0.55] < (0.55, 0\n.76] <\n (0.76, 0.97]]\n```", "```py\nIn [90]: data = np.random.standard_normal(1000)\n\nIn [91]: quartiles = pd.qcut(data, 4, precision=2)\n\nIn [92]: quartiles\nOut[92]: \n[(-0.026, 0.62], (0.62, 3.93], (-0.68, -0.026], (0.62, 3.93], (-0.026, 0.62], ...\n, (-0.68, -0.026], (-0.68, -0.026], (-2.96, -0.68], (0.62, 3.93], (-0.68, -0.026]\n]\nLength: 1000\nCategories (4, interval[float64, right]): [(-2.96, -0.68] < (-0.68, -0.026] < (-0\n.026, 0.62] <\n (0.62, 3.93]]\n\nIn [93]: pd.value_counts(quartiles)\nOut[93]: \n(-2.96, -0.68]     250\n(-0.68, -0.026]    250\n(-0.026, 0.62]     250\n(0.62, 3.93]       250\nName: count, dtype: int64\n```", "```py\nIn [94]: pd.qcut(data, [0, 0.1, 0.5, 0.9, 1.]).value_counts()\nOut[94]: \n(-2.9499999999999997, -1.187]    100\n(-1.187, -0.0265]                400\n(-0.0265, 1.286]                 400\n(1.286, 3.928]                   100\nName: count, dtype: int64\n```", "```py\nIn [95]: data = pd.DataFrame(np.random.standard_normal((1000, 4)))\n\nIn [96]: data.describe()\nOut[96]: \n 0            1            2            3\ncount  1000.000000  1000.000000  1000.000000  1000.000000\nmean      0.049091     0.026112    -0.002544    -0.051827\nstd       0.996947     1.007458     0.995232     0.998311\nmin      -3.645860    -3.184377    -3.745356    -3.428254\n25%      -0.599807    -0.612162    -0.687373    -0.747478\n50%       0.047101    -0.013609    -0.022158    -0.088274\n75%       0.756646     0.695298     0.699046     0.623331\nmax       2.653656     3.525865     2.735527     3.366626\n```", "```py\nIn [97]: col = data[2]\n\nIn [98]: col[col.abs() > 3]\nOut[98]: \n41    -3.399312\n136   -3.745356\nName: 2, dtype: float64\n```", "```py\nIn [99]: data[(data.abs() > 3).any(axis=\"columns\")]\nOut[99]: \n 0         1         2         3\n41   0.457246 -0.025907 -3.399312 -0.974657\n60   1.951312  3.260383  0.963301  1.201206\n136  0.508391 -0.196713 -3.745356 -1.520113\n235 -0.242459 -3.056990  1.918403 -0.578828\n258  0.682841  0.326045  0.425384 -3.428254\n322  1.179227 -3.184377  1.369891 -1.074833\n544 -3.548824  1.553205 -2.186301  1.277104\n635 -0.578093  0.193299  1.397822  3.366626\n782 -0.207434  3.525865  0.283070  0.544635\n803 -3.645860  0.255475 -0.549574 -1.907459\n```", "```py\nIn [100]: data[data.abs() > 3] = np.sign(data) * 3\n\nIn [101]: data.describe()\nOut[101]: \n 0            1            2            3\ncount  1000.000000  1000.000000  1000.000000  1000.000000\nmean      0.050286     0.025567    -0.001399    -0.051765\nstd       0.992920     1.004214     0.991414     0.995761\nmin      -3.000000    -3.000000    -3.000000    -3.000000\n25%      -0.599807    -0.612162    -0.687373    -0.747478\n50%       0.047101    -0.013609    -0.022158    -0.088274\n75%       0.756646     0.695298     0.699046     0.623331\nmax       2.653656     3.000000     2.735527     3.000000\n```", "```py\nIn [102]: np.sign(data).head()\nOut[102]: \n 0    1    2    3\n0 -1.0  1.0 -1.0  1.0\n1  1.0 -1.0  1.0 -1.0\n2  1.0  1.0  1.0 -1.0\n3 -1.0 -1.0  1.0 -1.0\n4 -1.0  1.0 -1.0 -1.0\n```", "```py\nIn [103]: df = pd.DataFrame(np.arange(5 * 7).reshape((5, 7)))\n\nIn [104]: df\nOut[104]: \n 0   1   2   3   4   5   6\n0   0   1   2   3   4   5   6\n1   7   8   9  10  11  12  13\n2  14  15  16  17  18  19  20\n3  21  22  23  24  25  26  27\n4  28  29  30  31  32  33  34\n\nIn [105]: sampler = np.random.permutation(5)\n\nIn [106]: sampler\nOut[106]: array([3, 1, 4, 2, 0])\n```", "```py\nIn [107]: df.take(sampler)\nOut[107]: \n 0   1   2   3   4   5   6\n3  21  22  23  24  25  26  27\n1   7   8   9  10  11  12  13\n4  28  29  30  31  32  33  34\n2  14  15  16  17  18  19  20\n0   0   1   2   3   4   5   6\n\nIn [108]: df.iloc[sampler]\nOut[108]: \n 0   1   2   3   4   5   6\n3  21  22  23  24  25  26  27\n1   7   8   9  10  11  12  13\n4  28  29  30  31  32  33  34\n2  14  15  16  17  18  19  20\n0   0   1   2   3   4   5   6\n```", "```py\nIn [109]: column_sampler = np.random.permutation(7)\n\nIn [110]: column_sampler\nOut[110]: array([4, 6, 3, 2, 1, 0, 5])\n\nIn [111]: df.take(column_sampler, axis=\"columns\")\nOut[111]: \n 4   6   3   2   1   0   5\n0   4   6   3   2   1   0   5\n1  11  13  10   9   8   7  12\n2  18  20  17  16  15  14  19\n3  25  27  24  23  22  21  26\n4  32  34  31  30  29  28  33\n```", "```py\nIn [112]: df.sample(n=3)\nOut[112]: \n 0   1   2   3   4   5   6\n2  14  15  16  17  18  19  20\n4  28  29  30  31  32  33  34\n0   0   1   2   3   4   5   6\n```", "```py\nIn [113]: choices = pd.Series([5, 7, -1, 6, 4])\n\nIn [114]: choices.sample(n=10, replace=True)\nOut[114]: \n2   -1\n0    5\n3    6\n1    7\n4    4\n0    5\n4    4\n0    5\n4    4\n4    4\ndtype: int64\n```", "```py\nIn [115]: df = pd.DataFrame({\"key\": [\"b\", \"b\", \"a\", \"c\", \"a\", \"b\"],\n .....:                    \"data1\": range(6)})\n\nIn [116]: df\nOut[116]: \n key  data1\n0   b      0\n1   b      1\n2   a      2\n3   c      3\n4   a      4\n5   b      5\n\nIn [117]: pd.get_dummies(df[\"key\"], dtype=float)\nOut[117]: \n a    b    c\n0  0.0  1.0  0.0\n1  0.0  1.0  0.0\n2  1.0  0.0  0.0\n3  0.0  0.0  1.0\n4  1.0  0.0  0.0\n5  0.0  1.0  0.0\n```", "```py\nIn [118]: dummies = pd.get_dummies(df[\"key\"], prefix=\"key\", dtype=float)\n\nIn [119]: df_with_dummy = df[[\"data1\"]].join(dummies)\n\nIn [120]: df_with_dummy\nOut[120]: \n data1  key_a  key_b  key_c\n0      0    0.0    1.0    0.0\n1      1    0.0    1.0    0.0\n2      2    1.0    0.0    0.0\n3      3    0.0    0.0    1.0\n4      4    1.0    0.0    0.0\n5      5    0.0    1.0    0.0\n```", "```py\nIn [121]: mnames = [\"movie_id\", \"title\", \"genres\"]\n\nIn [122]: movies = pd.read_table(\"datasets/movielens/movies.dat\", sep=\"::\",\n .....:                        header=None, names=mnames, engine=\"python\")\n\nIn [123]: movies[:10]\nOut[123]: \n movie_id                               title                        genres\n0         1                    Toy Story (1995)   Animation|Children's|Comedy\n1         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n2         3             Grumpier Old Men (1995)                Comedy|Romance\n3         4            Waiting to Exhale (1995)                  Comedy|Drama\n4         5  Father of the Bride Part II (1995)                        Comedy\n5         6                         Heat (1995)         Action|Crime|Thriller\n6         7                      Sabrina (1995)                Comedy|Romance\n7         8                 Tom and Huck (1995)          Adventure|Children's\n8         9                 Sudden Death (1995)                        Action\n9        10                    GoldenEye (1995)     Action|Adventure|Thriller\n```", "```py\nIn [124]: dummies = movies[\"genres\"].str.get_dummies(\"|\")\n\nIn [125]: dummies.iloc[:10, :6]\nOut[125]: \n Action  Adventure  Animation  Children's  Comedy  Crime\n0       0          0          1           1       1      0\n1       0          1          0           1       0      0\n2       0          0          0           0       1      0\n3       0          0          0           0       1      0\n4       0          0          0           0       1      0\n5       1          0          0           0       0      1\n6       0          0          0           0       1      0\n7       0          1          0           1       0      0\n8       1          0          0           0       0      0\n9       1          1          0           0       0      0\n```", "```py\nIn [126]: movies_windic = movies.join(dummies.add_prefix(\"Genre_\"))\n\nIn [127]: movies_windic.iloc[0]\nOut[127]: \nmovie_id                                       1\ntitle                           Toy Story (1995)\ngenres               Animation|Children's|Comedy\nGenre_Action                                   0\nGenre_Adventure                                0\nGenre_Animation                                1\nGenre_Children's                               1\nGenre_Comedy                                   1\nGenre_Crime                                    0\nGenre_Documentary                              0\nGenre_Drama                                    0\nGenre_Fantasy                                  0\nGenre_Film-Noir                                0\nGenre_Horror                                   0\nGenre_Musical                                  0\nGenre_Mystery                                  0\nGenre_Romance                                  0\nGenre_Sci-Fi                                   0\nGenre_Thriller                                 0\nGenre_War                                      0\nGenre_Western                                  0\nName: 0, dtype: object\n```", "```py\nIn [128]: np.random.seed(12345) # to make the example repeatable\n\nIn [129]: values = np.random.uniform(size=10)\n\nIn [130]: values\nOut[130]: \narray([0.9296, 0.3164, 0.1839, 0.2046, 0.5677, 0.5955, 0.9645, 0.6532,\n 0.7489, 0.6536])\n\nIn [131]: bins = [0, 0.2, 0.4, 0.6, 0.8, 1]\n\nIn [132]: pd.get_dummies(pd.cut(values, bins))\nOut[132]: \n (0.0, 0.2]  (0.2, 0.4]  (0.4, 0.6]  (0.6, 0.8]  (0.8, 1.0]\n0       False       False       False       False        True\n1       False        True       False       False       False\n2        True       False       False       False       False\n3       False        True       False       False       False\n4       False       False        True       False       False\n5       False       False        True       False       False\n6       False       False       False       False        True\n7       False       False       False        True       False\n8       False       False       False        True       False\n9       False       False       False        True       False\n```", "```py\nIn [133]: s = pd.Series([1, 2, 3, None])\n\nIn [134]: s\nOut[134]: \n0    1.0\n1    2.0\n2    3.0\n3    NaN\ndtype: float64\n\nIn [135]: s.dtype\nOut[135]: dtype('float64')\n```", "```py\nIn [136]: s = pd.Series([1, 2, 3, None], dtype=pd.Int64Dtype())\n\nIn [137]: s\nOut[137]: \n0       1\n1       2\n2       3\n3    <NA>\ndtype: Int64\n\nIn [138]: s.isna()\nOut[138]: \n0    False\n1    False\n2    False\n3     True\ndtype: bool\n\nIn [139]: s.dtype\nOut[139]: Int64Dtype()\n```", "```py\nIn [140]: s[3]\nOut[140]: <NA>\n\nIn [141]: s[3] is pd.NA\nOut[141]: True\n```", "```py\nIn [142]: s = pd.Series([1, 2, 3, None], dtype=\"Int64\")\n```", "```py\nIn [143]: s = pd.Series(['one', 'two', None, 'three'], dtype=pd.StringDtype())\n\nIn [144]: s\nOut[144]: \n0      one\n1      two\n2     <NA>\n3    three\ndtype: string\n```", "```py\nIn [145]: df = pd.DataFrame({\"A\": [1, 2, None, 4],\n .....:                    \"B\": [\"one\", \"two\", \"three\", None],\n .....:                    \"C\": [False, None, False, True]})\n\nIn [146]: df\nOut[146]: \n A      B      C\n0  1.0    one  False\n1  2.0    two   None\n2  NaN  three  False\n3  4.0   None   True\n\nIn [147]: df[\"A\"] = df[\"A\"].astype(\"Int64\")\n\nIn [148]: df[\"B\"] = df[\"B\"].astype(\"string\")\n\nIn [149]: df[\"C\"] = df[\"C\"].astype(\"boolean\")\n\nIn [150]: df\nOut[150]: \n A      B      C\n0     1    one  False\n1     2    two   <NA>\n2  <NA>  three  False\n3     4   <NA>   True\n```", "```py\nIn [151]: val = \"a,b,  guido\"\n\nIn [152]: val.split(\",\")\nOut[152]: ['a', 'b', '  guido']\n```", "```py\nIn [153]: pieces = [x.strip() for x in val.split(\",\")]\n\nIn [154]: pieces\nOut[154]: ['a', 'b', 'guido']\n```", "```py\nIn [155]: first, second, third = pieces\n\nIn [156]: first + \"::\" + second + \"::\" + third\nOut[156]: 'a::b::guido'\n```", "```py\nIn [157]: \"::\".join(pieces)\nOut[157]: 'a::b::guido'\n```", "```py\nIn [158]: \"guido\" in val\nOut[158]: True\n\nIn [159]: val.index(\",\")\nOut[159]: 1\n\nIn [160]: val.find(\":\")\nOut[160]: -1\n```", "```py\nIn [161]: val.index(\":\")\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-161-bea4c4c30248> in <module>\n----> 1 val.index(\":\")\nValueError: substring not found\n```", "```py\nIn [162]: val.count(\",\")\nOut[162]: 2\n```", "```py\nIn [163]: val.replace(\",\", \"::\")\nOut[163]: 'a::b::  guido'\n\nIn [164]: val.replace(\",\", \"\")\nOut[164]: 'ab  guido'\n```", "```py\nIn [165]: import re\n\nIn [166]: text = \"foo    bar\\t baz \\tqux\"\n\nIn [167]: re.split(r\"\\s+\", text)\nOut[167]: ['foo', 'bar', 'baz', 'qux']\n```", "```py\nIn [168]: regex = re.compile(r\"\\s+\")\n\nIn [169]: regex.split(text)\nOut[169]: ['foo', 'bar', 'baz', 'qux']\n```", "```py\nIn [170]: regex.findall(text)\nOut[170]: ['    ', '\\t ', ' \\t']\n```", "```py\ntext = \"\"\"Dave dave@google.com\nSteve steve@gmail.com\nRob rob@gmail.com\nRyan ryan@yahoo.com\"\"\"\npattern = r\"[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}\"\n\n# re.IGNORECASE makes the regex case insensitive\nregex = re.compile(pattern, flags=re.IGNORECASE)\n```", "```py\nIn [172]: regex.findall(text)\nOut[172]: \n['dave@google.com',\n 'steve@gmail.com',\n 'rob@gmail.com',\n 'ryan@yahoo.com']\n```", "```py\nIn [173]: m = regex.search(text)\n\nIn [174]: m\nOut[174]: <re.Match object; span=(5, 20), match='dave@google.com'>\n\nIn [175]: text[m.start():m.end()]\nOut[175]: 'dave@google.com'\n```", "```py\nIn [176]: print(regex.match(text))\nNone\n```", "```py\nIn [177]: print(regex.sub(\"REDACTED\", text))\nDave REDACTED\nSteve REDACTED\nRob REDACTED\nRyan REDACTED\n```", "```py\nIn [178]: pattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"\n\nIn [179]: regex = re.compile(pattern, flags=re.IGNORECASE)\n```", "```py\nIn [180]: m = regex.match(\"wesm@bright.net\")\n\nIn [181]: m.groups()\nOut[181]: ('wesm', 'bright', 'net')\n```", "```py\nIn [182]: regex.findall(text)\nOut[182]: \n[('dave', 'google', 'com'),\n ('steve', 'gmail', 'com'),\n ('rob', 'gmail', 'com'),\n ('ryan', 'yahoo', 'com')]\n```", "```py\nIn [183]: print(regex.sub(r\"Username: \\1, Domain: \\2, Suffix: \\3\", text))\nDave Username: dave, Domain: google, Suffix: com\nSteve Username: steve, Domain: gmail, Suffix: com\nRob Username: rob, Domain: gmail, Suffix: com\nRyan Username: ryan, Domain: yahoo, Suffix: com\n```", "```py\nIn [184]: data = {\"Dave\": \"dave@google.com\", \"Steve\": \"steve@gmail.com\",\n .....:         \"Rob\": \"rob@gmail.com\", \"Wes\": np.nan}\n\nIn [185]: data = pd.Series(data)\n\nIn [186]: data\nOut[186]: \nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                  NaN\ndtype: object\n\nIn [187]: data.isna()\nOut[187]: \nDave     False\nSteve    False\nRob      False\nWes       True\ndtype: bool\n```", "```py\nIn [188]: data.str.contains(\"gmail\")\nOut[188]: \nDave     False\nSteve     True\nRob       True\nWes        NaN\ndtype: object\n```", "```py\nIn [189]: data_as_string_ext = data.astype('string')\n\nIn [190]: data_as_string_ext\nOut[190]: \nDave     dave@google.com\nSteve    steve@gmail.com\nRob        rob@gmail.com\nWes                 <NA>\ndtype: string\n\nIn [191]: data_as_string_ext.str.contains(\"gmail\")\nOut[191]: \nDave     False\nSteve     True\nRob       True\nWes       <NA>\ndtype: boolean\n```", "```py\nIn [192]: pattern = r\"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\\.([A-Z]{2,4})\"\n\nIn [193]: data.str.findall(pattern, flags=re.IGNORECASE)\nOut[193]: \nDave     [(dave, google, com)]\nSteve    [(steve, gmail, com)]\nRob        [(rob, gmail, com)]\nWes                        NaN\ndtype: object\n```", "```py\nIn [194]: matches = data.str.findall(pattern, flags=re.IGNORECASE).str[0]\n\nIn [195]: matches\nOut[195]: \nDave     (dave, google, com)\nSteve    (steve, gmail, com)\nRob        (rob, gmail, com)\nWes                      NaN\ndtype: object\n\nIn [196]: matches.str.get(1)\nOut[196]: \nDave     google\nSteve     gmail\nRob       gmail\nWes         NaN\ndtype: object\n```", "```py\nIn [197]: data.str[:5]\nOut[197]: \nDave     dave@\nSteve    steve\nRob      rob@g\nWes        NaN\ndtype: object\n```", "```py\nIn [198]: data.str.extract(pattern, flags=re.IGNORECASE)\nOut[198]: \n 0       1    2\nDave    dave  google  com\nSteve  steve   gmail  com\nRob      rob   gmail  com\nWes      NaN     NaN  NaN\n```", "```py\nIn [199]: values = pd.Series(['apple', 'orange', 'apple',\n .....:                     'apple'] * 2)\n\nIn [200]: values\nOut[200]: \n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\ndtype: object\n\nIn [201]: pd.unique(values)\nOut[201]: array(['apple', 'orange'], dtype=object)\n\nIn [202]: pd.value_counts(values)\nOut[202]: \napple     6\norange    2\nName: count, dtype: int64\n```", "```py\nIn [203]: values = pd.Series([0, 1, 0, 0] * 2)\n\nIn [204]: dim = pd.Series(['apple', 'orange'])\n\nIn [205]: values\nOut[205]: \n0    0\n1    1\n2    0\n3    0\n4    0\n5    1\n6    0\n7    0\ndtype: int64\n\nIn [206]: dim\nOut[206]: \n0     apple\n1    orange\ndtype: object\n```", "```py\nIn [207]: dim.take(values)\nOut[207]: \n0     apple\n1    orange\n0     apple\n0     apple\n0     apple\n1    orange\n0     apple\n0     apple\ndtype: object\n```", "```py\nIn [208]: fruits = ['apple', 'orange', 'apple', 'apple'] * 2\n\nIn [209]: N = len(fruits)\n\nIn [210]: rng = np.random.default_rng(seed=12345)\n\nIn [211]: df = pd.DataFrame({'fruit': fruits,\n .....:                    'basket_id': np.arange(N),\n .....:                    'count': rng.integers(3, 15, size=N),\n .....:                    'weight': rng.uniform(0, 4, size=N)},\n .....:                   columns=['basket_id', 'fruit', 'count', 'weight'])\n\nIn [212]: df\nOut[212]: \n basket_id   fruit  count    weight\n0          0   apple     11  1.564438\n1          1  orange      5  1.331256\n2          2   apple     12  2.393235\n3          3   apple      6  0.746937\n4          4   apple      5  2.691024\n5          5  orange     12  3.767211\n6          6   apple     10  0.992983\n7          7   apple     11  3.795525\n```", "```py\nIn [213]: fruit_cat = df['fruit'].astype('category')\n\nIn [214]: fruit_cat\nOut[214]: \n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n```", "```py\nIn [215]: c = fruit_cat.array\n\nIn [216]: type(c)\nOut[216]: pandas.core.arrays.categorical.Categorical\n```", "```py\nIn [217]: c.categories\nOut[217]: Index(['apple', 'orange'], dtype='object')\n\nIn [218]: c.codes\nOut[218]: array([0, 1, 0, 0, 0, 1, 0, 0], dtype=int8)\n```", "```py\nIn [219]: dict(enumerate(c.categories))\nOut[219]: {0: 'apple', 1: 'orange'}\n```", "```py\nIn [220]: df['fruit'] = df['fruit'].astype('category')\n\nIn [221]: df[\"fruit\"]\nOut[221]: \n0     apple\n1    orange\n2     apple\n3     apple\n4     apple\n5    orange\n6     apple\n7     apple\nName: fruit, dtype: category\nCategories (2, object): ['apple', 'orange']\n```", "```py\nIn [222]: my_categories = pd.Categorical(['foo', 'bar', 'baz', 'foo', 'bar'])\n\nIn [223]: my_categories\nOut[223]: \n['foo', 'bar', 'baz', 'foo', 'bar']\nCategories (3, object): ['bar', 'baz', 'foo']\n```", "```py\nIn [224]: categories = ['foo', 'bar', 'baz']\n\nIn [225]: codes = [0, 1, 2, 0, 0, 1]\n\nIn [226]: my_cats_2 = pd.Categorical.from_codes(codes, categories)\n\nIn [227]: my_cats_2\nOut[227]: \n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo', 'bar', 'baz']\n```", "```py\nIn [228]: ordered_cat = pd.Categorical.from_codes(codes, categories,\n .....:                                         ordered=True)\n\nIn [229]: ordered_cat\nOut[229]: \n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' < 'bar' < 'baz']\n```", "```py\nIn [230]: my_cats_2.as_ordered()\nOut[230]: \n['foo', 'bar', 'baz', 'foo', 'foo', 'bar']\nCategories (3, object): ['foo' < 'bar' < 'baz']\n```", "```py\nIn [231]: rng = np.random.default_rng(seed=12345)\n\nIn [232]: draws = rng.standard_normal(1000)\n\nIn [233]: draws[:5]\nOut[233]: array([-1.4238,  1.2637, -0.8707, -0.2592, -0.0753])\n```", "```py\nIn [234]: bins = pd.qcut(draws, 4)\n\nIn [235]: bins\nOut[235]: \n[(-3.121, -0.675], (0.687, 3.211], (-3.121, -0.675], (-0.675, 0.0134], (-0.675, 0\n.0134], ..., (0.0134, 0.687], (0.0134, 0.687], (-0.675, 0.0134], (0.0134, 0.687],\n (-0.675, 0.0134]]\nLength: 1000\nCategories (4, interval[float64, right]): [(-3.121, -0.675] < (-0.675, 0.0134] < \n(0.0134, 0.687] <\n (0.687, 3.211]]\n```", "```py\nIn [236]: bins = pd.qcut(draws, 4, labels=['Q1', 'Q2', 'Q3', 'Q4'])\n\nIn [237]: bins\nOut[237]: \n['Q1', 'Q4', 'Q1', 'Q2', 'Q2', ..., 'Q3', 'Q3', 'Q2', 'Q3', 'Q2']\nLength: 1000\nCategories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4']\n\nIn [238]: bins.codes[:10]\nOut[238]: array([0, 3, 0, 1, 1, 0, 0, 2, 2, 0], dtype=int8)\n```", "```py\nIn [239]: bins = pd.Series(bins, name='quartile')\n\nIn [240]: results = (pd.Series(draws)\n .....:            .groupby(bins)\n .....:            .agg(['count', 'min', 'max'])\n .....:            .reset_index())\n\nIn [241]: results\nOut[241]: \n quartile  count       min       max\n0       Q1    250 -3.119609 -0.678494\n1       Q2    250 -0.673305  0.008009\n2       Q3    250  0.018753  0.686183\n3       Q4    250  0.688282  3.211418\n```", "```py\nIn [242]: results['quartile']\nOut[242]: \n0    Q1\n1    Q2\n2    Q3\n3    Q4\nName: quartile, dtype: category\nCategories (4, object): ['Q1' < 'Q2' < 'Q3' < 'Q4']\n```", "```py\nIn [243]: N = 10_000_000\n\nIn [244]: labels = pd.Series(['foo', 'bar', 'baz', 'qux'] * (N // 4))\n```", "```py\nIn [245]: categories = labels.astype('category')\n```", "```py\nIn [246]: labels.memory_usage(deep=True)\nOut[246]: 600000128\n\nIn [247]: categories.memory_usage(deep=True)\nOut[247]: 10000540\n```", "```py\nIn [248]: %time _ = labels.astype('category')\nCPU times: user 279 ms, sys: 6.06 ms, total: 285 ms\nWall time: 285 ms\n```", "```py\nIn [249]: %timeit labels.value_counts()\n331 ms +- 5.39 ms per loop (mean +- std. dev. of 7 runs, 1 loop each)\n\nIn [250]: %timeit categories.value_counts()\n15.6 ms +- 152 us per loop (mean +- std. dev. of 7 runs, 100 loops each)\n```", "```py\nIn [251]: s = pd.Series(['a', 'b', 'c', 'd'] * 2)\n\nIn [252]: cat_s = s.astype('category')\n\nIn [253]: cat_s\nOut[253]: \n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n```", "```py\nIn [254]: cat_s.cat.codes\nOut[254]: \n0    0\n1    1\n2    2\n3    3\n4    0\n5    1\n6    2\n7    3\ndtype: int8\n\nIn [255]: cat_s.cat.categories\nOut[255]: Index(['a', 'b', 'c', 'd'], dtype='object')\n```", "```py\nIn [256]: actual_categories = ['a', 'b', 'c', 'd', 'e']\n\nIn [257]: cat_s2 = cat_s.cat.set_categories(actual_categories)\n\nIn [258]: cat_s2\nOut[258]: \n0    a\n1    b\n2    c\n3    d\n4    a\n5    b\n6    c\n7    d\ndtype: category\nCategories (5, object): ['a', 'b', 'c', 'd', 'e']\n```", "```py\nIn [259]: cat_s.value_counts()\nOut[259]: \na    2\nb    2\nc    2\nd    2\nName: count, dtype: int64\n\nIn [260]: cat_s2.value_counts()\nOut[260]: \na    2\nb    2\nc    2\nd    2\ne    0\nName: count, dtype: int64\n```", "```py\nIn [261]: cat_s3 = cat_s[cat_s.isin(['a', 'b'])]\n\nIn [262]: cat_s3\nOut[262]: \n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (4, object): ['a', 'b', 'c', 'd']\n\nIn [263]: cat_s3.cat.remove_unused_categories()\nOut[263]: \n0    a\n1    b\n4    a\n5    b\ndtype: category\nCategories (2, object): ['a', 'b']\n```", "```py\nIn [264]: cat_s = pd.Series(['a', 'b', 'c', 'd'] * 2, dtype='category')\n```", "```py\nIn [265]: pd.get_dummies(cat_s, dtype=float)\nOut[265]: \n a    b    c    d\n0  1.0  0.0  0.0  0.0\n1  0.0  1.0  0.0  0.0\n2  0.0  0.0  1.0  0.0\n3  0.0  0.0  0.0  1.0\n4  1.0  0.0  0.0  0.0\n5  0.0  1.0  0.0  0.0\n6  0.0  0.0  1.0  0.0\n7  0.0  0.0  0.0  1.0\n```"]