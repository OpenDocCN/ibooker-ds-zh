["```py\n$ python\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\n[GCC 10.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> a = 5\n>>> print(a)\n5\n```", "```py\nprint(\"Hello world\")\n```", "```py\n$ python hello_world.py\nHello world\n```", "```py\n$ ipython\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: %run hello_world.py\nHello world\n\nIn [2]:\n```", "```py\n$ ipython\nPython 3.10.4 | packaged by conda-forge | (main, Mar 24 2022, 17:38:57)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: a = 5\n\nIn [2]: a\nOut[2]: 5\n```", "```py\nIn [5]: import numpy as np\n\nIn [6]: data = [np.random.standard_normal() for i in range(7)]\n\nIn [7]: data\nOut[7]: \n[-0.20470765948471295,\n 0.47894333805754824,\n -0.5194387150567381,\n -0.55573030434749,\n 1.9657805725027142,\n 1.3934058329729904,\n 0.09290787674371767]\n```", "```py\n>>> import numpy as np\n>>> data = [np.random.standard_normal() for i in range(7)]\n>>> print(data)\n>>> data\n[-0.5767699931966723, -0.1010317773535111, -1.7841005313329152,\n-1.524392126408841, 0.22191374220117385, -1.9835710588082562,\n-1.6081963964963528]\n```", "```py\n$ jupyter notebook\n[I 15:20:52.739 NotebookApp] Serving notebooks from local directory:\n/home/wesm/code/pydata-book\n[I 15:20:52.739 NotebookApp] 0 active kernels\n[I 15:20:52.739 NotebookApp] The Jupyter Notebook is running at:\nhttp://localhost:8888/?token=0a77b52fefe52ab83e3c35dff8de121e4bb443a63f2d...\n[I 15:20:52.740 NotebookApp] Use Control-C to stop this server and shut down\nall kernels (twice to skip confirmation).\nCreated new window in existing browser session.\n    To access the notebook, open this file in a browser:\n        file:///home/wesm/.local/share/jupyter/runtime/nbserver-185259-open.html\n    Or copy and paste one of these URLs:\n        http://localhost:8888/?token=0a77b52fefe52ab83e3c35dff8de121e4...\n     or http://127.0.0.1:8888/?token=0a77b52fefe52ab83e3c35dff8de121e4...\n```", "```py\nIn [1]: an_apple = 27\n\nIn [2]: an_example = 42\n\nIn [3]: an<Tab>\nan_apple   an_example  any\n```", "```py\nIn [3]: b = [1, 2, 3]\n\nIn [4]: b.<Tab>\nappend()  count()   insert()  reverse()\nclear()   extend()  pop()     sort()\ncopy()    index()   remove()\n```", "```py\nIn [1]: import datetime\n\nIn [2]: datetime.<Tab>\ndate          MAXYEAR       timedelta\ndatetime      MINYEAR       timezone\ndatetime_CAPI time          tzinfo\n```", "```py\nIn [1]: b = [1, 2, 3]\n\nIn [2]: b?\nType:        list\nString form: [1, 2, 3]\nLength:      3\nDocstring:\nBuilt-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.\n\nIn [3]: print?\nDocstring:\nprint(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream.\nType:      builtin_function_or_method\n```", "```py\ndef add_numbers(a, b):\n \"\"\"\n Add two numbers together\n\n Returns\n -------\n the_sum : type of arguments\n \"\"\"\n return a + b\n```", "```py\nIn [6]: add_numbers?\nSignature: add_numbers(a, b)\nDocstring:\nAdd two numbers together\nReturns\n-------\nthe_sum : type of arguments\nFile:      <ipython-input-9-6a548a216e27>\nType:      function\n```", "```py\nIn [9]: import numpy as np\n\nIn [10]: np.*load*?\nnp.__loader__\nnp.load\nnp.loads\nnp.loadtxt\n```", "```py\nfor x in array:\n if x < pivot:\n less.append(x)\n else:\n greater.append(x)\n```", "```py\na = 5; b = 6; c = 7\n```", "```py\nresults = []\nfor line in file_handle:\n # keep the empty lines for now\n # if len(line) == 0:\n #   continue\n results.append(line.replace(\"foo\", \"bar\"))\n```", "```py\nprint(\"Reached this line\")  # Simple status report\n```", "```py\nresult = f(x, y, z)\ng()\n```", "```py\nobj.some_method(x, y, z)\n```", "```py\nresult = f(a, b, c, d=5, e=\"foo\")\n```", "```py\nIn [8]: a = [1, 2, 3]\n```", "```py\nIn [9]: b = a\n\nIn [10]: b\nOut[10]: [1, 2, 3]\n```", "```py\nIn [11]: a.append(4)\n\nIn [12]: b\nOut[12]: [1, 2, 3, 4]\n```", "```py\nIn [13]: def append_element(some_list, element):\n ....:     some_list.append(element)\n```", "```py\nIn [14]: data = [1, 2, 3]\n\nIn [15]: append_element(data, 4)\n\nIn [16]: data\nOut[16]: [1, 2, 3, 4]\n```", "```py\nIn [17]: a = 5\n\nIn [18]: type(a)\nOut[18]: int\n\nIn [19]: a = \"foo\"\n\nIn [20]: type(a)\nOut[20]: str\n```", "```py\nIn [21]: \"5\" + 5\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-21-7fe5aa79f268> in <module>\n----> 1 \"5\" + 5\nTypeError: can only concatenate str (not \"int\") to str\n```", "```py\nIn [22]: a = 4.5\n\nIn [23]: b = 2\n\n# String formatting, to be visited later\nIn [24]: print(f\"a is {type(a)}, b is {type(b)}\")\na is <class 'float'>, b is <class 'int'>\n\nIn [25]: a / b\nOut[25]: 2.25\n```", "```py\nIn [26]: a = 5\n\nIn [27]: isinstance(a, int)\nOut[27]: True\n```", "```py\nIn [28]: a = 5; b = 4.5\n\nIn [29]: isinstance(a, (int, float))\nOut[29]: True\n\nIn [30]: isinstance(b, (int, float))\nOut[30]: True\n```", "```py\nIn [1]: a = \"foo\"\n\nIn [2]: a.<Press Tab>\ncapitalize() index()        isspace()      removesuffix()  startswith()\ncasefold()   isprintable()  istitle()      replace()       strip()\ncenter()     isalnum()      isupper()      rfind()         swapcase()\ncount()      isalpha()      join()         rindex()        title()\nencode()     isascii()      ljust()        rjust()         translate()\nendswith()   isdecimal()    lower()        rpartition()\nexpandtabs() isdigit()      lstrip()       rsplit()\nfind()       isidentifier() maketrans()    rstrip()\nformat()     islower()      partition()    split()\nformat_map() isnumeric()    removeprefix() splitlines()\n```", "```py\nIn [32]: getattr(a, \"split\")\nOut[32]: <function str.split(sep=None, maxsplit=-1)>\n```", "```py\nIn [33]: def isiterable(obj):\n ....:     try:\n ....:         iter(obj)\n ....:         return True\n ....:     except TypeError: # not iterable\n ....:         return False\n```", "```py\nIn [34]: isiterable(\"a string\")\nOut[34]: True\n\nIn [35]: isiterable([1, 2, 3])\nOut[35]: True\n\nIn [36]: isiterable(5)\nOut[36]: False\n```", "```py\n# some_module.py\nPI = 3.14159\n\ndef f(x):\n return x + 2\n\ndef g(a, b):\n return a + b\n```", "```py\nimport some_module\nresult = some_module.f(5)\npi = some_module.PI\n```", "```py\nfrom some_module import g, PI\nresult = g(5, PI)\n```", "```py\nimport some_module as sm\nfrom some_module import PI as pi, g as gf\n\nr1 = sm.f(pi)\nr2 = gf(6, pi)\n```", "```py\nIn [37]: 5 - 7\nOut[37]: -2\n\nIn [38]: 12 + 21.5\nOut[38]: 33.5\n\nIn [39]: 5 <= 2\nOut[39]: False\n```", "```py\nIn [40]: a = [1, 2, 3]\n\nIn [41]: b = a\n\nIn [42]: c = list(a)\n\nIn [43]: a is b\nOut[43]: True\n\nIn [44]: a is not c\nOut[44]: True\n```", "```py\nIn [45]: a == c\nOut[45]: True\n```", "```py\nIn [46]: a = None\n\nIn [47]: a is None\nOut[47]: True\n```", "```py\nIn [48]: a_list = [\"foo\", 2, [4, 5]]\n\nIn [49]: a_list[2] = (3, 4)\n\nIn [50]: a_list\nOut[50]: ['foo', 2, (3, 4)]\n```", "```py\nIn [51]: a_tuple = (3, 5, (4, 5))\n\nIn [52]: a_tuple[1] = \"four\"\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-52-cd2a018a7529> in <module>\n----> 1 a_tuple[1] = \"four\"\nTypeError: 'tuple' object does not support item assignment\n```", "```py\nIn [53]: ival = 17239871\n\nIn [54]: ival ** 6\nOut[54]: 26254519291092456596965462913230729701102721\n```", "```py\nIn [55]: fval = 7.243\n\nIn [56]: fval2 = 6.78e-5\n```", "```py\nIn [57]: 3 / 2\nOut[57]: 1.5\n```", "```py\nIn [58]: 3 // 2\nOut[58]: 1\n```", "```py\na = 'one way of writing a string'\nb = \"another way\"\n```", "```py\nc = \"\"\"\nThis is a longer string that\nspans multiple lines\n\"\"\"\n```", "```py\nIn [60]: c.count(\"\\n\")\nOut[60]: 3\n```", "```py\nIn [61]: a = \"this is a string\"\n\nIn [62]: a[10] = \"f\"\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-62-3b2d95f10db4> in <module>\n----> 1 a[10] = \"f\"\nTypeError: 'str' object does not support item assignment\n```", "```py\nIn [63]: b = a.replace(\"string\", \"longer string\")\n\nIn [64]: b\nOut[64]: 'this is a longer string'\n```", "```py\nIn [65]: a\nOut[65]: 'this is a string'\n```", "```py\nIn [66]: a = 5.6\n\nIn [67]: s = str(a)\n\nIn [68]: print(s)\n5.6\n```", "```py\nIn [69]: s = \"python\"\n\nIn [70]: list(s)\nOut[70]: ['p', 'y', 't', 'h', 'o', 'n']\n\nIn [71]: s[:3]\nOut[71]: 'pyt'\n```", "```py\nIn [72]: s = \"12\\\\34\"\n\nIn [73]: print(s)\n12\\34\n```", "```py\nIn [74]: s = r\"this\\has\\no\\special\\characters\"\n\nIn [75]: s\nOut[75]: 'this\\\\has\\\\no\\\\special\\\\characters'\n```", "```py\nIn [76]: a = \"this is the first half \"\n\nIn [77]: b = \"and this is the second half\"\n\nIn [78]: a + b\nOut[78]: 'this is the first half and this is the second half'\n```", "```py\nIn [79]: template = \"{0:.2f}  {1:s} are worth US${2:d}\"\n```", "```py\nIn [80]: template.format(88.46, \"Argentine Pesos\", 1)\nOut[80]: '88.46 Argentine Pesos are worth US$1'\n```", "```py\nIn [81]: amount = 10\n\nIn [82]: rate = 88.46\n\nIn [83]: currency = \"Pesos\"\n\nIn [84]: result = f\"{amount}  {currency} is worth US${amount / rate}\"\n```", "```py\nIn [85]: f\"{amount}  {currency} is worth US${amount / rate:.2f}\"\nOut[85]: '10 Pesos is worth US$0.11'\n```", "```py\nIn [86]: val = \"espa\u00f1ol\"\n\nIn [87]: val\nOut[87]: 'espa\u00f1ol'\n```", "```py\nIn [88]: val_utf8 = val.encode(\"utf-8\")\n\nIn [89]: val_utf8\nOut[89]: b'espa\\xc3\\xb1ol'\n\nIn [90]: type(val_utf8)\nOut[90]: bytes\n```", "```py\nIn [91]: val_utf8.decode(\"utf-8\")\nOut[91]: 'espa\u00f1ol'\n```", "```py\nIn [92]: val.encode(\"latin1\")\nOut[92]: b'espa\\xf1ol'\n\nIn [93]: val.encode(\"utf-16\")\nOut[93]: b'\\xff\\xfee\\x00s\\x00p\\x00a\\x00\\xf1\\x00o\\x00l\\x00'\n\nIn [94]: val.encode(\"utf-16le\")\nOut[94]: b'e\\x00s\\x00p\\x00a\\x00\\xf1\\x00o\\x00l\\x00'\n```", "```py\nIn [95]: True and True\nOut[95]: True\n\nIn [96]: False or True\nOut[96]: True\n```", "```py\nIn [97]: int(False)\nOut[97]: 0\n\nIn [98]: int(True)\nOut[98]: 1\n```", "```py\nIn [99]: a = True\n\nIn [100]: b = False\n\nIn [101]: not a\nOut[101]: False\n\nIn [102]: not b\nOut[102]: True\n```", "```py\nIn [103]: s = \"3.14159\"\n\nIn [104]: fval = float(s)\n\nIn [105]: type(fval)\nOut[105]: float\n\nIn [106]: int(fval)\nOut[106]: 3\n\nIn [107]: bool(fval)\nOut[107]: True\n\nIn [108]: bool(0)\nOut[108]: False\n```", "```py\nIn [109]: a = None\n\nIn [110]: a is None\nOut[110]: True\n\nIn [111]: b = 5\n\nIn [112]: b is not None\nOut[112]: True\n```", "```py\ndef add_and_maybe_multiply(a, b, c=None):\n result = a + b\n\n if c is not None:\n result = result * c\n\n return result\n```", "```py\nIn [113]: from datetime import datetime, date, time\n\nIn [114]: dt = datetime(2011, 10, 29, 20, 30, 21)\n\nIn [115]: dt.day\nOut[115]: 29\n\nIn [116]: dt.minute\nOut[116]: 30\n```", "```py\nIn [117]: dt.date()\nOut[117]: datetime.date(2011, 10, 29)\n\nIn [118]: dt.time()\nOut[118]: datetime.time(20, 30, 21)\n```", "```py\nIn [119]: dt.strftime(\"%Y-%m-%d %H:%M\")\nOut[119]: '2011-10-29 20:30'\n```", "```py\nIn [120]: datetime.strptime(\"20091031\", \"%Y%m%d\")\nOut[120]: datetime.datetime(2009, 10, 31, 0, 0)\n```", "```py\nIn [121]: dt_hour = dt.replace(minute=0, second=0)\n\nIn [122]: dt_hour\nOut[122]: datetime.datetime(2011, 10, 29, 20, 0)\n```", "```py\nIn [123]: dt\nOut[123]: datetime.datetime(2011, 10, 29, 20, 30, 21)\n```", "```py\nIn [124]: dt2 = datetime(2011, 11, 15, 22, 30)\n\nIn [125]: delta = dt2 - dt\n\nIn [126]: delta\nOut[126]: datetime.timedelta(days=17, seconds=7179)\n\nIn [127]: type(delta)\nOut[127]: datetime.timedelta\n```", "```py\nIn [128]: dt\nOut[128]: datetime.datetime(2011, 10, 29, 20, 30, 21)\n\nIn [129]: dt + delta\nOut[129]: datetime.datetime(2011, 11, 15, 22, 30)\n```", "```py\nx = -5\nif x < 0:\n print(\"It's negative\")\n```", "```py\nif x < 0:\n print(\"It's negative\")\nelif x == 0:\n print(\"Equal to zero\")\nelif 0 < x < 5:\n print(\"Positive but smaller than 5\")\nelse:\n print(\"Positive and larger than or equal to 5\")\n```", "```py\nIn [130]: a = 5; b = 7\n\nIn [131]: c = 8; d = 4\n\nIn [132]: if a < b or c > d:\n .....:     print(\"Made it\")\nMade it\n```", "```py\nIn [133]: 4 > 3 > 2 > 1\nOut[133]: True\n```", "```py\nfor value in collection:\n # do something with value\n```", "```py\nsequence = [1, 2, None, 4, None, 5]\ntotal = 0\nfor value in sequence:\n if value is None:\n continue\n total += value\n```", "```py\nsequence = [1, 2, 0, 4, 6, 5, 2, 1]\ntotal_until_5 = 0\nfor value in sequence:\n if value == 5:\n break\n total_until_5 += value\n```", "```py\nIn [134]: for i in range(4):\n .....:     for j in range(4):\n .....:         if j > i:\n .....:             break\n .....:         print((i, j))\n .....:\n(0, 0)\n(1, 0)\n(1, 1)\n(2, 0)\n(2, 1)\n(2, 2)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\n```", "```py\nfor a, b, c in iterator:\n # do something\n```", "```py\nx = 256\ntotal = 0\nwhile x > 0:\n if total > 500:\n break\n total += x\n x = x // 2\n```", "```py\nif x < 0:\n print(\"negative!\")\nelif x == 0:\n # TODO: put something smart here\n pass\nelse:\n print(\"positive!\")\n```", "```py\nIn [135]: range(10)\nOut[135]: range(0, 10)\n\nIn [136]: list(range(10))\nOut[136]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nIn [137]: list(range(0, 20, 2))\nOut[137]: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n\nIn [138]: list(range(5, 0, -1))\nOut[138]: [5, 4, 3, 2, 1]\n```", "```py\nIn [139]: seq = [1, 2, 3, 4]\n\nIn [140]: for i in range(len(seq)):\n .....:     print(f\"element {i}: {seq[i]}\")\nelement 0: 1\nelement 1: 2\nelement 2: 3\nelement 3: 4\n```", "```py\nIn [141]: total = 0\n\nIn [142]: for i in range(100_000):\n .....:     # % is the modulo operator\n .....:     if i % 3 == 0 or i % 5 == 0:\n .....:         total += i\n\nIn [143]: print(total)\n2333316668\n```"]