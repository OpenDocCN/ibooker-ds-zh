["```py\nIn [11]: rng = np.random.default_rng(seed=12345)\n```", "```py\nIn [12]: np.ones((10, 5)).shape\nOut[12]: (10, 5)\n```", "```py\nIn [13]: np.ones((3, 4, 5), dtype=np.float64).strides\nOut[13]: (160, 40, 8)\n```", "```py\nIn [14]: ints = np.ones(10, dtype=np.uint16)\n\nIn [15]: floats = np.ones(10, dtype=np.float32)\n\nIn [16]: np.issubdtype(ints.dtype, np.integer)\nOut[16]: True\n\nIn [17]: np.issubdtype(floats.dtype, np.floating)\nOut[17]: True\n```", "```py\nIn [18]: np.float64.mro()\nOut[18]: \n[numpy.float64,\n numpy.floating,\n numpy.inexact,\n numpy.number,\n numpy.generic,\n float,\n object]\n```", "```py\nIn [19]: np.issubdtype(ints.dtype, np.number)\nOut[19]: True\n```", "```py\nIn [20]: arr = np.arange(8)\n\nIn [21]: arr\nOut[21]: array([0, 1, 2, 3, 4, 5, 6, 7])\n\nIn [22]: arr.reshape((4, 2))\nOut[22]: \narray([[0, 1],\n [2, 3],\n [4, 5],\n [6, 7]])\n```", "```py\nIn [23]: arr.reshape((4, 2)).reshape((2, 4))\nOut[23]: \narray([[0, 1, 2, 3],\n [4, 5, 6, 7]])\n```", "```py\nIn [24]: arr = np.arange(15)\n\nIn [25]: arr.reshape((5, -1))\nOut[25]: \narray([[ 0,  1,  2],\n [ 3,  4,  5],\n [ 6,  7,  8],\n [ 9, 10, 11],\n [12, 13, 14]])\n```", "```py\nIn [26]: other_arr = np.ones((3, 5))\n\nIn [27]: other_arr.shape\nOut[27]: (3, 5)\n\nIn [28]: arr.reshape(other_arr.shape)\nOut[28]: \narray([[ 0,  1,  2,  3,  4],\n [ 5,  6,  7,  8,  9],\n [10, 11, 12, 13, 14]])\n```", "```py\nIn [29]: arr = np.arange(15).reshape((5, 3))\n\nIn [30]: arr\nOut[30]: \narray([[ 0,  1,  2],\n [ 3,  4,  5],\n [ 6,  7,  8],\n [ 9, 10, 11],\n [12, 13, 14]])\n\nIn [31]: arr.ravel()\nOut[31]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n```", "```py\nIn [32]: arr.flatten()\nOut[32]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n```", "```py\nIn [33]: arr = np.arange(12).reshape((3, 4))\n\nIn [34]: arr\nOut[34]: \narray([[ 0,  1,  2,  3],\n [ 4,  5,  6,  7],\n [ 8,  9, 10, 11]])\n\nIn [35]: arr.ravel()\nOut[35]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\nIn [36]: arr.ravel('F')\nOut[36]: array([ 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11])\n```", "```py\nIn [37]: arr1 = np.array([[1, 2, 3], [4, 5, 6]])\n\nIn [38]: arr2 = np.array([[7, 8, 9], [10, 11, 12]])\n\nIn [39]: np.concatenate([arr1, arr2], axis=0)\nOut[39]: \narray([[ 1,  2,  3],\n [ 4,  5,  6],\n [ 7,  8,  9],\n [10, 11, 12]])\n\nIn [40]: np.concatenate([arr1, arr2], axis=1)\nOut[40]: \narray([[ 1,  2,  3,  7,  8,  9],\n [ 4,  5,  6, 10, 11, 12]])\n```", "```py\nIn [41]: np.vstack((arr1, arr2))\nOut[41]: \narray([[ 1,  2,  3],\n [ 4,  5,  6],\n [ 7,  8,  9],\n [10, 11, 12]])\n\nIn [42]: np.hstack((arr1, arr2))\nOut[42]: \narray([[ 1,  2,  3,  7,  8,  9],\n [ 4,  5,  6, 10, 11, 12]])\n```", "```py\nIn [43]: arr = rng.standard_normal((5, 2))\n\nIn [44]: arr\nOut[44]: \narray([[-1.4238,  1.2637],\n [-0.8707, -0.2592],\n [-0.0753, -0.7409],\n [-1.3678,  0.6489],\n [ 0.3611, -1.9529]])\n\nIn [45]: first, second, third = np.split(arr, [1, 3])\n\nIn [46]: first\nOut[46]: array([[-1.4238,  1.2637]])\n\nIn [47]: second\nOut[47]: \narray([[-0.8707, -0.2592],\n [-0.0753, -0.7409]])\n\nIn [48]: third\nOut[48]: \narray([[-1.3678,  0.6489],\n [ 0.3611, -1.9529]])\n```", "```py\nIn [49]: arr = np.arange(6)\n\nIn [50]: arr1 = arr.reshape((3, 2))\n\nIn [51]: arr2 = rng.standard_normal((3, 2))\n\nIn [52]: np.r_[arr1, arr2]\nOut[52]: \narray([[ 0.    ,  1.    ],\n [ 2.    ,  3.    ],\n [ 4.    ,  5.    ],\n [ 2.3474,  0.9685],\n [-0.7594,  0.9022],\n [-0.467 , -0.0607]])\n\nIn [53]: np.c_[np.r_[arr1, arr2], arr]\nOut[53]: \narray([[ 0.    ,  1.    ,  0.    ],\n [ 2.    ,  3.    ,  1.    ],\n [ 4.    ,  5.    ,  2.    ],\n [ 2.3474,  0.9685,  3.    ],\n [-0.7594,  0.9022,  4.    ],\n [-0.467 , -0.0607,  5.    ]])\n```", "```py\nIn [54]: np.c_[1:6, -10:-5]\nOut[54]: \narray([[  1, -10],\n [  2,  -9],\n [  3,  -8],\n [  4,  -7],\n [  5,  -6]])\n```", "```py\nIn [55]: arr = np.arange(3)\n\nIn [56]: arr\nOut[56]: array([0, 1, 2])\n\nIn [57]: arr.repeat(3)\nOut[57]: array([0, 0, 0, 1, 1, 1, 2, 2, 2])\n```", "```py\nIn [58]: arr.repeat([2, 3, 4])\nOut[58]: array([0, 0, 1, 1, 1, 2, 2, 2, 2])\n```", "```py\nIn [59]: arr = rng.standard_normal((2, 2))\n\nIn [60]: arr\nOut[60]: \narray([[ 0.7888, -1.2567],\n [ 0.5759,  1.399 ]])\n\nIn [61]: arr.repeat(2, axis=0)\nOut[61]: \narray([[ 0.7888, -1.2567],\n [ 0.7888, -1.2567],\n [ 0.5759,  1.399 ],\n [ 0.5759,  1.399 ]])\n```", "```py\nIn [62]: arr.repeat([2, 3], axis=0)\nOut[62]: \narray([[ 0.7888, -1.2567],\n [ 0.7888, -1.2567],\n [ 0.5759,  1.399 ],\n [ 0.5759,  1.399 ],\n [ 0.5759,  1.399 ]])\n\nIn [63]: arr.repeat([2, 3], axis=1)\nOut[63]: \narray([[ 0.7888,  0.7888, -1.2567, -1.2567, -1.2567],\n [ 0.5759,  0.5759,  1.399 ,  1.399 ,  1.399 ]])\n```", "```py\nIn [64]: arr\nOut[64]: \narray([[ 0.7888, -1.2567],\n [ 0.5759,  1.399 ]])\n\nIn [65]: np.tile(arr, 2)\nOut[65]: \narray([[ 0.7888, -1.2567,  0.7888, -1.2567],\n [ 0.5759,  1.399 ,  0.5759,  1.399 ]])\n```", "```py\nIn [66]: arr\nOut[66]: \narray([[ 0.7888, -1.2567],\n [ 0.5759,  1.399 ]])\n\nIn [67]: np.tile(arr, (2, 1))\nOut[67]: \narray([[ 0.7888, -1.2567],\n [ 0.5759,  1.399 ],\n [ 0.7888, -1.2567],\n [ 0.5759,  1.399 ]])\n\nIn [68]: np.tile(arr, (3, 2))\nOut[68]: \narray([[ 0.7888, -1.2567,  0.7888, -1.2567],\n [ 0.5759,  1.399 ,  0.5759,  1.399 ],\n [ 0.7888, -1.2567,  0.7888, -1.2567],\n [ 0.5759,  1.399 ,  0.5759,  1.399 ],\n [ 0.7888, -1.2567,  0.7888, -1.2567],\n [ 0.5759,  1.399 ,  0.5759,  1.399 ]])\n```", "```py\nIn [69]: arr = np.arange(10) * 100\n\nIn [70]: inds = [7, 1, 2, 6]\n\nIn [71]: arr[inds]\nOut[71]: array([700, 100, 200, 600])\n```", "```py\nIn [72]: arr.take(inds)\nOut[72]: array([700, 100, 200, 600])\n\nIn [73]: arr.put(inds, 42)\n\nIn [74]: arr\nOut[74]: array([  0,  42,  42, 300, 400, 500,  42,  42, 800, 900])\n\nIn [75]: arr.put(inds, [40, 41, 42, 43])\n\nIn [76]: arr\nOut[76]: array([  0,  41,  42, 300, 400, 500,  43,  40, 800, 900])\n```", "```py\nIn [77]: inds = [2, 0, 2, 1]\n\nIn [78]: arr = rng.standard_normal((2, 4))\n\nIn [79]: arr\nOut[79]: \narray([[ 1.3223, -0.2997,  0.9029, -1.6216],\n [-0.1582,  0.4495, -1.3436, -0.0817]])\n\nIn [80]: arr.take(inds, axis=1)\nOut[80]: \narray([[ 0.9029,  1.3223,  0.9029, -0.2997],\n [-1.3436, -0.1582, -1.3436,  0.4495]])\n```", "```py\nIn [81]: arr = np.arange(5)\n\nIn [82]: arr\nOut[82]: array([0, 1, 2, 3, 4])\n\nIn [83]: arr * 4\nOut[83]: array([ 0,  4,  8, 12, 16])\n```", "```py\nIn [84]: arr = rng.standard_normal((4, 3))\n\nIn [85]: arr.mean(0)\nOut[85]: array([0.1206, 0.243 , 0.1444])\n\nIn [86]: demeaned = arr - arr.mean(0)\n\nIn [87]: demeaned\nOut[87]: \narray([[ 1.6042,  2.3751,  0.633 ],\n [ 0.7081, -1.202 , -1.3538],\n [-1.5329,  0.2985,  0.6076],\n [-0.7793, -1.4717,  0.1132]])\n\nIn [88]: demeaned.mean(0)\nOut[88]: array([ 0., -0.,  0.])\n```", "```py\nIn [89]: arr\nOut[89]: \narray([[ 1.7247,  2.6182,  0.7774],\n [ 0.8286, -0.959 , -1.2094],\n [-1.4123,  0.5415,  0.7519],\n [-0.6588, -1.2287,  0.2576]])\n\nIn [90]: row_means = arr.mean(1)\n\nIn [91]: row_means.shape\nOut[91]: (4,)\n\nIn [92]: row_means.reshape((4, 1))\nOut[92]: \narray([[ 1.7068],\n [-0.4466],\n [-0.0396],\n [-0.5433]])\n\nIn [93]: demeaned = arr - row_means.reshape((4, 1))\n\nIn [94]: demeaned.mean(1)\nOut[94]: array([-0.,  0.,  0.,  0.])\n```", "```py\nIn [95]: arr - arr.mean(1)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-95-8b8ada26fac0> in <module>\n----> 1 arr - arr.mean(1)\nValueError: operands could not be broadcast together with shapes (4,3) (4,) \n```", "```py\nIn [96]: arr - arr.mean(1).reshape((4, 1))\nOut[96]: \narray([[ 0.018 ,  0.9114, -0.9294],\n [ 1.2752, -0.5124, -0.7628],\n [-1.3727,  0.5811,  0.7915],\n [-0.1155, -0.6854,  0.8009]])\n```", "```py\nIn [97]: arr = np.zeros((4, 4))\n\nIn [98]: arr_3d = arr[:, np.newaxis, :]\n\nIn [99]: arr_3d.shape\nOut[99]: (4, 1, 4)\n\nIn [100]: arr_1d = rng.standard_normal(3)\n\nIn [101]: arr_1d[:, np.newaxis]\nOut[101]: \narray([[ 0.3129],\n [-0.1308],\n [ 1.27  ]])\n\nIn [102]: arr_1d[np.newaxis, :]\nOut[102]: array([[ 0.3129, -0.1308,  1.27  ]])\n```", "```py\nIn [103]: arr = rng.standard_normal((3, 4, 5))\n\nIn [104]: depth_means = arr.mean(2)\n\nIn [105]: depth_means\nOut[105]: \narray([[ 0.0431,  0.2747, -0.1885, -0.2014],\n [-0.5732, -0.5467,  0.1183, -0.6301],\n [ 0.0972,  0.5954,  0.0331, -0.6002]])\n\nIn [106]: depth_means.shape\nOut[106]: (3, 4)\n\nIn [107]: demeaned = arr - depth_means[:, :, np.newaxis]\n\nIn [108]: demeaned.mean(2)\nOut[108]: \narray([[ 0., -0.,  0., -0.],\n [ 0., -0., -0., -0.],\n [ 0.,  0.,  0.,  0.]])\n```", "```py\ndef demean_axis(arr, axis=0):\n means = arr.mean(axis)\n\n # This generalizes things like [:, :, np.newaxis] to N dimensions\n indexer = [slice(None)] * arr.ndim\n indexer[axis] = np.newaxis\n return arr - means[indexer]\n```", "```py\nIn [109]: arr = np.zeros((4, 3))\n\nIn [110]: arr[:] = 5\n\nIn [111]: arr\nOut[111]: \narray([[5., 5., 5.],\n [5., 5., 5.],\n [5., 5., 5.],\n [5., 5., 5.]])\n```", "```py\nIn [112]: col = np.array([1.28, -0.42, 0.44, 1.6])\n\nIn [113]: arr[:] = col[:, np.newaxis]\n\nIn [114]: arr\nOut[114]: \narray([[ 1.28,  1.28,  1.28],\n [-0.42, -0.42, -0.42],\n [ 0.44,  0.44,  0.44],\n [ 1.6 ,  1.6 ,  1.6 ]])\n\nIn [115]: arr[:2] = [[-1.37], [0.509]]\n\nIn [116]: arr\nOut[116]: \narray([[-1.37 , -1.37 , -1.37 ],\n [ 0.509,  0.509,  0.509],\n [ 0.44 ,  0.44 ,  0.44 ],\n [ 1.6  ,  1.6  ,  1.6  ]])\n```", "```py\nIn [117]: arr = np.arange(10)\n\nIn [118]: np.add.reduce(arr)\nOut[118]: 45\n\nIn [119]: arr.sum()\nOut[119]: 45\n```", "```py\nIn [120]: my_rng = np.random.default_rng(12346)  # for reproducibility\n\nIn [121]: arr = my_rng.standard_normal((5, 5))\n\nIn [122]: arr\nOut[122]: \narray([[-0.9039,  0.1571,  0.8976, -0.7622, -0.1763],\n [ 0.053 , -1.6284, -0.1775,  1.9636,  1.7813],\n [-0.8797, -1.6985, -1.8189,  0.119 , -0.4441],\n [ 0.7691, -0.0343,  0.3925,  0.7589, -0.0705],\n [ 1.0498,  1.0297, -0.4201,  0.7863,  0.9612]])\n\nIn [123]: arr[::2].sort(1) # sort a few rows\n\nIn [124]: arr[:, :-1] < arr[:, 1:]\nOut[124]: \narray([[ True,  True,  True,  True],\n [False,  True,  True, False],\n [ True,  True,  True,  True],\n [False,  True,  True, False],\n [ True,  True,  True,  True]])\n\nIn [125]: np.logical_and.reduce(arr[:, :-1] < arr[:, 1:], axis=1)\nOut[125]: array([ True, False,  True, False,  True])\n```", "```py\nIn [126]: arr = np.arange(15).reshape((3, 5))\n\nIn [127]: np.add.accumulate(arr, axis=1)\nOut[127]: \narray([[ 0,  1,  3,  6, 10],\n [ 5, 11, 18, 26, 35],\n [10, 21, 33, 46, 60]])\n```", "```py\nIn [128]: arr = np.arange(3).repeat([1, 2, 2])\n\nIn [129]: arr\nOut[129]: array([0, 1, 1, 2, 2])\n\nIn [130]: np.multiply.outer(arr, np.arange(5))\nOut[130]: \narray([[0, 0, 0, 0, 0],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 2, 4, 6, 8],\n [0, 2, 4, 6, 8]])\n```", "```py\nIn [131]: x, y = rng.standard_normal((3, 4)), rng.standard_normal(5)\n\nIn [132]: result = np.subtract.outer(x, y)\n\nIn [133]: result.shape\nOut[133]: (3, 4, 5)\n```", "```py\nIn [134]: arr = np.arange(10)\n\nIn [135]: np.add.reduceat(arr, [0, 5, 8])\nOut[135]: array([10, 18, 17])\n```", "```py\nIn [136]: arr = np.multiply.outer(np.arange(4), np.arange(5))\n\nIn [137]: arr\nOut[137]: \narray([[ 0,  0,  0,  0,  0],\n [ 0,  1,  2,  3,  4],\n [ 0,  2,  4,  6,  8],\n [ 0,  3,  6,  9, 12]])\n\nIn [138]: np.add.reduceat(arr, [0, 2, 4], axis=1)\nOut[138]: \narray([[ 0,  0,  0],\n [ 1,  5,  4],\n [ 2, 10,  8],\n [ 3, 15, 12]])\n```", "```py\nIn [139]: def add_elements(x, y):\n .....:     return x + y\n\nIn [140]: add_them = np.frompyfunc(add_elements, 2, 1)\n\nIn [141]: add_them(np.arange(8), np.arange(8))\nOut[141]: array([0, 2, 4, 6, 8, 10, 12, 14], dtype=object)\n```", "```py\nIn [142]: add_them = np.vectorize(add_elements, otypes=[np.float64])\n\nIn [143]: add_them(np.arange(8), np.arange(8))\nOut[143]: array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14.])\n```", "```py\nIn [144]: arr = rng.standard_normal(10000)\n\nIn [145]: %timeit add_them(arr, arr)\n1.18 ms +- 14.8 us per loop (mean +- std. dev. of 7 runs, 1000 loops each)\n\nIn [146]: %timeit np.add(arr, arr)\n2.8 us +- 64.1 ns per loop (mean +- std. dev. of 7 runs, 100000 loops each)\n```", "```py\nIn [147]: dtype = [('x', np.float64), ('y', np.int32)]\n\nIn [148]: sarr = np.array([(1.5, 6), (np.pi, -2)], dtype=dtype)\n\nIn [149]: sarr\nOut[149]: array([(1.5   ,  6), (3.1416, -2)], dtype=[('x', '<f8'), ('y', '<i4')])\n```", "```py\nIn [150]: sarr[0]\nOut[150]: (1.5, 6)\n\nIn [151]: sarr[0]['y']\nOut[151]: 6\n```", "```py\nIn [152]: sarr['x']\nOut[152]: array([1.5   , 3.1416])\n```", "```py\nIn [153]: dtype = [('x', np.int64, 3), ('y', np.int32)]\n\nIn [154]: arr = np.zeros(4, dtype=dtype)\n\nIn [155]: arr\nOut[155]: \narray([([0, 0, 0], 0), ([0, 0, 0], 0), ([0, 0, 0], 0), ([0, 0, 0], 0)],\n dtype=[('x', '<i8', (3,)), ('y', '<i4')])\n```", "```py\nIn [156]: arr[0]['x']\nOut[156]: array([0, 0, 0])\n```", "```py\nIn [157]: arr['x']\nOut[157]: \narray([[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]])\n```", "```py\nIn [158]: dtype = [('x', [('a', 'f8'), ('b', 'f4')]), ('y', np.int32)]\n\nIn [159]: data = np.array([((1, 2), 5), ((3, 4), 6)], dtype=dtype)\n\nIn [160]: data['x']\nOut[160]: array([(1., 2.), (3., 4.)], dtype=[('a', '<f8'), ('b', '<f4')])\n\nIn [161]: data['y']\nOut[161]: array([5, 6], dtype=int32)\n\nIn [162]: data['x']['a']\nOut[162]: array([1., 3.])\n```", "```py\nIn [163]: arr = rng.standard_normal(6)\n\nIn [164]: arr.sort()\n\nIn [165]: arr\nOut[165]: array([-1.1553, -0.9319, -0.5218, -0.4745, -0.1649,  0.03  ])\n```", "```py\nIn [166]: arr = rng.standard_normal((3, 5))\n\nIn [167]: arr\nOut[167]: \narray([[-1.1956,  0.4691, -0.3598,  1.0359,  0.2267],\n [-0.7448, -0.5931, -1.055 , -0.0683,  0.458 ],\n [-0.07  ,  0.1462, -0.9944,  1.1436,  0.5026]])\n\nIn [168]: arr[:, 0].sort()  # Sort first column values in place\n\nIn [169]: arr\nOut[169]: \narray([[-1.1956,  0.4691, -0.3598,  1.0359,  0.2267],\n [-0.7448, -0.5931, -1.055 , -0.0683,  0.458 ],\n [-0.07  ,  0.1462, -0.9944,  1.1436,  0.5026]])\n```", "```py\nIn [170]: arr = rng.standard_normal(5)\n\nIn [171]: arr\nOut[171]: array([ 0.8981, -1.1704, -0.2686, -0.796 ,  1.4522])\n\nIn [172]: np.sort(arr)\nOut[172]: array([-1.1704, -0.796 , -0.2686,  0.8981,  1.4522])\n\nIn [173]: arr\nOut[173]: array([ 0.8981, -1.1704, -0.2686, -0.796 ,  1.4522])\n```", "```py\nIn [174]: arr = rng.standard_normal((3, 5))\n\nIn [175]: arr\nOut[175]: \narray([[-0.2535,  2.1183,  0.3634, -0.6245,  1.1279],\n [ 1.6164, -0.2287, -0.6201, -0.1143, -1.2067],\n [-1.0872, -2.1518, -0.6287, -1.3199,  0.083 ]])\n\nIn [176]: arr.sort(axis=1)\n\nIn [177]: arr\nOut[177]: \narray([[-0.6245, -0.2535,  0.3634,  1.1279,  2.1183],\n [-1.2067, -0.6201, -0.2287, -0.1143,  1.6164],\n [-2.1518, -1.3199, -1.0872, -0.6287,  0.083 ]])\n```", "```py\nIn [178]: arr[:, ::-1]\nOut[178]: \narray([[ 2.1183,  1.1279,  0.3634, -0.2535, -0.6245],\n [ 1.6164, -0.1143, -0.2287, -0.6201, -1.2067],\n [ 0.083 , -0.6287, -1.0872, -1.3199, -2.1518]])\n```", "```py\nIn [179]: values = np.array([5, 0, 1, 3, 2])\n\nIn [180]: indexer = values.argsort()\n\nIn [181]: indexer\nOut[181]: array([1, 2, 4, 3, 0])\n\nIn [182]: values[indexer]\nOut[182]: array([0, 1, 2, 3, 5])\n```", "```py\nIn [183]: arr = rng.standard_normal((3, 5))\n\nIn [184]: arr[0] = values\n\nIn [185]: arr\nOut[185]: \narray([[ 5.    ,  0.    ,  1.    ,  3.    ,  2.    ],\n [-0.7503, -2.1268, -1.391 , -0.4922,  0.4505],\n [ 0.8926, -1.0479,  0.9553,  0.2936,  0.5379]])\n\nIn [186]: arr[:, arr[0].argsort()]\nOut[186]: \narray([[ 0.    ,  1.    ,  2.    ,  3.    ,  5.    ],\n [-2.1268, -1.391 ,  0.4505, -0.4922, -0.7503],\n [-1.0479,  0.9553,  0.5379,  0.2936,  0.8926]])\n```", "```py\nIn [187]: first_name = np.array(['Bob', 'Jane', 'Steve', 'Bill', 'Barbara'])\n\nIn [188]: last_name = np.array(['Jones', 'Arnold', 'Arnold', 'Jones', 'Walters'])\n\nIn [189]: sorter = np.lexsort((first_name, last_name))\n\nIn [190]: sorter\nOut[190]: array([1, 2, 3, 0, 4])\n\nIn [191]: list(zip(last_name[sorter], first_name[sorter]))\nOut[191]: \n[('Arnold', 'Jane'),\n ('Arnold', 'Steve'),\n ('Jones', 'Bill'),\n ('Jones', 'Bob'),\n ('Walters', 'Barbara')]\n```", "```py\nIn [192]: values = np.array(['2:first', '2:second', '1:first', '1:second',\n .....:                    '1:third'])\n\nIn [193]: key = np.array([2, 2, 1, 1, 1])\n\nIn [194]: indexer = key.argsort(kind='mergesort')\n\nIn [195]: indexer\nOut[195]: array([2, 3, 4, 0, 1])\n\nIn [196]: values.take(indexer)\nOut[196]: \narray(['1:first', '1:second', '1:third', '2:first', '2:second'],\n dtype='<U8')\n```", "```py\nIn [197]: rng = np.random.default_rng(12345)\n\nIn [198]: arr = rng.standard_normal(20)\n\nIn [199]: arr\nOut[199]: \narray([-1.4238,  1.2637, -0.8707, -0.2592, -0.0753, -0.7409, -1.3678,\n 0.6489,  0.3611, -1.9529,  2.3474,  0.9685, -0.7594,  0.9022,\n -0.467 , -0.0607,  0.7888, -1.2567,  0.5759,  1.399 ])\n\nIn [200]: np.partition(arr, 3)\nOut[200]: \narray([-1.9529, -1.4238, -1.3678, -1.2567, -0.8707, -0.7594, -0.7409,\n -0.0607,  0.3611, -0.0753, -0.2592, -0.467 ,  0.5759,  0.9022,\n 0.9685,  0.6489,  0.7888,  1.2637,  1.399 ,  2.3474])\n```", "```py\nIn [201]: indices = np.argpartition(arr, 3)\n\nIn [202]: indices\nOut[202]: \narray([ 9,  0,  6, 17,  2, 12,  5, 15,  8,  4,  3, 14, 18, 13, 11,  7, 16,\n 1, 19, 10])\n\nIn [203]: arr.take(indices)\nOut[203]: \narray([-1.9529, -1.4238, -1.3678, -1.2567, -0.8707, -0.7594, -0.7409,\n -0.0607,  0.3611, -0.0753, -0.2592, -0.467 ,  0.5759,  0.9022,\n 0.9685,  0.6489,  0.7888,  1.2637,  1.399 ,  2.3474])\n```", "```py\nIn [204]: arr = np.array([0, 1, 7, 12, 15])\n\nIn [205]: arr.searchsorted(9)\nOut[205]: 3\n```", "```py\nIn [206]: arr.searchsorted([0, 8, 11, 16])\nOut[206]: array([0, 3, 3, 5])\n```", "```py\nIn [207]: arr = np.array([0, 0, 0, 1, 1, 1, 1])\n\nIn [208]: arr.searchsorted([0, 1])\nOut[208]: array([0, 3])\n\nIn [209]: arr.searchsorted([0, 1], side='right')\nOut[209]: array([3, 7])\n```", "```py\nIn [210]: data = np.floor(rng.uniform(0, 10000, size=50))\n\nIn [211]: bins = np.array([0, 100, 1000, 5000, 10000])\n\nIn [212]: data\nOut[212]: \narray([ 815., 1598., 3401., 4651., 2664., 8157., 1932., 1294.,  916.,\n 5985., 8547., 6016., 9319., 7247., 8605., 9293., 5461., 9376.,\n 4949., 2737., 4517., 6650., 3308., 9034., 2570., 3398., 2588.,\n 3554.,   50., 6286., 2823.,  680., 6168., 1763., 3043., 4408.,\n 1502., 2179., 4743., 4763., 2552., 2975., 2790., 2605., 4827.,\n 2119., 4956., 2462., 8384., 1801.])\n```", "```py\nIn [213]: labels = bins.searchsorted(data)\n\nIn [214]: labels\nOut[214]: \narray([2, 3, 3, 3, 3, 4, 3, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4,\n 3, 4, 3, 3, 3, 3, 1, 4, 3, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n 3, 3, 3, 3, 4, 3])\n```", "```py\nIn [215]: pd.Series(data).groupby(labels).mean()\nOut[215]: \n1      50.000000\n2     803.666667\n3    3079.741935\n4    7635.200000\ndtype: float64\n```", "```py\nimport numpy as np\n\ndef mean_distance(x, y):\n nx = len(x)\n result = 0.0\n count = 0\n for i in range(nx):\n result += x[i] - y[i]\n count += 1\n return result / count\n```", "```py\nIn [209]: x = rng.standard_normal(10_000_000)\n\nIn [210]: y = rng.standard_normal(10_000_000)\n\nIn [211]: %timeit mean_distance(x, y)\n1 loop, best of 3: 2 s per loop\n\nIn [212]: %timeit (x - y).mean()\n100 loops, best of 3: 14.7 ms per loop\n```", "```py\nIn [213]: import numba as nb\n\nIn [214]: numba_mean_distance = nb.jit(mean_distance)\n```", "```py\n@nb.jit\ndef numba_mean_distance(x, y):\n nx = len(x)\n result = 0.0\n count = 0\n for i in range(nx):\n result += x[i] - y[i]\n count += 1\n return result / count\n```", "```py\nIn [215]: %timeit numba_mean_distance(x, y)\n100 loops, best of 3: 10.3 ms per loop\n```", "```py\nfrom numba import float64, njit\n\n@njit(float64(float64[:], float64[:]))\ndef mean_distance(x, y):\n return (x - y).mean()\n```", "```py\nfrom numba import vectorize\n\n@vectorize\ndef nb_add(x, y):\n return x + y\n```", "```py\nIn [13]: x = np.arange(10)\n\nIn [14]: nb_add(x, x)\nOut[14]: array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.,  16.,  18.])\n\nIn [15]: nb_add.accumulate(x, 0)\nOut[15]: array([  0.,   1.,   3.,   6.,  10.,  15.,  21.,  28.,  36.,  45.])\n```", "```py\nIn [217]: mmap = np.memmap('mymmap', dtype='float64', mode='w+',\n .....:                  shape=(10000, 10000))\n\nIn [218]: mmap\nOut[218]: \nmemmap([[0., 0., 0., ..., 0., 0., 0.],\n [0., 0., 0., ..., 0., 0., 0.],\n [0., 0., 0., ..., 0., 0., 0.],\n ...,\n [0., 0., 0., ..., 0., 0., 0.],\n [0., 0., 0., ..., 0., 0., 0.],\n [0., 0., 0., ..., 0., 0., 0.]])\n```", "```py\nIn [219]: section = mmap[:5]\n```", "```py\nIn [220]: section[:] = rng.standard_normal((5, 10000))\n\nIn [221]: mmap.flush()\n\nIn [222]: mmap\nOut[222]: \nmemmap([[-0.9074, -1.0954,  0.0071, ...,  0.2753, -1.1641,  0.8521],\n [-0.0103, -0.0646, -1.0615, ..., -1.1003,  0.2505,  0.5832],\n [ 0.4583,  1.2992,  1.7137, ...,  0.8691, -0.7889, -0.2431],\n ...,\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ]])\n\nIn [223]: del mmap\n```", "```py\nIn [224]: mmap = np.memmap('mymmap', dtype='float64', shape=(10000, 10000))\n\nIn [225]: mmap\nOut[225]: \nmemmap([[-0.9074, -1.0954,  0.0071, ...,  0.2753, -1.1641,  0.8521],\n [-0.0103, -0.0646, -1.0615, ..., -1.1003,  0.2505,  0.5832],\n [ 0.4583,  1.2992,  1.7137, ...,  0.8691, -0.7889, -0.2431],\n ...,\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],\n [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ]])\n```", "```py\nIn [226]: %xdel mmap\n\nIn [227]: !rm mymmap\n```", "```py\nIn [228]: arr_c = np.ones((100, 10000), order='C')\n\nIn [229]: arr_f = np.ones((100, 10000), order='F')\n\nIn [230]: arr_c.flags\nOut[230]: \n C_CONTIGUOUS : True\n F_CONTIGUOUS : False\n OWNDATA : True\n WRITEABLE : True\n ALIGNED : True\n WRITEBACKIFCOPY : False\n\nIn [231]: arr_f.flags\nOut[231]: \n C_CONTIGUOUS : False\n F_CONTIGUOUS : True\n OWNDATA : True\n WRITEABLE : True\n ALIGNED : True\n WRITEBACKIFCOPY : False\n\nIn [232]: arr_f.flags.f_contiguous\nOut[232]: True\n```", "```py\nIn [233]: %timeit arr_c.sum(1)\n199 us +- 1.18 us per loop (mean +- std. dev. of 7 runs, 1000 loops each)\n\nIn [234]: %timeit arr_f.sum(1)\n371 us +- 6.77 us per loop (mean +- std. dev. of 7 runs, 1000 loops each)\n```", "```py\nIn [235]: arr_f.copy('C').flags\nOut[235]: \n C_CONTIGUOUS : True\n F_CONTIGUOUS : False\n OWNDATA : True\n WRITEABLE : True\n ALIGNED : True\n WRITEBACKIFCOPY : False\n```", "```py\nIn [236]: arr_c[:50].flags.contiguous\nOut[236]: True\n\nIn [237]: arr_c[:, :50].flags\nOut[237]: \n C_CONTIGUOUS : False\n F_CONTIGUOUS : False\n OWNDATA : False\n WRITEABLE : True\n ALIGNED : True\n WRITEBACKIFCOPY : False\n```"]