["```py\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n```", "```py\nIn [3]: from pandas import Series, DataFrame\n```", "```py\nIn [14]: obj = pd.Series([4, 7, -5, 3])\n\nIn [15]: obj\nOut[15]: \n0    4\n1    7\n2   -5\n3    3\ndtype: int64\n```", "```py\nIn [16]: obj.array\nOut[16]: \n<PandasArray>\n[4, 7, -5, 3]\nLength: 4, dtype: int64\n\nIn [17]: obj.index\nOut[17]: RangeIndex(start=0, stop=4, step=1)\n```", "```py\nIn [18]: obj2 = pd.Series([4, 7, -5, 3], index=[\"d\", \"b\", \"a\", \"c\"])\n\nIn [19]: obj2\nOut[19]: \nd    4\nb    7\na   -5\nc    3\ndtype: int64\n\nIn [20]: obj2.index\nOut[20]: Index(['d', 'b', 'a', 'c'], dtype='object')\n```", "```py\nIn [21]: obj2[\"a\"]\nOut[21]: -5\n\nIn [22]: obj2[\"d\"] = 6\n\nIn [23]: obj2[[\"c\", \"a\", \"d\"]]\nOut[23]: \nc    3\na   -5\nd    6\ndtype: int64\n```", "```py\nIn [24]: obj2[obj2 > 0]\nOut[24]: \nd    6\nb    7\nc    3\ndtype: int64\n\nIn [25]: obj2 * 2\nOut[25]: \nd    12\nb    14\na   -10\nc     6\ndtype: int64\n\nIn [26]: import numpy as np\n\nIn [27]: np.exp(obj2)\nOut[27]: \nd     403.428793\nb    1096.633158\na       0.006738\nc      20.085537\ndtype: float64\n```", "```py\nIn [28]: \"b\" in obj2\nOut[28]: True\n\nIn [29]: \"e\" in obj2\nOut[29]: False\n```", "```py\nIn [30]: sdata = {\"Ohio\": 35000, \"Texas\": 71000, \"Oregon\": 16000, \"Utah\": 5000}\n\nIn [31]: obj3 = pd.Series(sdata)\n\nIn [32]: obj3\nOut[32]: \nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64\n```", "```py\nIn [33]: obj3.to_dict()\nOut[33]: {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}\n```", "```py\nIn [34]: states = [\"California\", \"Ohio\", \"Oregon\", \"Texas\"]\n\nIn [35]: obj4 = pd.Series(sdata, index=states)\n\nIn [36]: obj4\nOut[36]: \nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\ndtype: float64\n```", "```py\nIn [37]: pd.isna(obj4)\nOut[37]: \nCalifornia     True\nOhio          False\nOregon        False\nTexas         False\ndtype: bool\n\nIn [38]: pd.notna(obj4)\nOut[38]: \nCalifornia    False\nOhio           True\nOregon         True\nTexas          True\ndtype: bool\n```", "```py\nIn [39]: obj4.isna()\nOut[39]: \nCalifornia     True\nOhio          False\nOregon        False\nTexas         False\ndtype: bool\n```", "```py\nIn [40]: obj3\nOut[40]: \nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64\n\nIn [41]: obj4\nOut[41]: \nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\ndtype: float64\n\nIn [42]: obj3 + obj4\nOut[42]: \nCalifornia         NaN\nOhio           70000.0\nOregon         32000.0\nTexas         142000.0\nUtah               NaN\ndtype: float64\n```", "```py\nIn [43]: obj4.name = \"population\"\n\nIn [44]: obj4.index.name = \"state\"\n\nIn [45]: obj4\nOut[45]: \nstate\nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\nName: population, dtype: float64\n```", "```py\nIn [46]: obj\nOut[46]: \n0    4\n1    7\n2   -5\n3    3\ndtype: int64\n\nIn [47]: obj.index = [\"Bob\", \"Steve\", \"Jeff\", \"Ryan\"]\n\nIn [48]: obj\nOut[48]: \nBob      4\nSteve    7\nJeff    -5\nRyan     3\ndtype: int64\n```", "```py\ndata = {\"state\": [\"Ohio\", \"Ohio\", \"Ohio\", \"Nevada\", \"Nevada\", \"Nevada\"],\n \"year\": [2000, 2001, 2002, 2001, 2002, 2003],\n \"pop\": [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\nframe = pd.DataFrame(data)\n```", "```py\nIn [50]: frame\nOut[50]: \n state  year  pop\n0    Ohio  2000  1.5\n1    Ohio  2001  1.7\n2    Ohio  2002  3.6\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n5  Nevada  2003  3.2\n```", "```py\nIn [51]: frame.head()\nOut[51]: \n state  year  pop\n0    Ohio  2000  1.5\n1    Ohio  2001  1.7\n2    Ohio  2002  3.6\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n```", "```py\nIn [52]: frame.tail()\nOut[52]: \n state  year  pop\n1    Ohio  2001  1.7\n2    Ohio  2002  3.6\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n5  Nevada  2003  3.2\n```", "```py\nIn [53]: pd.DataFrame(data, columns=[\"year\", \"state\", \"pop\"])\nOut[53]: \n year   state  pop\n0  2000    Ohio  1.5\n1  2001    Ohio  1.7\n2  2002    Ohio  3.6\n3  2001  Nevada  2.4\n4  2002  Nevada  2.9\n5  2003  Nevada  3.2\n```", "```py\nIn [54]: frame2 = pd.DataFrame(data, columns=[\"year\", \"state\", \"pop\", \"debt\"])\n\nIn [55]: frame2\nOut[55]: \n year   state  pop debt\n0  2000    Ohio  1.5  NaN\n1  2001    Ohio  1.7  NaN\n2  2002    Ohio  3.6  NaN\n3  2001  Nevada  2.4  NaN\n4  2002  Nevada  2.9  NaN\n5  2003  Nevada  3.2  NaN\n\nIn [56]: frame2.columns\nOut[56]: Index(['year', 'state', 'pop', 'debt'], dtype='object')\n```", "```py\nIn [57]: frame2[\"state\"]\nOut[57]: \n0      Ohio\n1      Ohio\n2      Ohio\n3    Nevada\n4    Nevada\n5    Nevada\nName: state, dtype: object\n\nIn [58]: frame2.year\nOut[58]: \n0    2000\n1    2001\n2    2002\n3    2001\n4    2002\n5    2003\nName: year, dtype: int64\n```", "```py\nIn [59]: frame2.loc[1]\nOut[59]: \nyear     2001\nstate    Ohio\npop       1.7\ndebt      NaN\nName: 1, dtype: object\n\nIn [60]: frame2.iloc[2]\nOut[60]: \nyear     2002\nstate    Ohio\npop       3.6\ndebt      NaN\nName: 2, dtype: object\n```", "```py\nIn [61]: frame2[\"debt\"] = 16.5\n\nIn [62]: frame2\nOut[62]: \n year   state  pop  debt\n0  2000    Ohio  1.5  16.5\n1  2001    Ohio  1.7  16.5\n2  2002    Ohio  3.6  16.5\n3  2001  Nevada  2.4  16.5\n4  2002  Nevada  2.9  16.5\n5  2003  Nevada  3.2  16.5\n\nIn [63]: frame2[\"debt\"] = np.arange(6.)\n\nIn [64]: frame2\nOut[64]: \n year   state  pop  debt\n0  2000    Ohio  1.5   0.0\n1  2001    Ohio  1.7   1.0\n2  2002    Ohio  3.6   2.0\n3  2001  Nevada  2.4   3.0\n4  2002  Nevada  2.9   4.0\n5  2003  Nevada  3.2   5.0\n```", "```py\nIn [65]: val = pd.Series([-1.2, -1.5, -1.7], index=[2, 4, 5])\n\nIn [66]: frame2[\"debt\"] = val\n\nIn [67]: frame2\nOut[67]: \n year   state  pop  debt\n0  2000    Ohio  1.5   NaN\n1  2001    Ohio  1.7   NaN\n2  2002    Ohio  3.6  -1.2\n3  2001  Nevada  2.4   NaN\n4  2002  Nevada  2.9  -1.5\n5  2003  Nevada  3.2  -1.7\n```", "```py\nIn [68]: frame2[\"eastern\"] = frame2[\"state\"] == \"Ohio\"\n\nIn [69]: frame2\nOut[69]: \n year   state  pop  debt  eastern\n0  2000    Ohio  1.5   NaN     True\n1  2001    Ohio  1.7   NaN     True\n2  2002    Ohio  3.6  -1.2     True\n3  2001  Nevada  2.4   NaN    False\n4  2002  Nevada  2.9  -1.5    False\n5  2003  Nevada  3.2  -1.7    False\n```", "```py\nIn [70]: del frame2[\"eastern\"]\n\nIn [71]: frame2.columns\nOut[71]: Index(['year', 'state', 'pop', 'debt'], dtype='object')\n```", "```py\nIn [72]: populations = {\"Ohio\": {2000: 1.5, 2001: 1.7, 2002: 3.6},\n ....:                \"Nevada\": {2001: 2.4, 2002: 2.9}}\n```", "```py\nIn [73]: frame3 = pd.DataFrame(populations)\n\nIn [74]: frame3\nOut[74]: \n Ohio  Nevada\n2000   1.5     NaN\n2001   1.7     2.4\n2002   3.6     2.9\n```", "```py\nIn [75]: frame3.T\nOut[75]: \n 2000  2001  2002\nOhio     1.5   1.7   3.6\nNevada   NaN   2.4   2.9\n```", "```py\nIn [76]: pd.DataFrame(populations, index=[2001, 2002, 2003])\nOut[76]: \n Ohio  Nevada\n2001   1.7     2.4\n2002   3.6     2.9\n2003   NaN     NaN\n```", "```py\nIn [77]: pdata = {\"Ohio\": frame3[\"Ohio\"][:-1],\n ....:          \"Nevada\": frame3[\"Nevada\"][:2]}\n\nIn [78]: pd.DataFrame(pdata)\nOut[78]: \n Ohio  Nevada\n2000   1.5     NaN\n2001   1.7     2.4\n```", "```py\nIn [79]: frame3.index.name = \"year\"\n\nIn [80]: frame3.columns.name = \"state\"\n\nIn [81]: frame3\nOut[81]: \nstate  Ohio  Nevada\nyear \n2000    1.5     NaN\n2001    1.7     2.4\n2002    3.6     2.9\n```", "```py\nIn [82]: frame3.to_numpy()\nOut[82]: \narray([[1.5, nan],\n [1.7, 2.4],\n [3.6, 2.9]])\n```", "```py\nIn [83]: frame2.to_numpy()\nOut[83]: \narray([[2000, 'Ohio', 1.5, nan],\n [2001, 'Ohio', 1.7, nan],\n [2002, 'Ohio', 3.6, -1.2],\n [2001, 'Nevada', 2.4, nan],\n [2002, 'Nevada', 2.9, -1.5],\n [2003, 'Nevada', 3.2, -1.7]], dtype=object)\n```", "```py\nIn [84]: obj = pd.Series(np.arange(3), index=[\"a\", \"b\", \"c\"])\n\nIn [85]: index = obj.index\n\nIn [86]: index\nOut[86]: Index(['a', 'b', 'c'], dtype='object')\n\nIn [87]: index[1:]\nOut[87]: Index(['b', 'c'], dtype='object')\n```", "```py\nindex[1] = \"d\"  # TypeError\n```", "```py\nIn [88]: labels = pd.Index(np.arange(3))\n\nIn [89]: labels\nOut[89]: Index([0, 1, 2], dtype='int64')\n\nIn [90]: obj2 = pd.Series([1.5, -2.5, 0], index=labels)\n\nIn [91]: obj2\nOut[91]: \n0    1.5\n1   -2.5\n2    0.0\ndtype: float64\n\nIn [92]: obj2.index is labels\nOut[92]: True\n```", "```py\nIn [93]: frame3\nOut[93]: \nstate  Ohio  Nevada\nyear \n2000    1.5     NaN\n2001    1.7     2.4\n2002    3.6     2.9\n\nIn [94]: frame3.columns\nOut[94]: Index(['Ohio', 'Nevada'], dtype='object', name='state')\n\nIn [95]: \"Ohio\" in frame3.columns\nOut[95]: True\n\nIn [96]: 2003 in frame3.index\nOut[96]: False\n```", "```py\nIn [97]: pd.Index([\"foo\", \"foo\", \"bar\", \"bar\"])\nOut[97]: Index(['foo', 'foo', 'bar', 'bar'], dtype='object')\n```", "```py\nIn [98]: obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=[\"d\", \"b\", \"a\", \"c\"])\n\nIn [99]: obj\nOut[99]: \nd    4.5\nb    7.2\na   -5.3\nc    3.6\ndtype: float64\n```", "```py\nIn [100]: obj2 = obj.reindex([\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [101]: obj2\nOut[101]: \na   -5.3\nb    7.2\nc    3.6\nd    4.5\ne    NaN\ndtype: float64\n```", "```py\nIn [102]: obj3 = pd.Series([\"blue\", \"purple\", \"yellow\"], index=[0, 2, 4])\n\nIn [103]: obj3\nOut[103]: \n0      blue\n2    purple\n4    yellow\ndtype: object\n\nIn [104]: obj3.reindex(np.arange(6), method=\"ffill\")\nOut[104]: \n0      blue\n1      blue\n2    purple\n3    purple\n4    yellow\n5    yellow\ndtype: object\n```", "```py\nIn [105]: frame = pd.DataFrame(np.arange(9).reshape((3, 3)),\n .....:                      index=[\"a\", \"c\", \"d\"],\n .....:                      columns=[\"Ohio\", \"Texas\", \"California\"])\n\nIn [106]: frame\nOut[106]: \n Ohio  Texas  California\na     0      1           2\nc     3      4           5\nd     6      7           8\n\nIn [107]: frame2 = frame.reindex(index=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [108]: frame2\nOut[108]: \n Ohio  Texas  California\na   0.0    1.0         2.0\nb   NaN    NaN         NaN\nc   3.0    4.0         5.0\nd   6.0    7.0         8.0\n```", "```py\nIn [109]: states = [\"Texas\", \"Utah\", \"California\"]\n\nIn [110]: frame.reindex(columns=states)\nOut[110]: \n Texas  Utah  California\na      1   NaN           2\nc      4   NaN           5\nd      7   NaN           8\n```", "```py\nIn [111]: frame.reindex(states, axis=\"columns\")\nOut[111]: \n Texas  Utah  California\na      1   NaN           2\nc      4   NaN           5\nd      7   NaN           8\n```", "```py\nIn [112]: frame.loc[[\"a\", \"d\", \"c\"], [\"California\", \"Texas\"]]\nOut[112]: \n California  Texas\na           2      1\nd           8      7\nc           5      4\n```", "```py\nIn [113]: obj = pd.Series(np.arange(5.), index=[\"a\", \"b\", \"c\", \"d\", \"e\"])\n\nIn [114]: obj\nOut[114]: \na    0.0\nb    1.0\nc    2.0\nd    3.0\ne    4.0\ndtype: float64\n\nIn [115]: new_obj = obj.drop(\"c\")\n\nIn [116]: new_obj\nOut[116]: \na    0.0\nb    1.0\nd    3.0\ne    4.0\ndtype: float64\n\nIn [117]: obj.drop([\"d\", \"c\"])\nOut[117]: \na    0.0\nb    1.0\ne    4.0\ndtype: float64\n```", "```py\nIn [118]: data = pd.DataFrame(np.arange(16).reshape((4, 4)),\n .....:                     index=[\"Ohio\", \"Colorado\", \"Utah\", \"New York\"],\n .....:                     columns=[\"one\", \"two\", \"three\", \"four\"])\n\nIn [119]: data\nOut[119]: \n one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n```", "```py\nIn [120]: data.drop(index=[\"Colorado\", \"Ohio\"])\nOut[120]: \n one  two  three  four\nUtah        8    9     10    11\nNew York   12   13     14    15\n```", "```py\nIn [121]: data.drop(columns=[\"two\"])\nOut[121]: \n one  three  four\nOhio        0      2     3\nColorado    4      6     7\nUtah        8     10    11\nNew York   12     14    15\n```", "```py\nIn [122]: data.drop(\"two\", axis=1)\nOut[122]: \n one  three  four\nOhio        0      2     3\nColorado    4      6     7\nUtah        8     10    11\nNew York   12     14    15\n\nIn [123]: data.drop([\"two\", \"four\"], axis=\"columns\")\nOut[123]: \n one  three\nOhio        0      2\nColorado    4      6\nUtah        8     10\nNew York   12     14\n```", "```py\nIn [124]: obj = pd.Series(np.arange(4.), index=[\"a\", \"b\", \"c\", \"d\"])\n\nIn [125]: obj\nOut[125]: \na    0.0\nb    1.0\nc    2.0\nd    3.0\ndtype: float64\n\nIn [126]: obj[\"b\"]\nOut[126]: 1.0\n\nIn [127]: obj[1]\nOut[127]: 1.0\n\nIn [128]: obj[2:4]\nOut[128]: \nc    2.0\nd    3.0\ndtype: float64\n\nIn [129]: obj[[\"b\", \"a\", \"d\"]]\nOut[129]: \nb    1.0\na    0.0\nd    3.0\ndtype: float64\n\nIn [130]: obj[[1, 3]]\nOut[130]: \nb    1.0\nd    3.0\ndtype: float64\n\nIn [131]: obj[obj < 2]\nOut[131]: \na    0.0\nb    1.0\ndtype: float64\n```", "```py\nIn [132]: obj.loc[[\"b\", \"a\", \"d\"]]\nOut[132]: \nb    1.0\na    0.0\nd    3.0\ndtype: float64\n```", "```py\nIn [133]: obj1 = pd.Series([1, 2, 3], index=[2, 0, 1])\n\nIn [134]: obj2 = pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"])\n\nIn [135]: obj1\nOut[135]: \n2    1\n0    2\n1    3\ndtype: int64\n\nIn [136]: obj2\nOut[136]: \na    1\nb    2\nc    3\ndtype: int64\n\nIn [137]: obj1[[0, 1, 2]]\nOut[137]: \n0    2\n1    3\n2    1\ndtype: int64\n\nIn [138]: obj2[[0, 1, 2]]\nOut[138]: \na    1\nb    2\nc    3\ndtype: int64\n```", "```py\nIn [134]: obj2.loc[[0, 1]]\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/tmp/ipykernel_804589/4185657903.py in <module>\n----> 1 obj2.loc[[0, 1]]\n\n^ LONG EXCEPTION ABBREVIATED ^\n\nKeyError: \"None of [Int64Index([0, 1], dtype=\"int64\")] are in the [index]\"\n```", "```py\nIn [139]: obj1.iloc[[0, 1, 2]]\nOut[139]: \n2    1\n0    2\n1    3\ndtype: int64\n\nIn [140]: obj2.iloc[[0, 1, 2]]\nOut[140]: \na    1\nb    2\nc    3\ndtype: int64\n```", "```py\nIn [141]: obj2.loc[\"b\":\"c\"]\nOut[141]: \nb    2\nc    3\ndtype: int64\n```", "```py\nIn [142]: obj2.loc[\"b\":\"c\"] = 5\n\nIn [143]: obj2\nOut[143]: \na    1\nb    5\nc    5\ndtype: int64\n```", "```py\nIn [144]: data = pd.DataFrame(np.arange(16).reshape((4, 4)),\n .....:                     index=[\"Ohio\", \"Colorado\", \"Utah\", \"New York\"],\n .....:                     columns=[\"one\", \"two\", \"three\", \"four\"])\n\nIn [145]: data\nOut[145]: \n one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n\nIn [146]: data[\"two\"]\nOut[146]: \nOhio         1\nColorado     5\nUtah         9\nNew York    13\nName: two, dtype: int64\n\nIn [147]: data[[\"three\", \"one\"]]\nOut[147]: \n three  one\nOhio          2    0\nColorado      6    4\nUtah         10    8\nNew York     14   12\n```", "```py\nIn [148]: data[:2]\nOut[148]: \n one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\n\nIn [149]: data[data[\"three\"] > 5]\nOut[149]: \n one  two  three  four\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n```", "```py\nIn [150]: data < 5\nOut[150]: \n one    two  three   four\nOhio       True   True   True   True\nColorado   True  False  False  False\nUtah      False  False  False  False\nNew York  False  False  False  False\n```", "```py\nIn [151]: data[data < 5] = 0\n\nIn [152]: data\nOut[152]: \n one  two  three  four\nOhio        0    0      0     0\nColorado    0    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n```", "```py\nIn [153]: data\nOut[153]: \n one  two  three  four\nOhio        0    0      0     0\nColorado    0    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n\nIn [154]: data.loc[\"Colorado\"]\nOut[154]: \none      0\ntwo      5\nthree    6\nfour     7\nName: Colorado, dtype: int64\n```", "```py\nIn [155]: data.loc[[\"Colorado\", \"New York\"]]\nOut[155]: \n one  two  three  four\nColorado    0    5      6     7\nNew York   12   13     14    15\n```", "```py\nIn [156]: data.loc[\"Colorado\", [\"two\", \"three\"]]\nOut[156]: \ntwo      5\nthree    6\nName: Colorado, dtype: int64\n```", "```py\nIn [157]: data.iloc[2]\nOut[157]: \none       8\ntwo       9\nthree    10\nfour     11\nName: Utah, dtype: int64\n\nIn [158]: data.iloc[[2, 1]]\nOut[158]: \n one  two  three  four\nUtah        8    9     10    11\nColorado    0    5      6     7\n\nIn [159]: data.iloc[2, [3, 0, 1]]\nOut[159]: \nfour    11\none      8\ntwo      9\nName: Utah, dtype: int64\n\nIn [160]: data.iloc[[1, 2], [3, 0, 1]]\nOut[160]: \n four  one  two\nColorado     7    0    5\nUtah        11    8    9\n```", "```py\nIn [161]: data.loc[:\"Utah\", \"two\"]\nOut[161]: \nOhio        0\nColorado    5\nUtah        9\nName: two, dtype: int64\n\nIn [162]: data.iloc[:, :3][data.three > 5]\nOut[162]: \n one  two  three\nColorado    0    5      6\nUtah        8    9     10\nNew York   12   13     14\n```", "```py\nIn [163]: data.loc[data.three >= 2]\nOut[163]: \n one  two  three  four\nColorado    0    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n```", "```py\nIn [164]: ser = pd.Series(np.arange(3.))\n\nIn [165]: ser\nOut[165]: \n0    0.0\n1    1.0\n2    2.0\ndtype: float64\n\nIn [166]: ser[-1]\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/miniforge-x86/envs/book-env/lib/python3.10/site-packages/pandas/core/indexes/ra\nnge.py in get_loc(self, key)\n 344             try:\n--> 345                 return self._range.index(new_key)\n 346             except ValueError as err:\nValueError: -1 is not in range\nThe above exception was the direct cause of the following exception:\nKeyError                                  Traceback (most recent call last)\n<ipython-input-166-44969a759c20> in <module>\n----> 1 ser[-1]\n~/miniforge-x86/envs/book-env/lib/python3.10/site-packages/pandas/core/series.py \nin __getitem__(self, key)\n 1010 \n 1011         elif key_is_scalar:\n-> 1012             return self._get_value(key)\n 1013 \n 1014         if is_hashable(key):\n~/miniforge-x86/envs/book-env/lib/python3.10/site-packages/pandas/core/series.py \nin _get_value(self, label, takeable)\n 1119 \n 1120         # Similar to Index.get_value, but we do not fall back to position\nal\n-> 1121         loc = self.index.get_loc(label)\n 1122 \n 1123         if is_integer(loc):\n~/miniforge-x86/envs/book-env/lib/python3.10/site-packages/pandas/core/indexes/ra\nnge.py in get_loc(self, key)\n 345                 return self._range.index(new_key)\n 346             except ValueError as err:\n--> 347                 raise KeyError(key) from err\n 348         self._check_indexing_error(key)\n 349         raise KeyError(key)\nKeyError: -1\n```", "```py\nIn [167]: ser\nOut[167]: \n0    0.0\n1    1.0\n2    2.0\ndtype: float64\n```", "```py\nIn [168]: ser2 = pd.Series(np.arange(3.), index=[\"a\", \"b\", \"c\"])\n\nIn [169]: ser2[-1]\nOut[169]: 2.0\n```", "```py\nIn [170]: ser.iloc[-1]\nOut[170]: 2.0\n```", "```py\nIn [171]: ser[:2]\nOut[171]: \n0    0.0\n1    1.0\ndtype: float64\n```", "```py\nIn [172]: data.loc[:, \"one\"] = 1\n\nIn [173]: data\nOut[173]: \n one  two  three  four\nOhio        1    0      0     0\nColorado    1    5      6     7\nUtah        1    9     10    11\nNew York    1   13     14    15\n\nIn [174]: data.iloc[2] = 5\n\nIn [175]: data\nOut[175]: \n one  two  three  four\nOhio        1    0      0     0\nColorado    1    5      6     7\nUtah        5    5      5     5\nNew York    1   13     14    15\n\nIn [176]: data.loc[data[\"four\"] > 5] = 3\n\nIn [177]: data\nOut[177]: \n one  two  three  four\nOhio        1    0      0     0\nColorado    3    3      3     3\nUtah        5    5      5     5\nNew York    3    3      3     3\n```", "```py\nIn [177]: data.loc[data.three == 5][\"three\"] = 6\n<ipython-input-11-0ed1cf2155d5>:1: SettingWithCopyWarning:\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n```", "```py\nIn [179]: data\nOut[179]: \n one  two  three  four\nOhio        1    0      0     0\nColorado    3    3      3     3\nUtah        5    5      5     5\nNew York    3    3      3     3\n```", "```py\nIn [180]: data.loc[data.three == 5, \"three\"] = 6\n\nIn [181]: data\nOut[181]: \n one  two  three  four\nOhio        1    0      0     0\nColorado    3    3      3     3\nUtah        5    5      6     5\nNew York    3    3      3     3\n```", "```py\nIn [182]: s1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=[\"a\", \"c\", \"d\", \"e\"])\n\nIn [183]: s2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1],\n .....:                index=[\"a\", \"c\", \"e\", \"f\", \"g\"])\n\nIn [184]: s1\nOut[184]: \na    7.3\nc   -2.5\nd    3.4\ne    1.5\ndtype: float64\n\nIn [185]: s2\nOut[185]: \na   -2.1\nc    3.6\ne   -1.5\nf    4.0\ng    3.1\ndtype: float64\n```", "```py\nIn [186]: s1 + s2\nOut[186]: \na    5.2\nc    1.1\nd    NaN\ne    0.0\nf    NaN\ng    NaN\ndtype: float64\n```", "```py\nIn [187]: df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list(\"bcd\"),\n .....:                    index=[\"Ohio\", \"Texas\", \"Colorado\"])\n\nIn [188]: df2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list(\"bde\"),\n .....:                    index=[\"Utah\", \"Ohio\", \"Texas\", \"Oregon\"])\n\nIn [189]: df1\nOut[189]: \n b    c    d\nOhio      0.0  1.0  2.0\nTexas     3.0  4.0  5.0\nColorado  6.0  7.0  8.0\n\nIn [190]: df2\nOut[190]: \n b     d     e\nUtah    0.0   1.0   2.0\nOhio    3.0   4.0   5.0\nTexas   6.0   7.0   8.0\nOregon  9.0  10.0  11.0\n```", "```py\nIn [191]: df1 + df2\nOut[191]: \n b   c     d   e\nColorado  NaN NaN   NaN NaN\nOhio      3.0 NaN   6.0 NaN\nOregon    NaN NaN   NaN NaN\nTexas     9.0 NaN  12.0 NaN\nUtah      NaN NaN   NaN NaN\n```", "```py\nIn [192]: df1 = pd.DataFrame({\"A\": [1, 2]})\n\nIn [193]: df2 = pd.DataFrame({\"B\": [3, 4]})\n\nIn [194]: df1\nOut[194]: \n A\n0  1\n1  2\n\nIn [195]: df2\nOut[195]: \n B\n0  3\n1  4\n\nIn [196]: df1 + df2\nOut[196]: \n A   B\n0 NaN NaN\n1 NaN NaN\n```", "```py\nIn [197]: df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)),\n .....:                    columns=list(\"abcd\"))\n\nIn [198]: df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)),\n .....:                    columns=list(\"abcde\"))\n\nIn [199]: df2.loc[1, \"b\"] = np.nan\n\nIn [200]: df1\nOut[200]: \n a    b     c     d\n0  0.0  1.0   2.0   3.0\n1  4.0  5.0   6.0   7.0\n2  8.0  9.0  10.0  11.0\n\nIn [201]: df2\nOut[201]: \n a     b     c     d     e\n0   0.0   1.0   2.0   3.0   4.0\n1   5.0   NaN   7.0   8.0   9.0\n2  10.0  11.0  12.0  13.0  14.0\n3  15.0  16.0  17.0  18.0  19.0\n```", "```py\nIn [202]: df1 + df2\nOut[202]: \n a     b     c     d   e\n0   0.0   2.0   4.0   6.0 NaN\n1   9.0   NaN  13.0  15.0 NaN\n2  18.0  20.0  22.0  24.0 NaN\n3   NaN   NaN   NaN   NaN NaN\n```", "```py\nIn [203]: df1.add(df2, fill_value=0)\nOut[203]: \n a     b     c     d     e\n0   0.0   2.0   4.0   6.0   4.0\n1   9.0   5.0  13.0  15.0   9.0\n2  18.0  20.0  22.0  24.0  14.0\n3  15.0  16.0  17.0  18.0  19.0\n```", "```py\nIn [204]: 1 / df1\nOut[204]: \n a         b         c         d\n0    inf  1.000000  0.500000  0.333333\n1  0.250  0.200000  0.166667  0.142857\n2  0.125  0.111111  0.100000  0.090909\n\nIn [205]: df1.rdiv(1)\nOut[205]: \n a         b         c         d\n0    inf  1.000000  0.500000  0.333333\n1  0.250  0.200000  0.166667  0.142857\n2  0.125  0.111111  0.100000  0.090909\n```", "```py\nIn [206]: df1.reindex(columns=df2.columns, fill_value=0)\nOut[206]: \n a    b     c     d  e\n0  0.0  1.0   2.0   3.0  0\n1  4.0  5.0   6.0   7.0  0\n2  8.0  9.0  10.0  11.0  0\n```", "```py\nIn [207]: arr = np.arange(12.).reshape((3, 4))\n\nIn [208]: arr\nOut[208]: \narray([[ 0.,  1.,  2.,  3.],\n [ 4.,  5.,  6.,  7.],\n [ 8.,  9., 10., 11.]])\n\nIn [209]: arr[0]\nOut[209]: array([0., 1., 2., 3.])\n\nIn [210]: arr - arr[0]\nOut[210]: \narray([[0., 0., 0., 0.],\n [4., 4., 4., 4.],\n [8., 8., 8., 8.]])\n```", "```py\nIn [211]: frame = pd.DataFrame(np.arange(12.).reshape((4, 3)),\n .....:                      columns=list(\"bde\"),\n .....:                      index=[\"Utah\", \"Ohio\", \"Texas\", \"Oregon\"])\n\nIn [212]: series = frame.iloc[0]\n\nIn [213]: frame\nOut[213]: \n b     d     e\nUtah    0.0   1.0   2.0\nOhio    3.0   4.0   5.0\nTexas   6.0   7.0   8.0\nOregon  9.0  10.0  11.0\n\nIn [214]: series\nOut[214]: \nb    0.0\nd    1.0\ne    2.0\nName: Utah, dtype: float64\n```", "```py\nIn [215]: frame - series\nOut[215]: \n b    d    e\nUtah    0.0  0.0  0.0\nOhio    3.0  3.0  3.0\nTexas   6.0  6.0  6.0\nOregon  9.0  9.0  9.0\n```", "```py\nIn [216]: series2 = pd.Series(np.arange(3), index=[\"b\", \"e\", \"f\"])\n\nIn [217]: series2\nOut[217]: \nb    0\ne    1\nf    2\ndtype: int64\n\nIn [218]: frame + series2\nOut[218]: \n b   d     e   f\nUtah    0.0 NaN   3.0 NaN\nOhio    3.0 NaN   6.0 NaN\nTexas   6.0 NaN   9.0 NaN\nOregon  9.0 NaN  12.0 NaN\n```", "```py\nIn [219]: series3 = frame[\"d\"]\n\nIn [220]: frame\nOut[220]: \n b     d     e\nUtah    0.0   1.0   2.0\nOhio    3.0   4.0   5.0\nTexas   6.0   7.0   8.0\nOregon  9.0  10.0  11.0\n\nIn [221]: series3\nOut[221]: \nUtah       1.0\nOhio       4.0\nTexas      7.0\nOregon    10.0\nName: d, dtype: float64\n\nIn [222]: frame.sub(series3, axis=\"index\")\nOut[222]: \n b    d    e\nUtah   -1.0  0.0  1.0\nOhio   -1.0  0.0  1.0\nTexas  -1.0  0.0  1.0\nOregon -1.0  0.0  1.0\n```", "```py\nIn [223]: frame = pd.DataFrame(np.random.standard_normal((4, 3)),\n .....:                      columns=list(\"bde\"),\n .....:                      index=[\"Utah\", \"Ohio\", \"Texas\", \"Oregon\"])\n\nIn [224]: frame\nOut[224]: \n b         d         e\nUtah   -0.204708  0.478943 -0.519439\nOhio   -0.555730  1.965781  1.393406\nTexas   0.092908  0.281746  0.769023\nOregon  1.246435  1.007189 -1.296221\n\nIn [225]: np.abs(frame)\nOut[225]: \n b         d         e\nUtah    0.204708  0.478943  0.519439\nOhio    0.555730  1.965781  1.393406\nTexas   0.092908  0.281746  0.769023\nOregon  1.246435  1.007189  1.296221\n```", "```py\nIn [226]: def f1(x):\n .....:     return x.max() - x.min()\n\nIn [227]: frame.apply(f1)\nOut[227]: \nb    1.802165\nd    1.684034\ne    2.689627\ndtype: float64\n```", "```py\nIn [228]: frame.apply(f1, axis=\"columns\")\nOut[228]: \nUtah      0.998382\nOhio      2.521511\nTexas     0.676115\nOregon    2.542656\ndtype: float64\n```", "```py\nIn [229]: def f2(x):\n .....:     return pd.Series([x.min(), x.max()], index=[\"min\", \"max\"])\n\nIn [230]: frame.apply(f2)\nOut[230]: \n b         d         e\nmin -0.555730  0.281746 -1.296221\nmax  1.246435  1.965781  1.393406\n```", "```py\nIn [231]: def my_format(x):\n .....:     return f\"{x:.2f}\"\n\nIn [232]: frame.applymap(my_format)\nOut[232]: \n b     d      e\nUtah    -0.20  0.48  -0.52\nOhio    -0.56  1.97   1.39\nTexas    0.09  0.28   0.77\nOregon   1.25  1.01  -1.30\n```", "```py\nIn [233]: frame[\"e\"].map(my_format)\nOut[233]: \nUtah      -0.52\nOhio       1.39\nTexas      0.77\nOregon    -1.30\nName: e, dtype: object\n```", "```py\nIn [234]: obj = pd.Series(np.arange(4), index=[\"d\", \"a\", \"b\", \"c\"])\n\nIn [235]: obj\nOut[235]: \nd    0\na    1\nb    2\nc    3\ndtype: int64\n\nIn [236]: obj.sort_index()\nOut[236]: \na    1\nb    2\nc    3\nd    0\ndtype: int64\n```", "```py\nIn [237]: frame = pd.DataFrame(np.arange(8).reshape((2, 4)),\n .....:                      index=[\"three\", \"one\"],\n .....:                      columns=[\"d\", \"a\", \"b\", \"c\"])\n\nIn [238]: frame\nOut[238]: \n d  a  b  c\nthree  0  1  2  3\none    4  5  6  7\n\nIn [239]: frame.sort_index()\nOut[239]: \n d  a  b  c\none    4  5  6  7\nthree  0  1  2  3\n\nIn [240]: frame.sort_index(axis=\"columns\")\nOut[240]: \n a  b  c  d\nthree  1  2  3  0\none    5  6  7  4\n```", "```py\nIn [241]: frame.sort_index(axis=\"columns\", ascending=False)\nOut[241]: \n d  c  b  a\nthree  0  3  2  1\none    4  7  6  5\n```", "```py\nIn [242]: obj = pd.Series([4, 7, -3, 2])\n\nIn [243]: obj.sort_values()\nOut[243]: \n2   -3\n3    2\n0    4\n1    7\ndtype: int64\n```", "```py\nIn [244]: obj = pd.Series([4, np.nan, 7, np.nan, -3, 2])\n\nIn [245]: obj.sort_values()\nOut[245]: \n4   -3.0\n5    2.0\n0    4.0\n2    7.0\n1    NaN\n3    NaN\ndtype: float64\n```", "```py\nIn [246]: obj.sort_values(na_position=\"first\")\nOut[246]: \n1    NaN\n3    NaN\n4   -3.0\n5    2.0\n0    4.0\n2    7.0\ndtype: float64\n```", "```py\nIn [247]: frame = pd.DataFrame({\"b\": [4, 7, -3, 2], \"a\": [0, 1, 0, 1]})\n\nIn [248]: frame\nOut[248]: \n b  a\n0  4  0\n1  7  1\n2 -3  0\n3  2  1\n\nIn [249]: frame.sort_values(\"b\")\nOut[249]: \n b  a\n2 -3  0\n3  2  1\n0  4  0\n1  7  1\n```", "```py\nIn [250]: frame.sort_values([\"a\", \"b\"])\nOut[250]: \n b  a\n2 -3  0\n0  4  0\n3  2  1\n1  7  1\n```", "```py\nIn [251]: obj = pd.Series([7, -5, 7, 4, 2, 0, 4])\n\nIn [252]: obj.rank()\nOut[252]: \n0    6.5\n1    1.0\n2    6.5\n3    4.5\n4    3.0\n5    2.0\n6    4.5\ndtype: float64\n```", "```py\nIn [253]: obj.rank(method=\"first\")\nOut[253]: \n0    6.0\n1    1.0\n2    7.0\n3    4.0\n4    3.0\n5    2.0\n6    5.0\ndtype: float64\n```", "```py\nIn [254]: obj.rank(ascending=False)\nOut[254]: \n0    1.5\n1    7.0\n2    1.5\n3    3.5\n4    5.0\n5    6.0\n6    3.5\ndtype: float64\n```", "```py\nIn [255]: frame = pd.DataFrame({\"b\": [4.3, 7, -3, 2], \"a\": [0, 1, 0, 1],\n .....:                       \"c\": [-2, 5, 8, -2.5]})\n\nIn [256]: frame\nOut[256]: \n b  a    c\n0  4.3  0 -2.0\n1  7.0  1  5.0\n2 -3.0  0  8.0\n3  2.0  1 -2.5\n\nIn [257]: frame.rank(axis=\"columns\")\nOut[257]: \n b    a    c\n0  3.0  2.0  1.0\n1  3.0  1.0  2.0\n2  1.0  2.0  3.0\n3  3.0  2.0  1.0\n```", "```py\nIn [258]: obj = pd.Series(np.arange(5), index=[\"a\", \"a\", \"b\", \"b\", \"c\"])\n\nIn [259]: obj\nOut[259]: \na    0\na    1\nb    2\nb    3\nc    4\ndtype: int64\n```", "```py\nIn [260]: obj.index.is_unique\nOut[260]: False\n```", "```py\nIn [261]: obj[\"a\"]\nOut[261]: \na    0\na    1\ndtype: int64\n\nIn [262]: obj[\"c\"]\nOut[262]: 4\n```", "```py\nIn [263]: df = pd.DataFrame(np.random.standard_normal((5, 3)),\n .....:                   index=[\"a\", \"a\", \"b\", \"b\", \"c\"])\n\nIn [264]: df\nOut[264]: \n 0         1         2\na  0.274992  0.228913  1.352917\na  0.886429 -2.001637 -0.371843\nb  1.669025 -0.438570 -0.539741\nb  0.476985  3.248944 -1.021228\nc -0.577087  0.124121  0.302614\n\nIn [265]: df.loc[\"b\"]\nOut[265]: \n 0         1         2\nb  1.669025 -0.438570 -0.539741\nb  0.476985  3.248944 -1.021228\n\nIn [266]: df.loc[\"c\"]\nOut[266]: \n0   -0.577087\n1    0.124121\n2    0.302614\nName: c, dtype: float64\n```", "```py\nIn [267]: df = pd.DataFrame([[1.4, np.nan], [7.1, -4.5],\n .....:                    [np.nan, np.nan], [0.75, -1.3]],\n .....:                   index=[\"a\", \"b\", \"c\", \"d\"],\n .....:                   columns=[\"one\", \"two\"])\n\nIn [268]: df\nOut[268]: \n one  two\na  1.40  NaN\nb  7.10 -4.5\nc   NaN  NaN\nd  0.75 -1.3\n```", "```py\nIn [269]: df.sum()\nOut[269]: \none    9.25\ntwo   -5.80\ndtype: float64\n```", "```py\nIn [270]: df.sum(axis=\"columns\")\nOut[270]: \na    1.40\nb    2.60\nc    0.00\nd   -0.55\ndtype: float64\n```", "```py\nIn [271]: df.sum(axis=\"index\", skipna=False)\nOut[271]: \none   NaN\ntwo   NaN\ndtype: float64\n\nIn [272]: df.sum(axis=\"columns\", skipna=False)\nOut[272]: \na     NaN\nb    2.60\nc     NaN\nd   -0.55\ndtype: float64\n```", "```py\nIn [273]: df.mean(axis=\"columns\")\nOut[273]: \na    1.400\nb    1.300\nc      NaN\nd   -0.275\ndtype: float64\n```", "```py\nIn [274]: df.idxmax()\nOut[274]: \none    b\ntwo    d\ndtype: object\n```", "```py\nIn [275]: df.cumsum()\nOut[275]: \n one  two\na  1.40  NaN\nb  8.50 -4.5\nc   NaN  NaN\nd  9.25 -5.8\n```", "```py\nIn [276]: df.describe()\nOut[276]: \n one       two\ncount  3.000000  2.000000\nmean   3.083333 -2.900000\nstd    3.493685  2.262742\nmin    0.750000 -4.500000\n25%    1.075000 -3.700000\n50%    1.400000 -2.900000\n75%    4.250000 -2.100000\nmax    7.100000 -1.300000\n```", "```py\nIn [277]: obj = pd.Series([\"a\", \"a\", \"b\", \"c\"] * 4)\n\nIn [278]: obj.describe()\nOut[278]: \ncount     16\nunique     3\ntop        a\nfreq       8\ndtype: object\n```", "```py\nIn [279]: price = pd.read_pickle(\"examples/yahoo_price.pkl\")\n\nIn [280]: volume = pd.read_pickle(\"examples/yahoo_volume.pkl\")\n```", "```py\nIn [281]: returns = price.pct_change()\n\nIn [282]: returns.tail()\nOut[282]: \n AAPL      GOOG       IBM      MSFT\nDate \n2016-10-17 -0.000680  0.001837  0.002072 -0.003483\n2016-10-18 -0.000681  0.019616 -0.026168  0.007690\n2016-10-19 -0.002979  0.007846  0.003583 -0.002255\n2016-10-20 -0.000512 -0.005652  0.001719 -0.004867\n2016-10-21 -0.003930  0.003011 -0.012474  0.042096\n```", "```py\nIn [283]: returns[\"MSFT\"].corr(returns[\"IBM\"])\nOut[283]: 0.49976361144151166\n\nIn [284]: returns[\"MSFT\"].cov(returns[\"IBM\"])\nOut[284]: 8.870655479703549e-05\n```", "```py\nIn [285]: returns.corr()\nOut[285]: \n AAPL      GOOG       IBM      MSFT\nAAPL  1.000000  0.407919  0.386817  0.389695\nGOOG  0.407919  1.000000  0.405099  0.465919\nIBM   0.386817  0.405099  1.000000  0.499764\nMSFT  0.389695  0.465919  0.499764  1.000000\n\nIn [286]: returns.cov()\nOut[286]: \n AAPL      GOOG       IBM      MSFT\nAAPL  0.000277  0.000107  0.000078  0.000095\nGOOG  0.000107  0.000251  0.000078  0.000108\nIBM   0.000078  0.000078  0.000146  0.000089\nMSFT  0.000095  0.000108  0.000089  0.000215\n```", "```py\nIn [287]: returns.corrwith(returns[\"IBM\"])\nOut[287]: \nAAPL    0.386817\nGOOG    0.405099\nIBM     1.000000\nMSFT    0.499764\ndtype: float64\n```", "```py\nIn [288]: returns.corrwith(volume)\nOut[288]: \nAAPL   -0.075565\nGOOG   -0.007067\nIBM    -0.204849\nMSFT   -0.092950\ndtype: float64\n```", "```py\nIn [289]: obj = pd.Series([\"c\", \"a\", \"d\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])\n```", "```py\nIn [290]: uniques = obj.unique()\n\nIn [291]: uniques\nOut[291]: array(['c', 'a', 'd', 'b'], dtype=object)\n```", "```py\nIn [292]: obj.value_counts()\nOut[292]: \nc    3\na    3\nb    2\nd    1\nName: count, dtype: int64\n```", "```py\nIn [293]: pd.value_counts(obj.to_numpy(), sort=False)\nOut[293]: \nc    3\na    3\nd    1\nb    2\nName: count, dtype: int64\n```", "```py\nIn [294]: obj\nOut[294]: \n0    c\n1    a\n2    d\n3    a\n4    a\n5    b\n6    b\n7    c\n8    c\ndtype: object\n\nIn [295]: mask = obj.isin([\"b\", \"c\"])\n\nIn [296]: mask\nOut[296]: \n0     True\n1    False\n2    False\n3    False\n4    False\n5     True\n6     True\n7     True\n8     True\ndtype: bool\n\nIn [297]: obj[mask]\nOut[297]: \n0    c\n5    b\n6    b\n7    c\n8    c\ndtype: object\n```", "```py\nIn [298]: to_match = pd.Series([\"c\", \"a\", \"b\", \"b\", \"c\", \"a\"])\n\nIn [299]: unique_vals = pd.Series([\"c\", \"b\", \"a\"])\n\nIn [300]: indices = pd.Index(unique_vals).get_indexer(to_match)\n\nIn [301]: indices\nOut[301]: array([0, 2, 1, 1, 0, 2])\n```", "```py\nIn [302]: data = pd.DataFrame({\"Qu1\": [1, 3, 4, 3, 4],\n .....:                      \"Qu2\": [2, 3, 1, 2, 3],\n .....:                      \"Qu3\": [1, 5, 2, 4, 4]})\n\nIn [303]: data\nOut[303]: \n Qu1  Qu2  Qu3\n0    1    2    1\n1    3    3    5\n2    4    1    2\n3    3    2    4\n4    4    3    4\n```", "```py\nIn [304]: data[\"Qu1\"].value_counts().sort_index()\nOut[304]: \nQu1\n1    1\n3    2\n4    2\nName: count, dtype: int64\n```", "```py\nIn [305]: result = data.apply(pd.value_counts).fillna(0)\n\nIn [306]: result\nOut[306]: \n Qu1  Qu2  Qu3\n1  1.0  1.0  1.0\n2  0.0  2.0  1.0\n3  2.0  2.0  0.0\n4  2.0  0.0  2.0\n5  0.0  0.0  1.0\n```", "```py\nIn [307]: data = pd.DataFrame({\"a\": [1, 1, 1, 2, 2], \"b\": [0, 0, 1, 0, 0]})\n\nIn [308]: data\nOut[308]: \n a  b\n0  1  0\n1  1  0\n2  1  1\n3  2  0\n4  2  0\n\nIn [309]: data.value_counts()\nOut[309]: \na  b\n1  0    2\n2  0    2\n1  1    1\nName: count, dtype: int64\n```"]