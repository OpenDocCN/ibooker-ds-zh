["```py\nIn [20]: a = np.random.standard_normal((100, 100))\n\n In [20]: %timeit np.dot(a, a)\n 92.5 \u00b5s \u00b1 3.43 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n```", "```py\nIn [21]: %debug?\n    Docstring:\n    ::\n\n    %debug [--breakpoint FILE:LINE] [statement [statement ...]]\n\n    Activate the interactive debugger.\n\n    This magic command support two ways of activating debugger.\n    One is to activate debugger before executing code.  This way, you\n    can set a break point, to step through the code from the point.\n    You can use this mode by giving statements to execute and optionally\n    a breakpoint.\n\n    The other one is to activate debugger in post-mortem mode.  You can\n    activate this mode simply running %debug without any argument.\n    If an exception has just occurred, this lets you inspect its stack\n    frames interactively.  Note that this will always work only on the last\n    traceback that occurred, so you must call this quickly after an\n    exception that you wish to inspect has fired, because if another one\n    occurs, it clobbers the previous one.\n\n    If you want IPython to automatically do this on every exception, see\n    the %pdb magic for more details.\n\n    .. versionchanged:: 7.3\n    When running code, user variables are no longer expanded,\n    the magic line is always left unmodified.\n\n    positional arguments:\n    statement             Code to run in debugger. You can omit this in cell \n    magic mode.\n\n    optional arguments:\n    --breakpoint <FILE:LINE>, -b <FILE:LINE>\n    Set break point at LINE in FILE.\n```", "```py\nIn [22]: %pwd\n Out[22]: '/home/wesm/code/pydata-book'\n\n In [23]: foo = %pwd\n\n In [24]: foo\n Out[24]: '/home/wesm/code/pydata-book'\n```", "```py\ndef f(x, y, z):\n return (x + y) / z\n\na = 5\nb = 6\nc = 7.5\n\nresult = f(a, b, c)\n```", "```py\nIn [14]: %run script.py\n```", "```py\nIn [15]: c\nOut [15]: 7.5\n\nIn [16]: result\nOut[16]: 1.4666666666666666\n```", "```py\nIn [16]: %load script.py\n\n def f(x, y, z):\n return (x + y) / z\n\n a = 5\n b = 6\n c = 7.5\n\n result = f(a, b, c)\n```", "```py\nx = 5\ny = 7\nif x > 5:\n x += 1\n y = 8\n```", "```py\nIn [17]: %paste\nx = 5\ny = 7\nif x > 5:\n x += 1\n\n y = 8\n## -- End pasted text --\n```", "```py\nIn [18]: %cpaste\nPasting code; enter '--' alone on the line to stop or use Ctrl-D.\n:x = 5\n:y = 7\n:if x > 5:\n:    x += 1\n:\n:    y = 8\n:--\n```", "```py\nIn[7]: %run first/second/third/data_script.py\n```", "```py\nIn [1]: a_command = foo(x, y, z)\n\n(reverse-i-search)`com': a_command = foo(x, y, z)\n```", "```py\nIn [18]: 'input1'\nOut[18]: 'input1'\n\nIn [19]: 'input2'\nOut[19]: 'input2'\n\nIn [20]: __\nOut[20]: 'input1'\n\nIn [21]: 'input3'\nOut[21]: 'input3'\n\nIn [22]: _\nOut[22]: 'input3'\n```", "```py\nIn [26]: foo = 'bar'\n\nIn [27]: foo\nOut[27]: 'bar'\n\nIn [28]: _i27\nOut[28]: u'foo'\n\nIn [29]: _27\nOut[29]: 'bar'\n```", "```py\nIn [30]: eval(_i27)\nOut[30]: 'bar'\n```", "```py\nIn [1]: ip_info = !ifconfig wlan0 | grep \"inet \"\n\nIn [2]: ip_info[0].strip()\nOut[2]: 'inet addr:10.0.0.11  Bcast:10.0.0.255  Mask:255.255.255.0'\n```", "```py\nIn [3]: foo = 'test*'\n\nIn [4]: !ls $foo\ntest4.py  test.py  test.xml\n```", "```py\nIn [1]: %alias ll ls -l\n\nIn [2]: ll /usr\ntotal 332\ndrwxr-xr-x   2 root root  69632 2012-01-29 20:36 bin/\ndrwxr-xr-x   2 root root   4096 2010-08-23 12:05 games/\ndrwxr-xr-x 123 root root  20480 2011-12-26 18:08 include/\ndrwxr-xr-x 265 root root 126976 2012-01-29 20:36 lib/\ndrwxr-xr-x  44 root root  69632 2011-12-26 18:08 lib32/\nlrwxrwxrwx   1 root root      3 2010-08-23 16:02 lib64 -> lib/\ndrwxr-xr-x  15 root root   4096 2011-10-13 19:03 local/\ndrwxr-xr-x   2 root root  12288 2012-01-12 09:32 sbin/\ndrwxr-xr-x 387 root root  12288 2011-11-04 22:53 share/\ndrwxrwsr-x  24 root src    4096 2011-07-17 18:38 src/\n```", "```py\nIn [558]: %alias test_alias (cd examples; ls; cd ..)\n\nIn [559]: test_alias\nmacrodata.csv  spx.csv  tips.csv\n```", "```py\nIn [6]: %bookmark py4da /home/wesm/code/pydata-book\n```", "```py\nIn [7]: cd py4da\n(bookmark:py4da) -> /home/wesm/code/pydata-book\n/home/wesm/code/pydata-book\n```", "```py\nIn [8]: %bookmark -l\nCurrent bookmarks:\npy4da -> /home/wesm/code/pydata-book-source\n```", "```py\nIn [2]: run examples/ipython_bug.py\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n/home/wesm/code/pydata-book/examples/ipython_bug.py in <module>()\n 13     throws_an_exception()\n 14\n---> 15 calling_things()\n\n/home/wesm/code/pydata-book/examples/ipython_bug.py in calling_things()\n 11 def calling_things():\n 12     works_fine()\n---> 13     throws_an_exception()\n 14\n 15 calling_things()\n\n/home/wesm/code/pydata-book/examples/ipython_bug.py in throws_an_exception()\n 7     a = 5\n 8     b = 6\n----> 9     assert(a + b == 10)\n 10\n 11 def calling_things():\n\nAssertionError:\n\nIn [3]: %debug\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(9)throws_an_exception()\n 8     b = 6\n----> 9     assert(a + b == 10)\n 10\n\nipdb>\n```", "```py\nipdb> u\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(13)calling_things()\n 12     works_fine()\n---> 13     throws_an_exception()\n 14\n```", "```py\nIn [5]: run -d examples/ipython_bug.py\nBreakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to start your script.\n> <string>(1)<module>()\n\nipdb> s\n--Call--\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(1)<module>()\n1---> 1 def works_fine():\n 2     a = 5\n 3     b = 6\n```", "```py\nipdb> b 12\nipdb> c\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(12)calling_things()\n 11 def calling_things():\n2--> 12     works_fine()\n 13     throws_an_exception()\n```", "```py\nipdb> n\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(13)calling_things()\n2    12     works_fine()\n---> 13     throws_an_exception()\n 14\n```", "```py\nipdb> s\n--Call--\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(6)throws_an_exception()\n 5\n----> 6 def throws_an_exception():\n 7     a = 5\n\nipdb> n\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(7)throws_an_exception()\n 6 def throws_an_exception():\n----> 7     a = 5\n 8     b = 6\n\nipdb> n\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(8)throws_an_exception()\n 7     a = 5\n----> 8     b = 6\n 9     assert(a + b == 10)\n\nipdb> n\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(9)throws_an_exception()\n 8     b = 6\n----> 9     assert(a + b == 10)\n 10\n\nipdb> !a\n5\nipdb> !b\n6\n```", "```py\nfrom IPython.core.debugger import Pdb\n\ndef set_trace():\n Pdb(.set_trace(sys._getframe().f_back)\n\ndef debug(f, *args, **kwargs):\n pdb = Pdb()\n return pdb.runcall(f, *args, **kwargs)\n```", "```py\nIn [7]: run examples/ipython_bug.py\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(16)calling_things()\n 15     set_trace()\n---> 16     throws_an_exception()\n 17\n```", "```py\ndef f(x, y, z=1):\n tmp = x + y\n return tmp / z\n```", "```py\nIn [6]: debug(f, 1, 2, z=3)\n> <ipython-input>(2)f()\n 1 def f(x, y, z):\n----> 2     tmp = x + y\n 3     return tmp / z\n\nipdb>\n```", "```py\nIn [1]: %run -d examples/ipython_bug.py\nBreakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:1\nNOTE: Enter 'c' at the ipdb>  prompt to start your script.\n> <string>(1)<module>()\n\nipdb>\n```", "```py\nIn [2]: %run -d -b2 examples/ipython_bug.py\nBreakpoint 1 at /home/wesm/code/pydata-book/examples/ipython_bug.py:2\nNOTE: Enter 'c' at the ipdb>  prompt to start your script.\n> <string>(1)<module>()\n\nipdb> c\n> /home/wesm/code/pydata-book/examples/ipython_bug.py(2)works_fine()\n 1 def works_fine():\n1---> 2     a = 5\n 3     b = 6\n\nipdb>\n```", "```py\nimport time\nstart = time.time()\nfor i in range(iterations):\n # some code to run here\nelapsed_per = (time.time() - start) / iterations\n```", "```py\n# a very large list of strings\nIn [11]: strings = ['foo', 'foobar', 'baz', 'qux',\n ....:            'python', 'Guido Van Rossum'] * 100000\n\nIn [12]: method1 = [x for x in strings if x.startswith('foo')]\n\nIn [13]: method2 = [x for x in strings if x[:3] == 'foo']\n```", "```py\nIn [14]: %time method1 = [x for x in strings if x.startswith('foo')]\nCPU times: user 49.6 ms, sys: 676 us, total: 50.3 ms\nWall time: 50.1 ms\n\nIn [15]: %time method2 = [x for x in strings if x[:3] == 'foo']\nCPU times: user 40.3 ms, sys: 603 us, total: 40.9 ms\nWall time: 40.6 ms\n```", "```py\nIn [563]: %timeit [x for x in strings if x.startswith('foo')]\n10 loops, best of 3: 159 ms per loop\n\nIn [564]: %timeit [x for x in strings if x[:3] == 'foo']\n10 loops, best of 3: 59.3 ms per loop\n```", "```py\nIn [565]: x = 'foobar'\n\nIn [566]: y = 'foo'\n\nIn [567]: %timeit x.startswith(y)\n1000000 loops, best of 3: 267 ns per loop\n\nIn [568]: %timeit x[:3] == y\n10000000 loops, best of 3: 147 ns per loop\n```", "```py\nimport numpy as np\nfrom numpy.linalg import eigvals\n\ndef run_experiment(niter=100):\n K = 100\n results = []\n for _ in range(niter):\n mat = np.random.standard_normal((K, K))\n max_eigenvalue = np.abs(eigvals(mat)).max()\n results.append(max_eigenvalue)\n return results\nsome_results = run_experiment()\nprint('Largest one we saw: {0}'.format(np.max(some_results)))\n```", "```py\npython -m cProfile cprof_example.py\n```", "```py\n$ python -m cProfile -s cumulative cprof_example.py\nLargest one we saw: 11.923204422\n 15116 function calls (14927 primitive calls) in 0.720 seconds\n\nOrdered by: cumulative time\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 1    0.001    0.001    0.721    0.721 cprof_example.py:1(<module>)\n 100    0.003    0.000    0.586    0.006 linalg.py:702(eigvals)\n 200    0.572    0.003    0.572    0.003 {numpy.linalg.lapack_lite.dgeev}\n 1    0.002    0.002    0.075    0.075 __init__.py:106(<module>)\n 100    0.059    0.001    0.059    0.001 {method 'randn')\n 1    0.000    0.000    0.044    0.044 add_newdocs.py:9(<module>)\n 2    0.001    0.001    0.037    0.019 __init__.py:1(<module>)\n 2    0.003    0.002    0.030    0.015 __init__.py:2(<module>)\n 1    0.000    0.000    0.030    0.030 type_check.py:3(<module>)\n 1    0.001    0.001    0.021    0.021 __init__.py:15(<module>)\n 1    0.013    0.013    0.013    0.013 numeric.py:1(<module>)\n 1    0.000    0.000    0.009    0.009 __init__.py:6(<module>)\n 1    0.001    0.001    0.008    0.008 __init__.py:45(<module>)\n 262    0.005    0.000    0.007    0.000 function_base.py:3178(add_newdoc)\n 100    0.003    0.000    0.005    0.000 linalg.py:162(_assertFinite)\n ...\n```", "```py\nIn [4]: %prun -l 7 -s cumulative run_experiment()\n 4203 function calls in 0.643 seconds\n\nOrdered by: cumulative time\nList reduced from 32 to 7 due to restriction <7>\n\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 1    0.000    0.000    0.643    0.643 <string>:1(<module>)\n 1    0.001    0.001    0.643    0.643 cprof_example.py:4(run_experiment)\n 100    0.003    0.000    0.583    0.006 linalg.py:702(eigvals)\n 200    0.569    0.003    0.569    0.003 {numpy.linalg.lapack_lite.dgeev}\n 100    0.058    0.001    0.058    0.001 {method 'randn'}\n 100    0.003    0.000    0.005    0.000 linalg.py:162(_assertFinite)\n 200    0.002    0.000    0.002    0.000 {method 'all' of 'numpy.ndarray'}\n```", "```py\n# A list of dotted module names of IPython extensions to load.\nc.InteractiveShellApp.extensions = ['line_profiler']\n```", "```py\n%load_ext line_profiler\n```", "```py\nfrom numpy.random import randn\n\ndef add_and_sum(x, y):\n added = x + y\n summed = added.sum(axis=1)\n return summed\n\ndef call_function():\n x = randn(1000, 1000)\n y = randn(1000, 1000)\n return add_and_sum(x, y)\n```", "```py\nIn [569]: %run prof_mod\n\nIn [570]: x = randn(3000, 3000)\n\nIn [571]: y = randn(3000, 3000)\n\nIn [572]: %prun add_and_sum(x, y)\n 4 function calls in 0.049 seconds\n Ordered by: internal time\n ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n 1    0.036    0.036    0.046    0.046 prof_mod.py:3(add_and_sum)\n 1    0.009    0.009    0.009    0.009 {method 'sum' of 'numpy.ndarray'}\n 1    0.003    0.003    0.049    0.049 <string>:1(<module>)\n```", "```py\n%lprun -f func1 -f func2 statement_to_profile\n```", "```py\nIn [573]: %lprun -f add_and_sum add_and_sum(x, y)\nTimer unit: 1e-06 s\nFile: prof_mod.py\nFunction: add_and_sum at line 3\nTotal time: 0.045936 s\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n 3                                           def add_and_sum(x, y):\n 4         1        36510  36510.0     79.5      added = x + y\n 5         1         9425   9425.0     20.5      summed = added.sum(axis=1)\n 6         1            1      1.0      0.0      return summed\n```", "```py\nIn [574]: %lprun -f add_and_sum -f call_function call_function()\nTimer unit: 1e-06 s\nFile: prof_mod.py\nFunction: add_and_sum at line 3\nTotal time: 0.005526 s\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n 3                                           def add_and_sum(x, y):\n 4         1         4375   4375.0     79.2      added = x + y\n 5         1         1149   1149.0     20.8      summed = added.sum(axis=1)\n 6         1            2      2.0      0.0      return summed\nFile: prof_mod.py\nFunction: call_function at line 8\nTotal time: 0.121016 s\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n 8                                           def call_function():\n 9         1        57169  57169.0     47.2      x = randn(1000, 1000)\n 10         1        58304  58304.0     48.2      y = randn(1000, 1000)\n 11         1         5543   5543.0      4.6      return add_and_sum(x, y)\n```", "```py\nimport some_lib\n\nx = 5\ny = [1, 2, 3, 4]\nresult = some_lib.get_answer(x, y)\n```", "```py\nimport some_lib\nimport importlib\n\nimportlib.reload(some_lib)\n```", "```py\nfrom my_functions import g\n\ndef f(x, y):\n return g(x + y)\n\ndef main():\n x = 6\n y = 7.5\n result = x + y\n\nif __name__ == '__main__':\n main()\n```", "```py\n/home/wesm/.ipython/profile_default/ipython_config.py\n```", "```py\nipython profile create default\n```", "```py\nipython profile create secret_project\n```", "```py\n$ ipython --profile=secret_project\nPython 3.8.0 | packaged by conda-forge | (default, Nov 22 2019, 19:11:19)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.22.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIPython profile: secret_project\n```", "```py\njupyter notebook --generate-config\n```", "```py\n$ mv ~/.jupyter/jupyter_notebook_config.py ~/.jupyter/my_custom_config.py\n```", "```py\njupyter notebook --config=~/.jupyter/my_custom_config.py\n```"]