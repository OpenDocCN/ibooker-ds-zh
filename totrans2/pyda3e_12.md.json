["```py\n%matplotlib inline\n```", "```py\nIn [13]: import matplotlib.pyplot as plt\n```", "```py\nIn [14]: data = np.arange(10)\n\nIn [15]: data\nOut[15]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [16]: plt.plot(data)\n```", "```py\nIn [17]: fig = plt.figure()\n```", "```py\nIn [18]: ax1 = fig.add_subplot(2, 2, 1)\n```", "```py\nIn [19]: ax2 = fig.add_subplot(2, 2, 2)\n\nIn [20]: ax3 = fig.add_subplot(2, 2, 3)\n```", "```py\nfig = plt.figure()\nax1 = fig.add_subplot(2, 2, 1)\nax2 = fig.add_subplot(2, 2, 2)\nax3 = fig.add_subplot(2, 2, 3)\n```", "```py\nIn [21]: ax3.plot(np.random.standard_normal(50).cumsum(), color=\"black\",\n ....:          linestyle=\"dashed\")\n```", "```py\nIn [22]: ax1.hist(np.random.standard_normal(100), bins=20, color=\"black\", alpha=0\n.3);\nIn [23]: ax2.scatter(np.arange(30), np.arange(30) + 3 * np.random.standard_normal\n(30));\n```", "```py\nIn [25]: fig, axes = plt.subplots(2, 3)\n\nIn [26]: axes\nOut[26]: \narray([[<Axes: >, <Axes: >, <Axes: >],\n [<Axes: >, <Axes: >, <Axes: >]], dtype=object)\n```", "```py\nsubplots_adjust(left=None, bottom=None, right=None, top=None,\n                wspace=None, hspace=None)\n```", "```py\nfig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\nfor i in range(2):\n for j in range(2):\n axes[i, j].hist(np.random.standard_normal(500), bins=50,\n color=\"black\", alpha=0.5)\nfig.subplots_adjust(wspace=0, hspace=0)\n```", "```py\nax.plot(x, y, linestyle=\"--\", color=\"green\")\n```", "```py\nIn [31]: ax = fig.add_subplot()\n\nIn [32]: ax.plot(np.random.standard_normal(30).cumsum(), color=\"black\",\n ....:         linestyle=\"dashed\", marker=\"o\");\n```", "```py\nIn [34]: fig = plt.figure()\n\nIn [35]: ax = fig.add_subplot()\n\nIn [36]: data = np.random.standard_normal(30).cumsum()\n\nIn [37]: ax.plot(data, color=\"black\", linestyle=\"dashed\", label=\"Default\");\nIn [38]: ax.plot(data, color=\"black\", linestyle=\"dashed\",\n ....:         drawstyle=\"steps-post\", label=\"steps-post\");\nIn [39]: ax.legend()\n```", "```py\nIn [40]: fig, ax = plt.subplots()\n\nIn [41]: ax.plot(np.random.standard_normal(1000).cumsum());\n```", "```py\nIn [42]: ticks = ax.set_xticks([0, 250, 500, 750, 1000])\n\nIn [43]: labels = ax.set_xticklabels([\"one\", \"two\", \"three\", \"four\", \"five\"],\n ....:                             rotation=30, fontsize=8)\n```", "```py\nIn [44]: ax.set_xlabel(\"Stages\")\nOut[44]: Text(0.5, 6.666666666666652, 'Stages')\n\nIn [45]: ax.set_title(\"My first matplotlib plot\")\n```", "```py\nax.set(title=\"My first matplotlib plot\", xlabel=\"Stages\")\n```", "```py\nIn [46]: fig, ax = plt.subplots()\n\nIn [47]: ax.plot(np.random.randn(1000).cumsum(), color=\"black\", label=\"one\");\nIn [48]: ax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dashed\n\",\n ....:         label=\"two\");\nIn [49]: ax.plot(np.random.randn(1000).cumsum(), color=\"black\", linestyle=\"dotted\n\",\n ....:         label=\"three\");\n```", "```py\nIn [50]: ax.legend()\n```", "```py\nax.text(x, y, \"Hello world!\",\n family=\"monospace\", fontsize=10)\n```", "```py\nfrom datetime import datetime\n\nfig, ax = plt.subplots()\n\ndata = pd.read_csv(\"examples/spx.csv\", index_col=0, parse_dates=True)\nspx = data[\"SPX\"]\n\nspx.plot(ax=ax, color=\"black\")\n\ncrisis_data = [\n (datetime(2007, 10, 11), \"Peak of bull market\"),\n (datetime(2008, 3, 12), \"Bear Stearns Fails\"),\n (datetime(2008, 9, 15), \"Lehman Bankruptcy\")\n]\n\nfor date, label in crisis_data:\n ax.annotate(label, xy=(date, spx.asof(date) + 75),\n xytext=(date, spx.asof(date) + 225),\n arrowprops=dict(facecolor=\"black\", headwidth=4, width=2,\n headlength=4),\n horizontalalignment=\"left\", verticalalignment=\"top\")\n\n# Zoom in on 2007-2010\nax.set_xlim([\"1/1/2007\", \"1/1/2011\"])\nax.set_ylim([600, 1800])\n\nax.set_title(\"Important dates in the 2008\u20132009 financial crisis\")\n```", "```py\nfig, ax = plt.subplots()\n\nrect = plt.Rectangle((0.2, 0.75), 0.4, 0.15, color=\"black\", alpha=0.3)\ncirc = plt.Circle((0.7, 0.2), 0.15, color=\"blue\", alpha=0.3)\npgon = plt.Polygon([[0.15, 0.15], [0.35, 0.4], [0.2, 0.6]],\n color=\"green\", alpha=0.5)\n\nax.add_patch(rect)\nax.add_patch(circ)\nax.add_patch(pgon)\n```", "```py\nfig.savefig(\"figpath.svg\")\n```", "```py\nfig.savefig(\"figpath.png\", dpi=400)\n```", "```py\nplt.rc(\"figure\", figsize=(10, 10))\n```", "```py\nplt.rc(\"font\", family=\"monospace\", weight=\"bold\", size=8)\n```", "```py\nIn [61]: s = pd.Series(np.random.standard_normal(10).cumsum(), index=np.arange(0,\n 100, 10))\n\nIn [62]: s.plot()\n```", "```py\nIn [63]: df = pd.DataFrame(np.random.standard_normal((10, 4)).cumsum(0),\n ....:                   columns=[\"A\", \"B\", \"C\", \"D\"],\n ....:                   index=np.arange(0, 100, 10))\n\nIn [64]: plt.style.use('grayscale')\n\nIn [65]: df.plot()\n```", "```py\nIn [66]: fig, axes = plt.subplots(2, 1)\n\nIn [67]: data = pd.Series(np.random.uniform(size=16), index=list(\"abcdefghijklmno\np\"))\n\nIn [68]: data.plot.bar(ax=axes[0], color=\"black\", alpha=0.7)\nOut[68]: <Axes: >\n\nIn [69]: data.plot.barh(ax=axes[1], color=\"black\", alpha=0.7)\n```", "```py\nIn [71]: df = pd.DataFrame(np.random.uniform(size=(6, 4)),\n ....:                   index=[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"],\n ....:                   columns=pd.Index([\"A\", \"B\", \"C\", \"D\"], name=\"Genus\"))\n\nIn [72]: df\nOut[72]: \nGenus         A         B         C         D\none    0.370670  0.602792  0.229159  0.486744\ntwo    0.420082  0.571653  0.049024  0.880592\nthree  0.814568  0.277160  0.880316  0.431326\nfour   0.374020  0.899420  0.460304  0.100843\nfive   0.433270  0.125107  0.494675  0.961825\nsix    0.601648  0.478576  0.205690  0.560547\n\nIn [73]: df.plot.bar()\n```", "```py\nIn [75]: df.plot.barh(stacked=True, alpha=0.5)\n```", "```py\nIn [77]: tips = pd.read_csv(\"examples/tips.csv\")\n\nIn [78]: tips.head()\nOut[78]: \n total_bill   tip smoker  day    time  size\n0       16.99  1.01     No  Sun  Dinner     2\n1       10.34  1.66     No  Sun  Dinner     3\n2       21.01  3.50     No  Sun  Dinner     3\n3       23.68  3.31     No  Sun  Dinner     2\n4       24.59  3.61     No  Sun  Dinner     4\n\nIn [79]: party_counts = pd.crosstab(tips[\"day\"], tips[\"size\"])\n\nIn [80]: party_counts = party_counts.reindex(index=[\"Thur\", \"Fri\", \"Sat\", \"Sun\"])\n\nIn [81]: party_counts\nOut[81]: \nsize  1   2   3   4  5  6\nday \nThur  1  48   4   5  1  3\nFri   1  16   1   1  0  0\nSat   2  53  18  13  1  0\nSun   0  39  15  18  3  1\n```", "```py\nIn [82]: party_counts = party_counts.loc[:, 2:5]\n```", "```py\n# Normalize to sum to 1\nIn [83]: party_pcts = party_counts.div(party_counts.sum(axis=\"columns\"),\n ....:                               axis=\"index\")\n\nIn [84]: party_pcts\nOut[84]: \nsize         2         3         4         5\nday \nThur  0.827586  0.068966  0.086207  0.017241\nFri   0.888889  0.055556  0.055556  0.000000\nSat   0.623529  0.211765  0.152941  0.011765\nSun   0.520000  0.200000  0.240000  0.040000\n\nIn [85]: party_pcts.plot.bar(stacked=True)\n```", "```py\nIn [87]: import seaborn as sns\n\nIn [88]: tips[\"tip_pct\"] = tips[\"tip\"] / (tips[\"total_bill\"] - tips[\"tip\"])\n\nIn [89]: tips.head()\nOut[89]: \n total_bill   tip smoker  day    time  size   tip_pct\n0       16.99  1.01     No  Sun  Dinner     2  0.063204\n1       10.34  1.66     No  Sun  Dinner     3  0.191244\n2       21.01  3.50     No  Sun  Dinner     3  0.199886\n3       23.68  3.31     No  Sun  Dinner     2  0.162494\n4       24.59  3.61     No  Sun  Dinner     4  0.172069\n\nIn [90]: sns.barplot(x=\"tip_pct\", y=\"day\", data=tips, orient=\"h\")\n```", "```py\nIn [92]: sns.barplot(x=\"tip_pct\", y=\"day\", hue=\"time\", data=tips, orient=\"h\")\n```", "```py\nIn [94]: sns.set_style(\"whitegrid\")\n```", "```py\nsns.set_palette(\"Greys_r\")\n```", "```py\nIn [96]: tips[\"tip_pct\"].plot.hist(bins=50)\n```", "```py\nIn [98]: tips[\"tip_pct\"].plot.density()\n```", "```py\nconda install scipy\n```", "```py\nIn [100]: comp1 = np.random.standard_normal(200)\n\nIn [101]: comp2 = 10 + 2 * np.random.standard_normal(200)\n\nIn [102]: values = pd.Series(np.concatenate([comp1, comp2]))\n\nIn [103]: sns.histplot(values, bins=100, color=\"black\")\n```", "```py\nIn [104]: macro = pd.read_csv(\"examples/macrodata.csv\")\n\nIn [105]: data = macro[[\"cpi\", \"m1\", \"tbilrate\", \"unemp\"]]\n\nIn [106]: trans_data = np.log(data).diff().dropna()\n\nIn [107]: trans_data.tail()\nOut[107]: \n cpi        m1  tbilrate     unemp\n198 -0.007904  0.045361 -0.396881  0.105361\n199 -0.021979  0.066753 -2.277267  0.139762\n200  0.002340  0.010286  0.606136  0.160343\n201  0.008419  0.037461 -0.200671  0.127339\n202  0.008894  0.012202 -0.405465  0.042560\n```", "```py\nIn [109]: ax = sns.regplot(x=\"m1\", y=\"unemp\", data=trans_data)\n\nIn [110]: ax.set_title(\"Changes in log(m1) versus log(unemp)\")\n```", "```py\nIn [111]: sns.pairplot(trans_data, diag_kind=\"kde\", plot_kws={\"alpha\": 0.2})\n```", "```py\nIn [112]: sns.catplot(x=\"day\", y=\"tip_pct\", hue=\"time\", col=\"smoker\",\n .....:             kind=\"bar\", data=tips[tips.tip_pct < 1])\n```", "```py\nIn [113]: sns.catplot(x=\"day\", y=\"tip_pct\", row=\"time\",\n .....:             col=\"smoker\",\n .....:             kind=\"bar\", data=tips[tips.tip_pct < 1])\n```", "```py\nIn [114]: sns.catplot(x=\"tip_pct\", y=\"day\", kind=\"box\",\n .....:             data=tips[tips.tip_pct < 0.5])\n```"]