["```py\nIn [12]: import numpy as np\n\nIn [13]: import pandas as pd\n```", "```py\nIn [14]: df = pd.DataFrame({\"key1\" : [\"a\", \"a\", None, \"b\", \"b\", \"a\", None],\n ....:                    \"key2\" : pd.Series([1, 2, 1, 2, 1, None, 1],\n ....:                                       dtype=\"Int64\"),\n ....:                    \"data1\" : np.random.standard_normal(7),\n ....:                    \"data2\" : np.random.standard_normal(7)})\n\nIn [15]: df\nOut[15]: \n key1  key2     data1     data2\n0     a     1 -0.204708  0.281746\n1     a     2  0.478943  0.769023\n2  None     1 -0.519439  1.246435\n3     b     2 -0.555730  1.007189\n4     b     1  1.965781 -1.296221\n5     a  <NA>  1.393406  0.274992\n6  None     1  0.092908  0.228913\n```", "```py\nIn [16]: grouped = df[\"data1\"].groupby(df[\"key1\"])\n\nIn [17]: grouped\nOut[17]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x17b7913f0>\n```", "```py\nIn [18]: grouped.mean()\nOut[18]: \nkey1\na    0.555881\nb    0.705025\nName: data1, dtype: float64\n```", "```py\nIn [19]: means = df[\"data1\"].groupby([df[\"key1\"], df[\"key2\"]]).mean()\n\nIn [20]: means\nOut[20]: \nkey1  key2\na     1      -0.204708\n 2       0.478943\nb     1       1.965781\n 2      -0.555730\nName: data1, dtype: float64\n```", "```py\nIn [21]: means.unstack()\nOut[21]: \nkey2         1         2\nkey1 \na    -0.204708  0.478943\nb     1.965781 -0.555730\n```", "```py\nIn [22]: states = np.array([\"OH\", \"CA\", \"CA\", \"OH\", \"OH\", \"CA\", \"OH\"])\n\nIn [23]: years = [2005, 2005, 2006, 2005, 2006, 2005, 2006]\n\nIn [24]: df[\"data1\"].groupby([states, years]).mean()\nOut[24]: \nCA  2005    0.936175\n 2006   -0.519439\nOH  2005   -0.380219\n 2006    1.029344\nName: data1, dtype: float64\n```", "```py\nIn [25]: df.groupby(\"key1\").mean()\nOut[25]: \n key2     data1     data2\nkey1 \na      1.5  0.555881  0.441920\nb      1.5  0.705025 -0.144516\n\nIn [26]: df.groupby(\"key2\").mean(numeric_only=True)\nOut[26]: \n data1     data2\nkey2 \n1     0.333636  0.115218\n2    -0.038393  0.888106\n\nIn [27]: df.groupby([\"key1\", \"key2\"]).mean()\nOut[27]: \n data1     data2\nkey1 key2 \na    1    -0.204708  0.281746\n 2     0.478943  0.769023\nb    1     1.965781 -1.296221\n 2    -0.555730  1.007189\n```", "```py\nIn [28]: df.groupby([\"key1\", \"key2\"]).size()\nOut[28]: \nkey1  key2\na     1       1\n 2       1\nb     1       1\n 2       1\ndtype: int64\n```", "```py\nIn [29]: df.groupby(\"key1\", dropna=False).size()\nOut[29]: \nkey1\na      3\nb      2\nNaN    2\ndtype: int64\n\nIn [30]: df.groupby([\"key1\", \"key2\"], dropna=False).size()\nOut[30]: \nkey1  key2\na     1       1\n 2       1\n <NA>    1\nb     1       1\n 2       1\nNaN   1       2\ndtype: int64\n```", "```py\nIn [31]: df.groupby(\"key1\").count()\nOut[31]: \n key2  data1  data2\nkey1 \na        2      3      3\nb        2      2      2\n```", "```py\nIn [32]: for name, group in df.groupby(\"key1\"):\n ....:     print(name)\n ....:     print(group)\n ....:\na\n key1  key2     data1     data2\n0    a     1 -0.204708  0.281746\n1    a     2  0.478943  0.769023\n5    a  <NA>  1.393406  0.274992\nb\n key1  key2     data1     data2\n3    b     2 -0.555730  1.007189\n4    b     1  1.965781 -1.296221\n```", "```py\nIn [33]: for (k1, k2), group in df.groupby([\"key1\", \"key2\"]):\n ....:     print((k1, k2))\n ....:     print(group)\n ....:\n('a', 1)\n key1  key2     data1     data2\n0    a     1 -0.204708  0.281746\n('a', 2)\n key1  key2     data1     data2\n1    a     2  0.478943  0.769023\n('b', 1)\n key1  key2     data1     data2\n4    b     1  1.965781 -1.296221\n('b', 2)\n key1  key2    data1     data2\n3    b     2 -0.55573  1.007189\n```", "```py\nIn [34]: pieces = {name: group for name, group in df.groupby(\"key1\")}\n\nIn [35]: pieces[\"b\"]\nOut[35]: \n key1  key2     data1     data2\n3    b     2 -0.555730  1.007189\n4    b     1  1.965781 -1.296221\n```", "```py\nIn [36]: grouped = df.groupby({\"key1\": \"key\", \"key2\": \"key\",\n ....:                       \"data1\": \"data\", \"data2\": \"data\"}, axis=\"columns\")\n```", "```py\nIn [37]: for group_key, group_values in grouped:\n ....:     print(group_key)\n ....:     print(group_values)\n ....:\ndata\n data1     data2\n0 -0.204708  0.281746\n1  0.478943  0.769023\n2 -0.519439  1.246435\n3 -0.555730  1.007189\n4  1.965781 -1.296221\n5  1.393406  0.274992\n6  0.092908  0.228913\nkey\n key1  key2\n0     a     1\n1     a     2\n2  None     1\n3     b     2\n4     b     1\n5     a  <NA>\n6  None     1\n```", "```py\ndf.groupby(\"key1\")[\"data1\"]\ndf.groupby(\"key1\")[[\"data2\"]]\n```", "```py\ndf[\"data1\"].groupby(df[\"key1\"])\ndf[[\"data2\"]].groupby(df[\"key1\"])\n```", "```py\nIn [38]: df.groupby([\"key1\", \"key2\"])[[\"data2\"]].mean()\nOut[38]: \n data2\nkey1 key2 \na    1     0.281746\n 2     0.769023\nb    1    -1.296221\n 2     1.007189\n```", "```py\nIn [39]: s_grouped = df.groupby([\"key1\", \"key2\"])[\"data2\"]\n\nIn [40]: s_grouped\nOut[40]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x17b8356c0>\n\nIn [41]: s_grouped.mean()\nOut[41]: \nkey1  key2\na     1       0.281746\n 2       0.769023\nb     1      -1.296221\n 2       1.007189\nName: data2, dtype: float64\n```", "```py\nIn [42]: people = pd.DataFrame(np.random.standard_normal((5, 5)),\n ....:                       columns=[\"a\", \"b\", \"c\", \"d\", \"e\"],\n ....:                       index=[\"Joe\", \"Steve\", \"Wanda\", \"Jill\", \"Trey\"])\n\nIn [43]: people.iloc[2:3, [1, 2]] = np.nan # Add a few NA values\n\nIn [44]: people\nOut[44]: \n a         b         c         d         e\nJoe    1.352917  0.886429 -2.001637 -0.371843  1.669025\nSteve -0.438570 -0.539741  0.476985  3.248944 -1.021228\nWanda -0.577087       NaN       NaN  0.523772  0.000940\nJill   1.343810 -0.713544 -0.831154 -2.370232 -1.860761\nTrey  -0.860757  0.560145 -1.265934  0.119827 -1.063512\n```", "```py\nIn [45]: mapping = {\"a\": \"red\", \"b\": \"red\", \"c\": \"blue\",\n ....:            \"d\": \"blue\", \"e\": \"red\", \"f\" : \"orange\"}\n```", "```py\nIn [46]: by_column = people.groupby(mapping, axis=\"columns\")\n\nIn [47]: by_column.sum()\nOut[47]: \n blue       red\nJoe   -2.373480  3.908371\nSteve  3.725929 -1.999539\nWanda  0.523772 -0.576147\nJill  -3.201385 -1.230495\nTrey  -1.146107 -1.364125\n```", "```py\nIn [48]: map_series = pd.Series(mapping)\n\nIn [49]: map_series\nOut[49]: \na       red\nb       red\nc      blue\nd      blue\ne       red\nf    orange\ndtype: object\n\nIn [50]: people.groupby(map_series, axis=\"columns\").count()\nOut[50]: \n blue  red\nJoe       2    3\nSteve     2    3\nWanda     1    2\nJill      2    3\nTrey      2    3\n```", "```py\nIn [51]: people.groupby(len).sum()\nOut[51]: \n a         b         c         d         e\n3  1.352917  0.886429 -2.001637 -0.371843  1.669025\n4  0.483052 -0.153399 -2.097088 -2.250405 -2.924273\n5 -1.015657 -0.539741  0.476985  3.772716 -1.020287\n```", "```py\nIn [52]: key_list = [\"one\", \"one\", \"one\", \"two\", \"two\"]\n\nIn [53]: people.groupby([len, key_list]).min()\nOut[53]: \n a         b         c         d         e\n3 one  1.352917  0.886429 -2.001637 -0.371843  1.669025\n4 two -0.860757 -0.713544 -1.265934 -2.370232 -1.860761\n5 one -0.577087 -0.539741  0.476985  0.523772 -1.021228\n```", "```py\nIn [54]: columns = pd.MultiIndex.from_arrays([[\"US\", \"US\", \"US\", \"JP\", \"JP\"],\n ....:                                     [1, 3, 5, 1, 3]],\n ....:                                     names=[\"cty\", \"tenor\"])\n\nIn [55]: hier_df = pd.DataFrame(np.random.standard_normal((4, 5)), columns=column\ns)\n\nIn [56]: hier_df\nOut[56]: \ncty          US                            JP \ntenor         1         3         5         1         3\n0      0.332883 -2.359419 -0.199543 -1.541996 -0.970736\n1     -1.307030  0.286350  0.377984 -0.753887  0.331286\n2      1.349742  0.069877  0.246674 -0.011862  1.004812\n3      1.327195 -0.919262 -1.549106  0.022185  0.758363\n```", "```py\nIn [57]: hier_df.groupby(level=\"cty\", axis=\"columns\").count()\nOut[57]: \ncty  JP  US\n0     2   3\n1     2   3\n2     2   3\n3     2   3\n```", "```py\nIn [58]: df\nOut[58]: \n key1  key2     data1     data2\n0     a     1 -0.204708  0.281746\n1     a     2  0.478943  0.769023\n2  None     1 -0.519439  1.246435\n3     b     2 -0.555730  1.007189\n4     b     1  1.965781 -1.296221\n5     a  <NA>  1.393406  0.274992\n6  None     1  0.092908  0.228913\n\nIn [59]: grouped = df.groupby(\"key1\")\n\nIn [60]: grouped[\"data1\"].nsmallest(2)\nOut[60]: \nkey1 \na     0   -0.204708\n 1    0.478943\nb     3   -0.555730\n 4    1.965781\nName: data1, dtype: float64\n```", "```py\nIn [61]: def peak_to_peak(arr):\n ....:     return arr.max() - arr.min()\n\nIn [62]: grouped.agg(peak_to_peak)\nOut[62]: \n key2     data1     data2\nkey1 \na        1  1.598113  0.494031\nb        1  2.521511  2.303410\n```", "```py\nIn [63]: grouped.describe()\nOut[63]: \n key2                                           data1            ... \n count mean       std  min   25%  50%   75%  max count      mean  ... \nkey1                                                                  ... \na      2.0  1.5  0.707107  1.0  1.25  1.5  1.75  2.0   3.0  0.555881  ...  \\\nb      2.0  1.5  0.707107  1.0  1.25  1.5  1.75  2.0   2.0  0.705025  ... \n data2 \n 75%       max count      mean       std       min       25% \nkey1 \na     0.936175  1.393406   3.0  0.441920  0.283299  0.274992  0.278369  \\\nb     1.335403  1.965781   2.0 -0.144516  1.628757 -1.296221 -0.720368 \n\n 50%       75%       max \nkey1 \na     0.281746  0.525384  0.769023 \nb    -0.144516  0.431337  1.007189 \n[2 rows x 24 columns]\n```", "```py\nIn [64]: tips = pd.read_csv(\"examples/tips.csv\")\n\nIn [65]: tips.head()\nOut[65]: \n total_bill   tip smoker  day    time  size\n0       16.99  1.01     No  Sun  Dinner     2\n1       10.34  1.66     No  Sun  Dinner     3\n2       21.01  3.50     No  Sun  Dinner     3\n3       23.68  3.31     No  Sun  Dinner     2\n4       24.59  3.61     No  Sun  Dinner     4\n```", "```py\nIn [66]: tips[\"tip_pct\"] = tips[\"tip\"] / tips[\"total_bill\"]\n\nIn [67]: tips.head()\nOut[67]: \n total_bill   tip smoker  day    time  size   tip_pct\n0       16.99  1.01     No  Sun  Dinner     2  0.059447\n1       10.34  1.66     No  Sun  Dinner     3  0.160542\n2       21.01  3.50     No  Sun  Dinner     3  0.166587\n3       23.68  3.31     No  Sun  Dinner     2  0.139780\n4       24.59  3.61     No  Sun  Dinner     4  0.146808\n```", "```py\nIn [68]: grouped = tips.groupby([\"day\", \"smoker\"])\n```", "```py\nIn [69]: grouped_pct = grouped[\"tip_pct\"]\n\nIn [70]: grouped_pct.agg(\"mean\")\nOut[70]: \nday   smoker\nFri   No        0.151650\n Yes       0.174783\nSat   No        0.158048\n Yes       0.147906\nSun   No        0.160113\n Yes       0.187250\nThur  No        0.160298\n Yes       0.163863\nName: tip_pct, dtype: float64\n```", "```py\nIn [71]: grouped_pct.agg([\"mean\", \"std\", peak_to_peak])\nOut[71]: \n mean       std  peak_to_peak\nday  smoker \nFri  No      0.151650  0.028123      0.067349\n Yes     0.174783  0.051293      0.159925\nSat  No      0.158048  0.039767      0.235193\n Yes     0.147906  0.061375      0.290095\nSun  No      0.160113  0.042347      0.193226\n Yes     0.187250  0.154134      0.644685\nThur No      0.160298  0.038774      0.193350\n Yes     0.163863  0.039389      0.151240\n```", "```py\nIn [72]: grouped_pct.agg([(\"average\", \"mean\"), (\"stdev\", np.std)])\nOut[72]: \n average     stdev\nday  smoker \nFri  No      0.151650  0.028123\n Yes     0.174783  0.051293\nSat  No      0.158048  0.039767\n Yes     0.147906  0.061375\nSun  No      0.160113  0.042347\n Yes     0.187250  0.154134\nThur No      0.160298  0.038774\n Yes     0.163863  0.039389\n```", "```py\nIn [73]: functions = [\"count\", \"mean\", \"max\"]\n\nIn [74]: result = grouped[[\"tip_pct\", \"total_bill\"]].agg(functions)\n\nIn [75]: result\nOut[75]: \n tip_pct                     total_bill \n count      mean       max      count       mean    max\nday  smoker \nFri  No           4  0.151650  0.187735          4  18.420000  22.75\n Yes         15  0.174783  0.263480         15  16.813333  40.17\nSat  No          45  0.158048  0.291990         45  19.661778  48.33\n Yes         42  0.147906  0.325733         42  21.276667  50.81\nSun  No          57  0.160113  0.252672         57  20.506667  48.17\n Yes         19  0.187250  0.710345         19  24.120000  45.35\nThur No          45  0.160298  0.266312         45  17.113111  41.19\n Yes         17  0.163863  0.241255         17  19.190588  43.11\n```", "```py\nIn [76]: result[\"tip_pct\"]\nOut[76]: \n count      mean       max\nday  smoker \nFri  No          4  0.151650  0.187735\n Yes        15  0.174783  0.263480\nSat  No         45  0.158048  0.291990\n Yes        42  0.147906  0.325733\nSun  No         57  0.160113  0.252672\n Yes        19  0.187250  0.710345\nThur No         45  0.160298  0.266312\n Yes        17  0.163863  0.241255\n```", "```py\nIn [77]: ftuples = [(\"Average\", \"mean\"), (\"Variance\", np.var)]\n\nIn [78]: grouped[[\"tip_pct\", \"total_bill\"]].agg(ftuples)\nOut[78]: \n tip_pct           total_bill \n Average  Variance    Average    Variance\nday  smoker \nFri  No      0.151650  0.000791  18.420000   25.596333\n Yes     0.174783  0.002631  16.813333   82.562438\nSat  No      0.158048  0.001581  19.661778   79.908965\n Yes     0.147906  0.003767  21.276667  101.387535\nSun  No      0.160113  0.001793  20.506667   66.099980\n Yes     0.187250  0.023757  24.120000  109.046044\nThur No      0.160298  0.001503  17.113111   59.625081\n Yes     0.163863  0.001551  19.190588   69.808518\n```", "```py\nIn [79]: grouped.agg({\"tip\" : np.max, \"size\" : \"sum\"})\nOut[79]: \n tip  size\nday  smoker \nFri  No       3.50     9\n Yes      4.73    31\nSat  No       9.00   115\n Yes     10.00   104\nSun  No       6.00   167\n Yes      6.50    49\nThur No       6.70   112\n Yes      5.00    40\n\nIn [80]: grouped.agg({\"tip_pct\" : [\"min\", \"max\", \"mean\", \"std\"],\n ....:              \"size\" : \"sum\"})\nOut[80]: \n tip_pct                               size\n min       max      mean       std  sum\nday  smoker \nFri  No      0.120385  0.187735  0.151650  0.028123    9\n Yes     0.103555  0.263480  0.174783  0.051293   31\nSat  No      0.056797  0.291990  0.158048  0.039767  115\n Yes     0.035638  0.325733  0.147906  0.061375  104\nSun  No      0.059447  0.252672  0.160113  0.042347  167\n Yes     0.065660  0.710345  0.187250  0.154134   49\nThur No      0.072961  0.266312  0.160298  0.038774  112\n Yes     0.090014  0.241255  0.163863  0.039389   40\n```", "```py\nIn [81]: grouped = tips.groupby([\"day\", \"smoker\"], as_index=False)\n\nIn [82]: grouped.mean(numeric_only=True)\nOut[82]: \n day smoker  total_bill       tip      size   tip_pct\n0   Fri     No   18.420000  2.812500  2.250000  0.151650\n1   Fri    Yes   16.813333  2.714000  2.066667  0.174783\n2   Sat     No   19.661778  3.102889  2.555556  0.158048\n3   Sat    Yes   21.276667  2.875476  2.476190  0.147906\n4   Sun     No   20.506667  3.167895  2.929825  0.160113\n5   Sun    Yes   24.120000  3.516842  2.578947  0.187250\n6  Thur     No   17.113111  2.673778  2.488889  0.160298\n7  Thur    Yes   19.190588  3.030000  2.352941  0.163863\n```", "```py\nIn [83]: def top(df, n=5, column=\"tip_pct\"):\n ....:     return df.sort_values(column, ascending=False)[:n]\n\nIn [84]: top(tips, n=6)\nOut[84]: \n total_bill   tip smoker  day    time  size   tip_pct\n172        7.25  5.15    Yes  Sun  Dinner     2  0.710345\n178        9.60  4.00    Yes  Sun  Dinner     2  0.416667\n67         3.07  1.00    Yes  Sat  Dinner     1  0.325733\n232       11.61  3.39     No  Sat  Dinner     2  0.291990\n183       23.17  6.50    Yes  Sun  Dinner     4  0.280535\n109       14.31  4.00    Yes  Sat  Dinner     2  0.279525\n```", "```py\nIn [85]: tips.groupby(\"smoker\").apply(top)\nOut[85]: \n total_bill   tip smoker   day    time  size   tip_pct\nsmoker \nNo     232       11.61  3.39     No   Sat  Dinner     2  0.291990\n 149        7.51  2.00     No  Thur   Lunch     2  0.266312\n 51        10.29  2.60     No   Sun  Dinner     2  0.252672\n 185       20.69  5.00     No   Sun  Dinner     5  0.241663\n 88        24.71  5.85     No  Thur   Lunch     2  0.236746\nYes    172        7.25  5.15    Yes   Sun  Dinner     2  0.710345\n 178        9.60  4.00    Yes   Sun  Dinner     2  0.416667\n 67         3.07  1.00    Yes   Sat  Dinner     1  0.325733\n 183       23.17  6.50    Yes   Sun  Dinner     4  0.280535\n 109       14.31  4.00    Yes   Sat  Dinner     2  0.279525\n```", "```py\nIn [86]: tips.groupby([\"smoker\", \"day\"]).apply(top, n=1, column=\"total_bill\")\nOut[86]: \n total_bill    tip smoker   day    time  size   tip_pct\nsmoker day \nNo     Fri  94        22.75   3.25     No   Fri  Dinner     2  0.142857\n Sat  212       48.33   9.00     No   Sat  Dinner     4  0.186220\n Sun  156       48.17   5.00     No   Sun  Dinner     6  0.103799\n Thur 142       41.19   5.00     No  Thur   Lunch     5  0.121389\nYes    Fri  95        40.17   4.73    Yes   Fri  Dinner     4  0.117750\n Sat  170       50.81  10.00    Yes   Sat  Dinner     3  0.196812\n Sun  182       45.35   3.50    Yes   Sun  Dinner     3  0.077178\n Thur 197       43.11   5.00    Yes  Thur   Lunch     4  0.115982\n```", "```py\nIn [87]: result = tips.groupby(\"smoker\")[\"tip_pct\"].describe()\n\nIn [88]: result\nOut[88]: \n count      mean       std       min       25%       50%       75% \nsmoker \nNo      151.0  0.159328  0.039910  0.056797  0.136906  0.155625  0.185014  \\\nYes      93.0  0.163196  0.085119  0.035638  0.106771  0.153846  0.195059 \n max \nsmoker \nNo      0.291990 \nYes     0.710345 \n\nIn [89]: result.unstack(\"smoker\")\nOut[89]: \n smoker\ncount  No        151.000000\n Yes        93.000000\nmean   No          0.159328\n Yes         0.163196\nstd    No          0.039910\n Yes         0.085119\nmin    No          0.056797\n Yes         0.035638\n25%    No          0.136906\n Yes         0.106771\n50%    No          0.155625\n Yes         0.153846\n75%    No          0.185014\n Yes         0.195059\nmax    No          0.291990\n Yes         0.710345\ndtype: float64\n```", "```py\ndef f(group):\n return group.describe()\n\ngrouped.apply(f)\n```", "```py\nIn [90]: tips.groupby(\"smoker\", group_keys=False).apply(top)\nOut[90]: \n total_bill   tip smoker   day    time  size   tip_pct\n232       11.61  3.39     No   Sat  Dinner     2  0.291990\n149        7.51  2.00     No  Thur   Lunch     2  0.266312\n51        10.29  2.60     No   Sun  Dinner     2  0.252672\n185       20.69  5.00     No   Sun  Dinner     5  0.241663\n88        24.71  5.85     No  Thur   Lunch     2  0.236746\n172        7.25  5.15    Yes   Sun  Dinner     2  0.710345\n178        9.60  4.00    Yes   Sun  Dinner     2  0.416667\n67         3.07  1.00    Yes   Sat  Dinner     1  0.325733\n183       23.17  6.50    Yes   Sun  Dinner     4  0.280535\n109       14.31  4.00    Yes   Sat  Dinner     2  0.279525\n```", "```py\nIn [91]: frame = pd.DataFrame({\"data1\": np.random.standard_normal(1000),\n ....:                       \"data2\": np.random.standard_normal(1000)})\n\nIn [92]: frame.head()\nOut[92]: \n data1     data2\n0 -0.660524 -0.612905\n1  0.862580  0.316447\n2 -0.010032  0.838295\n3  0.050009 -1.034423\n4  0.670216  0.434304\n\nIn [93]: quartiles = pd.cut(frame[\"data1\"], 4)\n\nIn [94]: quartiles.head(10)\nOut[94]: \n0     (-1.23, 0.489]\n1     (0.489, 2.208]\n2     (-1.23, 0.489]\n3     (-1.23, 0.489]\n4     (0.489, 2.208]\n5     (0.489, 2.208]\n6     (-1.23, 0.489]\n7     (-1.23, 0.489]\n8    (-2.956, -1.23]\n9     (-1.23, 0.489]\nName: data1, dtype: category\nCategories (4, interval[float64, right]): [(-2.956, -1.23] < (-1.23, 0.489] < (0.\n489, 2.208] <\n (2.208, 3.928]]\n```", "```py\nIn [95]: def get_stats(group):\n ....:     return pd.DataFrame(\n ....:         {\"min\": group.min(), \"max\": group.max(),\n ....:         \"count\": group.count(), \"mean\": group.mean()}\n ....:     )\n\nIn [96]: grouped = frame.groupby(quartiles)\n\nIn [97]: grouped.apply(get_stats)\nOut[97]: \n min       max  count      mean\ndata1 \n(-2.956, -1.23] data1 -2.949343 -1.230179     94 -1.658818\n data2 -3.399312  1.670835     94 -0.033333\n(-1.23, 0.489]  data1 -1.228918  0.488675    598 -0.329524\n data2 -2.989741  3.260383    598 -0.002622\n(0.489, 2.208]  data1  0.489965  2.200997    298  1.065727\n data2 -3.745356  2.954439    298  0.078249\n(2.208, 3.928]  data1  2.212303  3.927528     10  2.644253\n data2 -1.929776  1.765640     10  0.024750\n```", "```py\nIn [98]: grouped.agg([\"min\", \"max\", \"count\", \"mean\"])\nOut[98]: \n data1                               data2 \n min       max count      mean       min       max count \ndata1 \n(-2.956, -1.23] -2.949343 -1.230179    94 -1.658818 -3.399312  1.670835    94  \\\n(-1.23, 0.489]  -1.228918  0.488675   598 -0.329524 -2.989741  3.260383   598 \n(0.489, 2.208]   0.489965  2.200997   298  1.065727 -3.745356  2.954439   298 \n(2.208, 3.928]   2.212303  3.927528    10  2.644253 -1.929776  1.765640    10 \n\n mean \ndata1 \n(-2.956, -1.23] -0.033333 \n(-1.23, 0.489]  -0.002622 \n(0.489, 2.208]   0.078249 \n(2.208, 3.928]   0.024750 \n```", "```py\nIn [99]: quartiles_samp = pd.qcut(frame[\"data1\"], 4, labels=False)\n\nIn [100]: quartiles_samp.head()\nOut[100]: \n0    1\n1    3\n2    2\n3    2\n4    3\nName: data1, dtype: int64\n\nIn [101]: grouped = frame.groupby(quartiles_samp)\n\nIn [102]: grouped.apply(get_stats)\nOut[102]: \n min       max  count      mean\ndata1 \n0     data1 -2.949343 -0.685484    250 -1.212173\n data2 -3.399312  2.628441    250 -0.027045\n1     data1 -0.683066 -0.030280    250 -0.368334\n data2 -2.630247  3.260383    250 -0.027845\n2     data1 -0.027734  0.618965    250  0.295812\n data2 -3.056990  2.458842    250  0.014450\n3     data1  0.623587  3.927528    250  1.248875\n data2 -3.745356  2.954439    250  0.115899\n```", "```py\nIn [103]: s = pd.Series(np.random.standard_normal(6))\n\nIn [104]: s[::2] = np.nan\n\nIn [105]: s\nOut[105]: \n0         NaN\n1    0.227290\n2         NaN\n3   -2.153545\n4         NaN\n5   -0.375842\ndtype: float64\n\nIn [106]: s.fillna(s.mean())\nOut[106]: \n0   -0.767366\n1    0.227290\n2   -0.767366\n3   -2.153545\n4   -0.767366\n5   -0.375842\ndtype: float64\n```", "```py\nIn [107]: states = [\"Ohio\", \"New York\", \"Vermont\", \"Florida\",\n .....:           \"Oregon\", \"Nevada\", \"California\", \"Idaho\"]\n\nIn [108]: group_key = [\"East\", \"East\", \"East\", \"East\",\n .....:              \"West\", \"West\", \"West\", \"West\"]\n\nIn [109]: data = pd.Series(np.random.standard_normal(8), index=states)\n\nIn [110]: data\nOut[110]: \nOhio          0.329939\nNew York      0.981994\nVermont       1.105913\nFlorida      -1.613716\nOregon        1.561587\nNevada        0.406510\nCalifornia    0.359244\nIdaho        -0.614436\ndtype: float64\n```", "```py\nIn [111]: data[[\"Vermont\", \"Nevada\", \"Idaho\"]] = np.nan\n\nIn [112]: data\nOut[112]: \nOhio          0.329939\nNew York      0.981994\nVermont            NaN\nFlorida      -1.613716\nOregon        1.561587\nNevada             NaN\nCalifornia    0.359244\nIdaho              NaN\ndtype: float64\n\nIn [113]: data.groupby(group_key).size()\nOut[113]: \nEast    4\nWest    4\ndtype: int64\n\nIn [114]: data.groupby(group_key).count()\nOut[114]: \nEast    3\nWest    2\ndtype: int64\n\nIn [115]: data.groupby(group_key).mean()\nOut[115]: \nEast   -0.100594\nWest    0.960416\ndtype: float64\n```", "```py\nIn [116]: def fill_mean(group):\n .....:     return group.fillna(group.mean())\n\nIn [117]: data.groupby(group_key).apply(fill_mean)\nOut[117]: \nEast  Ohio          0.329939\n New York      0.981994\n Vermont      -0.100594\n Florida      -1.613716\nWest  Oregon        1.561587\n Nevada        0.960416\n California    0.359244\n Idaho         0.960416\ndtype: float64\n```", "```py\nIn [118]: fill_values = {\"East\": 0.5, \"West\": -1}\n\nIn [119]: def fill_func(group):\n .....:     return group.fillna(fill_values[group.name])\n\nIn [120]: data.groupby(group_key).apply(fill_func)\nOut[120]: \nEast  Ohio          0.329939\n New York      0.981994\n Vermont       0.500000\n Florida      -1.613716\nWest  Oregon        1.561587\n Nevada       -1.000000\n California    0.359244\n Idaho        -1.000000\ndtype: float64\n```", "```py\nsuits = [\"H\", \"S\", \"C\", \"D\"]  # Hearts, Spades, Clubs, Diamonds\ncard_val = (list(range(1, 11)) + [10] * 3) * 4\nbase_names = [\"A\"] + list(range(2, 11)) + [\"J\", \"K\", \"Q\"]\ncards = []\nfor suit in suits:\n cards.extend(str(num) + suit for num in base_names)\n\ndeck = pd.Series(card_val, index=cards)\n```", "```py\nIn [122]: deck.head(13)\nOut[122]: \nAH      1\n2H      2\n3H      3\n4H      4\n5H      5\n6H      6\n7H      7\n8H      8\n9H      9\n10H    10\nJH     10\nKH     10\nQH     10\ndtype: int64\n```", "```py\nIn [123]: def draw(deck, n=5):\n .....:     return deck.sample(n)\n\nIn [124]: draw(deck)\nOut[124]: \n4D     4\nQH    10\n8S     8\n7D     7\n9C     9\ndtype: int64\n```", "```py\nIn [125]: def get_suit(card):\n .....:     # last letter is suit\n .....:     return card[-1]\n\nIn [126]: deck.groupby(get_suit).apply(draw, n=2)\nOut[126]: \nC  6C     6\n KC    10\nD  7D     7\n 3D     3\nH  7H     7\n 9H     9\nS  2S     2\n QS    10\ndtype: int64\n```", "```py\nIn [127]: deck.groupby(get_suit, group_keys=False).apply(draw, n=2)\nOut[127]: \nAC      1\n3C      3\n5D      5\n4D      4\n10H    10\n7H      7\nQS     10\n7S      7\ndtype: int64\n```", "```py\nIn [128]: df = pd.DataFrame({\"category\": [\"a\", \"a\", \"a\", \"a\",\n .....:                                 \"b\", \"b\", \"b\", \"b\"],\n .....:                    \"data\": np.random.standard_normal(8),\n .....:                    \"weights\": np.random.uniform(size=8)})\n\nIn [129]: df\nOut[129]: \n category      data   weights\n0        a -1.691656  0.955905\n1        a  0.511622  0.012745\n2        a -0.401675  0.137009\n3        a  0.968578  0.763037\n4        b -1.818215  0.492472\n5        b  0.279963  0.832908\n6        b -0.200819  0.658331\n7        b -0.217221  0.612009\n```", "```py\nIn [130]: grouped = df.groupby(\"category\")\n\nIn [131]: def get_wavg(group):\n .....:     return np.average(group[\"data\"], weights=group[\"weights\"])\n\nIn [132]: grouped.apply(get_wavg)\nOut[132]: \ncategory\na   -0.495807\nb   -0.357273\ndtype: float64\n```", "```py\nIn [133]: close_px = pd.read_csv(\"examples/stock_px.csv\", parse_dates=True,\n .....:                        index_col=0)\n\nIn [134]: close_px.info()\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 2214 entries, 2003-01-02 to 2011-10-14\nData columns (total 4 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   AAPL    2214 non-null   float64\n 1   MSFT    2214 non-null   float64\n 2   XOM     2214 non-null   float64\n 3   SPX     2214 non-null   float64\ndtypes: float64(4)\nmemory usage: 86.5 KB\n\nIn [135]: close_px.tail(4)\nOut[135]: \n AAPL   MSFT    XOM      SPX\n2011-10-11  400.29  27.00  76.27  1195.54\n2011-10-12  402.19  26.96  77.16  1207.25\n2011-10-13  408.43  27.18  76.37  1203.66\n2011-10-14  422.00  27.27  78.11  1224.58\n```", "```py\nIn [136]: def spx_corr(group):\n .....:     return group.corrwith(group[\"SPX\"])\n```", "```py\nIn [137]: rets = close_px.pct_change().dropna()\n```", "```py\nIn [138]: def get_year(x):\n .....:     return x.year\n\nIn [139]: by_year = rets.groupby(get_year)\n\nIn [140]: by_year.apply(spx_corr)\nOut[140]: \n AAPL      MSFT       XOM  SPX\n2003  0.541124  0.745174  0.661265  1.0\n2004  0.374283  0.588531  0.557742  1.0\n2005  0.467540  0.562374  0.631010  1.0\n2006  0.428267  0.406126  0.518514  1.0\n2007  0.508118  0.658770  0.786264  1.0\n2008  0.681434  0.804626  0.828303  1.0\n2009  0.707103  0.654902  0.797921  1.0\n2010  0.710105  0.730118  0.839057  1.0\n2011  0.691931  0.800996  0.859975  1.0\n```", "```py\nIn [141]: def corr_aapl_msft(group):\n .....:     return group[\"AAPL\"].corr(group[\"MSFT\"])\n\nIn [142]: by_year.apply(corr_aapl_msft)\nOut[142]: \n2003    0.480868\n2004    0.259024\n2005    0.300093\n2006    0.161735\n2007    0.417738\n2008    0.611901\n2009    0.432738\n2010    0.571946\n2011    0.581987\ndtype: float64\n```", "```py\nimport statsmodels.api as sm\ndef regress(data, yvar=None, xvars=None):\n Y = data[yvar]\n X = data[xvars]\n X[\"intercept\"] = 1.\n result = sm.OLS(Y, X).fit()\n return result.params\n```", "```py\nconda install statsmodels\n```", "```py\nIn [144]: by_year.apply(regress, yvar=\"AAPL\", xvars=[\"SPX\"])\nOut[144]: \n SPX  intercept\n2003  1.195406   0.000710\n2004  1.363463   0.004201\n2005  1.766415   0.003246\n2006  1.645496   0.000080\n2007  1.198761   0.003438\n2008  0.968016  -0.001110\n2009  0.879103   0.002954\n2010  1.052608   0.001261\n2011  0.806605   0.001514\n```", "```py\nIn [145]: df = pd.DataFrame({'key': ['a', 'b', 'c'] * 4,\n .....:                    'value': np.arange(12.)})\n\nIn [146]: df\nOut[146]: \n key  value\n0    a    0.0\n1    b    1.0\n2    c    2.0\n3    a    3.0\n4    b    4.0\n5    c    5.0\n6    a    6.0\n7    b    7.0\n8    c    8.0\n9    a    9.0\n10   b   10.0\n11   c   11.0\n```", "```py\nIn [147]: g = df.groupby('key')['value']\n\nIn [148]: g.mean()\nOut[148]: \nkey\na    4.5\nb    5.5\nc    6.5\nName: value, dtype: float64\n```", "```py\nIn [149]: def get_mean(group):\n .....:     return group.mean()\n\nIn [150]: g.transform(get_mean)\nOut[150]: \n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n```", "```py\nIn [151]: g.transform('mean')\nOut[151]: \n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n```", "```py\nIn [152]: def times_two(group):\n .....:     return group * 2\n\nIn [153]: g.transform(times_two)\nOut[153]: \n0      0.0\n1      2.0\n2      4.0\n3      6.0\n4      8.0\n5     10.0\n6     12.0\n7     14.0\n8     16.0\n9     18.0\n10    20.0\n11    22.0\nName: value, dtype: float64\n```", "```py\nIn [154]: def get_ranks(group):\n .....:     return group.rank(ascending=False)\n\nIn [155]: g.transform(get_ranks)\nOut[155]: \n0     4.0\n1     4.0\n2     4.0\n3     3.0\n4     3.0\n5     3.0\n6     2.0\n7     2.0\n8     2.0\n9     1.0\n10    1.0\n11    1.0\nName: value, dtype: float64\n```", "```py\nIn [156]: def normalize(x):\n .....:     return (x - x.mean()) / x.std()\n```", "```py\nIn [157]: g.transform(normalize)\nOut[157]: \n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64\n\nIn [158]: g.apply(normalize)\nOut[158]: \nkey \na    0    -1.161895\n 3    -0.387298\n 6     0.387298\n 9     1.161895\nb    1    -1.161895\n 4    -0.387298\n 7     0.387298\n 10    1.161895\nc    2    -1.161895\n 5    -0.387298\n 8     0.387298\n 11    1.161895\nName: value, dtype: float64\n```", "```py\nIn [159]: g.transform('mean')\nOut[159]: \n0     4.5\n1     5.5\n2     6.5\n3     4.5\n4     5.5\n5     6.5\n6     4.5\n7     5.5\n8     6.5\n9     4.5\n10    5.5\n11    6.5\nName: value, dtype: float64\n\nIn [160]: normalized = (df['value'] - g.transform('mean')) / g.transform('std')\n\nIn [161]: normalized\nOut[161]: \n0    -1.161895\n1    -1.161895\n2    -1.161895\n3    -0.387298\n4    -0.387298\n5    -0.387298\n6     0.387298\n7     0.387298\n8     0.387298\n9     1.161895\n10    1.161895\n11    1.161895\nName: value, dtype: float64\n```", "```py\nIn [162]: tips.head()\nOut[162]: \n total_bill   tip smoker  day    time  size   tip_pct\n0       16.99  1.01     No  Sun  Dinner     2  0.059447\n1       10.34  1.66     No  Sun  Dinner     3  0.160542\n2       21.01  3.50     No  Sun  Dinner     3  0.166587\n3       23.68  3.31     No  Sun  Dinner     2  0.139780\n4       24.59  3.61     No  Sun  Dinner     4  0.146808\n\nIn [163]: tips.pivot_table(index=[\"day\", \"smoker\"],\n .....:                  values=[\"size\", \"tip\", \"tip_pct\", \"total_bill\"])\nOut[163]: \n size       tip   tip_pct  total_bill\nday  smoker \nFri  No      2.250000  2.812500  0.151650   18.420000\n Yes     2.066667  2.714000  0.174783   16.813333\nSat  No      2.555556  3.102889  0.158048   19.661778\n Yes     2.476190  2.875476  0.147906   21.276667\nSun  No      2.929825  3.167895  0.160113   20.506667\n Yes     2.578947  3.516842  0.187250   24.120000\nThur No      2.488889  2.673778  0.160298   17.113111\n Yes     2.352941  3.030000  0.163863   19.190588\n```", "```py\nIn [164]: tips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",\n .....:                  values=[\"tip_pct\", \"size\"])\nOut[164]: \n size             tip_pct \nsmoker             No       Yes        No       Yes\ntime   day \nDinner Fri   2.000000  2.222222  0.139622  0.165347\n Sat   2.555556  2.476190  0.158048  0.147906\n Sun   2.929825  2.578947  0.160113  0.187250\n Thur  2.000000       NaN  0.159744       NaN\nLunch  Fri   3.000000  1.833333  0.187735  0.188937\n Thur  2.500000  2.352941  0.160311  0.163863\n```", "```py\nIn [165]: tips.pivot_table(index=[\"time\", \"day\"], columns=\"smoker\",\n .....:                  values=[\"tip_pct\", \"size\"], margins=True)\nOut[165]: \n size                       tip_pct \nsmoker             No       Yes       All        No       Yes       All\ntime   day \nDinner Fri   2.000000  2.222222  2.166667  0.139622  0.165347  0.158916\n Sat   2.555556  2.476190  2.517241  0.158048  0.147906  0.153152\n Sun   2.929825  2.578947  2.842105  0.160113  0.187250  0.166897\n Thur  2.000000       NaN  2.000000  0.159744       NaN  0.159744\nLunch  Fri   3.000000  1.833333  2.000000  0.187735  0.188937  0.188765\n Thur  2.500000  2.352941  2.459016  0.160311  0.163863  0.161301\nAll          2.668874  2.408602  2.569672  0.159328  0.163196  0.160803\n```", "```py\nIn [166]: tips.pivot_table(index=[\"time\", \"smoker\"], columns=\"day\",\n .....:                  values=\"tip_pct\", aggfunc=len, margins=True)\nOut[166]: \nday             Fri   Sat   Sun  Thur  All\ntime   smoker \nDinner No       3.0  45.0  57.0   1.0  106\n Yes      9.0  42.0  19.0   NaN   70\nLunch  No       1.0   NaN   NaN  44.0   45\n Yes      6.0   NaN   NaN  17.0   23\nAll            19.0  87.0  76.0  62.0  244\n```", "```py\nIn [167]: tips.pivot_table(index=[\"time\", \"size\", \"smoker\"], columns=\"day\",\n .....:                  values=\"tip_pct\", fill_value=0)\nOut[167]: \nday                      Fri       Sat       Sun      Thur\ntime   size smoker \nDinner 1    No      0.000000  0.137931  0.000000  0.000000\n Yes     0.000000  0.325733  0.000000  0.000000\n 2    No      0.139622  0.162705  0.168859  0.159744\n Yes     0.171297  0.148668  0.207893  0.000000\n 3    No      0.000000  0.154661  0.152663  0.000000\n...                      ...       ...       ...       ...\nLunch  3    Yes     0.000000  0.000000  0.000000  0.204952\n 4    No      0.000000  0.000000  0.000000  0.138919\n Yes     0.000000  0.000000  0.000000  0.155410\n 5    No      0.000000  0.000000  0.000000  0.121389\n 6    No      0.000000  0.000000  0.000000  0.173706\n[21 rows x 4 columns]\n```", "```py\nIn [168]: from io import StringIO\n\nIn [169]: data = \"\"\"Sample  Nationality  Handedness\n .....: 1   USA  Right-handed\n .....: 2   Japan    Left-handed\n .....: 3   USA  Right-handed\n .....: 4   Japan    Right-handed\n .....: 5   Japan    Left-handed\n .....: 6   Japan    Right-handed\n .....: 7   USA  Right-handed\n .....: 8   USA  Left-handed\n .....: 9   Japan    Right-handed\n .....: 10  USA  Right-handed\"\"\"\n .....:\n\nIn [170]: data = pd.read_table(StringIO(data), sep=\"\\s+\")\n```", "```py\nIn [171]: data\nOut[171]: \n Sample Nationality    Handedness\n0       1         USA  Right-handed\n1       2       Japan   Left-handed\n2       3         USA  Right-handed\n3       4       Japan  Right-handed\n4       5       Japan   Left-handed\n5       6       Japan  Right-handed\n6       7         USA  Right-handed\n7       8         USA   Left-handed\n8       9       Japan  Right-handed\n9      10         USA  Right-handed\n```", "```py\nIn [172]: pd.crosstab(data[\"Nationality\"], data[\"Handedness\"], margins=True)\nOut[172]: \nHandedness   Left-handed  Right-handed  All\nNationality \nJapan                  2             3    5\nUSA                    1             4    5\nAll                    3             7   10\n```", "```py\nIn [173]: pd.crosstab([tips[\"time\"], tips[\"day\"]], tips[\"smoker\"], margins=True)\nOut[173]: \nsmoker        No  Yes  All\ntime   day \nDinner Fri     3    9   12\n Sat    45   42   87\n Sun    57   19   76\n Thur    1    0    1\nLunch  Fri     1    6    7\n Thur   44   17   61\nAll          151   93  244\n```"]