["```py\nIn [2]: tup = (4, 5, 6)\n\nIn [3]: tup\nOut[3]: (4, 5, 6)\n```", "```py\nIn [4]: tup = 4, 5, 6\n\nIn [5]: tup\nOut[5]: (4, 5, 6)\n```", "```py\nIn [6]: tuple([4, 0, 2])\nOut[6]: (4, 0, 2)\n\nIn [7]: tup = tuple('string')\n\nIn [8]: tup\nOut[8]: ('s', 't', 'r', 'i', 'n', 'g')\n```", "```py\nIn [9]: tup[0]\nOut[9]: 's'\n```", "```py\nIn [10]: nested_tup = (4, 5, 6), (7, 8)\n\nIn [11]: nested_tup\nOut[11]: ((4, 5, 6), (7, 8))\n\nIn [12]: nested_tup[0]\nOut[12]: (4, 5, 6)\n\nIn [13]: nested_tup[1]\nOut[13]: (7, 8)\n```", "```py\nIn [14]: tup = tuple(['foo', [1, 2], True])\n\nIn [15]: tup[2] = False\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-15-b89d0c4ae599> in <module>\n----> 1 tup[2] = False\nTypeError: 'tuple' object does not support item assignment\n```", "```py\nIn [16]: tup[1].append(3)\n\nIn [17]: tup\nOut[17]: ('foo', [1, 2, 3], True)\n```", "```py\nIn [18]: (4, None, 'foo') + (6, 0) + ('bar',)\nOut[18]: (4, None, 'foo', 6, 0, 'bar')\n```", "```py\nIn [19]: ('foo', 'bar') * 4\nOut[19]: ('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')\n```", "```py\nIn [20]: tup = (4, 5, 6)\n\nIn [21]: a, b, c = tup\n\nIn [22]: b\nOut[22]: 5\n```", "```py\nIn [23]: tup = 4, 5, (6, 7)\n\nIn [24]: a, b, (c, d) = tup\n\nIn [25]: d\nOut[25]: 7\n```", "```py\ntmp = a\na = b\nb = tmp\n```", "```py\nIn [26]: a, b = 1, 2\n\nIn [27]: a\nOut[27]: 1\n\nIn [28]: b\nOut[28]: 2\n\nIn [29]: b, a = a, b\n\nIn [30]: a\nOut[30]: 2\n\nIn [31]: b\nOut[31]: 1\n```", "```py\nIn [32]: seq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\nIn [33]: for a, b, c in seq:\n ....:     print(f'a={a}, b={b}, c={c}')\na=1, b=2, c=3\na=4, b=5, c=6\na=7, b=8, c=9\n```", "```py\nIn [34]: values = 1, 2, 3, 4, 5\n\nIn [35]: a, b, *rest = values\n\nIn [36]: a\nOut[36]: 1\n\nIn [37]: b\nOut[37]: 2\n\nIn [38]: rest\nOut[38]: [3, 4, 5]\n```", "```py\nIn [39]: a, b, *_ = values\n```", "```py\nIn [40]: a = (1, 2, 2, 2, 3, 4, 2)\n\nIn [41]: a.count(2)\nOut[41]: 4\n```", "```py\nIn [42]: a_list = [2, 3, 7, None]\n\nIn [43]: tup = (\"foo\", \"bar\", \"baz\")\n\nIn [44]: b_list = list(tup)\n\nIn [45]: b_list\nOut[45]: ['foo', 'bar', 'baz']\n\nIn [46]: b_list[1] = \"peekaboo\"\n\nIn [47]: b_list\nOut[47]: ['foo', 'peekaboo', 'baz']\n```", "```py\nIn [48]: gen = range(10)\n\nIn [49]: gen\nOut[49]: range(0, 10)\n\nIn [50]: list(gen)\nOut[50]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nIn [51]: b_list.append(\"dwarf\")\n\nIn [52]: b_list\nOut[52]: ['foo', 'peekaboo', 'baz', 'dwarf']\n```", "```py\nIn [53]: b_list.insert(1, \"red\")\n\nIn [54]: b_list\nOut[54]: ['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n```", "```py\nIn [55]: b_list.pop(2)\nOut[55]: 'peekaboo'\n\nIn [56]: b_list\nOut[56]: ['foo', 'red', 'baz', 'dwarf']\n```", "```py\nIn [57]: b_list.append(\"foo\")\n\nIn [58]: b_list\nOut[58]: ['foo', 'red', 'baz', 'dwarf', 'foo']\n\nIn [59]: b_list.remove(\"foo\")\n\nIn [60]: b_list\nOut[60]: ['red', 'baz', 'dwarf', 'foo']\n```", "```py\nIn [61]: \"dwarf\" in b_list\nOut[61]: True\n```", "```py\nIn [62]: \"dwarf\" not in b_list\nOut[62]: False\n```", "```py\nIn [63]: [4, None, \"foo\"] + [7, 8, (2, 3)]\nOut[63]: [4, None, 'foo', 7, 8, (2, 3)]\n```", "```py\nIn [64]: x = [4, None, \"foo\"]\n\nIn [65]: x.extend([7, 8, (2, 3)])\n\nIn [66]: x\nOut[66]: [4, None, 'foo', 7, 8, (2, 3)]\n```", "```py\neverything = []\nfor chunk in list_of_lists:\n everything.extend(chunk)\n```", "```py\neverything = []\nfor chunk in list_of_lists:\n everything = everything + chunk\n```", "```py\nIn [67]: a = [7, 2, 5, 1, 3]\n\nIn [68]: a.sort()\n\nIn [69]: a\nOut[69]: [1, 2, 3, 5, 7]\n```", "```py\nIn [70]: b = [\"saw\", \"small\", \"He\", \"foxes\", \"six\"]\n\nIn [71]: b.sort(key=len)\n\nIn [72]: b\nOut[72]: ['He', 'saw', 'six', 'small', 'foxes']\n```", "```py\nIn [73]: seq = [7, 2, 3, 7, 5, 6, 0, 1]\n\nIn [74]: seq[1:5]\nOut[74]: [2, 3, 7, 5]\n```", "```py\nIn [75]: seq[3:5] = [6, 3]\n\nIn [76]: seq\nOut[76]: [7, 2, 3, 6, 3, 6, 0, 1]\n```", "```py\nIn [77]: seq[:5]\nOut[77]: [7, 2, 3, 6, 3]\n\nIn [78]: seq[3:]\nOut[78]: [6, 3, 6, 0, 1]\n```", "```py\nIn [79]: seq[-4:]\nOut[79]: [3, 6, 0, 1]\n\nIn [80]: seq[-6:-2]\nOut[80]: [3, 6, 3, 6]\n```", "```py\nIn [81]: seq[::2]\nOut[81]: [7, 3, 3, 0]\n```", "```py\nIn [82]: seq[::-1]\nOut[82]: [1, 0, 6, 3, 6, 3, 2, 7]\n```", "```py\nIn [83]: empty_dict = {}\n\nIn [84]: d1 = {\"a\": \"some value\", \"b\": [1, 2, 3, 4]}\n\nIn [85]: d1\nOut[85]: {'a': 'some value', 'b': [1, 2, 3, 4]}\n```", "```py\nIn [86]: d1[7] = \"an integer\"\n\nIn [87]: d1\nOut[87]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n\nIn [88]: d1[\"b\"]\nOut[88]: [1, 2, 3, 4]\n```", "```py\nIn [89]: \"b\" in d1\nOut[89]: True\n```", "```py\nIn [90]: d1[5] = \"some value\"\n\nIn [91]: d1\nOut[91]: \n{'a': 'some value',\n 'b': [1, 2, 3, 4],\n 7: 'an integer',\n 5: 'some value'}\n\nIn [92]: d1[\"dummy\"] = \"another value\"\n\nIn [93]: d1\nOut[93]: \n{'a': 'some value',\n 'b': [1, 2, 3, 4],\n 7: 'an integer',\n 5: 'some value',\n 'dummy': 'another value'}\n\nIn [94]: del d1[5]\n\nIn [95]: d1\nOut[95]: \n{'a': 'some value',\n 'b': [1, 2, 3, 4],\n 7: 'an integer',\n 'dummy': 'another value'}\n\nIn [96]: ret = d1.pop(\"dummy\")\n\nIn [97]: ret\nOut[97]: 'another value'\n\nIn [98]: d1\nOut[98]: {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n```", "```py\nIn [99]: list(d1.keys())\nOut[99]: ['a', 'b', 7]\n\nIn [100]: list(d1.values())\nOut[100]: ['some value', [1, 2, 3, 4], 'an integer']\n```", "```py\nIn [101]: list(d1.items())\nOut[101]: [('a', 'some value'), ('b', [1, 2, 3, 4]), (7, 'an integer')]\n```", "```py\nIn [102]: d1.update({\"b\": \"foo\", \"c\": 12})\n\nIn [103]: d1\nOut[103]: {'a': 'some value', 'b': 'foo', 7: 'an integer', 'c': 12}\n```", "```py\nmapping = {}\nfor key, value in zip(key_list, value_list):\n mapping[key] = value\n```", "```py\nIn [104]: tuples = zip(range(5), reversed(range(5)))\n\nIn [105]: tuples\nOut[105]: <zip at 0x17d604d00>\n\nIn [106]: mapping = dict(tuples)\n\nIn [107]: mapping\nOut[107]: {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n```", "```py\nif key in some_dict:\n value = some_dict[key]\nelse:\n value = default_value\n```", "```py\nvalue = some_dict.get(key, default_value)\n```", "```py\nIn [108]: words = [\"apple\", \"bat\", \"bar\", \"atom\", \"book\"]\n\nIn [109]: by_letter = {}\n\nIn [110]: for word in words:\n .....:     letter = word[0]\n .....:     if letter not in by_letter:\n .....:         by_letter[letter] = [word]\n .....:     else:\n .....:         by_letter[letter].append(word)\n .....:\n\nIn [111]: by_letter\nOut[111]: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n```", "```py\nIn [112]: by_letter = {}\n\nIn [113]: for word in words:\n .....:     letter = word[0]\n .....:     by_letter.setdefault(letter, []).append(word)\n .....:\n\nIn [114]: by_letter\nOut[114]: {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n```", "```py\nIn [115]: from collections import defaultdict\n\nIn [116]: by_letter = defaultdict(list)\n\nIn [117]: for word in words:\n .....:     by_letter[word[0]].append(word)\n```", "```py\nIn [118]: hash(\"string\")\nOut[118]: 4022908869268713487\n\nIn [119]: hash((1, 2, (2, 3)))\nOut[119]: -9209053662355515447\n\nIn [120]: hash((1, 2, [2, 3])) # fails because lists are mutable\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-120-473c35a62c0b> in <module>\n----> 1 hash((1, 2, [2, 3])) # fails because lists are mutable\nTypeError: unhashable type: 'list'\n```", "```py\nIn [121]: d = {}\n\nIn [122]: d[tuple([1, 2, 3])] = 5\n\nIn [123]: d\nOut[123]: {(1, 2, 3): 5}\n```", "```py\nIn [124]: set([2, 2, 2, 1, 3, 3])\nOut[124]: {1, 2, 3}\n\nIn [125]: {2, 2, 2, 1, 3, 3}\nOut[125]: {1, 2, 3}\n```", "```py\nIn [126]: a = {1, 2, 3, 4, 5}\n\nIn [127]: b = {3, 4, 5, 6, 7, 8}\n```", "```py\nIn [128]: a.union(b)\nOut[128]: {1, 2, 3, 4, 5, 6, 7, 8}\n\nIn [129]: a | b\nOut[129]: {1, 2, 3, 4, 5, 6, 7, 8}\n```", "```py\nIn [130]: a.intersection(b)\nOut[130]: {3, 4, 5}\n\nIn [131]: a & b\nOut[131]: {3, 4, 5}\n```", "```py\nIn [132]: c = a.copy()\n\nIn [133]: c |= b\n\nIn [134]: c\nOut[134]: {1, 2, 3, 4, 5, 6, 7, 8}\n\nIn [135]: d = a.copy()\n\nIn [136]: d &= b\n\nIn [137]: d\nOut[137]: {3, 4, 5}\n```", "```py\nIn [138]: my_data = [1, 2, 3, 4]\n\nIn [139]: my_set = {tuple(my_data)}\n\nIn [140]: my_set\nOut[140]: {(1, 2, 3, 4)}\n```", "```py\nIn [141]: a_set = {1, 2, 3, 4, 5}\n\nIn [142]: {1, 2, 3}.issubset(a_set)\nOut[142]: True\n\nIn [143]: a_set.issuperset({1, 2, 3})\nOut[143]: True\n```", "```py\nIn [144]: {1, 2, 3} == {3, 2, 1}\nOut[144]: True\n```", "```py\nindex = 0\nfor value in collection:\n # do something with value\n index += 1\n```", "```py\nfor index, value in enumerate(collection):\n # do something with value\n```", "```py\nIn [145]: sorted([7, 1, 2, 6, 0, 3, 2])\nOut[145]: [0, 1, 2, 2, 3, 6, 7]\n\nIn [146]: sorted(\"horse race\")\nOut[146]: [' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's']\n```", "```py\nIn [147]: seq1 = [\"foo\", \"bar\", \"baz\"]\n\nIn [148]: seq2 = [\"one\", \"two\", \"three\"]\n\nIn [149]: zipped = zip(seq1, seq2)\n\nIn [150]: list(zipped)\nOut[150]: [('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n```", "```py\nIn [151]: seq3 = [False, True]\n\nIn [152]: list(zip(seq1, seq2, seq3))\nOut[152]: [('foo', 'one', False), ('bar', 'two', True)]\n```", "```py\nIn [153]: for index, (a, b) in enumerate(zip(seq1, seq2)):\n .....:     print(f\"{index}: {a}, {b}\")\n .....:\n0: foo, one\n1: bar, two\n2: baz, three\n```", "```py\nIn [154]: list(reversed(range(10)))\nOut[154]: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n```", "```py\n[expr for value in collection if condition]\n```", "```py\nresult = []\nfor value in collection:\n if condition:\n result.append(expr)\n```", "```py\nIn [155]: strings = [\"a\", \"as\", \"bat\", \"car\", \"dove\", \"python\"]\n\nIn [156]: [x.upper() for x in strings if len(x) > 2]\nOut[156]: ['BAT', 'CAR', 'DOVE', 'PYTHON']\n```", "```py\ndict_comp = {key-expr: value-expr for value in collection\n if condition}\n```", "```py\nset_comp = {expr for value in collection if condition}\n```", "```py\nIn [157]: unique_lengths = {len(x) for x in strings}\n\nIn [158]: unique_lengths\nOut[158]: {1, 2, 3, 4, 6}\n```", "```py\nIn [159]: set(map(len, strings))\nOut[159]: {1, 2, 3, 4, 6}\n```", "```py\nIn [160]: loc_mapping = {value: index for index, value in enumerate(strings)}\n\nIn [161]: loc_mapping\nOut[161]: {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n```", "```py\nIn [162]: all_data = [[\"John\", \"Emily\", \"Michael\", \"Mary\", \"Steven\"],\n .....:             [\"Maria\", \"Juan\", \"Javier\", \"Natalia\", \"Pilar\"]]\n```", "```py\nIn [163]: names_of_interest = []\n\nIn [164]: for names in all_data:\n .....:     enough_as = [name for name in names if name.count(\"a\") >= 2]\n .....:     names_of_interest.extend(enough_as)\n .....:\n\nIn [165]: names_of_interest\nOut[165]: ['Maria', 'Natalia']\n```", "```py\nIn [166]: result = [name for names in all_data for name in names\n .....:           if name.count(\"a\") >= 2]\n\nIn [167]: result\nOut[167]: ['Maria', 'Natalia']\n```", "```py\nIn [168]: some_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\nIn [169]: flattened = [x for tup in some_tuples for x in tup]\n\nIn [170]: flattened\nOut[170]: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nflattened = []\n\nfor tup in some_tuples:\n for x in tup:\n flattened.append(x)\n```", "```py\nIn [172]: [[x for x in tup] for tup in some_tuples]\nOut[172]: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```", "```py\nIn [173]: def my_function(x, y):\n .....:     return x + y\n```", "```py\nIn [174]: my_function(1, 2)\nOut[174]: 3\n\nIn [175]: result = my_function(1, 2)\n\nIn [176]: result\nOut[176]: 3\n```", "```py\nIn [177]: def function_without_return(x):\n .....:     print(x)\n\nIn [178]: result = function_without_return(\"hello!\")\nhello!\n\nIn [179]: print(result)\nNone\n```", "```py\ndef my_function2(x, y, z=1.5):\n if z > 1:\n return z * (x + y)\n else:\n return z / (x + y)\n```", "```py\nIn [181]: my_function2(5, 6, z=0.7)\nOut[181]: 0.06363636363636363\n\nIn [182]: my_function2(3.14, 7, 3.5)\nOut[182]: 35.49\n\nIn [183]: my_function2(10, 20)\nOut[183]: 45.0\n```", "```py\ndef func():\n a = []\n for i in range(5):\n a.append(i)\n```", "```py\nIn [184]: a = []\n\nIn [185]: def func():\n .....:     for i in range(5):\n .....:         a.append(i)\n```", "```py\nIn [186]: func()\n\nIn [187]: a\nOut[187]: [0, 1, 2, 3, 4]\n\nIn [188]: func()\n\nIn [189]: a\nOut[189]: [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]\n```", "```py\nIn [190]: a = None\n\nIn [191]: def bind_a_variable():\n .....:     global a\n .....:     a = []\n .....: bind_a_variable()\n .....:\n\nIn [192]: print(a)\n[]\n```", "```py\ndef f():\n a = 5\n b = 6\n c = 7\n return a, b, c\n\na, b, c = f()\n```", "```py\nreturn_value = f()\n```", "```py\ndef f():\n a = 5\n b = 6\n c = 7\n return {\"a\" : a, \"b\" : b, \"c\" : c}\n```", "```py\nIn [193]: states = [\"   Alabama \", \"Georgia!\", \"Georgia\", \"georgia\", \"FlOrIda\",\n .....:           \"south   carolina##\", \"West virginia?\"]\n```", "```py\nimport re\n\ndef clean_strings(strings):\n result = []\n for value in strings:\n value = value.strip()\n value = re.sub(\"[!#?]\", \"\", value)\n value = value.title()\n result.append(value)\n return result\n```", "```py\nIn [195]: clean_strings(states)\nOut[195]: \n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'South   Carolina',\n 'West Virginia']\n```", "```py\ndef remove_punctuation(value):\n return re.sub(\"[!#?]\", \"\", value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n result = []\n for value in strings:\n for func in ops:\n value = func(value)\n result.append(value)\n return result\n```", "```py\nIn [197]: clean_strings(states, clean_ops)\nOut[197]: \n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'South   Carolina',\n 'West Virginia']\n```", "```py\nIn [198]: for x in map(remove_punctuation, states):\n .....:     print(x)\nAlabama \nGeorgia\nGeorgia\ngeorgia\nFlOrIda\nsouth   carolina\nWest virginia\n```", "```py\nIn [199]: def short_function(x):\n .....:     return x * 2\n\nIn [200]: equiv_anon = lambda x: x * 2\n```", "```py\nIn [201]: def apply_to_list(some_list, f):\n .....:     return [f(x) for x in some_list]\n\nIn [202]: ints = [4, 0, 1, 5, 6]\n\nIn [203]: apply_to_list(ints, lambda x: x * 2)\nOut[203]: [8, 0, 2, 10, 12]\n```", "```py\nIn [204]: strings = [\"foo\", \"card\", \"bar\", \"aaaa\", \"abab\"]\n```", "```py\nIn [205]: strings.sort(key=lambda x: len(set(x)))\n\nIn [206]: strings\nOut[206]: ['aaaa', 'foo', 'abab', 'bar', 'card']\n```", "```py\nIn [207]: some_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nIn [208]: for key in some_dict:\n .....:     print(key)\na\nb\nc\n```", "```py\nIn [209]: dict_iterator = iter(some_dict)\n\nIn [210]: dict_iterator\nOut[210]: <dict_keyiterator at 0x17d60e020>\n```", "```py\nIn [211]: list(dict_iterator)\nOut[211]: ['a', 'b', 'c']\n```", "```py\ndef squares(n=10):\n print(f\"Generating squares from 1 to {n ** 2}\")\n for i in range(1, n + 1):\n yield i ** 2\n```", "```py\nIn [213]: gen = squares()\n\nIn [214]: gen\nOut[214]: <generator object squares at 0x17d5fea40>\n```", "```py\nIn [215]: for x in gen:\n .....:     print(x, end=\" \")\nGenerating squares from 1 to 100\n1 4 9 16 25 36 49 64 81 100\n```", "```py\nIn [216]: gen = (x ** 2 for x in range(100))\n\nIn [217]: gen\nOut[217]: <generator object <genexpr> at 0x17d5feff0>\n```", "```py\ndef _make_gen():\n for x in range(100):\n yield x ** 2\ngen = _make_gen()\n```", "```py\nIn [218]: sum(x ** 2 for x in range(100))\nOut[218]: 328350\n\nIn [219]: dict((i, i ** 2) for i in range(5))\nOut[219]: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n```", "```py\nIn [220]: import itertools\n\nIn [221]: def first_letter(x):\n .....:     return x[0]\n\nIn [222]: names = [\"Alan\", \"Adam\", \"Wes\", \"Will\", \"Albert\", \"Steven\"]\n\nIn [223]: for letter, names in itertools.groupby(names, first_letter):\n .....:     print(letter, list(names)) # names is a generator\nA ['Alan', 'Adam']\nW ['Wes', 'Will']\nA ['Albert']\nS ['Steven']\n```", "```py\nIn [224]: float(\"1.2345\")\nOut[224]: 1.2345\n\nIn [225]: float(\"something\")\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-225-5ccfe07933f4> in <module>\n----> 1 float(\"something\")\nValueError: could not convert string to float: 'something'\n```", "```py\ndef attempt_float(x):\n try:\n return float(x)\n except:\n return x\n```", "```py\nIn [227]: attempt_float(\"1.2345\")\nOut[227]: 1.2345\n\nIn [228]: attempt_float(\"something\")\nOut[228]: 'something'\n```", "```py\nIn [229]: float((1, 2))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-229-82f777b0e564> in <module>\n----> 1 float((1, 2))\nTypeError: float() argument must be a string or a real number, not 'tuple'\n```", "```py\ndef attempt_float(x):\n try:\n return float(x)\n except ValueError:\n return x\n```", "```py\nIn [231]: attempt_float((1, 2))\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-231-8b0026e9e6b7> in <module>\n----> 1 attempt_float((1, 2))\n<ipython-input-230-6209ddecd2b5> in attempt_float(x)\n 1 def attempt_float(x):\n 2     try:\n----> 3         return float(x)\n 4     except ValueError:\n 5         return x\nTypeError: float() argument must be a string or a real number, not 'tuple'\n```", "```py\ndef attempt_float(x):\n try:\n return float(x)\n except (TypeError, ValueError):\n return x\n```", "```py\nf = open(path, mode=\"w\")\n\ntry:\n write_to_file(f)\nfinally:\n f.close()\n```", "```py\nf = open(path, mode=\"w\")\n\ntry:\n write_to_file(f)\nexcept:\n print(\"Failed\")\nelse:\n print(\"Succeeded\")\nfinally:\n f.close()\n```", "```py\nIn [10]: %run examples/ipython_bug.py\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n/home/wesm/code/pydata-book/examples/ipython_bug.py in <module>()\n 13     throws_an_exception()\n 14\n---> 15 calling_things()\n\n/home/wesm/code/pydata-book/examples/ipython_bug.py in calling_things()\n 11 def calling_things():\n 12     works_fine()\n---> 13     throws_an_exception()\n 14\n 15 calling_things()\n\n/home/wesm/code/pydata-book/examples/ipython_bug.py in throws_an_exception()\n 7     a = 5\n 8     b = 6\n----> 9     assert(a + b == 10)\n 10\n 11 def calling_things():\n\nAssertionError:\n```", "```py\nIn [233]: path = \"examples/segismundo.txt\"\n\nIn [234]: f = open(path, encoding=\"utf-8\")\n```", "```py\nfor line in f:\n print(line)\n```", "```py\nIn [235]: lines = [x.rstrip() for x in open(path, encoding=\"utf-8\")]\n\nIn [236]: lines\nOut[236]: \n['Sue\u00f1a el rico en su riqueza,',\n 'que m\u00e1s cuidados le ofrece;',\n '',\n 'sue\u00f1a el pobre que padece',\n 'su miseria y su pobreza;',\n '',\n 'sue\u00f1a el que a medrar empieza,',\n 'sue\u00f1a el que afana y pretende,',\n 'sue\u00f1a el que agravia y ofende,',\n '',\n 'y en el mundo, en conclusi\u00f3n,',\n 'todos sue\u00f1an lo que son,',\n 'aunque ninguno lo entiende.',\n '']\n```", "```py\nIn [237]: f.close()\n```", "```py\nIn [238]: with open(path, encoding=\"utf-8\") as f:\n .....:     lines = [x.rstrip() for x in f]\n```", "```py\nIn [239]: f1 = open(path)\n\nIn [240]: f1.read(10)\nOut[240]: 'Sue\u00f1a el r'\n\nIn [241]: f2 = open(path, mode=\"rb\")  # Binary mode\n\nIn [242]: f2.read(10)\nOut[242]: b'Sue\\xc3\\xb1a el '\n```", "```py\nIn [243]: f1.tell()\nOut[243]: 11\n\nIn [244]: f2.tell()\nOut[244]: 10\n```", "```py\nIn [245]: import sys\n\nIn [246]: sys.getdefaultencoding()\nOut[246]: 'utf-8'\n```", "```py\nIn [247]: f1.seek(3)\nOut[247]: 3\n\nIn [248]: f1.read(1)\nOut[248]: '\u00f1'\n\nIn [249]: f1.tell()\nOut[249]: 5\n```", "```py\nIn [250]: f1.close()\n\nIn [251]: f2.close()\n```", "```py\nIn [252]: path\nOut[252]: 'examples/segismundo.txt'\n\nIn [253]: with open(\"tmp.txt\", mode=\"w\") as handle:\n .....:     handle.writelines(x for x in open(path) if len(x) > 1)\n\nIn [254]: with open(\"tmp.txt\") as f:\n .....:     lines = f.readlines()\n\nIn [255]: lines\nOut[255]: \n['Sue\u00f1a el rico en su riqueza,\\n',\n 'que m\u00e1s cuidados le ofrece;\\n',\n 'sue\u00f1a el pobre que padece\\n',\n 'su miseria y su pobreza;\\n',\n 'sue\u00f1a el que a medrar empieza,\\n',\n 'sue\u00f1a el que afana y pretende,\\n',\n 'sue\u00f1a el que agravia y ofende,\\n',\n 'y en el mundo, en conclusi\u00f3n,\\n',\n 'todos sue\u00f1an lo que son,\\n',\n 'aunque ninguno lo entiende.\\n']\n```", "```py\nIn [258]: with open(path) as f:\n .....:     chars = f.read(10)\n\nIn [259]: chars\nOut[259]: 'Sue\u00f1a el r'\n\nIn [260]: len(chars)\nOut[260]: 10\n```", "```py\nIn [261]: with open(path, mode=\"rb\") as f:\n .....:     data = f.read(10)\n\nIn [262]: data\nOut[262]: b'Sue\\xc3\\xb1a el '\n```", "```py\nIn [263]: data.decode(\"utf-8\")\nOut[263]: 'Sue\u00f1a el '\n\nIn [264]: data[:4].decode(\"utf-8\")\n---------------------------------------------------------------------------\nUnicodeDecodeError                        Traceback (most recent call last)\n<ipython-input-264-846a5c2fed34> in <module>\n----> 1 data[:4].decode(\"utf-8\")\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xc3 in position 3: unexpecte\nd end of data\n```", "```py\nIn [265]: sink_path = \"sink.txt\"\n\nIn [266]: with open(path) as source:\n .....:     with open(sink_path, \"x\", encoding=\"iso-8859-1\") as sink:\n .....:         sink.write(source.read())\n\nIn [267]: with open(sink_path, encoding=\"iso-8859-1\") as f:\n .....:     print(f.read(10))\nSue\u00f1a el r\n```", "```py\nIn [269]: f = open(path, encoding='utf-8')\n\nIn [270]: f.read(5)\nOut[270]: 'Sue\u00f1a'\n\nIn [271]: f.seek(4)\nOut[271]: 4\n\nIn [272]: f.read(1)\n---------------------------------------------------------------------------\nUnicodeDecodeError                        Traceback (most recent call last)\n<ipython-input-272-5a354f952aa4> in <module>\n----> 1 f.read(1)\n~/miniforge-x86/envs/book-env/lib/python3.10/codecs.py in decode(self, input, fin\nal)\n 320         # decode input (taking the buffer into account)\n 321         data = self.buffer + input\n--> 322         (result, consumed) = self._buffer_decode(data, self.errors, final\n)\n 323         # keep undecoded input until the next call\n 324         self.buffer = data[consumed:]\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xb1 in position 0: invalid s\ntart byte\n\nIn [273]: f.close()\n```"]