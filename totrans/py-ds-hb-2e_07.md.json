["```py\nIn [1]: import numpy as np\n        rng = np.random.default_rng(seed=1701)  # seed for reproducibility\n\n        x1 = rng.integers(10, size=6)  # one-dimensional array\n        x2 = rng.integers(10, size=(3, 4))  # two-dimensional array\n        x3 = rng.integers(10, size=(3, 4, 5))  # three-dimensional array\n```", "```py\nIn [2]: print(\"x3 ndim: \", x3.ndim)\n        print(\"x3 shape:\", x3.shape)\n        print(\"x3 size: \", x3.size)\n        print(\"dtype:   \", x3.dtype)\nOut[2]: x3 ndim:  3\n        x3 shape: (3, 4, 5)\n        x3 size:  60\n        dtype:    int64\n```", "```py\nIn [3]: x1\nOut[3]: array([9, 4, 0, 3, 8, 6])\n```", "```py\nIn [4]: x1[0]\nOut[4]: 9\n```", "```py\nIn [5]: x1[4]\nOut[5]: 8\n```", "```py\nIn [6]: x1[-1]\nOut[6]: 6\n```", "```py\nIn [7]: x1[-2]\nOut[7]: 8\n```", "```py\nIn [8]: x2\nOut[8]: array([[3, 1, 3, 7],\n               [4, 0, 2, 3],\n               [0, 0, 6, 9]])\n```", "```py\nIn [9]: x2[0, 0]\nOut[9]: 3\n```", "```py\nIn [10]: x2[2, 0]\nOut[10]: 0\n```", "```py\nIn [11]: x2[2, -1]\nOut[11]: 9\n```", "```py\nIn [12]: x2[0, 0] = 12\n         x2\nOut[12]: array([[12,  1,  3,  7],\n                [ 4,  0,  2,  3],\n                [ 0,  0,  6,  9]])\n```", "```py\nIn [13]: x1[0] = 3.14159  # this will be truncated!\n         x1\nOut[13]: array([3, 4, 0, 3, 8, 6])\n```", "```py\nx[start:stop:step]\n```", "```py\nIn [14]: x1\nOut[14]: array([3, 4, 0, 3, 8, 6])\n```", "```py\nIn [15]: x1[:3]  # first three elements\nOut[15]: array([3, 4, 0])\n```", "```py\nIn [16]: x1[3:]  # elements after index 3\nOut[16]: array([3, 8, 6])\n```", "```py\nIn [17]: x1[1:4]  # middle subarray\nOut[17]: array([4, 0, 3])\n```", "```py\nIn [18]: x1[::2]  # every second element\nOut[18]: array([3, 0, 8])\n```", "```py\nIn [19]: x1[1::2]  # every second element, starting at index 1\nOut[19]: array([4, 3, 6])\n```", "```py\nIn [20]: x1[::-1]  # all elements, reversed\nOut[20]: array([6, 8, 3, 0, 4, 3])\n```", "```py\nIn [21]: x1[4::-2]  # every second element from index 4, reversed\nOut[21]: array([8, 0, 3])\n```", "```py\nIn [22]: x2\nOut[22]: array([[12,  1,  3,  7],\n                [ 4,  0,  2,  3],\n                [ 0,  0,  6,  9]])\n```", "```py\nIn [23]: x2[:2, :3]  # first two rows & three columns\nOut[23]: array([[12,  1,  3],\n                [ 4,  0,  2]])\n```", "```py\nIn [24]: x2[:3, ::2]  # three rows, every second column\nOut[24]: array([[12,  3],\n                [ 4,  2],\n                [ 0,  6]])\n```", "```py\nIn [25]: x2[::-1, ::-1]  # all rows & columns, reversed\nOut[25]: array([[ 9,  6,  0,  0],\n                [ 3,  2,  0,  4],\n                [ 7,  3,  1, 12]])\n```", "```py\nIn [26]: x2[:, 0]  # first column of x2\nOut[26]: array([12,  4,  0])\n```", "```py\nIn [27]: x2[0, :]  # first row of x2\nOut[27]: array([12,  1,  3,  7])\n```", "```py\nIn [28]: x2[0]  # equivalent to x2[0, :]\nOut[28]: array([12,  1,  3,  7])\n```", "```py\nIn [29]: print(x2)\nOut[29]: [[12  1  3  7]\n          [ 4  0  2  3]\n          [ 0  0  6  9]]\n```", "```py\nIn [30]: x2_sub = x2[:2, :2]\n         print(x2_sub)\nOut[30]: [[12  1]\n          [ 4  0]]\n```", "```py\nIn [31]: x2_sub[0, 0] = 99\n         print(x2_sub)\nOut[31]: [[99  1]\n          [ 4  0]]\n```", "```py\nIn [32]: print(x2)\nOut[32]: [[99  1  3  7]\n          [ 4  0  2  3]\n          [ 0  0  6  9]]\n```", "```py\nIn [33]: x2_sub_copy = x2[:2, :2].copy()\n         print(x2_sub_copy)\nOut[33]: [[99  1]\n          [ 4  0]]\n```", "```py\nIn [34]: x2_sub_copy[0, 0] = 42\n         print(x2_sub_copy)\nOut[34]: [[42  1]\n          [ 4  0]]\n```", "```py\nIn [35]: print(x2)\nOut[35]: [[99  1  3  7]\n          [ 4  0  2  3]\n          [ 0  0  6  9]]\n```", "```py\nIn [36]: grid = np.arange(1, 10).reshape(3, 3)\n         print(grid)\nOut[36]: [[1 2 3]\n          [4 5 6]\n          [7 8 9]]\n```", "```py\nIn [37]: x = np.array([1, 2, 3])\n         x.reshape((1, 3))  # row vector via reshape\nOut[37]: array([[1, 2, 3]])\n```", "```py\nIn [38]: x.reshape((3, 1))  # column vector via reshape\nOut[38]: array([[1],\n                [2],\n                [3]])\n```", "```py\nIn [39]: x[np.newaxis, :]  # row vector via newaxis\nOut[39]: array([[1, 2, 3]])\n```", "```py\nIn [40]: x[:, np.newaxis]  # column vector via newaxis\nOut[40]: array([[1],\n                [2],\n                [3]])\n```", "```py\nIn [41]: x = np.array([1, 2, 3])\n         y = np.array([3, 2, 1])\n         np.concatenate([x, y])\nOut[41]: array([1, 2, 3, 3, 2, 1])\n```", "```py\nIn [42]: z = np.array([99, 99, 99])\n         print(np.concatenate([x, y, z]))\nOut[42]: [ 1  2  3  3  2  1 99 99 99]\n```", "```py\nIn [43]: grid = np.array([[1, 2, 3],\n                          [4, 5, 6]])\n```", "```py\nIn [44]: # concatenate along the first axis\n         np.concatenate([grid, grid])\nOut[44]: array([[1, 2, 3],\n                [4, 5, 6],\n                [1, 2, 3],\n                [4, 5, 6]])\n```", "```py\nIn [45]: # concatenate along the second axis (zero-indexed)\n         np.concatenate([grid, grid], axis=1)\nOut[45]: array([[1, 2, 3, 1, 2, 3],\n                [4, 5, 6, 4, 5, 6]])\n```", "```py\nIn [46]: # vertically stack the arrays\n         np.vstack([x, grid])\nOut[46]: array([[1, 2, 3],\n                [1, 2, 3],\n                [4, 5, 6]])\n```", "```py\nIn [47]: # horizontally stack the arrays\n         y = np.array([[99],\n                       [99]])\n         np.hstack([grid, y])\nOut[47]: array([[ 1,  2,  3, 99],\n                [ 4,  5,  6, 99]])\n```", "```py\nIn [48]: x = [1, 2, 3, 99, 99, 3, 2, 1]\n         x1, x2, x3 = np.split(x, [3, 5])\n         print(x1, x2, x3)\nOut[48]: [1 2 3] [99 99] [3 2 1]\n```", "```py\nIn [49]: grid = np.arange(16).reshape((4, 4))\n         grid\nOut[49]: array([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11],\n                [12, 13, 14, 15]])\n```", "```py\nIn [50]: upper, lower = np.vsplit(grid, [2])\n         print(upper)\n         print(lower)\nOut[50]: [[0 1 2 3]\n          [4 5 6 7]]\n         [[ 8  9 10 11]\n          [12 13 14 15]]\n```", "```py\nIn [51]: left, right = np.hsplit(grid, [2])\n         print(left)\n         print(right)\nOut[51]: [[ 0  1]\n          [ 4  5]\n          [ 8  9]\n          [12 13]]\n         [[ 2  3]\n          [ 6  7]\n          [10 11]\n          [14 15]]\n```"]