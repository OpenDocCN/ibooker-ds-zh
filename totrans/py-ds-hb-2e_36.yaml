- en: Chapter 32\. Text and Annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a good visualization involves guiding the reader so that the figure
    tells a story. In some cases, this story can be told in an entirely visual manner,
    without the need for added text, but in others, small textual cues and labels
    are necessary. Perhaps the most basic types of annotations you will use are axes
    labels and titles, but the options go beyond this. Let’s take a look at some data
    and how we might visualize and annotate it to help convey interesting information.
    We’ll start by setting up the notebook for plotting and importing the functions
    we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Example: Effect of Holidays on US Births'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s return to some data we worked with earlier, in [“Example: Birthrate Data”](ch21.xhtml#ch_0309-pivot-tables_example-birthrate-data),
    where we generated a plot of average births over the course of the calendar year.
    We’ll start with the same cleaning procedure we used there, and plot the results
    (see [Figure 32-1](#fig_0409-text-and-annotation_files_in_output_6_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![output 6 0](assets/output_6_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-1\. Average daily births by date^([1](ch32.xhtml#idm45858755315264))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When we’re visualizing data like this, it is often useful to annotate certain
    features of the plot to draw the reader’s attention. This can be done manually
    with the `plt.text`/`ax.text` functions, which will place text at a particular
    *x*/*y* value (see [Figure 32-2](#fig_0409-text-and-annotation_files_in_output_8_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![output 8 0](assets/output_8_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-2\. Annotated average daily births by date^([2](ch32.xhtml#idm45858755112736))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `ax.text` method takes an *x* position, a *y* position, a string, and then
    optional keywords specifying the color, size, style, alignment, and other properties
    of the text. Here we used `ha='right'` and `ha='center'`, where `ha` is short
    for *horizontal alignment*. See the docstrings of `plt.text` and `mpl.text.Text`
    for more information on the available options.
  prefs: []
  type: TYPE_NORMAL
- en: Transforms and Text Position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, we anchored our text annotations to data locations.
    Sometimes it’s preferable to anchor the text to a fixed position on the axes or
    figure, independent of the data. In Matplotlib, this is done by modifying the
    *transform*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Matplotlib makes use of a few different coordinate systems: a data point at
    <math alttext="left-parenthesis x comma y right-parenthesis equals left-parenthesis
    1 comma 1 right-parenthesis"><mrow><mo>(</mo> <mi>x</mi> <mo>,</mo> <mi>y</mi>
    <mo>)</mo> <mo>=</mo> <mo>(</mo> <mn>1</mn> <mo>,</mo> <mn>1</mn> <mo>)</mo></mrow></math>
    corresponds to a certain location on the axes or figure, which in turn corresponds
    to a particular pixel on the screen. Mathematically, transforming between such
    coordinate systems is relatively straightforward, and Matplotlib has a well-developed
    set of tools that it uses internally to perform these transforms (these tools
    can be explored in the `matplotlib.transforms` submodule).'
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical user rarely needs to worry about the details of the transforms, but
    it is helpful knowledge to have when considering the placement of text on a figure.
    There are three predefined transforms that can be useful in this situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ax.transData`'
  prefs: []
  type: TYPE_NORMAL
- en: Transform associated with data coordinates
  prefs: []
  type: TYPE_NORMAL
- en: '`ax.transAxes`'
  prefs: []
  type: TYPE_NORMAL
- en: Transform associated with the axes (in units of axes dimensions)
  prefs: []
  type: TYPE_NORMAL
- en: '`fig.transFigure`'
  prefs: []
  type: TYPE_NORMAL
- en: Transform associated with the figure (in units of figure dimensions)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example of drawing text at various locations using these transforms
    (see [Figure 32-3](#fig_0409-text-and-annotation_files_in_output_11_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 11 0](assets/output_11_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-3\. Comparing Matplotlib’s coordinate systems
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Matplotlib’s default text alignment is such that the “.” at the beginning of
    each string will approximately mark the specified coordinate location.
  prefs: []
  type: TYPE_NORMAL
- en: The `transData` coordinates give the usual data coordinates associated with
    the x- and y-axis labels. The `transAxes` coordinates give the location from the
    bottom-left corner of the axes (the white box), as a fraction of the total axes
    size. The `transFigure` coordinates are similar, but specify the position from
    the bottom-left corner of the figure (the gray box) as a fraction of the total
    figure size.
  prefs: []
  type: TYPE_NORMAL
- en: Notice now that if we change the axes limits, it is only the `transData` coordinates
    that will be affected, while the others remain stationary (see [Figure 32-4](#fig_0409-text-and-annotation_files_in_output_13_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 13 0](assets/output_13_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-4\. Comparing Matplotlib’s coordinate systems
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This behavior can be seen more clearly by changing the axes limits interactively:
    if you are executing this code in a notebook, you can make that happen by changing
    `%matplotlib inline` to `%matplotlib notebook` and using each plot’s menu to interact
    with the plot.'
  prefs: []
  type: TYPE_NORMAL
- en: Arrows and Annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with tickmarks and text, another useful annotation mark is the simple
    arrow.
  prefs: []
  type: TYPE_NORMAL
- en: 'While there is a `plt.arrow` function available, I wouldn’t suggest using it:
    the arrows it creates are SVG objects that will be subject to the varying aspect
    ratio of your plots, making it tricky to get them right. Instead, I’d suggest
    using the `plt.annotate` function, which creates some text and an arrow and allows
    the arrows to be very flexibly specified.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is a demonstration of `annotate` with several of its options (see [Figure 32-5](#fig_0409-text-and-annotation_files_in_output_16_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![output 16 0](assets/output_16_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-5\. Annotation examples
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The arrow style is controlled through the `arrowprops` dictionary, which has
    numerous options available. These options are well documented in Matplotlib’s
    online documentation, so rather than repeating them here it is probably more useful
    to show some examples. Let’s demonstrate several of the possible options using
    the birthrate plot from before (see [Figure 32-6](#fig_0409-text-and-annotation_files_in_output_18_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The variety of options make `annotate` powerful and flexible: you can create
    nearly any arrow style you wish. Unfortunately, it also means that these sorts
    of features often must be manually tweaked, a process that can be very time-consuming
    when producing publication-quality graphics! Finally, I’ll note that the preceding
    mix of styles is by no means best practice for presenting data, but rather is
    included as a demonstration of some of the available options.'
  prefs: []
  type: TYPE_NORMAL
- en: More discussion and examples of available arrow and annotation styles can be
    found in the Matplotlib [Annotations tutorial](https://oreil.ly/abuPw).
  prefs: []
  type: TYPE_NORMAL
- en: '![output 18 0](assets/output_18_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 32-6\. Annotated average birth rates by day^([3](ch32.xhtml#idm45858754301680))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ^([1](ch32.xhtml#idm45858755315264-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch32.xhtml#idm45858755112736-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch32.xhtml#idm45858754301680-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
