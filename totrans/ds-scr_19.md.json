["```py\nfrom scratch.linear_algebra import Vector, dot\n\ndef step_function(x: float) -> float:\n    return 1.0 if x >= 0 else 0.0\n\ndef perceptron_output(weights: Vector, bias: float, x: Vector) -> float:\n    \"\"\"Returns 1 if the perceptron 'fires', 0 if not\"\"\"\n    calculation = dot(weights, x) + bias\n    return step_function(calculation)\n```", "```py\ndot(weights, x) + bias == 0\n```", "```py\nand_weights = [2., 2]\nand_bias = -3.\n\nassert perceptron_output(and_weights, and_bias, [1, 1]) == 1\nassert perceptron_output(and_weights, and_bias, [0, 1]) == 0\nassert perceptron_output(and_weights, and_bias, [1, 0]) == 0\nassert perceptron_output(and_weights, and_bias, [0, 0]) == 0\n```", "```py\nor_weights = [2., 2]\nor_bias = -1.\n\nassert perceptron_output(or_weights, or_bias, [1, 1]) == 1\nassert perceptron_output(or_weights, or_bias, [0, 1]) == 1\nassert perceptron_output(or_weights, or_bias, [1, 0]) == 1\nassert perceptron_output(or_weights, or_bias, [0, 0]) == 0\n```", "```py\nnot_weights = [-2.]\nnot_bias = 1.\n\nassert perceptron_output(not_weights, not_bias, [0]) == 1\nassert perceptron_output(not_weights, not_bias, [1]) == 0\n```", "```py\nand_gate = min\nor_gate = max\nxor_gate = lambda x, y: 0 if x == y else 1\n```", "```py\nimport math\n\ndef sigmoid(t: float) -> float:\n    return 1 / (1 + math.exp(-t))\n```", "```py\ndef neuron_output(weights: Vector, inputs: Vector) -> float:\n    # weights includes the bias term, inputs includes a 1\n    return sigmoid(dot(weights, inputs))\n```", "```py\nfrom typing import List\n\ndef feed_forward(neural_network: List[List[Vector]],\n                 input_vector: Vector) -> List[Vector]:\n    \"\"\"\n Feeds the input vector through the neural network.\n Returns the outputs of all layers (not just the last one).\n \"\"\"\n    outputs: List[Vector] = []\n\n    for layer in neural_network:\n        input_with_bias = input_vector + [1]              # Add a constant.\n        output = [neuron_output(neuron, input_with_bias)  # Compute the output\n                  for neuron in layer]                    # for each neuron.\n        outputs.append(output)                            # Add to results.\n\n        # Then the input to the next layer is the output of this one\n        input_vector = output\n\n    return outputs\n```", "```py\nxor_network = [# hidden layer\n               [[20., 20, -30],      # 'and' neuron\n                [20., 20, -10]],     # 'or'  neuron\n               # output layer\n               [[-60., 60, -30]]]    # '2nd input but not 1st input' neuron\n\n# feed_forward returns the outputs of all layers, so the [-1] gets the\n# final output, and the [0] gets the value out of the resulting vector\nassert 0.000 < feed_forward(xor_network, [0, 0])[-1][0] < 0.001\nassert 0.999 < feed_forward(xor_network, [1, 0])[-1][0] < 1.000\nassert 0.999 < feed_forward(xor_network, [0, 1])[-1][0] < 1.000\nassert 0.000 < feed_forward(xor_network, [1, 1])[-1][0] < 0.001\n```", "```py\ndef sqerror_gradients(network: List[List[Vector]],\n                      input_vector: Vector,\n                      target_vector: Vector) -> List[List[Vector]]:\n    \"\"\"\n Given a neural network, an input vector, and a target vector,\n make a prediction and compute the gradient of the squared error\n loss with respect to the neuron weights.\n \"\"\"\n    # forward pass\n    hidden_outputs, outputs = feed_forward(network, input_vector)\n\n    # gradients with respect to output neuron pre-activation outputs\n    output_deltas = [output * (1 - output) * (output - target)\n                     for output, target in zip(outputs, target_vector)]\n\n    # gradients with respect to output neuron weights\n    output_grads = [[output_deltas[i] * hidden_output\n                     for hidden_output in hidden_outputs + [1]]\n                    for i, output_neuron in enumerate(network[-1])]\n\n    # gradients with respect to hidden neuron pre-activation outputs\n    hidden_deltas = [hidden_output * (1 - hidden_output) *\n                         dot(output_deltas, [n[i] for n in network[-1]])\n                     for i, hidden_output in enumerate(hidden_outputs)]\n\n    # gradients with respect to hidden neuron weights\n    hidden_grads = [[hidden_deltas[i] * input for input in input_vector + [1]]\n                    for i, hidden_neuron in enumerate(network[0])]\n\n    return [hidden_grads, output_grads]\n```", "```py\nimport random\nrandom.seed(0)\n\n# training data\nxs = [[0., 0], [0., 1], [1., 0], [1., 1]]\nys = [[0.], [1.], [1.], [0.]]\n\n# start with random weights\nnetwork = [ # hidden layer: 2 inputs -> 2 outputs\n            [[random.random() for _ in range(2 + 1)],   # 1st hidden neuron\n             [random.random() for _ in range(2 + 1)]],  # 2nd hidden neuron\n            # output layer: 2 inputs -> 1 output\n            [[random.random() for _ in range(2 + 1)]]   # 1st output neuron\n          ]\n```", "```py\nfrom scratch.gradient_descent import gradient_step\nimport tqdm\n\nlearning_rate = 1.0\n\nfor epoch in tqdm.trange(20000, desc=\"neural net for xor\"):\n    for x, y in zip(xs, ys):\n        gradients = sqerror_gradients(network, x, y)\n\n        # Take a gradient step for each neuron in each layer\n        network = [[gradient_step(neuron, grad, -learning_rate)\n                    for neuron, grad in zip(layer, layer_grad)]\n                   for layer, layer_grad in zip(network, gradients)]\n\n# check that it learned XOR\nassert feed_forward(network, [0, 0])[-1][0] < 0.01\nassert feed_forward(network, [0, 1])[-1][0] > 0.99\nassert feed_forward(network, [1, 0])[-1][0] > 0.99\nassert feed_forward(network, [1, 1])[-1][0] < 0.01\n```", "```py\n[   # hidden layer\n    [[7, 7, -3],     # computes OR\n     [5, 5, -8]],    # computes AND\n    # output layer\n    [[11, -12, -5]]  # computes \"first but not second\"\n]\n```", "```py\nPrint the numbers 1 to 100, except that if the number is divisible\nby 3, print \"fizz\"; if the number is divisible by 5, print \"buzz\";\nand if the number is divisible by 15, print \"fizzbuzz\".\n```", "```py\ndef fizz_buzz_encode(x: int) -> Vector:\n    if x % 15 == 0:\n        return [0, 0, 0, 1]\n    elif x % 5 == 0:\n        return [0, 0, 1, 0]\n    elif x % 3 == 0:\n        return [0, 1, 0, 0]\n    else:\n        return [1, 0, 0, 0]\n\nassert fizz_buzz_encode(2) == [1, 0, 0, 0]\nassert fizz_buzz_encode(6) == [0, 1, 0, 0]\nassert fizz_buzz_encode(10) == [0, 0, 1, 0]\nassert fizz_buzz_encode(30) == [0, 0, 0, 1]\n```", "```py\ndef binary_encode(x: int) -> Vector:\n    binary: List[float] = []\n\n    for i in range(10):\n        binary.append(x % 2)\n        x = x // 2\n\n    return binary\n\n#                             1  2  4  8 16 32 64 128 256 512\nassert binary_encode(0)   == [0, 0, 0, 0, 0, 0, 0, 0,  0,  0]\nassert binary_encode(1)   == [1, 0, 0, 0, 0, 0, 0, 0,  0,  0]\nassert binary_encode(10)  == [0, 1, 0, 1, 0, 0, 0, 0,  0,  0]\nassert binary_encode(101) == [1, 0, 1, 0, 0, 1, 1, 0,  0,  0]\nassert binary_encode(999) == [1, 1, 1, 0, 0, 1, 1, 1,  1,  1]\n```", "```py\nxs = [binary_encode(n) for n in range(101, 1024)]\nys = [fizz_buzz_encode(n) for n in range(101, 1024)]\n```", "```py\nNUM_HIDDEN = 25\n\nnetwork = [\n    # hidden layer: 10 inputs -> NUM_HIDDEN outputs\n    [[random.random() for _ in range(10 + 1)] for _ in range(NUM_HIDDEN)],\n\n    # output_layer: NUM_HIDDEN inputs -> 4 outputs\n    [[random.random() for _ in range(NUM_HIDDEN + 1)] for _ in range(4)]\n]\n```", "```py\nfrom scratch.linear_algebra import squared_distance\n\nlearning_rate = 1.0\n\nwith tqdm.trange(500) as t:\n    for epoch in t:\n        epoch_loss = 0.0\n\n        for x, y in zip(xs, ys):\n            predicted = feed_forward(network, x)[-1]\n            epoch_loss += squared_distance(predicted, y)\n            gradients = sqerror_gradients(network, x, y)\n\n            # Take a gradient step for each neuron in each layer\n            network = [[gradient_step(neuron, grad, -learning_rate)\n                        for neuron, grad in zip(layer, layer_grad)]\n                    for layer, layer_grad in zip(network, gradients)]\n\n        t.set_description(f\"fizz buzz (loss: {epoch_loss:.2f})\")\n```", "```py\ndef argmax(xs: list) -> int:\n    \"\"\"Returns the index of the largest value\"\"\"\n    return max(range(len(xs)), key=lambda i: xs[i])\n\nassert argmax([0, -1]) == 0               # items[0] is largest\nassert argmax([-1, 0]) == 1               # items[1] is largest\nassert argmax([-1, 10, 5, 20, -3]) == 3   # items[3] is largest\n```", "```py\nnum_correct = 0\n\nfor n in range(1, 101):\n    x = binary_encode(n)\n    predicted = argmax(feed_forward(network, x)[-1])\n    actual = argmax(fizz_buzz_encode(n))\n    labels = [str(n), \"fizz\", \"buzz\", \"fizzbuzz\"]\n    print(n, labels[predicted], labels[actual])\n\n    if predicted == actual:\n        num_correct += 1\n\nprint(num_correct, \"/\", 100)\n```"]