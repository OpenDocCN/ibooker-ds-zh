["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ntraffic = pd.read_parquet(\"./data/time_series.parquet.gz\")\n\ncycling = (\n    traffic\n    .groupby([\"Count_point_id\", \"Year\"])\n    [\"Pedal_cycles\"]\n    .sum()\n    .reset_index()\n)\n\ncycling.head()\n```", "```py\ncycling_totals = (\n    cycling\n    .groupby(\"Count_point_id\")\n    [\"Pedal_cycles\"]\n    .sum()\n)\n\ncycling_totals.head()\n```", "```py\nfig, axis = plt.subplots()\n\ncycling_totals.hist(bins=50, ax=axis)\n\naxis.set(\n    xlabel=\"Frequency\",\n    ylabel=\"Total cycling traffic\",\n    title=\"Distribution of total cycling traffic by location ID\"\n)\n\nplt.show()\n```", "```py\ncycling_totals.describe()\n```", "```py\ncycling_totals.sort_values(ascending=False).head(10)\n```", "```py\n(\n    traffic[traffic[\"Count_point_id\"] == 942489]\n    .head(1)\n    .transpose()\n)\n```", "```py\n(\n  traffic\n  .merge(\n    cycling_totals\n      .reset_index()     #1\n      .rename(columns={\n        \"Pedal_cycles\": \"Total_cycles\"\n      }),\n    on=\"Count_point_id\"\n  )\n  .query(\"Total_cycles > 1000 and Road_type=='Major'\")\n)\n```", "```py\nbikes_100_plus = (\n    traffic\n    .merge(\n        cycling_totals\n            .reset_index()\n            .rename(columns={\"Pedal_cycles\": \"Total_cycles\"}),\n        on=\"Count_point_id\"\n    )\n    .query(\"Total_cycles > 100 and Road_type=='Major'\")\n)\n\nbikes_100_plus\n```", "```py\ndef cycling_diff(group):     #1\n    return group.values[-1] - group.values[0]\n\ndef cycling_diff_pct(group):     #2\n    if group.values[0] == 0:     #3\n        return np.inf\n    diff = group.values[-1] - group.values[0]\n    return diff / group.values[0]\n\ncycling_diffs = (\n    cycling\n    .sort_values([\"Count_point_id\", \"Year\"])\n    .groupby(\"Count_point_id\")\n    .agg(     #4\n        diff=(\"Pedal_cycles\",cycling_diff),\n        diff_pct=(\"Pedal_cycles\",cycling_diff_pct)\n    )\n)\n\ncycling_diffs\n```", "```py\ncycling[cycling[\"Count_point_id\"] == 900056]\n```", "```py\nbiggest_diffs = (\n    cycling_diffs\n    [np.isinf(cycling_diffs[\"diff_pct\"]) == False]     #1\n    .sort_values(\"diff_pct\", ascending=False)\n    .head(10)\n)\n\nbiggest_diffs\n```", "```py\nfig, axis = plt.subplots(figsize=(10, 6))\n\nbiggest_diff_ids = biggest_diffs.index\n\nids_to_plot = [943399, 931883, 946565, 990552]\n\ndiffs_to_plot = (\n    cycling\n    .query(\"Count_point_id in @ids_to_plot\")\n)\n\nmarkers = [\"o\", \"s\", \"P\", \"^\"]\n\nfor i, point_id in enumerate(diffs_to_plot[\"Count_point_id\"].unique()):\n    point_series = cycling[cycling[\"Count_point_id\"] == point_id]\n    (\n        point_series\n        .set_index(\"Year\")\n        [\"Pedal_cycles\"]\n        .plot(ax=axis,\n              label=point_id,\n              marker=markers[i],\n              alpha=0.8)\n    )\n\naxis.set(\n    xlabel=\"Year\",\n    ylabel=\"Pedal cycles encountered\",\n    title=\"Cycling traffic for locations with the highest increase\"\n)\n\naxis.legend()\n\nplt.show()\n```", "```py\nannual_bike_traffic = (\n    traffic\n    [traffic['Count_date']\n == traffic.groupby('Count_point_id')['Count_date'].transform('max')]\n    .assign(\n        all_traffic=lambda x: x[\"Pedal_cycles\"] + x[\"All_motor_vehicles\"]\n    )\n    .groupby([\"Count_point_id\", \"Year\"])\n    [[\"Pedal_cycles\", \"all_traffic\"]]\n    .sum()\n    .assign(\n        pct_cycles = lambda x: x[\"Pedal_cycles\"] / x[\"all_traffic\"]\n    )\n    .sort_values(\"pct_cycles\", ascending=False)\n)\n\nannual_bike_traffic.head()\n```", "```py\n(\n  traffic[(traffic[\"Count_point_id\"] == 942489)\n↪  & (traffic[\"Year\"] == 2019)]\n  .head(1)\n  .transpose()\n)\n```", "```py\ntraffic_max_dates = (\n    traffic[\n        traffic['Count_date']\n        == traffic.groupby('Count_point_id')['Count_date'].transform('max')\n    ]\n    .copy()\n)\n```", "```py\ncycling_daily_hourly = (\n    traffic_max_dates.groupby(\n        [\"Count_point_id\", \"Count_date\", \"hour\"]\n    )\n    [\"Pedal_cycles\"]\n    .sum()\n    .reset_index()\n)\n\ncycling_daily_hourly.head()\n```", "```py\ncycling_daily_hourly['TotalDailyCount'] = (\n    cycling_daily_hourly\n    .groupby(['Count_point_id', 'Count_date'])\n    ['Pedal_cycles']\n    .transform('sum')     #1\n)\n\ncycling_daily_hourly['hourly_pct'] = (\n    cycling_daily_hourly['Pedal_cycles']\n    / cycling_daily_hourly['TotalDailyCount']\n)\n\ncycling_daily_hourly\n```", "```py\ntraffic_max_dates.loc[\n↪ traffic_max_dates[\"Count_point_id\"] == 900056, \"Count_date\"].max()\n```", "```py\n(\n    cycling_daily_hourly\n    [\n        (cycling_daily_hourly[\"Count_point_id\"] == 900056)\n        & (cycling_daily_hourly[\"Count_date\"] == \"2019-05-20\")\n    ]\n)\n```", "```py\nfig, axis = plt.subplots()\n\ncycling_daily_hourly.boxplot(\n    column=\"hourly_pct\",\n    by=\"hour\",\n    ax=axis)\n\naxis.set(\n    xlabel=\"Hour\",\n    ylabel= \"% of cycling traffic in an hour\",\n    title=\"What times of the day does most cycling traffic occur?\"\n)\nplt.suptitle(None)\n\nplt.show()\n```", "```py\ndef get_highest_hour(rows):\n    if rows[\"Pedal_cycles\"].min() == rows[\"Pedal_cycles\"].max():\n        return np.nan\n\n    return (\n        rows\n        .sort_values(by=[\"Pedal_cycles\", \"hour\"], ascending=[False, True])\n        .head(1)\n        [\"hour\"]\n        .values[0]\n    )\n\nhighest_hours = (\n    cycling_daily_hourly\n    .groupby(\"Count_point_id\")\n    .apply(get_highest_hour)\n)\n\nhighest_hours.head()\n```", "```py\ncycling_daily_hourly[cycling_daily_hourly[\"Count_point_id\"] == 941463]\n```", "```py\nfig, axis = plt.subplots()\n\nhighest_hours.hist(bins=20, ax=axis)\n\naxis.set(\n    xlabel=\"Hour of peak cycling traffic\",\n    ylabel=\"Frequency\",\n    title=\"Distribution of peak cycling traffic hours across locations\"\n)\n\nplt.show()\n```", "```py\nfig, axis = plt.subplots()\n\nannual_bike_traffic[\"pct_cycles\"].hist(bins=10, ax=axis)\n\naxis.set(\n    xlabel=\"Percentage of traffic that is cycling\",\n    ylabel=\"Frequency\",\n    title=\"Distribution of cycling traffic percentages\"\n)\n\nplt.show()\n```", "```py\nBIKE_PERCENTAGE_CUTOFF = 0.1\n\nhighest_cycling = (\n    annual_bike_traffic\n    [annual_bike_traffic[\"pct_cycles\"] >= BIKE_PERCENTAGE_CUTOFF]\n    .reset_index()\n    [\"Count_point_id\"]\n    .to_list()\n)\n\nprint(len(highest_cycling))\n\nhighest_cycling[:10]\n```", "```py\nDIFF_CUTOFF = 0.5\n\nbiggest_increases = (\n    cycling_diffs\n    [(cycling_diffs[\"diff_pct\"] >= DIFF_CUTOFF)\n     & (np.isinf(cycling_diffs[\"diff_pct\"]) == False)]     #1\n    .index\n    .to_list()\n)\n\nprint(len(biggest_increases))\n\nprint(biggest_increases[:10])\n```", "```py\nhighest_commuting = (\n    highest_hours\n    .loc[lambda x: x.isin([8, 17])]\n    .index\n    .to_list()\n)\n\nprint(len(highest_commuting))\n\nprint(highest_commuting[:10])\n```", "```py\ntop_cycling_locations = (\n    set(highest_cycling)     #1\n    .intersection(set(biggest_increases))     #2\n    .intersection(set(highest_commuting))     #3\n)\n\nprint(len(top_cycling_locations))\n\nprint(top_cycling_locations)\n```", "```py\nLOCATION_COLUMNS = ['Count_point_id', 'Region_name',\n                    'Region_ons_code', 'Local_authority_id',\n                    'Local_authority_name', 'Local_authority_code',\n                    'Road_name', 'Road_category', 'Road_type']\n\n(\n    traffic[traffic[\"Count_point_id\"].isin(top_cycling_locations)]\n    .drop_duplicates(subset=[\"Count_point_id\"])\n    [LOCATION_COLUMNS]\n    .sort_values([\"Region_name\", \"Local_authority_name\"])\n)\n```", "```py\n(\n    traffic\n    .query(\"Count_point_id in @biggest_increases\")\n    .groupby(\"Count_point_id\")\n    [\"Year\"]\n    .agg([\"min\", \"max\"])\n    .assign(diff=lambda df_: df_[\"max\"] - df_[\"min\"])\n    .sort_values(\"diff\", ascending=False)\n    .head()\n)\n```", "```py\ncycling_ts = (\n    traffic[traffic[\"Count_point_id\"] == 996188]\n    .groupby(\"Year\")\n    [\"Pedal_cycles\"]\n    .sum()\n)\n\ncycling_ts\n```", "```py\ncycling_ts.index = pd.to_datetime(cycling_ts.index, format='%Y')\n\nfig, axis = plt.subplots()\n\ncycling_ts.plot(ax=axis)\n\naxis.set(\n    xlabel=\"Time\",\n    ylabel=\"Number of bicycles observed\",\n    title=\"Cycling traffic over time at location 996188\"\n)\n\nplt.show()\n```", "```py\nfrom statsmodels.tsa.seasonal import STL\n\nstl = STL(cycling_ts, period=2, seasonal=3)\nresult = stl.fit()\n\nresult.plot();\n```", "```py\nimport pmdarima as pm\n\nmodel = pm.auto_arima(cycling_ts, seasonal=False)     #1\n\ntraining_predictions = model.predict_in_sample()     #2\nforecast = model.predict(3)     #3\n\npredictions = pd.concat(     #4\n    [training_predictions,\n     forecast]\n)\n\nfig, axis = plt.subplots()\n\naxis.plot(cycling_ts, label=\"Observed\")\naxis.plot(predictions,\n          label=\"Predicted\",\n          marker=\"^\",\n          color=\"orange\",\n          alpha=0.8)\n\naxis.set(\n    xlabel=\"Time\",\n    ylabel=\"Number of bicycles observed\",\n    title=\"Actual vs. predicted cycling traffic\"\n)\n\naxis.legend()\n\nplt.show()\n```"]