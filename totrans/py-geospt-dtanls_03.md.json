["```py\nprint(\"Save the Planet!\")\n```", "```py\nfor layer in QgsProject.instance().mapLayers().values():\n    print(layer.name())\nSF = iface.addVectorLayer('Path to your shape file.shp','SF_neighborhoods','ogr')\nQgsProject.instance().addMapLayer(SF)\nif SF.isValid():\n    QgsProject.instance().addMapLayer(SF)\n```", "```py\nrenderer = SF.renderer()\nsymbol = renderer.symbol()\nsymbol.setColor(QColor('pink'))\n```", "```py\nvlayer = iface.addVectorLayer(\"Path to SF Urban Tree Canopy.shp\", \"SF_TREES\",\n\"ogr\")\n**if not** vlayer:\n  print(\"Layer failed to load!\")\n\nvlayer = iface.addVectorLayer(\"Path to Equity Strategy Neighborhoods.shp\", \n\"ESN layer\", \"ogr\")\n**if not** vlayer:\n  print(\"Layer failed to load!\")\n```", "```py\nactive_layer = iface.activeLayer()\niface.showAttributeTable(active_layer)\niface.showLayerProperties(active_layer)\n```", "```py\nshowAttributeTable(QgsVectorLayer, QString filterExpression='') -> QDialog\n```", "```py\nlayer = iface.activeLayer()\nprint(type(layer))\n\n<class 'qgis._core.QgsVectorLayer'>\n\nprint(layer.sourceName())\nmassgis:GISDATA.AIRPORTS_PT\nlayer.featureCount()\n42\n```", "```py\nBEDFORD\nBEVERLY\nBOSTON\nHANSON\nHOPEDALE\n...\n```", "```py\nlayer = iface.activeLayer()\nfeatures = layer.getFeatures()\nf = next(features)\nprint(f.attributes())\nf = next(features)\nprint(f.attributes())\n```", "```py\n['BED', 'BEDFORD', 'HANSCOM FIELD', 'MassPort', 'PUBLIC OWNED AP', 'TRAN', \n2, '42 28 12', '71 17 22', 133, 7001.0, 5106, 150, 150, 'ASPHALT-GROOVED', \n'ASPHALT', 'HIRLS', 'MIRLS', 'FAA', 'N', ' ', 'RELIEVER W/ COMMERCIAL SERVICE', \n'Y']\n['BVY', 'BEVERLY', 'BEVERLY MUNICIPAL AIRPORT', 'MAC', 'PUBLIC OWNED AP', 'GU-2', \n2, '42 35 03', '70 55 03', 108, 5001.0, 4637, 150, 100, 'ASPHALT', 'ASPHALT', \n'MIRLS', 'MIRLS', 'CONTRACT', 'Y', ' ', 'RELIEVER GA', 'N']\n```", "```py\nfor layer in QgsProject.instance().mapLayers().values():\n    print(layer.name())\n```", "```py\nOpenStreetMap\nmassgis:GISDATA.ACECS_POLY\nmassgis:GISDATA.AIRPORTS_PT\nmassgis:GISDATA.BM2_CH_BIOMAP2_WETLANDS\nmassgis:GISDATA.CENSUS2010TIGERROADS_ARC\n```", "```py\nfrom qgis import processing\n```", "```py\nfor alg in QgsApplication.processingRegistry().algorithms():\n        print(alg.id(), \"->\", alg.displayName())\n```", "```py\nnative:atlaslayouttomultiplepdf -> Export atlas layout as PDF (multiple files)\nnative:atlaslayouttopdf -> Export atlas layout as PDF (single file)\nnative:batchnominatimgeocoder -> Batch Nominatim geocoder\nnative:bookmarkstolayer -> Convert spatial bookmarks to layer\nnative:boundary -> Boundary\nnative:boundingboxes -> Bounding boxes\nnative:buffer -> Buffer\nâ€¦\n```", "```py\nbuffered_amazonas = processing.run(\"native:buffer\", \n    {'INPUT':amazonas,'DISTANCE':buffer_distance,'SEGMENTS':5,'END_CAP_STYLE':0,\n    'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':**False**,'OUTPUT':'memory:'}\n    )['OUTPUT']my_gpkg = \"/Users/bonnymcclain/Downloads/natural_earth_vector/\n\tpackages/natural_earth_vector.gpkg\" rivers = '{}|layername=ne_110m_rivers_lake_centerlines'.format(my_gpkg)\nplaces ='{}|layername=ne_110m_populated_places'.format(my_gpkg)\nexpression = \"name = 'Amazonas'\" amazonas = processing.run(\"native:extractbyexpression\", \n    {'INPUT':rivers,'EXPRESSION':expression,'OUTPUT':'memory:'}\n    )['OUTPUT'] \nbuffer_distance = 0.1 #degrees  \nplaces_along_amazonas = processing.run(\"native:extractbylocation\", \n    {'INPUT':places,'PREDICATE':[0],'INTERSECT':buffered_amazonas,'OUTPUT':\n\t'memory:'}\n    )['OUTPUT'] \nQgsProject.instance().addMapLayer(places_along_amazonas) \n**for** feature **in** places_along_amazonas.getFeatures():\n    print(feature[\"name\"])\n```", "```py\n amazonas = processing.run(\"native:extractbyexpression\", \n    {'INPUT':rivers,'EXPRESSION':expression,'OUTPUT':'memory:'}\n    )['OUTPUT']\nbuffer_distance = 0.1 #degrees\n```", "```py\nprocessing.algorithmHelp(\"native:buffer\")\n```", "```py\nbuffered_amazonas = processing.run(\"native:buffer\", \n    {'INPUT':amazonas,'DISTANCE':buffer_distance,'SEGMENTS':5,'END_CAP_STYLE':0,\n    'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':**False**,'OUTPUT':\n   'memory:'}\n    )['OUTPUT']\n```", "```py\nprocessing.algorithmHelp(\"native:extractbylocation\")\n```", "```py\nplaces_along_amazonas = processing.run(\"native:extractbylocation\", \n    {'INPUT':places,'PREDICATE':[0],'INTERSECT':buffered_amazonas,'OUTPUT':\n    'memory:'}\n    )['OUTPUT']\n```", "```py\nprocessing.algorithmHelp(\"native:extractbylocation\")\n```"]