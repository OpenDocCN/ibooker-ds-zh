["```py\nIn [1]: import numpy as np\n        import pandas as pd\n        import seaborn as sns\n        titanic = sns.load_dataset('titanic')\n```", "```py\nIn [2]: titanic.head()\nOut[2]:    survived  pclass     sex   age  sibsp  parch     fare embarked  class  \\\n        0         0       3 male  22.0      1      0   7.2500        S  Third\n        1         1       1  female  38.0      1      0  71.2833        C  First\n        2         1       3  female  26.0      0      0   7.9250        S  Third\n        3         1       1  female  35.0      1      0  53.1000        S  First\n        4         0       3    male  35.0      0      0   8.0500        S  Third\n```", "```py\n             who  adult_male deck  embark_town alive  alone\n        0    man        True  NaN  Southampton    no  False\n        1  woman       False    C    Cherbourg   yes  False\n        2  woman       False  NaN  Southampton   yes   True\n        3  woman       False    C  Southampton   yes  False\n        4    man        True  NaN  Southampton    no   True\n```", "```py\nIn [3]: titanic.groupby('sex')[['survived']].mean()\nOut[3]:         survived\n        sex\n        female  0.742038\n        male    0.188908\n```", "```py\nIn [4]: titanic.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()\nOut[4]: class      First    Second     Third\n        sex\n        female  0.968085  0.921053  0.500000\n        male    0.368852  0.157407  0.135447\n```", "```py\nIn [5]: titanic.pivot_table('survived', index='sex', columns='class', aggfunc='mean')\nOut[5]: class      First    Second     Third\n        sex\n        female  0.968085  0.921053  0.500000\n        male    0.368852  0.157407  0.135447\n```", "```py\nIn [6]: age = pd.cut(titanic['age'], [0, 18, 80])\n        titanic.pivot_table('survived', ['sex', age], 'class')\nOut[6]: class               First    Second     Third\n        sex    age\n        female (0, 18]   0.909091  1.000000  0.511628\n               (18, 80]  0.972973  0.900000  0.423729\n        male   (0, 18]   0.800000  0.600000  0.215686\n               (18, 80]  0.375000  0.071429  0.133663\n```", "```py\nIn [7]: fare = pd.qcut(titanic['fare'], 2)\n        titanic.pivot_table('survived', ['sex', age], [fare, 'class'])\nOut[7]: fare            (-0.001, 14.454]                     (14.454, 512.329]  \\\n        class                      First    Second     Third             First\n        sex    age\n        female (0, 18]               NaN  1.000000  0.714286          0.909091\n               (18, 80]              NaN  0.880000  0.444444          0.972973\n        male   (0, 18]               NaN  0.000000  0.260870          0.800000\n               (18, 80]              0.0  0.098039  0.125000          0.391304\n\n        fare\n        class              Second     Third\n        sex    age\n        female (0, 18]   1.000000  0.318182\n               (18, 80]  0.914286  0.391304\n        male   (0, 18]   0.818182  0.178571\n               (18, 80]  0.030303  0.192308\n```", "```py\n# call signature as of Pandas 1.3.5\nDataFrame.pivot_table(data, values=None, index=None, columns=None,\n                      aggfunc='mean', fill_value=None, margins=False,\n                      dropna=True, margins_name='All', observed=False,\n                      sort=True)\n```", "```py\nIn [8]: titanic.pivot_table(index='sex', columns='class',\n                            aggfunc={'survived':sum, 'fare':'mean'})\nOut[8]:               fare                       survived\n        class        First     Second      Third    First Second Third\n        sex\n        female  106.125798  21.970121  16.118810       91     70    72\n        male     67.226127  19.741782  12.661633       45     17    47\n```", "```py\nIn [9]: titanic.pivot_table('survived', index='sex', columns='class', margins=True)\nOut[9]: class      First    Second     Third       All\n        sex\n        female  0.968085  0.921053  0.500000  0.742038\n        male    0.368852  0.157407  0.135447  0.188908\n        All     0.629630  0.472826  0.242363  0.383838\n```", "```py\nIn [10]: # shell command to download the data:\n         # !cd data && curl -O \\\n         # https://raw.githubusercontent.com/jakevdp/data-CDCbirths/master/births.csv\n```", "```py\nIn [11]: births = pd.read_csv('data/births.csv')\n```", "```py\nIn [12]: births.head()\nOut[12]:    year  month  day gender  births\n         0  1969      1  1.0      F    4046\n         1  1969      1  1.0      M    4440\n         2  1969      1  2.0      F    4454\n         3  1969      1  2.0      M    4548\n         4  1969      1  3.0      F    4548\n```", "```py\nIn [13]: births['decade'] = 10 * (births['year'] // 10)\n         births.pivot_table('births', index='decade', columns='gender',\n                            aggfunc='sum')\nOut[13]: gender         F         M\n         decade\n         1960     1753634   1846572\n         1970    16263075  17121550\n         1980    18310351  19243452\n         1990    19479454  20420553\n         2000    18229309  19106428\n```", "```py\nIn [14]: %matplotlib inline\n         import matplotlib.pyplot as plt\n         plt.style.use('seaborn-whitegrid')\n         births.pivot_table(\n             'births', index='year', columns='gender', aggfunc='sum').plot()\n         plt.ylabel('total births per year');\n```", "```py\nIn [15]: quartiles = np.percentile(births['births'], [25, 50, 75])\n         mu = quartiles[1]\n         sig = 0.74 * (quartiles[2] - quartiles[0])\n```", "```py\nIn [16]: births = births.query('(births > @mu - 5 * @sig) &\n                                (births < @mu + 5 * @sig)')\n```", "```py\nIn [17]: # set 'day' column to integer; it originally was a string due to nulls\n         births['day'] = births['day'].astype(int)\n```", "```py\nIn [18]: # create a datetime index from the year, month, day\n         births.index = pd.to_datetime(10000 * births.year +\n                                       100 * births.month +\n                                       births.day, format='%Y%m%d')\n\n         births['dayofweek'] = births.index.dayofweek\n```", "```py\nIn [19]: import matplotlib.pyplot as plt\n         import matplotlib as mpl\n\n         births.pivot_table('births', index='dayofweek',\n                             columns='decade', aggfunc='mean').plot()\n         plt.gca().set(xticks=range(7),\n                       xticklabels=['Mon', 'Tues', 'Wed', 'Thurs',\n                                    'Fri', 'Sat', 'Sun'])\n         plt.ylabel('mean births by day');\n```", "```py\nIn [20]: births_by_date = births.pivot_table('births',\n                                             [births.index.month, births.index.day])\n         births_by_date.head()\nOut[20]:        births\n         1 1  4009.225\n           2  4247.400\n           3  4500.900\n           4  4571.350\n           5  4603.625\n```", "```py\nIn [21]: from datetime import datetime\n         births_by_date.index = [datetime(2012, month, day)\n                                 for (month, day) in births_by_date.index]\n         births_by_date.head()\nOut[21]:               births\n         2012-01-01  4009.225\n         2012-01-02  4247.400\n         2012-01-03  4500.900\n         2012-01-04  4571.350\n         2012-01-05  4603.625\n```", "```py\nIn [22]: # Plot the results\n         fig, ax = plt.subplots(figsize=(12, 4))\n         births_by_date.plot(ax=ax);\n```"]