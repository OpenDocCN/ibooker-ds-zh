- en: Chapter 2\. Essential Facilities for Spatial Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.xhtml#introduction_to_geospatial_analytics) covered the complexity
    of mapping a three-dimensional (3D) globe to a two-dimensional (2D) coordinate
    system. This often requires an understanding of how to select an appropriate map
    projection depending on the area you are interested in viewing or analyzing. You
    learned how 3D coordinates on the surface of the Earth can be converted to 2D
    coordinates. For that, the concepts of *geoid* and *ellipsoid* were introduced.
    You also saw a variety of map projections in [Chapter 1](ch01.xhtml#introduction_to_geospatial_analytics),
    and I discussed how to choose an appropriate one for a given area—for example,
    selecting a projection that minimizes distortion over the area you are viewing.'
  prefs: []
  type: TYPE_NORMAL
- en: What happens to topographical features that are below or above the Earth’s surface?
    Geospatial tools are also able to analyze these features spatially as well as
    time-series data, which is often described as a *fourth dimension*.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed the term *GIS* doing a lot of the heavy lifting when learning
    about spatial literacy, but in reality there are multiple integrated concepts
    contributing at the systems level. I have discussed the *spatial data framework,*
    where spatial locations are identified on the Earth’s surface. This is fundamental
    for building a comprehensive (and reliable) reference system for geocoding and
    mapping data.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will continue to build on your spatial literacy skills
    with three brief sample projects in QGIS. First, you will download and customize
    the QGIS dashboard. Then I’ll introduce simple Python scripting as you explore
    data from the NYC Open Data portal. The Mapping Inequality project will provide
    an opportunity to explore historical data and download the data for analysis in
    QGIS. This will help you familiarize yourself with QGIS and introduce you to important
    concepts, including uploading vector data layers, filtering datasets, and writing
    Python scripts in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Spatial Data in QGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I mentioned QGIS in the previous chapter, and although you will work with it
    extensively in [Chapter 3](ch03.xhtml#qgis_exploring_pyqgis_and_native_algori),
    you’ll get your feet wet in this chapter by using QGIS and Python to explore publicly
    available datasets and discuss some key concepts of spatial literacy.
  prefs: []
  type: TYPE_NORMAL
- en: QGIS is a free and open source GIS. A *GIS*, which you might recall stands for
    “geographic information system,” is a complete application or system of tools
    for working with geospatial data. Once you download the software, you will have
    access to these tools. Python is available as a plug-in and is easily installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing QGIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow along, please install QGIS. You can download and install the software
    at the [QGIS Project’s website](https://qgis.org/en/site). (Look for the long-term
    repositories for stability, identified as “LTR” on the site. Detailed installation
    instructions are in the [User Guide](https://oreil.ly/mgycA).) Your dashboard
    will resemble the one shown in [Figure 2-1](#qgis_dashboard_showing_the_browser_left)
    once you add a few panels to the view.
  prefs: []
  type: TYPE_NORMAL
- en: '![QGIS dashboard showing the Browser (A), Layers (B), Processing Toolbox (C),
    and Layer Styling (D) panels](assets/pgda_0201.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. QGIS dashboard showing the (A) Browser, (B) Layers, (C) Processing
    Toolbox, and (D) Layer Styling panels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 2-1](#qgis_dashboard_showing_the_browser_left) shows the (a) Browser,
    (b) Layers, (c) Processing Toolbox, and (d) Layer Styling panels (unselected in
    the lower right corner). The Browser allows you to view your computer file system
    and upload data into the QGIS Layers panel or drag files directly onto the canvas.
    The Processing Toolbox has several tools to explore; you will be using the Python
    scripting tool in a later exercise in the chapter. Last, the Layer Styling panel
    provides customization for points on a map, transparency of levels, and color
    schemes (among its many features). In the last exercise in the chapter, you will
    assign a color scheme to a map legend describing grades of perceived desirability
    of neighborhood communities.'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing your dashboard is relatively straightforward. Select View from the
    menu at the top of your screen and scroll down to Panels. [Figure 2-2](#customizing_your_dashboard_with_display)
    shows the checked options that have been added to the console. You can move them
    around according to your preference by selecting them individually and moving
    them to the desired location.
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing your dashboard with display options, such as panels](assets/pgda_0202.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. Customizing your dashboard with display options, such as panels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding Basemaps to QGIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding additional basemaps is one last customization that will help enhance
    your work environment. Basemaps are reference maps that add context to the data
    layers. Your XYZ Tiles folder (scroll down in your lefthand Browser panel) will
    currently appear empty. To add basemaps, navigate to the [GitHub page of Qiusheng
    Wu](https://oreil.ly/SH2p6), Assistant Professor of Geography at the University
    of Tennessee, Knoxville. Click on the raw file to download it directly to the
    Downloads folder. You can opt for a different location, but you will have to recall
    where it is located to upload it to the Python console. [Figure 2-3](#the_executable_file_for_downloading_bas)
    is a snippet of the screen you will see.
  prefs: []
  type: TYPE_NORMAL
- en: '![The executable file for downloading basemaps to QGIS](assets/pgda_0203.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. The executable file for downloading basemaps to QGIS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Right-click in the text and save the file to your Downloads folder as a *.py*
    script ([Figure 2-4](#saving_the_python_script_to_your_downlo)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving the Python script to your Downloads folder](assets/pgda_0204.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. Saving the Python script to your Downloads folder
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Your script is now saved to your local computer. There are multiple locations
    to open the Python Console in QGIS, indicated by the Python icon. [Figure 2-5](#installing_the_python_plug_in_to_qgis)
    highlights the console icon in the Plugins menu at the top of the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Python plug-in to QGIS](assets/pgda_0205.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Installing the Python plug-in to QGIS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Python Console is where you can enter a few line-by-line commands or click
    the Show Editor button on the menu to enter Python scripts or snippets of code.
    The code snippets are run from the editor. The Python code editor has a save option
    if you are writing longer scripts. This feature is a reason you may decide to
    run code in the editor as opposed to simply dragging layers onto canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Click the icon of a pad of paper with a pencil to open the scripting window.
    When you select the green + symbol, you can navigate to the location of the downloaded
    script. Hit the run icon (a little green arrow symbol), and the code will run
    in the console ([Figure 2-6](#run_the_script_and_the_basemaps_will_po)). You will
    now see available basemaps populating the XYZ Tile folder. Drag them directly
    onto the canvas to view them. Be sure to reorder the basemap when adding layers
    to the canvas. You will want the data layers to be at the top of the Layers panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Run the script and the basemaps will populate the XYZ Tiles folder](assets/pgda_0206.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-6\. Run the script and the basemaps will populate the XYZ Tiles folder
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: QGIS has a powerful programming interface that allows you to extend its core
    functionality and write scripts to automate your tasks in Python scripting language.
    Even if you are new to programming, learning a little bit of Python and navigating
    this interface will enable you to be much more productive in your geospatial data
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Data Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book mainly uses data resources that I first used in my training or in
    projects, updated with the latest reported data. You can access the resources
    directly from my [GitHub page](https://oreil.ly/SbS0R). I want to be certain you
    can access the datasets no matter what operating system you use. QGIS has a wide
    variety of tools that make this straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If you are an advanced user and would like to replace the datasets in this
    book with local data or data that reflects your personal or professional interests,
    here are a few suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: You will want a healthy mix of urban and rural locations with different types
    of roads, boundaries, water features, and topographies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When given a choice, I prefer recent data, but for instructional purposes, I
    defer to sources with the widest variety of attributes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t forget to save your data in the GeoPackage file format so you will be
    able to continue exploring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are creating a raster file of your region, locate the extent coordinates
    of your largest layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing Environmental Complaints in New York City
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can see an example of how geography is represented in QGIS in [Figure 2-7](#the_dohmh_indoor_environmental_complain).
    The points represent indoor environmental complaints received by the Department
    of Health and Mental Hygiene (DOHMH) in New York City. The data in this image
    is from [NYC Open Data](https://oreil.ly/QGsn5), a resource for free public data
    from city agencies and other partners. This particular dataset can be downloaded
    from the [GitHub repository accompanying this book](https://oreil.ly/9ADWy).
  prefs: []
  type: TYPE_NORMAL
- en: '![The DOHMH Indoor Environmental Complaint dataset shown in the QGIS interface;
    the left panel is the Browser, and the right panel is the canvas](assets/pgda_0207.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-7\. The DOHMH Indoor Environmental Complaint dataset shown in the QGIS
    interface; the left panel is the Browser, and the right panel is the canvas
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Uploading Data to QGIS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have a few options to upload the data into QGIS. Using the Browser panel,
    select the Home folder (circled in [Figure 2-7](#the_dohmh_indoor_environmental_complain)),
    navigate to your Downloads folder, and select the dataset file that you downloaded.
    You can drag shapefiles (*.shp*) into the view from the Browser directly onto
    the canvas (the right panel).
  prefs: []
  type: TYPE_NORMAL
- en: What you are observing in [Figure 2-7](#the_dohmh_indoor_environmental_complain)
    are the 311 information hotline calls made within New York City during a certain
    period of time. Initially, you don’t know much about the nature of the calls or
    how the data could be filtered for better insights.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files with the Data Source Manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Data Source Manager (circled in [Figure 2-8](#using_the_data_source_manager_to_upload))
    is the first option, and my preferred one, for uploading data from *.csv* files.
    If your data has a geometry column, as this one does (see the Latitude and Longitude
    columns in the Sample Data window in [Figure 2-8](#using_the_data_source_manager_to_upload)),
    you can select them in the X field (longitude) and Y field (latitude) and add
    the data to the Layers panel in your console.
  prefs: []
  type: TYPE_NORMAL
- en: Until you confirm or edit the delimited file with geometric attributes, it will
    not be considered spatial. This option is preferred for *.csv* files because,
    although QGIS often recognizes geometric attributes instinctually, you may need
    to change data types manually in the column headings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Data Source Manager to upload delimited text files](assets/pgda_0208.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-8\. Using the Data Source Manager to upload delimited text files
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding data as a vector layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You also have the option of adding the dataset as a vector layer, as shown in
    [Figure 2-9](#adding_data_as_a_vector_layer). This works well for GeoJSON and
    a variety of other data formats. QGIS can detect most types of geometries. I prefer
    this method when working with PostgreSQL databases, as it simplifies the process
    of updating files stored outside of QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding data as a vector layer](assets/pgda_0209.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-9\. Adding data as a vector layer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Right-click on a data file in the Layers panel and you will see an option to
    view the Attribute Table (shown as a snapshot in [Figure 2-10](#examining_the_attribute_table_to_determ)).
    The Attribute Table is useful for reviewing the columns available as well as the
    format of the geometry (Latitude and Longitude). A small but important detail
    is to match the case of column headers when writing code to avoid errors when
    running your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the Attribute Table to determine geometry columns](assets/pgda_0210.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-10\. Examining the Attribute Table to determine geometry columns
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can also customize your basemaps now that you have uploaded the additional
    basemaps to QGIS (as shown in [Figure 2-11](#adding_the_data_layer_and_the_openstree)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the data layer and the OpenStreetMap basemap from XYZ Tiles](assets/pgda_0211.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-11\. Adding the data layer and the OpenStreetMap basemap from XYZ Tiles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Setting the Project CRS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QGIS will attempt to assign a project coordinate reference system (CRS), as
    seen in [Figure 2-12](#setting_the_crs_layer_epsgfourthreetwos). You can  change
    it in the Layer CRS window, visible when clicking the data in the Layers panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the CRS Layer EPSG:4326—WGS84](assets/pgda_0212.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-12\. Setting the CRS Layer EPSG:4326—WGS84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that the CRS layer is selected, you can hover over points in the map for
    additional information. Select the Identify Features icon (the small “i” inside
    a blue circle), then select a point on the map.
  prefs: []
  type: TYPE_NORMAL
- en: You will explore many of these geospatial and nongeospatial features a little
    later on when we begin working in the Python Console.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Query Editor to Filter Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s say that our research question here is: w*here are Manhattan residents
    reporting issues concerning asbestos?* Asbestos levels are important to monitor
    because asbestos is a known carcinogen when released into the atmosphere. QGIS
    has a built-in query builder that can help familiarize you with datasets. Right-click
    on the dataset in the Layers panel and choose Filter.'
  prefs: []
  type: TYPE_NORMAL
- en: When you click on a field, it will populate in the Provider Specific Filter
    Expression console, shown in [Figure 2-13](#filtering_data_by_incident_type_and_loc).
    Select the Sample option under Values to view the sample data. Add an Operator
    and click the Test button at the bottom of the console. You will see how many
    rows have been returned. You can add more filters to the data or click OK and
    load the updated dataset to your canvas. Scrolling through the Fields and selecting
    Sample will provide information for exploring in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Filtering data by incident type and location](assets/pgda_0213.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-13\. Filtering data by incident type and location
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The canvas in [Figure 2-14](#the_canvas_updated_with_a_new_query_to) has been
    filtered to show only asbestos complaints. There are additional options to filter
    based on Complaint_Status and Date, if you want to explore!
  prefs: []
  type: TYPE_NORMAL
- en: What follows is a brief introduction to the Python Console in QGIS. You will
    run some code and even generate a template script in the Processing Toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![The canvas updated with a new query to show asbestos complaints](assets/pgda_0214.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-14\. The canvas updated with a new query to show asbestos complaints
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Visualizing Population Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you are planning on making maps professionally or for personal use,
    finding great data resources can be a challenge. [Natural Earth](https://www.naturalearthdata.com)
    is a public-domain dataset available through collaboration and support from volunteers
    and the North American Cartographic Information Society (NACIS).
  prefs: []
  type: TYPE_NORMAL
- en: 'Its freely available vector and raster data—in shapefile and TIFF format, respectively—all
    use the EPSG:4326 projection, also known as the WGS84 projection. Additionally,
    you can choose how detailed the data is for downloading. The more detailed data,
    1:10 m,^([1](ch02.xhtml#ch01fn6)) will be the most resource intensive, with 1:50
    m and 1:110 m providing moderate and coarse levels of detail. This relationship
    is described as a representative fraction scale: 1 unit on the map (such as inches
    or centimeters) represents the equivalent units on the ground. In our example,
    1:50,000,000 means 1 cm = 50 km or 1 inch = 790 miles. In the left panel in [Figure 2-15](#population_data_by_python_console_windo),
    you see the Browser window. Once you download the dataset, it can be uploaded
    from the Browser window and brought directly onto the canvas (in the right panel).
    Drag the shapefile (*.shp*) into view. The points represent populated places in
    the world. The attributes associated with each symbol include capitals, major
    cities, and towns, for example. The shaded polygons represent urban areas.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Population Data by Python Console window (QGIS)](assets/pgda_0215.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-15\. Population data by Python Console window (QGIS)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once the data is on the canvas, you can begin to query in the Python Console.
    To expand the console, select the icon on the left (under the red arrow on the
    left). Code will run when you select the green button (under the red arrow on
    the right). When running a single line of code, the >>> console is fine. When
    I am iterating over multiple lines of code, I use the editor (the panel on the
    lower right).
  prefs: []
  type: TYPE_NORMAL
- en: The QGIS Python Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also upload data to the canvas using the Python Console. Add the vector
    layer to your local computer: select Layer >> Add Layer >> Add Vector Layer. Copy
    the path from there or, if you know your directory and the name of the file, you
    can enter it directly.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a variable called `uri` (or whatever you prefer; I like `uri`, which
    stands for *uniform resource identifier—*a character string for identifying resources).
    You are storing the string that describes the path or source of the data. This
    will be one of the three parameters you see below in the code snippet for the
    `iface.addVectorLayer` function. The second parameter is the layer name you choose,
    and `ogr` is the provider key (representing the OGR Simple Features Library, today
    known only by its acronym). Other examples of provider keys include *postgres*
    and *delimited text*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write this code into the Python Console, substituting your own username as
    it appears in your filepath:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, and the canvas populates with the data points. You can also
    query populations in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The indentations in your code are important for delineating code that is part
    of a function; you will get an error if you forget to include them when required.
    You can see code examples in the editor in [Figure 2-15](#population_data_by_python_console_windo),
    in the [Python documentation](https://oreil.ly/aPqZE), and in the [PyQGIS Developer
    Cookbook](https://oreil.ly/XFgS7) online reference. The code result displays in
    the left window. When you successfully run the code, you will see the output available
    for scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: 'When writing code in the editor, comment out any code you do not want to run
    again (by starting the line with #), as each time you run the cell it will generate
    output. Remember to use your own filepath. If the points are not styled to your
    taste, you can use the Layer Styling panel or write Python code into the console.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A renderer modifies how the data is displayed in a data layer. Next, run the
    following code and adjust the `setSize` parameter to your liking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `triggerRepaint` function will update the map. If you don’t call this function,
    the map won’t update until you run the canvas again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Class [`QgsSimpleMarkerSymbolLayerBase`](https://oreil.ly/gxOJ9) modifies
    the shape, size, angle, and scale method of parameters, with many shape options
    available (listed in the [documentation](https://oreil.ly/5zu3W)). Enter the following
    code to change the shape of the point from a circle to a star:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'More advanced scripting options are available in the Processing Toolbox. If
    you scroll down to the Python Scripts icon, you will see any saved scripts listed
    under Example Scripts. If you select the Python icon at the top of the Processing
    Toolbox, you will see four options: Create New Script, Create New Script From
    Template, Open Existing Script, and Add Script to Toolbox.'
  prefs: []
  type: TYPE_NORMAL
- en: Select Create New Script From Template. Run the script (see the log in [Figure 2-16](#python_scripting_window_rendering_a_map)),
    and the output layer will show in the Layers Panel as a new layer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python scripting window rendering a map](assets/pgda_0216.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-16\. Python scripting window rendering a map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Loading a Raster Layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data you are using is from the [QGIS sample data repository](https://oreil.ly/3fZQh).
    The steps for loading a raster layer are similar to those for loading a vector
    layer. The biggest differences are that we are now using a *.tif* file, and the
    provider parameter is now `gdal` (from the Geospatial Data Abstraction Library,
    which we’ll discuss in [Chapter 9](ch09.xhtml#exploring_the_geospatial_data_abstracti))
    instead of `ogr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be helpful to use `if` statements in determining if the code run is
    successful. The `print` statement is indented and will be run when the specific
    condition holds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is an example of raster statistics you can run in the console, and
    many more are available in the [QGIS documentation](https://oreil.ly/OKP96):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is shown in [Figure 2-17](#adding_a_raster_layer_to_the_canvas)
    and here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This indicates the pixel values and the *extent,* or actual dimensions, of the
    layer we are viewing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a raster layer to the canvas](assets/pgda_0217.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-17\. Adding a raster layer to the canvas
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Redlining: Mapping Inequalities'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’ll end this chapter with a powerful visualization that demonstrates the value
    of place and location when considering a data question. The [Mapping Inequality:
    Redlining in New Deal America](https://oreil.ly/LOcDk) research project presents
    data from the [Home Owners’ Loan Corporation (HOLC)](https://oreil.ly/M4kIq),
    a federal foreclosure-prevention program introduced in 1933 as part of President
    Franklin Delano Roosevelt’s New Deal. Here’s how the site introduces the data:'
  prefs: []
  type: TYPE_NORMAL
- en: HOLC staff members, using data and evaluations organized by local real estate
    professionals—lenders, developers, and real estate appraisers—in each city, assigned
    grades to residential neighborhoods that reflected their “mortgage security” that
    would then be visualized on color-coded maps. Neighborhoods receiving the highest
    grade of “A”—colored green on the maps—were deemed minimal risks for banks and
    other mortgage lenders when they were determining who should receive loans and
    which areas in the city were safe investments. Those receiving the lowest grade
    of “D,” colored red, were considered “hazardous.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This practice, called redlining, locked existing land-use systems into place.
    Areas outside of the best classifications (green or blue) were more likely to
    flood (due to more asphalt covering the ground), to have fewer parks and limited
    treelines, and to be closer to garbage dumps and interstate freeways.
  prefs: []
  type: TYPE_NORMAL
- en: The project’s website allows you to select a city and explore maps. I spend
    a lot of time in New York City, so I selected Manhattan in the screenshot in [Figure 2-18](#redlining_a_map_of_holc_neighborhood_gr).
    I have walked the neighborhoods of New York City for many years, watching economic
    investments into neighborhoods once widely considered too dangerous to roam. The
    1930s redlining maps highlighted the neighborhoods that surround Central Park
    as “still desirable” and “best”—as long as they weren’t too close to Harlem and
    other primarily Black neighborhoods.^([2](ch02.xhtml#ch01fn7)) Although mortgage-security
    redlining is no longer a government-sponsored practice, the land-use systems in
    many of these areas are still locked in and are often explored as foundational
    to research directed toward environmental racism.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/pgda_0218.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-18\. Redlining: a map of HOLC neighborhood grades in 1930s Manhattan,
    generated with the Mapping Inequality project’s online tool'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The data can be downloaded and uploaded to QGIS. Add the shapefiles by dragging
    them from the Browser panel onto the canvas. To update the colored polygons according
    to HOLC grade, use the Layer Styling panel, as shown in [Figure 2-19](#styling_the_shapefiles_by_holc_grade),
    to select Categorized as a format and `holc_grade` as the value, then each color
    as the symbol (selected individually for each value by clicking on each square).
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the shapefiles by HOLC grade](assets/pgda_0219.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-19\. Styling the shapefiles by HOLC grade
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 2-20](#qgis_attribute_table_for_mapcomma_which) shows the New York
    City map and attribute table displayed in QGIS. Saving the layer as a file will
    make it available for other maps, where you can examine the persistent impact
    of redlining.'
  prefs: []
  type: TYPE_NORMAL
- en: '![QGIS attribute table for map, which includes the attributes state, city,
    holc_grade, neighborhood, and area](assets/pgda_0220.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-20\. QGIS attribute table for map, which includes the attributes `state`,
    `city`, `holc_grade`, `neighborhood`, and `area`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Redlined areas were—and are—also more likely to be *urban heat islands*: artificial
    or natural locations with higher temperatures than the city average. Neighborhoods
    with more greenery, fewer impervious surfaces covering the ground, or fewer industrial
    or large buildings tend to absorb sun more easily than neighborhoods full of concrete,
    so they are cooler in the summer. Cooler neighborhoods are shown in yellow in
    [Figure 2-21](#urban_heat_islandscomma_calculated_with), and the warmer areas
    are indicated by orange and red. The red circle in [Figure 2-21](#urban_heat_islandscomma_calculated_with)
    depicts a concentration of higher surface temperatures that maps to HOLC red and
    yellow grades from the 1930s. The satellite images often capture urban clusters
    on Earth examining the LandScan urban extant and associated temperatures.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Urban heat islands, calculated with mean average between 2003 and 2018\.
    Data source: Earth Engine Data Catalog](assets/pgda_0221.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2-21\. Urban heat islands, calculated with mean average between 2003
    and 2018\. Data source: [Earth Engine Data Catalog](https://oreil.ly/Fw1tg)'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to QGIS and its Python Console. You learned
    how to load *.csv* and delimited files, shapefiles, and raster data. QGIS has
    a robust query editor, but often you can execute the same tasks in the Python
    Console or editor. You also got a taste for how bringing data together into a
    map can help you explore complex research questions. Publicly available geospatial
    datasets can be powerful decision-resource tools for exploring societal harms
    and benefits as well as frameworks for evaluating potential risks in the public
    and private sector. This book will provide a window into the scale of the resources
    available and show you how to interact and explore location intelligence to draw
    out deeper insights and bigger questions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn more about PyQGIS, the Python language of
    QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch02.xhtml#ch01fn6-marker)) The scale of a map is the ratio of a distance
    on the map to the corresponding distance on the ground. For reference, *1:10 m*
    means that 1 unit on your map (screen) is equal to 10,000,000 units. 1 m on the
    map = 10,000,000 m. Read more about [Map Scales](https://oreil.ly/LJFbr) at the
    US Geological Survey Information Center.
  prefs: []
  type: TYPE_NORMAL
- en: '^([2](ch02.xhtml#ch01fn7-marker)) To learn more, see Mitchell, Bruce, and Franco,
    Juan. 2018\. *HOLC ‘Redlining’ Maps: The Persistent Structure of Segregation and
    Economic Inequality.* National Community Reinvestment Coalition. [*https://ncrc.org/holc*](https://ncrc.org/holc).'
  prefs: []
  type: TYPE_NORMAL
