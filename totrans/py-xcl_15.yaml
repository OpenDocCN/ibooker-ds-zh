- en: Chapter 12\. User-Defined Functions (UDFs)
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous three chapters showed you how to automate Excel with a Python
    script and how to run such a script from Excel at the click of a button. This
    chapter introduces user-defined functions (UDFs) as another option to call Python
    code from Excel with xlwings. UDFs are Python functions that you use in Excel
    cells in the same way as you use built-in functions like `SUM` or `AVERAGE`. As
    in the previous chapter, we will start with the `quickstart` command that allows
    us to try out a first UDF in no time. We then move on to a case study about fetching
    and processing data from Google Trends as an excuse to work with more complex
    UDFs: we’ll learn how to work with pandas DataFrames and plots as well as how
    to debug UDFs. To conclude this chapter, we’ll dig into a few advanced topics
    with a focus on performance. Unfortunately, xlwings doesn’t support UDFs on macOS,
    which makes this chapter the only chapter requiring you to run the samples on
    Windows.[1](#filepos1810019)'
  prefs: []
  type: TYPE_NORMAL
- en: A NOTE FOR MACOS AND LINUX USERS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even if you are not on Windows, you may still want to have a look at the Google
    Trends case study as you could easily adapt it to work with a `RunPython` call
    on macOS. You could also produce a report by using one of the writer libraries
    from [Chapter 8](index_split_020.html#filepos959867), which even works on Linux.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting Started with UDFs
  prefs: []
  type: TYPE_NORMAL
- en: 'This section starts with the prerequisites for writing UDFs before we can use
    the `quickstart` command to run our first UDF. To follow along with the examples
    in this chapter, you’ll need the xlwings add-in installed and have the Excel option
    “Trust access to the VBA project object mode” enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: Add-in
  prefs: []
  type: TYPE_NORMAL
- en: 'I assume you have the xlwings add-in installed as explained in [Chapter 10](index_split_026.html#filepos1439732).
    This is not a hard requirement, though: while it makes development easy, especially
    to click the Import Functions button, it is not required for deployment and can
    be replaced by setting the workbook up in the standalone mode—for the details,
    see [Chapter 10](index_split_026.html#filepos1439732).'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Trust access to the VBA project object model
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to write your first UDFs, you will need to change a setting in Excel:
    go to File > Options > Trust Center > Trust Center Settings > Macro Settings and
    activate the checkbox to “Trust access to the VBA project object model,” as in
    [Figure 12-1](#filepos1656979). This enables xlwings to automatically insert a
    VBA module into your workbook when you click the Import Functions button in the
    add-in, as we’ll see shortly. Since you only rely on this setting during the import
    process, you should look at it as a developer setting that end users don’t need
    to be concerned about.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-1\. Trust access to the VBA project object model
  prefs: []
  type: TYPE_NORMAL
- en: With these two prerequisites in place, you’re ready to run your first UDF!
  prefs: []
  type: TYPE_NORMAL
- en: UDF Quickstart
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, the easiest way to get off the ground is to use the `quickstart`
    command. Before you run the following on an Anaconda Prompt, make sure to change
    into the directory of your choice via the `cd` command. For example, if you are
    in your home directory and want to change to the desktop, run `cd Desktop` first:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings quickstart first_udf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Navigate to the first_udf folder in the File Explorer and open first_udf.xlsm
    in Excel and first_udf.py in VS Code. Then, in the xlwings ribbon add-in, click
    the Import Functions button. By default, this is a silent action, i.e., you will
    only see something in case of an error. However, if you activate the checkbox
    Show Console in the Excel add-in and click the Import Functions button again,
    a Command Prompt opens and prints the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xlwings server running [...] Imported functions from the following modules:
    first_udf`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first line prints a few more details that we can ignore, though—the important
    part is that once this line is printed, Python is up and running. The second line
    confirms that it imported the functions from the `first_udf` module correctly.
    Now type `=hello("xlwings")` into cell A1 of the active sheet in first_udf.xlsm
    and after hitting Enter, you will see the formula evaluated as shown in [Figure 12-2](#filepos1659317).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00055.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-2\. first_udf.xlsm
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break this down to see how everything works: start by looking at the
    `hello` function in first_udf.py ([Example 12-1](#filepos1659850)), which is the
    part of the `quickstart` code that we’ve ignored so far.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-1\. first_udf.py (excerpt)
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``@xw.func``def``hello``(``name``):``return``f``"Hello
    {name}!"`'
  prefs: []
  type: TYPE_NORMAL
- en: Every function that you mark with `@xw.func` will get imported into Excel when
    you click on Import Functions in the xlwings add-in. Importing a function makes
    it available in Excel so you can use it in your cell formulas—we’ll get to the
    technical details in a moment. `@xw.func` is a decorator, which means that you
    have to place it directly on top of the function definition. If you want to know
    a bit more about how decorators work, have a look at the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: FUNCTION DECORATORS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A decorator is a function name that you put on top of a function definition,
    starting with the `@` sign. It’s a simple way to change the behavior of a function
    and is used by xlwings to recognize which functions you want to make available
    in Excel. To help you understand how a decorator works, the following example
    shows the definition of a decorator called `verbose` that will print some text
    before and after the function `print_hello` is run. Technically, the decorator
    takes the function (`print_hello`) and provides it as argument `func` to the `verbose`
    function. The inner function called `wrapper` can then do whatever needs to be
    done; in this case, it prints a value before and after calling the `print_hello`
    function. The name of the inner function doesn’t matter:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``1``]:``# This is the definition of the function decorator``def``verbose``(``func``):``def``wrapper``():``print``(``"Before
    calling the function."``)``func``()``print``(``"After calling the function."``)``return``wrapper`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``2``]:``# Using a function decorator``@verbose``def``print_hello``():``print``(``"hello!"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``3``]:``# Effect of calling the decorated function``print_hello``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Before calling the function. hello! After calling the function.`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At the end of this chapter, you’ll find [Table 12-1](#filepos1801916) with a
    summary of all decorators that xlwings offers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By default, if the function arguments are cell ranges, xlwings delivers you
    the values of these cell ranges instead of the xlwings `range` object. In the
    vast majority of cases, this is very convenient and allows you to call the `hello`
    function with a cell as argument. For example, you could write “xlwings” into
    cell A2, then change the formula in A1 into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`=``hello``(``A2``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The result will be the same as in [Figure 12-2](#filepos1659317). I will show
    you in the last section of this chapter how to change this behavior and make the
    arguments arrive as xlwings `range` objects instead—as we will see then, there
    are occasions where you will need this. In VBA, the equivalent `hello` function
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Function``hello``(``name``As``String``)``As``String``hello``=``"Hello "``&``name``&``"!"``End``Function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you click the Import Functions button in the add-in, xlwings inserts a
    VBA module called `xlwings_udfs` into your Excel workbook. It contains a VBA function
    for each Python function you import: these wrapper VBA functions take care of
    running the respective function in Python. While nobody stops you from looking
    at the `xlwings_udfs` VBA module by opening the VBA editor with Alt+F11, you can
    ignore it as the code is autogenerated and any changes would get lost when you
    click the Import Functions button again. Let’s now play around with our `hello`
    function in first_udf.py and replace `Hello` in the return value with `Bye`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.func``def``hello``(``name``):``return``f``"Bye {name}!"`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To recalculate the function in Excel, either double-click the cell A1 to edit
    the formula (or select the cell and press F2 to activate the edit mode), then
    hit Enter. Alternatively, type the keyboard shortcut Ctrl+Alt+F9: this will force
    the recalculation of all worksheets in all open workbooks including the `hello`
    formula. Note that F9 (recalculate all worksheets in all open workbooks) or Shift+F9
    (recalculate the active worksheet) will not recalculate the UDF as Excel only
    triggers a recalculation of UDFs if a dependent cell changed. To change this behavior,
    you could make the function volatile by adding the respective argument to the
    `func` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.func``(``volatile``=``True``)``def``hello``(``name``):``return``f``"Bye
    {name}!"`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Volatile functions are evaluated every time Excel performs a recalculation—whether
    or not the function’s dependencies have changed. A few of Excel’s built-in functions
    are volatile like `=RAND()` or `=NOW()` and using lots of them will make your
    workbook slower, so don’t overdo it. When you change a function’s name or arguments
    or the `func` decorator as we just did, you will need to reimport your function
    by clicking the Import Functions button again: this will restart the Python interpreter
    before importing the updated function. When you now change the function back from
    `Bye` to `Hello`, it is enough to use the keyboard shortcuts Shift+F9 or F9 to
    cause the formula to recalculate as the function is now volatile.'
  prefs: []
  type: TYPE_NORMAL
- en: SAVE THE PYTHON FILE AFTER CHANGING IT
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A common gotcha is forgetting to save the Python source file after making changes.
    Therefore, always double-check that the Python file is saved before hitting the
    Import Functions button or recalculating the UDFs in Excel.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By default, xlwings imports functions from a Python file in the same directory
    with the same name as the Excel file. Renaming and moving your Python source file
    requires similar changes as in [Chapter 10](index_split_026.html#filepos1439732),
    when we were doing the same with `RunPython` calls: go ahead and rename the file
    from first_udf.py to hello.py. To let xlwings know about that change, add the
    name of the module, i.e., `hello` (without the .py extension!) to UDF Modules
    in the xlwings add-in, as shown in [Figure 12-3](#filepos1675723).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00065.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-3\. The UDF Modules setting
  prefs: []
  type: TYPE_NORMAL
- en: Click the Import Functions button to reimport the function. Then recalculate
    the formula in Excel to be sure everything still works.
  prefs: []
  type: TYPE_NORMAL
- en: IMPORT FUNCTIONS FROM MULTIPLE PYTHON MODULES
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you want to import functions from multiple modules, use a semicolon between
    their names in the UDF Modules setting, e.g., `hello;another_module`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now go ahead and move hello.py to your desktop: this requires you to add the
    path of your desktop to the `PYTHONPATH` in the xlwings add-in. As seen in [Chapter 10](index_split_026.html#filepos1439732),
    you could use environment variables to achieve this, i.e., you could set the `PYTHONPATH`
    setting in the add-in to %USERPROFILE%\Desktop. If you still have the path to
    the pyscripts folder in there from [Chapter 10](index_split_026.html#filepos1439732),
    either overwrite it or leave it in there, separating the paths with a semicolon.
    After these changes, click the Import Functions button again, then recalculate
    the function in Excel to verify that everything still works.'
  prefs: []
  type: TYPE_NORMAL
- en: CONFIGURATION AND DEPLOYMENT
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, I am always referring to changing a setting in the add-in;
    however, everything from [Chapter 10](index_split_026.html#filepos1439732) with
    regard to configuration and deployment can be applied to this chapter too. This
    means that a setting could also be changed in the xlwings.conf sheet or a config
    file sitting in the same directory as the Excel file. And instead of using the
    xlwings add-in, you could use a workbook that has been set up in the standalone
    mode. With UDFs, it also makes sense to build your own custom add-in—this allows
    you to share your UDFs among all workbooks without having to import them into
    each workbook. For more information about building your own custom add-in, see
    the [xlwings docs](https://oreil.ly/uNo0g).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you change the Python code of your UDF, xlwings automatically picks up the
    changes whenever you save the Python file. As mentioned, you only need to reimport
    your UDFs if you change something in the function’s name, arguments, or decorators.
    If, however, your source file imports code from other modules, and you change
    something in these modules, the easiest way to let Excel pick up all changes is
    to click on Restart UDF Server.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you know how to write a simple UDF in Python and how to use it
    in Excel. The case study in the next section will introduce you to more realistic
    UDFs that make use of pandas DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: Google Trends'
  prefs: []
  type: TYPE_NORMAL
- en: In this case study, we’ll use data from Google Trends to learn how to work with
    pandas DataFrames and dynamic arrays, one of the most exciting new features in
    Excel that Microsoft officially launched in 2020\. We then create a UDF that connects
    directly to Google Trends as well as one that uses a DataFrame’s `plot` method.
    To wrap this section up, we’ll have a look at how debugging works with UDFs. Let’s
    get started with a short introduction to Google Trends!
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Google Trends
  prefs: []
  type: TYPE_NORMAL
- en: '[Google Trends](https://oreil.ly/G6TpC) is a Google service that allows you
    to analyze the popularity of Google search queries over time and across regions.
    [Figure 12-4](#filepos1681064) shows Google Trends after adding a few popular
    programming languages, selecting Worldwide as the region and 1/1/16 - 12/26/20
    as the time range. Each search term has been selected with the Programming language
    context that appears in a drop-down after typing in the search term. This makes
    sure that we ignore Python, the snake, and Java, the island. Google indexes the
    data within the selected timeframe and location with 100 representing the maximum
    search interest. In our sample, it means that within the given timeframe and location,
    the highest search interest was in Java in February 2016\. For more details about
    Google Trends, have a look at their official [blog post](https://oreil.ly/_aw8f).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00070.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-4\. Interest over time; data source [Google Trends](https://oreil.ly/SR8zD)
  prefs: []
  type: TYPE_NORMAL
- en: RANDOM SAMPLES
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Google Trends numbers are based on random samples, which means that you may
    see a picture that is slightly different from [Figure 12-4](#filepos1681064) even
    if you use the same location, timeframe, and search terms as on the screenshot.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I hit the download button that you see in [Figure 12-4](#filepos1681064) to
    get a CSV file from where I copied the data into the Excel workbook of a `quickstart`
    project. In the next section, I’ll show you where to find this workbook—we will
    use it to analyze the data with a UDF right from within Excel!
  prefs: []
  type: TYPE_NORMAL
- en: Working with DataFrames and Dynamic Arrays
  prefs: []
  type: TYPE_NORMAL
- en: Having it made this far in the book, you shouldn’t be surprised that pandas
    DataFrames are also a UDF’s best friend. To see how DataFrames and UDFs work together
    and to learn about dynamic arrays, navigate to the describe folder in the udfs
    directory of the companion repository and open describe.xlsm in Excel and describe.py
    in VS Code. The Excel file contains the data from Google Trends and in the Python
    file, you’ll find a simple function to start with, as shown in [Example 12-2](#filepos1683070).
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-2\. describe.py
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``import``pandas``as``pd``@xw.func``@xw.arg``(``"df"``,``pd``.``DataFrame``,``index``=``True``,``header``=``True``)``def``describe``(``df``):``return``df``.``describe``()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared to the `hello` function from the `quickstart` project, you’ll notice
    a second decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.arg``(``"df"``,``pd``.``DataFrame``,``index``=``True``,``header``=``True``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`arg` is short for argument and allows you to apply the same converters and
    options as I was using in [Chapter 9](index_split_024.html#filepos1235764) when
    I was introducing the xlwings syntax. In other words, the decorator offers the
    same functionality for UDFs as the `options` method for xlwings `range` objects.
    Formally, this is the syntax of the `arg` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.arg``(``"argument_name"``,``convert``=``None``,``option1``=``value1``,``option2``=``value2``,``...``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To help you make the connection back to [Chapter 9](index_split_024.html#filepos1235764),
    the equivalent of the `describe` function in the form of a script looks like this
    (this assumes that describe.xlsm is open in Excel and that the function is applied
    to the range A3:F263):'
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``import``pandas``as``pd``data_range``=``xw``.``Book``(``"describe.xlsm"``)``.``sheets``[``0``][``"A3:F263"``]``df``=``data_range``.``options``(``pd``.``DataFrame``,``index``=``True``,``header``=``True``)``.``value``df``.``describe``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The options `index` and `header` wouldn’t be required as they are using the
    default arguments, but I included them to show you how they are applied with UDFs.
    With describe.xlsm as your active workbook, click the Import Functions button,
    then type `=describe(A3:F263)` in a free cell, in H3, for example. What happens
    when you hit Enter depends on your version of Excel—more specifically if your
    version of Excel is recent enough to support dynamic arrays. If it does, you will
    see the situation as shown in [Figure 12-5](#filepos1694433), i.e., the output
    of the `describe` function in cells H3:M11 is surrounded by a thin blue border.
    You will only be able to see the blue border if your cursor is within the array,
    and it is so subtle that you may have issues seeing it clearly if you look at
    the screenshot in a printed version of the book. We’ll see how dynamic arrays
    behave in a moment and you can also learn more about them in the sidebar [“Dynamic
    Arrays”](#filepos1711844).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00078.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-5\. The `describe` function with dynamic arrays
  prefs: []
  type: TYPE_NORMAL
- en: 'If, however, you are using a version of Excel that doesn’t support dynamic
    arrays, it will look as if nothing is happening: by default, the formula will
    only return the top-left cell in H3, which is empty. To fix this, use what Microsoft
    nowadays calls legacy CSE arrays. CSE Arrays need to be confirmed by typing the
    Ctrl+Shift+Enter key combination instead of hitting just Enter—hence their name.
    Let’s see how they work in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that H3 is an empty cell by selecting it and hitting the Delete key.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Select the output range by starting in cell H3, and then select all cells on
    the way to M11.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: With the range H3:M11 selected, type in the formula `=describe(A3:F263)`, and
    then confirm by hitting Ctrl+Shift+Enter.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You should now see almost the same picture as in [Figure 12-5](#filepos1694433)
    with these differences:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no blue border around the range H3:M11.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The formula shows curly braces around it to mark it as a CSE array: `{=describe(A3:F263)}`.'
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: While you delete dynamic arrays by going to the top-left cell and hitting the
    Delete key, with CSE arrays, you always have to select the whole array first to
    be able to delete it.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s now make our function slightly more useful by introducing an optional
    parameter called `selection` that will allow us to specify which columns we want
    to include in our output. If you have a lot of columns and only want to include
    a subset in the `describe` function, this can become a useful feature. Change
    the function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.func``@xw.arg``(``"df"``,``pd``.``DataFrame``)`![](images/00031.jpg)`def``describe``(``df``,``selection``=``None``):`![](images/00039.jpg)`if``selection``is``not``None``:``return``df``.``loc``[:,``selection``]``.``describe``()`![](images/00050.jpg)`else``:``return``df``.``describe``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I left off the `index` and `header` arguments, as they are using the defaults,
    but feel free to leave them in.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the parameter `selection` and make it optional by assigning `None` as its
    default value.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If `selection` is provided, filter the DataFrame’s columns based on it.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Once you have changed the function, make sure to save it, and then hit the
    Import Functions button in the xlwings add-in—this is required since we have added
    a new parameter. Write `Selection` into cell A2 and `TRUE` into cells B2:F2\.
    Finally, adjust your formula in cell H3 depending on whether you have dynamic
    arrays or not:'
  prefs: []
  type: TYPE_NORMAL
- en: With dynamic arrays
  prefs: []
  type: TYPE_NORMAL
- en: Select H3, then change the formula to `=describe(A3:F263, B2:F2)` and hit Enter.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Without dynamic arrays
  prefs: []
  type: TYPE_NORMAL
- en: Starting at cell H3, select H3:M11, and then hit F2 to activate the edit mode
    of cell H3 and change the formula to `=describe(A3:F263, B2:F2)`. To finalize,
    hit Ctrl+Shift+Enter.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To try out the enhanced function, let’s change Java’s `TRUE` in cell E2 to
    `FALSE` and see what happens: with dynamic arrays, you will see the table magically
    shrink by one column. With legacy CSE arrays, however, you will end up with an
    ugly column full of `#N/A` values, as shown in [Figure 12-6](#filepos1708195).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To work around this issue, xlwings can resize legacy CSE arrays by making use
    of the return decorator. Add it by changing your function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.func``@xw.arg``(``"df"``,``pd``.``DataFrame``)``@xw.ret``(``expand``=``"table"``)`![](images/00031.jpg)`def``describe``(``df``,``selection``=``None``):``if``selection``is``not``None``:``return``df``.``loc``[:,``selection``]``.``describe``()``else``:``return``df``.``describe``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By adding the return decorator with the option `expand="table"`, xlwings will
    resize the CSE array to match the dimensions of the returned DataFrame.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-6\. Dynamic arrays (top) vs. CSE arrays (bottom) after excluding a
    column
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the return decorator, save the Python source file, switch over
    to Excel, and hit Ctrl+Alt+F9 to recalculate: this will resize the CSE array and
    remove the `#N/A` column. Since this is a workaround, I highly recommend you do
    whatever is in your power to get your hands on a version of Excel that supports
    dynamic arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: ORDER OF FUNCTION DECORATORS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make sure to place the `xw.func` decorator on top of the `xw.arg` and `xw.ret`
    decorators; note that the order of `xw.arg` and `xw.ret` doesn’t matter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The return decorator works conceptually the same way as the argument decorator,
    with the only difference that you don’t have to specify the name of an argument.
    Formally, its syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.ret``(``convert``=``None``,``option1``=``value1``,``option2``=``value2``,``...``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You usually don’t have to provide an explicit `convert` argument as xlwings
    recognizes the type of the return value automatically—that’s the same behavior
    we saw in [Chapter 9](index_split_024.html#filepos1235764) with the `options`
    method when writing values to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, if you want to suppress the index of the DataFrame you return,
    use this decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.ret``(``index``=``False``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: DYNAMIC ARRAYS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Having seen how dynamic arrays work in the context of the `describe` function,
    I am pretty sure you’d agree that they are one of the most fundamental and exciting
    additions to Excel that Microsoft has come up with in a long time. They were officially
    introduced in 2020 to Microsoft 365 subscribers who are using the most recent
    version of Excel. To see if your version is recent enough, check for the existence
    of the new `UNIQUE` function: start typing `=UNIQUE` in a cell and if Excel suggests
    the function name, dynamic arrays are supported. If you use Excel with a permanent
    license rather than as part of the Microsoft 365 subscription, you are likely
    to get it with the version that was announced for release in 2021 and that will
    presumably be called Office 2021\. Here are a few technical notes about the behavior
    of dynamic arrays:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If dynamic arrays overwrite a cell with a value, you will get a `#SPILL!` error.
    After making room for the dynamic array by deleting or moving the cell that is
    in the way, the array will be written out. Note that the xlwings return decorator
    with `expand="table"` is less smart and will overwrite existing cell values without
    warning!
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can refer to the range of a dynamic array by using the top-left cell followed
    by a `#` sign. For example, if your dynamic array is in the range A1:B2 and you
    wanted to sum up all cells, write `=SUM(A1#)`.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you ever want your arrays to behave like the legacy CSE arrays again, start
    your formula with an `@` sign, e.g., to have a matrix multiplication return a
    legacy CSE array, use `=@MMULT()`.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Downloading a CSV file and copy/pasting the values into an Excel file worked
    fine for this introductory DataFrame example, but copy/paste is such an error-prone
    process that you’ll want to get rid of it whenever you can. With Google Trends,
    you can indeed, and the next section shows you how!
  prefs: []
  type: TYPE_NORMAL
- en: Fetching Data from Google Trends
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous examples were all very simple, pretty much just wrapping a single
    pandas function. To get our hands on a more real-world case, let’s create a UDF
    that downloads the data directly from Google Trends so you don’t have to go online
    and download a CSV file manually anymore. Google Trends doesn’t have an official
    API (application programming interface), but there is a Python package called
    [pytrends](https://oreil.ly/SvnLl) that fills the gap. Not being an official API
    means that Google can change it anytime they want, so there is a risk that the
    examples in this section will stop working at some point. However, given that
    pytrends has been around for more than five years at the time of this writing,
    there’s also a real chance that it will be updated to reflect the changes and
    make it work again. In any case, it serves as a good example to show you that
    there’s a Python package for just about anything—a claim I made in [Chapter 1](index_split_007.html#filepos32075).
    If you were restricted to using Power Query, you’d probably need to invest a lot
    more time to get something working—I, at least, wasn’t able to find a plug-and-play
    solution that is available for free. Since pytrends isn’t part of Anaconda and
    also doesn’t have an official Conda package, let’s install it with pip, if you
    haven’t done this yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `pip install pytrends`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To replicate the exact case from the online version of Google Trends as shown
    in [Figure 12-4](#filepos1681064), we’ll need to find the correct identifiers
    for the search terms with the “Programming language” context. To do this, pytrends
    can print the different search contexts or types that Google Trends suggests in
    the dropdown. In the following code sample, `mid` stands for Machine ID, which
    is the ID we are looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``4``]:``from``pytrends.request``import``TrendReq`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``5``]:``# First, let''s instantiate a TrendRequest object``trend``=``TrendReq``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``6``]:``# Now we can print the suggestions as they would appear``# online
    in the dropdown of Google Trends after typing in "Python"``trend``.``suggestions``(``"Python"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[6]: [{''mid'': ''/m/05z1_'', ''title'': ''Python'', ''type'': ''Programming
    language''},          {''mid'': ''/m/05tb5'', ''title'': ''Python family'', ''type'':
    ''Snake''},          {''mid'': ''/m/0cv6_m'', ''title'': ''Pythons'', ''type'':
    ''Snake''},          {''mid'': ''/m/06bxxb'', ''title'': ''CPython'', ''type'':
    ''Topic''},          {''mid'': ''/g/1q6j3gsvm'', ''title'': ''python'', ''type'':
    ''Topic''}]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Repeating this for the other programming languages allows us to retrieve the
    correct `mid` for all of them, and we can write the UDF as shown in [Example 12-3](#filepos1720656).
    You’ll find the source code in the google_trends directory within the udfs folder
    of the companion repository.
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-3\. The `get_interest_over_time` function in google_trends.py (excerpt
    with the relevant import statements)
  prefs: []
  type: TYPE_NORMAL
- en: '`import``pandas``as``pd``from``pytrends.request``import``TrendReq``import``xlwings``as``xw``@xw.func``(``call_in_wizard``=``False``)`![](images/00031.jpg)`@xw.arg``(``"mids"``,``doc``=``"Machine
    IDs: A range of max 5 cells"``)`![](images/00039.jpg)`@xw.arg``(``"start_date"``,``doc``=``"A
    date-formatted cell"``)``@xw.arg``(``"end_date"``,``doc``=``"A date-formatted
    cell"``)``def``get_interest_over_time``(``mids``,``start_date``,``end_date``):``"""Query
    Google Trends - replaces the Machine ID (mid) of     common programming languages
    with their human-readable     equivalent in the return value, e.g., instead of
    "/m/05z1_"     it returns "Python".     """`![](images/00050.jpg)`# Check and
    transform parameters``assert``len``(``mids``)``<=``5``,``"Too many mids (max:
    5)"`![](images/00067.jpg)`start_date``=``start_date``.``date``()``.``isoformat``()`![](images/00058.jpg)`end_date``=``end_date``.``date``()``.``isoformat``()``#
    Make the Google Trends request and return the DataFrame``trend``=``TrendReq``(``timeout``=``10``)`![](images/00082.jpg)`trend``.``build_payload``(``kw_list``=``mids``,``timeframe``=``f``"{start_date}
    {end_date}"``)`![](images/00076.jpg)`df``=``trend``.``interest_over_time``()`![](images/00007.jpg)`#
    Replace Google''s "mid" with a human-readable word``mids``=``{``"/m/05z1_"``:``"Python"``,``"/m/02p97"``:``"JavaScript"``,``"/m/0jgqg"``:``"C++"``,``"/m/07sbkfb"``:``"Java"``,``"/m/060kv"``:``"PHP"``}``df``=``df``.``rename``(``columns``=``mids``)`![](images/00015.jpg)`#
    Drop the isPartial column``return``df``.``drop``(``columns``=``"isPartial"``)`![](images/00020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, Excel calls the function when you open it in the Function Wizard.
    As this can make it slow, especially with API requests involved, we’re switching
    this off.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Optionally, add a docstring for the function argument, which will be shown in
    the Function Wizard when you edit the respective argument, as in [Figure 12-8](#filepos1740246).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The function’s docstring is displayed in the Function Wizard, as in [Figure 12-8](#filepos1740246).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `assert` statement is an easy way to raise an error in case the user provides
    too many `mids`. Google Trends allows a maximum of five `mids` per query.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00058.jpg)'
  prefs: []
  type: TYPE_IMG
- en: pytrends expects the start and end dates as a single string in the form `YYYY-MM-DD
    YYYY-MM-DD`. As we are providing the start and end dates as date-formatted cells,
    they will arrive as `datetime` objects. Calling the `date` and `isoformat` methods
    on them will format them properly.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00082.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We’re instantiating a pytrends `request` object. By setting the `timeout` to
    ten seconds, we reduce the risk of seeing a `requests.exceptions.ReadTimeout`
    error, which occasionally happens if Google Trends takes a bit longer to respond.
    If you still see this error, simply run the function again or increase the timeout.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00076.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We provide the `kw_list` and `timeframe` arguments to the request object.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We make the actual request by calling `interest_over_time`, which will return
    a pandas DataFrame.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We rename the `mids` with their human-readable equivalent.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The last column is called `isPartial`. `True` indicates that the current interval,
    e.g., a week, is still ongoing and therefore doesn’t have all data yet. To keep
    things simple and to be in line with the online version, we’re dropping this column
    when returning the DataFrame.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now open google_trends.xlsm from the companion repository, click on Import Functions
    in the xlwings add-in, and then call the `get_interest_over_time` function from
    cell A4, as shown in [Figure 12-7](#filepos1738974).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-7\. google_trends.xlsm
  prefs: []
  type: TYPE_NORMAL
- en: 'To get help with regard to the function arguments, click the Insert Function
    button to the left of the formula bar while cell A4 is selected: this will open
    the Function Wizard where you will find your UDFs under the `xlwings` category.
    After selecting `get_interest_over_time`, you’ll see the name of the function
    arguments as well as the docstring as function description (restricted to the
    first 256 characters): see [Figure 12-8](#filepos1740246). Alternatively, start
    typing `=get_interest_over_time(` into cell A4 (including the opening parenthesis)
    before hitting the Insert Function button—this will take you directly to the view
    shown in [Figure 12-8](#filepos1740246). Note that UDFs return the dates unformatted.
    To fix this, right-click on the column with the dates, select Format Cells, and
    then select the format of your choice under the Date category.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-8\. The Function Wizard
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely at [Figure 12-7](#filepos1738974), you can tell by the
    blue border around the result array that I am using dynamic arrays again. As the
    screenshot is cropped at the bottom and the array starts at the very left, you
    only see the top and right borders starting at cell A4, and even they might be
    hard to recognize on the screenshot. If your version of Excel doesn’t support
    dynamic arrays, use the workaround by adding the following return decorator to
    the `get_interest_over_time` function (below the existing decorators):'
  prefs: []
  type: TYPE_NORMAL
- en: '`@xw.ret``(``expand``=``"table"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you know how to work with more complicated UDFs, let’s see how we can
    use plots with UDFs!
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with UDFs
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might remember from [Chapter 5](index_split_015.html#filepos482650),
    calling a DataFrame’s `plot` method returns a Matplotlib plot by default. In Chapters
    [9](index_split_024.html#filepos1235764) and [11](index_split_027.html#filepos1487255),
    we’ve already seen how you add such a plot as a picture to Excel. When working
    with UDFs, there’s an easy way to produce plots: have a look at the second function
    in google_trends.py, shown in [Example 12-4](#filepos1742426).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-4\. The `plot` function in google_trends.py (excerpt with the relevant
    import statements)
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``import``pandas``as``pd``import``matplotlib.pyplot``as``plt``@xw.func``@xw.arg``(``"df"``,``pd``.``DataFrame``)``def``plot``(``df``,``name``,``caller``):`![](images/00031.jpg)`plt``.``style``.``use``(``"seaborn"``)`![](images/00039.jpg)`if``not``df``.``empty``:`![](images/00050.jpg)`caller``.``sheet``.``pictures``.``add``(``df``.``plot``()``.``get_figure``(),`![](images/00067.jpg)`top``=``caller``.``offset``(``row_offset``=``1``)``.``top``,`![](images/00058.jpg)`left``=``caller``.``left``,``name``=``name``,``update``=``True``)`![](images/00082.jpg)`return``f``"<Plot:
    {name}>"`![](images/00076.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `caller` argument is a special argument that is reserved by xlwings: this
    argument will not be exposed when you call the function from an Excel cell. Instead,
    `caller` will be provided by xlwings behind the scenes and corresponds to the
    cell from which you are calling the function (in the form of an xlwings `range`
    object). Having the `range` object of the calling cell makes it easy to place
    the plot by using the `top` and `left` arguments of `pictures.add`. The `name`
    argument will define the name of the picture in Excel.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We set the `seaborn` style to make the plot visually more attractive.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Only call the `plot` method if the DataFrame isn’t empty. Calling the `plot`
    method on an empty DataFrame would raise an error.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`get_figure()` returns the Matplotlib figure object from a DataFrame plot,
    which is what `pictures.add` expects.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00058.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The arguments `top` and `left` are only used when you insert the plot for the
    first time. The provided arguments will place the plot in a convenient place—one
    cell below the one from where you call this function.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00082.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The argument `update=True` makes sure that repeated function calls will update
    the existing picture with the provided name in Excel, without changing its position
    or size. Without this argument, xlwings would complain that there is already a
    picture with that name in Excel.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00076.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While you don’t strictly need to return anything, it makes your life much easier
    if you return a string: this allows you to recognize where in your sheet your
    plotting function sits.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In google_trends.xlsm, in cell H3, call the `plot` function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '`=``plot``(``A4``:``F263``,``"History"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If your version of Excel supports dynamic arrays, use `A4#` instead of `A4:F263`
    to make the source dynamic as shown in [Figure 12-9](#filepos1754503).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-9\. The `plot` function in action
  prefs: []
  type: TYPE_NORMAL
- en: Let’s assume that you are slightly confused by how the `get_interest_over_time`
    function works. One option to get a better understanding is to debug the code—the
    next section shows you how this works with UDFs!
  prefs: []
  type: TYPE_NORMAL
- en: Debugging UDFs
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple way to debug a UDF is to use the `print` function. If you have the
    Show Console setting enabled in the xlwings add-in, you will be able to print
    the value of a variable in the Command Prompt that shows up when you call your
    UDF. A slightly more comfortable option is to use the debugger of VS Code, which
    will allow you to pause at breakpoints and step through the code line by line.
    To use the VS Code debugger (or the debugger of any other IDE), you’ll need to
    do two things:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Excel add-in, activate the checkbox Debug UDFs. This prevents Excel from
    automatically starting Python, which means you have to do it manually as explained
    under the next point.
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The easiest way to run the Python UDF server manually is by adding the following
    lines at the very bottom of the file you’re trying to debug. I have already added
    these lines at the bottom of the google_trends.py file in the companion repository:'
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`if` `__name__` `==``"__main__"``:``xw``.``serve``()`'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you may remember from [Chapter 11](index_split_027.html#filepos1487255),
    this `if` statement makes sure that the code only runs when you run the file as
    a script—it doesn’t run when you import the code as a module. With the `serve`
    command added, run google_trends.py in VS Code in debug mode by pressing F5 and
    selecting “Python File”—make sure you don’t run the file by clicking the Run File
    button as this would ignore breakpoints.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s set a breakpoint on line 29 by clicking to the left of the line number.
    If you are not familiar with using the debugger of VS Code, please have a look
    at [Appendix B](index_split_030.html#filepos1820886) where I introduce it in more
    detail. When you now recalculate cell A4, your function call will stop at the
    breakpoint and you can inspect the variables. What’s always helpful during debugging
    is to run `df.info()`. Activate the Debug Console tab, write `df.info()` in the
    prompt at the bottom, and confirm by hitting Enter, as shown in [Figure 12-10](#filepos1759601).
  prefs: []
  type: TYPE_NORMAL
- en: DEBUGGING WITH VS CODE AND ANACONDA
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This is the same warning as in [Chapter 11](index_split_027.html#filepos1487255):
    on Windows, when you run the VS Code debugger for the first time with code that
    uses pandas, you might be greeted by an error: “Exception has occurred: ImportError,
    Unable to import required dependencies: numpy.” This happens because the debugger
    is up and running before the Conda environment has been activated properly. As
    a workaround, stop the debugger by clicking the stop icon and hit F5 again—it
    will work the second time.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-10\. Using the Debug Console while the code is paused at a breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: If you keep your program paused for more than ninety seconds on a breakpoint,
    Excel will show you a pop-up saying that “Microsoft Excel is waiting for another
    application to complete an OLE action.” This shouldn’t have an impact on your
    debugging experience other than having to confirm the pop-up to make it disappear
    once you’re done with debugging. To finish this debugging session, click on the
    Stop button in VS Code (see [Figure 12-10](#filepos1759601)) and make sure to
    uncheck the Debug UDFs setting again in the xlwings ribbon add-in. If you forget
    to uncheck the Debug UDFs setting, your functions will return an error the next
    time you recalculate them.
  prefs: []
  type: TYPE_NORMAL
- en: This section showed you the most commonly used UDF functionality by working
    through the Google Trends case study. The next section will touch on a few advanced
    topics including UDF performance and the `xw.sub` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced UDF Topics
  prefs: []
  type: TYPE_NORMAL
- en: If you use many UDFs in your workbook, performance can become an issue. This
    section starts by showing you the same basic performance optimizations as we’ve
    seen in [Chapter 9](index_split_024.html#filepos1235764), but applied to UDFs.
    The second part deals with caching, an additional performance optimization technique
    that we can use with UDFs. Along the way, we’ll also learn how to have function
    arguments arrive as xlwings `range` objects rather than as values. At the end
    of this section, I will introduce you to the `xw.sub` decorator that you can use
    as an alternative to the `RunPython` call if you are exclusively working on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Performance Optimization
  prefs: []
  type: TYPE_NORMAL
- en: 'This part looks at two performance optimization techniques: how to minimize
    cross-application calls and how to use the raw values converter.'
  prefs: []
  type: TYPE_NORMAL
- en: Minimize cross-application calls
  prefs: []
  type: TYPE_NORMAL
- en: As you probably recall from [Chapter 9](index_split_024.html#filepos1235764),
    cross-application calls, i.e., calls between Excel and Python, are relatively
    slow, so the fewer UDFs you have, the better. You should therefore work with arrays
    whenever you can—having a version of Excel that supports dynamic arrays definitely
    makes this part easier. When you are working with pandas DataFrames, there isn’t
    much that can go wrong, but there are certain formulas where you might not think
    of using arrays automatically. Consider the example of [Figure 12-11](#filepos1762988)
    that calculates total revenues as the sum of a given Base Fee plus a variable
    fee determined by Users times Price.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12-11\. Single-cell formulas (left) vs. array-based formulas (right)
  prefs: []
  type: TYPE_NORMAL
- en: Single-cell formulas
  prefs: []
  type: TYPE_NORMAL
- en: The left table in [Figure 12-11](#filepos1762988) uses the formula `=revenue($B$5,
    $A9, B$8)` in cell B9\. This formula is then applied to the whole range B9:E13\.
    This means that you have 20 single-cell formulas that call the `revenue` function.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Array-based formulas
  prefs: []
  type: TYPE_NORMAL
- en: The right table in [Figure 12-11](#filepos1762988) uses the formula `=revenue2(H5,
    G9:G13, H8:K8)`. If you don’t have dynamic arrays in your version of Excel, you
    would need to add the decorator `xw.ret(expand="table")` to the `revenue2` function
    or turn the array into a legacy CSE array by selecting H9:K13, pressing F2 to
    edit the formula, and confirming with Ctrl+Shift+Enter. Unlike the single-cell
    formula, this version only calls the `revenue2` function once.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can see the Python code for the two UDFs in [Example 12-5](#filepos1764694),
    and you’ll find the source file in the revenues folder within the udfs directory
    of the companion repository.
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-5\. revenues.py
  prefs: []
  type: TYPE_NORMAL
- en: '`import``numpy``as``np``import``xlwings``as``xw``@xw.func``def``revenue``(``base_fee``,``users``,``price``):``return``base_fee``+``users``*``price``@xw.func``@xw.arg``(``"users"``,``np``.``array``,``ndim``=``2``)``@xw.arg``(``"price"``,``np``.``array``)``def``revenue2``(``base_fee``,``users``,``price``):``return``base_fee``+``users``*``price`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you change the base fee in cell B5 or H5 respectively, you will see that
    the right example will be much faster than the left one. The difference in the
    Python functions are minimal and only differ in the argument decorators: the array-based
    version reads in `users` and `prices` as NumPy array—the only caveat here is to
    read in `users` as a two-dimensional column vector by setting `ndim=2` in the
    argument decorator. You probably remember that NumPy arrays are similar to DataFrames
    but without index or header and with only one data type, but if you want a more
    detailed refresher, have another look at [Chapter 4](index_split_014.html#filepos433313).'
  prefs: []
  type: TYPE_NORMAL
- en: Using raw values
  prefs: []
  type: TYPE_NORMAL
- en: 'Using raw values means that you are leaving out the data preparation and cleaning
    steps that xlwings does on top of pywin32, xlwings’ dependency on Windows. This,
    for example, means that you can’t work with DataFrames directly anymore as pywin32
    doesn’t understand them, but that may not be an issue if you work with lists or
    NumPy arrays. To use UDFs with raw values, use the string `raw` as the `convert`
    argument in the argument or return decorator. This is the equivalent of using
    the `raw` converter via the `options` method of an xlwings `range` object as we
    did in [Chapter 9](index_split_024.html#filepos1235764). In line with what we
    saw back then, you’ll get the biggest speed up during write operations. For example,
    calling the following function without the return decorator would be about three
    times slower on my laptop:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import``numpy``as``np``import``xlwings``as``xw``@xw.func``@xw.ret``(``"raw"``)``def``randn``(``i``=``1000``,``j``=``1000``):``"""Returns
    an array with dimensions (i, j) with normally distributed``    pseudorandom numbers
    provided by NumPy''s random.randn``    """``return``np``.``random``.``randn``(``i``,``j``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You’ll find the respective sample in the companion repository in the raw_values
    folder within the udfs directory. When working with UDFs, you have another easy
    option to improve performance: prevent repeated calculations of slow functions
    by caching their results.'
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  prefs: []
  type: TYPE_NORMAL
- en: 'When you call a deterministic function, i.e., a function that given the same
    inputs, always returns the same output, you can store the result in a cache: repeated
    calls of the function don’t have to wait for the slow calculation anymore but
    can take the result from the cache where it’s already precalculated. This is best
    explained with a short example. A very basic caching mechanism can be programmed
    with a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``7``]:``import``time`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``8``]:``cache``=``{}``def``slow_sum``(``a``,``b``):``key``=``(``a``,``b``)``if``key``in``cache``:``return``cache``[``key``]``else``:``time``.``sleep``(``2``)``#
    sleep for 2 seconds``result``=``a``+``b``cache``[``key``]``=``result``return``result`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you call this function for the first time, the `cache` is empty. The code
    will therefore execute the `else` clause with the artificial two seconds pause
    that mimics a slow calculation. After performing the calculation, it will add
    the result to the `cache` dictionary before returning the result. When you now
    call this function a second time with the same arguments and during the same Python
    session, it will find it in the `cache` and return it right away, without having
    to perform the slow calculation again. Caching a result based on its arguments
    is also called memoization. Accordingly, you will see the time difference when
    you call the function for the first and second time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``9``]:``%%``time``slow_sum``(``1``,``2``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Wall time: 2.01 s`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[9]: 3`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``10``]:``%%``time``slow_sum``(``1``,``2``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Wall time: 0 ns`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[10]: 3`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python has a built-in decorator called `lru_cache` that can make your life really
    easy and that you import from the `functools` module that is part of the standard
    library. `lru` stands for least recently used cache and means that it holds a
    maximum number of results (by default 128) before it gets rid of the oldest ones.
    We can use this with our Google Trends example from the last section. As long
    as we’re only querying historical values, we can safely cache the result. This
    will not only make multiple calls faster, but it will also decrease the amounts
    of requests that we send to Google, lowering the chance that Google blocks us—something
    that could happen if you send too many requests in a short time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the first few lines of the `get_interest_over_time` function with
    the required changes to apply caching:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from``functools``import``lru_cache`![](images/00031.jpg)`import``pandas``as``pd``from``pytrends.request``import``TrendReq``import``matplotlib.pyplot``as``plt``import``xlwings``as``xw``@lru_cache`![](images/00039.jpg)`@xw.func``(``call_in_wizard``=``False``)``@xw.arg``(``"mids"``,``xw``.``Range``,``doc``=``"Machine
    IDs: A range of max 5 cells"``)`![](images/00050.jpg)`@xw.arg``(``"start_date"``,``doc``=``"A
    date-formatted cell"``)``@xw.arg``(``"end_date"``,``doc``=``"A date-formatted
    cell"``)``def``get_interest_over_time``(``mids``,``start_date``,``end_date``):``"""Query
    Google Trends - replaces the Machine ID (mid) of     common programming languages
    with their human-readable     equivalent in the return value, e.g., instead of
    "/m/05z1_"     it returns "Python".     """``mids``=``mids``.``value`![](images/00067.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Import the `lru_cache` decorator.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use the decorator. The decorator has to be on top of the `xw.func` decorator.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, `mids` is a list. This creates a problem in this case as functions
    with lists as arguments can’t be cached. The underlying issue is that lists are
    mutable objects that can’t be used as keys in dictionaries; see [Appendix C](index_split_031.html#filepos1832059)
    for more information about mutable vs. immutable objects. Using the `xw.Range`
    converter allows us to retrieve `mids` as xlwings `range` object rather than as
    list, which solves our problem.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00067.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To make the rest of the code work again, we now need to get the values via the
    `value` property of the xlwings `range` object.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: CACHING WITH DIFFERENT VERSIONS OF PYTHON
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you are using a Python version below 3.8, you’ll have to use the decorator
    with parentheses like so: `@lru_cache()`. If you are using Python 3.9 or later,
    replace `@lru_cache` with `@cache`, which is the same as `@lru_cache(maxsize=None)`,
    i.e., the cache never gets rid of older values. You also need to import the `cache`
    decorator from `functools`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `xw.Range` converter can also be useful in other circumstances, for example,
    if you need to access the cell formulas instead of the values in your UDF. In
    the previous example, you could write `mids.formula` to access the formulas of
    the cells. You’ll find the complete example in the google_trends_cache folder
    within the udfs directory of the companion repository.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to tweak the performance of UDFs, let’s wrap this section
    up by introducing the `xw.sub` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: The Sub Decorator
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 10](index_split_026.html#filepos1439732), I showed you how to speed
    up the `RunPython` call by activating the Use UDF Server setting. If you are living
    in a Windows-only world, there is an alternative to the `RunPython`/`Use UDF Server`
    combination in the form of the `xw.sub` decorator. This will allow you to import
    your Python functions as Sub procedures into Excel, without having to manually
    write any `RunPython` calls. In Excel, you will need a Sub procedure to be able
    to attach it to a button—an Excel function, as you get it when using the `xw.func`
    decorator, won’t work. To try this out, create a new `quickstart` project called
    `importsub`. As usual, make sure to `cd` first into the directory where you want
    the project to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings quickstart importsub`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the File Explorer, navigate to the created importsub folder and open importsub.xlsm
    in Excel and importsub.py in VS Code, then decorate the `main` function with `@xw.sub`
    as shown in [Example 12-6](#filepos1796739).
  prefs: []
  type: TYPE_NORMAL
- en: Example 12-6\. importsub.py (excerpt)
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``@xw.sub``def``main``():``wb``=``xw``.``Book``.``caller``()``sheet``=``wb``.``sheets``[``0``]``if``sheet``[``"A1"``]``.``value``==``"Hello
    xlwings!"``:``sheet``[``"A1"``]``.``value``=``"Bye xlwings!"``else``:``sheet``[``"A1"``]``.``value``=``"Hello
    xlwings!"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the xlwings add-in, click on Import Functions before hitting Alt+F8 to see
    the available macros: in addition to the `SampleCall` that uses `RunPython`, you’ll
    now also see a macro called `main`. Select it and click the Run button—you’ll
    see the familiar greeting in cell A1\. You could now go ahead and assign the `main`
    macro to a button as we did in [Chapter 10](index_split_026.html#filepos1439732).
    While the `xw.sub` decorator can make your life easier on Windows, bear in mind
    that by using it, you lose cross-platform compatibility. With `xw.sub`, we have
    met all xlwings decorators—I have summarized them again in [Table 12-1](#filepos1801916).'
  prefs: []
  type: TYPE_NORMAL
- en: Table 12-1\. xlwings decorators
  prefs: []
  type: TYPE_NORMAL
- en: '|  Decorator  |  Description  |'
  prefs: []
  type: TYPE_TB
- en: '|   `xw.func` |  Put this decorator on top of all functions that you want to
    import into Excel as an Excel function.  |'
  prefs: []
  type: TYPE_TB
- en: '|   `xw.sub` |  Put this decorator on top of all functions that you want to
    import into Excel as an Excel Sub procedure.  |'
  prefs: []
  type: TYPE_TB
- en: '|   `xw.arg` |  Apply converters and options to arguments, e.g., add a docstring
    via the  `doc` argument or you can have a range arrive as DataFrame by providing
    `pd.DataFrame` as the first argument (this assumes that you have imported pandas
    as pd). |'
  prefs: []
  type: TYPE_TB
- en: '|   `xw.ret` |  Apply converters and options to return values, e.g., suppress
    a DataFrame’s index by providing  `index=False`. |'
  prefs: []
  type: TYPE_TB
- en: For more details on these decorators, have a look at the [xlwings documentation](https://oreil.ly/h-sT_).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: This chapter was about writing Python functions and importing them into Excel
    as UDFs, allowing you to call them via cell formulas. By working through the Google
    Trends case study, you learned how to influence the behavior of the function arguments
    and return values by using the `arg` and `ret` decorators, respectively. The last
    part showed you a few performance tricks and introduced the `xw.sub` decorator,
    which you can use as a `RunPython` replacement if you are exclusively working
    with Windows. The nice thing about writing UDFs in Python is that this allows
    you to replace long and complex cell formulas with Python code that will be easier
    to understand and maintain. My preferred way to work with UDFs is definitely to
    use pandas DataFrames with Excel’s new dynamic arrays, a combination that makes
    it easy to work with the sort of data we get from Google Trends, i.e., DataFrames
    with a dynamic number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'And that’s it—we have reached the end of the book! Thanks so much for your
    interest in my interpretation of a modern automation and data analysis environment
    for Excel! My idea was to introduce you to the world of Python and its powerful
    open source packages, allowing you to write Python code for your next project
    instead of having to deal with Excel’s own solutions like VBA or Power Query,
    thereby keeping a door open to easily move away from Excel if you need to. I hope
    I could give you a few hands-on examples to make the start easier. After reading
    this book, you now know how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Replace an Excel workbook with a Jupyter notebook and pandas code
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Batch process Excel workbooks by reading them with OpenPyXL, xlrd, pyxlsb, or
    xlwings and then consolidate them with pandas
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Produce Excel reports with either OpenPyXL, XlsxWriter, xlwt, or xlwings
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use Excel as a frontend and connect it to pretty much anything you want via
    xlwings, either by clicking a button or by writing a UDF
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Soon enough, however, you’ll want to move beyond the scope of this book. I
    invite you to check the [book’s home page](https://xlwings.org/book) from time
    to time for updates and additional material. In this spirit, here are a few ideas
    that you could explore on your own:'
  prefs: []
  type: TYPE_NORMAL
- en: Schedule the periodic run of a Python script using either the Task Scheduler
    on Windows or a cron job on macOS or Linux. You could, for example, create an
    Excel report every Friday based on data you consume from a REST API or a database.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a Python script that sends email alerts whenever the values in your Excel
    files satisfy a certain condition. Maybe that is when your account balance, consolidated
    from multiple workbooks, falls below a certain value, or when it shows a different
    value from what you expect based on your internal database.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Write code that finds errors in Excel workbooks: check for cell errors like
    `#REF!` or `#VALUE!` or logical errors like making sure that a formula is including
    all the cells it should. If you start tracking your mission-critical workbooks
    with a professional version control system like Git, you can even run these tests
    automatically whenever you commit a new version.'
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: If this book inspires you to automate your daily or weekly routine of downloading
    data and copy/pasting it into Excel, I couldn’t be any happier. Automation doesn’t
    just give you back time, it also reduces the chance of committing errors dramatically.
    If you have any feedback, please let me know about it! You can contact me via
    O’Reilly, by opening an issue on the [companion repository](https://oreil.ly/vVHmR)
    or on Twitter at [@felixzumstein](https://twitter.com/felixzumstein).
  prefs: []
  type: TYPE_NORMAL
- en: '[1  ](#filepos1654281) The Windows implementation uses a COM server (I’ve introduced
    the COM technology briefly in [Chapter 9](index_split_024.html#filepos1235764)).
    Since COM doesn’t exist on macOS, UDFs would have to be reimplemented from scratch,
    which is a lot of work and simply hasn’t been done yet.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Appendix A. Conda Environments
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 2](index_split_008.html#filepos96824), I introduced Conda environments
    by explaining that `(base)` at the beginning of an Anaconda Prompt stands for
    the currently active Conda environment with the name `base`. Anaconda requires
    you to always work in an activated environment, but the activation is done automatically
    for the `base` environment when you start the Anaconda Prompt on Windows or the
    Terminal on macOS. Working with Conda environments allows you to properly separate
    the dependencies of your projects: if you want to try out a newer version of a
    package like pandas without changing your `base` environment, you can do so in
    a separate Conda environment. In the first part of this appendix, I will walk
    you through the process of creating a Conda environment called `xl38` where we
    will install all packages in the version I used them to write this book. This
    will allow you to run the samples in this book as-is, even if some packages have
    released new versions with breaking changes in the meantime. In the second part,
    I will show you how to disable the auto activation of the `base` environment if
    you don’t like the default behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a New Conda Environment
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command on your Anaconda Prompt to create a new environment
    with the name `xl38` that uses Python 3.8:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda create --name xl38 python=3.8`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When hitting Enter, Conda will print what it is going to install into the new
    environment and asks you to confirm:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Proceed ([y]/n)?`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Hit Enter to confirm or type `n` if you want to cancel. Once the installation
    is done, activate your new environment like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda activate xl38` `(xl38)>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The environment name changed from `base` to `xl38` and you can now use Conda
    or pip to install packages into this new environment without impacting any of
    the other environments (as a reminder: only use pip if the package isn’t available
    via Conda). Let’s go ahead and install all packages from this book in the version
    I was using them. First, double-check that you are in the `xl38` environment,
    i.e., the Anaconda Prompt is showing `(xl38)`, then install the Conda packages
    like so (the following command should be typed in as a single command; the line
    breaks are only for display purposes):'
  prefs: []
  type: TYPE_NORMAL
- en: '`(xl38)>` `conda install lxml=4.6.1 matplotlib=3.3.2 notebook=6.1.4 openpyxl=3.0.5
                          pandas=1.1.3 pillow=8.0.1 plotly=4.14.1 flake8=3.8.4                      
    python-dateutil=2.8.1 requests=2.24.0 sqlalchemy=1.3.20                      
    xlrd=1.2.0 xlsxwriter=1.3.7 xlutils=2.0.0 xlwings=0.20.8                      
    xlwt=1.3.0`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Confirm the installation plan and finalize the environment by installing the
    two remaining dependencies with pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(xl38)>` `pip install pyxlsb==1.0.7 pytrends==4.7.3` `(xl38)>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: HOW TO USE THE XL38 ENVIRONMENT
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you would like to use the `xl38` environment rather than the `base` environment
    to work through the examples in this book, make sure to always have your `xl38`
    environment activated by running:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `conda activate xl38`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: That is, wherever I show the Anaconda Prompt as `(base)>`, you will want it
    to show `(xl38)>` instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To deactivate the environment again and get back to the `base` environment,
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(xl38)>` `conda deactivate` `(base)>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want to delete the environment completely, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda env remove --name xl38`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Instead of going through the steps manually to create the `xl38` environment,
    you can also take advantage of the environment file xl38.yml that I included in
    the conda folder of the companion repository. Running the following commands takes
    care of everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel\conda` `(base)>` `conda
    env create -f xl38.yml` `(base)>` `conda activate xl38` `(xl38)>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By default, Anaconda always activates the `base` environment when you open a
    Terminal on macOS or the Anaconda Prompt on Windows. If you don’t like this, you
    could disable auto activation as I’ll show you next.
  prefs: []
  type: TYPE_NORMAL
- en: Disable Auto Activation
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t want the `base` environment to be activated automatically whenever
    you fire up an Anaconda Prompt, you can disable it: this will require you to type
    `conda activate base` manually on a Command Prompt (Windows) or Terminal (macOS)
    before you are able to use Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, you will need to use the regular Command Prompt instead of the
    Anaconda Prompt. The following steps will enable the `conda` command in a normal
    Command Prompt. Make sure to replace the path in the first line with the path
    where Anaconda is installed on your system:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`>` `cd C:\Users\``username``\Anaconda3\condabin` `>` `conda init cmd.exe`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Your regular Command Prompt is now set up with Conda, so going forward you
    can activate the `base` environment like this:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`>` `conda activate base` `(base)>`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS, simply run the following command in your Terminal to disable auto
    activation:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `conda config --set auto_activate_base false`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you ever want to revert, run the same command again with `true` instead
    of `false`. Changes will come into effect after restarting the Terminal. Going
    forward, you will need to activate the `base` environment like this before you
    can use the `python` command again:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`>` `conda activate base` `(base)>`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Appendix B. Advanced VS Code Functionality
  prefs: []
  type: TYPE_NORMAL
- en: This appendix shows you how the debugger works in VS Code and how you can run
    Jupyter notebooks directly from within VS Code. The topics are independent of
    each other, so you may read them in any order.
  prefs: []
  type: TYPE_NORMAL
- en: Debugger
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve ever used the VBA debugger in Excel, I have good news for you: debugging
    with VS Code is a very similar experience. Let’s start by opening the file debugging.py
    from the companion repository in VS Code. Click into the margin to the left of
    line number 4 so that a red dot appears—this is your breakpoint where code execution
    will be paused. Now hit F5 to start debugging: the Command Panel will appear with
    a selection of debug configurations. Choose “Python File” to debug the active
    file and run the code until it hits the breakpoint. The line will be highlighted
    and code execution pauses, see [Figure B-1](#filepos1822749). While you debug,
    the status bar turns orange.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the Variables section doesn’t show up automatically on the left, make sure
    to click on the Run menu to see the values of the variables. Alternatively, you
    can also hover over a variable in the source code and get a tooltip with its value.
    At the top, you will see the Debug Toolbar that gives you access to the following
    buttons from left to right): Continue, Step Over, Step Into, Step Out, Restart,
    and Stop. When you hover over them, you will also see the keyboard shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-1\. VS Code with the debugger stopped at the breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what each of these buttons does:'
  prefs: []
  type: TYPE_NORMAL
- en: Continue
  prefs: []
  type: TYPE_NORMAL
- en: This continues to run the program until it either hits the next breakpoint or
    the end of the program. If it reaches the end of the program, the debugging process
    will stop.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step Over
  prefs: []
  type: TYPE_NORMAL
- en: The debugger will advance one line. Step Over means that the debugger will not
    visually step through lines of code that are not part of your current scope. For
    example, it will not step into the code of a function that you call line by line—but
    the function will still be called!
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step Into
  prefs: []
  type: TYPE_NORMAL
- en: If you have code that calls a function or class, etc., Step Into will cause
    the debugger to step into that function or class. If the function or class is
    in a different file, the debugger will open this file for you.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step Out
  prefs: []
  type: TYPE_NORMAL
- en: If you stepped into a function with Step Into, Step Out causes the debugger
    to return to the next higher level until eventually, you will be back on the highest
    level from where you called Step Into initially.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Restart
  prefs: []
  type: TYPE_NORMAL
- en: This will stop the current debug process and start a new one from the beginning.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop
  prefs: []
  type: TYPE_NORMAL
- en: This will stop the current debug process.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you know what each button does, click on Step Over to advance one line
    and see how variable `c` appears in the Variables section, then finish this debugging
    exercise by clicking on Continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you save the debugging configuration, the Command Panel will not show up
    and ask you about the configuration every time you hit F5: click on the Run icon
    in the Activity Bar, then click on “create a launch.json file.” This will cause
    the Command Panel to show up again and when you select “Python File,” it creates
    the launch.json file under a directory called .vscode. When you now hit F5, the
    debugger will start right away. If you need to change the configuration or want
    to get the Command Panel pop-up again, edit or delete the launch.json file in
    the .vscode directory.'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebooks in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: Instead of running your Jupyter notebooks in a web browser, you can also run
    them with VS Code directly. On top of that, VS Code offers a convenient Variable
    explorer as well as options to transform the notebook into standard Python files
    without losing the cell functionality. This makes it easier to use the debugger
    or to copy/paste cells between different notebooks. Let’s get started by running
    a notebook in VS Code!
  prefs: []
  type: TYPE_NORMAL
- en: Run Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Explorer icon on the Activity Bar and open ch05.ipynb from the companion
    repository. To continue, you will need to make the notebook a trusted one by clicking
    on Trust in the notification that pops up. The layout of the notebook looks a
    bit different from the one in the browser to match the rest of VS Code, but otherwise,
    it’s the same experience including all the keyboard shortcuts. Let’s run the first
    three cells via Shift+Enter. This will start the Jupyter notebook server if it
    isn’t running yet (you will see the status at the top right of the notebook).
    After running the cells, click on the calculator button in the menu at the top
    of the notebook: this will open the Variable explorer, in which you can see the
    values of all variables that currently exist, as in [Figure B-2](#filepos1828071).
    That is, you will only find variables from cells that have been run.'
  prefs: []
  type: TYPE_NORMAL
- en: SAVING JUPYTER NOTEBOOKS IN VS CODE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To save notebooks in VS Code, you need to use the Save button at the top of
    the notebook or hit Ctrl+S on Windows or Command-S on macOS. File > Save won’t
    work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00056.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-2\. Jupyter notebook Variable explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use data structures like nested lists, NumPy arrays, or DataFrames,
    you can double-click the variable: this will open the Data Viewer and give you
    a familiar spreadsheet-like view. [Figure B-3](#filepos1828717) shows the Data
    Viewer after double-clicking the `df` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00066.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-3\. Jupyter notebook Data Viewer
  prefs: []
  type: TYPE_NORMAL
- en: While VS Code allows you to run standard Jupyter notebook files, it also allows
    you to transform the notebooks into normal Python files—without losing your cells.
    Let’s see how it works!
  prefs: []
  type: TYPE_NORMAL
- en: Python Scripts with Code Cells
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Jupyter notebook cells in standard Python files, VS Code uses a special
    comment to denote cells: `# %%`. To convert an existing Jupyter notebook, open
    it and hit the Export As button in the menu at the top of the notebook; see [Figure B-2](#filepos1828071).
    This will allow you to select “Python File” from the command palette. However,
    instead of converting an existing file, let’s create a new file that we call cells.py
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '`# %%``3``+``4``# %% [markdown]``# # This is a Title``#``# Some markdown content`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Markdown cells need to start with `# %% [markdown]` and require the whole cell
    to be marked as comment. If you want to run such a file as notebook, click on
    the “Run Below” link that appears when you hover over the first cell. This will
    open up the Python Interactive Window to the right, as shown in [Figure B-4](#filepos1831240).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00074.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-4\. Python Interactive Window
  prefs: []
  type: TYPE_NORMAL
- en: The Python Interactive Window is again shown as notebook. To export your file
    in the ipynb format, click the Save icon (Export as Jupyter notebook) at the top
    of the Python Interactive Window. The Python Interactive Window also offers you
    a cell at the bottom from where you can execute code interactively. Using regular
    Python files as opposed to Jupyter notebooks allows you to use the VS Code debugger
    and makes working with version control easier as output cells, which typically
    add a lot of noise between versions, are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix C. Advanced Python Concepts
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, we’re taking a closer look at the following three topics:
    classes and objects, time-zone-aware datetime objects, and mutable vs. immutable
    objects. The topics are independent of each other, so you may read them in any
    order.'
  prefs: []
  type: TYPE_NORMAL
- en: Classes and Objects
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will write our own class to get a better understanding
    of how classes and objects are related. Classes define new types of objects: a
    class behaves like a springform you use to bake a cake. Depending on the ingredients
    you use, you get a different cake, for example, a chocolate cake or a cheesecake.
    The process of getting a cake (the object) out of the springform (the class) is
    called instantiation, which is why objects are also called class instances. Whether
    chocolate or cheesecake, they are both a type of cake: classes allow you to define
    new data types that keep related data (attributes) and functions (methods) together
    and therefore help you to structure and organize your code. Let me now return
    to the car racing game example from [Chapter 3](index_split_010.html#filepos178328)
    to define our own class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``1``]:``class``Car``:``def` `__init__``(``self``,``color``,``speed``=``0``):``self``.``color``=``color``self``.``speed``=``speed``def``accelerate``(``self``,``mph``):``self``.``speed``+=``mph`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This is a simple car class with two methods. Methods are functions that are
    part of a class definition. This class has one regular method called `accelerate`.
    This method will change the data (`speed`) of an instance of this class. It also
    has a special method that starts and ends with double underscores called `__init__`.
    It will be called automatically by Python when an object is initialized to attach
    some initial data to the object. The first argument of every method represents
    the instance of the class and is called `self` by convention. This will get clearer
    when you see how you use the `Car` class. First, let’s instantiate two cars. You
    are doing this in the same way as you are calling a function: call the class by
    adding parentheses and by providing the arguments of the `__init__` method. You
    never provide anything for `self`, as Python will take care of that. In this sample,
    `self` will be `car1` or `car2`, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``2``]:``# Let''s instantiate two car objects``car1``=``Car``(``"red"``)``car2``=``Car``(``color``=``"blue"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you call a class, you are really calling the `__init__` function, which
    is why everything with regard to function arguments applies here as well: for
    `car1`, we provide the argument as positional argument, while for `car2`, we are
    using keyword arguments. After instantiating the two car objects from the `Car`
    class, we’ll have a look at their attributes and call their methods. As we will
    see, after accelerating `car1`, the speed of `car1` is changed, but it is unchanged
    for `car2` as the two objects are independent of each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``3``]:``# By default, an object prints its memory location``car1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[3]: <__main__.Car at 0x7fea812e3890>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``4``]:``# Attributes give you access to the data of an object``car1``.``color`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[4]: ''red''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``5``]:``car1``.``speed`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[5]: 0`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``6``]:``# Calling the accelerate method on car1``car1``.``accelerate``(``20``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``7``]:``# The speed attribute of car1 changed``car1``.``speed`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[7]: 20`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``8``]:``# The speed attribute of car2 remained the same``car2``.``speed`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[8]: 0`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Python also allows you to change attributes directly without having to use
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``9``]:``car1``.``color``=``"green"`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``10``]:``car1``.``color`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[10]: ''green''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``11``]:``car2``.``color``# unchanged`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[11]: ''blue''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To summarize: classes define the attributes and methods of objects. Classes
    allow you to group related functions (“methods”) and data (“attributes”) together
    so that they can conveniently be accessed via dot notation: `myobject.attribute`
    or `myobject.method()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Time-Zone-Aware datetime Objects
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 3](index_split_010.html#filepos178328), we briefly looked at time-zone-naive
    `datetime` objects. If time zone is of importance, you usually work in the UTC
    time zone and only transform to local time zones for display purposes. UTC stands
    for Coordinated Universal Time and is the successor of Greenwich Mean Time (GMT).
    When you work with Excel and Python, you may want to turn naive timestamps, as
    delivered by Excel, into time-zone-aware `datetime` objects. For time-zone support
    in Python, you can use the dateutil package, which isn’t part of the standard
    library but comes preinstalled with Anaconda. The following samples show a few
    common operations when working with `datetime` objects and time zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``12``]:``import``datetime``as``dt``from``dateutil``import``tz`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``13``]:``# Time-zone-naive datetime object``timestamp``=``dt``.``datetime``(``2020``,``1``,``31``,``14``,``30``)``timestamp``.``isoformat``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[13]: ''2020-01-31T14:30:00''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``14``]:``# Time-zone-aware datetime object``timestamp_eastern``=``dt``.``datetime``(``2020``,``1``,``31``,``14``,``30``,``tzinfo``=``tz``.``gettz``(``"US/Eastern"``))``#
    Printing in isoformat makes it easy to``# see the offset from UTC``timestamp_eastern``.``isoformat``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[14]: ''2020-01-31T14:30:00-05:00''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``15``]:``# Assign a time zone to a naive datetime object``timestamp_eastern``=``timestamp``.``replace``(``tzinfo``=``tz``.``gettz``(``"US/Eastern"``))``timestamp_eastern``.``isoformat``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[15]: ''2020-01-31T14:30:00-05:00''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``16``]:``# Convert from one time zone to another.``# Since the UTC time
    zone is so common,``# there is a shortcut: tz.UTC``timestamp_utc``=``timestamp_eastern``.``astimezone``(``tz``.``UTC``)``timestamp_utc``.``isoformat``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[16]: ''2020-01-31T19:30:00+00:00''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``17``]:``# From time-zone-aware to naive``timestamp_eastern``.``replace``(``tzinfo``=``None``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[17]: datetime.datetime(2020, 1, 31, 14, 30)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``18``]:``# Current time without time zone``dt``.``datetime``.``now``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[18]: datetime.datetime(2021, 1, 3, 11, 18, 37, 172170)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``19``]:``# Current time in UTC time zone``dt``.``datetime``.``now``(``tz``.``UTC``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[19]: datetime.datetime(2021, 1, 3, 10, 18, 37, 176299, tzinfo=tzutc())`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TIME ZONES WITH PYTHON 3.9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Python 3.9 added proper time zone support to the standard library in the form
    of the `timezone` module. Use it to replace the `tz.gettz` calls from `dateutil`:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`from``zoneinfo``import``ZoneInfo``timestamp_eastern``=``dt``.``datetime``(``2020``,``1``,``31``,``14``,``30``,``tzinfo``=``ZoneInfo``(``"US/Eastern"``))`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mutable vs. Immutable Python Objects
  prefs: []
  type: TYPE_NORMAL
- en: In Python, objects that can change their values are called mutable and those
    that can’t are called immutable. [Table C-1](#filepos1865771) shows how the different
    data types qualify.
  prefs: []
  type: TYPE_NORMAL
- en: Table C-1\. Mutable and immutable data types
  prefs: []
  type: TYPE_NORMAL
- en: '|  Mutability  |  Data Types  |'
  prefs: []
  type: TYPE_TB
- en: '|  mutable  |  lists, dictionaries, sets  |'
  prefs: []
  type: TYPE_TB
- en: '|  immutable  |  integers, floats, booleans, strings, datetime, tuples  |'
  prefs: []
  type: TYPE_TB
- en: 'Knowing about the difference is important as mutable objects may behave differently
    from what you are used to from other languages, including VBA. Have a look at
    the following VBA snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dim``a``As``Variant``,``b``As``Variant``a``=``Array``(``1``,``2``,``3``)``b``=``a``a``(``1``)``=``22``Debug``.``Print``a``(``0``)``&``",
    "``&``a``(``1``)``&``", "``&``a``(``2``)``Debug``.``Print``b``(``0``)``&``", "``&``b``(``1``)``&``",
    "``&``b``(``2``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This prints the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1, 22, 3 1, 2, 3`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now let’s do the same example in Python with a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``20``]:``a``=``[``1``,``2``,``3``]``b``=``a``a``[``1``]``=``22``print``(``a``)``print``(``b``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`[1, 22, 3] [1, 22, 3]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'What happened here? In Python, variables are names that you “attach” to an
    object. By doing `b = a`, you attach both names to the same object, the list `[1,
    2, 3]`. All variables attached to that object will, therefore, show the changes
    to the list. This only happens with mutable objects, though: if you would replace
    the list with an immutable object like a tuple, changing `a` would not change
    `b`. If you want a mutable object like `b` to be independent of changes in `a`,
    you have to explicitly copy the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``21``]:``a``=``[``1``,``2``,``3``]``b``=``a``.``copy``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``22``]:``a`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[22]: [1, 2, 3]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``23``]:``b`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[23]: [1, 2, 3]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``24``]:``a``[``1``]``=``22``# Changing "a"...`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``25``]:``a`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[25]: [1, 22, 3]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``26``]:``b``# ...doesn''t affect "b"`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[26]: [1, 2, 3]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By using a list’s `copy` method, you are creating a shallow copy: you will
    get a copy of the list, but if the list contains mutable elements, these will
    still be shared. If you want to copy all elements recursively, you need to make
    a deep copy by using the `copy` module from the standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``27``]:``import``copy``b``=``copy``.``deepcopy``(``a``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s now look at what happens when you use mutable objects as function arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Calling Functions with Mutable Objects as Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'If you come from VBA, you are probably used to marking function arguments as
    pass-by-reference (`ByRef`) or pass-by-value (`ByVal`): when you pass a variable
    to a function as argument, the function will have the ability to change it (`ByRef`)
    or will work on a copy of the values (`ByVal`), thus leaving the original variable
    untouched. `ByRef` is the default in VBA. Consider the following function in VBA:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Function``increment``(``ByRef``x``As``Integer``)``As``Integer``x``=``x``+``1``increment``=``x``End``Function`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Then, call the function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sub``call_increment``()``Dim``a``As``Integer``a``=``1``Debug``.``Print``increment``(``a``)``Debug``.``Print``a``End``Sub`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This will print the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 2`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'However, if you change `ByRef` in the `increment` function to `ByVal`, it will
    print:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2 1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'How does this work in Python? When you pass around variables, you pass around
    names that point to objects. This means that the behavior depends on whether the
    object is mutable or not. Let’s first use an immutable object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``28``]:``def``increment``(``x``):``x``=``x``+``1``return``x`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``29``]:``a``=``1``print``(``increment``(``a``))``print``(``a``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`2 1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now let’s repeat the sample with a mutable object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``30``]:``def``increment``(``x``):``x``[``0``]``=``x``[``0``]``+``1``return``x`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``31``]:``a``=``[``1``]``print``(``increment``(``a``))``print``(``a``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`[2] [2]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If the object is mutable and you would like to leave the original object unchanged,
    you will need to pass in a copy of the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``32``]:``a``=``[``1``]``print``(``increment``(``a``.``copy``()))``print``(``a``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`[2] [1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Another case to watch out for is the use of mutable objects as default arguments
    in function definitions—let’s see why!
  prefs: []
  type: TYPE_NORMAL
- en: Functions with Mutable Objects as Default Arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'When you write functions, you normally shouldn’t use mutable objects as default
    arguments. The reason is that the value of default arguments is evaluated only
    once as part of the function definition, not every time when the function is called.
    Therefore, using mutable objects as default arguments can lead to unexpected behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``33``]:``# Don''t do this:``def``add_one``(``x``=``[]):``x``.``append``(``1``)``return``x`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``34``]:``add_one``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[34]: [1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``35``]:``add_one``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[35]: [1, 1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you want to use an empty list as a default argument, do this instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``36``]:``def``add_one``(``x``=``None``):``if``x``is``None``:``x``=``[]``x``.``append``(``1``)``return``x`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``37``]:``add_one``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[37]: [1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``38``]:``add_one``()`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[38]: [1]`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Index
  prefs: []
  type: TYPE_NORMAL
- en: Symbols
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '%%time cell magic, [Reading sheets in parallel](index_split_022.html#filepos1147874)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '%%timeit cell magic, [Reading sheets in parallel](index_split_022.html#filepos1148960)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: absolute paths, [Anaconda Prompt](index_split_008.html#filepos112263), [Backend](index_split_027.html#filepos1638593)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: activating Conda environments, [Create a New Conda Environment](index_split_029.html#filepos1815162)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveX controls, [Cross-Platform Compatibility](index_split_007.html#filepos92381),
    [RunPython Function](index_split_026.html#filepos1464639)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity Bar (VS Code), [Installation and Configuration](index_split_009.html#filepos161361)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add-ins (Excel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'custom, [Standalone Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1477721),
    [UDF Quickstart](index_split_028.html#filepos1678327)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing xlwings, [Excel Add-in](index_split_026.html#filepos1442113)-[Excel
    Add-in](index_split_026.html#filepos1447961)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: adding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns to DataFrame, [Setting data by adding a new column](index_split_015.html#filepos592331)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: elements to lists, [Lists](index_split_011.html#filepos256618)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: packages to Python Package Tracker, [What We Will Build](index_split_027.html#filepos1489144)-[What
    We Will Build](index_split_027.html#filepos1492009)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: add_package function (Python Package Tracker) example, [Backend](index_split_027.html#filepos1621394)-[Backend](index_split_027.html#filepos1633823)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: agg method (pandas), [Grouping](index_split_016.html#filepos698880)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aggfunc function (pandas), [Pivoting and Melting](index_split_016.html#filepos708364)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: aliases for modules, [Modules and the import Statement](index_split_012.html#filepos388542)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altair, [Plotly](index_split_016.html#filepos739626)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: components of, [Development Environment](index_split_008.html#filepos98339)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda (see Conda)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [Installation](index_split_008.html#filepos99940)-[Installation](index_split_008.html#filepos101307)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Development Environment](index_split_008.html#filepos97439)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda Prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: commands, list of, [Anaconda Prompt](index_split_008.html#filepos106145)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: interactive Python session
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ending, [Python REPL: An Interactive Python Session](index_split_008.html#filepos118780)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'starting, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115018)-[Python
    REPL: An Interactive Python Session](index_split_008.html#filepos118983)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: long file paths, [Running a Python Script](index_split_009.html#filepos170243)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'notation, [Python REPL: An Interactive Python Session](index_split_008.html#filepos116148)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operational overview, [Anaconda Prompt](index_split_008.html#filepos101486)-[Anaconda
    Prompt](index_split_008.html#filepos114837)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Development Environment](index_split_008.html#filepos97588)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python scripts, running, [Running a Python Script](index_split_009.html#filepos168744)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in macOS, [Anaconda Prompt](index_split_008.html#filepos104346)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Windows, [Anaconda Prompt](index_split_008.html#filepos103402)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code, running, [Running a Python Script](index_split_009.html#filepos165226)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings CLI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: addin install command, [Excel Add-in](index_split_026.html#filepos1442590)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Excel Add-in](index_split_026.html#filepos1444887)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command, [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: antivirus software, xlwings installation and, [Excel Add-in](index_split_026.html#filepos1444759)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs (application programming interfaces), [Web APIs](index_split_027.html#filepos1492910)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: app object (xlwings), [The Excel Object Model](index_split_024.html#filepos1252360),
    [The Excel Object Model](index_split_024.html#filepos1296280), [App properties](index_split_025.html#filepos1428002)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: append method (OpenPyXL), [Writing with OpenPyXL](index_split_022.html#filepos1126427)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AppleScript, [xlwings Foundations](index_split_025.html#filepos1411927)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application programming interfaces (APIs), [Web APIs](index_split_027.html#filepos1492910)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application structure (Python Package Tracker), [Application Structure](index_split_027.html#filepos1601418)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: backend, [Backend](index_split_027.html#filepos1620020)-[Backend](index_split_027.html#filepos1644241)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging, [Debugging](index_split_027.html#filepos1644656)-[Debugging](index_split_027.html#filepos1651460)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: frontend, [Frontend](index_split_027.html#filepos1606230)-[Frontend](index_split_027.html#filepos1619827)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: applications, layers of, [Separation of concerns](index_split_007.html#filepos41940)-[Separation
    of concerns](index_split_007.html#filepos45911)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: applymap method (pandas), [Applying a Function](index_split_015.html#filepos641087)-[Applying
    a Function](index_split_015.html#filepos649303)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arange function (NumPy), [Useful Array Constructors](index_split_014.html#filepos471142)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: argument decorators (xlwings), [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1687455),
    [The Sub Decorator](index_split_028.html#filepos1801826)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arguments, mutable objects as, [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: on DataFrames, [Arithmetic Operations](index_split_015.html#filepos617369)-[Arithmetic
    Operations](index_split_015.html#filepos633672)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: on NumPy arrays, [Vectorization and Broadcasting](index_split_014.html#filepos448254)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operators (pandas), corresponding methods for, [Arithmetic Operations](index_split_015.html#filepos625775)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array ranges, [Useful Array Constructors](index_split_014.html#filepos471142)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array-based formulas (xlwings), [Minimize cross-application calls](index_split_028.html#filepos1764379)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays (NumPy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: broadcasting, [Vectorization and Broadcasting](index_split_014.html#filepos451025)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: constructors, [Useful Array Constructors](index_split_014.html#filepos470880)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data analysis issues in, [Conclusion](index_split_014.html#filepos481110)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data types, [NumPy Array](index_split_014.html#filepos445451)-[NumPy Array](index_split_014.html#filepos447897)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: getting and setting elements, [Getting and Setting Array Elements](index_split_014.html#filepos463404)-[Getting
    and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operational overview, [NumPy Array](index_split_014.html#filepos434881)-[NumPy
    Array](index_split_014.html#filepos448083)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: universal functions (ufuncs), [Universal Functions (ufunc)](index_split_014.html#filepos454337)-[Universal
    Functions (ufunc)](index_split_014.html#filepos462582)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: vectorization, [Vectorization and Broadcasting](index_split_014.html#filepos448254)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views versus copies, [View vs. Copy](index_split_014.html#filepos475259)-[View
    vs. Copy](index_split_014.html#filepos480562)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: asfreq method (pandas), [Resampling](index_split_017.html#filepos850558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Attributes and methods](index_split_011.html#filepos187275), [Classes
    and Objects](index_split_031.html#filepos1833311)-[Classes and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: augmented assignment notation, [The for and while Loops](index_split_012.html#filepos346050)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: auto activation of Conda environments, disabling, [Disable Auto Activation](index_split_029.html#filepos1818091)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: autocomplete, [Visual Studio Code](index_split_009.html#filepos155542)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'autofit method (xlwings), [Case Study (Re-Revisited): Excel Reporting](index_split_025.html#filepos1409291)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: automation in Excel (see xlwings)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: backends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Frontend](index_split_027.html#filepos1606388)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python Package Tracker, [Backend](index_split_027.html#filepos1620020)-[Backend](index_split_027.html#filepos1644241)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: best practices for programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DRY principle, [DRY principle](index_split_007.html#filepos46294)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: separation of concerns, [Separation of concerns](index_split_007.html#filepos41610)-[Separation
    of concerns](index_split_007.html#filepos45911)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: testing, [Testing](index_split_007.html#filepos48860)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: version control, [Version control](index_split_007.html#filepos51713)-[Version
    control](index_split_007.html#filepos57576)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: big data, [Preface](index_split_003.html#filepos8884), [Limitations with pandas](index_split_017.html#filepos860803),
    [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading sheets
    in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binder, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos152085)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bokeh, [Plotly](index_split_016.html#filepos739170)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Book class (xlwings), [The Excel Object Model](index_split_024.html#filepos1256174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: book object (xlwings), [The Excel Object Model](index_split_024.html#filepos1256174)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: books collection (xlwings), [The Excel Object Model](index_split_024.html#filepos1310200)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bool constructor, [Booleans](index_split_011.html#filepos213851)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean data type, [Booleans](index_split_011.html#filepos205063)-[Booleans](index_split_011.html#filepos217752),
    [The read_excel Function and ExcelFile Class](index_split_019.html#filepos891785)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean indexing (pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting data by, [Selecting by boolean indexing](index_split_015.html#filepos549780)-[Selecting
    by boolean indexing](index_split_015.html#filepos567453)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: setting data by, [Setting data by boolean indexing](index_split_015.html#filepos582259)-[Setting
    data by boolean indexing](index_split_015.html#filepos589159)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean operators, [Booleans](index_split_011.html#filepos205160), [Selecting
    by boolean indexing](index_split_015.html#filepos554159)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: break statement, [The for and while Loops](index_split_012.html#filepos335412)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: breakpoints (VS Code), setting, [Debugging UDFs](index_split_028.html#filepos1758108)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: broadcasting, [Vectorization and Broadcasting](index_split_014.html#filepos451025)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983), [Arithmetic Operations](index_split_015.html#filepos628153)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: built-in converters (xlwings), [Converters and Options](index_split_025.html#filepos1340690)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: built-in options for range object (xlwings), [Converters and Options](index_split_025.html#filepos1345217)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: business intelligence (see Power BI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: business layer, [Separation of concerns](index_split_007.html#filepos44149)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ByRef function arguments (VBA), [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882872)-[Calling
    Functions with Mutable Objects as Arguments](index_split_031.html#filepos1887586)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ByVal function arguments (VBA), [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882872)-[Calling
    Functions with Mutable Objects as Arguments](index_split_031.html#filepos1887586)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: cache decorator, [Caching](index_split_028.html#filepos1793985)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: caching, [Caching](index_split_028.html#filepos1775539)-[Caching](index_split_028.html#filepos1794980)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calculations, separate layer for, [Separation of concerns](index_split_007.html#filepos45452)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: calling functions, [Functions](index_split_011.html#filepos185990), [Calling
    functions](index_split_012.html#filepos370297), [Calling Functions with Mutable
    Objects as Arguments](index_split_031.html#filepos1882799)-[Functions with Mutable
    Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: capitalize method (pandas), [Working with Text Columns](index_split_015.html#filepos634661)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cascading Style Sheets (CSS), [Formatting a DataFrame’s data part](index_split_022.html#filepos1222109)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case statement (VBA), [Dictionaries](index_split_011.html#filepos282660)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: case studies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Excel reporting, [Case Study: Excel Reporting](index_split_019.html#filepos864531)-[Case
    Study: Excel Reporting](index_split_019.html#filepos885516), [Case Study (Revisited):
    Excel Reporting](index_split_022.html#filepos1232433), [Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1400987)-[Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1409826)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Trends case study
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames and dynamic arrays, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging UDFs, [Debugging UDFs](index_split_028.html#filepos1755260)-[Debugging
    UDFs](index_split_028.html#filepos1760605)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: explanation of Google Trends, [Introduction to Google Trends](index_split_028.html#filepos1680082)-[Introduction
    to Google Trends](index_split_028.html#filepos1682295)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching data, [Fetching Data from Google Trends](index_split_028.html#filepos1714798)-[Fetching
    Data from Google Trends](index_split_028.html#filepos1741590)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting data, [Plotting with UDFs](index_split_028.html#filepos1741829)-[Plotting
    with UDFs](index_split_028.html#filepos1754939)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Package Tracker
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: adding packages, [What We Will Build](index_split_027.html#filepos1489144)-[What
    We Will Build](index_split_027.html#filepos1492009)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: application structure, [Application Structure](index_split_027.html#filepos1601418)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: backend, [Backend](index_split_027.html#filepos1620020)-[Backend](index_split_027.html#filepos1644241)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: databases, [Databases](index_split_027.html#filepos1515417)-[SQL injection](index_split_027.html#filepos1579942)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging, [Debugging](index_split_027.html#filepos1644656)-[Debugging](index_split_027.html#filepos1651460)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: error handling, [Exceptions](index_split_027.html#filepos1580257)-[Exceptions](index_split_027.html#filepos1601081)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: frontend, [Frontend](index_split_027.html#filepos1606230)-[Frontend](index_split_027.html#filepos1619827)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: web APIs, [Web APIs](index_split_027.html#filepos1492808)-[Web APIs](index_split_027.html#filepos1515072)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cd command, [Anaconda Prompt](index_split_008.html#filepos111447)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cell formatting (xlwings), clearing, [How to Work Around Missing Functionality](index_split_025.html#filepos1429624)-[How
    to Work Around Missing Functionality](index_split_025.html#filepos1435920)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cell looping, [The excel.py Module](index_split_021.html#filepos974268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cells (Jupyter notebooks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: edit mode versus command mode, [Edit vs. Command Mode](index_split_009.html#filepos140230)-[Edit
    vs. Command Mode](index_split_009.html#filepos145012)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python scripts, [Python Scripts with Code Cells](index_split_030.html#filepos1829327)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operational overview, [Notebook Cells](index_split_009.html#filepos134675)-[Notebook
    Cells](index_split_009.html#filepos140068)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: output, [Notebook Cells](index_split_009.html#filepos137198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: run order, [Run Order Matters](index_split_009.html#filepos145168)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: chaining indexing and slicing operations, [Slicing](index_split_011.html#filepos240871),
    [Getting and Setting Array Elements](index_split_014.html#filepos463605)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cell types (Jupyter notebooks), [Notebook Cells](index_split_009.html#filepos138341)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: directories, [Anaconda Prompt](index_split_008.html#filepos111447)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list separators (Excel), [The Excel Object Model](index_split_024.html#filepos1254107)-[The
    Excel Object Model](index_split_024.html#filepos1255983)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: to parent directory, [Anaconda Prompt](index_split_008.html#filepos112850)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: charts (Excel), [Pivoting and Melting](index_split_016.html#filepos716676)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (see also plots)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in OpenPyXL, [Writing with OpenPyXL](index_split_021.html#filepos996317)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in xlwings, [Excel charts](index_split_025.html#filepos1368049)-[Excel
    charts](index_split_025.html#filepos1374395)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: class inheritance, [Modern Language Features](index_split_007.html#filepos89951)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: classes, [Attributes and methods](index_split_011.html#filepos188185)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiation, [The datetime Class](index_split_012.html#filepos394507), [Classes
    and Objects](index_split_031.html#filepos1833058)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: objects and, [Classes and Objects](index_split_031.html#filepos1832657)-[Classes
    and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: clearing cell formatting (xlwings), [How to Work Around Missing Functionality](index_split_025.html#filepos1429624)-[How
    to Work Around Missing Functionality](index_split_025.html#filepos1435920)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cloud providers for Jupyter notebooks, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos151042)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code blocks, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code cells (Jupyter notebooks), [Notebook Cells](index_split_009.html#filepos137960)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code command (VS Code), [Running a Python Script](index_split_009.html#filepos165226)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collections (xlwings)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: charts (Excel), creating, [Excel charts](index_split_025.html#filepos1368049)-[Excel
    charts](index_split_025.html#filepos1374395)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: defined names (Excel), creating, [Defined names](index_split_025.html#filepos1390078)-[Defined
    names](index_split_025.html#filepos1400526)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pictures (Excel), Matplotlib plots as, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [The Excel Object Model](index_split_024.html#filepos1252253)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: colors, hexadecimal values for, [Writing with OpenPyXL](index_split_021.html#filepos1032314)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns (pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding to DataFrame, [Setting data by adding a new column](index_split_015.html#filepos592331)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for DataFrames, [Columns](index_split_015.html#filepos512954)-[Columns](index_split_015.html#filepos524119),
    [Formatting a DataFrame’s index and headers](index_split_022.html#filepos1170468)-[Formatting
    a DataFrame’s index and headers](index_split_022.html#filepos1205120)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting, [Selecting by label](index_split_015.html#filepos537621)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: COM (Component Object Model), [xlwings Foundations](index_split_025.html#filepos1411455)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combining DataFrames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concatenation, [Concatenating](index_split_016.html#filepos653577)-[Concatenating](index_split_016.html#filepos667519)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: joining, [Joining and Merging](index_split_016.html#filepos667765)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: merging, [Joining and Merging](index_split_016.html#filepos682873)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: command history, scrolling through, [Anaconda Prompt](index_split_008.html#filepos113245)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: command mode (Jupyter notebooks), [Edit vs. Command Mode](index_split_009.html#filepos140230)-[Edit
    vs. Command Mode](index_split_009.html#filepos145012)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command Palette (VS Code), [Installation and Configuration](index_split_009.html#filepos163380)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command Prompt (Windows), [Anaconda Prompt](index_split_008.html#filepos102144)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging with, [Debugging](index_split_027.html#filepos1650611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation of Conda environment, [Disable Auto Activation](index_split_029.html#filepos1818813)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: commands in Anaconda Prompt, list of, [Anaconda Prompt](index_split_008.html#filepos106145)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: comments in Python, [Mathematical operators](index_split_011.html#filepos201944)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complex data type, [Numeric Types](index_split_011.html#filepos194226)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: composite keys (databases), [The Package Tracker database](index_split_027.html#filepos1527951)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concat function (pandas), [Concatenating](index_split_016.html#filepos653577)-[Concatenating](index_split_016.html#filepos667519),
    [Rebasing and Correlation](index_split_017.html#filepos831244)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: concatenating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, [Concatenating](index_split_016.html#filepos653577)-[Concatenating](index_split_016.html#filepos667519)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists, [Lists](index_split_011.html#filepos246001)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strings, [Strings](index_split_011.html#filepos218479)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: tuples, [Tuples](index_split_011.html#filepos288158)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Conda, [Package Managers: Conda and pip](index_split_008.html#filepos119343)-[Package
    Managers: Conda and pip](index_split_008.html#filepos127083)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'commands, [Package Managers: Conda and pip](index_split_008.html#filepos120708)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: environments, [Conda Environments](index_split_008.html#filepos127438)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [Create a New Conda Environment](index_split_029.html#filepos1812140)-[Create
    a New Conda Environment](index_split_029.html#filepos1817881)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation, [Disable Auto Activation](index_split_029.html#filepos1818091)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Conda Environments](index_split_029.html#filepos1811202)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pip versus, [Package Managers: Conda and pip](index_split_008.html#filepos120576)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [The if Statement and Conditional Expressions](index_split_012.html#filepos314525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional formatting in Python Package Tracker, [Frontend](index_split_027.html#filepos1615600)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration hierarchy for xlwings, [Configuration Hierarchy](index_split_026.html#filepos1478189)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring VS Code, [Installation and Configuration](index_split_009.html#filepos160636)-[Installation
    and Configuration](index_split_009.html#filepos164899)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connections to databases, [Database connections](index_split_027.html#filepos1529652)-[Database
    connections](index_split_027.html#filepos1537920)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constant memory (XlsxWriter), [Writing with XlsxWriter](index_split_022.html#filepos1130401)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: constructors for arrays (NumPy), [Useful Array Constructors](index_split_014.html#filepos470880)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: context managers, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos910651)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continue button (VS Code debugger), [Debugger](index_split_030.html#filepos1823390)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: continue statement, [The for and while Loops](index_split_012.html#filepos337705)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: control flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: code blocks, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [The if Statement and Conditional Expressions](index_split_012.html#filepos314525)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos355651)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for loops, [The for and while Loops](index_split_012.html#filepos316683)-[The
    for and while Loops](index_split_012.html#filepos341967)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if statements, [The if Statement and Conditional Expressions](index_split_012.html#filepos306285)-[The
    if Statement and Conditional Expressions](index_split_012.html#filepos316429)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos347118)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pass statement, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: set comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos358997)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: while loops, [The for and while Loops](index_split_012.html#filepos343907)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: converters (xlwings), [Converters and Options](index_split_025.html#filepos1340690)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data types with excel.py module, [The excel.py Module](index_split_021.html#filepos973831)-[The
    excel.py Module](index_split_021.html#filepos977785)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices to columns (pandas), [Index](index_split_015.html#filepos502052)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: objects to boolean data type, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos891785)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strings to datetime data type, [Creating a DatetimeIndex](index_split_017.html#filepos783176)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Coordinated Universal Time (UTC), [Working with Time Zones](index_split_017.html#filepos805006),
    [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1848164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copies (DataFrames)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: returned by methods, [Index](index_split_015.html#filepos506311)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views versus, [View vs. Copy](index_split_015.html#filepos649623)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: copies (NumPy), views versus, [View vs. Copy](index_split_014.html#filepos475259)-[View
    vs. Copy](index_split_014.html#filepos480562)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: copy method, shallow versus deep copies, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1881031)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: corr method (pandas), [Rebasing and Correlation](index_split_017.html#filepos838567)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: correlation in time series analysis, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: counter variables in loops, [The for and while Loops](index_split_012.html#filepos340077)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: COVID-19 test results, delayed reporting, [Excel in the News](index_split_007.html#filepos39115)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU times, [Reading sheets in parallel](index_split_022.html#filepos1148285)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cross-application calls (xlwings), minimizing, [Minimize cross-application calls](index_split_025.html#filepos1416834),
    [Minimize cross-application calls](index_split_028.html#filepos1762196)-[Minimize
    cross-application calls](index_split_028.html#filepos1770595)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cross-platform compatibility, [Cross-Platform Compatibility](index_split_007.html#filepos90342)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSE arrays (Excel), [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1695089)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS (Cascading Style Sheets), [Formatting a DataFrame’s data part](index_split_022.html#filepos1222109)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exporting DataFrame data as, [Exporting CSV Files](index_split_016.html#filepos745826)-[Exporting
    CSV Files](index_split_016.html#filepos748395)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing to DataFrames, [Importing CSV Files](index_split_016.html#filepos748628)-[Importing
    CSV Files](index_split_016.html#filepos764876)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cuDF, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: current directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Windows, listing files in, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in macOS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: listing files in, [Anaconda Prompt](index_split_008.html#filepos110600)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: viewing full path, [Anaconda Prompt](index_split_008.html#filepos105254)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'custom add-ins (xlwings), [Standalone Workbooks: Getting Rid of the xlwings
    Add-in](index_split_026.html#filepos1477721), [UDF Quickstart](index_split_028.html#filepos1678327)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: custom functions (see UDFs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Dask, [Limitations with pandas](index_split_017.html#filepos860975)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data alignment (pandas), [Data Analysis with pandas](index_split_015.html#filepos483705),
    [Index](index_split_015.html#filepos509147), [Arithmetic Operations](index_split_015.html#filepos619204)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Analysis Expressions (DAX), [Preface](index_split_003.html#filepos9339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data analysis with pandas (see pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data layer, [Separation of concerns](index_split_007.html#filepos44428)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data parts (DataFrames), formatting, [Formatting a DataFrame’s data part](index_split_022.html#filepos1205675)-[Formatting
    a DataFrame’s data part](index_split_022.html#filepos1224706)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionaries, [Dictionaries](index_split_011.html#filepos268897)-[Dictionaries](index_split_011.html#filepos285555)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists, [Lists](index_split_011.html#filepos243228)-[Lists](index_split_011.html#filepos268531)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Data Structures](index_split_011.html#filepos242442)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sets, [Sets](index_split_011.html#filepos290624)-[Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: tuples, [Tuples](index_split_011.html#filepos285858)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VBA, [Data Structures](index_split_011.html#filepos242442)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean, [Booleans](index_split_011.html#filepos205063)-[Booleans](index_split_011.html#filepos217752),
    [The read_excel Function and ExcelFile Class](index_split_019.html#filepos891785)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: converting with excel.py module, [The excel.py Module](index_split_021.html#filepos973831)-[The
    excel.py Module](index_split_021.html#filepos977785)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in DataFrames, [DataFrame and Series](index_split_015.html#filepos498597)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime, converting strings to, [Creating a DatetimeIndex](index_split_017.html#filepos783176)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable versus immutable, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865731)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: numeric, [Numeric Types](index_split_011.html#filepos189160)-[Numeric Types](index_split_011.html#filepos194525)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of NumPy arrays, [NumPy Array](index_split_014.html#filepos445451)-[NumPy Array](index_split_014.html#filepos447897)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Data Types](index_split_010.html#filepos180377)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strings, [Strings](index_split_011.html#filepos217986)-[Strings](index_split_011.html#filepos227137)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data validation in Python Package Tracker, [Frontend](index_split_027.html#filepos1614044)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Viewer (VS Code), [Run Jupyter Notebooks](index_split_030.html#filepos1828467)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: data viewer, Excel as, [Using Excel as Data Viewer](index_split_024.html#filepos1239513)-[Using
    Excel as Data Viewer](index_split_024.html#filepos1248699)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: database.py example, [Backend](index_split_027.html#filepos1634047)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: connections, [Database connections](index_split_027.html#filepos1529652)-[Database
    connections](index_split_027.html#filepos1537920)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection, [SQL injection](index_split_027.html#filepos1563158)-[SQL injection](index_split_027.html#filepos1579942)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries, [SQL queries](index_split_027.html#filepos1538233)-[SQL queries](index_split_027.html#filepos1562882)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: structure for Python Package Tracker case study, [The Package Tracker database](index_split_027.html#filepos1520310)-[The
    Package Tracker database](index_split_027.html#filepos1529401)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: types of, [Databases](index_split_027.html#filepos1515417)-[Databases](index_split_027.html#filepos1519777)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: applying functions, [Applying a Function](index_split_015.html#filepos641087)-[Applying
    a Function](index_split_015.html#filepos649303)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations, [Arithmetic Operations](index_split_015.html#filepos617369)-[Arithmetic
    Operations](index_split_015.html#filepos633672)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: columns, [Columns](index_split_015.html#filepos512954)-[Columns](index_split_015.html#filepos524119)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: concatenating, [Concatenating](index_split_016.html#filepos653577)-[Concatenating](index_split_016.html#filepos667519)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: copies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: returned by methods, [Index](index_split_015.html#filepos506311)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views versus, [View vs. Copy](index_split_015.html#filepos649623)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [DataFrame and Series](index_split_015.html#filepos489479)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: descriptive statistics, [Descriptive Statistics](index_split_016.html#filepos691290)-[Descriptive
    Statistics](index_split_016.html#filepos695190)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicate data, [Duplicate Data](index_split_015.html#filepos608897)-[Duplicate
    Data](index_split_015.html#filepos617033)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel spreadsheets versus, [DataFrame and Series](index_split_015.html#filepos485631)-[DataFrame
    and Series](index_split_015.html#filepos489337)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: exploration methods, [Importing CSV Files](index_split_016.html#filepos758459)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: exporting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as CSV files, [Exporting CSV Files](index_split_016.html#filepos745826)-[Exporting
    CSV Files](index_split_016.html#filepos748395)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting in Excel, [Formatting DataFrames in Excel](index_split_022.html#filepos1157749)-[Formatting
    a DataFrame’s data part](index_split_022.html#filepos1224706)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Google Trends case study, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: grouping data, [Grouping](index_split_016.html#filepos695504)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as CSV files, [Importing CSV Files](index_split_016.html#filepos748628)-[Importing
    CSV Files](index_split_016.html#filepos764876)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices, [Index](index_split_015.html#filepos498949)-[Index](index_split_015.html#filepos512717)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: joining, [Joining and Merging](index_split_016.html#filepos667765)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations, [Limitations with pandas](index_split_017.html#filepos860285)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: melting data, [Pivoting and Melting](index_split_016.html#filepos712684)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: merging, [Joining and Merging](index_split_016.html#filepos682873)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: missing data, [Missing Data](index_split_015.html#filepos598810)-[Missing Data](index_split_015.html#filepos608614)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pivoting data, [Pivoting and Melting](index_split_016.html#filepos701536)-[Pivoting
    and Melting](index_split_016.html#filepos716422)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of plotting libraries, [Plotly](index_split_016.html#filepos738084)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with Matplotlib, [Matplotlib](index_split_016.html#filepos717479)-[Matplotlib](index_split_016.html#filepos727877)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with Plotly, [Plotly](index_split_016.html#filepos728120)-[Plotly](index_split_016.html#filepos737814)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Plotting](index_split_016.html#filepos716977)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading/writing in Excel with xlwings, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by boolean indexing, [Selecting by boolean indexing](index_split_015.html#filepos549780)-[Selecting
    by boolean indexing](index_split_015.html#filepos567453)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by label, [Selecting by label](index_split_015.html#filepos525461)-[Selecting
    by label](index_split_015.html#filepos538911)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with MultiIndexes, [Selecting by using a MultiIndex](index_split_015.html#filepos567793)-[Selecting
    by using a MultiIndex](index_split_015.html#filepos575571)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by position, [Selecting by position](index_split_015.html#filepos539083)-[Selecting
    by position](index_split_015.html#filepos549467)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Series versus, [DataFrame and Series](index_split_015.html#filepos484520)-[DataFrame
    and Series](index_split_015.html#filepos485550), [Selecting by label](index_split_015.html#filepos536695)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: setting data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by adding columns, [Setting data by adding a new column](index_split_015.html#filepos592331)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by boolean indexing, [Setting data by boolean indexing](index_split_015.html#filepos582259)-[Setting
    data by boolean indexing](index_split_015.html#filepos589159)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by label, [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by position, [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by replacing values, [Setting data by replacing values](index_split_015.html#filepos589332)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries versus, [SQL queries](index_split_027.html#filepos1540168)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: text columns, [Working with Text Columns](index_split_015.html#filepos634000)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time series analysis (see time series analysis)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: transposing, [Columns](index_split_015.html#filepos520188)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: date serial number (Excel), [The datetime Class](index_split_012.html#filepos393168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime data type, converting strings to, [Creating a DatetimeIndex](index_split_017.html#filepos783176)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime module, [The datetime Class](index_split_012.html#filepos392883)-[The
    datetime Class](index_split_012.html#filepos408810), [Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1848019)-[Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DatetimeIndex (pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [Creating a DatetimeIndex](index_split_017.html#filepos770795)-[Creating
    a DatetimeIndex](index_split_017.html#filepos794737)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering, [Filtering a DatetimeIndex](index_split_017.html#filepos794993)-[Filtering
    a DatetimeIndex](index_split_017.html#filepos798956)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time zones in, [Working with Time Zones](index_split_017.html#filepos799257)-[Working
    with Time Zones](index_split_017.html#filepos808759)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dateutil package, [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1848527)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: date_range function (pandas), [Creating a DatetimeIndex](index_split_017.html#filepos770851)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DAX (Data Analysis Expressions), [Preface](index_split_003.html#filepos9339)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deactivating Conda environments, [Create a New Conda Environment](index_split_029.html#filepos1816090)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Package Tracker, [Debugging](index_split_027.html#filepos1644656)-[Debugging](index_split_027.html#filepos1651460)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in text editor, [Visual Studio Code](index_split_009.html#filepos156231)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UDFs, [Debugging UDFs](index_split_028.html#filepos1755260)-[Debugging UDFs](index_split_028.html#filepos1760605)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VS Code, [Debugger](index_split_030.html#filepos1821433)-[Debugger](index_split_030.html#filepos1825904)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: decimal data type, [Numeric Types](index_split_011.html#filepos194226)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: declarative languages, [SQL queries](index_split_027.html#filepos1538408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decorators (xlwings)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: order of, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1709067)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [UDF Quickstart](index_split_028.html#filepos1661857)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sub decorator, [The Sub Decorator](index_split_028.html#filepos1795393)-[The
    Sub Decorator](index_split_028.html#filepos1804381)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: deep copies, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1881228)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: def keyword, [Defining functions](index_split_012.html#filepos362541)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default arguments, mutable objects as, [Functions with Mutable Objects as Default
    Arguments](index_split_031.html#filepos1896791)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defined names (Excel), creating in xlwings, [Defined names](index_split_025.html#filepos1390078)-[Defined
    names](index_split_025.html#filepos1400526)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defining functions, [Defining functions](index_split_012.html#filepos362480)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: del statement (lists), [Lists](index_split_011.html#filepos260070)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deleting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns (pandas), [Columns](index_split_015.html#filepos517912)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Conda environments, [Create a New Conda Environment](index_split_029.html#filepos1816460)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: elements from lists, [Lists](index_split_011.html#filepos260070)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings deployment, [Python Dependency](index_split_026.html#filepos1472746)-[Python
    Dependency](index_split_026.html#filepos1475110)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in xlwings, [xlwings Foundations](index_split_025.html#filepos1410868)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defined, [Deployment](index_split_026.html#filepos1472064)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of xlwings
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration hierarchy, [Configuration Hierarchy](index_split_026.html#filepos1478189)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python dependencies, [Python Dependency](index_split_026.html#filepos1472746)-[Python
    Dependency](index_split_026.html#filepos1475110)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: settings, [Settings](index_split_026.html#filepos1480593)-[Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'standalone workbooks, [Standalone Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1475399)-[Standalone
    Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1477920)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: describe.py example, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682978)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: descriptive statistics, [Descriptive Statistics](index_split_016.html#filepos691290)-[Descriptive
    Statistics](index_split_016.html#filepos695190)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deterministic functions, [Caching](index_split_028.html#filepos1775539)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: development environment (see Anaconda; Jupyter notebooks; VS Code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dict constructor, [Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionaries, [Dictionaries](index_split_011.html#filepos268897)-[Dictionaries](index_split_011.html#filepos285555)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos355651)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dir command, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: changing, [Anaconda Prompt](index_split_008.html#filepos111447)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: current directory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: listing files in, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: viewing full path, [Anaconda Prompt](index_split_008.html#filepos105254)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: parent directory, changing to, [Anaconda Prompt](index_split_008.html#filepos112850)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation of Conda environments, [Disable Auto Activation](index_split_029.html#filepos1818091)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'docstrings, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos420835)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dot notation, [Attributes and methods](index_split_011.html#filepos187525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: downsampling, [Resampling](index_split_017.html#filepos847090)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: drivers (for databases), [Database connections](index_split_027.html#filepos1529652)-[Database
    connections](index_split_027.html#filepos1537920)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dropna method (pandas), [Missing Data](index_split_015.html#filepos602631)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: drop_duplicates method (pandas), [Duplicate Data](index_split_015.html#filepos609015)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DRY principle, [DRY principle](index_split_007.html#filepos46294)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicate data in DataFrames, [Duplicate Data](index_split_015.html#filepos608897)-[Duplicate
    Data](index_split_015.html#filepos617033)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicated method (pandas), [Duplicate Data](index_split_015.html#filepos612773)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic arrays (Excel), [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dynamic typing, [Variables](index_split_010.html#filepos183257)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: edit mode (Jupyter notebooks), [Edit vs. Command Mode](index_split_009.html#filepos140230)-[Edit
    vs. Command Mode](index_split_009.html#filepos145012)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: editing files (Excel)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Editing with OpenPyXL](index_split_021.html#filepos1033340)-[Editing
    with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlutils, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: elements of arrays (NumPy), getting and setting, [Getting and Setting Array
    Elements](index_split_014.html#filepos463404)-[Getting and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emacs, [Running a Python Script](index_split_009.html#filepos174170)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enabling macros (Excel), [RunPython Function](index_split_026.html#filepos1459885)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ending interactive Python session, [Python REPL: An Interactive Python Session](index_split_008.html#filepos118780)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: endpoints, [Web APIs](index_split_027.html#filepos1505232)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: engine parameter (read_excel or to_excel functions), [When to Use Which Package](index_split_021.html#filepos971083)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enumerate function, [The for and while Loops](index_split_012.html#filepos328659)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: environment variables, [Settings](index_split_026.html#filepos1482074)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python Package Tracker, [Exceptions](index_split_027.html#filepos1580257)-[Exceptions](index_split_027.html#filepos1601081)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VBA, [Modern Language Features](index_split_007.html#filepos81423)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: escape characters in strings, [Strings](index_split_011.html#filepos219648)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EuSpRIG (European Spreadsheet Risks Interest Group), [Excel in the News](index_split_007.html#filepos40774)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add_package function (Python Package Tracker), [Backend](index_split_027.html#filepos1621394)-[Backend](index_split_027.html#filepos1633823)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: database.py, [Backend](index_split_027.html#filepos1634047)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: describe.py, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682978)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: first_project.py, [Run Main](index_split_026.html#filepos1449910)-[Run Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: first_udf.py, [UDF Quickstart](index_split_028.html#filepos1659823)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: get_interest_over_time function (google_trends.py), [Fetching Data from Google
    Trends](index_split_028.html#filepos1735053)-[Fetching Data from Google Trends](index_split_028.html#filepos1738598)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importsub.py, [The Sub Decorator](index_split_028.html#filepos1796656)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pep8_sample.py, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos409133)-[PEP
    8: Style Guide for Python Code](index_split_012.html#filepos425840)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plot function (google_trends.py), [Plotting with UDFs](index_split_028.html#filepos1742308)-[Plotting
    with UDFs](index_split_028.html#filepos1753405)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: revenues.py, [Minimize cross-application calls](index_split_028.html#filepos1764661)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sales_report_pandas.py, [Case Study: Excel Reporting](index_split_019.html#filepos871006)-[Case
    Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sales_report_xlwings.py, [Case Study (Re-Revisited): Excel Reporting](index_split_025.html#filepos1403162)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: temperature.py, [Modules and the import Statement](index_split_012.html#filepos377100)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array-based calculations, [Vectorization and Broadcasting](index_split_014.html#filepos453400)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: automation (see xlwings)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: charts, [Pivoting and Melting](index_split_016.html#filepos716676)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (see also plots)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in OpenPyXL, [Writing with OpenPyXL](index_split_021.html#filepos996317)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in xlwings, [Excel charts](index_split_025.html#filepos1368049)-[Excel
    charts](index_split_025.html#filepos1374395)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as data viewer, [Using Excel as Data Viewer](index_split_024.html#filepos1239513)-[Using
    Excel as Data Viewer](index_split_024.html#filepos1248699)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, reading/writing with xlwings, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: date serial number, [The datetime Class](index_split_012.html#filepos393168)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: defined names, creating in xlwings, [Defined names](index_split_025.html#filepos1390078)-[Defined
    names](index_split_025.html#filepos1400526)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: files (see files)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: floats in, [Numeric Types](index_split_011.html#filepos193692)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting DataFrames in, [Formatting DataFrames in Excel](index_split_022.html#filepos1157749)-[Formatting
    a DataFrame’s data part](index_split_022.html#filepos1224706)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as frontend
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing xlwings add-in, [Excel Add-in](index_split_026.html#filepos1442113)-[Excel
    Add-in](index_split_026.html#filepos1447961)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Using Excel as Frontend with xlwings](index_split_026.html#filepos1440971)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command, [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run main button, [Run Main](index_split_026.html#filepos1449910)-[Run Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function, [RunPython Function](index_split_026.html#filepos1459375)-[RunPython
    without quickstart command](index_split_026.html#filepos1471460)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: history of, [Why Python for Excel?](index_split_007.html#filepos33602)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: instances, [The Excel Object Model](index_split_024.html#filepos1252360), [The
    Excel Object Model](index_split_024.html#filepos1296280)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks versus, [Jupyter Notebooks](index_split_008.html#filepos131000)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: language and regional settings, [The Excel Object Model](index_split_024.html#filepos1254107)-[The
    Excel Object Model](index_split_024.html#filepos1255983)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: logarithms in, [Shifting and Percentage Changes](index_split_017.html#filepos810574)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS permissions, [Using Excel as Data Viewer](index_split_024.html#filepos1249144)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modern Excel, [Modern Excel](index_split_007.html#filepos58283)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Name Manager, [Defined names](index_split_025.html#filepos1399895)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in news stories, [Excel in the News](index_split_007.html#filepos38612)-[Excel
    in the News](index_split_007.html#filepos41040)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: object model, [The Excel Object Model](index_split_024.html#filepos1250235)-[The
    Excel Object Model](index_split_024.html#filepos1313152)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pictures, Matplotlib plots as, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as programming language, [Excel Is a Programming Language](index_split_007.html#filepos35748)-[Excel
    Is a Programming Language](index_split_007.html#filepos38457)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: programming, reading/writing files versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python advantages for, [Python for Excel](index_split_007.html#filepos62589)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cross-platform compatibility, [Cross-Platform Compatibility](index_split_007.html#filepos90342)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modern language features, [Modern Language Features](index_split_007.html#filepos80870)-[Modern
    Language Features](index_split_007.html#filepos89951)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: readability, [Readability and Maintainability](index_split_007.html#filepos64414)-[Readability
    and Maintainability](index_split_007.html#filepos71415)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scientific computing, [Scientific Computing](index_split_007.html#filepos76559)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: standard library and package manager, [Standard Library and Package Manager](index_split_007.html#filepos71589)-[Standard
    Library and Package Manager](index_split_007.html#filepos76314)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'reporting case study, [Case Study: Excel Reporting](index_split_019.html#filepos864531)-[Case
    Study: Excel Reporting](index_split_019.html#filepos885516), [Case Study (Revisited):
    Excel Reporting](index_split_022.html#filepos1232433), [Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1400987)-[Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1409826)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: spreadsheets, DataFrames versus, [DataFrame and Series](index_split_015.html#filepos485631)-[DataFrame
    and Series](index_split_015.html#filepos489337)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'standalone workbooks, [Standalone Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1475399)-[Standalone
    Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1477920)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time series analysis limitations, [Time Series Analysis with pandas](index_split_017.html#filepos768348)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust access to VBA project model setting, [Getting Started with UDFs](index_split_028.html#filepos1656916)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: used range, [Reading with xlrd](index_split_021.html#filepos1099306)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: version control, [Version control](index_split_007.html#filepos51713)-[Version
    control](index_split_007.html#filepos57576)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: versions of, [Python and Excel Versions](index_split_005.html#filepos19959)-[Python
    and Excel Versions](index_split_005.html#filepos20478)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: zombie processes, [xlwings Foundations](index_split_025.html#filepos1412114)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: excel.py module, [The excel.py Module](index_split_021.html#filepos972622)-[The
    excel.py Module](index_split_021.html#filepos980989)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ExcelFile class (pandas), [The read_excel Function and ExcelFile Class](index_split_019.html#filepos886398)-[The
    read_excel Function and ExcelFile Class](index_split_019.html#filepos935481)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ExcelWriter class (pandas), [The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935768)-[The
    to_excel Method and ExcelWriter Class](index_split_019.html#filepos953568)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exceptions (see error handling)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expand method (xlwings), [Working with DataFrames](index_split_025.html#filepos1333572)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: exporting DataFrame data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as CSV files, [Exporting CSV Files](index_split_016.html#filepos745826)-[Exporting
    CSV Files](index_split_016.html#filepos748395)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: extracting macro code (Xlsxwriter) from xlsm files, [XlsxWriter](index_split_021.html#filepos1064438)-[XlsxWriter](index_split_021.html#filepos1066693)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: F
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: f-strings (formatted string literals), [Strings](index_split_011.html#filepos222026)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: False boolean data type, [Booleans](index_split_011.html#filepos205063)-[Booleans](index_split_011.html#filepos217752)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ffill method (pandas), [Resampling](index_split_017.html#filepos850748)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'figure object (Matplotlib), [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file extensions, viewing, [Anaconda Prompt](index_split_008.html#filepos113417)-[Anaconda
    Prompt](index_split_008.html#filepos114549)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: file paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: absolute versus relative, [Backend](index_split_027.html#filepos1638593)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'globbing, [Case Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Path class, [Case Study: Excel Reporting](index_split_019.html#filepos882885)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Windows as raw strings, [Exporting CSV Files](index_split_016.html#filepos747454)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in current directory, listing, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: editing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Editing with OpenPyXL](index_split_021.html#filepos1033340)-[Editing
    with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlutils, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations in pandas, [Limitations When Using pandas with Excel Files](index_split_019.html#filepos957495)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Reading with OpenPyXL](index_split_021.html#filepos982131)-[Writing
    with OpenPyXL](index_split_021.html#filepos996210), [Reading with OpenPyXL](index_split_022.html#filepos1141062)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pandas, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos886398)-[The
    read_excel Function and ExcelFile Class](index_split_019.html#filepos935481)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in parallel, [Reading sheets in parallel](index_split_022.html#filepos1144410)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: programming Excel versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pyxlsb, [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: from URLs, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos922687)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlrd, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading
    with xlrd](index_split_021.html#filepos1099832), [Reading with xlrd](index_split_022.html#filepos1134915)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: writing
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations in pandas, [Limitations When Using pandas with Excel Files](index_split_019.html#filepos957495)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Writing with OpenPyXL](index_split_021.html#filepos996317)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891), [Writing with OpenPyXL](index_split_022.html#filepos1126036)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pandas, [The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935768)-[The
    to_excel Method and ExcelWriter Class](index_split_019.html#filepos953568)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: programming Excel versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941),
    [Writing with XlsxWriter](index_split_022.html#filepos1130359)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlwt, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing
    with xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: fillna method (pandas), [Missing Data](index_split_015.html#filepos606608)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, [Selecting by boolean indexing](index_split_015.html#filepos549780)-[Selecting
    by boolean indexing](index_split_015.html#filepos567453)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DatetimeIndex (pandas), [Filtering a DatetimeIndex](index_split_017.html#filepos794993)-[Filtering
    a DatetimeIndex](index_split_017.html#filepos798956)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: first_project.py example, [Run Main](index_split_026.html#filepos1449910)-[Run
    Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: first_udf.py example, [UDF Quickstart](index_split_028.html#filepos1659823)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: flake8, [PEP 8 and VS Code](index_split_012.html#filepos426532)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: float data type, [Numeric Types](index_split_011.html#filepos189160)-[Numeric
    Types](index_split_011.html#filepos194525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: float64 data type (NumPy), [NumPy Array](index_split_014.html#filepos445451)-[NumPy
    Array](index_split_014.html#filepos446866)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point inaccuracies, [Numeric Types](index_split_011.html#filepos194705)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: floating-point numbers, [Numeric Types](index_split_011.html#filepos189272)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Each statement (VBA), [The for and while Loops](index_split_012.html#filepos319389)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for loops, [The for and while Loops](index_split_012.html#filepos316683)-[The
    for and while Loops](index_split_012.html#filepos341967)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: foreign keys (databases), [The Package Tracker database](index_split_027.html#filepos1528709),
    [SQL queries](index_split_027.html#filepos1562373)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form Controls (Excel), [RunPython Function](index_split_026.html#filepos1464639)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames in Excel, [Formatting DataFrames in Excel](index_split_022.html#filepos1157749)-[Formatting
    a DataFrame’s data part](index_split_022.html#filepos1224706)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime objects into strings, [The datetime Class](index_split_012.html#filepos404852)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strings in DataFrames, [Applying a Function](index_split_015.html#filepos641289)-[Applying
    a Function](index_split_015.html#filepos645020)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: forward-filling, [Resampling](index_split_017.html#filepos850748)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fraction data type, [Numeric Types](index_split_011.html#filepos194226)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: frontends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defined, [Using Excel as Frontend with xlwings](index_split_026.html#filepos1440971)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel as
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing xlwings add-in, [Excel Add-in](index_split_026.html#filepos1442113)-[Excel
    Add-in](index_split_026.html#filepos1447961)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Using Excel as Frontend with xlwings](index_split_026.html#filepos1440971)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command, [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run main button, [Run Main](index_split_026.html#filepos1449910)-[Run Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function, [RunPython Function](index_split_026.html#filepos1459375)-[RunPython
    without quickstart command](index_split_026.html#filepos1471460)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Frontend](index_split_027.html#filepos1606292)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python Package Tracker, [Frontend](index_split_027.html#filepos1606230)-[Frontend](index_split_027.html#filepos1619827)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: frozen executables, [Python Dependency](index_split_026.html#filepos1475043)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: full outer joins, [Joining and Merging](index_split_016.html#filepos669216)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: applying to DataFrames, [Applying a Function](index_split_015.html#filepos641087)-[Applying
    a Function](index_split_015.html#filepos649303)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: calling, [Functions](index_split_011.html#filepos185990), [Calling functions](index_split_012.html#filepos370297),
    [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: decorators (xlwings)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: order of, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1709067)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [UDF Quickstart](index_split_028.html#filepos1661857)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sub decorator, [The Sub Decorator](index_split_028.html#filepos1795393)-[The
    Sub Decorator](index_split_028.html#filepos1804381)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: defining, [Defining functions](index_split_012.html#filepos362480)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: deterministic, [Caching](index_split_028.html#filepos1775539)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lambda expressions, [Applying a Function](index_split_015.html#filepos645164)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Functions](index_split_012.html#filepos361996)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: recalculating (Excel), [UDF Quickstart](index_split_028.html#filepos1671914)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: universal functions (NumPy), [Universal Functions (ufunc)](index_split_014.html#filepos454337)-[Universal
    Functions (ufunc)](index_split_014.html#filepos462582)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined functions (see UDFs)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VBA, [DRY principle](index_split_007.html#filepos46886), [Running VBA Code](index_split_025.html#filepos1322194)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: volatile (Excel), [UDF Quickstart](index_split_028.html#filepos1673786)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: functools module, [Caching](index_split_028.html#filepos1784463)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: G
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: get method (dictionaries), [Dictionaries](index_split_011.html#filepos281077)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GET requests, [Web APIs](index_split_027.html#filepos1493322)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: getting array elements (NumPy), [Getting and Setting Array Elements](index_split_014.html#filepos463404)-[Getting
    and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: get_interest_over_time function (google_trends.py) example, [Fetching Data from
    Google Trends](index_split_028.html#filepos1735053)-[Fetching Data from Google
    Trends](index_split_028.html#filepos1738598)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git, [Version control](index_split_007.html#filepos51713)-[Version control](index_split_007.html#filepos57576)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'globbing, [Case Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Colab, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos152972)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google style guide for Python, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos425552)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Trends case study
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames and dynamic arrays, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging UDFs, [Debugging UDFs](index_split_028.html#filepos1755260)-[Debugging
    UDFs](index_split_028.html#filepos1760605)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: explanation of Google Trends, [Introduction to Google Trends](index_split_028.html#filepos1680082)-[Introduction
    to Google Trends](index_split_028.html#filepos1682295)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching data, [Fetching Data from Google Trends](index_split_028.html#filepos1714798)-[Fetching
    Data from Google Trends](index_split_028.html#filepos1741590)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting data, [Plotting with UDFs](index_split_028.html#filepos1741829)-[Plotting
    with UDFs](index_split_028.html#filepos1754939)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: graphical user interfaces (see frontends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gridlines (Excel), hiding, [Frontend](index_split_027.html#filepos1616277)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: grouping DataFrame data, [Grouping](index_split_016.html#filepos695504)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GUIs (see frontends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: head method (pandas), [Importing CSV Files](index_split_016.html#filepos750501)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: headers for DataFrame columns, [Formatting a DataFrame’s index and headers](index_split_022.html#filepos1170468)-[Formatting
    a DataFrame’s index and headers](index_split_022.html#filepos1205120)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: heatmaps (Plotly), [Rebasing and Correlation](index_split_017.html#filepos838730)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hexadecimal values for colors, [Writing with OpenPyXL](index_split_021.html#filepos1032314)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hiding gridlines (Excel), [Frontend](index_split_027.html#filepos1616277)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HoloViews, [Plotly](index_split_016.html#filepos740040)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: homogenous data, [NumPy Array](index_split_014.html#filepos439635)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horror Stories web page, [Excel in the News](index_split_007.html#filepos40739)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP status codes, [Web APIs](index_split_027.html#filepos1508263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ibis, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDEs (integrated development environments), [Visual Studio Code](index_split_009.html#filepos156885),
    [Running a Python Script](index_split_009.html#filepos174247)-[Running a Python
    Script](index_split_009.html#filepos176621)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if statements, [The if Statement and Conditional Expressions](index_split_012.html#filepos306285)-[The
    if Statement and Conditional Expressions](index_split_012.html#filepos316429)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iloc attribute (pandas), [Selecting by position](index_split_015.html#filepos539083)-[Selecting
    by position](index_split_015.html#filepos549467), [Setting data by label or position](index_split_015.html#filepos581974)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: immutable objects, [Tuples](index_split_011.html#filepos285912), [Mutable vs.
    Immutable Python Objects](index_split_031.html#filepos1865519)-[Mutable vs. Immutable
    Python Objects](index_split_031.html#filepos1882596)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: implicit line breaks, [Lists](index_split_011.html#filepos256242)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import statement, [Modules and the import Statement](index_split_012.html#filepos376420)-[Modules
    and the import Statement](index_split_012.html#filepos392723)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: importing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as CSV files, [Importing CSV Files](index_split_016.html#filepos748628)-[Importing
    CSV Files](index_split_016.html#filepos764876)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modules, [Modules and the import Statement](index_split_012.html#filepos376420)-[Modules
    and the import Statement](index_split_012.html#filepos392723)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running scripts versus, [Backend](index_split_027.html#filepos1641594)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UDFs, [UDF Quickstart](index_split_028.html#filepos1657477)-[UDF Quickstart](index_split_028.html#filepos1679023)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importsub.py example, [The Sub Decorator](index_split_028.html#filepos1796656)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: imshow method (Plotly), [Rebasing and Correlation](index_split_017.html#filepos846056)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in operator, [Lists](index_split_011.html#filepos262598), [Selecting by boolean
    indexing](index_split_015.html#filepos558929)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python, [Indexing](index_split_011.html#filepos228067)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: range objects (xlwings), [The Excel Object Model](index_split_024.html#filepos1276198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VBA, [Indexing](index_split_011.html#filepos228929)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: zero- versus one-based, [The Excel Object Model](index_split_024.html#filepos1295706)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for DataFrames, [Index](index_split_015.html#filepos498949)-[Index](index_split_015.html#filepos512717),
    [Formatting a DataFrame’s index and headers](index_split_022.html#filepos1170468)-[Formatting
    a DataFrame’s index and headers](index_split_022.html#filepos1205120)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time-based, [Time Series Analysis with pandas](index_split_017.html#filepos769969)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: info method (pandas), [DataFrame and Series](index_split_015.html#filepos496964),
    [Importing CSV Files](index_split_016.html#filepos750501), [The read_excel Function
    and ExcelFile Class](index_split_019.html#filepos887441)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: init method, [Classes and Objects](index_split_031.html#filepos1837273)-[Classes
    and Objects](index_split_031.html#filepos1839671)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initialization (of objects), [Classes and Objects](index_split_031.html#filepos1837273)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inner joins, [Joining and Merging](index_split_016.html#filepos668671)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: inputs, separate layer for, [Separation of concerns](index_split_007.html#filepos45452)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: installing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda, [Installation](index_split_008.html#filepos99940)-[Installation](index_split_008.html#filepos101307)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'packages, [Package Managers: Conda and pip](index_split_008.html#filepos125084),
    [Create a New Conda Environment](index_split_029.html#filepos1813742)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotly, [Plotly](index_split_016.html#filepos728478)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pytrends, [Package Managers: Conda and pip](index_split_008.html#filepos125608)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pyxlsb, [Package Managers: Conda and pip](index_split_008.html#filepos125608)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code, [Installation and Configuration](index_split_009.html#filepos159642)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlutils, [xlrd, xlwt, and xlutils](index_split_021.html#filepos1085435)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings add-in, [Excel Add-in](index_split_026.html#filepos1442113)-[Excel Add-in](index_split_026.html#filepos1447961)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: instances (of Excel), [The Excel Object Model](index_split_024.html#filepos1252360),
    [The Excel Object Model](index_split_024.html#filepos1296280)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: instantiation, [Attributes and methods](index_split_011.html#filepos188357),
    [The datetime Class](index_split_012.html#filepos394507), [Classes and Objects](index_split_031.html#filepos1833058)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: int data type, [Numeric Types](index_split_011.html#filepos189160)-[Numeric
    Types](index_split_011.html#filepos194525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integers, [Numeric Types](index_split_011.html#filepos189272)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: integrated development environments (IDEs), [Visual Studio Code](index_split_009.html#filepos156885),
    [Running a Python Script](index_split_009.html#filepos174247)-[Running a Python
    Script](index_split_009.html#filepos176621)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IntelliSense, [Visual Studio Code](index_split_009.html#filepos155542)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interactive Python session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ending, [Python REPL: An Interactive Python Session](index_split_008.html#filepos118780)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'starting, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115018)-[Python
    REPL: An Interactive Python Session](index_split_008.html#filepos118983)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: isin operator (pandas), [Selecting by boolean indexing](index_split_015.html#filepos558929)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: isna method (pandas), [Missing Data](index_split_015.html#filepos605310)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: items method, [The for and while Loops](index_split_012.html#filepos333494)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: J
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: JavaScript Object Notation (JSON), [Web APIs](index_split_027.html#filepos1494225)-[Web
    APIs](index_split_027.html#filepos1503692)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: join condition, [Joining and Merging](index_split_016.html#filepos683007)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: join method (pandas), [Joining and Merging](index_split_016.html#filepos667765)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: joining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: database tables, [Databases](index_split_027.html#filepos1517665)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, [Joining and Merging](index_split_016.html#filepos667765)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON (JavaScript Object Notation), [Web APIs](index_split_027.html#filepos1494225)-[Web
    APIs](index_split_027.html#filepos1503692)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: json module, [Web APIs](index_split_027.html#filepos1495827)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter kernel, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos149871)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cells
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: edit mode versus command mode, [Edit vs. Command Mode](index_split_009.html#filepos140230)-[Edit
    vs. Command Mode](index_split_009.html#filepos145012)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operational overview, [Notebook Cells](index_split_009.html#filepos134675)-[Notebook
    Cells](index_split_009.html#filepos140068)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: output, [Notebook Cells](index_split_009.html#filepos137198)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python scripts, [Python Scripts with Code Cells](index_split_030.html#filepos1829327)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: run order, [Run Order Matters](index_split_009.html#filepos145168)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cloud providers, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos151042)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comments, [Mathematical operators](index_split_011.html#filepos204466)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel versus, [Jupyter Notebooks](index_split_008.html#filepos131000)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: magic commands, [Matplotlib](index_split_016.html#filepos726866)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Development Environment](index_split_008.html#filepos97807), [Jupyter
    Notebooks](index_split_008.html#filepos129917)-[Jupyter Notebooks](index_split_008.html#filepos132282)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: renaming, [Running Jupyter Notebooks](index_split_008.html#filepos134176)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running, [Running Jupyter Notebooks](index_split_008.html#filepos132444)-[Running
    Jupyter Notebooks](index_split_008.html#filepos134424), [Run Jupyter Notebooks](index_split_030.html#filepos1826689)-[Run
    Jupyter Notebooks](index_split_030.html#filepos1829065)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: saving in VS Code, [Run Jupyter Notebooks](index_split_030.html#filepos1828008)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: shutting down, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos149871)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code versus, [Visual Studio Code](index_split_009.html#filepos154255)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JupyterLab, [Running a Python Script](index_split_009.html#filepos175602)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: K
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kaggle, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos152502)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: key/value combinations (see dictionaries)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: keyboard shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for comments, [Mathematical operators](index_split_011.html#filepos204466)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks, [Edit vs. Command Mode](index_split_009.html#filepos141162)-[Edit
    vs. Command Mode](index_split_009.html#filepos144741)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: keyword arguments (for functions), [Calling functions](index_split_012.html#filepos372720)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Koalas, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Komodo IDE, [Running a Python Script](index_split_009.html#filepos176335)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting data by (pandas), [Selecting by label](index_split_015.html#filepos525461)-[Selecting
    by label](index_split_015.html#filepos538911)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: setting data by (pandas), [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VBA, [Modern Language Features](index_split_007.html#filepos89147)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lambda expressions, [Applying a Function](index_split_015.html#filepos645164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lambda functions (Excel), [Excel Is a Programming Language](index_split_007.html#filepos36898)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: language settings (Excel), [The Excel Object Model](index_split_024.html#filepos1254107)-[The
    Excel Object Model](index_split_024.html#filepos1255983)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: layers of applications, [Separation of concerns](index_split_007.html#filepos41940)-[Separation
    of concerns](index_split_007.html#filepos45911)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left joins, [Joining and Merging](index_split_016.html#filepos668763)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: len function (lists), [Lists](index_split_011.html#filepos262598)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: line breaks, [Lists](index_split_011.html#filepos253745)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linting, [PEP 8 and VS Code](index_split_012.html#filepos426221)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos347118)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list constructor, [Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list separators (Excel), changing, [The Excel Object Model](index_split_024.html#filepos1254107)-[The
    Excel Object Model](index_split_024.html#filepos1255983)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: listing current directory files, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lists, [Lists](index_split_011.html#filepos243228)-[Lists](index_split_011.html#filepos268531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: literals, [Sets](index_split_011.html#filepos297752), [The datetime Class](index_split_012.html#filepos394192)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loc attribute (pandas), [Selecting by label](index_split_015.html#filepos525461)-[Selecting
    by label](index_split_015.html#filepos538911), [Setting data by label or position](index_split_015.html#filepos576473)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log returns, [Shifting and Percentage Changes](index_split_017.html#filepos809605)-[Shifting
    and Percentage Changes](index_split_017.html#filepos818833)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log ufunc (NumPy), [Shifting and Percentage Changes](index_split_017.html#filepos814239)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: logarithms in Excel and Python, [Shifting and Percentage Changes](index_split_017.html#filepos810574)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: London Whale story, [Excel in the News](index_split_007.html#filepos39761)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for loops, [The for and while Loops](index_split_012.html#filepos316683)-[The
    for and while Loops](index_split_012.html#filepos341967)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: while loops, [The for and while Loops](index_split_012.html#filepos343907)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lotus 1-2-3, [Why Python for Excel?](index_split_007.html#filepos33990)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: low-level packages, [The excel.py Module](index_split_021.html#filepos974268)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lowercase, transforming to/from uppercase, [Strings](index_split_011.html#filepos224113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lru_cache decorator, [Caching](index_split_028.html#filepos1784463)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ls command, [Anaconda Prompt](index_split_008.html#filepos110600)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lxml, [Writing with OpenPyXL](index_split_022.html#filepos1126100)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: M formula language (Power Query), [Preface](index_split_003.html#filepos9253)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda Prompt, running, [Anaconda Prompt](index_split_008.html#filepos104346)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: current directory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: listing files in, [Anaconda Prompt](index_split_008.html#filepos110600)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: viewing full path, [Anaconda Prompt](index_split_008.html#filepos105254)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: extracting macro code (Xlsxwriter), [XlsxWriter](index_split_021.html#filepos1066169)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: file extensions, viewing, [Anaconda Prompt](index_split_008.html#filepos114549)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list separators (Excel), changing, [The Excel Object Model](index_split_024.html#filepos1255706)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: permissions in, [Using Excel as Data Viewer](index_split_024.html#filepos1249144),
    [The Excel Object Model](index_split_024.html#filepos1309403)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ribbon add-ins, [Excel Add-in](index_split_026.html#filepos1447883)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal, [Anaconda Prompt](index_split_008.html#filepos102144)-[Anaconda Prompt](index_split_008.html#filepos104346)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation of Conda environment, [Disable Auto Activation](index_split_029.html#filepos1819954)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, [Installation and Configuration](index_split_009.html#filepos164804)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [Installation and Configuration](index_split_009.html#filepos160570)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings dependencies, [xlwings Foundations](index_split_025.html#filepos1411927)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macro code (Xlsxwriter), extracting from xlsm files, [XlsxWriter](index_split_021.html#filepos1064438)-[XlsxWriter](index_split_021.html#filepos1066693)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macro object (xlwings), [Running VBA Code](index_split_024.html#filepos1316702)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macros
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enabling (Excel), [RunPython Function](index_split_026.html#filepos1459885)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python Package Tracker, [Frontend](index_split_027.html#filepos1616544)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running (Excel), [RunPython Function](index_split_026.html#filepos1462470)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: magic commands (Jupyter notebooks), [Matplotlib](index_split_016.html#filepos726866),
    [Reading sheets in parallel](index_split_022.html#filepos1147874)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Markdown cells (Jupyter notebooks), [Notebook Cells](index_split_009.html#filepos138277)-[Notebook
    Cells](index_split_009.html#filepos139906)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mathematical operators, [Mathematical operators](index_split_011.html#filepos196304)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib, [Matplotlib](index_split_016.html#filepos717479)-[Matplotlib](index_split_016.html#filepos727877)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'plots as Excel pictures, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: matrix, [Lists](index_split_011.html#filepos249366), [Vectorization and Broadcasting](index_split_014.html#filepos451947)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mean method (pandas), [Grouping](index_split_016.html#filepos695674)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: melt function (pandas), [Pivoting and Melting](index_split_016.html#filepos712684)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: melting DataFrame data, [Pivoting and Melting](index_split_016.html#filepos712684)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: memoization, [Caching](index_split_028.html#filepos1781894)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: merge method (pandas), [Joining and Merging](index_split_016.html#filepos682873)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: merge requests, [Version control](index_split_007.html#filepos53419)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: merging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, [Joining and Merging](index_split_016.html#filepos682873)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionaries, [Dictionaries](index_split_011.html#filepos275528)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: method chaining, [Index](index_split_015.html#filepos505857)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: corresponding arithmetic operators for (pandas), [Arithmetic Operations](index_split_015.html#filepos625775)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame exploration, [Importing CSV Files](index_split_016.html#filepos758459)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of DataFrames, copies returned, [Index](index_split_015.html#filepos506311)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Attributes and methods](index_split_011.html#filepos187275), [Classes
    and Objects](index_split_031.html#filepos1833311)-[Classes and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: string methods in DataFrames, [Working with Text Columns](index_split_015.html#filepos634000)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Access, [Databases](index_split_027.html#filepos1516369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: migrating databases, [Databases](index_split_027.html#filepos1518267)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizing cross-application calls (xlwings), [Minimize cross-application calls](index_split_025.html#filepos1416834),
    [Minimize cross-application calls](index_split_028.html#filepos1762196)-[Minimize
    cross-application calls](index_split_028.html#filepos1770595)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: missing data in DataFrames, [Missing Data](index_split_015.html#filepos598810)-[Missing
    Data](index_split_015.html#filepos608614)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: model-view-controller (MVC), [Application Structure](index_split_027.html#filepos1605468)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modern Excel, [Modern Excel](index_split_007.html#filepos58283)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modern language features in Python versus Excel, [Modern Language Features](index_split_007.html#filepos80870)-[Modern
    Language Features](index_split_007.html#filepos89951)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modin, [Limitations with pandas](index_split_017.html#filepos861209), [Reading
    sheets in parallel](index_split_022.html#filepos1154305)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modularity, [Separation of concerns](index_split_007.html#filepos41610)-[Separation
    of concerns](index_split_007.html#filepos45911)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: module search path (Python), [RunPython Function](index_split_026.html#filepos1466429)-[RunPython
    Function](index_split_026.html#filepos1468145), [Settings](index_split_026.html#filepos1483129)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime module, [The datetime Class](index_split_012.html#filepos392883)-[The
    datetime Class](index_split_012.html#filepos408810), [Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1848019)-[Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing, [Modules and the import Statement](index_split_012.html#filepos376420)-[Modules
    and the import Statement](index_split_012.html#filepos392723)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running scripts versus, [Backend](index_split_027.html#filepos1641594)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: timezone module, [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB, [Databases](index_split_027.html#filepos1518942)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: moving averages in time series analysis, [Rolling Windows](index_split_017.html#filepos855004)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiIndexes (pandas), selecting data by, [Selecting by using a MultiIndex](index_split_015.html#filepos567793)-[Selecting
    by using a MultiIndex](index_split_015.html#filepos575571)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplan, [Why Python for Excel?](index_split_007.html#filepos34096)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: multiprocessing, [Reading sheets in parallel](index_split_022.html#filepos1144410)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: as function arguments, [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: immutable objects versus, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865519)-[Mutable
    vs. Immutable Python Objects](index_split_031.html#filepos1882596)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC (model-view-controller), [Application Structure](index_split_027.html#filepos1605468)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mypy, [Type Hints](index_split_012.html#filepos428975)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL, [Databases](index_split_027.html#filepos1516369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: N
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Name Manager (Excel), [Defined names](index_split_025.html#filepos1399895)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: named ranges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: creating in xlwings, [Defined names](index_split_025.html#filepos1390078)-[Defined
    names](index_split_025.html#filepos1400526)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python Package Tracker, [Frontend](index_split_027.html#filepos1608660)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: namespaces of scripts, [Modules and the import Statement](index_split_012.html#filepos391305)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: naming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns (pandas), [Columns](index_split_015.html#filepos514077)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices (pandas), [Index](index_split_015.html#filepos500212)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scripts, [Modules and the import Statement](index_split_012.html#filepos392387)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [Variables](index_split_010.html#filepos185081)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NaN values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: handling when reading Excel files, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos906409)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Missing Data](index_split_015.html#filepos598810)-[Missing Data](index_split_015.html#filepos608614)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing with zeros, [Arithmetic Operations](index_split_015.html#filepos624230)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: nested lists, [Lists](index_split_011.html#filepos247058), [NumPy Array](index_split_014.html#filepos435109)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: news stories, Excel in, [Excel in the News](index_split_007.html#filepos38612)-[Excel
    in the News](index_split_007.html#filepos41040)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None built-in constant, [Booleans](index_split_011.html#filepos213324)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: normalization (databases), [Databases](index_split_027.html#filepos1516187)-[The
    Package Tracker database](index_split_027.html#filepos1520748)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL databases, [Databases](index_split_027.html#filepos1517033)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: notebook cells (see cells)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notepad++, [Running a Python Script](index_split_009.html#filepos173617)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numeric data types, [Numeric Types](index_split_011.html#filepos189160)-[Numeric
    Types](index_split_011.html#filepos194525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumFOCUS, [Standard Library and Package Manager](index_split_007.html#filepos75535)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy, [Why Python for Excel?](index_split_007.html#filepos34564)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: broadcasting, [Vectorization and Broadcasting](index_split_014.html#filepos451025)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: constructors, [Useful Array Constructors](index_split_014.html#filepos470880)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data types, [NumPy Array](index_split_014.html#filepos445451)-[NumPy Array](index_split_014.html#filepos447897)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: getting and setting elements, [Getting and Setting Array Elements](index_split_014.html#filepos463404)-[Getting
    and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operational overview, [NumPy Array](index_split_014.html#filepos434881)-[NumPy
    Array](index_split_014.html#filepos448083)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: universal functions (ufuncs), [Universal Functions (ufunc)](index_split_014.html#filepos454337)-[Universal
    Functions (ufunc)](index_split_014.html#filepos462582)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: vectorization, [Vectorization and Broadcasting](index_split_014.html#filepos448254)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views versus copies, [View vs. Copy](index_split_014.html#filepos475259)-[View
    vs. Copy](index_split_014.html#filepos480562)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data analysis issues in, [Conclusion](index_split_014.html#filepos481110)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [NumPy Foundations](index_split_014.html#filepos433502)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: O
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: object model (Excel), [The Excel Object Model](index_split_024.html#filepos1250235)-[The
    Excel Object Model](index_split_024.html#filepos1313152)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: object relational mapper (ORM), [Database connections](index_split_027.html#filepos1530130)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: attributes and methods, [Classes and Objects](index_split_031.html#filepos1833311)-[Classes
    and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Attributes and methods](index_split_011.html#filepos187275)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as class instances, [The datetime Class](index_split_012.html#filepos394507),
    [Classes and Objects](index_split_031.html#filepos1833058)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: classes and, [Classes and Objects](index_split_031.html#filepos1832657)-[Classes
    and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in collections, [The Excel Object Model](index_split_024.html#filepos1252253)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: converting to boolean data type, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos891785)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: initialization, [Classes and Objects](index_split_031.html#filepos1837273)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable as function arguments, [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable versus immutable, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865519)-[Mutable
    vs. Immutable Python Objects](index_split_031.html#filepos1882596)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Objects](index_split_010.html#filepos180908)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [Variables](index_split_010.html#filepos181374)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ohlc method (pandas), [Resampling](index_split_017.html#filepos850167)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: oletools, [Formatting a DataFrame’s data part](index_split_022.html#filepos1231999)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one-based indexing, [The Excel Object Model](index_split_024.html#filepos1295706)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one-dimensional NumPy arrays, [NumPy Array](index_split_014.html#filepos439635)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one-to-many relationships (databases), [The Package Tracker database](index_split_027.html#filepos1528709)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: open mode (VS Code), [Running a Python Script](index_split_009.html#filepos172252)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Source Software (OSS), [Standard Library and Package Manager](index_split_007.html#filepos74609)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: opening Excel instances, [The Excel Object Model](index_split_024.html#filepos1252360)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenPyXL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: editing files, [Editing with OpenPyXL](index_split_021.html#filepos1033340)-[Editing
    with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting DataFrames
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data parts, [Formatting a DataFrame’s data part](index_split_022.html#filepos1206138)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices and headers, [Formatting a DataFrame’s index and headers](index_split_022.html#filepos1174367)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: parallelization, [Reading sheets in parallel](index_split_022.html#filepos1153631)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading files, [Reading with OpenPyXL](index_split_021.html#filepos982131)-[Writing
    with OpenPyXL](index_split_021.html#filepos996210), [Reading with OpenPyXL](index_split_022.html#filepos1141062)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: writing files, [Writing with OpenPyXL](index_split_021.html#filepos996317)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891), [Writing with OpenPyXL](index_split_022.html#filepos1126036)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XlsxWriter versus, [When to Use Which Package](index_split_020.html#filepos968476)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: operator precedence, [Selecting by boolean indexing](index_split_015.html#filepos555852)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimizing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reader/writer packages, [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UDFs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: caching, [Caching](index_split_028.html#filepos1775539)-[Caching](index_split_028.html#filepos1794980)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizing cross-application calls (xlwings), [Minimize cross-application calls](index_split_028.html#filepos1762196)-[Minimize
    cross-application calls](index_split_028.html#filepos1770595)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: raw values, [Using raw values](index_split_028.html#filepos1770837)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings performance, [Improving Performance](index_split_025.html#filepos1416353)-[App
    properties](index_split_025.html#filepos1429357)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: optional arguments (for functions), [Defining functions](index_split_012.html#filepos364918)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: options for range object (xlwings), [Converters and Options](index_split_025.html#filepos1345103)-[Converters
    and Options](index_split_025.html#filepos1366895)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle, [Databases](index_split_027.html#filepos1516369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORM (object relational mapper), [Database connections](index_split_027.html#filepos1530130)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OSS (Open Source Software), [Standard Library and Package Manager](index_split_007.html#filepos74609)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: outer joins, [Joining and Merging](index_split_016.html#filepos669216)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in Jupyter notebooks, [Notebook Cells](index_split_009.html#filepos137198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: separate layer for, [Separation of concerns](index_split_007.html#filepos45452)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: P
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'package managers, [Standard Library and Package Manager](index_split_007.html#filepos71589)-[Standard
    Library and Package Manager](index_split_007.html#filepos76314), [Package Managers:
    Conda and pip](index_split_008.html#filepos119343)-[Package Managers: Conda and
    pip](index_split_008.html#filepos127083)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding to Python Package Tracker, [What We Will Build](index_split_027.html#filepos1489144)-[What
    We Will Build](index_split_027.html#filepos1492009)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: building, [Settings](index_split_026.html#filepos1483129)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'installing, [Package Managers: Conda and pip](index_split_008.html#filepos125084),
    [Create a New Conda Environment](index_split_029.html#filepos1813742)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reader/writer packages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: excel.py module, [The excel.py Module](index_split_021.html#filepos972622)-[The
    excel.py Module](index_split_021.html#filepos980989)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Formatting a DataFrame’s data part](index_split_022.html#filepos1230090)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenPyXL, [OpenPyXL](index_split_021.html#filepos981782)-[Editing with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: optimization for big files, [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pyxlsb, [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos962384)-[When
    to Use Which Package](index_split_021.html#filepos972372)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlrd, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading with
    xlrd](index_split_021.html#filepos1099832)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlutils, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwt, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing with
    xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: switching, [The excel.py Module](index_split_021.html#filepos973335)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'versions of, [Package Managers: Conda and pip](index_split_008.html#filepos126480)-[Conda
    Environments](index_split_008.html#filepos127438)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pandas, [Why Python for Excel?](index_split_007.html#filepos34877)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: applying functions, [Applying a Function](index_split_015.html#filepos641087)-[Applying
    a Function](index_split_015.html#filepos649303)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations, [Arithmetic Operations](index_split_015.html#filepos617369)-[Arithmetic
    Operations](index_split_015.html#filepos633672)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: columns, [Columns](index_split_015.html#filepos512954)-[Columns](index_split_015.html#filepos524119)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: concatenating, [Concatenating](index_split_016.html#filepos653577)-[Concatenating](index_split_016.html#filepos667519)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: copies, [Index](index_split_015.html#filepos506311)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [DataFrame and Series](index_split_015.html#filepos489479)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: descriptive statistics, [Descriptive Statistics](index_split_016.html#filepos691290)-[Descriptive
    Statistics](index_split_016.html#filepos695190)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicate data, [Duplicate Data](index_split_015.html#filepos608897)-[Duplicate
    Data](index_split_015.html#filepos617033)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel spreadsheets versus, [DataFrame and Series](index_split_015.html#filepos485631)-[DataFrame
    and Series](index_split_015.html#filepos489337)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: exploration methods, [Importing CSV Files](index_split_016.html#filepos758459)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: exporting, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting in Excel, [Formatting DataFrames in Excel](index_split_022.html#filepos1157749)-[Formatting
    a DataFrame’s data part](index_split_022.html#filepos1224706)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Google Trends case study, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: grouping data, [Grouping](index_split_016.html#filepos695504)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing, [Importing and Exporting DataFrames](index_split_016.html#filepos740480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices, [Index](index_split_015.html#filepos498949)-[Index](index_split_015.html#filepos512717)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: joining, [Joining and Merging](index_split_016.html#filepos667765)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations, [Limitations with pandas](index_split_017.html#filepos860285)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: melting data, [Pivoting and Melting](index_split_016.html#filepos712684)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: merging, [Joining and Merging](index_split_016.html#filepos682873)-[Joining
    and Merging](index_split_016.html#filepos690380)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: missing data, [Missing Data](index_split_015.html#filepos598810)-[Missing Data](index_split_015.html#filepos608614)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pivoting data, [Pivoting and Melting](index_split_016.html#filepos701536)-[Pivoting
    and Melting](index_split_016.html#filepos716422)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting, [Plotting](index_split_016.html#filepos716977)-[Plotly](index_split_016.html#filepos740115)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading/writing in Excel with xlwings, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting data, [Selecting Data](index_split_015.html#filepos525158)-[Selecting
    by using a MultiIndex](index_split_015.html#filepos575571)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Series versus, [DataFrame and Series](index_split_015.html#filepos484520)-[DataFrame
    and Series](index_split_015.html#filepos485550), [Selecting by label](index_split_015.html#filepos536695)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: setting data, [Setting Data](index_split_015.html#filepos575788)-[Setting data
    by adding a new column](index_split_015.html#filepos598654)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries versus, [SQL queries](index_split_027.html#filepos1540168)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: text columns, [Working with Text Columns](index_split_015.html#filepos634000)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: transposing, [Columns](index_split_015.html#filepos520188)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views versus copies, [View vs. Copy](index_split_015.html#filepos649623)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DatetimeIndex
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [Creating a DatetimeIndex](index_split_017.html#filepos770795)-[Creating
    a DatetimeIndex](index_split_017.html#filepos794737)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering, [Filtering a DatetimeIndex](index_split_017.html#filepos794993)-[Filtering
    a DatetimeIndex](index_split_017.html#filepos798956)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time zones in, [Working with Time Zones](index_split_017.html#filepos799257)-[Working
    with Time Zones](index_split_017.html#filepos808759)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel files
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations, [Limitations When Using pandas with Excel Files](index_split_019.html#filepos957495)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos886398)-[The
    read_excel Function and ExcelFile Class](index_split_019.html#filepos935481)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: writing, [The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935768)-[The
    to_excel Method and ExcelWriter Class](index_split_019.html#filepos953568)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: NumPy (see NumPy)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plot types, [Plotly](index_split_016.html#filepos733673)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reader/writer packages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: excel.py module, [The excel.py Module](index_split_021.html#filepos972622)-[The
    excel.py Module](index_split_021.html#filepos980989)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Formatting a DataFrame’s data part](index_split_022.html#filepos1230090)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenPyXL, [OpenPyXL](index_split_021.html#filepos981782)-[Editing with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: optimization for big files, [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pyxlsb, [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos962384)-[When
    to Use Which Package](index_split_021.html#filepos972372)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlrd, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading with
    xlrd](index_split_021.html#filepos1099832)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlutils, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwt, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing with
    xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time series analysis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: correlation, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: percentage change, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: rebasing, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: resampling, [Resampling](index_split_017.html#filepos847003)-[Resampling](index_split_017.html#filepos854741)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: rolling windows, [Rolling Windows](index_split_017.html#filepos855004)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: shifting, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: parallelization, [Reading sheets in parallel](index_split_022.html#filepos1144410)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parent directory, changing to, [Anaconda Prompt](index_split_008.html#filepos112850)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parsing strings into datetime objects, [The datetime Class](index_split_012.html#filepos404852)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pass statement, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Path class, [Case Study: Excel Reporting](index_split_019.html#filepos882885)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pathlib module, [Case Study: Excel Reporting](index_split_019.html#filepos882885)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pct_change method (pandas), [Shifting and Percentage Changes](index_split_017.html#filepos818833)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PEP 8 style guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'examples, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos409133)-[PEP
    8: Style Guide for Python Code](index_split_012.html#filepos425840)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: linting, [PEP 8 and VS Code](index_split_012.html#filepos426221)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pep8_sample.py example, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos409133)-[PEP
    8: Style Guide for Python Code](index_split_012.html#filepos425840)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: percentage change in time series analysis, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: performance optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: of reader/writer packages, [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of UDFs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: caching, [Caching](index_split_028.html#filepos1775539)-[Caching](index_split_028.html#filepos1794980)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizing cross-application calls (xlwings), [Minimize cross-application calls](index_split_028.html#filepos1762196)-[Minimize
    cross-application calls](index_split_028.html#filepos1770595)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: raw values, [Using raw values](index_split_028.html#filepos1770837)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in xlwings, [Improving Performance](index_split_025.html#filepos1416353)-[App
    properties](index_split_025.html#filepos1429357)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: permissions in macOS, [Using Excel as Data Viewer](index_split_024.html#filepos1249144),
    [The Excel Object Model](index_split_024.html#filepos1309403)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pictures (Excel), Matplotlib plots as, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pillow, [Pictures: Matplotlib plots](index_split_025.html#filepos1388937)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pip, [Standard Library and Package Manager](index_split_007.html#filepos73403)-[Standard
    Library and Package Manager](index_split_007.html#filepos76314), [Package Managers:
    Conda and pip](index_split_008.html#filepos119343)-[Package Managers: Conda and
    pip](index_split_008.html#filepos127083)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pivoting DataFrame data, [Pivoting and Melting](index_split_016.html#filepos701536)-[Pivoting
    and Melting](index_split_016.html#filepos716422)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pivot_table function (pandas), [Pivoting and Melting](index_split_016.html#filepos701536)-[Pivoting
    and Melting](index_split_016.html#filepos716422)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plot function (google_trends.py) example, [Plotting with UDFs](index_split_028.html#filepos1742308)-[Plotting
    with UDFs](index_split_028.html#filepos1753405)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: plot method (pandas), [Matplotlib](index_split_016.html#filepos717713), [Plotting
    with UDFs](index_split_028.html#filepos1741829)-[Plotting with UDFs](index_split_028.html#filepos1754939)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotly, [Plotly](index_split_016.html#filepos728120)-[Plotly](index_split_016.html#filepos737814)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: heatmaps, [Rebasing and Correlation](index_split_017.html#filepos838730)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'installing, [Package Managers: Conda and pip](index_split_008.html#filepos125084)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'as Excel pictures, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of plotting libraries, [Plotly](index_split_016.html#filepos738084)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Matplotlib, [Matplotlib](index_split_016.html#filepos717479)-[Matplotlib](index_split_016.html#filepos727877)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Plotly, [Plotly](index_split_016.html#filepos728120)-[Plotly](index_split_016.html#filepos737814)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: types of (pandas), [Plotly](index_split_016.html#filepos733673)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of plotting libraries, [Plotly](index_split_016.html#filepos738084)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with Matplotlib, [Matplotlib](index_split_016.html#filepos717479)-[Matplotlib](index_split_016.html#filepos727877)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with Plotly, [Plotly](index_split_016.html#filepos728120)-[Plotly](index_split_016.html#filepos737814)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Plotting](index_split_016.html#filepos716977)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with UDFs, [Plotting with UDFs](index_split_028.html#filepos1741829)-[Plotting
    with UDFs](index_split_028.html#filepos1754939)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pop method (lists), [Lists](index_split_011.html#filepos260070)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: position (pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting data by, [Selecting by position](index_split_015.html#filepos539083)-[Selecting
    by position](index_split_015.html#filepos549467)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: setting data by, [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: positional arguments (for functions), [Calling functions](index_split_012.html#filepos372056)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POST requests, [Web APIs](index_split_027.html#filepos1493790)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL, [Databases](index_split_027.html#filepos1516369), [Backend](index_split_027.html#filepos1643404)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI, [Power BI](index_split_007.html#filepos61061)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power Pivot, [Preface](index_split_003.html#filepos9127), [Power Query and Power
    Pivot](index_split_007.html#filepos60136)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power Query, [Preface](index_split_003.html#filepos9041), [Power Query and Power
    Pivot](index_split_007.html#filepos59126)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pragmatic Programmer (Hunt and Thomas), [DRY principle](index_split_007.html#filepos46294)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: presentation layer, [Separation of concerns](index_split_007.html#filepos43779)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: primary keys (databases), [The Package Tracker database](index_split_027.html#filepos1527951)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: print function, [Running a Python Script](index_split_009.html#filepos167325),
    [Debugging UDFs](index_split_028.html#filepos1755260)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: programming Excel, reading/writing files versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: best practices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DRY principle, [DRY principle](index_split_007.html#filepos46294)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: separation of concerns, [Separation of concerns](index_split_007.html#filepos41610)-[Separation
    of concerns](index_split_007.html#filepos45911)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: testing, [Testing](index_split_007.html#filepos48860)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: version control, [Version control](index_split_007.html#filepos51713)-[Version
    control](index_split_007.html#filepos57576)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel as, [Excel Is a Programming Language](index_split_007.html#filepos35748)-[Excel
    Is a Programming Language](index_split_007.html#filepos38457)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: properties of app object (xlwings), [App properties](index_split_025.html#filepos1428002)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pseudorandom numbers, generating, [Useful Array Constructors](index_split_014.html#filepos473280)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PTVS (Python Tools for Visual Studio), [Visual Studio Code](index_split_009.html#filepos159079)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pull requests, [Version control](index_split_007.html#filepos53419)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pwd command, [Anaconda Prompt](index_split_008.html#filepos105254)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyArrow, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pycache folder, [Modules and the import Statement](index_split_012.html#filepos390629)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyCharm, [Running a Python Script](index_split_009.html#filepos174659)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyDev, [Running a Python Script](index_split_009.html#filepos176621)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pyexcel, [Formatting a DataFrame’s data part](index_split_022.html#filepos1230583)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyExcelerate, [Formatting a DataFrame’s data part](index_split_022.html#filepos1230903)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyInstaller, [Python Dependency](index_split_026.html#filepos1475043)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pylightxl, [Formatting a DataFrame’s data part](index_split_022.html#filepos1231224)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyPI (Python Package Index), [Standard Library and Package Manager](index_split_007.html#filepos72449),
    [What We Will Build](index_split_027.html#filepos1489666), [Web APIs](index_split_027.html#filepos1504690)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyPy, [Standard Library and Package Manager](index_split_007.html#filepos73085)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PySpark, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: advantages for Excel, [Python for Excel](index_split_007.html#filepos62589)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cross-platform compatibility, [Cross-Platform Compatibility](index_split_007.html#filepos90342)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modern language features, [Modern Language Features](index_split_007.html#filepos80870)-[Modern
    Language Features](index_split_007.html#filepos89951)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: readability, [Readability and Maintainability](index_split_007.html#filepos64414)-[Readability
    and Maintainability](index_split_007.html#filepos71415)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scientific computing, [Scientific Computing](index_split_007.html#filepos76559)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: standard library and package manager, [Standard Library and Package Manager](index_split_007.html#filepos71589)-[Standard
    Library and Package Manager](index_split_007.html#filepos76314)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda distribution (see Anaconda)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean operators, [Booleans](index_split_011.html#filepos205160)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: classes, [Attributes and methods](index_split_011.html#filepos188185)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comments, [Mathematical operators](index_split_011.html#filepos201944)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: control flow
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: code blocks, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: conditional expressions, [The if Statement and Conditional Expressions](index_split_012.html#filepos314525)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos355651)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for loops, [The for and while Loops](index_split_012.html#filepos316683)-[The
    for and while Loops](index_split_012.html#filepos341967)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if statements, [The if Statement and Conditional Expressions](index_split_012.html#filepos306285)-[The
    if Statement and Conditional Expressions](index_split_012.html#filepos316429)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos347118)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pass statement, [Code Blocks and the pass Statement](index_split_011.html#filepos303668)-[Code
    Blocks and the pass Statement](index_split_012.html#filepos306087)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: set comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos358997)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: while loops, [The for and while Loops](index_split_012.html#filepos343907)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data structures
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionaries, [Dictionaries](index_split_011.html#filepos268897)-[Dictionaries](index_split_011.html#filepos285555)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists, [Lists](index_split_011.html#filepos243228)-[Lists](index_split_011.html#filepos268531)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Data Structures](index_split_011.html#filepos242442)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sets, [Sets](index_split_011.html#filepos290624)-[Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: tuples, [Tuples](index_split_011.html#filepos285858)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data types
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean, [Booleans](index_split_011.html#filepos205063)-[Booleans](index_split_011.html#filepos217752)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable versus immutable, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865731)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: numeric, [Numeric Types](index_split_011.html#filepos189160)-[Numeric Types](index_split_011.html#filepos194525)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Data Types](index_split_010.html#filepos180377)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strings, [Strings](index_split_011.html#filepos217986)-[Strings](index_split_011.html#filepos227137)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: functions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: calling, [Functions](index_split_011.html#filepos185990), [Calling functions](index_split_012.html#filepos370297),
    [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: defining, [Defining functions](index_split_012.html#filepos362480)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Functions](index_split_012.html#filepos361996)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: history of, [Why Python for Excel?](index_split_007.html#filepos34260)-[Why
    Python for Excel?](index_split_007.html#filepos35198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indexing, [Indexing](index_split_011.html#filepos228067)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: interactive session
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ending, [Python REPL: An Interactive Python Session](index_split_008.html#filepos118780)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'starting, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115018)-[Python
    REPL: An Interactive Python Session](index_split_008.html#filepos118983)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: line breaks, [Lists](index_split_011.html#filepos253745)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: logarithms in, [Shifting and Percentage Changes](index_split_017.html#filepos810574)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS permissions, [Using Excel as Data Viewer](index_split_024.html#filepos1249144)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mathematical operators, [Mathematical operators](index_split_011.html#filepos196304)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: module search path, [RunPython Function](index_split_026.html#filepos1466429)-[RunPython
    Function](index_split_026.html#filepos1468145), [Settings](index_split_026.html#filepos1483129)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modules
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: datetime module, [The datetime Class](index_split_012.html#filepos392883)-[The
    datetime Class](index_split_012.html#filepos408810), [Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1848019)-[Working with Time-Zone-Aware
    datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing, [Modules and the import Statement](index_split_012.html#filepos376420)-[Modules
    and the import Statement](index_split_012.html#filepos392723)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: timezone module, [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: objects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: attributes and methods, [Attributes and methods](index_split_011.html#filepos187275),
    [Classes and Objects](index_split_031.html#filepos1833311)-[Classes and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: as class instances, [The datetime Class](index_split_012.html#filepos394507)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: classes and, [Classes and Objects](index_split_031.html#filepos1832657)-[Classes
    and Objects](index_split_031.html#filepos1847675)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: help documentation, [Strings](index_split_011.html#filepos225822)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: initialization, [Classes and Objects](index_split_031.html#filepos1837273)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable as function arguments, [Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882799)-[Functions
    with Mutable Objects as Default Arguments](index_split_031.html#filepos1900058)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: mutable versus immutable, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865519)-[Mutable
    vs. Immutable Python Objects](index_split_031.html#filepos1882596)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Objects](index_split_010.html#filepos180908)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: packages, building, [Settings](index_split_026.html#filepos1483129)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PEP 8 style guide
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'examples, [PEP 8: Style Guide for Python Code](index_split_012.html#filepos409133)-[PEP
    8: Style Guide for Python Code](index_split_012.html#filepos425840)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: linting, [PEP 8 and VS Code](index_split_012.html#filepos426221)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Preface](index_split_003.html#filepos9905)-[Preface](index_split_003.html#filepos10584)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: saving files, [UDF Quickstart](index_split_028.html#filepos1674980)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scripts (see scripts)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: slicing, [Slicing](index_split_011.html#filepos233726)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [Variables](index_split_010.html#filepos181374)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: versions of, [Python and Excel Versions](index_split_005.html#filepos19456)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings dependencies, [Python Dependency](index_split_026.html#filepos1472746)-[Python
    Dependency](index_split_026.html#filepos1475110)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'python command, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115104)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Data Analysis Library (see pandas)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Interactive Window (VS Code), [Python Scripts with Code Cells](index_split_030.html#filepos1831056)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python interpreters (xlwings), [Settings](index_split_026.html#filepos1482074)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Package Tracker case study
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: application structure, [Application Structure](index_split_027.html#filepos1601418)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: backend, [Backend](index_split_027.html#filepos1620020)-[Backend](index_split_027.html#filepos1644241)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging, [Debugging](index_split_027.html#filepos1644656)-[Debugging](index_split_027.html#filepos1651460)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: frontend, [Frontend](index_split_027.html#filepos1606230)-[Frontend](index_split_027.html#filepos1619827)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: databases
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: connections, [Database connections](index_split_027.html#filepos1529652)-[Database
    connections](index_split_027.html#filepos1537920)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection, [SQL injection](index_split_027.html#filepos1563158)-[SQL injection](index_split_027.html#filepos1579942)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries, [SQL queries](index_split_027.html#filepos1538233)-[SQL queries](index_split_027.html#filepos1562882)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: structure of, [The Package Tracker database](index_split_027.html#filepos1520310)-[The
    Package Tracker database](index_split_027.html#filepos1529401)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: types of, [Databases](index_split_027.html#filepos1515417)-[Databases](index_split_027.html#filepos1519777)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: error handling, [Exceptions](index_split_027.html#filepos1580257)-[Exceptions](index_split_027.html#filepos1601081)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: packages, adding, [What We Will Build](index_split_027.html#filepos1489144)-[What
    We Will Build](index_split_027.html#filepos1492009)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: web APIs, [Web APIs](index_split_027.html#filepos1492808)-[Web APIs](index_split_027.html#filepos1515072)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python REPL, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115018)-[Python
    REPL: An Interactive Python Session](index_split_008.html#filepos118983)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Tools for Visual Studio (PTVS), [Visual Studio Code](index_split_009.html#filepos159079)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pythonic style, [The if Statement and Conditional Expressions](index_split_012.html#filepos309980)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PYTHONPATH setting (xlwings), [RunPython Function](index_split_026.html#filepos1466429)-[RunPython
    Function](index_split_026.html#filepos1468145), [Settings](index_split_026.html#filepos1483129),
    [UDF Quickstart](index_split_028.html#filepos1676726)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pytrends, [Package Managers: Conda and pip](index_split_008.html#filepos125608),
    [Fetching Data from Google Trends](index_split_028.html#filepos1715202)-[Fetching
    Data from Google Trends](index_split_028.html#filepos1738598)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pyxlsb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'installing, [Package Managers: Conda and pip](index_split_008.html#filepos125608)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading files, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos926988),
    [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Q
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: queries (SQL), [SQL queries](index_split_027.html#filepos1538233)-[SQL queries](index_split_027.html#filepos1562882)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command (xlwings), [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: importing UDFs, [UDF Quickstart](index_split_028.html#filepos1657477)-[UDF Quickstart](index_split_028.html#filepos1679023)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function and, [RunPython Function](index_split_026.html#filepos1459577)-[RunPython
    Function](index_split_026.html#filepos1468568)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'quit command, [Python REPL: An Interactive Python Session](index_split_008.html#filepos118780)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: random numbers, generating, [Useful Array Constructors](index_split_014.html#filepos473280)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: range function, [The for and while Loops](index_split_012.html#filepos322530)-[The
    for and while Loops](index_split_012.html#filepos328659)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: range object (xlwings), [The Excel Object Model](index_split_024.html#filepos1265312)-[The
    Excel Object Model](index_split_024.html#filepos1293849)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converters, [Converters and Options](index_split_025.html#filepos1340690)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: options, [Converters and Options](index_split_025.html#filepos1345103)-[Converters
    and Options](index_split_025.html#filepos1366895)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: raw strings, [Exporting CSV Files](index_split_016.html#filepos747454)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: raw values, [Raw values](index_split_025.html#filepos1424751), [Using raw values](index_split_028.html#filepos1770837)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: read function (excel.py), [The excel.py Module](index_split_021.html#filepos976882)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: readability of Python, [Readability and Maintainability](index_split_007.html#filepos64414)-[Readability
    and Maintainability](index_split_007.html#filepos71415)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reader/writer packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: excel.py module, [The excel.py Module](index_split_021.html#filepos972622)-[The
    excel.py Module](index_split_021.html#filepos980989)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Formatting a DataFrame’s data part](index_split_022.html#filepos1230090)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenPyXL, [OpenPyXL](index_split_021.html#filepos981782)-[Editing with OpenPyXL](index_split_021.html#filepos1039562)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: optimization for big files, [Working with Big Excel Files](index_split_022.html#filepos1125159)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: pyxlsb, [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos962384)-[When
    to Use Which Package](index_split_021.html#filepos972372)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlrd, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading with
    xlrd](index_split_021.html#filepos1099832)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlutils, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwt, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing with
    xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames in Excel with xlwings, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: files (Excel)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations in pandas, [Limitations When Using pandas with Excel Files](index_split_019.html#filepos957495)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Reading with OpenPyXL](index_split_021.html#filepos982131)-[Writing
    with OpenPyXL](index_split_021.html#filepos996210), [Reading with OpenPyXL](index_split_022.html#filepos1141062)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pandas, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos886398)-[The
    read_excel Function and ExcelFile Class](index_split_019.html#filepos935481)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in parallel, [Reading sheets in parallel](index_split_022.html#filepos1144410)-[Reading
    sheets in parallel](index_split_022.html#filepos1157423)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: programming Excel versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pyxlsb, [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: from URLs, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos922687)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlrd, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading
    with xlrd](index_split_021.html#filepos1099832), [Reading with xlrd](index_split_022.html#filepos1134915)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: read_csv function (pandas), [Importing CSV Files](index_split_016.html#filepos748628)-[Importing
    CSV Files](index_split_016.html#filepos764876), [Creating a DatetimeIndex](index_split_017.html#filepos786030)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'read_excel function (pandas), [DataFrame and Series](index_split_015.html#filepos486309),
    [Case Study: Excel Reporting](index_split_019.html#filepos866436), [The read_excel
    Function and ExcelFile Class](index_split_019.html#filepos886398)-[The read_excel
    Function and ExcelFile Class](index_split_019.html#filepos935481), [When to Use
    Which Package](index_split_021.html#filepos971083)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rebasing in time series analysis, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: recalculating functions (Excel), [UDF Quickstart](index_split_028.html#filepos1671914)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: records (databases), [The Package Tracker database](index_split_027.html#filepos1527951)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'recursive globbing, [Case Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis, [Databases](index_split_027.html#filepos1518942)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regional settings (Excel), [The Excel Object Model](index_split_024.html#filepos1254107)-[The
    Excel Object Model](index_split_024.html#filepos1255983)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reindex method (pandas), [Index](index_split_015.html#filepos507287)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relational databases, [Databases](index_split_027.html#filepos1515821)-[Databases](index_split_027.html#filepos1519443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: relative paths, [Anaconda Prompt](index_split_008.html#filepos112263), [Backend](index_split_027.html#filepos1638593)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: duplicate data (pandas), [Duplicate Data](index_split_015.html#filepos609015)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: missing data rows (pandas), [Missing Data](index_split_015.html#filepos602631)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: renaming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns (pandas), [Columns](index_split_015.html#filepos515814)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks, [Running Jupyter Notebooks](index_split_008.html#filepos134176)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reordering columns (pandas), [Columns](index_split_015.html#filepos521832)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replace method (pandas), [Setting data by replacing values](index_split_015.html#filepos589430)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing values (pandas), setting data by, [Setting data by replacing values](index_split_015.html#filepos589332)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'reporting case study (Excel), [Case Study: Excel Reporting](index_split_019.html#filepos864531)-[Case
    Study: Excel Reporting](index_split_019.html#filepos885516), [Case Study (Revisited):
    Excel Reporting](index_split_022.html#filepos1232433), [Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1400987)-[Case Study (Re-Revisited):
    Excel Reporting](index_split_025.html#filepos1409826)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: representational state transfer (REST) API, [Web APIs](index_split_027.html#filepos1503021)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requests package, [Web APIs](index_split_027.html#filepos1506175)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: required arguments (for functions), [Defining functions](index_split_012.html#filepos364602)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resample method (pandas), [Resampling](index_split_017.html#filepos847388)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resampling in time series analysis, [Resampling](index_split_017.html#filepos847003)-[Resampling](index_split_017.html#filepos854741)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: resetting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indices (pandas), [Index](index_split_015.html#filepos502052)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: MultiIndexes (pandas), [Selecting by using a MultiIndex](index_split_015.html#filepos573635)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reset_index method (pandas), [Index](index_split_015.html#filepos502052)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reshape function (NumPy), [Useful Array Constructors](index_split_014.html#filepos471368)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'resolve method (Path class), [Case Study: Excel Reporting](index_split_019.html#filepos882885)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST (representational state transfer) API, [Web APIs](index_split_027.html#filepos1503021)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart button (VS Code debugger), [Debugger](index_split_030.html#filepos1824818)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return decorators (xlwings), [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1709547),
    [The Sub Decorator](index_split_028.html#filepos1801826)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: return statement (for functions), [Defining functions](index_split_012.html#filepos365301)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: revenues.py example, [Minimize cross-application calls](index_split_028.html#filepos1764661)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'rglob method (Path class), [Case Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right joins, [Joining and Merging](index_split_016.html#filepos669071)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rolling method (pandas), [Rolling Windows](index_split_017.html#filepos855557)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rolling windows in time series analysis, [Rolling Windows](index_split_017.html#filepos855004)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run File button (VS Code), [Running a Python Script](index_split_009.html#filepos171481)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run main button (xlwings), [Run Main](index_split_026.html#filepos1449910)-[Run
    Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: run order of Jupyter notebook cells, [Run Order Matters](index_split_009.html#filepos145168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda Prompt
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in macOS, [Anaconda Prompt](index_split_008.html#filepos104346)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Windows, [Anaconda Prompt](index_split_008.html#filepos103402)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: code from text editor, [Visual Studio Code](index_split_009.html#filepos155991)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks, [Running Jupyter Notebooks](index_split_008.html#filepos132444)-[Running
    Jupyter Notebooks](index_split_008.html#filepos134424), [Run Jupyter Notebooks](index_split_030.html#filepos1826689)-[Run
    Jupyter Notebooks](index_split_030.html#filepos1829065)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macros (Excel), [RunPython Function](index_split_026.html#filepos1462470)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scripts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing modules versus, [Backend](index_split_027.html#filepos1641594)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VS Code, [Running a Python Script](index_split_009.html#filepos165121)-[Running
    a Python Script](index_split_009.html#filepos172327)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VBA code in xlwings, [Running VBA Code](index_split_024.html#filepos1313318)-[Running
    VBA Code](index_split_025.html#filepos1322929)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code in Anaconda Prompt, [Running a Python Script](index_split_009.html#filepos165226)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function (xlwings), [RunPython Function](index_split_026.html#filepos1459375)-[RunPython
    without quickstart command](index_split_026.html#filepos1471460), [Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'sales_report_openpyxl.py, [Case Study (Revisited): Excel Reporting](index_split_022.html#filepos1233238)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sales_report_pandas.py example, [Case Study: Excel Reporting](index_split_019.html#filepos871006)-[Case
    Study: Excel Reporting](index_split_019.html#filepos884117)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sales_report_xlsxwriter.py, [Case Study (Revisited): Excel Reporting](index_split_022.html#filepos1233238)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'sales_report_xlwings.py example, [Case Study (Re-Revisited): Excel Reporting](index_split_025.html#filepos1403162)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sandboxed environments, [The Excel Object Model](index_split_024.html#filepos1253282),
    [The Excel Object Model](index_split_024.html#filepos1309403)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: saving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks in VS Code, [Run Jupyter Notebooks](index_split_030.html#filepos1828008)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python files, [UDF Quickstart](index_split_028.html#filepos1674980)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scalars, [Vectorization and Broadcasting](index_split_014.html#filepos449798)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scientific computing in Python, [Scientific Computing](index_split_007.html#filepos76559)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebook cells in, [Python Scripts with Code Cells](index_split_030.html#filepos1829327)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: namespaces of, [Modules and the import Statement](index_split_012.html#filepos391305)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: naming, [Modules and the import Statement](index_split_012.html#filepos392387)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing modules versus, [Backend](index_split_027.html#filepos1641594)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in VS Code, [Running a Python Script](index_split_009.html#filepos165121)-[Running
    a Python Script](index_split_009.html#filepos172327)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: scrolling through command history, [Anaconda Prompt](index_split_008.html#filepos113245)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seaborn, [Plotly](index_split_016.html#filepos738741)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: selecting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: columns (pandas), [Selecting by label](index_split_015.html#filepos537621)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by boolean indexing, [Selecting by boolean indexing](index_split_015.html#filepos549780)-[Selecting
    by boolean indexing](index_split_015.html#filepos567453)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by label, [Selecting by label](index_split_015.html#filepos525461)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with MultiIndexes, [Selecting by using a MultiIndex](index_split_015.html#filepos567793)-[Selecting
    by using a MultiIndex](index_split_015.html#filepos575571)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by position, [Selecting by position](index_split_015.html#filepos539083)-[Selecting
    by position](index_split_015.html#filepos549467)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: self argument (classes), [Classes and Objects](index_split_031.html#filepos1837508)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: separation of concerns, [Separation of concerns](index_split_007.html#filepos41610)-[Separation
    of concerns](index_split_007.html#filepos45911), [Application Structure](index_split_027.html#filepos1601989)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arithmetic operations, [Arithmetic Operations](index_split_015.html#filepos628066)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames versus, [DataFrame and Series](index_split_015.html#filepos484520)-[DataFrame
    and Series](index_split_015.html#filepos485550), [Selecting by label](index_split_015.html#filepos536695)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: descriptive statistics, [Descriptive Statistics](index_split_016.html#filepos691290)-[Descriptive
    Statistics](index_split_016.html#filepos695190)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: set comprehensions, [List, Dictionary, and Set Comprehensions](index_split_012.html#filepos358997)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set constructor, [Sets](index_split_011.html#filepos291512)-[Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set-based languages, [SQL queries](index_split_027.html#filepos1540168)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sets, [Sets](index_split_011.html#filepos290624)-[Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array elements (NumPy), [Getting and Setting Array Elements](index_split_014.html#filepos463404)-[Getting
    and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrame data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by adding columns, [Setting data by adding a new column](index_split_015.html#filepos592331)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by boolean indexing, [Setting data by boolean indexing](index_split_015.html#filepos582259)-[Setting
    data by boolean indexing](index_split_015.html#filepos589159)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by label, [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by position, [Setting data by label or position](index_split_015.html#filepos576247)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: by replacing values, [Setting data by replacing values](index_split_015.html#filepos589332)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices (pandas), [Index](index_split_015.html#filepos502052)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: settings for xlwings deployment, [Settings](index_split_026.html#filepos1480593)-[Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set_index method (pandas), [Index](index_split_015.html#filepos502108)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shallow copies, [Mutable vs. Immutable Python Objects](index_split_031.html#filepos1881031)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sheet object (xlwings), [The Excel Object Model](index_split_024.html#filepos1253502),
    [The Excel Object Model](index_split_024.html#filepos1281618)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sheets (see files)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shift method (pandas), [Shifting and Percentage Changes](index_split_017.html#filepos811119)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shifting in time series analysis, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show Console checkbox (xlwings add-in), [Debugging](index_split_027.html#filepos1650611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shutting down Jupyter notebooks, [Shutting Down Jupyter Notebooks](index_split_009.html#filepos149871)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: significant white space, [Code Blocks and the pass Statement](index_split_011.html#filepos304028)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: simple returns, [Shifting and Percentage Changes](index_split_017.html#filepos818833)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: single-clicking in VS Code, [Running a Python Script](index_split_009.html#filepos172252)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: slicing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: arrays (NumPy), [Getting and Setting Array Elements](index_split_014.html#filepos463404)-[Getting
    and Setting Array Elements](index_split_014.html#filepos470575)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with labels (pandas), [Selecting by label](index_split_015.html#filepos531987)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python, [Slicing](index_split_011.html#filepos233726)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: range objects (xlwings), [The Excel Object Model](index_split_024.html#filepos1276198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sorting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: indices (pandas), [Index](index_split_015.html#filepos509482)-[Index](index_split_015.html#filepos512499)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: lists, [Lists](index_split_011.html#filepos262598)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sort_index method (pandas), [Index](index_split_015.html#filepos509482)-[Index](index_split_015.html#filepos512499)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: source control, [Version control](index_split_007.html#filepos51713)-[Version
    control](index_split_007.html#filepos57576)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spaghetti code, [Modern Language Features](index_split_007.html#filepos89417)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: spreadsheets (Excel), DataFrames versus, [DataFrame and Series](index_split_015.html#filepos485631)-[DataFrame
    and Series](index_split_015.html#filepos489337)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spyder, [Running a Python Script](index_split_009.html#filepos175133)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection, [SQL injection](index_split_027.html#filepos1563158)-[SQL injection](index_split_027.html#filepos1579942)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries, [SQL queries](index_split_027.html#filepos1538233)-[SQL queries](index_split_027.html#filepos1562882)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server, [Databases](index_split_027.html#filepos1516369)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLAlchemy, [Database connections](index_split_027.html#filepos1529652)-[Database
    connections](index_split_027.html#filepos1537920)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enforcing foreign keys, [SQL queries](index_split_027.html#filepos1562373)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection, [SQL injection](index_split_027.html#filepos1579180)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite, [Databases](index_split_027.html#filepos1515821)-[Databases](index_split_027.html#filepos1519443)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: foreign keys in, [SQL queries](index_split_027.html#filepos1562373)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: replacing with PostgreSQL, [Backend](index_split_027.html#filepos1643404)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code extension, [The Package Tracker database](index_split_027.html#filepos1529158)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'standalone workbooks (xlwings), [Standalone Workbooks: Getting Rid of the xlwings
    Add-in](index_split_026.html#filepos1475399)-[Standalone Workbooks: Getting Rid
    of the xlwings Add-in](index_split_026.html#filepos1477920)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: standard library (Python), [Standard Library and Package Manager](index_split_007.html#filepos71589)-[Standard
    Library and Package Manager](index_split_007.html#filepos76314)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'starting interactive Python session, [Python REPL: An Interactive Python Session](index_split_008.html#filepos115018)-[Python
    REPL: An Interactive Python Session](index_split_008.html#filepos118983)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stateless resources, [Web APIs](index_split_027.html#filepos1503328)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status Bar (VS Code), [Installation and Configuration](index_split_009.html#filepos162761)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Into button (VS Code debugger), [Debugger](index_split_030.html#filepos1824213)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Out button (VS Code debugger), [Debugger](index_split_030.html#filepos1824584)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Over button (VS Code debugger), [Debugger](index_split_030.html#filepos1823834)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop button (VS Code debugger), [Debugger](index_split_030.html#filepos1825010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: storing VBA functions, [Running VBA Code](index_split_025.html#filepos1322194)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strftime method, [The datetime Class](index_split_012.html#filepos404852)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strings, [Strings](index_split_011.html#filepos217986)-[Strings](index_split_011.html#filepos227137)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting to datetime data type, [Creating a DatetimeIndex](index_split_017.html#filepos783176)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting in DataFrames, [Applying a Function](index_split_015.html#filepos641289)-[Applying
    a Function](index_split_015.html#filepos645020)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: methods in DataFrames, [Working with Text Columns](index_split_015.html#filepos634000)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: raw strings, [Exporting CSV Files](index_split_016.html#filepos747454)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: strip method (pandas), [Working with Text Columns](index_split_015.html#filepos634575)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: strptime method, [The datetime Class](index_split_012.html#filepos404852)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: style guide for Python (see PEP 8 style guide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: style property (DataFrames), [Formatting a DataFrame’s data part](index_split_022.html#filepos1221911)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: styleframe, [Formatting a DataFrame’s data part](index_split_022.html#filepos1231558)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sub decorator (xlwings), [The Sub Decorator](index_split_028.html#filepos1795393)-[The
    Sub Decorator](index_split_028.html#filepos1804381)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sublime Text, [Running a Python Script](index_split_009.html#filepos173298)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: sum universal function (NumPy), [Universal Functions (ufunc)](index_split_014.html#filepos460116)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: switching reader/writer packages, [The excel.py Module](index_split_021.html#filepos973335)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: syntax highlighting, [Notebook Cells](index_split_009.html#filepos136864), [Visual
    Studio Code](index_split_009.html#filepos155225)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: table joins, [Databases](index_split_027.html#filepos1517665)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tables in Python Package Tracker, [Frontend](index_split_027.html#filepos1613315)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tail method (pandas), [Importing CSV Files](index_split_016.html#filepos750501)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temperature.py example, [Modules and the import Statement](index_split_012.html#filepos377100)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal (macOS), [Anaconda Prompt](index_split_008.html#filepos102144)-[Anaconda
    Prompt](index_split_008.html#filepos104346)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation of Conda environment, [Disable Auto Activation](index_split_029.html#filepos1819954)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ternary operators, [The if Statement and Conditional Expressions](index_split_012.html#filepos314525)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: testing, [Testing](index_split_007.html#filepos48860)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text columns in DataFrames, [Working with Text Columns](index_split_015.html#filepos634000)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: list of, [Running a Python Script](index_split_009.html#filepos172984)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code (see VS Code)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: text function (SQLAlchemy), [SQL injection](index_split_027.html#filepos1579180)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '%%time cell magic, [Reading sheets in parallel](index_split_022.html#filepos1147874)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: time series analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: correlation, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DatetimeIndex (pandas)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: creating, [Creating a DatetimeIndex](index_split_017.html#filepos770795)-[Creating
    a DatetimeIndex](index_split_017.html#filepos794737)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: filtering, [Filtering a DatetimeIndex](index_split_017.html#filepos794993)-[Filtering
    a DatetimeIndex](index_split_017.html#filepos798956)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time zones in, [Working with Time Zones](index_split_017.html#filepos799257)-[Working
    with Time Zones](index_split_017.html#filepos808759)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel limitations, [Time Series Analysis with pandas](index_split_017.html#filepos768348)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: percentage change, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: rebasing, [Rebasing and Correlation](index_split_017.html#filepos822133)-[Rebasing
    and Correlation](index_split_017.html#filepos846848)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: resampling, [Resampling](index_split_017.html#filepos847003)-[Resampling](index_split_017.html#filepos854741)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: rolling windows, [Rolling Windows](index_split_017.html#filepos855004)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: shifting, [Shifting and Percentage Changes](index_split_017.html#filepos809588)-[Shifting
    and Percentage Changes](index_split_017.html#filepos821793)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: time series, purpose of, [Time Series Analysis with pandas](index_split_017.html#filepos767771)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: time zones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in DatetimeIndex (pandas), [Working with Time Zones](index_split_017.html#filepos799257)-[Working
    with Time Zones](index_split_017.html#filepos808759)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: in Python, [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1848019)-[Working
    with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '%%timeit cell magic, [Reading sheets in parallel](index_split_022.html#filepos1148960)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: timezone module, [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1862968)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: titles, adding to DataFrames, [Formatting DataFrames in Excel](index_split_022.html#filepos1162787)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to_datetime function (pandas), [Creating a DatetimeIndex](index_split_017.html#filepos783272)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to_excel method (pandas), [The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935768)-[The
    to_excel Method and ExcelWriter Class](index_split_019.html#filepos953568), [When
    to Use Which Package](index_split_021.html#filepos971083)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: transposing DataFrames, [Columns](index_split_015.html#filepos520188)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: True boolean data type, [Booleans](index_split_011.html#filepos205063)-[Booleans](index_split_011.html#filepos217752)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: try/except statements, [Exceptions](index_split_027.html#filepos1580257)-[Exceptions](index_split_027.html#filepos1601081)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tuple constructor, [Sets](index_split_011.html#filepos302517)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tuples, [Tuples](index_split_011.html#filepos285858)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: two-dimensional NumPy arrays, [NumPy Array](index_split_014.html#filepos439635)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type annotations, [Type Hints](index_split_012.html#filepos427923)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: type hints, [Type Hints](index_split_012.html#filepos427923)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tz_convert method (pandas), [Working with Time Zones](index_split_017.html#filepos805006)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: tz_localize method (pandas), [Working with Time Zones](index_split_017.html#filepos799539)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: U
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: UDFs (user-defined functions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging, [Debugging UDFs](index_split_028.html#filepos1755260)-[Debugging
    UDFs](index_split_028.html#filepos1760605)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Trends case study
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames and dynamic arrays, [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682486)-[Working
    with DataFrames and Dynamic Arrays](index_split_028.html#filepos1714516)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: explanation of Google Trends, [Introduction to Google Trends](index_split_028.html#filepos1680082)-[Introduction
    to Google Trends](index_split_028.html#filepos1682295)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: fetching data, [Fetching Data from Google Trends](index_split_028.html#filepos1714798)-[Fetching
    Data from Google Trends](index_split_028.html#filepos1741590)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: plotting data, [Plotting with UDFs](index_split_028.html#filepos1741829)-[Plotting
    with UDFs](index_split_028.html#filepos1754939)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: importing, [UDF Quickstart](index_split_028.html#filepos1657477)-[UDF Quickstart](index_split_028.html#filepos1679023)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: performance optimization of
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: caching, [Caching](index_split_028.html#filepos1775539)-[Caching](index_split_028.html#filepos1794980)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: minimizing cross-application calls (xlwings), [Minimize cross-application calls](index_split_028.html#filepos1762196)-[Minimize
    cross-application calls](index_split_028.html#filepos1770595)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: raw values, [Using raw values](index_split_028.html#filepos1770837)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: requirements for, [Getting Started with UDFs](index_split_028.html#filepos1655193)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sub decorator, [The Sub Decorator](index_split_028.html#filepos1795393)-[The
    Sub Decorator](index_split_028.html#filepos1804381)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ufuncs (universal functions in NumPy), [Universal Functions (ufunc)](index_split_014.html#filepos454337)-[Universal
    Functions (ufunc)](index_split_014.html#filepos462582)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UIs (see frontends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UNIQUE function (Excel), [Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1712408)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unit tests, [Testing](index_split_007.html#filepos48860)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: universal functions (NumPy), [Universal Functions (ufunc)](index_split_014.html#filepos454337)-[Universal
    Functions (ufunc)](index_split_014.html#filepos462582)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unpacking dictionaries, [Dictionaries](index_split_011.html#filepos275528)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'update method (xlwings), [Pictures: Matplotlib plots](index_split_025.html#filepos1385886)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updating xlwings, [Excel Add-in](index_split_026.html#filepos1443233)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: uppercase, transforming to/from lowercase, [Strings](index_split_011.html#filepos224113)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: upsampling, [Resampling](index_split_017.html#filepos847090)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URLs, reading files from, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos922687)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: used range, [Reading with xlrd](index_split_021.html#filepos1099306)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user interfaces (see frontends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined functions (see UDFs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UTC (Coordinated Universal Time), [Working with Time Zones](index_split_017.html#filepos805006),
    [Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1848164)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: V
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Vaex, [Limitations with pandas](index_split_017.html#filepos861209)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: validating data in Python Package Tracker, [Frontend](index_split_027.html#filepos1614044)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: values (pandas), setting data by replacing, [Setting data by replacing values](index_split_015.html#filepos589332)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable explorer (Jupyter notebooks), [Run Jupyter Notebooks](index_split_030.html#filepos1827392)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [Variables](index_split_010.html#filepos181374)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VBA (Visual Basic for Applications), [Preface](index_split_003.html#filepos9501)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add-ins, [DRY principle](index_split_007.html#filepos47157)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ByRef and ByVal function arguments, [Calling Functions with Mutable Objects
    as Arguments](index_split_031.html#filepos1882872)-[Calling Functions with Mutable
    Objects as Arguments](index_split_031.html#filepos1887586)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Case statement, [Dictionaries](index_split_011.html#filepos282660)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: code blocks, [Code Blocks and the pass Statement](index_split_011.html#filepos305198)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: counter variables in loops, [The for and while Loops](index_split_012.html#filepos340077)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data structures, [Data Structures](index_split_011.html#filepos242442)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Each statement, [The for and while Loops](index_split_012.html#filepos319389)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: functions, [DRY principle](index_split_007.html#filepos46886), [Running VBA
    Code](index_split_025.html#filepos1322194)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indexing, [Indexing](index_split_011.html#filepos228929)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: modern language features, [Modern Language Features](index_split_007.html#filepos80870)-[Modern
    Language Features](index_split_007.html#filepos89951)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: readability, [Readability and Maintainability](index_split_007.html#filepos64905)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running in xlwings, [Running VBA Code](index_split_024.html#filepos1313318)-[Running
    VBA Code](index_split_025.html#filepos1322929)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function, [RunPython Function](index_split_026.html#filepos1459375)-[RunPython
    without quickstart command](index_split_026.html#filepos1471460), [Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust access to VBA project model setting, [Getting Started with UDFs](index_split_028.html#filepos1656916)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: variables, [Variables](index_split_010.html#filepos183010)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With statement, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos910651)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: wrapper functions, [UDF Quickstart](index_split_028.html#filepos1670563)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings range object versus, [The Excel Object Model](index_split_024.html#filepos1265312)-[The
    Excel Object Model](index_split_024.html#filepos1293849)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VCS (version control system), [Version control](index_split_007.html#filepos51880)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vectorization, [Vectorization and Broadcasting](index_split_014.html#filepos448254)-[Vectorization
    and Broadcasting](index_split_014.html#filepos453983), [Data Analysis with pandas](index_split_015.html#filepos483705),
    [Arithmetic Operations](index_split_015.html#filepos617425)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: version control, [Version control](index_split_007.html#filepos51713)-[Version
    control](index_split_007.html#filepos57576), [Visual Studio Code](index_split_009.html#filepos156579)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'of packages, [Package Managers: Conda and pip](index_split_008.html#filepos126480)-[Conda
    Environments](index_split_008.html#filepos127438)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: of Windows, determining, [Installation](index_split_008.html#filepos100180)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: view function (xlwings), [Using Excel as Data Viewer](index_split_024.html#filepos1239513)-[Using
    Excel as Data Viewer](index_split_024.html#filepos1248699)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: viewing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: current directory in macOS, [Anaconda Prompt](index_split_008.html#filepos105254)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: file extensions, [Anaconda Prompt](index_split_008.html#filepos113417)-[Anaconda
    Prompt](index_split_008.html#filepos114549)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: views, copies versus, [View vs. Copy](index_split_014.html#filepos475259)-[View
    vs. Copy](index_split_014.html#filepos480562), [View vs. Copy](index_split_015.html#filepos649623)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vim, [Running a Python Script](index_split_009.html#filepos174170)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: virtual environments, [Conda Environments](index_split_008.html#filepos128407)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VisiCalc, [Why Python for Excel?](index_split_007.html#filepos33925)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Basic for Applications (see VBA)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio, [Visual Studio Code](index_split_009.html#filepos159079)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: volatile functions (Excel), [UDF Quickstart](index_split_028.html#filepos1673786)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code (Visual Studio Code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: advantages, [Visual Studio Code](index_split_009.html#filepos153777)-[Visual
    Studio Code](index_split_009.html#filepos159324)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: comments, [Mathematical operators](index_split_011.html#filepos204466)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: components of, [Development Environment](index_split_008.html#filepos98339)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, [Installation and Configuration](index_split_009.html#filepos160636)-[Installation
    and Configuration](index_split_009.html#filepos164899)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: debugging with, [Debugging](index_split_027.html#filepos1648684), [Debugging
    UDFs](index_split_028.html#filepos1758990), [Debugger](index_split_030.html#filepos1821433)-[Debugger](index_split_030.html#filepos1825904)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [Installation and Configuration](index_split_009.html#filepos159642)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter notebooks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running, [Run Jupyter Notebooks](index_split_030.html#filepos1826689)-[Run Jupyter
    Notebooks](index_split_030.html#filepos1829065)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: saving, [Run Jupyter Notebooks](index_split_030.html#filepos1828008)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: linting, [PEP 8 and VS Code](index_split_012.html#filepos426221)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Development Environment](index_split_008.html#filepos98029)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python scripts, running, [Running a Python Script](index_split_009.html#filepos165121)-[Running
    a Python Script](index_split_009.html#filepos172327)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run File button, [Running a Python Script](index_split_009.html#filepos171481)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: running in Anaconda Prompt, [Running a Python Script](index_split_009.html#filepos165226)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: single-clicking in, [Running a Python Script](index_split_009.html#filepos172252)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite extension, [The Package Tracker database](index_split_027.html#filepos1529158)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio versus, [Visual Studio Code](index_split_009.html#filepos159079)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: W
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: wall time, [Reading sheets in parallel](index_split_022.html#filepos1148285)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web APIs, [Web APIs](index_split_027.html#filepos1492808)-[Web APIs](index_split_027.html#filepos1515072)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: while loops, [The for and while Loops](index_split_012.html#filepos343907)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: white space, [Code Blocks and the pass Statement](index_split_011.html#filepos304028)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ActiveX controls, [RunPython Function](index_split_026.html#filepos1464639)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Anaconda Prompt, running, [Anaconda Prompt](index_split_008.html#filepos103402)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Command Prompt, [Anaconda Prompt](index_split_008.html#filepos102144)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: disabling auto activation of Conda environment, [Disable Auto Activation](index_split_029.html#filepos1818813)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: current directory, listing files in, [Anaconda Prompt](index_split_008.html#filepos110263)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: extracting macro code (Xlsxwriter), [XlsxWriter](index_split_021.html#filepos1064950)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: file extensions, viewing, [Anaconda Prompt](index_split_008.html#filepos114224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: file paths as raw strings, [Exporting CSV Files](index_split_016.html#filepos747454)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Form Controls (Excel), [RunPython Function](index_split_026.html#filepos1464639)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: frozen executables, [Python Dependency](index_split_026.html#filepos1475043)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: list separators (Excel), changing, [The Excel Object Model](index_split_024.html#filepos1254821)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Show Console checkbox (xlwings add-in), [Debugging](index_split_027.html#filepos1650611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use UDF Server, [Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined functions (see UDFs)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: configuring, [Installation and Configuration](index_split_009.html#filepos164382)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing, [Installation and Configuration](index_split_009.html#filepos160121)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings dependencies, [xlwings Foundations](index_split_025.html#filepos1411455)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: zombie processes, [xlwings Foundations](index_split_025.html#filepos1412114)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wing Python IDE, [Running a Python Script](index_split_009.html#filepos175986)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WinPython, [Python Dependency](index_split_026.html#filepos1473728)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with statement, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos910651)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wrapper VBA functions, [UDF Quickstart](index_split_028.html#filepos1670563)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: write function (excel.py), [The excel.py Module](index_split_021.html#filepos977466)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: writer packages (see reader/writer packages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames to Excel with xlwings, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: files (Excel)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limitations in pandas, [Limitations When Using pandas with Excel Files](index_split_019.html#filepos957495)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with OpenPyXL, [Writing with OpenPyXL](index_split_021.html#filepos996317)-[Writing
    with OpenPyXL](index_split_021.html#filepos1032891), [Writing with OpenPyXL](index_split_022.html#filepos1126036)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with pandas, [The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935768)-[The
    to_excel Method and ExcelWriter Class](index_split_019.html#filepos953568)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: programming Excel versus, [How This Book Is Organized](index_split_005.html#filepos18185)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with XlsxWriter, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941),
    [Writing with XlsxWriter](index_split_022.html#filepos1130359)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: with xlwt, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing
    with xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: X
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: xlrd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parallelization, [Reading sheets in parallel](index_split_022.html#filepos1153795)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: reading files, [Reading with xlrd](index_split_021.html#filepos1085917)-[Reading
    with xlrd](index_split_021.html#filepos1099832), [Reading with xlrd](index_split_022.html#filepos1134915)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xls files, reading/writing/editing, [xlrd, xlwt, and xlutils](index_split_021.html#filepos1085017)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xlsb files, reading, [The read_excel Function and ExcelFile Class](index_split_019.html#filepos925712),
    [pyxlsb](index_split_021.html#filepos1071930)-[pyxlsb](index_split_021.html#filepos1083611)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xlsm files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: enabling macros, [RunPython Function](index_split_026.html#filepos1459885)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: extracting macro code (Xlsxwriter), [XlsxWriter](index_split_021.html#filepos1064438)-[XlsxWriter](index_split_021.html#filepos1066693)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: XlsxWriter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: formatting DataFrames
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: data parts, [Formatting a DataFrame’s data part](index_split_022.html#filepos1215478)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: indices and headers, [Formatting a DataFrame’s index and headers](index_split_022.html#filepos1190749)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenPyXL versus, [When to Use Which Package](index_split_020.html#filepos968476)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: writing files, [XlsxWriter](index_split_021.html#filepos1039708)-[XlsxWriter](index_split_021.html#filepos1066941),
    [Writing with XlsxWriter](index_split_022.html#filepos1130359)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xltrail, [Version control](index_split_007.html#filepos56694)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xlutils
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: editing files, [Editing with xlutils](index_split_022.html#filepos1119688)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'installing, [Package Managers: Conda and pip](index_split_008.html#filepos125084),
    [xlrd, xlwt, and xlutils](index_split_021.html#filepos1085435)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: charts (Excel), creating, [Excel charts](index_split_025.html#filepos1368049)-[Excel
    charts](index_split_025.html#filepos1374395)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: converters, [Converters and Options](index_split_025.html#filepos1340690)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DataFrames, reading/writing in Excel, [Working with DataFrames](index_split_025.html#filepos1324128)-[Working
    with DataFrames](index_split_025.html#filepos1340369)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: defined names (Excel), creating, [Defined names](index_split_025.html#filepos1390078)-[Defined
    names](index_split_025.html#filepos1400526)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: dependencies, [xlwings Foundations](index_split_025.html#filepos1410868)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: deployment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: configuration hierarchy, [Configuration Hierarchy](index_split_026.html#filepos1478189)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python dependencies, [Python Dependency](index_split_026.html#filepos1472746)-[Python
    Dependency](index_split_026.html#filepos1475110)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: settings, [Settings](index_split_026.html#filepos1480593)-[Settings](index_split_026.html#filepos1484138)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'standalone workbooks, [Standalone Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1475399)-[Standalone
    Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1477920)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel as data viewer, [Using Excel as Data Viewer](index_split_024.html#filepos1239513)-[Using
    Excel as Data Viewer](index_split_024.html#filepos1248699)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel as frontend
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: installing xlwings add-in, [Excel Add-in](index_split_026.html#filepos1442113)-[Excel
    Add-in](index_split_026.html#filepos1447961)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Using Excel as Frontend with xlwings](index_split_026.html#filepos1440971)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command, [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run main button, [Run Main](index_split_026.html#filepos1449910)-[Run Main](index_split_026.html#filepos1458891)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RunPython function, [RunPython Function](index_split_026.html#filepos1459375)-[RunPython
    without quickstart command](index_split_026.html#filepos1471460)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel dependency, [When to Use Which Package](index_split_021.html#filepos969891)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel object model and, [The Excel Object Model](index_split_024.html#filepos1250235)-[The
    Excel Object Model](index_split_024.html#filepos1313152)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS permissions, [Using Excel as Data Viewer](index_split_024.html#filepos1249144)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: missing functionality workarounds, [How to Work Around Missing Functionality](index_split_025.html#filepos1429624)-[How
    to Work Around Missing Functionality](index_split_025.html#filepos1435920)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: performance optimization, [Improving Performance](index_split_025.html#filepos1416353)-[App
    properties](index_split_025.html#filepos1429357)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pictures (Excel), Matplotlib plots as, [Pictures: Matplotlib plots](index_split_025.html#filepos1374823)-[Pictures:
    Matplotlib plots](index_split_025.html#filepos1389691)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Excel Automation](index_split_024.html#filepos1236537)-[Getting
    Started with xlwings](index_split_024.html#filepos1238572)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Package Tracker (see Python Package Tracker)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: range object options, [Converters and Options](index_split_025.html#filepos1345103)-[Converters
    and Options](index_split_025.html#filepos1366895)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Show Console checkbox, [Debugging](index_split_027.html#filepos1650611)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: updating, [Excel Add-in](index_split_026.html#filepos1443233)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: user-defined functions (see UDFs)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VBA code, running, [Running VBA Code](index_split_024.html#filepos1313318)-[Running
    VBA Code](index_split_025.html#filepos1322929)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: addin install command, [Excel Add-in](index_split_026.html#filepos1442590)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: purpose of, [Excel Add-in](index_split_026.html#filepos1444887)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: quickstart command, [Quickstart Command](index_split_026.html#filepos1448302)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwings PRO, [Settings](index_split_026.html#filepos1484297)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: xlwt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when to use, [When to Use Which Package](index_split_020.html#filepos964224)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: writing files, [Writing with xlwt](index_split_022.html#filepos1099995)-[Editing
    with xlutils](index_split_022.html#filepos1119593)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Z
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Zen of Python, [Readability and Maintainability](index_split_007.html#filepos64658)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zero-based indexing, [The Excel Object Model](index_split_024.html#filepos1295706)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zeros, replacing NaN values with, [Arithmetic Operations](index_split_015.html#filepos624230)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zombie processes, [xlwings Foundations](index_split_025.html#filepos1412114)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the Author
  prefs: []
  type: TYPE_NORMAL
- en: Felix Zumstein is creator and maintainer of xlwings, a popular open source package
    that allows the automation of Excel with Python on Windows and macOS. He also
    organizes the xlwings meetups in London and NYC to promote a broad range of innovative
    solutions for Excel.
  prefs: []
  type: TYPE_NORMAL
- en: As CEO of xltrail, a version control system for Excel files, he has talked to
    hundreds of users who use Excel for business critical tasks and has therefore
    gained deep insight into the typical uses cases and issues with Excel across various
    industries.
  prefs: []
  type: TYPE_NORMAL
- en: Colophon
  prefs: []
  type: TYPE_NORMAL
- en: The animal on the cover of Python for Excel is a false coral snake (Anilius
    scytale). This brightly colored snake, also known as the American pipe snake,
    is found in the Guianas region of South America, the Amazon rainforest, and Trinidad
    and Tobago.
  prefs: []
  type: TYPE_NORMAL
- en: The false coral snake grows up to around 70 cm in length and has bright red
    and black bands. Its banded appearance is similar to that of the coral snake,
    from whom it derives one of its common names; however, the false coral snake is
    missing the distinctive yellow bands of the “true” coral snake. Its body has roughly
    the same diameter for most of its length with a very short tail, giving it a tube-like
    appearance. It small eyes are covered by large head scales.
  prefs: []
  type: TYPE_NORMAL
- en: This burrowing snake has been observed to be ovoviviparous. It feeds on beetles,
    amphibians, lizards, fish, and other small snakes. The false coral snake also
    retains spurs, or small protruding bits of bone near its vent, which are vestigial
    traces of hips and occasionally upper leg bones. This feature, along with the
    thick bones and distinctive shape of its skull, makes the false coral snake closely
    resemble snakes’ ancestral, lizard-like condition.
  prefs: []
  type: TYPE_NORMAL
- en: The conservation status of the false coral snake is “Data Deficient,” meaning
    that there is not yet enough information to judge the threat of its extinction.
    Many of the animals on O’Reilly covers are endangered; all of them are important
    to the world.
  prefs: []
  type: TYPE_NORMAL
- en: The cover illustration is by Karen Montgomery, based on a black and white engraving
    from English Cyclopedia Natural History. The cover fonts are Gilroy Semibold and
    Guardian Sans. The text font is Adobe Minion Pro; the heading font is Adobe Myriad
    Condensed; and the code font is Dalton Maag’s Ubuntu Mono.
  prefs: []
  type: TYPE_NORMAL
- en: '[Preface](index_split_003.html#filepos7451)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Why I Wrote This Book](index_split_003.html#filepos10599)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Who This Book Is For](index_split_004.html#filepos12953)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How This Book Is Organized](index_split_005.html#filepos14647)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python and Excel Versions](index_split_005.html#filepos19282)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conventions Used in This Book](index_split_005.html#filepos20494)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Using Code Examples](index_split_005.html#filepos22519)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[O’Reilly Online Learning](index_split_005.html#filepos26099)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How to Contact Us](index_split_005.html#filepos27203)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Acknowledgments](index_split_005.html#filepos29274)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[I. Introduction to Python](index_split_006.html#filepos31953)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[1\. Why Python for Excel?](index_split_007.html#filepos32075)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Excel Is a Programming Language](index_split_007.html#filepos35568)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Excel in the News](index_split_007.html#filepos38474)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Programming Best Practices](index_split_007.html#filepos41058)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modern Excel](index_split_007.html#filepos57974)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python for Excel](index_split_007.html#filepos62423)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Readability and Maintainability](index_split_007.html#filepos64265)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Standard Library and Package Manager](index_split_007.html#filepos71431)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Scientific Computing](index_split_007.html#filepos76421)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modern Language Features](index_split_007.html#filepos80725)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Cross-Platform Compatibility](index_split_007.html#filepos90194)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_007.html#filepos92569)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2\. Development Environment](index_split_008.html#filepos96824)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Anaconda Python Distribution](index_split_008.html#filepos98858)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installation](index_split_008.html#filepos99810)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Anaconda Prompt](index_split_008.html#filepos101327)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python REPL: An Interactive Python Session](index_split_008.html#filepos114857)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Package Managers: Conda and pip](index_split_008.html#filepos119195)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conda Environments](index_split_008.html#filepos127301)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Jupyter Notebooks](index_split_008.html#filepos129753)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Running Jupyter Notebooks](index_split_008.html#filepos132302)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Notebook Cells](index_split_009.html#filepos134472)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Edit vs. Command Mode](index_split_009.html#filepos140089)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run Order Matters](index_split_009.html#filepos145029)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Shutting Down Jupyter Notebooks](index_split_009.html#filepos149719)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Visual Studio Code](index_split_009.html#filepos153612)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Installation and Configuration](index_split_009.html#filepos159489)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Running a Python Script](index_split_009.html#filepos164978)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_009.html#filepos176641)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[3\. Getting Started with Python](index_split_010.html#filepos178328)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Types](index_split_010.html#filepos180215)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Objects](index_split_010.html#filepos180784)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Numeric Types](index_split_011.html#filepos189029)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Booleans](index_split_011.html#filepos204923)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Strings](index_split_011.html#filepos217861)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Indexing and Slicing](index_split_011.html#filepos227429)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Indexing](index_split_011.html#filepos227867)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Slicing](index_split_011.html#filepos233601)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Structures](index_split_011.html#filepos242277)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Lists](index_split_011.html#filepos243091)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Dictionaries](index_split_011.html#filepos268746)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Tuples](index_split_011.html#filepos285719)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Sets](index_split_011.html#filepos290490)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Control Flow](index_split_011.html#filepos302712)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Code Blocks and the pass Statement](index_split_011.html#filepos303492)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The if Statement and Conditional Expressions](index_split_012.html#filepos306124)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The for and while Loops](index_split_012.html#filepos316543)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[List, Dictionary, and Set Comprehensions](index_split_012.html#filepos346762)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Code Organization](index_split_012.html#filepos361307)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Functions](index_split_012.html#filepos361867)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Modules and the import Statement](index_split_012.html#filepos376269)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The datetime Class](index_split_012.html#filepos392743)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PEP 8: Style Guide for Python Code](index_split_012.html#filepos408951)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PEP 8 and VS Code](index_split_012.html#filepos426085)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Type Hints](index_split_012.html#filepos427790)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_012.html#filepos431930)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[II. Introduction to pandas](index_split_013.html#filepos433190)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[4\. NumPy Foundations](index_split_014.html#filepos433313)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Getting Started with NumPy](index_split_014.html#filepos434390)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[NumPy Array](index_split_014.html#filepos434752)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Vectorization and Broadcasting](index_split_014.html#filepos448103)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Universal Functions (ufunc)](index_split_014.html#filepos454160)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Creating and Manipulating Arrays](index_split_014.html#filepos462749)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Getting and Setting Array Elements](index_split_014.html#filepos463249)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Useful Array Constructors](index_split_014.html#filepos470734)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[View vs. Copy](index_split_014.html#filepos475126)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_014.html#filepos480583)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[5\. Data Analysis with pandas](index_split_015.html#filepos482650)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[DataFrame and Series](index_split_015.html#filepos484346)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Index](index_split_015.html#filepos498826)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Columns](index_split_015.html#filepos512830)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Data Manipulation](index_split_015.html#filepos524268)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Selecting Data](index_split_015.html#filepos525021)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Setting Data](index_split_015.html#filepos575658)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Missing Data](index_split_015.html#filepos598671)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Duplicate Data](index_split_015.html#filepos608764)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Arithmetic Operations](index_split_015.html#filepos617229)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with Text Columns](index_split_015.html#filepos633855)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Applying a Function](index_split_015.html#filepos640942)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[View vs. Copy](index_split_015.html#filepos649491)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Combining DataFrames](index_split_016.html#filepos652519)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Concatenating](index_split_016.html#filepos653446)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Joining and Merging](index_split_016.html#filepos667627)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Descriptive Statistics and Data Aggregation](index_split_016.html#filepos690581)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Descriptive Statistics](index_split_016.html#filepos691116)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Grouping](index_split_016.html#filepos695376)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Pivoting and Melting](index_split_016.html#filepos701398)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Plotting](index_split_016.html#filepos716809)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Matplotlib](index_split_016.html#filepos717341)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Plotly](index_split_016.html#filepos727990)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Importing and Exporting DataFrames](index_split_016.html#filepos740294)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exporting CSV Files](index_split_016.html#filepos745685)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Importing CSV Files](index_split_016.html#filepos748485)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_016.html#filepos765032)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[6\. Time Series Analysis with pandas](index_split_017.html#filepos767560)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[DatetimeIndex](index_split_017.html#filepos770332)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Creating a DatetimeIndex](index_split_017.html#filepos770653)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Filtering a DatetimeIndex](index_split_017.html#filepos794850)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with Time Zones](index_split_017.html#filepos799109)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Common Time Series Manipulations](index_split_017.html#filepos808936)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Shifting and Percentage Changes](index_split_017.html#filepos809440)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Rebasing and Correlation](index_split_017.html#filepos821988)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Resampling](index_split_017.html#filepos846876)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Rolling Windows](index_split_017.html#filepos854869)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Limitations with pandas](index_split_017.html#filepos860113)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_017.html#filepos861902)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[III. Reading and Writing Excel Files Without Excel](index_split_018.html#filepos863198)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[7\. Excel File Manipulation with pandas](index_split_019.html#filepos863345)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Case Study: Excel Reporting](index_split_019.html#filepos864355)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Reading and Writing Excel Files with pandas](index_split_019.html#filepos885558)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The read_excel Function and ExcelFile Class](index_split_019.html#filepos886236)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The to_excel Method and ExcelWriter Class](index_split_019.html#filepos935608)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Limitations When Using pandas with Excel Files](index_split_019.html#filepos957296)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_019.html#filepos958961)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[8\. Excel File Manipulation with Reader and Writer Packages](index_split_020.html#filepos959867)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Reader and Writer Packages](index_split_020.html#filepos961261)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[When to Use Which Package](index_split_020.html#filepos962240)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The excel.py Module](index_split_021.html#filepos972482)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[OpenPyXL](index_split_021.html#filepos981650)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[XlsxWriter](index_split_021.html#filepos1039580)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[pyxlsb](index_split_021.html#filepos1071801)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[xlrd, xlwt, and xlutils](index_split_021.html#filepos1084875)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Advanced Reader and Writer Topics](index_split_022.html#filepos1124258)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with Big Excel Files](index_split_022.html#filepos1125008)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Formatting DataFrames in Excel](index_split_022.html#filepos1157601)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Case Study (Revisited): Excel Reporting](index_split_022.html#filepos1232272)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_022.html#filepos1233979)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[IV. Programming the Excel Application with xlwings](index_split_023.html#filepos1235617)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[9\. Excel Automation](index_split_024.html#filepos1235764)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Getting Started with xlwings](index_split_024.html#filepos1238381)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Using Excel as Data Viewer](index_split_024.html#filepos1239368)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Excel Object Model](index_split_024.html#filepos1250093)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Running VBA Code](index_split_024.html#filepos1313184)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Converters, Options, and Collections](index_split_025.html#filepos1323109)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with DataFrames](index_split_025.html#filepos1323983)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Converters and Options](index_split_025.html#filepos1340542)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Charts, Pictures, and Defined Names](index_split_025.html#filepos1367107)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Case Study (Re-Revisited): Excel Reporting](index_split_025.html#filepos1400825)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Advanced xlwings Topics](index_split_025.html#filepos1410331)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[xlwings Foundations](index_split_025.html#filepos1410727)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Improving Performance](index_split_025.html#filepos1416214)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[How to Work Around Missing Functionality](index_split_025.html#filepos1429461)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_025.html#filepos1435946)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[10\. Python-Powered Excel Tools](index_split_026.html#filepos1439732)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Using Excel as Frontend with xlwings](index_split_026.html#filepos1440768)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Excel Add-in](index_split_026.html#filepos1441981)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Quickstart Command](index_split_026.html#filepos1448166)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run Main](index_split_026.html#filepos1449780)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[RunPython Function](index_split_026.html#filepos1459239)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Deployment](index_split_026.html#filepos1471908)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python Dependency](index_split_026.html#filepos1472608)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Standalone Workbooks: Getting Rid of the xlwings Add-in](index_split_026.html#filepos1475221)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Configuration Hierarchy](index_split_026.html#filepos1478036)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Settings](index_split_026.html#filepos1480462)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_026.html#filepos1485980)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[11\. The Python Package Tracker](index_split_027.html#filepos1487255)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[What We Will Build](index_split_027.html#filepos1488972)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Core Functionality](index_split_027.html#filepos1492209)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Web APIs](index_split_027.html#filepos1492676)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Databases](index_split_027.html#filepos1515287)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Exceptions](index_split_027.html#filepos1580121)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Application Structure](index_split_027.html#filepos1601250)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Frontend](index_split_027.html#filepos1606102)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Backend](index_split_027.html#filepos1619894)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Debugging](index_split_027.html#filepos1644529)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_027.html#filepos1651491)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[12\. User-Defined Functions (UDFs)](index_split_028.html#filepos1653100)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Getting Started with UDFs](index_split_028.html#filepos1655019)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[UDF Quickstart](index_split_028.html#filepos1657338)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Case Study: Google Trends](index_split_028.html#filepos1679203)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Introduction to Google Trends](index_split_028.html#filepos1679853)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with DataFrames and Dynamic Arrays](index_split_028.html#filepos1682320)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Fetching Data from Google Trends](index_split_028.html#filepos1714648)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Plotting with UDFs](index_split_028.html#filepos1741693)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Debugging UDFs](index_split_028.html#filepos1755123)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Advanced UDF Topics](index_split_028.html#filepos1760894)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Basic Performance Optimization](index_split_028.html#filepos1761747)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Caching](index_split_028.html#filepos1775412)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The Sub Decorator](index_split_028.html#filepos1795188)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conclusion](index_split_028.html#filepos1804492)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[A. Conda Environments](index_split_029.html#filepos1810552)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Create a New Conda Environment](index_split_029.html#filepos1811963)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Disable Auto Activation](index_split_029.html#filepos1817917)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[B. Advanced VS Code Functionality](index_split_030.html#filepos1820886)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Debugger](index_split_030.html#filepos1821278)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Jupyter Notebooks in VS Code](index_split_030.html#filepos1825947)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Run Jupyter Notebooks](index_split_030.html#filepos1826547)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Python Scripts with Code Cells](index_split_030.html#filepos1829180)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[C. Advanced Python Concepts](index_split_031.html#filepos1832059)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Classes and Objects](index_split_031.html#filepos1832487)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Working with Time-Zone-Aware datetime Objects](index_split_031.html#filepos1847758)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Mutable vs. Immutable Python Objects](index_split_031.html#filepos1865329)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Calling Functions with Mutable Objects as Arguments](index_split_031.html#filepos1882626)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Functions with Mutable Objects as Default Arguments](index_split_031.html#filepos1896621)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Index](index_split_032.html#filepos1903642)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
