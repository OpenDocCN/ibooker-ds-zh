- en: Appendix A. More Python Programming Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As this book has hopefully illustrated, Python is a robust and flexible programming
    language, with a wide range of applications. While I’ve introduced many key concepts
    and popular libraries in the preceding chapters, I’ve created this appendix to
    provide you with some helpful resources and references for taking your Python
    work to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Official Python Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, there are always search engines and [StackOverflow](https://stackoverflow.com/questions/tagged/python),
    but there’s value in getting comfortable reading official documentation—whether
    it’s for the Python language or for popular libraries like `pandas`, `matplotlib`,
    or `seaborn`. Though I wouldn’t suggest you sit down and read *any* programming
    documentation end to end, looking through the parameters and options of a data
    type or function you want to use can give you a better sense of what (in general)
    can be done with it, as well as an idea of how its mechanisms are organized. This
    can be especially helpful when you want to do something completely new, because
    it will give you an idea of where to look for paths forward.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I knew when I started writing this book that `seaborn` and `pandas`
    were both built on top of `matplotlib`, and I had done some hacking around with
    making and customizing graphics with both of them. It wasn’t until I was looking
    through the latter’s documentation, however, that I came to understand the difference
    between the `figure` and `axes` objects that I so often saw referenced in example
    code, and that understanding helped me find solutions more quickly as I experimented
    with ways to more fully customize my visualizations. Almost as important, official
    documentation is generally kept up to date, while it’s not uncommon for the most
    popular forum posts about a topic to be months or even years old—meaning that
    the advice they include can sometimes be woefully out of date.
  prefs: []
  type: TYPE_NORMAL
- en: I also recommend regularly turning to the [Python Standard Library](https://docs.python.org/3/library/index.html)
    because you might be surprised by how much built-in functionality it offers. Many
    of the methods you may recognize from working with libraries are built on top
    of (or to mimic) functions that exist in “vanilla” Python. And while libraries
    are often unique and useful, there are no guarantees that they will continue to
    be developed or maintained. If you can get the functionality you need by working
    with “plain” Python, the less likely it is that you’ll find your code going out
    of date because it relies on a library that is no longer being updated.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a lot of ways to install Python packages, depending on your programming
    environment. Whether you’re using Homebrew on macOS, working on a Windows machine,
    or using Colab, the most reliable way to install Python packages [will pretty
    much always be to use some version of `pip`](https://packaging.python.org/tutorials/installing-packages).
    In fact, you can even use `pip` to install a package on a Google Colab notebook
    (if you manage to find one that isn’t already installed) [using the following
    syntax](https://colab.research.google.com/notebooks/snippets/importing_libraries.ipynb):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Whatever you choose, however, I suggest you make your choice and stick to it—things
    can get pretty unpredictable if you start using multiple tools to install and
    update your Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: Where to Look for Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the most part, I recommend that you install Python packages that are available
    on the [Python Package Index](https://pypi.org), also known as PyPI. PyPI has
    a clean structure and a robust tagging and search interface that make it easy
    to locate useful Python packages, and the fact that PyPI package documentation
    (usually) has a standard layout (as shown in [Figure A-1](#pypi_docs_example))
    will really start to save you time if you’re looking through lots of options.
  prefs: []
  type: TYPE_NORMAL
- en: Some projects (like Beautiful Soup `lxml`) may still keep much of their documentation
    in a standalone location, but their PyPI page will typically still contain a helpful
    summary of what the project does and even some getting-started tips. One of the
    things I personally like to look at is the “Release History” section, which shows
    when the project was first created, as well as how often and how recently the
    package was updated. Longevity is, of course, not a perfect metric for evaluating
    how reliable a given package is likely to be—since anyone can publish Python packages
    (and add them to PyPI)—but the ones that have been around longer and/or are updated
    more frequently (and recently) are usually a good place to start.
  prefs: []
  type: TYPE_NORMAL
- en: '![Example PyPI package landing page.](assets/ppdw_aa01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-1\. Example PyPI package landing page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Keeping Your Tools Sharp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming tools are being updated all the time as the community identifies
    (and mostly fixes) new problems or comes to agree that some aspect of a software
    tool (or even Python itself!) ought to work differently. If you followed the instructions
    for installing Python and Jupyter Notebook provided in [Chapter 1](ch01.html#chapter1),
    then you can use the `conda` command to update both of these. You’ll just need
    to run `conda update python` and `conda update jupyter` every once in a while.
    At the same time, because this book is intended for beginners, one thing I didn’t
    address in [Chapter 1](ch01.html#chapter1) was the question of Python *environments*.
    In this context, a given *environment* is defined mostly by the major version
    of Python that will be used by default (for example, 3.9 versus 3.8) when you
    use the `python` command. While running `conda update python` will update, say,
    version 3.8.6 to 3.8.11, it *won’t* ever automatically update your version to
    a different major release (e.g., 3.9). Often, this won’t cause problems for you
    unless your Python installation is several years (and therefore major versions)
    out of date. If and when that happens, you’ll want to create a new environment
    for the new version of Python, mostly because it can be hard for your computer
    to keep things straight otherwise. Fortunately, when the time comes for you to
    upgrade Python to the next major version, you can learn what you need to know
    about how to do this from the [`conda` documentation page](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).
  prefs: []
  type: TYPE_NORMAL
- en: Where to Learn More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because Python is such a popular programming language, there are thousands of
    resources online and in libraries for moving to the next level, whether you have
    a specific project to complete or just want to learn more about advanced topics
    like machine learning and natural languages processing.
  prefs: []
  type: TYPE_NORMAL
- en: For a practical, succinct introduction to more intense data science topics,
    my first recommendation would be the [*Python Data Science Handbook*](https://www.oreilly.com/library/view/python-data-science/9781491912126/)
    by Jake VanderPlas (O’Reilly)—it’s a resource I’ve used myself when trying to
    get my head around some of the more advanced machine-learning work that Python
    can do, and Jake’s clear writing style and concise examples offer an accessible
    way to both get an overview of machine learning with Python and learn about specific
    methods (like k-means clustering). Even better, you can access the [entire book
    for free online](https://jakevdp.github.io/PythonDataScienceHandbook)—though if
    you’re able to, I highly recommend buying a copy of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps even more valuable than finding the right books, tutorials, or classes,
    however, is finding a community of people whom you can work and learn alongside
    as you continue your data wrangling journey. Whether through a school, community
    organization, or meetup, finding a small group of people that you can talk about
    your projects with or turn to for advice (and, sometimes, commiseration!) is probably
    the most invaluable resource for expanding your skills in both Python and data
    wrangling. There are also many cost-free programs that can help support and advance
    your work, especially for folks from communities that are underrepresented in
    technical fields. Check out groups like the [Ada Developers Academy](https://adadevelopersacademy.org)
    or [Free Code Camp](https://freecodecamp.org).
  prefs: []
  type: TYPE_NORMAL
