- en: Chapter 19\. Mapping with D3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章。使用D3进行映射
- en: Building and customizing map visualizations is one of D3’s core strengths. It
    has some very sophisticated libraries, allowing for all kinds of projections,
    from the workhorse Mercator and orthographic to more esoteric ones such as Conic
    Equidistant. Mapping seems to be something of an obsession for Mike Bostock and
    Jason Davies, D3’s core devs, and their attention to detail is striking. If you
    have a mapping problem, chances are D3 can do the heavy lifting required.^([1](ch19.xhtml#idm45607741792448))
    In this chapter, we’ll use our Nobel Prize visualization (Nobel-viz) map ([Figure 19-1](#d3maps_target))
    to introduce the core D3 mapping concepts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和自定义地图可视化是D3的核心优势之一。它有一些非常复杂的库，允许使用各种投影，从工作马卡托和正投影到更奇特的投影，如等距圆锥投影。地图似乎是Mike
    Bostock和Jason Davies，D3的核心开发人员的一种痴迷，并且他们对细节的关注令人印象深刻。如果您有地图问题，D3很可能可以完成所需的繁重工作。^([1](ch19.xhtml#idm45607741792448))
    在本章中，我们将使用我们的诺贝尔奖可视化（Nobel-viz）地图（[图19-1](#d3maps_target)）来介绍D3映射的核心概念。
- en: '![dpj2 1503](assets/dpj2_1503.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1503](assets/dpj2_1503.png)'
- en: Figure 19-1\. This chapter’s target element
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-1。本章的目标元素
- en: Available Maps
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用地图
- en: The most popular mapping format is the aging [shapefile](https://oreil.ly/XV4Cb),
    developed for geographic information system (GIS) software. There are many free
    and proprietary desktop programs^([2](ch19.xhtml#idm45607741786480)) to manipulate
    and produce shapefiles.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的映射格式是老化的[shapefile](https://oreil.ly/XV4Cb)，这是为地理信息系统（GIS）软件开发的。有许多免费和专有的桌面程序^([2](ch19.xhtml#idm45607741786480))
    用于操作和生成shapefiles。
- en: Unfortunately, shapefiles were not designed for the web, which would far rather
    deal in a JSON-based map format, and demands small, efficient representations
    to limit bandwidth and related lag.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，shapefiles不是为网络设计的，网络更希望处理基于JSON的地图格式，并要求使用小而高效的表示形式来限制带宽和相关的延迟。
- en: The good news is that there are many convenient ways to convert shapefiles to
    our preferred TopoJSON format,^([3](ch19.xhtml#idm45607741781184)) meaning you
    can manipulate your shapefiles in software and then convert them to a web-friendly
    format. The standard way of finding maps for web dataviz is to first look for
    TopoJSON or GeoJSON versions, then search among the richer pool of shapefiles,
    and, as a last resort, roll your own using a shapefile, or equivalent, editor.
    Depending on how much map visualization you intend to do, there will probably
    be an off-the-shelf solution. For things like world maps or continental projections
    (e.g., the popular Albers USA), you can usually find a number of solutions with
    different degrees of accuracy.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，有许多方便的方法可以将shapefiles转换为我们首选的TopoJSON格式，^([3](ch19.xhtml#idm45607741781184))
    这意味着您可以在软件中操作您的shapefiles，然后将它们转换为网络友好的格式。寻找网络数据可视化地图的标准方法是首先寻找TopoJSON或GeoJSON版本，然后在更丰富的shapefiles池中搜索，作为最后的手段，使用shapefile或等价编辑器自行制作。根据您打算进行的地图可视化程度，可能会有现成的解决方案。对于像世界地图或大陆投影（例如流行的Albers
    USA）这样的东西，通常可以找到不同精度的多个解决方案。
- en: For our Nobel map, we want a global mapping, at least showing all 58 Nobel Prize–winning
    nations, with labeled shapes for pretty much all of them. Luckily, D3 provides
    a number of example world maps, one at 50m grid resolution, the other a smaller
    110m resolution map. The latter is fine for our fairly crude requirements.^([4](ch19.xhtml#idm45607741779664))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的诺贝尔奖地图，我们想要一个全球映射，至少显示所有58个诺贝尔奖获奖国家，并为其中的大多数国家提供标记形状。幸运的是，D3提供了许多示例世界地图，一个以50米网格分辨率，另一个以较小的110米分辨率。对于我们相当粗糙的需求，后者就足够了。^([4](ch19.xhtml#idm45607741779664))
- en: D3’s Mapping Data Formats
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D3的映射数据格式
- en: D3 makes use of two JSON-based geometric data formats, [GeoJSON](https://geojson.org)
    and [TopoJSON](https://oreil.ly/709GD), an extension of GeoJSON devised by Mike
    Bostock that encodes topology. GeoJSON is more intuitive to read, but TopoJSON
    is far more efficient in most cases. Typically, maps are converted to TopoJSON
    for web delivery, where size is an important consideration. The TopoJSON is then
    converted to GeoJSON via D3 on the browser, to simplify SVG path creation, feature
    optimization, and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: D3利用两种基于JSON的几何数据格式，[GeoJSON](https://geojson.org) 和 [TopoJSON](https://oreil.ly/709GD)，后者是由Mike
    Bostock设计的GeoJSON的扩展，用于编码拓扑信息。GeoJSON更直观易读，但在大多数情况下，TopoJSON更高效。通常，地图会被转换为TopoJSON进行网络传输，因为尺寸是一个重要考虑因素。然后，在浏览器中通过D3将TopoJSON转换为GeoJSON，以简化SVG路径创建、功能优化等操作。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There is a nice summation of the differences between TopoJSON and GeoJSON on
    [Stack Overflow](https://oreil.ly/DvcaG).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Stack Overflow](https://oreil.ly/DvcaG)上有一篇关于TopoJSON和GeoJSON之间差异的很好的总结。
- en: Let’s have a look at the two formats now. Understanding their basic structure
    is important and a little effort there will pay off, especially as your mapping
    endeavors become more ambitious.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看这两种格式。理解它们的基本结构很重要，在您的映射工作变得更加雄心勃勃时，稍加努力将会有所回报。
- en: GeoJSON
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GeoJSON
- en: GeoJSON files contain one `type` object, one of Point, MultiPoint, LineString,
    MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature, or FeatureCollection.
    The case of the type member values must be [CamelCase](https://oreil.ly/wS4q9),
    as shown here. They may also contain a `crs` member, specifying a particular coordinate
    reference system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON文件包含一个`type`对象，其中一个是Point，MultiPoint，LineString，MultiLineString，Polygon，MultiPolygon，GeometryCollection，Feature或FeatureCollection。类型成员的大小写必须是[CamelCase](https://oreil.ly/wS4q9)，如此所示。它们还可以包含一个`crs`成员，指定特定的坐标参考系统。
- en: FeatureCollections are the largest GeoJSON container, and maps with more than
    one region are usually specified with these. FeatureCollections contain a `features`
    array, each element of which is a GeoJSON object of a type listed in the previous
    paragraph.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: FeatureCollections是最大的GeoJSON容器，通常用于指定包含多个区域的地图。FeatureCollections包含一个`features`数组，其中每个元素是前文列出类型的GeoJSON对象。
- en: '[Example 19-1](#d3maps_geojson) shows a typical FeatureCollection containing
    an array of country maps, the boundaries of which are specified by Polygons.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 19-1](#d3maps_geojson)展示了一个包含国家地图数组的典型FeatureCollection，其边界由多边形指定。'
- en: Example 19-1\. The GeoJSON mapping data format
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-1\. GeoJSON映射数据格式
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO1-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO1-1)'
- en: Each GeoJSON file contains a single object with a type and containing…​
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个GeoJSON文件包含一个带有类型的单个对象，包含…​
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO1-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO1-2)'
- en: …​an array of features—​in this case, country objects…​
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: …​一个特征数组—​在本例中，国家对象…​
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO1-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO1-3)'
- en: …​with coordinate-based, polygonal geometry.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: …​使用基于坐标的多边形几何图形。
- en: '[![4](assets/4.png)](#co_mapping_with_d3_CO1-4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_mapping_with_d3_CO1-4)'
- en: Note that the geographic coordinates are given in [longitude, latitude] pairs,
    the reverse of conventional geographic positioning. This is because GeoJSON uses
    an [X,Y] coordinate scheme.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，地理坐标以[经度，纬度]对给出，这与传统的地理定位相反。这是因为GeoJSON使用[X,Y]坐标方案。
- en: Although GeoJSON is more succinct than shapefiles and in the preferred JSON
    format, there is a lot of redundancy in the encoding of maps. For example, shared
    boundaries are specified twice and the floating-point coordinate format is fairly
    inflexible and, for many jobs, too precise. The TopoJSON format was designed to
    address these issues and produce a far more efficient way of delivering maps to
    the browser.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然GeoJSON比shapefile更简洁且使用首选的JSON格式，但在地图编码中存在大量冗余。例如，共享边界被指定两次，而浮点坐标格式相当不灵活，并且对于许多工作来说太精确了。TopoJSON格式旨在解决这些问题，并以更有效的方式向浏览器提供地图。
- en: TopoJSON
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TopoJSON
- en: Developed by Mike Bostock, TopoJSON is an extension to GeoJSON that encodes
    topology, stitching geometries together from a shared pool of line segments called
    arcs. Because they reuse these arcs, TopoJSON files are typically 80% smaller
    than their GeoJSON equivalents! In addition, taking a topological approach to
    map representation enables a number of techniques that use topology. One of these
    is topology-preserving shape simplification,^([5](ch19.xhtml#idm45607741574800))
    which can eliminate 95% of map points while retaining sufficient detail. Cartograms
    and automatic map coloring are also facilitated. [Example 19-2](#d3maps_topojson_basic)
    shows the structure of a TopoJSON file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由Mike Bostock开发的TopoJSON是GeoJSON的扩展，它编码了拓扑关系，从称为弧线段的共享池中将几何图形拼接在一起。因为它们重用这些弧线段，TopoJSON文件通常比其等效的GeoJSON文件小80%！此外，采用拓扑方法来表示地图使得可以使用一些利用拓扑的技术。其中之一是保持拓扑的形状简化，^([5](ch19.xhtml#idm45607741574800))可以消除95%的地图点数，同时保留足够的细节。还能实现等面积图和自动地图着色。[示例 19-2](#d3maps_topojson_basic)展示了TopoJSON文件的结构。
- en: Example 19-2\. Structure of our TopoJSON world map
  id: totrans-31
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-2\. 我们的TopoJSON世界地图的结构
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO2-1)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO2-1)'
- en: TopoJSON objects have a `Topology` type and must contain an `objects` object
    and an array of `arcs`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON对象有一个`Topology`类型，并且必须包含一个`objects`对象和一个`arcs`数组。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO2-2)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO2-2)'
- en: In this case, the objects are `countries` and `land`, both being arc-defined
    `GeometryCollections`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，对象是`countries`和`land`，都是由弧线定义的`GeometryCollections`。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO2-3)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO2-3)'
- en: Each geometry (in this case defining a country shape) is defined by a number
    of arc paths, comprising continuous arcs referenced by their index in the `arcs`
    array ![4](assets/4.png).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个几何体（在这种情况下定义为国家形状）由一些弧线路径定义，这些路径由它们在`arcs`数组中的索引引用 ![4](assets/4.png)。
- en: '[![4](assets/4.png)](#co_mapping_with_d3_CO2-4)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_mapping_with_d3_CO2-4)'
- en: An array of component arcs used to construct the objects. The arcs are referenced
    by index.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建对象的组件弧线数组。这些弧线由索引引用。
- en: '[![5](assets/5.png)](#co_mapping_with_d3_CO2-5)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_mapping_with_d3_CO2-5)'
- en: Numbers needed to quantize positions as integers rather than floats.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以整数形式量化位置所需的数字。
- en: The smaller size of the TopoJSON format is obviously a big advantage if you
    have to fetch it to your web browser. Often only the GeoJSON format is available,
    so the ability to convert this to TopoJSON is a handy one. D3 provides a small
    command-line utility to do just this. Called `geo2topo`, it is part of the TopoJSON
    package and can be installed via `node`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要将其传输到Web浏览器中，TopoJSON格式的较小尺寸显然是一个巨大优势。通常只有GeoJSON格式是可用的，因此能够将其转换为TopoJSON是非常方便的。D3提供了一个小的命令行实用程序来完成这个任务。名为`geo2topo`，它是TopoJSON包的一部分，并且可以通过`node`进行安装。
- en: Converting Maps to TopoJSON
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将地图转换为TopoJSON
- en: 'You can install TopoJSON via the `node` repositories (see [Chapter 1](ch01.xhtml#chapter_install)),
    using the `-g` flag to make it a global^([6](ch19.xhtml#idm45607741352656)) install:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`node`存储库安装TopoJSON（参见[第1章](ch01.xhtml#chapter_install)），使用`-g`标志进行全局安装^([6](ch19.xhtml#idm45607741352656))：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With `topojson` installed, converting an existing GeoJSON into TopoJSON is
    as easy as can be. Here we call `geo2topo` from the command line on a GeoJSON
    *geo_input.json* file, specifying an output file *topo_output.json*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`topojson`后，将现有的GeoJSON转换为TopoJSON就变得非常简单。在这里，我们从命令行调用`geo2topo`，对一个名为*geo_input.json*的GeoJSON文件进行处理，并指定输出文件*topo_output.json*：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, you can pipe the result to a file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以将结果导入到一个文件中：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`geo2topo` has a number of useful options, such as quantization, which allows
    you to specify your map’s precision. Playing around with this option can result
    in a much smaller file with little perceptible reduction in quality. You can see
    the full spec on the [geo2topo command-line reference](https://oreil.ly/mp0RN).
    If you want to convert your map files programmatically, there is a handy Python
    library for the job, *topojson.py*. You can find it on [GitHub](https://oreil.ly/8t7Ko).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`geo2topo`有许多有用的选项，例如量化，允许您指定地图的精度。尝试使用这个选项可以生成一个文件更小、质量几乎无损的结果。您可以在[geo2topo命令行参考](https://oreil.ly/mp0RN)中查看完整的规格说明。如果您希望以编程方式转换地图文件，可以使用一个方便的Python库*topojson.py*。您可以在[GitHub](https://oreil.ly/8t7Ko)上找到它。'
- en: Now that we’ve got our map data in a light, efficient, web-optimized format,
    let’s see how we use JavaScript to turn it into interactive web maps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将地图数据转换为轻量级、高效且面向Web优化的格式，让我们看看如何使用JavaScript将其转换为交互式Web地图。
- en: D3 Geo, Projections, and Paths
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D3 Geo，投影和路径
- en: D3 has a client-side *topojson* library, dedicated to dealing with TopoJSON
    data. This converts the optimized, arc-based TopoJSON to the coordinate-based
    GeoJSON, ready to be manipulated by D3’s `projection`s and `paths`, objects in
    the *d3.geo* library.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: D3拥有一个客户端的*topojson*库，专门用于处理TopoJSON数据。它将优化的基于弧线的TopoJSON转换为基于坐标的GeoJSON，可以被D3的*d3.geo*库的`projection`s和`paths`对象操作。
- en: '[Example 19-3](#d3maps_topojsoncode) shows the process of extracting the GeoJSON
    features needed by our Nobel map from the TopoJSON *world-100m.json* map. This
    provides us with the coordinate-based polygons representing our countries and
    their borders.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例19-3](#d3maps_topojsoncode)展示了从TopoJSON *world-100m.json*地图中提取我们的诺贝尔地图所需的GeoJSON要素的过程。这为我们提供了代表国家及其边界的基于坐标的多边形。'
- en: In order to extract the GeoJSON features we require from the TopoJSON `world`
    object just delivered to the browser, we use *topojson*’s `feature` and `mesh`
    methods. `feature` returns the GeoJSON Feature or FeatureCollection for the specified
    object and `mesh` the GeoJSON MutliLineString geometry object representing the
    mesh for the specified object.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从刚刚传递到浏览器的 TopoJSON `world` 对象中提取我们需要的 GeoJSON 特征，我们使用 *topojson* 的 `feature`
    和 `mesh` 方法。`feature` 返回指定对象的 GeoJSON 特征或 FeatureCollection，而 `mesh` 返回表示指定对象网格的
    GeoJSON MutliLineString 几何对象。
- en: The `feature` and `mesh` methods take as their first argument the TopoJSON object
    and as their second a reference to the feature we want to extract (`land` and
    `countries` in [Example 19-3](#d3maps_topojsoncode)). In our world map, `countries`
    is a FeatureCollection with a `features` array of countries ([Example 19-3](#d3maps_topojsoncode),
    ![2](assets/2.png)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature` 和 `mesh` 方法的第一个参数是 TopoJSON 对象，第二个参数是我们想要提取的特征的引用（在 [示例 19-3](#d3maps_topojsoncode)
    中为 `land` 和 `countries`）。在我们的世界地图中，`countries` 是一个具有国家数组特征的 FeatureCollection（[示例 19-3](#d3maps_topojsoncode)，![2](assets/2.png)）。'
- en: The `mesh` method has a third argument, which specifies a filter function, taking
    as arguments the two geometry objects (`a` and `b`) sharing the mesh arc. If the
    arc is unshared, then `a` and `b` are the same, allowing us to filter out external
    borders in our world map ([Example 19-3](#d3maps_topojsoncode), ![3](assets/3.png)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`mesh` 方法有第三个参数，用于指定一个过滤函数，该函数接受两个几何对象（`a` 和 `b`）作为参数，这两个对象共享网格弧。如果弧未共享，则 `a`
    和 `b` 相同，允许我们在我们的世界地图中过滤掉外部边界（[示例 19-3](#d3maps_topojsoncode)，![3](assets/3.png)）。'
- en: Example 19-3\. Extracting our TopoJSON features
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-3\. 提取我们的 TopoJSON 特征
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO3-1)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO3-1)'
- en: Load the map data using D3’s helper functions and send on to a `ready` function
    to initiate the map chart.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 D3 的辅助函数加载地图数据，并将其发送到 `ready` 函数以初始化地图图表。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO3-2)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO3-2)'
- en: Uses `topojson` to extract our desired features from the TopoJSON data, delivering
    them in the GeoJSON format.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `topojson` 从 TopoJSON 数据中提取我们需要的特征，并以 GeoJSON 格式提供它们。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO3-3)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO3-3)'
- en: Filters for only internal borders, shared between countries. If an arc is only
    used by one geometry (in this case, a country), then a and b are identical.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 仅过滤出仅在国家之间共享的内部边界。如果一条弧仅被一个几何体（在本例中是一个国家）使用，则 `a` 和 `b` 是相同的。
- en: Map presentation in D3 generally follows a standard pattern. We first create
    a D3 `projection`, using one of D3’s many and varied alternatives. We then create
    a `path` using this `projection`. This `path` is then used to convert the features
    and meshes extracted from our TopoJSON object into the SVG paths displayed in
    the browser window. Let’s now look at the rich subject of D3 `projection`s.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 D3 中的地图展示通常遵循一个标准模式。首先，我们创建一个 D3 `projection`，使用其中一个 D3 的多种选择。然后，我们使用这个 `projection`
    创建一个 `path`。这个 `path` 用于将从我们的 TopoJSON 对象中提取的特征和网格转换为浏览器窗口中显示的 SVG 路径。现在让我们来看看关于
    D3 `projection`s 的丰富主题。
- en: Projections
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 投影
- en: Probably the chief challenge for maps, since the time it was appreciated that
    the Earth is spheroidal, is that of representing a three-dimensional globe, or
    significant parts of it, in a two-dimensional form. In 1569, the Flemish cartographer
    Gerardus Mercator famously resolved this by extending lines from the Earth’s center
    to significant boundary coordinates and then projecting them onto a surrounding
    cylinder. This had the useful property of representing lines of constant course,
    known as *rhumb lines*, as straight line segments, a very useful feature for the
    seafaring navigators intended to use the map. Unfortunately, the projection process
    distorts distances and size, magnifying the scale as one moves from the equator
    to the pole. As a result of this, the huge African continent appears not much
    bigger than Greenland when in reality it is around 14 times the size.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 自从人们意识到地球是一个球体以来，地图的主要挑战可能是在二维形式中表示一个三维的球体或其重要部分。1569年，弗兰德斯地图制作者杰拉德斯·麦卡托（Gerardus
    Mercator）通过从地球中心向显著的边界坐标延伸线，并将其投影到周围的圆柱体上，成功地解决了这个问题。这个投影方法的有用属性是将常数航线（称为 *rhumb
    lines*）表示为直线段，这对打算使用地图的航海导航员非常有用。不幸的是，投影过程会扭曲距离和大小，随着从赤道到极地的移动，会放大尺度。因此，尽管实际上非洲大陆的面积大约是格陵兰的14倍，但在地图上，它看起来并不比格陵兰大多少。
- en: All projections are, like Mercator’s, a compromise, and what’s great about D3
    is that the rich array of choices means one can balance these compromises to find
    the right projection for the job.^([7](ch19.xhtml#idm45607741031424)) [Figure 19-2](#d3maps_projections)
    shows some alternative `projection`s for our Nobel map, including the equirectangular
    one chosen for the final visualization. The constraint was to show all Nobel Prize–winning
    countries within the rectangular window and to try to maximize the space available,
    particularly in Europe where there are many countries that are small geographically
    but have a relatively large prize haul.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的投影方式都像墨卡托的一样是一种妥协，而 D3 的优点在于丰富的选择意味着可以平衡这些妥协，找到适合工作的正确投影方式。^([7](ch19.xhtml#idm45607741031424))
    [图 19-2](#d3maps_projections) 展示了我们诺贝尔地图的一些替代 `projection`，包括最终可视化所选择的等经纬度投影。约束条件是在矩形窗口内显示所有诺贝尔奖获得国家，并尝试最大化空间，特别是在欧洲，那里有许多地理上较小但奖项相对较多的国家。
- en: 'To create a D3 `projection`, just use one of the applicable *d3.geo* methods:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 D3 的 `projection`，只需使用适用的 *d3.geo* 方法之一：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: D3 `projection`s have a number of useful methods. It’s common to use the `translate`
    method to translate the map by half the width and height of the container, overriding
    the default of [480, 250]. You can also set the precision, which affects the degree
    of *adaptive resampling* used in the `projection`. Adaptive resampling is a clever
    technique to increase the accuracy of projected lines while still performing efficiently.^([8](ch19.xhtml#idm45607741009120))
    The scale of the map and its center’s longitude and latitude can be set by the
    `scale` and `center` methods.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的 `projection` 具有许多有用的方法。通常使用 `translate` 方法将地图平移至容器的一半宽度和高度，覆盖默认值 [480,
    250]。还可以设置精度，这会影响在 `projection` 中使用的自适应重采样的程度。自适应重采样是一种聪明的技术，可以提高投影线的准确性，同时保持高效率。^([8](ch19.xhtml#idm45607741009120))
    地图的比例及其中心的经度和纬度可以通过 `scale` 和 `center` 方法进行设置。
- en: '![dpj2 1902](assets/dpj2_1902.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1902](assets/dpj2_1902.png)'
- en: Figure 19-2\. Some alternative mapping projections for the Nobel map
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-2\. 诺贝尔地图的一些替代映射投影方式
- en: 'Putting the `projection` methods together, the following code is that used
    by our Nobel-viz world equirectangular map. Note that it’s hand-tweaked to maximize
    the space given to Nobel Prize–winning countries. The two poles are truncated,
    there being no winners in either the Arctic or Antarctic (note that equirectangular
    maps assume a width/height ratio of 2):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `projection` 方法组合在一起，下面的代码是我们的诺贝尔可视化世界等经纬度地图所使用的代码。请注意，它是手动调整的，以最大化给予诺贝尔奖获得国家的空间。两极被截断，因为在北极或南极都没有获奖者（请注意，等经纬度地图假设宽高比为
    2）：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO4-1)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO4-1)'
- en: Enlarged slightly; the default height is 480 and scale 153.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微放大；默认高度为 480，比例为 153。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO4-2)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO4-2)'
- en: Centered at 15 degrees east, 15 degrees north.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 居中于东经 15 度，北纬 15 度。
- en: With our equirectangular `projection` defined, let’s see how you use it to create
    a `path`, which will in turn be used to create the SVG maps.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了我们的等经纬度 `projection` 后，让我们看看如何使用它创建 `path`，这将用于创建 SVG 地图。
- en: Paths
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径
- en: Once you’ve settled on an appropriate `projection` for your map, you use it
    to create a D3 geographic `path` generator, which is a specialized variant of
    the SVG `path` generator (`d3.svg.path`). This `path` takes any GeoJSON feature
    or geometry object, such as a FeatureCollection, Polygon, or Point, and returns
    the SVG path data string for the `d` element. For example, with our map `borders`
    object, the geographic border coordinates describing a `MultiLineString` are converted
    into path coordinates for SVG.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了适合您地图的合适 `projection`，您可以使用它来创建 D3 地理 `path` 生成器，这是 SVG `path` 生成器 (`d3.svg.path`)
    的专门变体。此 `path` 接受任何 GeoJSON 特征或几何对象，如 FeatureCollection、Polygon 或 Point，并返回用于
    `d` 元素的 SVG 路径数据字符串。例如，使用我们的地图 `borders` 对象，描述 `MultiLineString` 的地理边界坐标将转换为 SVG
    的路径坐标。
- en: 'Generally, we create our `path` and set its `projection` in one go:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们一次性创建我们的 `path` 并设置其 `projection`：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Typically, we use the `path` as a function to generate the `d` attribute to
    an SVG path, using GeoJSON data bound using the `datum` method (used to bind a
    single object—not array—and shorthand for `data([object])`). So to use the borders
    data we just extracted using `topojson.mesh` to draw our country borders, we use
    the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们使用`path`作为函数来生成SVG路径的`d`属性，使用`datum`方法绑定使用的GeoJSON数据（用于绑定单个对象——而不是数组——并且`data([object])`的简写）。因此，要使用刚刚提取的边界数据使用`topojson.mesh`来绘制我们的国家边界，我们使用以下方法：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO5-1)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO5-1)'
- en: We want to insert the borders SVG before (below) the map’s `graticule` (grid)
    overlay.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在地图的`graticule`（网格）覆盖层之前（下面）插入边界SVG。
- en: '[Figure 19-3](#d3maps_paths) shows output from the Chrome Console for the TopoJSON
    `borders` object, extracted from our world-map data, and the resultant path generated
    by our *d3.geo* `path`, using the equirectangular `projection`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[图19-3](#d3maps_paths)展示了从Chrome控制台输出的TopoJSON `borders`对象，从我们的世界地图数据中提取的结果路径。使用了我们的*d3.geo*
    `path`，使用了等经纬投影。'
- en: The geo-path generator is the mainstay of D3 map presentations. I recommend
    playing around with different `projection`s with simple geometries to get a feel
    for things, investigating the astonishing number of examples found at [*bl.ocks.org*](https://bl.ocks.org/mbostock)
    and the docs on [D3’s GitHub page](https://oreil.ly/2qgyf), and checking out this
    [great little demo](https://oreil.ly/NansT).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 地理路径生成器是D3地图演示的主要组成部分。我建议尝试使用不同的`projection`和简单几何体来感受一下，可以在[*bl.ocks.org*](https://bl.ocks.org/mbostock)找到大量的示例，以及[D3的GitHub页面](https://oreil.ly/2qgyf)上的文档，并查看这个[很棒的小演示](https://oreil.ly/NansT)。
- en: '![dpj2 1903](assets/dpj2_1903.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1903](assets/dpj2_1903.png)'
- en: Figure 19-3\. Path generator, from geometry to SVG path
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-3\. 路径生成器，从几何到SVG路径
- en: Now let’s look at one of the useful *d3.geo* components you’ll use in your maps,
    the `graticule` (or map grid).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看你在地图中将使用的一个有用的*d3.geo*组件，即`graticule`（或地图网格）。
- en: graticules
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经线网格
- en: A useful component of *d3.geo* and one used in our Nobel map is the `graticule`,
    one of the geo shape generators.^([9](ch19.xhtml#idm45607740753936)) This creates
    a global mesh of meridians (lines of longitude) and parallels (lines of latitude),
    spaced by default at 10 degrees. When our `path` is applied to this `graticule`,
    it generates a suitably projected grid, as shown back in [Figure 19-1](#d3maps_target).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*d3.geo*中一个有用的组件，也是我们诺贝尔地图中使用的`graticule`，是地理形状生成器之一。[^9](ch19.xhtml#idm45607740753936)
    它创建了经线（经度线）和纬线（纬度线）的全局网格，默认间距为10度。当我们将`path`应用于这个`graticule`时，它生成了一个适当投影的网格，如[图19-1](#d3maps_target)所示。'
- en: '[Example 19-4](#d3maps_graticule) shows how to add a `graticule` to your map.
    Note that if you want your grid to overlay your map paths, then its SVG path should
    come after the map paths in the DOM tree. As you’ll see, you can use D3’s `insert`
    method to enforce this order.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例19-4](#d3maps_graticule)展示了如何向您的地图添加一个`graticule`。请注意，如果您希望网格覆盖地图路径，则其SVG路径应该在DOM树中地图路径之后。正如您将看到的，您可以使用D3的`insert`方法来强制执行此顺序。'
- en: Example 19-4\. Creating a `graticule`
  id: totrans-99
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例19-4\. 创建一个`graticule`
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO6-1)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO6-1)'
- en: Create a `graticule`, setting the grid spacing to 20 degrees.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`graticule`，将网格间距设置为20度。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO6-2)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO6-2)'
- en: Note the `datum` shorthand for data(`[graticule]`).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`datum`是用于数据的简写（`[graticule]`）。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO6-3)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO6-3)'
- en: Use the `path` generator to receive the `graticule` data and return a grid path.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`path`生成器接收`graticule`数据并返回网格路径。
- en: Now that we have our grid overlay and the ability to turn our map file into
    SVG paths with the required `projection`, let’s put the elements together.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的网格覆盖层，以及将地图文件转换为具有所需`projection`的SVG路径的能力，让我们将元素放在一起。
- en: Putting the Elements Together
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将元素放在一起
- en: Using the `projection`, `path`, and `graticule` components discussed, we’ll
    now create the basic map. This map is intended to respond to user events, highlighting
    those countries represented by the selected winners, and reflecting the number
    of winners with a filled red circle at the countries’ centers. We’ll deal with
    this interactive update separately.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用讨论的`projection`、`path`和`graticule`组件，我们将创建基本地图。此地图旨在响应用户事件，突出显示由选定获奖者代表的国家，并在国家中心用填充的红色圆圈反映获奖者数量。我们将单独处理此互动更新。
- en: '[Example 19-5](#d3maps_basic_map_code) shows the code required to build a basic
    global map. It follows what should now be a familiar pattern, getting the `mapContainer`
    from its `div` container (ID `nobel-map`), appending an `<svg>` tag to it, and
    then proceeding to add SVG elements, which in this case are D3-generated map paths.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 19-5](#d3maps_basic_map_code)显示了构建基本全球地图所需的代码。它遵循了现在应该是熟悉的模式，从其 `div` 容器（ID
    `nobel-map`）获取 `mapContainer`，向其附加一个 `<svg>` 标签，然后继续添加 SVG 元素，这些元素在这种情况下是由 D3
    生成的地图路径。'
- en: Our map has fixed components (e.g., the choice of `projection` and `path`) that
    are not dependent on any data change and are defined outside the initializing
    `nbviz.initMap` method. `nbviz.initMap` is called when the visualization is initialized
    with data from the server. It receives the TopoJSON `world` object and uses it
    to build the basic map with the `path` object. [Figure 19-4](#d3maps_basic_map)
    shows the result.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的地图有一些固定的组件（例如 `projection` 和 `path` 的选择），它们不依赖于任何数据变化，并且在初始化 `nbviz.initMap`
    方法之外定义。当从服务器初始化可视化时，将调用 `nbviz.initMap`。它接收 TopoJSON `world` 对象，并使用它构建带有 `path`
    对象的基本地图。[图 19-4](#d3maps_basic_map)显示了结果。
- en: Example 19-5\. Building the map basics
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-5。构建地图基础
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO7-1)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO7-1)'
- en: '`world` TopoJSON object with the country features with a `names` array connecting
    country names to country feature IDs (e.g., `{id:36, name: ''Australia''}`).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`world` 是包含国家特征及 `names` 数组的 TopoJSON 对象，将国家名称与国家特征 ID 相连接（例如，`{id:36, name:
    ''Australia''}`）。'
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO7-2)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO7-2)'
- en: Object that, if given country-name key, returns its respective GeoJSON geometry.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 给定国家名称键，返回其相应 GeoJSON 几何体的对象。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO7-3)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO7-3)'
- en: Note that we insert this `path` before the `graticule` grid, keeping the grid
    overlay on top.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在 `graticule` 网格之前插入了此 `path`，将网格覆盖在顶部。
- en: '[![4](assets/4.png)](#co_mapping_with_d3_CO7-4)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_mapping_with_d3_CO7-4)'
- en: Uses `datum` to assign the whole `land` object to our `path`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `datum` 将整个 `land` 对象分配给我们的 `path`。
- en: '![dpj2 1904](assets/dpj2_1904.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1904](assets/dpj2_1904.png)'
- en: Figure 19-4\. The basic map
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19-4。基本地图
- en: 'With our map shapes in place, we can use a little CSS to style [Figure 19-4](#d3maps_basic_map),
    adding a light azure for the oceans and light gray for the land. The `graticule`
    is a half-transparent dark gray and the country boundaries white:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 地图形状已经就位，我们可以使用一些 CSS 样式化[图 19-4](#d3maps_basic_map)，为海洋添加浅蓝色，为陆地添加浅灰色。`graticule`
    是半透明的深灰色，国家边界是白色：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With the SVG map assembled, let’s see how we use the winners dataset to draw
    the Nobel Prize–winning countries and the red indicator for number of wins.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 组装了 SVG 地图之后，让我们看看如何使用获奖者数据集来绘制诺贝尔奖获得国家以及获奖次数的红色指示器。
- en: Updating the Map
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新地图
- en: The first time our Nobel map gets updated is when the visualization is initialized.
    At this point the selected dataset is unfiltered, containing all the Nobel Prize
    winners. Subsequently, in response to filters applied by the user (e.g., all the
    Chemistry winners or those from France), the dataset will change and our map changes
    to reflect that.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们初始化可视化时，我们的**诺贝尔奖得主地图**首次更新。此时，所选数据集未经过过滤，包含所有的诺贝尔奖获得者。随后，根据用户应用的过滤器（例如，所有化学奖获得者或来自法国的获奖者），数据集将发生变化，我们的地图也会相应变化以反映这一点。
- en: 'So updating the map involves sending it a dataset of the Nobel Prize–winning
    countries with their current prize haul, dependent on the user filters applied.
    To do this, we use an `updateMap` method:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，更新地图涉及将当前奖项获取情况的诺贝尔奖获得国家数据集发送给地图，这取决于用户应用的过滤器。为此，我们使用一个 `updateMap` 方法：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `countryData` array has this form:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`countryData` 数组的形式如下：'
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO8-1)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO8-1)'
- en: The number of winners for the US in the currently selected dataset.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当前所选数据集中美国的获奖者数量。
- en: 'We want to convert this array before sending it to our D3 map. The following
    code does this job, providing an array of country objects with properties `geo`
    (the country’s GeoJSON geometry), `name` (the country name), and `number` (the
    country’s number of Nobel Prize winners):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在将此数组发送到我们的 D3 地图之前将其转换。以下代码完成了这项工作，提供了一个带有 `geo` 属性（国家的 GeoJSON 几何体）、`name`
    属性（国家名称）和 `number` 属性（诺贝尔奖获得者数量）的国家对象数组：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO9-1)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO9-1)'
- en: Filters out countries with no winners—​we only display winning countries on
    the map.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉没有获奖者的国家——我们只在地图上显示获奖国家。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO9-2)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO9-2)'
- en: Uses the country’s key (its name in this case) to retrieve its GeoJSON feature.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用国家的关键字（在本例中为其名称）来检索其GeoJSON特征。
- en: We want to display a red circular indicator at the center of our winning countries,
    indicating the number of prizes won. The circles’ areas should be proportional
    to the number of prizes won (absolute or per capita), which means (by circle area
    = pi × radius-squared) their radius should be a function of the square root of
    that prize number. D3 provides a handy `sqrt` scale for just such a need, allowing
    you to set a domain (min and max prize number in this case) and a range (min and
    max indicator radius).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在获奖国家的中心显示一个红色的圆形指示器，指示获奖数量。这些圆的面积应与获奖数量（绝对值或人均）成比例，这意味着（通过圆面积= pi × 半径平方）它们的半径应该是该奖品数量的平方根的函数。D3提供了一个方便的`sqrt`比例尺，用于这种需要，允许您设置一个域（在本例中为最小和最大奖品数量）和一个范围（最小和最大指示器半径）。
- en: 'Let’s see a quick example of the `sqrt` scale in action. In the following code,
    we set a scale with a domain between 0 and 100 and a zero-based range with a maximum
    area of 25 (5 × 5). This means calling the scale with 50 (half the range) should
    give the square root of half the maximum area (12.5):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看`sqrt`比例尺的示例。在以下代码中，我们设置一个域在0到100之间的比例尺，并且以基于零的范围设置了最大面积为25（5 × 5）。这意味着调用该比例尺的50（范围的一半）应该给出一半最大面积的平方根（12.5）：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To create our indicator radius scale, we create a `sqrt` scale using the maximum
    and minimum radii specified in *nbviz_core.js* to set its range:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的指标半径比例尺，我们使用*nbviz_core.js*中指定的最大和最小半径来设置其范围的`sqrt`比例尺：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In order to get the domain to our scales, we use this `mapData` to get the
    maximum number of winners per country and use that value as the domain’s upper
    value, with `0` for its lower:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的范围设置为尺度的域，我们使用这个`mapData`来获取每个国家获奖者的最大数量，并将该值作为域的上限值，域的下限为`0`：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To add our country shapes to the existing map, we bind `mapData` to a selection
    on the `countries` group of class `country` and implement an update pattern (see
    [“Updating the DOM with Data”](ch17.xhtml#d3bar_update)) to first add any country
    shapes required by the `mapData`. Instead of removing unbound country paths, we
    use the CSS `opacity` property to make the bound countries visible and the unbound
    invisible. A two-second transition is used to make these countries fade in and
    out appropriately. [Example 19-6](#d3maps_update_countries_code) shows the update
    pattern.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们国家的形状添加到现有地图中，我们将`mapData`绑定到`countries`组的`country`类的选择上，并实现更新模式（见[“使用数据更新DOM”](ch17.xhtml#d3bar_update)），首先添加`mapData`所需的任何国家形状。我们使用CSS的`opacity`属性，而不是移除未绑定的国家路径，使绑定的国家可见，未绑定的不可见。使用两秒的过渡效果使这些国家适当地淡入和淡出。[示例 19-6](#d3maps_update_countries_code)展示了更新模式。
- en: Example 19-6\. Updating the country shapes
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例19-6。更新国家形状
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO10-1)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO10-1)'
- en: Use the GeoJSON data to create country map shapes using our `path` object.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GeoJSON数据使用我们的`path`对象创建国家地图形状。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO10-2)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO10-2)'
- en: UI placeholders, which set the SVG paths to class *active* on mouse-over. Note
    that we use the `function` keyword here as opposed to the usual arrow notation
    shorthand (`⇒`). This is because we wish to use D3 to access the DOM element (map
    region) entered by the mouse using the `this` keyword, which is not available
    with arrow functions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: UI占位符，将SVG路径设置为鼠标悬停时的类*active*。请注意，我们在这里使用`function`关键字，而不是通常的箭头符号缩写（`⇒`）。这是因为我们希望使用D3访问由鼠标输入的DOM元素（地图区域），并使用`this`关键字，而箭头函数不支持该关键字。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO10-3)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO10-3)'
- en: A customized `exit` function that fades out (sets opacity to 0) the country
    shape over 2000 (`TRANS_DURATION`) milliseconds.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义的`exit`函数，以2000毫秒的速度淡出（将透明度设置为0）国家形状。
- en: '[![4](assets/4.png)](#co_mapping_with_d3_CO10-4)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_mapping_with_d3_CO10-4)'
- en: Any new countries are faded in (opacity 1) over 2000 (`TRANS_DURATION`) ms.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 任何新国家都会在2000毫秒内逐渐淡入（透明度为1）。
- en: 'Note that we add a CSS `country` class to freshly entered countries, setting
    their color to a light green. In addition to this, the mouse events are used to
    class the country `active` if the cursor is over it, highlighting it with a darker
    green. Here are the CSS classes:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们向新输入的国家添加了CSS类`country`，将它们的颜色设置为浅绿色。除此之外，鼠标事件用于将国家分类为`active`，如果光标悬停在其上，则用较深的绿色突出显示。这是CSS类：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The update pattern shown in [Example 19-6](#d3maps_update_countries_code) will
    smoothly transition from old to new datasets, produced in response to user-applied
    filters and passed to `updateMap`. All we need now is to add similarly responsive
    filled circular indicators, centered on the active countries and reflecting their
    current value, either an absolute or relative (per capita) measure of their Nobel
    Prize haul.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如[示例 19-6](#d3maps_update_countries_code)所示的更新模式将平滑过渡从旧数据集到新数据集，这是响应用户应用的过滤器并传递给
    `updateMap` 的结果。现在我们只需要添加类似响应的填充圆形指示器，这些指示器位于活跃国家的中心，并反映其当前值，无论是诺贝尔奖的绝对还是相对（人均）测量。
- en: Adding Value Indicators
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加价值指示器
- en: To add our circular value indicators, we want an update pattern that mirrors
    that used to create our country SVG paths. We want to bind to the `mapData` dataset
    and append, update, and remove our indicator circles accordingly. As with the
    country shapes, we’ll adjust the indicators’ opacity to add and remove them from
    the map.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加我们的圆形值指示器，我们需要一个更新模式，它与用于创建国家 SVG 路径的模式相似。我们希望绑定到 `mapData` 数据集并相应地追加、更新和删除我们的指示器圆圈。与国家形状一样，我们将调整指示器的不透明度以添加和移除它们。
- en: 'The indicators need to be placed at the center of their respective countries.
    D3’s `path` generator provides a number of useful utility methods for dealing
    with GeoJSON geometries. One of them is `centroid`, which computes the projected
    centroid for the specified feature:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 指示器需要放置在各自国家的中心位置。D3 的 `path` 生成器提供了许多处理 GeoJSON 几何体的实用工具方法之一就是 `centroid`，它计算指定要素的投影质心：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: While `path.centroid` does a pretty good job as a rule, and is very useful for
    labeling shape, boundaries, and so on, it can produce strange results, particularly
    with highly concave geometries. Handily, the world country data we stored in [“Getting
    Country Data for the Nobel Dataviz”](ch05.xhtml#country_data) contains the central
    coordinates of all our Nobel Prize countries.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `path.centroid` 通常能很好地工作，并且对于标记形状、边界等非常有用，但它在高度凹凸不平的几何体上可能会产生奇怪的结果。我们在[“为诺贝尔数据可视化获取国家数据”](ch05.xhtml#country_data)中存储的世界国家数据恰好包含所有诺贝尔奖获得国的中心坐标。
- en: 'We’ll first write a little method to retrieve those given a `mapData` object:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写一个小方法来检索那些给定 `mapData` 对象的方法：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO11-1)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO11-1)'
- en: Get the latitude and longitude of our country’s center by name, using the stored
    world country data.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用存储的世界国家数据，按名称获取我们国家中心的纬度和经度。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO11-2)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO11-2)'
- en: Use our equirectangular `projection` to turn these into SVG coordinates.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 利用我们的等经纬投影将其转换为 SVG 坐标。
- en: As shown in [Example 19-7](#d3maps_centroid_code), we bind our `mapData` to
    the selection of all elements of class `centroid` in the `centroids` group we
    added in [Example 19-5](#d3maps_basic_map_code). The data is bound via the `name`
    key.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如[示例 19-7](#d3maps_centroid_code)所示，我们将 `mapData` 绑定到我们在[示例 19-5](#d3maps_basic_map_code)中添加的
    `centroids` 组中所有 `centroid` 类元素的选择器上。数据通过 `name` 键进行绑定。
- en: Example 19-7\. Adding prize-haul indicators to the Nobel countries’ centroids
  id: totrans-174
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 19-7\. 给诺贝尔国家的质心添加奖项指示器
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO12-1)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO12-1)'
- en: Binds the map data to the centroid elements using the `name` key.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `name` 键将地图数据绑定到质心元素。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO12-2)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO12-2)'
- en: Uses the `getCentroid` function to return pixel positions for the geocoordinates
    of the countries’ centers.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `getCentroid` 函数返回国家中心的地理坐标的像素位置。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO12-3)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO12-3)'
- en: This 2000 ms transition fades the circular marker in by increasing its opacity
    while simultaneously transitioning to its new radius.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此 2000 毫秒的过渡通过增加其不透明度逐渐淡入圆形标记，同时过渡到其新半径。
- en: 'Using a bit of CSS, we can make the indicators red and slightly transparent,
    allowing map details and, where they are densely packed in Europe, other indicators
    to show through. If the country is selected by the user, using the country filter
    on the UI bar, it is classed as `active` and given a golden hue. Here’s the CSS
    to do that:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 利用一些 CSS，我们可以将指示器设为红色并略显透明，允许地图细节和（在欧洲密集区域）其他指示器显示出来。如果用户选择了国家，可以使用 UI 栏上的国家过滤器，这些国家将被标记为
    `active` 并呈现金色。以下是实现此效果的 CSS 代码：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO13-1)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO13-1)'
- en: This allows mouse events to propagate to country shapes below the circles, allowing
    the user to still click on them.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以让鼠标事件传播到圆形下面的国家形状，使用户仍然可以点击它们。
- en: The active centroid indicators we just added are the last element of our Nobel
    Prize map. Now let’s take a look at the complete article.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的活动重心指示器是我们诺贝尔奖地图的最后一个元素。现在让我们来看一下完整的文章。
- en: Our Completed Map
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们完成的地图
- en: With the country and indicator update patterns in place, our map should respond
    to user-driven filtering with a smooth transition. [Figure 19-5](#d3maps_transition)
    shows the result of selecting Nobel Prizes for Economics. Only winning countries
    remain highlighted and the value indicators are resized, reflecting American dominance
    of this category.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 完成国家和指示器更新模式后，我们的地图应能够对用户驱动的过滤作出平滑的过渡。[图19-5](#d3maps_transition)显示了选择经济学诺贝尔奖的结果。只有获奖国家保持突出显示，并且值指示器被调整大小，反映了美国在该类别中的主导地位。
- en: '![dpj2 1905](assets/dpj2_1905.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1905](assets/dpj2_1905.png)'
- en: Figure 19-5\. (left) Shows the map with the full Nobel dataset; (right) prizes
    are filtered by category, showing the Economics winners (and the dominance of
    the US economists)
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-5\. （左）显示带有完整诺贝尔数据集的地图；（右）奖项按类别进行过滤，显示经济学获奖者（以及美国经济学家的主导地位）
- en: The map as it stands in not interactive but does show when a user hovers over
    a particular country with a mouse, by calling the `mouseenter` and `mouseout`
    callback functions and adding or removing an `active` class. These callbacks could
    easily be used to add more functionality to the map, such as tooltips or the use
    of the countries as clickable data filters. Let’s now use these to build a simple
    tooltip, to show the country the mouse is hovering over and some simple prize
    information.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将鼠标移到国家上时，调用`mouseenter`和`mouseout`回调函数并添加或删除`active`类时，在不互动的地图上显示。这些回调函数可以很容易地用于增加地图的更多功能，例如工具提示或使用国家作为可点击的数据过滤器。现在让我们使用它们来构建一个简单的工具提示，显示鼠标悬停在哪个国家和一些简单的奖励信息。
- en: Building a Simple Tooltip
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的工具提示
- en: Tooltips and other interactive widgets are the kind of thing commonly demanded
    of data visualizers and though they can get quite involved, particularly if they
    themselves are interactive (e.g., menus that appear on mouse hover), there are
    some simple recipes that are very handy to know. In this section, I’ll show how
    to build a simple but pretty effective tooltip. [Figure 19-6](#d3map_tooltip)
    shows what we’re aiming to build.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 工具提示和其他交互式小部件通常是数据可视化者常常要求的内容，尽管它们可能变得非常复杂，特别是如果它们本身是交互式的（例如，鼠标悬停时出现的菜单），但有一些简单的技巧非常有用。在本节中，我将展示如何构建一个简单但相当有效的工具提示。[图19-6](#d3map_tooltip)展示了我们的目标。
- en: '![dpj2 1504](assets/dpj2_1504.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1504](assets/dpj2_1504.png)'
- en: Figure 19-6\. A simple tooltip for our Nobel Prize map
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19-6\. 我们诺贝尔奖地图的简单工具提示
- en: 'Let’s remind ourselves of our current `countries` update, where `mouseenter`
    and `mouseout` event handlers are added during a data-join:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们当前的`countries`更新，其中在数据连接过程中添加了`mouseenter`和`mouseout`事件处理程序：
- en: '[PRE25]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In order to add a tooltip to our map, we need to do three things:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向我们的地图添加工具提示，我们需要做三件事：
- en: Create a tooltip box in HTML with placeholders for the information we want to
    display—​in this case, country name and number of wins in the selected prize category.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML中创建一个带有所需信息占位符的工具提示框，例如，所选奖项类别中的国家名称和获奖数量。
- en: Display this HTML box over the mouse when the user moves it into a country and
    hide it when they move the mouse out.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户将鼠标移入一个国家时，在鼠标移出时隐藏HTML框。
- en: Update the box when displayed using the data bound to the country underneath
    the mouse.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用绑定到鼠标下方国家的数据更新显示框。
- en: 'We create the HTML for the tooltip by adding a content block to the Nobel-viz
    map section, with ID `map-tooltip`, an `<h2>` header for its title, and a `<p>`
    tag for the tooltip’s text:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在Nobel-viz地图部分添加一个内容块来创建工具提示的HTML，其ID为`map-tooltip`，一个`<h2>`标题和一个用于工具提示文本的`<p>`标签：
- en: '[PRE26]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We’ll also need some CSS for the tooltip’s look and feel, added to our *style.css*
    file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些CSS来调整工具提示的外观和感觉，添加到我们的*style.css*文件中：
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO14-1)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO14-1)'
- en: Setting `pointer-events` to `none` effectively lets you click on things underneath
    the tooltip.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 将`pointer-events`设置为`none`有效地允许您在工具提示下面点击东西。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO14-2)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO14-2)'
- en: Initially, the tooltip is hidden far to the (virtual) left of the browser window,
    using a large negative x index.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，提示框隐藏在浏览器窗口的（虚拟）左侧，使用一个较大的负 x 索引。
- en: 'With our tooltip’s HTML in place and the element hidden to the left of the
    browser window (`left` is –9999 pixels), we just need to extend our `mousein`
    and `mouseout` callback functions to display or hide the tooltip. The `mousein`
    function, called when the user moves the mouse into a country, does most of the
    work:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的提示框 HTML 已经就位，并且元素隐藏在浏览器窗口的左侧（`left` 是 -9999 像素），我们只需扩展我们的 `mousein` 和 `mouseout`
    回调函数来显示或隐藏提示框。`mousein` 函数在用户将鼠标移动到国家时被调用，完成大部分工作：
- en: '[PRE28]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO15-1)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO15-1)'
- en: D3’s `pointer` method returns the mouse coordinates from the `event` object
    (here, relative to the parent map group) in pixels, which we can use to position
    the tooltip.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的 `pointer` 方法从 `event` 对象中返回鼠标坐标（这里是相对于父地图组的），以像素为单位，我们可以用它来定位提示框。
- en: '[![2](assets/2.png)](#co_mapping_with_d3_CO15-2)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_mapping_with_d3_CO15-2)'
- en: We get the computed width and height of the tooltip box, which has been adjusted
    to accommodate our country title and prize string.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取了提示框框的计算宽度和高度，已调整以适应我们的国家标题和奖项字符串。
- en: '[![3](assets/3.png)](#co_mapping_with_d3_CO15-3)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_mapping_with_d3_CO15-3)'
- en: We use the mouse coordinates and the width and height of the tooltip box to
    position the box centered horizontally and roughly above the mouse cursor (the
    width and height don’t include our 10 pixels of padding around the tooltip’s `<div>`).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用鼠标坐标和提示框框的宽度和高度来将框居中水平放置，并大致位于鼠标光标上方（宽度和高度不包括我们的 10 像素填充周围的提示框 `<div>`）。
- en: '[![4](assets/4.png)](#co_mapping_with_d3_CO15-4)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_mapping_with_d3_CO15-4)'
- en: When the mouse leaves a country, we vanish the tooltip by placing it to the
    far left of the map.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标离开一个国家时，我们通过将其放置到地图的最左边使提示框消失。
- en: 'With the `mouseenter` callback function written, we now only need a `mouseout`
    to hide the tooltip by placing it far to the left of the browser window:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 编写了 `mouseenter` 回调函数后，我们现在只需要一个 `mouseout` 来通过将其放置到浏览器窗口的左侧远处来隐藏提示框：
- en: '[PRE29]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO16-1)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO16-1)'
- en: When the mouse leaves the country we shift the tooltip far to the left, out
    of the browser viewport, and remove the `'active'` class from the country, returning
    it to the default country color.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标离开国家时，我们将提示框移到浏览器视口的左侧远处，并从国家中移除 `'active'` 类，使其返回默认国家颜色。
- en: With the `mouseenter` and `mouseout` functions operating in concert, you should
    see the tooltip appearing and disappearing where needed, just as shown in [Figure 19-6](#d3map_tooltip).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 `mouseenter` 和 `mouseout` 函数协同工作，你应该可以看到提示框根据需要出现和消失，正如 [Figure 19-6](#d3map_tooltip)
    所示。
- en: Updating the Map
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新地图
- en: 'When the map module is imported, it appends a callback function to the callbacks
    array in the core module. When data is updated in response to user interaction,
    this callback function is called and the bar chart updated with new country data:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 当地图模块被导入时，它会将回调函数附加到核心模块中的回调数组中。当用户交互响应中更新数据时，将调用此回调函数，并使用新的国家数据更新条形图：
- en: '[PRE30]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_mapping_with_d3_CO17-1)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_mapping_with_d3_CO17-1)'
- en: This anonymous function is called in the core module when data is updated.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此匿名函数在核心模块中在数据更新时被调用。
- en: Now that we’ve built the map component of our Nobel dataviz, let’s summarize
    what we’ve learned before moving on to show how user input drives the visualization.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了我们的诺贝尔数据可视化的地图组件，让我们在继续展示用户输入如何驱动可视化之前总结一下我们学到的内容。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'D3 mapping is a rich area, with many varied projections and lots of utility
    methods to help with manipulating geometries. But building a map follows a fairly
    standard procedure, as demonstrated in the chapter: you first choose your projection—say,
    a Mercator or maybe the [Albers conic projection](https://oreil.ly/Nz6Ar) commonly
    used for mapping the US. You then use this projection to create a D3 `path` generator,
    which turns GeoJSON features into SVG paths, creating the map you see. The GeoJSON
    will normally be extracted from more efficient TopoJSON data.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: D3 映射是一个丰富的领域，有许多不同的投影和大量的实用方法来帮助操纵几何图形。但是构建地图遵循一个相当标准的过程，就像本章演示的那样：首先选择你的投影方式——比如墨卡托投影或者通常用于美国地图绘制的[阿尔伯斯圆锥投影](https://oreil.ly/Nz6Ar)。然后使用这个投影创建一个
    D3 的 `path` 生成器，将 GeoJSON 特征转换为 SVG 路径，创建你看到的地图。GeoJSON 通常从更高效的 TopoJSON 数据中提取。
- en: This chapter also demonstrated how easy it is with D3 to interactively highlight
    your map and deal with cursor movements. Taken together, the basic set of skills
    should allow you to start building your own mapping visualizations.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还展示了使用D3如何轻松交互地突出显示您的地图并处理鼠标移动。综合起来，这些基本技能应该使您能够开始构建自己的地图可视化。
- en: Now that we’ve constructed all of our SVG-based graphical elements, let’s see
    how well D3 works with conventional HTML elements by building our winners list
    and an individual’s biography box.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经构建了所有基于SVG的图形元素，让我们看看D3如何与传统HTML元素一起工作，通过构建我们的获奖者列表和个人传记框。
- en: ^([1](ch19.xhtml#idm45607741792448-marker)) The math of geometric projections,
    for example, can get complicated fast.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch19.xhtml#idm45607741792448-marker)) 例如，地理投影的数学可以迅速变得复杂。
- en: ^([2](ch19.xhtml#idm45607741786480-marker)) I use and thoroughly recommend the
    open source [QGIS](https://www.qgis.org/en/site).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch19.xhtml#idm45607741786480-marker)) 我使用并强烈推荐开源的[QGIS](https://www.qgis.org/en/site)。
- en: ^([3](ch19.xhtml#idm45607741781184-marker)) Python’s *topojson.py* and the TopoJSON
    command-line program.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch19.xhtml#idm45607741781184-marker)) Python的*topojson.py*和TopoJSON命令行程序。
- en: ^([4](ch19.xhtml#idm45607741779664-marker)) As we’ll see, it does lack a couple
    of our Nobel Prize countries, but these are too small to be clickable and we have
    the coordinates of their centers, allowing for a visual cue to be overlaid.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch19.xhtml#idm45607741779664-marker)) 正如我们将看到的那样，它确实缺少我们的几个诺贝尔奖国家，但这些国家太小，无法点击，我们有它们中心的坐标，可以在视觉上叠加标记。
- en: ^([5](ch19.xhtml#idm45607741574800-marker)) See [this site by Mike Bostock](https://bost.ocks.org/mike/simplify)
    for a very cool example.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch19.xhtml#idm45607741574800-marker)) 请查看[Mike Bostock的这个网站](https://bost.ocks.org/mike/simplify)以获取一个非常酷的例子。
- en: ^([6](ch19.xhtml#idm45607741352656-marker)) By installing globally, you can
    use the `geo2topo` command in any directory.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch19.xhtml#idm45607741352656-marker)) 通过全局安装，您可以在任何目录中使用`geo2topo`命令。
- en: ^([7](ch19.xhtml#idm45607741031424-marker)) The [extended set of D3 `projection`s](https://oreil.ly/14vLd)
    is part of an extension of D3, not in the main library.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch19.xhtml#idm45607741031424-marker)) [D3的扩展投影集](https://oreil.ly/14vLd)是D3的一个扩展部分，不在主库中。
- en: ^([8](ch19.xhtml#idm45607741009120-marker)) See [*https://oreil.ly/oAppn*](https://oreil.ly/oAppn)
    for a nice demonstration.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch19.xhtml#idm45607741009120-marker)) 请参阅[*https://oreil.ly/oAppn*](https://oreil.ly/oAppn)以查看一个很好的演示。
- en: ^([9](ch19.xhtml#idm45607740753936-marker)) See [the D3 GitHub](https://oreil.ly/KqnF6)
    for a full list.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch19.xhtml#idm45607740753936-marker)) 请查看[D3 GitHub](https://oreil.ly/KqnF6)获取完整列表。
