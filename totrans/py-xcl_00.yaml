- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft is running a feedback forum for Excel on [UserVoice](https://oreil.ly/y1XwU)
    where everybody can submit a new idea for others to vote on. The top voted feature
    request is “Python as an Excel scripting language,” and it has roughly twice as
    many votes as the second most voted feature request. Though nothing really happened
    since the idea was added in 2015, Excel users were fueled with new hope at the
    end of 2020 when Guido van Rossum, the creator of Python, [tweeted](https://oreil.ly/N1_7N)
    that his “retirement was boring” and he would join Microsoft. If his move has
    any influence on the integration of Excel and Python, I don’t know. I do know,
    however, what makes this combination so compelling and how you can start using
    Excel and Python together—today. And this is, in a nutshell, what this book is
    about.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main driving force behind the Python for Excel story is the fact that we
    are living in a world of data. Nowadays, huge datasets are available to everybody
    and about everything. Often, these datasets are so big that they don’t fit into
    a spreadsheet anymore. A few years ago, this may have been referred to as big
    data, but nowadays, a dataset of a few million rows is really nothing special.
    Excel has evolved to cope with that trend: it introduced Power Query to load and
    clean datasets that don’t fit into a spreadsheet and Power Pivot, an add-in to
    perform data analysis on these datasets and present the results. Power Query is
    based on the Power Query M formula language (M), while Power Pivot defines formulas
    by using Data Analysis Expressions (DAX). If you also want to automate a few things
    in your Excel file, then you would use Excel’s built-in automation language, Visual
    Basic for Applications (VBA). That is, for something fairly simple, you can end
    up using VBA, M, and DAX. One issue with this is that all these languages only
    serve you in the Microsoft world, most prominently in Excel and Power BI (I will
    introduce Power BI briefly in [Chapter 1](index_split_007.html#filepos32075)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python, on the other hand, is a general-purpose programming language that has
    become one of the most popular choices amongst analysts and data scientists. If
    you use Python with Excel, you are able to use a programming language that is
    good at all aspects of the story, whether that’s automating Excel, accessing and
    preparing datasets, or performing data analysis and visualization tasks. Most
    importantly, you can reuse your Python skills outside of Excel: if you need to
    scale up your computing power, you could easily move your quantitative model,
    simulation, or machine learning application to the cloud, where practically unconstrained
    computing resources are waiting for you.'
  prefs: []
  type: TYPE_NORMAL
- en: Why I Wrote This Book
  prefs: []
  type: TYPE_NORMAL
- en: Through my work on xlwings, the Excel automation package that we will meet in
    [Part IV](index_split_023.html#filepos1235617) of this book, I am in close contact
    with many users who use Python for Excel—whether that’s via the [issue tracker](https://oreil.ly/ZJQkB)
    on GitHub, a question on [StackOverflow](https://stackoverflow.com) or at a physical
    event like a meetup or a conference.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a regular basis, I am asked to recommend resources to get started with Python.
    While there is certainly no shortage of Python introductions, they are often either
    too general (nothing about data analysis) or too specific (full scientific introductions).
    However, Excel users tend to be somewhere in the middle: they certainly work with
    data, but a full scientific introduction may be too technical. They also often
    have specific requirements and questions that aren’t answered in any of the existing
    material. Some of these questions are:'
  prefs: []
  type: TYPE_NORMAL
- en: Which Python-Excel package do I need for which task?
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: How do I move my Power Query database connection over to Python?
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: What’s the equivalent of Excel’s AutoFilter or pivot table in Python?
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: I wrote this book to get you from zero Python knowledge to be able to automate
    your Excel-centric tasks and leverage Python’s data analysis and scientific computing
    tools in Excel without any detours.
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs: []
  type: TYPE_NORMAL
- en: If you are an advanced Excel user who wants to beat the limits of Excel with
    a modern programming language, this book is for you. Most typically, this means
    that you spend hours every month downloading, cleaning, and copy/pasting big amounts
    of data into mission-critical spreadsheets. While there are different ways to
    overcome Excel’s limits, this book will focus on how to use Python for this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should have a basic understanding of programming: it helps if you have
    already written a function or a for loop (no matter in which programming language)
    and have an idea about what an integer or a string is. You might even be able
    to master this book if you are used to writing complex cell formulas or have experience
    with tweaking recorded VBA macros. You are not expected to have any Python-specific
    experience, though, as there are introductions to all the tools that we will use
    including an introduction to Python itself.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a seasoned VBA developer, you will find regular comparisons between
    Python and VBA that will allow you to ship around the common gotchas and hit the
    ground running.
  prefs: []
  type: TYPE_NORMAL
- en: This book can also be helpful if you are a Python developer and need to learn
    about the different ways that Python can deal with the Excel application and Excel
    files to be able to pick the right package given the requirements of your business
    users.
  prefs: []
  type: TYPE_NORMAL
- en: How This Book Is Organized
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, I will show you all aspects of the Python for Excel story split
    into four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Part I: Introduction to Python](index_split_006.html#filepos31953)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This part starts by looking into the reasons why Python is such an enjoyable
    companion for Excel before introducing the tools we’ll be using in this book:
    the Anaconda Python distribution, Visual Studio Code, and Jupyter notebooks. This
    part will also teach you enough Python to be able to master the rest of this book.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Part II: Introduction to pandas](index_split_013.html#filepos433190)'
  prefs: []
  type: TYPE_NORMAL
- en: pandas is Python’s go-to library for data analysis. We will learn how to replace
    Excel workbooks with a combination of Jupyter notebooks and pandas. Usually, pandas
    code is both easier to maintain and more efficient than an Excel workbook, and
    you can work with datasets that don’t fit into a spreadsheet. Unlike Excel, pandas
    allows you to run your code wherever you want, including the cloud.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Part III: Reading and Writing Excel Files without Excel](index_split_018.html#filepos863198)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This part is about manipulating Excel files by using one of the following Python
    packages: pandas, OpenPyXL, XlsxWriter, pyxlsb, xlrd, and xlwt. These packages
    are able to read and write Excel workbooks directly on disk and as such replace
    the Excel application: as you don’t require an installation of Excel, they work
    on any platform that Python supports, including Windows, macOS, and Linux. A typical
    use case for a reader package is to read in data from Excel files that you receive
    every morning from an external company or system and store their contents in a
    database. A typical use case for a writer package is to provide the functionality
    behind the famous “Export to Excel” button that you find in almost every application.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Part IV: Programming the Excel Application with xlwings](index_split_023.html#filepos1235617)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part, we’ll see how we can use Python with the xlwings package to automate
    the Excel application rather than reading and writing Excel files on disk. Therefore,
    this part requires you to have a local installation of Excel. We will learn how
    to open Excel workbooks and manipulate them in front of our eyes. In addition
    to reading and writing files via Excel, we will build interactive Excel tools:
    these allow us to click a button to have Python perform something that you may
    have done previously with VBA macros, such as a computationally expensive calculation.
    We’ll also learn how to write user-defined functions[1](#filepos31598) (UDFs)
    in Python instead of VBA.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s important to understand the fundamental difference between reading and
    writing Excel files ([Part III](index_split_018.html#filepos863198)) and programming
    the Excel application ([Part IV](index_split_023.html#filepos1235617)) as visualized
    in [Figure P-1](#filepos18540).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure P-1\. Reading and writing Excel files (Part III) vs. programming Excel
    (Part IV)
  prefs: []
  type: TYPE_NORMAL
- en: Since [Part III](index_split_018.html#filepos863198) doesn’t require an installation
    of Excel, everything works on all platforms that Python supports, mainly Windows,
    macOS, and Linux. [Part IV](index_split_023.html#filepos1235617), however, will
    only work on those platforms that Microsoft Excel supports, i.e., Windows and
    macOS, as the code relies on a local installation of Microsoft Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Python and Excel Versions
  prefs: []
  type: TYPE_NORMAL
- en: This book is based on Python 3.8, which is the Python version that comes with
    the latest version of the Anaconda Python distribution at the time of this writing.
    If you want to use a newer version of Python, follow the instructions on the [book’s
    home page](https://xlwings.org/book), but make sure that you don’t use an older
    version. I will occasionally make a comment if something changes with Python 3.9.
  prefs: []
  type: TYPE_NORMAL
- en: This book also expects you to use a modern version of Excel, meaning at least
    Excel 2007 on Windows and Excel 2016 on macOS. The locally installed version of
    Excel that comes with the Microsoft 365 subscription will also work perfectly—in
    fact, I even recommend it, as it has the latest features that you won’t find in
    other versions of Excel. It was also the version I used to write this book, so
    if you use another version of Excel, you might sometimes see a small difference
    in the name or location of a menu item.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs: []
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Italic
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Constant width bold`'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Constant width italic`'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: TIP
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: WARNING
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs: []
  type: TYPE_NORMAL
- en: I am maintaining a [web page](https://xlwings.org/book) with additional information
    to help you with this book. Make sure to check it out, especially if you run into
    an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Supplemental material (code examples, exercises, etc.) is available for download
    at [https://github.com/fzumstein/python-for-excel](https://github.com/fzumstein/python-for-excel).
    To download this companion repository, click on the green Code button, then select
    Download ZIP. Once downloaded, right-click the file on Windows and select Extract
    All to unzip the contained files into a folder. On macOS, simply double-click
    the file to unzip. If you know how to work with Git, you could also use Git to
    clone the repository to your local hard disk. You can put the folder anywhere
    you want, but I will refer to it occasionally as follows in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Users\``username``\python-for-excel`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'By simply downloading and unzipping the ZIP file on Windows, you’ll end up
    with a folder structure similar to this one (note the repeated folder names):'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\...\Downloads\python-for-excel-1st-edition\python-for-excel-1st-edition`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Copying the contents of this folder into one you create under C:\Users\<username>\python-for-excel
    might make it easier for you to follow along. The same remarks are true for macOS,
    i.e., copy the files to /Users/<username>/python-for-excel.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    send an email to [bookquestions@oreilly.com](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “Python for Excel
    by Felix Zumstein (O’Reilly). Copyright 2021 Zoomer Analytics LLC, 978-1-492-08100-5.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [permissions@oreilly.com](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For more than 40 years, [O’Reilly Media](http://oreilly.com) has provided technology
    and business training, knowledge, and insight to help companies succeed.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [http://oreilly.com](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs: []
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [https://oreil.ly/py4excel](https://oreil.ly/py4excel).
  prefs: []
  type: TYPE_NORMAL
- en: Email [bookquestions@oreilly.com](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about our books, courses, conferences, and news, see our
    website at [http://www.oreilly.com](http://www.oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [http://facebook.com/oreilly](http://facebook.com/oreilly).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [http://twitter.com/oreillymedia](http://twitter.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [http://www.youtube.com/oreillymedia](http://www.youtube.com/oreillymedia).'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs: []
  type: TYPE_NORMAL
- en: As a first-time author, I am incredibly grateful for the help I got from so
    many people along the way—they made this journey a lot easier for me!
  prefs: []
  type: TYPE_NORMAL
- en: At O’Reilly, I would like to thank my editor, Melissa Potter, who did a great
    job in keeping me motivated and on schedule and who helped me to bring this book
    into a readable form. I’d also like to thank Michelle Smith, who worked with me
    on the initial book proposal, and Daniel Elfanbaum, who never tired of answering
    my technical questions.
  prefs: []
  type: TYPE_NORMAL
- en: A big thank you goes to all my colleagues, friends, and clients who invested
    many hours in reading the earliest forms of my drafts. Their feedback was crucial
    to making the book easier to understand, and some of the case studies are inspired
    by real-world Excel problems that they shared with me. My thanks go to Adam Rodriguez,
    Mano Beeslar, Simon Schiegg, Rui Da Costa, Jürg Nager, and Christophe de Montrichard.
  prefs: []
  type: TYPE_NORMAL
- en: I also got helpful feedback from readers of the Early Release version that was
    published on the O’Reilly online learning platform. Thank you Felipe Maion, Ray
    Doue, Kolyu Minevski, Scott Drummond, Volker Roth, and David Ruggles!
  prefs: []
  type: TYPE_NORMAL
- en: I was very lucky that the book got reviewed by highly qualified tech reviewers
    and I really appreciate the hard work they put in under a lot of time pressure.
    Thanks for all your help, Jordan Goldmeier, George Mount, Andreas Clenow, Werner
    Brönnimann, and Eric Moreira!
  prefs: []
  type: TYPE_NORMAL
- en: Special thanks go to Björn Stiel, who wasn’t just a tech reviewer, but from
    whom I also learned many of the things I am writing about in this book. I’ve enjoyed
    working with you these past few years!
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, I’d like to extend my gratitude to Eric Reynolds, who merged
    his ExcelPython project into the xlwings code base in 2016\. He also redesigned
    the whole package from scratch, making my horrible API from the early days a thing
    of the past. Thank you very much!
  prefs: []
  type: TYPE_NORMAL
- en: '[1  ](#filepos18058) Microsoft has started to use the term custom functions
    instead of UDFs. In this book, I will continue to call them UDFs.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
