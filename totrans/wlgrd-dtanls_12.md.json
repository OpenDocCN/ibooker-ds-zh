["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nusers = pd.read_parquet(\"./data/users.parquet\")\nusers.head()\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()      #1\n\nX = users.drop(columns=[\"user_id\"])\n\ncontinuous_features = ['number_of_apps',\n                       'number_of_sessions',\n                       'avg_session_length']\n\nX_scaled = X.copy()\nX_scaled.loc[:,continuous_features]\n↪ = scaler.fit_transform(X[continuous_features])    #2\n\nX_scaled.head().transpose()    #3\n```", "```py\nfrom sklearn.cluster import KMeans\n\nk_values = range(3, 15)\ninertia_values = []\n\nfor k in k_values:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans.fit(X_scaled)\n    inertia_values.append(kmeans.inertia_)\n\nfig, axis = plt.subplots()\n\naxis.plot(k_values, inertia_values)\n\n_ = axis.set(\n    title=\"'Inertia' values for different values of k\",\n    xlabel=\"Number of clusters (the 'k' in k-means)\",\n    ylabel=\"Inertia\"\n)\n\naxis.set_ybound(0, 900)\n\nplt.show()\n```", "```py\nkmeans = KMeans(n_clusters=7, random_state=42)\nclusters = kmeans.fit_predict(X_scaled)\nusers[\"cluster\"] = clusters\n\nusers.head().transpose()\n```", "```py\nusers[\"cluster\"].value_counts().sort_index()\n```", "```py\nimport numpy as np\n\noriginal_cluster_centers\n↪ = np.copy(kmeans.cluster_centers_)    #1\n\ncluster_centers = pd.DataFrame(\n    data=original_cluster_centers,\n    columns=X_scaled.columns\n)\n\ncluster_centers.loc[:,continuous_features]\n↪ = scaler.inverse_transform(original_cluster_centers[:,-3:])     #2\n\ncluster_centers.transpose().round(2)\n```"]