["```py\n$ grep LSU tests/inputs/lsu.fq\n@ITSLSUmock2p.ITS_M01380:138:000000000-C9GKM:1:1101:14440:2042 2:N:0\n@ITSLSUmock2p.ITS_M01384:138:000000000-C9GKM:1:1101:14440:2043 2:N:0\n```", "```py\n$ grep LSU tests/inputs/lsu.fq | wc -l\n       2\n```", "```py\n$ ./asciitbl.py\n  0 NA      26 NA      52 4       78 N      104 h\n  1 NA      27 NA      53 5       79 O      105 i\n  2 NA      28 NA      54 6       80 P      106 j\n  3 NA      29 NA      55 7       81 Q      107 k\n  4 NA      30 NA      56 8       82 R      108 l\n  5 NA      31 NA      57 9       83 S      109 m\n  6 NA      32 SPACE   58 :       84 T      110 n\n  7 NA      33 !       59 ;       85 U      111 o\n  8 NA      34 \"       60 <       86 V      112 p\n  9 NA      35 #       61 =       87 W      113 q\n 10 NA      36 $       62 >       88 X      114 r\n 11 NA      37 %       63 ?       89 Y      115 s\n 12 NA      38 &       64 @       90 Z      116 t\n 13 NA      39 '       65 A       91 [      117 u\n 14 NA      40 (       66 B       92 \\      118 v\n 15 NA      41 )       67 C       93 ]      119 w\n 16 NA      42 *       68 D       94 ^      120 x\n 17 NA      43 +       69 E       95 _      121 y\n 18 NA      44 ,       70 F       96 `      122 z\n 19 NA      45 -       71 G       97 a      123 {\n 20 NA      46 .       72 H       98 b      124 |\n 21 NA      47 /       73 I       99 c      125 }\n 22 NA      48 0       74 J      100 d      126 ~\n 23 NA      49 1       75 K      101 e      127 DEL\n 24 NA      50 2       76 L      102 f\n 25 NA      51 3       77 M      103 g\n```", "```py\n$ grep -A 4 LSU tests/inputs/lsu.fq | head -4\n@ITSLSUmock2p.ITS_M01380:138:000000000-C9GKM:1:1101:14440:2042 2:N:0\nCAAGTTACTTCCTCTAAATGACCAAGCCTAGTGTAGAACCATGTCGTCAGTGTCAGTCTGAGTGTAGATCT\\\nCGGTGGTCGCCGTATCATTAAAAAAAAAAATGTAATACTACTAGTAATTATTAATATTATAATTTTGTCTA\\\nTTAGCATCTTATTATAGATAGAAGATATTATTCATATTTCACTATCTTATACTGATATCAGCTTTATCAGA\\\nTCACACTCTAGTGAAGATTGTTCTTAACTGAAATTTCCTTCTTCATACAGACACATTAATCTTACCTA\n+\nEFGGGGGGGGGCGGGGGFCFFFGGGGGFGGGGGGGGGGGFGGGGGGGFGFFFCFGGFFGGGGGGGGGFGGG\\\nGFGGGDG<FD@4@CFFGGGGCFFAFEFEG+,9,,,,99,,,5,,49,4,8,4,444,4,4,,,,,,,,,,,\\\n,,,8,,,,63,,,,,,,,376,3,,,,,,,8,,,,,,,,,+++++++++++++3++25+++0+*+0+*0+*\\\n**))*0))1/+++**************.****.*******0*********/(,(/).)))1)).).).\n```", "```py\n$ cd 16_fastx_grep\n$ cp solution.py fastx_grep.py\n```", "```py\n$ grep -h\nusage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]\n\t[-e pattern] [-f file] [--binary-files=value] [--color=when]\n\t[--context[=num]] [--directories=action] [--label] [--line-buffered]\n\t[--null] [pattern] [file ...]\n```", "```py\n$ ./fastx_grep.py -h\nusage: fastx_grep.py [-h] [-f str] [-O str] [-o FILE] [-i]\n                     PATTERN FILE [FILE ...]\n\nGrep through FASTX files\n\npositional arguments:\n  PATTERN               Search pattern ![1](assets/1.png)\n  FILE                  Input file(s) ![2](assets/2.png)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f str, --format str  Input file format (default: ) ![3](assets/3.png)\n  -O str, --outfmt str  Output file format (default: ) ![4](assets/4.png)\n  -o FILE, --outfile FILE\n                        Output file (default: <_io.TextIOWrapper ![5](assets/5.png)\n                        name='<stdout>' mode='w' encoding='utf-8'>)\n  -i, --insensitive     Case-insensitive search (default: False) ![6](assets/6.png)\n```", "```py\nfrom typing import List, NamedTuple, TextIO\n\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    pattern: str ![1](assets/1.png)\n    files: List[TextIO] ![2](assets/2.png)\n    input_format: str ![3](assets/3.png)\n    output_format: str ![4](assets/4.png)\n    outfile: TextIO ![5](assets/5.png)\n    insensitive: bool ![6](assets/6.png)\n```", "```py\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Grep through FASTX files',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('pattern', ![1](assets/1.png)\n                        metavar='PATTERN',\n                        type=str,\n                        help='Search pattern')\n\n    parser.add_argument('file',\n                        metavar='FILE',\n                        nargs='+',\n                        type=argparse.FileType('rt'), ![2](assets/2.png)\n                        help='Input file(s)')\n\n    parser.add_argument('-f',\n                        '--format',\n                        help='Input file format',\n                        metavar='str',\n                        choices=['fasta', 'fastq'], ![3](assets/3.png)\n                        default='')\n\n    parser.add_argument('-O',\n                        '--outfmt',\n                        help='Output file format',\n                        metavar='str',\n                        choices=['fasta', 'fastq', 'fasta-2line'], ![4](assets/4.png)\n                        default='')\n\n    parser.add_argument('-o',\n                        '--outfile',\n                        help='Output file',\n                        type=argparse.FileType('wt'), ![5](assets/5.png)\n                        metavar='FILE',\n                        default=sys.stdout)\n\n    parser.add_argument('-i', ![6](assets/6.png)\n                        '--insensitive',\n                        help='Case-insensitive search',\n                        action='store_true')\n\n    args = parser.parse_args()\n\n    return Args(pattern=args.pattern,\n                files=args.file,\n                input_format=args.format,\n                output_format=args.outfmt,\n                outfile=args.outfile,\n                insensitive=args.insensitive)\n```", "```py\n$ ./fastx_grep.py LSU tests/inputs/lsu.fq | wc -l\n       8\n```", "```py\n$ ./fastx_grep.py lsu tests/inputs/lsu.fq | wc -l\n       0\n```", "```py\n$ ./fastx_grep.py -i lsu tests/inputs/lsu.fq  | wc -l\n       8\n```", "```py\n$ ./fastx_grep.py -o out.fq -i lsu tests/inputs/lsu.fq\n$ wc -l out.fq\n       8 out.fq\n```", "```py\n$ ./fastx_grep.py -O fasta -o out.fa -i lsu tests/inputs/lsu.fq\n$ head -3 out.fa\n>ITSLSUmock2p.ITS_M01380:138:000000000-C9GKM:1:1101:14440:2042 2:N:0\nCAAGTTACTTCCTCTAAATGACCAAGCCTAGTGTAGAACCATGTCGTCAGTGTCAGTCTG\nAGTGTAGATCTCGGTGGTCGCCGTATCATTAAAAAAAAAAATGTAATACTACTAGTAATT\n```", "```py\n$ ./fastx_grep.py -o out.fa -i lsu tests/inputs/lsu.fa\n$ ../15_seqmagique/seqmagique.py out.fa\nname      min_len    max_len    avg_len    num_seqs\nout.fa        281        301     291.00           2\n```", "```py\n$ new.py -fp 'Grep through FASTX files' fastx_grep.py\nDone, see new script \"fastx_grep.py\".\n```", "```py\ndef guess_format(filename: str) -> str:\n    \"\"\" Guess format from extension \"\"\"\n\n    return ''\n```", "```py\ndef test_guess_format() -> None:\n    \"\"\" Test guess_format \"\"\"\n\n    assert guess_format('/foo/bar.fa') == 'fasta'\n    assert guess_format('/foo/bar.fna') == 'fasta'\n    assert guess_format('/foo/bar.faa') == 'fasta'\n    assert guess_format('/foo/bar.fasta') == 'fasta'\n    assert guess_format('/foo/bar.fq') == 'fastq'\n    assert guess_format('/foo/bar.fastq') == 'fastq'\n    assert guess_format('/foo/bar.fx') == ''\n```", "```py\ndef main():\n    get the program arguments\n\n    for each input file:\n        guess the input format or complain that it can't be guessed\n        figure out the output format from the args or use the input format\n\n        for each record in the input file:\n            if the sequence ID or description matches the pattern:\n                write the sequence to the output file in the output format\n```", "```py\n$ ls tests/inputs/*.f[aq]\ntests/inputs/empty.fa  tests/inputs/lsu.fa    tests/inputs/lsu.fq\n```", "```py\n$ ./fastx_grep.py -O fasta -o out.fa -i lsu tests/inputs/*.f[aq]\n$ ../15_seqmagique/seqmagique.py out.fa\nname      min_len    max_len    avg_len    num_seqs\nout.fa        281        301     291.00           4\n```", "```py\ndef guess_format(filename: str) -> str:\n    \"\"\" Guess format from extension \"\"\"\n\n    ext = re.sub('^[.]', '', os.path.splitext(filename)[1]) ![1](assets/1.png)\n\n    return 'fasta' if re.match('f(ast|a|n)?a$', ext) else 'fastq' if re.match( ![2](assets/2.png)\n        'f(ast)?q$', ext) else ''\n```", "```py\n>>> import os\n>>> os.path.splitext('/foo/bar.fna')\n('/foo/bar', '.fna')\n```", "```py\n>>> _, ext = os.path.splitext('/foo/bar.fna')\n>>> ext\n'.fna'\n```", "```py\n>>> ext = os.path.splitext('/foo/bar.fna')[1]\n>>> ext\n'.fna'\n```", "```py\n>>> ext = os.path.splitext('/foo/bar.fna')[1][1:]\n>>> ext\n'fna'\n```", "```py\n>>> import re\n>>> ext = re.sub('^[.]', '', os.path.splitext('/foo/bar.fna')[1]) ![1](assets/1.png)\n>>> ext\n'fna'\n```", "```py\n>>> re.match('f(ast|a|n)?a$', ext)\n<re.Match object; span=(0, 3), match='fna'>\n```", "```py\n>>> re.search('^f(ast|a|n)?a$', ext)\n<re.Match object; span=(0, 3), match='fna'>\n```", "```py\n>>> re.search('^f(ast)?q$', 'fq')\n<re.Match object; span=(0, 2), match='fq'>\n>>> re.search('^f(ast)?q$', 'fastq')\n<re.Match object; span=(0, 5), match='fastq'>\n```", "```py\ndef main() -> None:\n    args = get_args()\n    regex = re.compile(args.pattern, re.IGNORECASE if args.insensitive else 0) ![1](assets/1.png)\n\n    for fh in args.files: ![2](assets/2.png)\n        input_format = args.input_format or guess_format(fh.name) ![3](assets/3.png)\n\n        if not input_format: ![4](assets/4.png)\n            sys.exit(f'Please specify file format for \"{fh.name}\"')\n\n        output_format = args.output_format or input_format ![5](assets/5.png)\n\n        for rec in SeqIO.parse(fh, input_format): ![6](assets/6.png)\n            if any(map(regex.search, [rec.id, rec.description])): ![7](assets/7.png)\n                SeqIO.write(rec, args.outfile, output_format) ![8](assets/8.png)\n```", "```py\n>>> all([True, True, True])\nTrue\n>>> all([True, False, True])\nFalse\n```", "```py\n>>> any([True, False, True])\nTrue\n>>> any([False, False, False])\nFalse\n```", "```py\n>>> import re\n>>> type(re.search('lsu', 'This contains LSU'))\n<class 'NoneType'>\n```", "```py\n>>> re.search('lsu'.upper(), 'This contains LSU'.upper())\n<re.Match object; span=(14, 17), match='LSU'>\n```", "```py\n>>> re.search('lsu', 'This contains LSU', re.IGNORECASE)\n<re.Match object; span=(14, 17), match='LSU'>\n```", "```py\n>>> re.search('lsu', 'This contains LSU', re.I)\n<re.Match object; span=(14, 17), match='LSU'>\n```", "```py\nregex = re.compile(args.pattern, re.IGNORECASE if args.insensitive else 0) ![1](assets/1.png)\n```", "```py\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n```", "```py\n>>> type(re.IGNORECASE)\n<enum 'RegexFlag'>\n```", "```py\n>>> for flag in sorted([re.A, re.I, re.L, re.M, re.S, re.X, re.U]):\n...     print(f'{flag:15} {flag + 0:5} {0 + flag:#011b}')\n...\nre.IGNORECASE       2 0b000000010\nre.LOCALE           4 0b000000100\nre.MULTILINE        8 0b000001000\nre.DOTALL          16 0b000010000\nre.UNICODE         32 0b000100000\nre.VERBOSE         64 0b001000000\nre.ASCII          256 0b100000000\n```", "```py\n>>> one = 0b001\n>>> two = 0b010\n```", "```py\n>>> one | two\n3\n```", "```py\n>>> one & two\n0\n```", "```py\n>>> 0b010 | 0b100\n6\n```", "```py\n>>> (re.IGNORECASE | re.LOCALE) == 6\nTrue\n```", "```py\n>>> regex = re.compile('lsu')\n>>> type(regex.search('This contains LSU'))\n<class 'NoneType'>\n```", "```py\n>>> regex = re.compile('lsu', re.IGNORECASE)\n>>> regex.search('This contains LSU')\n<re.Match object; span=(14, 17), match='LSU'>\n```", "```py\nregex = None\nif args.insensitive:\n    regex = re.compile(args.pattern, re.IGNORECASE)\nelse:\n    regex = re.compile(args.pattern)\n```", "```py\nregex = re.compile(args.pattern, re.IGNORECASE if args.insensitive else 0)\n```", "```py\n>>> (re.A | re.I | re.L | re.M | re.S | re.X | re.U) + 0\n382\n```", "```py\n>>> flags = re.IGNORECASE | re.LOCALE\n```", "```py\n>>> flags & re.IGNORECASE\nre.IGNORECASE\n```", "```py\n>>> (flags & re.VERBOSE) + 0\n0\n```", "```py\n>>> True or True\nTrue\n>>> True or False\nTrue\n>>> False or True\nTrue\n>>> False or False\nFalse\n```", "```py\n>>> any([True, True])\nTrue\n>>> any([True, False])\nTrue\n>>> any([False, True])\nTrue\n>>> any([False, False])\nFalse\n```", "```py\n>>> True and True\nTrue\n>>> True and False\nFalse\n>>> False and True\nFalse\n>>> False and False\nFalse\n```", "```py\n>>> all([True, True])\nTrue\n>>> all([True, False])\nFalse\n>>> all([False, True])\nFalse\n>>> all([False, False])\nFalse\n```", "```py\nif any(map(regex.search, [rec.id, rec.description])):\n```"]