["```py\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndata(\"starwars\") ![1](Images/1.png)\n```", "```py\nggplot(starwars, aes(hair_color)) +\n  geom_bar()\n```", "```py\nggplot(starwars, aes(x = height, y = mass, fill = gender)) + ![1](Images/1.png)\n  geom_point(shape = 21, size = 5) + ![2](Images/2.png)\n  theme_light() + ![3](Images/3.png)\n  geom_smooth(method = \"lm\") + ![4](Images/4.png)\n  labs(x = \"Height (cm)\", y = \"Weight (cm)\",\n       title = \"StarWars profiles \",\n       subtitle = \"Mass vs Height Comparison\",\n       caption = \"Source: The Star Wars API\") ![5](Images/5.png)\n```", "```py\nlibrary(leaflet)\nleaflet(data = shared_cars_data[1:20, ]) %>%\n        addTiles() %>%\n        addMarkers(lng = longitude, lat = latitude)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LinearRegression\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size=0.33,\n                                                    random_state=42)\n```", "```py\ntrain_set = sample(task$nrow, 0.8 * task$nrow)\ntest_set = setdiff(seq_len(task$nrow), train_set)\n```", "```py\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n```", "```py\nfrom sklearn import metrics\n\nacc = metrics.accuracy_score(predictions, y_test)\nconf_matrix = metrics.confusion_matrix(predictions, y_test)\nclassif_report = metrics.classification_report(predictions, y_test)\n```", "```py\nfrom yellowbrick.regressor import ResidualsPlot\n\nvisualizer = ResidualsPlot(regr)\n\nvisualizer.fit(X_train, y_train)\nvisualizer.score(X_test, y_test)\nvisualizer.show()\n```", "```py\nimport pickle\n\n# model preparation and training part\n# ...\n\n# model serialization\noutfile = open(\"models/regr.pkl\", \"wb\")\npickle.dump(regr, outfile)\noutfile.close()\n\nprint(\"Model trained & stored!\")\n```", "```py\nLet's use Flask next:\n```", "```py\nimport pickle\nimport numpy as np\nfrom ast import literal_eval ![1](Images/1.png)\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__) ![2](Images/2.png)\n\ninfile = open(\"models/regr.pkl\", \"rb\") ![3](Images/3.png)\nregr = pickle.load(infile)\ninfile.close()\n\n@app.route('/') ![4](Images/4.png)\ndef predict(methods=[\"GET\"]):\n    payload = request.json[\"data\"]\n    input_data = np.array(literal_eval(payload)).reshape(1, -1)\n    prediction = regr.predict(input_data) ![5](Images/5.png)\n\n    return jsonify({\n        \"prediction\": round(float(prediction), 3) ![6](Images/6.png)\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```py\n# Analysing Star Wars\n\nFirst we start by importing the data.\n\n```", "```py\n\nThen we can have a look at the result.\n```", "```py\nlibrary(shiny)\n\nui <- fluidPage( ![1](Images/1.png)\n\n    titlePanel(\"StarWars Characters\"),\n\n    sidebarLayout(\n        sidebarPanel(\n            numericInput(\"height\", \"Minimum Height:\", 0, min = 1, max = 1000), ![2](Images/2.png)\n            numericInput(\"weight\", \"Minimum Weight:\", 0, min = 1, max = 1000),\n            hr(),\n            helpText(\"Data from `dplyr` package.\")\n        ),\n\n        mainPanel(\n           plotOutput(\"distPlot\") ![3](Images/3.png)\n        )\n    )\n)\n```", "```py\nserver <- function(input, output) { ![1](Images/1.png)\n\n    output$distPlot <- renderPlot({ ![2](Images/2.png)\n        starwars_filtered <- starwars %>%\n            filter(height > input$height & mass > input$weight) ![3](Images/3.png)\n        ggplot(starwars_filtered, aes(x = height, y = mass, fill = gender)) +\n            geom_point(pch = 21, size = 5) +\n            theme_light() +\n            geom_smooth(method = \"lm\") +\n            labs(x = \"Height\", y = \"Mass\",\n            title = \"StarWars Characters Mass vs Height Comparison\",\n            subtitle = \"Each dot represents a separate character\",\n            caption = \"Data Source: starwars (dplyr)\") ![4](Images/4.png)\n    })\n}\n```", "```py\nshinyApp(ui = ui, server = server)\n```"]