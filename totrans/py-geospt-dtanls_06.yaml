- en: Chapter 6\. The ArcGIS Python API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The suite of client software and GIS developed by Esri, the global leader in
    GIS, is known as ArcGIS. It’s an API and Python package in one that allows users
    to query for information hosted in ArcGIS Online or ArcGIS Enterprise. It’s not
    open source, but Esri’s leadership in the industry has produced quite a lot of
    free content and tutorials that you can access and explore. I will share a few
    learning resources, accessible tools, and information that you can access with
    the ArcGIS Python API. You’ll need to use a Jupyter Notebook and ArcGIS Online
    to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a desktop application called ArcGIS Pro as well as a browser-based
    platform called ArcGIS Online; in this chapter, you’ll be working with ArcGIS
    Online with the ArcGIS Python API.
  prefs: []
  type: TYPE_NORMAL
- en: Modules Available in the ArcGIS Python API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To extend the standard Python library, the ArcGIS Python API allows access
    to additional modules, available by dot notation. You can explore them in the
    [documentation](https://oreil.ly/FaGv3), and I will provide more information as
    we use them in our coding. These modules include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcgis.gis`'
  prefs: []
  type: TYPE_NORMAL
- en: Connects you to ArcGIS Online
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcgis.features`'
  prefs: []
  type: TYPE_NORMAL
- en: Offers functions for working with groups of geographic elements
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcgis.geometry`'
  prefs: []
  type: TYPE_NORMAL
- en: Allows input and output of different geometries (points or polygons, for example)
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcgis.geocoding`'
  prefs: []
  type: TYPE_NORMAL
- en: Assigns location coordinates for map visualization
  prefs: []
  type: TYPE_NORMAL
- en: '`Arcgis.geoenrichment`'
  prefs: []
  type: TYPE_NORMAL
- en: Adds attributes to an area
  prefs: []
  type: TYPE_NORMAL
- en: I use open source or low-cost options when teaching geospatial skills to make
    this knowledge accessible to as many people as possible. Since most Esri users
    are professional or enterprise subscribers, few understand the cost burden for
    personal use. Whatever you choose, please read the documentation carefully before
    using it to avoid unintended costs.
  prefs: []
  type: TYPE_NORMAL
- en: The ArcGIS API is distributed as the package arcgis. In the following example,
    you’ll install it via Conda, the suggested protocol, as you’ve done in several
    chapters in this book so far.
  prefs: []
  type: TYPE_NORMAL
- en: Installing ArcGIS Pro
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although ArcGIS Pro is only for Windows, the API lets non-Windows users access
    ArcGIS features without having to open up a Windows environment. I am going to
    assume that if you already have a full ArcGIS Pro license, you can follow the
    documentation to install [Python Package Manager or Python Command Prompt](https://oreil.ly/sXsRt).
    To use the Pro license and work within your desktop environment with the API,
    you need to install ArcGIS on the same computer where you are running the commands.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If, like me, you have an ArcGIS Pro account but prefer to work in MacOS, you
    can use ArcGIS Pro offline. To do so, sign into your ArcGIS Pro account and, under
    Settings >> Licenses, check the box allowing you to work offline.
  prefs: []
  type: TYPE_NORMAL
- en: There are options to access publicly available resources even without a license,
    so let’s explore those.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up Your Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, open your terminal. I suggest creating an environment for downloading
    ArcGIS. (As you may recall, environments allow you to install compatible versions
    of packages.) Here, I am calling my environment `esriENV`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Although it is possible to update individual packages within an environment,
    if I generate persistent errors when working in an environment, I delete the whole
    thing and re-create it from scratch. Here is a new Python geospatial package with
    commonly used packages that you may want to consider adding to any created space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You may be curious about the Mamba install listed here. Since the writing of
    this book, [mambaforge](https://oreil.ly/1zzLj) has emerged as a Conda-forge community
    project. Operationally, Mamba promises speed and compatibility with Conda packages.
    As you experiment, you’ll reach your own preferred workflow. I have installed
    Mamba into my base environment and use it with my own projects, but the text has
    been written with the longer-term reliability of Conda environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review how to create your environment and install the packages required
    for this Notebook. Enter the following code in the terminal, but instead of `*myenv*`,
    insert the name of *your* environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To create an environment and include a specific version of Python to address
    package dependencies, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now you must activate your new environment. We have only one channel or place
    to host installed packages at the moment, conda-forge, so we want all the dependencies
    that we need for installed packages to come from the conda-forge channel unless
    they exist only on default channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you may want to have the newest versions of packages on any
    channel in your list. If this is the case, use `conda config --set channel_priority
    strict`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installing Packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are ready to install your packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to install the Jupyter Notebook; the IPython kernel, to
    execute the Python backend in Jupyter within a Conda environment; and Jupyter
    Notebook extensions to simplify coding tasks with tools like autocompletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In your terminal, activate the ArcGIS environment using the name you gave it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the packages are downloaded, you can once again open a Jupyter Notebook
    from your terminal so that you can document your work and evaluate the output
    step-by-step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Notebook will be installed along with the API and will open in a new window.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the ArcGIS Python API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve finished installing, it’s time to log in. First I’ll show you
    how to log in anonymously; the section after that explains how to log in with
    a developer or individual account.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to ArcGIS Online as an Anonymous User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many ways to gain access to parts of ArcGIS for minimal or no charge;
    even without an ArcGIS account, you can use the resources, create maps, and share
    them, but with limited functionality. You can explore the options in Jupyter Notebook
    by running the code or exploring [the documentation](https://oreil.ly/kqmmF).
    Another benefit of a public account is that it allows anonymous access.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll start by importing the Python API into your Jupyter Notebook. In this
    example, you’ll be using a public account, so only free resources will be shown.
    No problem—there is a lot here for you to explore. To import GIS from the `gis`
    module, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Connecting to an ArcGIS User Account with Credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a user account, you can log in one of two ways: using the built-in
    login or using an API key. The advantage of logging in is that you can save any
    maps you create to your account.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Either way, you’ll first need to import GIS using your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the built-in login, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To log in with an API key, use the following code (I’ve shortened the token):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When you connect with credentials and run the cell, the output will be your
    organization’s ArcGIS Online username. The username of my account is “datalchemy”;
    you will need to replace this with your own account credentials if you create
    an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also log in with your password protected if you have an account and
    a login URL (listed in your organization’s settings), again substituting your
    own credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you run the cell, a box will prompt you to enter your username and password.
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re ready to explore some layers of imagery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploring Imagery Layers: Urban Heat Island Maps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, a word about naming conventions. [Figure 6-1](#map_of_chicago)
    is a map of Chicago that I’ve named *map1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The designation is arbitrary: you may name your maps according to your preferences,
    but the point is to avoid confusion when writing code that involves multiple maps.
    It is common to designate a map variable with an integer following it, or simply
    `m`. Select a method and be consistent. It should be distinct from the `map()`
    function. You can generate *map1* by running the following code in your Jupyter
    Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This centers your map on Chicago, Illinois. You can set the area your map covers,
    called its *extent*, by zooming in on a specific location or by drawing a polygon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Map of Chicago](assets/pgda_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. Map of Chicago
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To access ArcGIS Online’s help function, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you type a dot and hit Tab, a dropdown menu will display additional properties
    that you can click for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now you can try layering some attributes onto your map. *Imagery layers* display
    data from image services. These resources allow you to apply rules to how images
    are displayed. You can search for them by identifying the item type as `Imagery
    Layer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use search terms in `gis.content.search()` to describe the features
    you would like to include in your map. Creating a variable assigned to `gis.content.search()`
    allows you to find available feature layers or other `item_type` data. Using the
    following code snippet, you can explore available Landsat 9 satellite views for
    your imagery layer. Different imagery layers have different properties. Here,
    I’ve restricted the search to the two options shown in [Figure 6-2](#searching_with_gisdotcontentdotsearchle),
    which are the publicly available feature layers with the indicated terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Searching with gis.content.search() for Landsat 9 views](assets/pgda_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. Searching with `gis.content.search()` for Landsat 9 views
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`Item_type` in the code block includes web scenes, feature layers, geospatial
    data, basemaps, and interactive 3D environments with terrain. You can see more
    about items and item types in the [documentation](https://oreil.ly/MRi96).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Web scenes* let you visualize and analyze geospatial content containing all
    configuration settings, such as a basemap, styling, and extent. To explore these,
    you can substitute `web scene` for `item_type`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use web scenes to explore heat islands in Chicago. According to the [US
    Environmental Protection Agency](https://oreil.ly/3RWFQ) (EPA), *heat islands*
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: urbanized areas that experience higher temperatures than outlying areas. Structures
    such as buildings, roads, and other infrastructure absorb and re-emit the sun’s
    heat more than natural landscapes such as forests and water bodies. Urban areas,
    where these structures are highly concentrated and greenery is limited, become
    “islands” of higher temperatures relative to outlying areas.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Urban heat island severity measures how city infrastructure absorbs and re-emits
    this heat.
  prefs: []
  type: TYPE_NORMAL
- en: 'To locate the image server URL and begin exploring heat islands on your map,
    click the title (“Urban Heat Islands”) in your search results or pull up a list
    by calling `img_svc_url` in the next cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can try raster functions with this code, too. More about those in the next
    section, but for now, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You have accessed the Urban Heat Island Severity imagery layer. Now add it
    to your map of Chicago:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `landsat_urbanheat` layer is now added to your map, which should look similar
    to [Figure 6-3](#the_map_layer_added_to_the_map_extent).
  prefs: []
  type: TYPE_NORMAL
- en: '![The map layer added to the map extent](assets/pgda_0603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. The map layer added to the map extent
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now you’ll add the imagery layer from the URL for the Multispectral Landsat
    layer and assign it to the variable `landsat_ms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The last line of code simply confirms the name of the layer.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'A description of the image layer is also available with a line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is detailed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: To explore additional raster function objects, visit the [Common Data Types
    Documentation](https://oreil.ly/MMRDP). I also recommend keeping the [ArcGIS Python
    API reference guide](https://oreil.ly/DDDfa) handy as you learn about raster functions
    and imagery layers.
  prefs: []
  type: TYPE_NORMAL
- en: Raster Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Raster functions process pixels from an image to one or more rasters without
    the need to download or create intermediate files for analysis. Access to raster
    functions is limited without additional credentials, but you still have the opportunity
    to explore Landsat multispectral imagery.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, we’ll explore a map of Los Angeles, working our way through a few
    highlights:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll run another search in `gis.content.search()`. This time, you’re looking
    for images outside of your organization (if you have created one) by indicating
    `outside_org=True`. This is the setting when you are accessing publicly available
    datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Your search results should include Multispectral Landsat, shown in [Figure 6-4](#search_results_showing_a_multispectral).
    To view the `landsat_item`, call it in a cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![Search results showing a Multispectral Landsat imagery layer by Esri](assets/pgda_0604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-4\. Search results showing a Multispectral Landsat imagery layer by
    Esri
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For additional information, click on it or run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This map features *multispectral bands of light*, which are detected with instruments
    more sensitive than the human eye. As you learned in [Chapter 1](ch01.xhtml#introduction_to_geospatial_analytics),
    multispectral bands capture image data within specific wavelength ranges across
    the electromagnetic spectrum to highlight different land-cover features. You can
    examine the name of each band, its minimum and maximum wavelengths, and other
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The bands indicate details related to land mass, vegetation, and other types
    of land cover. [Table 6-1](#multispectral_and_thermal_infrared_sens) is an excerpt
    of the output, placed into a table for readability.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Multispectral and Thermal Infrared Sensor Bands
  prefs: []
  type: TYPE_NORMAL
- en: '| Bands | Wavelength (micrometers) | Resolution (meters) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Band 1—Coastal aerosol | 0.43–0.45 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 2—Blue | 0.45–0.51 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 3—Green | 0.53–0.59 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 4—Red | 0.64–0.67 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 5—Near Infrared (NIR) | 0.85–0.88 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 6—Short-Wave Infrared (SWIR) 1 | 1.57–1.65 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 7—Short-Wave Infrared (SWIR) 2 | 2.11–2.29 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 8—Panchromatic | 0.50–0.68 | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 9—Cirrus | 1.36–1.38 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 10—Thermal Infrared (TIRS) 1 | 10.6–11.19 | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Band 11—Thermal Infrared (TIRS) 2 | 11.50–12.51 | 100 |'
  prefs: []
  type: TYPE_TB
- en: 'Create the map using your Jupyter Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the feature layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You can now view your map ([Figure 6-5](#a_los_angeles_map_created_using_multisp)).
    You can also begin using raster functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Los Angeles map created using Multispectral Landsat data](assets/pgda_0605.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-5\. A Los Angeles map created using Multispectral Landsat data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Here, you’ll use a raster function to highlight color visualizations in your
    map. For example, `color infrared` shows bright red bands to indicate healthy
    vegetation, while `natural color` shows topography as we typically see it: green
    vegetation, blue water, brown soil.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the options are available with a *dynamic range adjustment (DRA)* to
    enhance details and improve visibility when being matched to the range of your
    computer or other device. You can use the following code to generate a list of
    available raster functions, as shown in the output that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Getting familiar with a few of these functions should pave the way for you to
    take a deeper look at other options in your independent explorations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try viewing `color_infrared`. You’ll use the `apply` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To visualize the map, call the `map` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Healthy vegetation is now shown in bright red ([Figure 6-6](#los_angeles_viewed_with_color_infrared)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Los Angeles viewed with color_infrared](assets/pgda_0606.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-6\. Los Angeles viewed with `color_infrared`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The best raster function for viewing vegetation is often the Normalized Difference
    Vegetation Index (NDVI). [Figure 6-7](#los_angeles_ndvi) demonstrates the `NDVI_colorized`
    function, showing vegetation in green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![Los Angeles NDVI](assets/pgda_0607.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-7\. Los Angeles NDVI
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have learned how to search for images and feature layers and how to apply
    raster functions to a specific location to highlight specific features. Next,
    we will explore attributes and take a look at the `arcgis.geometry` module.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Image Attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you’ll explore the geometry of your Los Angeles map using
    the ArcGIS raster module [`get_samples`](https://oreil.ly/ffCTy). This module
    lets you view sample point locations, spatial resolutions, and pixel values for
    a selected geometry. It’s an example of the [ArcGIS REST API](https://oreil.ly/SWZTB),
    which provides information about the architecture of web applications. In contrast
    to the general ArcGIS API documentation, which is focused primarily on access
    points, the [ArcGIS REST API documentation](https://oreil.ly/QdcRC) provides the
    full scope of geospatial functions. It also [describes the arguments](https://oreil.ly/AXaKp)
    that the `get_samples` operation can call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you indicate the geometry and sample count of your map and return information
    about its image attributes, based on the extent you define―in this case, Los Angeles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Why geometry? When you create 3D models, data points like altitude and sun azimuth
    are useful for calculating hillshade. When working with the `hillshade` function,
    you are basically taking a 2D surface and rendering it as realistic 3D terrain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, indicate the geometry and sample count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can indicate an item to view in the samples list you have generated, or
    view all of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The output includes the location, an object ID, calculations of cloud cover,
    and pixel values, among other things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In Python, we use the `datetime` object for *time-series data*, or data collected
    at different time points. Again, you are sampling the `datetime` class in Python
    and can render the acquisition date by running the following code. (I’ll provide
    additional details later in the chapter, but this is how we use the feature on
    samples data.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Because Python accesses data based on zero-based indexing, using `[0]` requests
    the first index listed, or the first value in the sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: By sampling values at this specific location, Los Angeles, you can estimate
    a spectral profile for specific points on your map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If you select a specific pixel, the spectral profile will plot all of the bands
    reflected at that location, as shown in [Figure 6-8](#map_to_click_to_generate_the_spectral_p).
  prefs: []
  type: TYPE_NORMAL
- en: The next code lets you select a point on the canvas in your Jupyter Notebook
    to identify the spectral profile. Note that if you run this example from the ArcGIS
    Python API guide and request Landsat 9, it will generate an error because additional
    bands were added.
  prefs: []
  type: TYPE_NORMAL
- en: '![Map to click to generate the spectral profile in #a_spectral_profile_visualized_with_boke](assets/pgda_0608.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-8\. Map to click to generate the spectral profile in [Figure 6-9](#a_spectral_profile_visualized_with_boke)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `get_samples()` method will gather the pixel values contained in the sample
    data. The pixel values are *digital numbers.* To calculate them correctly, you’ll
    need to convert them, first to floating-point numbers and then to integers. Digital
    numbers record the electromagnetic intensity of the pixel.
  prefs: []
  type: TYPE_NORMAL
- en: 'You installed the [Bokeh package](https://oreil.ly/QLQGJ) into your Conda environment
    to allow interactive plots and charting. The Landset specification was based on
    Landsat 8 data and only included eight bands. This results in a Bokeh error. To
    fix this, run it with the new bands included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You should get a message that Bokeh 2.4.2 (or your version number) has successfully
    loaded. Now return to the map and select your point. Click to generate the map
    shown in [Figure 6-8](#map_to_click_to_generate_the_spectral_p) (yours will have
    different values, depending on the point you select).
  prefs: []
  type: TYPE_NORMAL
- en: The map you generated ([Figure 6-8](#map_to_click_to_generate_the_spectral_p))
    is now interactive. Click anywhere on your new map to plot the spectral profile
    for that location. Now you can select different points and see what values you
    generate. [Figure 6-9](#a_spectral_profile_visualized_with_boke) shows the spectral
    profile of Band 9, used for detecting cirrus clouds, at the location I selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![A spectral profile visualized with Bokeh](assets/pgda_0609.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-9\. A spectral profile visualized with Bokeh
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Depending on the unique location you select when clicking on the Landsat 9 imagery
    layer, your spectral profile will be different. Refer to [Table 6-1](#multispectral_and_thermal_infrared_sens)
    to identify the bands included. These represent a few applications of the `get_samples`
    method in the ArcGIS Python API.
  prefs: []
  type: TYPE_NORMAL
- en: Improving Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Raster functions allow you to do things like extract specific bands to examine
    land use, vegetation, or fire; continuous data such as temperature; scanned images;
    and satellite images, among other things. A *stretch function* allows you to adjust
    the brightness and contrast on your map. The following code selects bands 3, 2,
    and 1 (red, green, and blue) from the visible spectrum and imports the `stretch`
    `raster.function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The percent clip minimum (`percentclip`) that this code sets will exclude the
    lowest 10% of values from the stretch to apply to the raster. This is useful if
    most of the pixels are within a specific range. Setting the `stretch_type` trims
    away the outliers to redistribute the histogram of values, resulting in the image
    in [Figure 6-10](#natural_color_bands_depicting_what_the).
  prefs: []
  type: TYPE_NORMAL
- en: '![Natural color bands depicting what the eye would see without enhancement](assets/pgda_0610.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-10\. Natural color bands depicting what the eye would see without enhancement
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The image in [Figure 6-10](#natural_color_bands_depicting_what_the) is what
    the eye would see without any enhancement. Depending on the features you are looking
    for, there may be other bands to explore. We will look at other bands in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing a Location over Multiple Points in Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ArcGIS API allows you to compare images of the same location over different
    points in time using a map widget called a *time slider*, which enables you to
    animate a map using configurable properties like start and end times and intervals
    in between. For this example, I’ve selected a city and a satellite basemap.
  prefs: []
  type: TYPE_NORMAL
- en: The map.zoom widget accepts values between 0 and 23\. Level 9 gives a panned-out
    global view; level 10 is somewhere between a large metropolitan area and a city;
    and level 20 is the level of individual buildings. I have never zoomed to 23,
    but doing so would result in the most detailed possible view. There are limitations
    to how much you can zoom, though, depending on the scale of the visualization
    parameters (conversion rates are available in the [documentation](https://oreil.ly/mbtnA)).
    You can change the zoom level and process the data, but the resolution will stay
    the same. For example, all Landsat imagery has a resolution of 15 meters. This
    means that the satellite image captures details on the ground that are 15 meters
    or larger. (For comparison, the Hollywood sign in Los Angeles and a standard semitruck
    trailer are both about 15 meters long.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Try zooming to level 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of the `item title` is printed as output for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You have searched for a Landsat item, and the recovered item is confirmed by
    its title in the output. Different sublayers will have different details provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the layer to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Request confirmation that the `map.time_slider` is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: It should return the output `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can adjust the dates to a specific interval. The following code measures
    10-day intervals between the selected start and end times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This code outputs the map in [Figure 6-11](#time_slider_widget), which includes
    the time-slider widget.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time-slider widget](assets/pgda_0611.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-11\. Time-slider widget
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Select the `map.draw(polygon)` option in the code cells, and then draw a polygon
    with your cursor. If you have a specific location of interest, enter its coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: A *spatial reference* or *well-known ID (WKID)* defines tolerance and resolution
    for the location you have selected (see the [Spatial Reference List](https://oreil.ly/AecRp)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Options for `map.draw` include selecting a point (`pt`), `polyline`, or `polygon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: When you select the polygon and run the code cell, simply return to the map
    and you will be able to trace a polygon. The time-slider widget allows comparison
    across a time series for an area of interest. When working with layers, you will
    often want to filter what appears on your canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering Layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want to filter your layers: for instance, perhaps you only want to
    see Landsat layers from a [specific collection](https://oreil.ly/iMcfn) with less
    than 10% cloud cover. For this, it’s helpful to get familiar with Landsat’s [data
    dictionaries](https://oreil.ly/9fR5U) for complete information about data elements,
    attributes, and names within a database or system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, `WRS_Row` provides information about the orbital
    path of the satellite that took the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The value `36` indicates the northern hemisphere. (You can find these details
    in the Landsat data dictionary, the collection background, or elsewhere in Landsat’s
    information.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Information you can access is shown in the HTML item description you generated
    earlier. Now you can view the table you just created in a dataframe (`df`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Because you are comparing dates, you’ll want to see the oldest acquisition
    date as well as the most recent. To view your output clearly, run it in the code
    cell. The important takeaway is to see the column headings and where to find identifying
    information ([Figure 6-12](#acquisition_date_output)). You can view the first
    five rows by calling `df.head()` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![Acquisition date output](assets/pgda_0612.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-12\. Acquisition date output
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now run `df.tail()` and select a recent acquisition date. You can run the code
    in your Jupyter Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command gives the shape of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output informs us that the data has 9 columns and 193 rows: `(193,9)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you only want the acquisition date, you can run this data, or any of the
    other columns, from the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Bands have specific wavelengths that are used in statistical calculations.
    You want to avoid overlapping pixels in an imagery layer because this can distort
    the calculations. You can use the default method, where the pixel value is calculated
    from the last dataset ([Figure 6-13](#overlapping_pixels_using_the_lastleft_p)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![Overlapping pixels using the last() method](assets/pgda_0613.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-13\. Overlapping pixels using the `last()` method
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, you can request the `first()` method and calculate pixel value
    from the first raster dataset (output shown in [Figure 6-14](#overlapping_pixels_using_the_firstleft)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![Overlapping pixels using the first() method](assets/pgda_0614.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-14\. Overlapping pixels using the `first()` method
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Querying the data by `OBJECTID`, aided by the `df(head)` and `df(tail)` data,
    you can compare images captured at different times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The [`stretch` function](https://oreil.ly/AsmeR) improves visibility by spreading
    the pixel values. There are different types of stretch, but here you are simply
    removing any extreme values by calculating the standard deviation (`stddev`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This will output [Figure 6-15](#arcgis_functions_showing_difference_in). The
    green swaths indicate increases in vegetation density, while magenta shows a decrease
    within the timeframe selected by `OBJECTID`.
  prefs: []
  type: TYPE_NORMAL
- en: '![ArcGIS functions showing difference in images over time](assets/pgda_0615.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-15\. ArcGIS functions showing difference in images over time
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Perhaps there is a certain threshold you want to capture. Try measuring only
    areas where the threshold change is above 10%. Use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The output ([Figure 6-16](#masked_threshold_value_for_changes_in_v)) renders
    those areas in green.
  prefs: []
  type: TYPE_NORMAL
- en: '![Masked threshold value for changes in vegetation index (NDVI)](assets/pgda_0616.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-16\. Masked threshold value for changes in vegetation index (NDVI)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s render our map once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The final image is displayed in [Figure 6-17](#the_combined_image_at_the_requested_thr).
    You can now see the masked threshold by adding the layers to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '![The combined image at the requested threshold displaying the masked threshold](assets/pgda_0617.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-17\. The combined image at the requested threshold displaying the masked
    threshold
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve customized and explored a few publicly available resources from
    ArcGIS API for Python, you should have some familiarity with raster functions
    and image layers. To continue learning, try working with these functions and layers
    independently and see what other queries you can access.
  prefs: []
  type: TYPE_NORMAL
