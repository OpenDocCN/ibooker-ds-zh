["```py\nlibrary(ggplot2)\n# take a simple random sample\nsamp_data <- data.frame(income=sample(loans_income, 1000),\n                        type='data_dist')\n# take a sample of means of 5 values\nsamp_mean_05 <- data.frame(\n  income = tapply(sample(loans_income, 1000*5),\n                  rep(1:1000, rep(5, 1000)), FUN=mean),\n  type = 'mean_of_5')\n# take a sample of means of 20 values\nsamp_mean_20 <- data.frame(\n  income = tapply(sample(loans_income, 1000*20),\n                  rep(1:1000, rep(20, 1000)), FUN=mean),\n  type = 'mean_of_20')\n# bind the data.frames and convert type to a factor\nincome <- rbind(samp_data, samp_mean_05, samp_mean_20)\nincome$type = factor(income$type,\n                     levels=c('data_dist', 'mean_of_5', 'mean_of_20'),\n                     labels=c('Data', 'Mean of 5', 'Mean of 20'))\n# plot the histograms\nggplot(income, aes(x=income)) +\n  geom_histogram(bins=40) +\n  facet_grid(type ~ .)\n```", "```py\nimport pandas as pd\nimport seaborn as sns\n\nsample_data = pd.DataFrame({\n    'income': loans_income.sample(1000),\n    'type': 'Data',\n})\nsample_mean_05 = pd.DataFrame({\n    'income': [loans_income.sample(5).mean() for _ in range(1000)],\n    'type': 'Mean of 5',\n})\nsample_mean_20 = pd.DataFrame({\n    'income': [loans_income.sample(20).mean() for _ in range(1000)],\n    'type': 'Mean of 20',\n})\nresults = pd.concat([sample_data, sample_mean_05, sample_mean_20])\n\ng = sns.FacetGrid(results, col='type', col_wrap=1, height=2, aspect=2)\ng.map(plt.hist, 'income', range=[0, 200000], bins=40)\ng.set_axis_labels('Income', 'Count')\ng.set_titles('{col_name}')\n```", "```py\nlibrary(boot)\nstat_fun <- function(x, idx) median(x[idx])\nboot_obj <- boot(loans_income, R=1000, statistic=stat_fun)\n```", "```py\nBootstrap Statistics :\n    original   bias    std. error\nt1*    62000 -70.5595    209.1515\n```", "```py\nresults = []\nfor nrepeat in range(1000):\n    sample = resample(loans_income)\n    results.append(sample.median())\nresults = pd.Series(results)\nprint('Bootstrap Statistics:')\nprint(f'original: {loans_income.median()}')\nprint(f'bias: {results.mean() - loans_income.median()}')\nprint(f'std. error: {results.std()}')\n```", "```py\nnorm_samp <- rnorm(100)\nqqnorm(norm_samp)\nabline(a=0, b=1, col='grey')\n```", "```py\nfig, ax = plt.subplots(figsize=(4, 4))\nnorm_sample = stats.norm.rvs(size=100)\nstats.probplot(norm_sample, plot=ax)\n```", "```py\nnflx <- sp500_px[,'NFLX']\nnflx <- diff(log(nflx[nflx>0]))\nqqnorm(nflx)\nabline(a=0, b=1, col='grey')\n```", "```py\nnflx = sp500_px.NFLX\nnflx = np.diff(np.log(nflx[nflx>0]))\nfig, ax = plt.subplots(figsize=(4, 4))\nstats.probplot(nflx, plot=ax)\n```", "```py\ndbinom(x=2, size=5, p=0.1)\n```", "```py\npbinom(2, 5, 0.1)\n```", "```py\nstats.binom.pmf(2, n=5, p=0.1)\nstats.binom.cdf(2, n=5, p=0.1)\n```", "```py\nrpois(100, lambda=2)\n```", "```py\nstats.poisson.rvs(2, size=100)\n```", "```py\nrexp(n=100, rate=0.2)\n```", "```py\nstats.expon.rvs(0.2, size=100)\n```", "```py\nrweibull(100, 1.5, 5000)\n```", "```py\nstats.weibull_min.rvs(1.5, scale=5000, size=100)\n```"]