- en: Chapter 3\. Debugging and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章。调试和性能分析
- en: In addition to the enhanced interactive tools discussed in the previous chapter,
    Jupyter provides a number of ways to explore and understand the code you are running,
    such as by tracking down bugs in the logic or unexpected slow execution. This
    chapter will discuss some of these tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前一章中讨论的增强交互工具外，Jupyter 还提供了许多探索和理解正在运行的代码的方式，例如通过跟踪逻辑错误或意外的慢执行。本章将讨论其中一些工具。
- en: Errors and Debugging
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误和调试
- en: Code development and data analysis always require a bit of trial and error,
    and IPython contains tools to streamline this process. This section will briefly
    cover some options for controlling Python’s exception reporting, followed by exploring
    tools for debugging errors in code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 代码开发和数据分析始终需要一些试验和错误，而 IPython 包含了简化此过程的工具。本节将简要介绍控制 Python 异常报告的一些选项，然后探讨代码中调试错误的工具。
- en: 'Controlling Exceptions: %xmode'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制异常：`%xmode`
- en: 'Most of the time when a Python script fails, it will raise an exception. When
    the interpreter hits one of these exceptions, information about the cause of the
    error can be found in the *traceback*, which can be accessed from within Python.
    With the `%xmode` magic function, IPython allows you to control the amount of
    information printed when the exception is raised. Consider the following code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，当 Python 脚本失败时，它会引发异常。当解释器遇到这些异常时，可以从 Python 内部访问导致错误的原因，该信息可以在 *traceback*
    中找到。通过 `%xmode` 魔术函数，IPython 允许您控制引发异常时打印的信息量。考虑以下代码：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Calling `func2` results in an error, and reading the printed trace lets us see
    exactly what happened. In the default mode, this trace includes several lines
    showing the context of each step that led to the error. Using the `%xmode` magic
    function (short for *exception mode*), we can change what information is printed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `func2` 导致错误，并阅读打印的跟踪让我们能够准确地看到发生了什么。在默认模式下，此跟踪包括几行显示导致错误的每个步骤的上下文。使用 `%xmode`
    魔术函数（缩写为 *exception mode*），我们可以更改打印的信息内容。
- en: '`%xmode` takes a single argument, the mode, and there are three possibilities:
    `Plain`, `Context`, and `Verbose`. The default is `Context`, which gives output
    like that just shown. `Plain` is more compact and gives less information:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`%xmode` 接受一个参数，即模式，有三种可能性：`Plain`、`Context` 和 `Verbose`。默认是 `Context`，给出类似刚才显示的输出。`Plain`
    更紧凑，提供较少信息：'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Verbose` mode adds some extra information, including the arguments to
    any functions that are called:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Verbose` 模式添加了一些额外信息，包括调用的任何函数的参数：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This extra information can help you narrow in on why the exception is being
    raised. So why not use the `Verbose` mode all the time? As code gets complicated,
    this kind of traceback can get extremely long. Depending on the context, sometimes
    the brevity of `Plain` or `Context` mode is easier to work with.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外信息可以帮助您更准确地找出异常发生的原因。那么为什么不始终使用 `Verbose` 模式？随着代码变得复杂，这种回溯可能会变得非常长。根据情况，有时
    `Plain` 或 `Context` 模式的简洁性更容易处理。
- en: 'Debugging: When Reading Tracebacks Is Not Enough'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试：当仅仅阅读跟踪不足以解决问题时
- en: The standard Python tool for interactive debugging is `pdb`, the Python debugger.
    This debugger lets the user step through the code line by line in order to see
    what might be causing a more difficult error. The IPython-enhanced version of
    this is `ipdb`, the IPython debugger.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用于交互式调试的标准 Python 工具是 `pdb`，即 Python 调试器。此调试器允许用户逐行步进代码，以查看可能导致更复杂错误的原因。其 IPython
    增强版本是 `ipdb`，即 IPython 调试器。
- en: There are many ways to launch and use both these debuggers; we won’t cover them
    fully here. Refer to the online documentation of these two utilities to learn
    more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 启动和使用这两个调试器有许多方法；我们在此处不会全面涵盖它们。请参考这两个实用工具的在线文档以了解更多信息。
- en: In IPython, perhaps the most convenient interface to debugging is the `%debug`
    magic command. If you call it after hitting an exception, it will automatically
    open an interactive debugging prompt at the point of the exception. The `ipdb`
    prompt lets you explore the current state of the stack, explore the available
    variables, and even run Python commands!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython 中，也许最方便的调试接口是 `%debug` 魔术命令。如果在异常发生后调用它，它将自动在异常点打开一个交互式调试提示符。`ipdb`
    提示符允许您查看堆栈的当前状态，探索可用变量，甚至运行 Python 命令！
- en: 'Let’s look at the most recent exception, then do some basic tasks. We’ll print
    the values of `a` and `b`, then type `quit` to quit the debugging session:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看最近的异常，然后执行一些基本任务。我们将打印 `a` 和 `b` 的值，然后输入 `quit` 退出调试会话：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The interactive debugger allows much more than this, though—we can even step
    up and down through the stack and explore the values of variables there:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式调试器提供的远不止这些——我们甚至可以在堆栈中上下跳转，并探索那里的变量值：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This allows us to quickly find out not only what caused the error, but what
    function calls led up to the error.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们不仅可以快速找出错误的原因，还可以查看导致错误的函数调用。
- en: 'If you’d like the debugger to launch automatically whenever an exception is
    raised, you can use the `%pdb` magic function to turn on this automatic behavior:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望调试器在引发异常时自动启动，可以使用 `%pdb` 魔术函数来打开这种自动行为：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, if you have a script that you’d like to run from the beginning in interactive
    mode, you can run it with the command `%run -d`, and use the `next` command to
    step through the lines of code interactively.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您有一个希望以交互模式从头开始运行的脚本，可以使用命令 `%run -d` 运行它，并使用 `next` 命令逐行交互式地执行代码。
- en: There are many more available commands for interactive debugging than I’ve shown
    here. [Table 3-1](#table-3-1) contains a description of some of the more common
    and useful ones.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我在这里展示的常见和有用的命令外，还有许多可用于交互式调试的命令。[表 3-1](#table-3-1) 包含了一些更多的描述。
- en: Table 3-1\. Partial list of debugging commands
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-1\. 调试命令的部分列表
- en: '| Command | Description |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `l(ist)` | Show the current location in the file |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `l(ist)` | 显示文件中的当前位置 |'
- en: '| `h(elp)` | Show a list of commands, or find help on a specific command |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `h(elp)` | 显示命令列表，或查找特定命令的帮助信息 |'
- en: '| `q(uit)` | Quit the debugger and the program |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `q(uit)` | 退出调试器和程序 |'
- en: '| `c(ontinue)` | Quit the debugger, continue in the program |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `c(ontinue)` | 退出调试器，继续程序执行 |'
- en: '| `n(ext)` | Go to the next step of the program |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `n(ext)` | 进入程序的下一步 |'
- en: '| `<enter>` | Repeat the previous command |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `<enter>` | 重复上一个命令 |'
- en: '| `p(rint)` | Print variables |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `p(rint)` | 打印变量 |'
- en: '| `s(tep)` | Step into a subroutine |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `s(tep)` | 进入子例程 |'
- en: '| `r(eturn)` | Return out of a subroutine |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `r(eturn)` | 从子例程中返回 |'
- en: For more information, use the `help` command in the debugger, or take a look
    at `ipdb`’s [online documentation](https://oreil.ly/TVSAT).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请在调试器中使用 `help` 命令，或查看 `ipdb` 的[在线文档](https://oreil.ly/TVSAT)。
- en: Profiling and Timing Code
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码分析和计时
- en: 'In the process of developing code and creating data processing pipelines, there
    are often trade-offs you can make between various implementations. Early in developing
    your algorithm, it can be counterproductive to worry about such things. As Donald
    Knuth famously quipped, “We should forget about small efficiencies, say about
    97% of the time: premature optimization is the root of all evil.”'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发代码和创建数据处理流水线的过程中，通常可以在各种实现之间做出权衡。在开发算法的早期阶段，过于担心这些事情可能会适得其反。正如唐纳德·克努特所说，“我们应该忘记小的效率，大约97%的时间：过早优化是一切邪恶的根源。”
- en: 'But once you have your code working, it can be useful to dig into its efficiency
    a bit. Sometimes it’s useful to check the execution time of a given command or
    set of commands; other times it’s useful to examine a multiline process and determine
    where the bottleneck lies in some complicated series of operations. IPython provides
    access to a wide array of functionality for this kind of timing and profiling
    of code. Here we’ll discuss the following IPython magic commands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是一旦您的代码运行正常，深入了解其效率可能会有所帮助。有时检查特定命令或一系列命令的执行时间很有用；其他时候，检查多行过程并确定复杂操作系列中的瓶颈位置也很有用。IPython
    提供了广泛的功能来进行此类代码的时间和性能分析。这里我们将讨论以下 IPython 魔术命令：
- en: '`%time`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`%time`'
- en: Time the execution of a single statement
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 时间单个语句的执行时间
- en: '`%timeit`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`%timeit`'
- en: Time repeated execution of a single statement for more accuracy
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 多次执行单个语句以获得更准确的时间
- en: '`%prun`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`%prun`'
- en: Run code with the profiler
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分析器运行代码
- en: '`%lprun`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`%lprun`'
- en: Run code with the line-by-line profiler
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用逐行分析器运行代码
- en: '`%memit`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`%memit`'
- en: Measure the memory use of a single statement
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 测量单个语句的内存使用情况
- en: '`%mprun`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`%mprun`'
- en: Run code with the line-by-line memory profiler
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用逐行内存分析器运行代码
- en: The last four commands are not bundled with IPython; to use them, you’ll need
    to get the `line_profiler` and `memory_profiler` extensions, which we will discuss
    in the following sections.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后四个命令未捆绑在IPython中；要使用它们，您需要获取`line_profiler`和`memory_profiler`扩展，我们将在以下部分讨论它们。
- en: 'Timing Code Snippets: %timeit and %time'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计时代码片段：`%timeit`和`%time`
- en: 'We saw the `%timeit` line magic and `%%timeit` cell magic in the introduction
    to magic functions in [“IPython Magic Commands”](ch02.xhtml#section-0103-magic-commands);
    these can be used to time the repeated execution of snippets of code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[“IPython 魔法命令”](ch02.xhtml#section-0103-magic-commands)的介绍中看到了`%timeit`行魔法和`%%timeit`单元魔法；这些可以用来计时代码片段的重复执行。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that because this operation is so fast, `%timeit` automatically does a
    large number of repetitions. For slower commands, `%timeit` will automatically
    adjust and perform fewer repetitions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于此操作非常快，`%timeit`会自动执行大量重复。对于较慢的命令，`%timeit`会自动调整并执行较少的重复：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sometimes repeating an operation is not the best option. For example, if we
    have a list that we’d like to sort, we might be misled by a repeated operation;
    sorting a pre-sorted list is much faster than sorting an unsorted list, so the
    repetition will skew the result:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有时重复操作并不是最佳选择。例如，如果我们有一个需要排序的列表，我们可能会被重复的操作误导；排序一个已经排序好的列表比排序一个未排序的列表快得多，因此重复操作会扭曲结果：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For this, the `%time` magic function may be a better choice. It also is a good
    choice for longer-running commands, when short, system-related delays are unlikely
    to affect the result. Let’s time the sorting of an unsorted and a presorted list:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此操作，`%time`魔法函数可能是一个更好的选择。当命令运行时间较长时，短暂的系统相关延迟不太可能影响结果。让我们计时一个未排序和一个已排序列表的排序过程：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice how much faster the presorted list is to sort, but notice also how much
    longer the timing takes with `%time` versus `%timeit`, even for the presorted
    list! This is a result of the fact that `%timeit` does some clever things under
    the hood to prevent system calls from interfering with the timing. For example,
    it prevents cleanup of unused Python objects (known as *garbage collection*) that
    might otherwise affect the timing. For this reason, `%timeit` results are usually
    noticeably faster than `%time` results.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意排序好的列表比无序列表排序快得多，但请注意，即使对于排序好的列表，使用`%time`比`%timeit`花费的时间也更长！这是因为`%timeit`在幕后做了一些聪明的事情，防止系统调用干扰计时。例如，它阻止了未使用的Python对象的清理（称为*垃圾收集*），否则可能会影响计时。因此，`%timeit`的结果通常明显比`%time`的结果快。
- en: 'For `%time`, as with `%timeit`, using the `%%` cell magic syntax allows timing
    of multiline scripts:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`%time`，与`%timeit`一样，使用`%%`单元魔法语法允许对多行脚本进行计时：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For more information on `%time` and `%timeit`, as well as their available options,
    use the IPython help functionality (e.g., type `%time?` at the IPython prompt).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关`%time`和`%timeit`以及它们可用选项的更多信息，请使用IPython帮助功能（例如，在IPython提示符处键入`%time?`）。
- en: 'Profiling Full Scripts: %prun'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**全脚本分析**: %prun'
- en: A program is made up of many single statements, and sometimes timing these statements
    in context is more important than timing them on their own. Python contains a
    built-in code profiler (which you can read about in the Python documentation),
    but IPython offers a much more convenient way to use this profiler, in the form
    of the magic function `%prun`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个程序由许多单个语句组成，有时在上下文中计时这些语句比单独计时它们更重要。Python包含一个内置的代码分析器（可以在Python文档中了解），但IPython提供了一个更方便的方式来使用此分析器，即魔法函数`%prun`。
- en: 'By way of example, we’ll define a simple function that does some calculations:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，我们定义一个简单的函数来进行一些计算：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can call `%prun` with a function call to see the profiled results:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以调用一个函数调用来查看`%prun`的分析结果：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The result is a table that indicates, in order of total time on each function
    call, where the execution is spending the most time. In this case, the bulk of
    the execution time is in the list comprehension inside `sum_of_lists`. From here,
    we could start thinking about what changes we might make to improve the performance
    of the algorithm.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个表，按每次函数调用的总时间顺序显示执行在哪里花费了最多的时间。在这种情况下，大部分执行时间都花费在`sum_of_lists`内的列表推导式中。从这里开始，我们可以考虑如何改进算法的性能。
- en: For more information on `%prun`, as well as its available options, use the IPython
    help functionality (i.e., type `%prun?` at the IPython prompt).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关`%prun`以及其可用选项的更多信息，请使用IPython帮助功能（即，在IPython提示符处键入`%prun?`）。
- en: Line-by-Line Profiling with %lprun
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逐行分析：`%lprun`
- en: 'The function-by-function profiling of `%prun` is useful, but sometimes it’s
    more convenient to have a line-by-line profile report. This is not built into
    Python or IPython, but there is a `line_profiler` package available for installation
    that can do this. Start by using Python’s packaging tool, `pip`, to install the
    `line_profiler` package:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`%prun`的函数级性能分析很有用，但有时逐行分析报告更方便。这不是Python或IPython内置的功能，但可以通过安装`line_profiler`包来实现这一点。首先使用Python的包装工具`pip`安装`line_profiler`包：'
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, you can use IPython to load the `line_profiler` IPython extension, offered
    as part of this package:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以使用IPython来加载`line_profiler` IPython扩展，这是该软件包的一部分：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now the `%lprun` command will do a line-by-line profiling of any function.
    In this case, we need to tell it explicitly which functions we’re interested in
    profiling:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`%lprun`命令将对任何函数进行逐行分析。在这种情况下，我们需要明确告诉它我们感兴趣的是哪些函数：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The information at the top gives us the key to reading the results: the time
    is reported in microseconds, and we can see where the program is spending the
    most time. At this point, we may be able to use this information to modify aspects
    of the script and make it perform better for our desired use case.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部的信息为我们提供了阅读结果的关键：时间以微秒为单位报告，我们可以看到程序在哪里花费了最多的时间。此时，我们可以使用这些信息来修改脚本的某些方面，使其在我们所需的用例中表现更好。
- en: For more information on `%lprun`, as well as its available options, use the
    IPython help functionality (i.e., type `%lprun?` at the IPython prompt).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于`%lprun`及其可用选项的更多信息，请使用IPython的帮助功能（例如，在IPython提示符处键入`%lprun?`）。
- en: 'Profiling Memory Use: %memit and %mprun'
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存使用分析：`%memit`和`%mprun`
- en: 'Another aspect of profiling is the amount of memory an operation uses. This
    can be evaluated with another IPython extension, the `memory_profiler`. As with
    the `line_profiler`, we start by `pip`-installing the extension:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 分析的另一个方面是操作使用的内存量。可以使用另一个IPython扩展`memory_profiler`来评估这一点。与`line_profiler`一样，我们首先使用`pip`安装该扩展：
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then we can use IPython to load it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用IPython来加载它：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The memory profiler extension contains two useful magic functions: `%memit`
    (which offers a memory-measuring equivalent of `%timeit`) and `%mprun` (which
    offers a memory-measuring equivalent of `%lprun`). The `%memit` magic function
    can be used rather simply:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分析扩展包含两个有用的魔术函数：`%memit`（提供了`%timeit`的内存测量等价物）和`%mprun`（提供了`%lprun`的内存测量等价物）。`%memit`魔术函数可以非常简单地使用：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We see that this function uses about 140 MB of memory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这个函数使用了约140 MB的内存。
- en: 'For a line-by-line description of memory use, we can use the `%mprun` magic
    function. Unfortunately, this works only for functions defined in separate modules
    rather than the notebook itself, so we’ll start by using the `%%file` cell magic
    to create a simple module called `mprun_demo.py`, which contains our `sum_of_lists`
    function, with one addition that will make our memory profiling results more clear:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于逐行描述内存使用情况，我们可以使用`%mprun`魔术函数。不幸的是，这仅适用于在单独模块中定义的函数，而不适用于笔记本本身，因此我们将首先使用`%%file`单元格魔术创建一个简单的模块`mprun_demo.py`，其中包含我们的`sum_of_lists`函数，并添加一个额外的功能，以使我们的内存分析结果更清晰：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can now import the new version of this function and run the memory line
    profiler:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以导入这个函数的新版本并运行内存行分析：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, the `Increment` column tells us how much each line affects the total
    memory budget: observe that when we create and delete the list `L`, we are adding
    about 30 MB of memory usage. This is on top of the background memory usage from
    the Python interpreter itself.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，“Increment”列告诉我们每行如何影响总内存预算：注意，当我们创建和删除列表`L`时，我们增加了约30 MB的内存使用量。这是在Python解释器本身的后台内存使用量之上的额外内存使用。
- en: For more information on `%memit` and `%mprun`, as well as their available options,
    use the IPython help functionality (e.g., type `%memit?` at the IPython prompt).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于`%memit`和`%mprun`及其可用选项的更多信息，请使用IPython的帮助功能（例如，在IPython提示符处键入`%memit?`）。
- en: More IPython Resources
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多IPython资源
- en: In this set of chapters, we’ve just scratched the surface of using IPython to
    enable data science tasks. Much more information is available both in print and
    on the web, and here I’ll list some other resources that you may find helpful.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列章节中，我们只是初步介绍了使用IPython来支持数据科学任务的表面知识。更多信息可以在印刷品和网络上找到，这里我将列出一些其他可能对你有帮助的资源。
- en: Web Resources
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络资源
- en: '[The IPython website](http://ipython.org)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython网站](http://ipython.org)'
- en: The IPython website provides links to documentation, examples, tutorials, and
    a variety of other resources.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 网站提供了文档、示例、教程以及各种其他资源的链接。
- en: '[The nbviewer website](http://nbviewer.jupyter.org)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[nbviewer 网站](http://nbviewer.jupyter.org)'
- en: This site shows static renderings of any Jupyter notebook available on the internet.
    The front page features some example notebooks that you can browse to see what
    other folks are using IPython for!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此网站显示任何可在互联网上找到的 Jupyter 笔记本的静态渲染。首页展示了一些示例笔记本，您可以浏览看看其他人是如何使用 IPython 的！
- en: '[A curated collection of Jupyter notebooks](https://github.com/jupyter/jupyter/wiki)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter 笔记本的精选集](https://github.com/jupyter/jupyter/wiki)'
- en: This ever-growing list of notebooks, powered by nbviewer, shows the depth and
    breadth of numerical analysis you can do with IPython. It includes everything
    from short examples and tutorials to full-blown courses and books composed in
    the notebook format!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由 nbviewer 提供支持的这个不断增长的笔记本列表展示了您可以用 IPython 进行的数值分析的深度和广度。它涵盖了从简短的示例和教程到完整的课程和笔记本格式的书籍！
- en: Video tutorials
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 视频教程
- en: Searching the internet, you will find many video tutorials on IPython. I’d especially
    recommend seeking tutorials from the PyCon, SciPy, and PyData conferences by Fernando
    Perez and Brian Granger, two of the primary creators and maintainers of IPython
    and Jupyter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上搜索，您会发现许多关于 IPython 的视频教程。我特别推荐从 PyCon、SciPy 和 PyData 大会上获取教程，由 IPython
    和 Jupyter 的两位主要创作者和维护者 Fernando Perez 和 Brian Granger 提供。
- en: Books
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 书籍
- en: '[*Python for Data Analysis* (O’Reilly)](https://oreil.ly/ik2g7)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Python 数据分析*（O’Reilly）](https://oreil.ly/ik2g7)'
- en: Wes McKinney’s book includes a chapter that covers using IPython as a data scientist.
    Although much of the material overlaps what we’ve discussed here, another perspective
    is always helpful.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Wes McKinney 的书包括一章介绍如何将 IPython 用作数据科学家的工具。尽管其中很多内容与我们在这里讨论的内容重叠，但另一个视角总是有帮助的。
- en: '*Learning IPython for Interactive Computing and Data Visualization* (Packt)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*学习 IPython 进行交互计算与数据可视化*（Packt）'
- en: This short book by Cyrille Rossant offers a good introduction to using IPython
    for data analysis.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Cyrille Rossant 编写的这本简短书籍，为使用 IPython 进行数据分析提供了良好的入门。
- en: '*IPython Interactive Computing and Visualization Cookbook* (Packt)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*IPython 交互计算与可视化食谱*（Packt）'
- en: Also by Cyrille Rossant, this book is a longer and more advanced treatment of
    using IPython for data science. Despite its name, it’s not just about IPython;
    it also goes into some depth on a broad range of data science topics.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 同样由 Cyrille Rossant 编写，这本书是更长、更高级的 IPython 数据科学使用指南。尽管书名中提到的是 IPython，但它也深入探讨了广泛的数据科学主题。
- en: 'Finally, a reminder that you can find help on your own: IPython’s `?`-based
    help functionality (discussed in [Chapter 1](ch01.xhtml#section-0101-help-and-documentation))
    can be useful if you use it well and use it often. As you go through the examples
    here and elsewhere, this can be used to familiarize yourself with all the tools
    that IPython has to offer.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提醒您可以自己寻找帮助：IPython 基于 `?` 的帮助功能（详见[第 1 章](ch01.xhtml#section-0101-help-and-documentation)）在您善加利用且经常使用时非常有用。当您浏览这里和其他地方的示例时，可以用它来熟悉
    IPython 提供的所有工具。
