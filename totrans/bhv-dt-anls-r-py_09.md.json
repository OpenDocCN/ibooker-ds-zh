["```py\n## R\nlibrary(mice) # For multiple imputation\nlibrary(reshape) #For function melt()\nlibrary(psych) #For function logistic()\n\n```", "```py\n## Python\nfrom statsmodels.imputation import mice # For multiple imputation\nimport statsmodels.api as sm # For OLS call in Mice\n```", "```py\n## R\n> md.pattern(available_data)\n    age open gender bkg_amt state extra neuro     \n368   1    1      1       1     1     1     1    0\n358   1    1      1       1     1     1     0    1\n249   1    1      1       1     1     0     1    1\n228   1    1      1       1     1     0     0    2\n163   1    1      1       1     0     1     1    1\n214   1    1      1       1     0     1     0    2\n125   1    1      1       1     0     0     1    2\n120   1    1      1       1     0     0     0    3\n33    1    1      1       0     1     1     1    1\n23    1    1      1       0     1     1     0    2\n15    1    1      1       0     1     0     1    2\n15    1    1      1       0     1     0     0    3\n24    1    1      1       0     0     1     1    2\n24    1    1      1       0     0     1     0    3\n23    1    1      1       0     0     0     1    3\n18    1    1      1       0     0     0     0    4\n      0    0      0     175   711   793  1000 2679\n```", "```py\n## Python \ndef md_pattern_fun(dat_df):\n    # Getting all column names\n    all_cols = dat_df.columns.tolist()\n    # Getting the names of columns with some missing values\n    miss_cols = [col for col in all_cols if dat_df[col].isnull().sum()]\n    if miss_cols == all_cols: dat_df['index'] = dat_df.index\n    # Removing columns with no missing values\n    dat_df = dat_df.loc[:,miss_cols]\n    #Showing total number of missing values per variable\n    print(dat_df.isnull().sum()) \n    # Adding count value\n    dat_df['count'] = 1\n    # Showing count for missingness combinations\n    print(dat_df.isnull().groupby(miss_cols).count())\nmd_pattern_fun(available_data_df)\n\nextra       793\nneuro      1000\nstate       711\nbkg_amt     175\ndtype: int64\n                           count\nextra neuro state bkg_amt       \nFalse False False False      368\n                  True        33\n            True  False      163\n                  True        24\n      True  False False      358\n                  True        23\n            True  False      214\n                  True        24\nTrue  False False False      249\n                  True        15\n            True  False      125\n                  True        23\n      True  False False      228\n                  True        15\n            True  False      120\n                  True        18\n```", "```py\n## R (output not shown)\nmin_data <- available_data %>%\n  mutate(neuro = ifelse(!is.na(neuro), neuro, min(neuro, na.rm = TRUE)))\nmax_data <- available_data %>%\n  mutate(neuro = ifelse(!is.na(neuro), neuro, max(neuro, na.rm = TRUE)))\nsummary(lm(bkg_amt~neuro, data=available_data))\nsummary(lm(bkg_amt~neuro, data=min_data))\nsummary(lm(bkg_amt~neuro, data=max_data))\n\n```", "```py\n## Python (output not shown) \nmin_data_df = available_data_df.copy()\nmin_data_df.neuro = np.where(min_data_df.neuro.isna(), min_data_df.neuro.min(), \n                             min_data_df.neuro)\n\nmax_data_df = available_data_df.copy()\nmax_data_df.neuro = np.where(max_data_df.neuro.isna(), max_data_df.neuro.max(), \n                             max_data_df.neuro)\n\nprint(ols(\"bkg_amt~neuro\", data=available_data_df).fit().summary())\nprint(ols(\"bkg_amt~neuro\", data=min_data_df).fit().summary())\nprint(ols(\"bkg_amt~neuro\", data=max_data_df).fit().summary())\n```", "```py\n## R (output not shown)\n# Building the correlation matrices\ntampa_miss <- tampa %>%\n  select(-ID) %>%\n  mutate(across(everything(),is.na))\ntampa_cor <- cor(tampa_miss) %>%\n  melt()\n\ntacoma_miss <- tacoma %>%\n  select(-ID) %>%\n  mutate(across(everything(),is.na))\ntacoma_cor <- cor(tacoma_miss) %>%\n  melt()\n\n```", "```py\n## Python (output not shown)\n# Building the correlation matrices\ntampa_miss_df = tampa_df.copy().drop(['ID'], axis=1).isna()\ntacoma_miss_df = tacoma_df.copy().drop(['ID'], axis=1).isna()\n\ntampa_cor = tampa_miss_df.corr()\ntacoma_cor = tacoma_miss_df.corr()\n```", "```py\n## Python (output not shown)\navailable_data_df['md_extra'] = available_data_df['extra'].isnull().astype(float)\nmd_extra_mod =smf.logit('md_extra~age+open+neuro+gender+state+bkg_amt',\n                      data=available_data_df)\nmd_extra_mod.fit().summary()\n\n```", "```py\n## R\n> md_extra_mod <- glm(is.na(extra)~.,\n                        family = binomial(link = \"logit\"), \n                        data=available_data)\n> summary(md_extra_mod)\n\n...\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)\n(Intercept) -0.7234738  0.7048598  -1.026    0.305\nage         -0.0016082  0.0090084  -0.179    0.858\nopen         0.0557508  0.0425013   1.312    0.190\nneuro        0.0501370  0.0705626   0.711    0.477\ngenderF     -0.0236904  0.1659661  -0.143    0.886\nstateB      -0.0780339  0.2000428  -0.390    0.696\nstateC      -0.0556228  0.2048822  -0.271    0.786\nbkg_amt     -0.0007701  0.0011301  -0.681    0.496\n...\n```", "```py\n## R (output not shown)\nmd_state_mod <- glm(is.na(state)~.,\n                    family = binomial(link = \"logit\"), \n                    data=available_data)\nsummary(md_state_mod)\n\n```", "```py\n## Python\navailable_data_df['md_state'] = available_data_df['state'].isnull()\\\n    .astype(float)\nmd_state_mod =smf.logit('md_state~age+open+extra+neuro+gender+bkg_amt',\n                      data=available_data_df)\nmd_state_mod.fit(disp=0).summary()\n...\n              coef   std err       z         P>|z|   [0.025  0.975]\nIntercept   -0.2410   0.809     -0.298       0.766   -1.826  1.344\ngender[T.F] -0.1742   0.192     -0.907       0.364   -0.551  0.202\nage          0.0206   0.010      2.035       0.042    0.001  0.040\nopen         0.0362   0.050      0.727       0.467   -0.061  0.134\nextra        0.0078   0.048      0.162       0.871   -0.087  0.102\nneuro       -0.1462   0.087     -1.687       0.092   -0.316  0.024\nbkg_amt     -0.0019   0.001     -1.445       0.149   -0.005  0.001\n...\n```", "```py\n## Python (output not shown)\navailable_data_df['md_neuro'] = available_data_df['neuro'].isnull()\\\n    .astype(float)\nmd_neuro_mod =smf.logit('md_neuro~age+open+extra+state+gender+bkg_amt',\n                      data=available_data_df)\nmd_neuro_mod.fit(disp=0).summary()\n\n```", "```py\n## R\nmd_neuro_mod <- glm(is.na(neuro)~.,\n                    family = binomial(link = \"logit\"), \n                    data=available_data)\nsummary(md_neuro_mod)\n\n...\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)   \n(Intercept) -0.162896   0.457919  -0.356  0.72204   \nage         -0.012610   0.008126  -1.552  0.12071   \nopen         0.052419   0.038502   1.361  0.17337   \nextra       -0.084991   0.040617  -2.092  0.03639 * \ngenderF     -0.093537   0.151376  -0.618  0.53663   \nstateB       0.047106   0.181932   0.259  0.79570   \nstateC      -0.128346   0.187978  -0.683  0.49475   \nbkg_amt      0.003216   0.001065   3.020  0.00253 **\n...\n```", "```py\n## R\n> MI_data <- mice(available_data, print = FALSE)\n> MI_summ <- MI_data  %>%\n    with(lm(bkg_amt~age+open+extra+neuro+gender+state)) %>%\n    pool() %>%\n    summary()\n> print(MI_summ)\n         term   estimate  std.error statistic        df      p.value\n1 (Intercept) 240.990671 15.9971117 15.064636  22.51173 3.033129e-13\n2         age  -1.051678  0.2267569 -4.637912  11.61047 6.238993e-04\n3        open   3.131074  0.8811587  3.553360 140.26375 5.186727e-04\n4       extra  11.621288  1.2787856  9.087753  10.58035 2.531137e-06\n5       neuro  -6.799830  1.9339658 -3.516003  15.73106 2.929145e-03\n6     genderF -11.409747  4.2044368 -2.713740  20.73345 1.310002e-02\n7      stateB  -9.063281  4.0018260 -2.264786 432.54286 2.401986e-02\n8      stateC  -5.334055  4.7478347 -1.123471  42.72826 2.675102e-01\n```", "```py\n## Python \nMI_data_df = mice.MICEData(available_data_df)                                 \nfit = mice.MICE(model_formula='bkg_amt~age+open+extra+neuro+gender+state', \n                model_class=sm.OLS, data=MI_data_df)                \nMI_summ = fit.fit().summary()                                                       \nprint(MI_summ)\n\n                          Results: MICE\n===================================================================\nMethod:                  MICE         Sample size:          2000   \nModel:                   OLS          Scale                 5017.30\nDependent variable:      bkg_amt      Num. imputations      20     \n-------------------------------------------------------------------\n           Coef.   Std.Err.    t    P>|t|   [0.025   0.975]   FMI  \n-------------------------------------------------------------------\nIntercept 120.3570   8.8662 13.5748 0.0000 102.9795 137.7344 0.4712\nage        -1.1318   0.1726 -6.5555 0.0000  -1.4702  -0.7934 0.2689\nopen        3.1316   0.8923  3.5098 0.0004   1.3828   4.8804 0.1723\nextra      11.1265   1.0238 10.8680 0.0000   9.1200  13.1331 0.3855\nneuro      -4.5894   1.7968 -2.5542 0.0106  -8.1111  -1.0677 0.4219\ngender_M   65.9603   4.8191 13.6873 0.0000  56.5151  75.4055 0.4397\ngender_F   54.3966   4.6824 11.6171 0.0000  45.2192  63.5741 0.4154\nstate_A    40.9352   3.9080 10.4748 0.0000  33.2757  48.5946 0.3921\nstate_B    37.3490   4.0727  9.1706 0.0000  29.3666  45.3313 0.2904\nstate_C    42.0728   3.8643 10.8875 0.0000  34.4989  49.6468 0.2298\n===================================================================\n```", "```py\n## Python\ngender_dummies = pd.get_dummies(available_data_df.\\\n                                gender, \n                                prefix='gender')\navailable_data_df =  pd.concat([available_data_df, \n                                gender_dummies], \n                               axis=1)\navailable_data_df.gender_F = \\\nnp.where(available_data_df.gender.isna(), \n         float('NaN'), available_data_df.gender_F)\navailable_data_df.gender_M = \\\nnp.where(available_data_df.gender.isna(), \n         float('NaN'), available_data_df.gender_M)\navailable_data_df =  available_data_df.\\\ndrop(['gender'], axis=1)\n```", "```py\n## R\n> summary(MI_data)\nClass: mids\nNumber of multiple imputations:  5 \nImputation methods:\n     age     open    extra    neuro   gender    state  bkg_amt \n      \"\"       \"\"    \"pmm\"    \"pmm\"       \"\" \"logreg\"    \"pmm\" \nPredictorMatrix:\n       age open extra neuro gender state bkg_amt\nage      0    1     1     1      1     1       1\nopen     1    0     1     1      1     1       1\nextra    1    1     0     1      1     1       1\nneuro    1    1     1     0      1     1       1\ngender   1    1     1     1      0     1       1\nstate    1    1     1     1      1     0       1\n```", "```py\n## R \n> densityplot(MI_data, thicker = 3, lty = c(1,rep(2,5)))\n```", "```py\n## R\n> imp_meth_dist <- c(\"pmm\", rep(\"norm.nob\",3), \"\", \"logreg\", \"norm.nob\")\n> MI_data_dist <- mice(available_data, print = FALSE, method = imp_meth_dist)\n```", "```py\n## R\naugmented_data <- cbind(available_data, available_data_supp)\nMI_data_aux <- mice(augmented_data, print = FALSE)\n\n```", "```py\n## Python\naugmented_data_df = pd.concat([available_data_df, available_data_supp_df], \n                              axis=1)\nMI_data_aux_df = mice.MICEData(augmented_data_df)\n```", "```py\n## R\n> pred_mat <- MI_data_aux$predictorMatrix\n> pred_mat\n          age open extra neuro gender state bkg_amt insurance active\nage         0    1     1     1      1     1       1         1      1\nopen        1    0     1     1      1     1       1         1      1\nextra       1    1     0     1      1     1       1         1      1\nneuro       1    1     1     0      1     1       1         1      1\ngender      1    1     1     1      0     1       1         1      1\nstate       1    1     1     1      1     0       1         1      1\nbkg_amt     1    1     1     1      1     1       0         1      1\ninsurance   1    1     1     1      1     1       1         0      1\nactive      1    1     1     1      1     1       1         1      0\n```", "```py\n## R\n> pred_mat[,\"insurance\"] <- 0\n> pred_mat[,\"active\"] <- 0\n> pred_mat[\"neuro\",\"insurance\"] <- 1\n> pred_mat[\"extra\",\"active\"] <- 1\n> pred_mat\n          age open extra neuro gender state bkg_amt insurance active\nage         0    1     1     1      1     1       1         0      0\nopen        1    0     1     1      1     1       1         0      0\nextra       1    1     0     1      1     1       1         0      1\nneuro       1    1     1     0      1     1       1         1      0\ngender      1    1     1     1      0     1       1         0      0\nstate       1    1     1     1      1     0       1         0      0\nbkg_amt     1    1     1     1      1     1       0         0      0\ninsurance   1    1     1     1      1     1       1         0      0\nactive      1    1     1     1      1     1       1         0      0\n```", "```py\n## R\nMI_data <- mice(available_data, print = FALSE, m=20)\n\n```", "```py\n## Python\nfit = mice.MICE(model_formula='bkg_amt~age+open+extra+neuro+gender+state', \n                model_class=sm.OLS, data=MI_data_df) \nMI_summ = fit.fit(n_imputations=20).summary()\n```"]