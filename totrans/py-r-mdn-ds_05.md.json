["```py\n---\n$ python --version\nPython 2.7.16\n---\n```", "```py\n---\n$ python3 --version\nPython 3.8.6\n---\n```", "```py\n#%%\nprint('Hello, world!')\n```", "```py\n---\n$ pip freeze\n---\n```", "```py\n---\n$ pip freeze > requirements.txt\n---\n```", "```py\n---\n$ pip install -r requirements.txt\n---\n```", "```py\nimport math # Functions beyond the basic maths\n```", "```py\nmath.log(8, 2)\n```", "```py\nimport pandas as pd      # For DataFrame and handling\nimport numpy as np       # Array and numerical processing\nimport seaborn as sns    # High level Plotting\n```", "```py\ndp <- library(dplyr)       # nonsense, but just as an idea\n```", "```py\nplant_growth = pd.read_csv('ch03-py4r/data/plant_growth.csv')\n```", "```py\nplant_growth <- readr::read_csv(\"ch03-py4r/data/plant_growth.csv\")\n```", "```py\nfrom scipy import stats # e.g. for t-test function\n```", "```py\nimport matplotlib.pyplot as plt # Low level plotting\nimport statsmodels.api as sm    # Modeling, e.g. ANOVA\n```", "```py\nfrom statsmodels.formula.api import ols # For ordinary least squares regression\n```", "```py\nplant_growth = pd.read_csv('ch03-py4r/data/plant_growth.csv')\n```", "```py\nplant_growth.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 30 entries, 0 to 29\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   weight  30 non-null     float64\n 1   group   30 non-null     object\ndtypes: float64(1), object(1)\nmemory usage: 608.0+ bytes\n```", "```py\nplant_growth.describe()\n\n        weight\ncount\t30.000000\n mean\t5.073000\n  std\t0.701192\n  min\t3.590000\n  25%\t4.550000\n  50%\t5.155000\n  75%\t5.530000\n  max\t6.310000\n```", "```py\nplant_growth.head()\n\n  weight\tgroup\n0\t4.17\tctrl\n1\t5.58\tctrl\n2\t5.18\tctrl\n3\t6.11\tctrl\n4\t4.50\tctrl\n```", "```py\nplant_growth.shape\n\n(30, 2)\n```", "```py\nplant_growth.columns\n\nIndex(['weight', 'group'], dtype='object')\n```", "```py\n# in R\nclass(sunspots)\n[1] \"ts\"\nplot(sunspots)\n```", "```py\n# in R\nmethods(plot)\n```", "```py\nplant_growth['group'].value_counts()\n\ntrt2    10\ntrt1    10\nctrl    10\nName: group, dtype: int64\n```", "```py\nnp.mean(plant_growth['weight'])\n```", "```py\n# summary statistics\nplant_growth.groupby(['group']).describe()\n```", "```py\nplant_growth.groupby(['group']).agg({'weight':['mean','std']})\n```", "```py\n{'weight':['mean','std']}\n```", "```py\ndict([('weight', ['mean','std'])])\n```", "```py\n# Produces Pandas Series\nplant_growth.groupby('group')['weight'].mean()\n```", "```py\n# Produces Pandas DataFrame\nplant_growth.groupby('group')[['weight']].mean()\n```", "```py\ncities = ['Munich', 'Paris', 'Amsterdam']\ndist = [584, 1054, 653]\n```", "```py\n{'weight':['mean','std']}\n```", "```py\nplant_growth['weight']\n```", "```py\n('Munich', 'Paris', 'Amsterdam')\n```", "```py\n>>>   divmod(10, 3)\n(3, 1)\n```", "```py\nint, mod = divmod(10, 3)\n```", "```py\n# A list of distances\n>>> dist\n[584, 1054, 653]\n# Some transformation function\n>>> dist * 2\n[584, 1054, 653, 584, 1054, 653]\n```", "```py\n# Make a numpy array\n>>> dist_array = np.array(dist)\n>>> dist_array * 2\narray([1168, 2108, 1306])\n```", "```py\n>>> dist_array\narray([ 584, 1054,  653])\n>>>  dist_array[:2]\narray([ 584, 1054])\n>>>  dist_array()\narray([1054,  653])\n```", "```py\n# Rows: 0th and 2nd\n>>> plant_growth.iloc[[0,2]]\n  weight\tgroup\n0\t4.17\tctrl\n2\t5.18\tctrl\n\n# Rows: 0th to 5th, exclusive\n# Cols: 1st\n>>> plant_growth.iloc[:5, 0]\n0    4.17\n1    5.58\n2    5.18\n3    6.11\n4    4.50\n```", "```py\n>>> plant_growth.loc[(plant_growth.weight <=  4)]\n   weight\tgroup\n13\t3.59\ttrt1\n15\t3.83\ttrt1\n```", "```py\nsns.boxplot(x='group', y='weight', data=plant_growth)\nplt.show()\n```", "```py\nsns.catplot(x=\"group\", y=\"weight\", data=plant_growth)\nplt.show()\n```", "```py\nsns.catplot(x=\"group\", y=\"weight\", data=plant_growth, kind=\"point\")\nplt.show()\n```", "```py\n# fit a linear model\n# specify model\nmodel = ols(\"weight ~ group\", plant_growth)\n\n# fit model\nresults = model.fit()\n```", "```py\n# extract coefficients\nresults.params.Intercept\nresults.params[\"group[T.trt1]\"]\nresults.params[\"group[T.trt2]\"]\n```", "```py\n# Explore model results\nresults.summary()\n```", "```py\n# ANOVA\n# compute anova\naov_table = sm.stats.anova_lm(results, typ=2)\n\n# explore anova results\naov_table\nprint(aov_table)\n```", "```py\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nprint(pairwise_tukeyhsd(plant_growth['weight'], plant_growth['group']))\n```"]