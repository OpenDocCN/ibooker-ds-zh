- en: 'Chapter 34\. Customizing Matplotlib: Configurations and Stylesheets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While many of the topics covered in previous chapters involve adjusting the
    style of plot elements one by one, Matplotlib also offers mechanisms to adjust
    the overall style of a chart all at once. In this chapter we’ll walk through some
    of Matplotlib’s runtime configuration (*rc*) options, and take a look at the *stylesheets*
    feature, which contains some nice sets of default configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Plot Customization by Hand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this part of the book, you’ve seen how it is possible to tweak individual
    plot settings to end up with something that looks a little nicer than the default.
    It’s also possible to do these customizations for each individual plot. For example,
    here is a fairly drab default histogram, shown in [Figure 34-1](#fig_0411-settings-and-stylesheets_files_in_output_4_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![output 4 0](assets/output_4_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-1\. A histogram in Matplotlib’s default style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can adjust this by hand to make it a much more visually pleasing plot, as
    you can see in [Figure 34-2](#fig_0411-settings-and-stylesheets_files_in_output_6_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![output 6 0](assets/output_6_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-2\. A histogram with manual customizations
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This looks better, and you may recognize the look as inspired by that of the
    R language’s `ggplot` visualization package. But this took a whole lot of effort!
    We definitely do not want to have to do all that tweaking each time we create
    a plot. Fortunately, there is a way to adjust these defaults once in a way that
    will work for all plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the Defaults: rcParams'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each time Matplotlib loads, it defines a runtime configuration containing the
    default styles for every plot element you create. This configuration can be adjusted
    at any time using the `plt.rc` convenience routine. Let’s see how we can modify
    the rc parameters so that our default plot will look similar to what we did before.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `plt.rc` function to change some of these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With these settings defined, we can now create a plot and see our settings in
    action (see [Figure 34-3](#fig_0411-settings-and-stylesheets_files_in_output_11_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![output 11 0](assets/output_11_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-3\. A customized histogram using rc settings
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s see what simple line plots look like with these rc parameters (see [Figure 34-4](#fig_0411-settings-and-stylesheets_files_in_output_13_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 13 0](assets/output_13_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-4\. A line plot with customized styles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For charts viewed onscreen rather than printed, I find this much more aesthetically
    pleasing than the default styling. If you disagree with my aesthetic sense, the
    good news is that you can adjust the rc parameters to suit your own tastes! Optionally,
    these settings can be saved in a *.matplotlibrc* file, which you can read about
    in the [Matplotlib documentation](https://oreil.ly/UwM2u).
  prefs: []
  type: TYPE_NORMAL
- en: Stylesheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A newer mechanism for adjusting overall chart styles is via Matplotlib’s `style`
    module, which includes a number of default stylesheets, as well as the ability
    to create and package your own styles. These stylesheets are formatted similarly
    to the *.matplotlibrc* files mentioned earlier, but must be named with a *.mplstyle*
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you don’t go as far as creating your own style, you may find what you’re
    looking for in the built-in stylesheets. `plt.style.available` contains a list
    of the available styles—here I’ll list only the first five for brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The standard way to switch to a stylesheet is to call `style.use`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'But keep in mind that this will change the style for the rest of the Python
    session! Alternatively, you can use the style context manager, which sets a style
    temporarily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To demonstrate these styles, let’s create a function that will make two basic
    types of plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use this to explore how these plots look using the various built-in styles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Full-color figures are available in the [supplemental materials on GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Default Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matplotlib’s `default` style was updated in the version 2.0 release; let’s look
    at this first (see [Figure 34-5](#fig_0411-settings-and-stylesheets_files_in_output_22_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![output 22 0](assets/output_22_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-5\. Matplotlib’s `default` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: FiveThiryEight Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `fivethirtyeight` style mimics the graphics found on the popular [FiveThirtyEight
    website](https://fivethirtyeight.com). As you can see in [Figure 34-6](#fig_0411-settings-and-stylesheets_files_in_output_24_0),
    it is typified by bold colors, thick lines, and transparent axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![output 24 0](assets/output_24_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-6\. The `fivethirtyeight` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ggplot Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ggplot` package in the R language is a popular visualization tool among
    data scientists. Matplotlib’s `ggplot` style mimics the default styles from that
    package (see [Figure 34-7](#fig_0411-settings-and-stylesheets_files_in_output_26_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![output 26 0](assets/output_26_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-7\. The `ggplot` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Bayesian Methods for Hackers Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a neat short online book called [*Probabilistic Programming and Bayesian
    Methods for Hackers*](https://oreil.ly/9JIb7) by Cameron Davidson-Pilon that features
    figures created with Matplotlib, and uses a nice set of rc parameters to create
    a consistent and visually appealing style throughout the book. This style is reproduced
    in the `bmh` stylesheet (see [Figure 34-8](#fig_0411-settings-and-stylesheets_files_in_output_28_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![output 28 0](assets/output_28_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-8\. The `bmh` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Dark Background Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For figures used within presentations, it is often useful to have a dark rather
    than light background. The `dark_background` style provides this (see [Figure 34-9](#fig_0411-settings-and-stylesheets_files_in_output_30_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![output 30 0](assets/output_30_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-9\. The `dark_background` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Grayscale Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might find yourself preparing figures for a print publication that does
    not accept color figures. For this, the `grayscale` style (see [Figure 34-10](#fig_0411-settings-and-stylesheets_files_in_output_32_0))
    can be useful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![output 32 0](assets/output_32_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-10\. The `grayscale` style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Seaborn Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matplotlib also has several stylesheets inspired by the Seaborn library (discussed
    more fully in [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)).
    I’ve found these settings to be very nice, and tend to use them as defaults in
    my own data exploration (see [Figure 34-11](#fig_0411-settings-and-stylesheets_files_in_output_34_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![output 34 0](assets/output_34_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34-11\. The `seaborn` plotting style
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Take some time to explore the built-in options and find one that appeals to
    you! Throughout this book, I will generally use one or more of these style conventions
    when creating plots.
  prefs: []
  type: TYPE_NORMAL
