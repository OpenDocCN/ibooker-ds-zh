- en: 'Chapter 5\. OpenStreetMap: Accessing Geospatial Data with OSMnx'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[OpenStreetMap (OSM)](https://oreil.ly/UWkLH) is an editable geographic database
    of the entire world built by volunteers with an auspicious goal: to create geographic
    data and distribute it to all of us for free. You have interacted with OSM already
    on your smartphone if you use GPS for directions—or any location-enabled device.
    Python offers a package called [OSMnx](https://oreil.ly/CR2vV) that lets urban
    planners and a wide variety of other users create street networks and interact
    with and analyze otherwise “hidden” geographic information. You can find walkable,
    drivable, or bikeable urban networks for your own personal use or for research,
    such as to study characteristics of urban environments. Robust analytics reveal
    infrastructure frameworks that disclose inefficiencies when analyzing the network
    and interrelated nature of roadways, for example.'
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I think street networks are works of art. But their real use, which
    is perhaps underutilized, is adding geometric shapes to your built infrastructure.
    You can add buildings (hospitals, schools, and grocery stores, for example), parks,
    and other dataframes categorized as edges, buildings, and areas. The term *building*
    is defined loosely, and there is a Wiki for [building tags](https://oreil.ly/ZuB1n).
    A great resource to find place names is [OSM Nominatim](https://oreil.ly/tmo4M).
    You can also add points of interest, elevations, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, OSMnx may seem a bit technical and complicated. But as you
    build street networks with OSM in this chapter, you’ll learn to apply and interact
    with this powerful, customizable package.
  prefs: []
  type: TYPE_NORMAL
- en: A Conceptual Model of OpenStreetMap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [OSM database](https://oreil.ly/pPT7s) contains more than 80,000 tag keys
    and 600 relation types, so you can define the appropriate granularity for your
    map. In this chapter, you will learn how to access these features, customize them,
    add them to your map, and perform analyses. For example, you can identify a location
    and explore the distribution of agricultural, commercial, or residential land
    use. (A snapshot of different land-use values you can access by querying the database
    is shown in [Figure 5-2](#some_of_the_tags_available_in_the_osm_d), later in this
    section.) Understanding the distribution of land use in an area may be important
    if you are interested in how much flooding occurs there or how to calculate storm
    runoff. The most popular tags in the database as of this writing include data
    about buildings, highways, land surface, and waterways.
  prefs: []
  type: TYPE_NORMAL
- en: OSM’s structure has a few rules, but they are relatively straightforward. For
    example, nodes can be arbitrary (*hashable*) Python objects, with both nodes and
    edges as optional key/value attributes. To view these optional values in their
    entirety, head over to either OSM [map features](https://oreil.ly/XDg2a) or [tag
    info](https://oreil.ly/oOkoG) (or follow along in the text).
  prefs: []
  type: TYPE_NORMAL
- en: You can put a mutable object (like a list) inside a tuple. The tuple is still
    immutable, but you can change the list inside it, so it’s not hashable.
  prefs: []
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OSM applies a *tag* made up of a key-value pair. You will see these defined
    in the code cells we will write in this chapter. Their format is a *key* and its
    corresponding *value*, formatted as `key=value`. For example, if your key for
    a location is set to `highway` and the value is `residential`, you can tell that
    this is a road where people live.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Depending on what you’re looking for, this level of granularity may be useful
    in your data exploration. I have used these tags to explore impervious surfaces
    in urban settings, for example. Impervious surfaces tend to trap heat, and places
    with a lot of them tend to have higher rates of flooding—important information
    when comparing the characteristics of different neighborhoods. As another example,
    you might simply want a map of all the buildings in a neighborhood. The default
    value `buildings="all"` will then be uploaded. We’ll look at the utility of including
    tags in the code examples and sample Notebook for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: OSMnx extracts OSM data and creates a routable [Python NetworkX](https://networkx.github.io)
    object for working with complex networks. This is needed to convert edges and
    nodes from OSM, as shown in [Figure 5-1](#a_map_of_the_walkable_street_network_in),
    to links and junctions characteristic of routable networks. These routable maps
    are a network with features like travel time, speed limit, and shortest distance
    between locations allowing routing.
  prefs: []
  type: TYPE_NORMAL
- en: '![A map of the walkable street network in Manhattan’s Chelsea neighborhood](assets/pgda_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. A map of the walkable street network in Manhattan’s Chelsea neighborhood
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: OSMnx automates several mapping capabilities, including downloads of geometries
    like states, cities, neighborhoods, building footprints, customized street networks,
    and topology. In addition, OSMnx has built-in capabilities for analysis based
    on the foundation of graph theory. Simply defined, *graph theory* represents connections
    between elements and their locations within spatial networks, including both nodes
    and edges. The NetworkX integration allows you to customize nodes and edges to
    hold a variety of data, images, graph algorithms, and network structures for analysis.
    Instead of solely geographic coordinates, vast amounts of information are stored
    for each location. We will begin exploring the types of data shortly. First, here’s
    a brief introduction to what’s under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Multidigraphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Figure 5-1](#a_map_of_the_walkable_street_network_in) shows edges between
    nodes. This is a preview of what we will build later in this chapter. The nodes
    are corners connected by street segments, which are weighted by length in this
    example. (You could also weight them by travel time, for example). This is one
    way to calculate the shortest paths between two places.'
  prefs: []
  type: TYPE_NORMAL
- en: The data you are going to request in the next section will be in the format
    of a NetworkX multidigraph. *Multidigraphs* are abstract representations of objects
    or elements with multiple edges between the same nodes. They are directional,
    reflecting, for example, whether traffic on a specific city street is one-way
    or flows in both directions. Digraphs have edges that point from node to node,
    but not necessarily in both directions. Once you have multiple edges in parallel,
    you have a multidigraph.
  prefs: []
  type: TYPE_NORMAL
- en: OSM is a *wiki*, an open source, editable geographic database. Its conceptual
    model includes *nodes* that define points in space, *ways* defining linear features
    and boundaries, and *relations* that explain how nodes and ways work together.
    Think of a *node* as like a coordinate defined by latitude and longitude, with
    the *way* representing a list of nodes (called a *polyline*), or the boundaries
    of a polygon.
  prefs: []
  type: TYPE_NORMAL
- en: You might initially think of these spatial networks as simple planes, but there
    are plenty of nonplanar structures such as bridges, tunnels, and a variety of
    grade-separated structures like expressways, on- and off-ramps, and overpasses.
    You can evaluate these using topological measures and *metric structures*, or
    length and area described in spatial units (such as meters). The wiki description
    defines the relationship between the land-use tag and the values available to
    be assigned to a key, as shown in [Figure 5-2](#some_of_the_tags_available_in_the_osm_d).
  prefs: []
  type: TYPE_NORMAL
- en: 'Geographical data questions are often defined based on a specific location
    and usually have real-world implications. They often involve things like land
    use, road surfaces, number and types of buildings, or locations of community facilities,
    such as museums, bars, or internet access. For example, your data question might
    be something like:'
  prefs: []
  type: TYPE_NORMAL
- en: How many supermarkets are there in the seventh ward of Washington, DC?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many green spaces or parks are located in a particular neighborhood?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How walkable is Chicago, Illinois?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Some of the tags available in the OSM database to describe land use](assets/pgda_0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. Some of the tags available in the OSM database to describe land
    use
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: First, let’s install OSM.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OSMnx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install OSMnx to a unique environment within your terminal. As I’ve noted before,
    I create different environments as a simple way to address dependencies and updates.
    Another lesson learned the hard way: if you need to update the package, delete
    and reinstall it into your environment. I often delete environments after specific
    projects because they can take up significant space on your hard drive if you
    create them willy-nilly and let them sit there once no longer needed. This is
    easier if you name them with specificity. This seems to be the only way to be
    certain you have all of the dependencies also updated. If you receive a message
    in your code that a function has been deprecated, return to the [user reference
    files](https://oreil.ly/MZLFQ) for clarification.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You’ll be using OSMnx to retrieve the OSM data and matplotlib library to interact
    with and visualize your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see the packages you’ve installed alongside OSMnx, after `conda
    activate env`, enter `**conda list**` into the terminal. If you forget the name
    of your environment, you can write `**conda env list**` and view all of them.
    Here, I’ve created a unique environment called `OSM`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When you are ready to launch a Notebook, type `**jupyter notebook**` into your
    terminal, and a Notebook will open.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a Location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To pass `place_name`, OSMnx uses OSM Nominatim API. The [Nominatim Documentation](https://oreil.ly/AZvAG)
    includes an API reference guide to search for geocoding (see [Figure 5-3](#using_nominatim_to_query_an_api_request)).
    If you enter incorrect information (for example, if you’re seeking a neighborhood
    by name but misspell it), you will likely get an error. Open [Nominatim](https://oreil.ly/AP9Sd),
    and you will be taken to a debugging interface for the search engine that will
    look for the place you are requesting. I start there to make sure I am querying
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Nominatim to query an API request for place_name](assets/pgda_0503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-3\. Using Nominatim to query an API request for `place_name`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although you can add a place name as a string, it is best to check Nominatim
    and see how the location is listed to avoid conflicting or incorrect data. For
    example, I was looking for Brentwood, California, and got an error, so I ran it
    through Nominatim. It turned out that the boundaries were different for Brentwood
    as a neighborhood and for Brentwood’s administrative boundaries—and then there’s
    Brentwood Heights. I needed to make a minor adjustment in how I referred to the
    neighborhood.
  prefs: []
  type: TYPE_NORMAL
- en: This will make more sense when we begin working with these relationships. Refer
    to the [OSMnx documentation](https://oreil.ly/ZY8Nr) for more, but you can also
    query directly inside of your code cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say you want a detailed street map of Los Angeles. In the following code,
    you’ll begin by importing the required packages: osmnx and matplotlib. Include
    `place_name` and set it equal to the desired location (within quotation marks
    in code). If you’re looking at something more specific than city and state, the
    more detail you include, the better. Run the following code (it may take some
    time):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Functions are written in the format `ox.module_name.function_name()`. The previous
    code snippet references the `osmnx.graph` module and the `graph_from_place` function.
    Most functions can be called with `ox.function_name()` only. This will retrieve
    the geocoded information from `Los Angeles,California,United States`, along with
    drivable-street-network data within the boundaries ([Figure 5-4](#street_networks_in_the_municipality_of)).
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and pick a smaller location if you prefer. Larger cities are resource
    intensive and may take a few minutes to load. Later in the chapter we will explore
    Culver City, California.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place your cursor inside the parenthesis in your code where the ☞ icon is pointing.
    Here is the snippet isolated for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While your cursor is inside the parentheses, select Tab + Shift on your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '![Street networks in the municipality of Los Angeles, generated by OSMnx](assets/pgda_0504.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-4\. Street networks in the municipality of Los Angeles, generated by
    OSMnx
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s see what parameters are possible!
  prefs: []
  type: TYPE_NORMAL
- en: For example, [Figure 5-5](#discovering_arguments_available_within) displays
    the characteristics of the signature. This is a list of the arguments, and they
    need to match the arguments listed in the signature of the function. Try the different
    options and see how the map changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Discovering arguments available within functions](assets/pgda_0505.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-5\. Discovering arguments available within functions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `network_type` options for the function shown in [Figure 5-5](#discovering_arguments_available_within)
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drive`'
  prefs: []
  type: TYPE_NORMAL
- en: Drivable public streets (not service roads)
  prefs: []
  type: TYPE_NORMAL
- en: '`drive_service`'
  prefs: []
  type: TYPE_NORMAL
- en: Drivable public streets, including service roads
  prefs: []
  type: TYPE_NORMAL
- en: '`walk`'
  prefs: []
  type: TYPE_NORMAL
- en: All streets and paths that pedestrians can use (ignores one-way directionality
    by always connecting adjacent nodes with reciprocal directed edges)
  prefs: []
  type: TYPE_NORMAL
- en: '`bike`'
  prefs: []
  type: TYPE_NORMAL
- en: All streets and paths that cyclists can use
  prefs: []
  type: TYPE_NORMAL
- en: '`all`'
  prefs: []
  type: TYPE_NORMAL
- en: All (nonprivate) OSM streets and paths
  prefs: []
  type: TYPE_NORMAL
- en: '`all_private`'
  prefs: []
  type: TYPE_NORMAL
- en: All OSM streets and paths, including private access
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Arguments and Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever heard the expression, “Nobody is coming to save you”? I am convinced
    it was first uttered by a data scientist. When your code won’t execute (and, trust
    me, that isn’t an “if” so much as a “when”), you will need to go read the user
    documentation. That might be documentation about the package itself or perhaps
    a GitHub repository. Features and arguments are deprecated and updated with newer
    versions. Knowing how to find them is an important skill to develop.
  prefs: []
  type: TYPE_NORMAL
- en: If you scroll down past the parameters, you will notice customizations of these
    variables in the code snippets. I can’t include every function and associated
    argument here, but let’s take some examples. Select the inverted chevron in the
    upper right corner to display the contents of the box (^, as shown in [Figure 5-5](#discovering_arguments_available_within)).
    Scroll down and you will see a section called “Docstring.”
  prefs: []
  type: TYPE_NORMAL
- en: '*Docstrings* provide quick information about a class, function, or method.
    I look here for hints on how to formulate my query. When you need additional information
    about a function, return your cursor inside the parentheses and select Tab + Shift.
    Here is an example of the type of documentation available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you continue to scroll down in the interface, you will see a “Parameters”
    section. This section provides information about data types and how to complete
    the query. Not all parameters are needed, depending on your query. If you leave
    some parameters out, the defaults will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take another look at the code snippet you used to generate the Los Angeles
    map in [Figure 5-4](#street_networks_in_the_municipality_of). This map requires
    entering information for the `network_type` parameter: in this case, `network_type="drive"`.
    The function takes a string (hence the quotation marks), and the options are listed
    and must be within parentheses. Here they are, as listed in the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Calculating Travel Times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A popular type of data question involves travel time: *how long will it take
    to get from point A to point B?*'
  prefs: []
  type: TYPE_NORMAL
- en: To answer this kind of question, you can plot *networks* (where edges intersect)
    and calculate *free-flow travel time*, using the imputed maximum speed allowed
    on a specific highway type. In other words, when considering the maximum speed
    on a road, the time calculated to drive the distance is defined as *free-flow*.
    The `osmnx.speed` module calculates speed and travel times by providing kilometers
    per hour as `speed_kph` edge attributes. Complex networks are formed from the
    connections between nodes and edges. Analyzing these structures with the NetworkX
    Python package allows you to view a node as an element and the connection between
    nodes as an edge to study their relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try running a function to calculate travel time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that you have four inputs here. Let’s break these down and look at how
    the OSM documentation defines them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`G`'
  prefs: []
  type: TYPE_NORMAL
- en: The input graph
  prefs: []
  type: TYPE_NORMAL
- en: '`hwy_speeds`'
  prefs: []
  type: TYPE_NORMAL
- en: The mean speed value of all edges in highway type (if empty)
  prefs: []
  type: TYPE_NORMAL
- en: '`f``allback`'
  prefs: []
  type: TYPE_NORMAL
- en: A backup speed, in case the road type has no preexisting value
  prefs: []
  type: TYPE_NORMAL
- en: '`p``recision`'
  prefs: []
  type: TYPE_NORMAL
- en: Rounding to the desired decimal precision
  prefs: []
  type: TYPE_NORMAL
- en: Only `G`, the NetworkX MultiGraph, is being passed into the function. If the
    origin (`orig`) and destination (`dest`) are both specified, you’ll get a single
    list of nodes in a shortest path from the source to the target. These routes are
    distinct, to show how you can plot `travel_times` and `edge_speeds` to find the
    shortest routes between destinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are setting weight to equal `w` instead of the default none. Here’s what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 5-6](#calculating_the_shortest_distance_betwe) uses OSMnx’s color options
    as well. *Color options* can be described as attribute values for each edge in
    a path. *Attribute values* can represent a property, such as data about how the
    graph was constructed, the color of the vertices when the graph is plotted, or
    simply the weights of the edges in a weighted graph. In [Figure 5-6](#calculating_the_shortest_distance_betwe),
    the routes are represented by different colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculating the shortest distance between points in Los Angeles by computing
    weighted travel times](assets/pgda_0506.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-6\. Calculating the shortest distance between points in Los Angeles
    by computing weighted travel times
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The full street network does consume resources, so let’s select a specific
    neighborhood to get a more manageable visualization to query. In the code snippet
    that follows, I designated Culver City, California, to include all the private
    roads within the city limits (see [Figure 5-7](#a_neighborhood_level_street_network_map)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![A neighborhood-level street network map of Culver City, California](assets/pgda_0507.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-7\. A neighborhood-level street network map of Culver City, California
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you are curious about colorizing nodes or edges, you can explore [`key:colour`](https://oreil.ly/zjof8)
    options on the OSM wiki page or in the user reference documentation. [Figure 5-8](#key_color_options_in_osm_left_parenthes)
    shows the most common color codes but is certainly not exhaustive. The color variation
    is somewhat self-explanatory, but you can refer to the exact color on the [OSM
    wiki](https://oreil.ly/zjof8). I find the chart useful to grab the color codes
    I use most frequently.
  prefs: []
  type: TYPE_NORMAL
- en: '![Key color options in OSM (not exhaustive, but a handy reference)](assets/pgda_0508.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-8\. Key color options in OSM (not exhaustive, but a handy reference)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You have built a few street networks and maps in OSMnx. Now let’s see what additional
    information you can extract.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Statistical Measures in OSMnx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualizing street networks is meaningful, but the OSMnx framework also allows
    you to generate descriptive geometric and topological measures. Topographic measures
    can offer insights like the average number of nodes per street.
  prefs: []
  type: TYPE_NORMAL
- en: Circuity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To introduce the concept of circuity, let’s calculate the average circuity in
    Manhattan and compare it to Staten Island. *Circuity* is the ratio of network
    distances to straight-line distances. Circuity is an important measure in urban
    networks; it indicates transportation efficiencies and may also show inequities
    between different geographic areas and populations. Circuity averages differ in
    different neighborhoods, on different subway routes, and with the length and time
    of travel. Researchers used circuity as part of a study that found a correlation
    between [subway turnstile entries in New York City and COVID-19 cases and deaths](https://oreil.ly/7qGjF)
    between March and May 2020.
  prefs: []
  type: TYPE_NORMAL
- en: How circuitous your journey from point A to point B is, compared to other journeys,
    relies on a variety of factors, such as land-use systems, the design of transportation
    options, hubs, and cost. Network distances like circuity are calculated based
    on the actual grid and layout of a city, instead of “as the crow flies”—that is,
    a simple straight line between two points. You can always assume that actual distances
    to locations are quite a bit farther.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will repeat the import details in case you are moving between different sections.
    There is a new line in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The % character indicates this is a Python “magic function.” The argument is
    the line that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: These *magic functions* (or dunder methods) with double underscores provide
    additional functionality. In this example, matplotlib will display the plotting
    command within the Jupyter Notebook right below the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parentheses are not needed. This places the plotting output inside the Jupyter
    Notebook beneath the coding cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a value for travel in Manhattan, which has a robust transportation
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The output is 1.0366712806100773.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now compare this value to other boroughs. Lower circuity values indicate
    higher efficiency. The other four boroughs of New York City present different
    transportation challenges. Traveling within Staten Island, for instance, is 4%
    less direct than traveling within Manhattan, as the output of the following code
    indicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This output is 1.0732034499369911.
  prefs: []
  type: TYPE_NORMAL
- en: 'Network Analysis: Circuity in Paris, France'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s have a little fun and explore Paris, specifically, part of its urban
    infrastructure—the roadways. First, let’s calculate circuity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output: 1.0377408863844562.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing the network statistics for a place is as simple as updating the place
    name (according to the Nominatim standards of OSM) and running the cell. The street
    network is then loaded, along with the area in square meters. Let’s get Paris’s
    street network and area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s calculate and merge the statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The counts of streets and networks are stored as nested dictionaries inside
    the statistics dictionary. The following code unpacks those nested dictionaries
    and then converts them to a pandas dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This example is probably more granular than most of what you’ll need, but I
    want you to see the data you can use to calculate measures such as shortest distance.^([1](ch05.xhtml#ch01fn9))
  prefs: []
  type: TYPE_NORMAL
- en: At a glance, you can determine the number of streets emerging from each node.
    If you are interested in density, you can count the number of intersections or
    meters of linear street distance. Specifically, *linear street distance* represents
    a sum of total street length in an undirected representation of a network, meaning
    directionality (one-way and two-way streets) is not captured. That information
    is important for driving directions but not as important for walking directions.
  prefs: []
  type: TYPE_NORMAL
- en: Betweenness Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s ask a data question: *how long is the average Parisian street?* Average
    street length is a nice linear proxy for block size. These measures provide urban-planning
    information about walkability and housing prices; for instance, a smaller block
    size translates to higher walkability and higher home prices. [Figure 5-9](#network_statistics_for_the_city_of_pari)
    shows the overall output of our statistics.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Betweenness centrality* measures how central a location or node is within
    a larger network or neighborhood. You can see that in Paris, the area with the
    highest betweenness centrality has 11% of all the shortest paths running through
    its boundaries. What does this tell us? Shorter road segments typically cluster
    around central business districts or historical districts or serve as conduits
    for navigating throughout a city.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network statistics for the city of Paris, France](assets/pgda_0509.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-9\. Network statistics for the city of Paris, France
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'How important is the node? Think about a chain of command where information
    has to travel through a single person to be dispensed to the rest of the organization.
    If only 11% of the information has to pass through it, then in general, it isn’t
    critical to the flow through the network. You can see the max node as a small
    red dot in the lefthand image (A) in [Figure 5-10](#left_parenthesisaright_parenthesis_digr).
    In the following code cell, the shortest path between the nodes is calculated.
    The parameter weight considers the edge attribute length. The function will return
    the betweenness centrality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The output is `(332476877, 0.1128095261389006)`.
  prefs: []
  type: TYPE_NORMAL
- en: '![(A) Digraph (max node) of betweenness in Paris highlighting the maximum node
    of betweenness centrality; (B) Visualizing every node in the graph](assets/pgda_0510.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-10\. (A) Digraph (max node) of betweenness in Paris highlighting the
    maximum node of betweenness centrality; (B) Visualizing every node in the graph
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Node color (`nc`) will retrieve a node with the highest centrality and observe
    the result in the graph object shown in [Figure 5-10](#left_parenthesisaright_parenthesis_digr).
    Node size (`ns`) is calculated as well. You can adjust these values based on your
    desired visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, try adding color to every node, to visualize 11% of all shortest paths
    relative to all nodes in [Figure 5-10](#left_parenthesisaright_parenthesis_digr)
    (B):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When observing street networks visually, it can be a challenge to identify important
    nodes and measures of centrality. Plotting the node attributes gives you an easily
    identifiable region for a deeper review. What other features are located nearby?
    How might this influence the values we observe at this node?
  prefs: []
  type: TYPE_NORMAL
- en: Network Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How about we stick around in France a little longer? In Jupyter Notebooks,
    I often repeat the import functions for simplicity, to avoid scrolling up and
    down when running or rerunning a section. I will do the same thing here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few network types to explore. The most common are `walk`, `bike`,
    and `drive`, or you can even explore `all`. Some of those options can be quite
    congested in a city like Paris. Let’s try `drive` and explore what that measures.
    Generate the figure in your Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You want edges (streets), so you will need to create a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'What type of columns? What is the projection? The following code cells provide
    this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You also will need to know the CRS to identify location in geographic space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'I am a visual person, so I like to see the column headings with a sample of
    the data. Set that up next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run the following code for a summary of the types of roads and
    how they are classified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: OSM contains information about roadways that you can access for a wide variety
    of uses. The infrastructure of any location or city can provide information about
    how easy it is to access transportation into and out of that location, which might
    influence the social nature of neighborhoods, communities, and larger networks
    of populations.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Your Neighborhood Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s look at how you can create, customize, automatically download, and compare
    street network maps. For this exercise, we’ll travel back to Culver City and generate
    a neighborhood map.
  prefs: []
  type: TYPE_NORMAL
- en: Geometries from Place
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code generates the map of Culver City, California, in [Figure 5-11](#using_place_to_call_a_specific_geometry);
    including the tag `building` will add building footprints to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'I am defaulting to `#FFFFFF` (white) as a background color to make the map
    more easily printable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and see what you can create. [Figure 5-11](#using_place_to_call_a_specific_geometry)
    shows the city geometry with building footprints.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using place to call a specific geometry by location in OSMnx for Culver City,
    California](assets/pgda_0511.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-11\. Using place to call a specific geometry by location in OSMnx for
    Culver City, California
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Geometries from Address
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps you have geographic coordinates for a location. You can explore that
    location by passing those coordinates to the `geometries_from_address` function
    ([Figure 5-12](#viewing_amsterdam_in_the_netherlands_by)). All of the geometries
    will transform to the CRS you select. For example, the projected coordinate system
    for the Netherlands is EPSG:28992.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code that generates the map in [Figure 5-12](#viewing_amsterdam_in_the_netherlands_by):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Viewing Amsterdam in the Netherlands by geographic coordinates and EPSG projection](assets/pgda_0512.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-12\. Viewing Amsterdam in the Netherlands by geographic coordinates
    and EPSG projection
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can also change the arguments to explore other geographies. Make sure to
    change the projection for the highest level of accuracy. (As a friendly reminder:
    the Earth is not a perfect sphere, so you need to select the best projection for
    the geographical area of interest to minimize distortion.) The following code
    includes additional tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 5-13](#using_tags_to_add_features_to_a_map) shows the output of this
    code. Thanks to the tags, this map shows water, commercial buildings, commercial
    and residential land use, and highways. These tags are explorative. See what happens
    with different combinations.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tags to add features to a map](assets/pgda_0513.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-13\. Using tags to add features to a map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the next example, you’ll use `custom_filter` to query specific ways to include
    in your graph, such as `motorway`. Specifying what you want with `custom_filter`
    will significantly reduce the resources needed to assemble the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'The terms `motorway_link` and `trunk_link` have specific meanings in OSM (as
    [OpenStreetMap Wiki](https://oreil.ly/DHjM8) explains). They describe how highways
    are connected: on- and off-ramps, for example (see [Figure 5-14](#motorways_in_madrid_using_a_custom_filt)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Input the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `custom_filter` (`cf`) requires a `network_type` preset like `"highway"~"motorway"`.
    We want highways that are also motorways and the binary OR (|) operator in Python.
    The argument addresses both values, motorways and trunks (the ramps for entering
    and entering highways).
  prefs: []
  type: TYPE_NORMAL
- en: The output ([Figure 5-14](#motorways_in_madrid_using_a_custom_filt)) shows a
    map of only motorways, this time in Madrid, Spain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Motorways in Madrid using a custom filter (cf) to query only motorways](assets/pgda_0514.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-14\. Motorways in Madrid using a custom filter (`cf`) to query only
    motorways
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To appreciate the motorway map in context, you can readily bring up a more
    detailed map of Madrid with building footprints ([Figure 5-15](#building_footprints_in_madridcomma_spai))
    using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `save` is set to `True`. It is important to save your files. I am
    using the default `filepath`, but you can specify a precise folder or location,
    such as your Downloads folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building footprints in Madrid, Spain](assets/pgda_0515.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-15\. Building footprints in Madrid, Spain
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 5-16](#the_networkx_function_brings_all_the_ne) is an example of downloading
    the whole network (`network_type="drive"`) in the absence of a filter or customization.
    These renderings can be quite artistic and are often integrated into cartography
    and mapmaking or commercial products. Run this code to generate the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![The networkx function brings all the networks into the graph](assets/pgda_0516.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-16\. The `networkx` function brings all the networks into the graph
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The last graph in this chapter is created with a different value for `network_type="all"`.
    [Figure 5-17](#madridcomma_spaincomma_observed_in_netw) shows what happens to
    the output if you change the geocode queries by swapping out the strings (`all_private`,
    `all`, `bike`, `drive`, `drive_service`, `walk`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![Madrid, Spain, observed in network_type=“all” in OSMnx](assets/pgda_0517.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-17\. Madrid, Spain, observed in `network_type="all"` in OSMnx
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can experiment by choosing the other `network_type` options and observing
    how the output changes.
  prefs: []
  type: TYPE_NORMAL
- en: Working with QuickOSM in QGIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You got acquainted with QGIS in [Chapter 3](ch03.xhtml#qgis_exploring_pyqgis_and_native_algori),
    and I want to point out briefly that you can also use QGIS to interact with OSM
    data. QuickOSM in QGIS works similarly within a GUI. Open QGIS and select Vector
    in the toolbar, and you will see a “Quick query” option for Quick OSM ([Figure 5-18](#integrating_osm_keyvalue_pairs_in_qgis)).
    QuickOSM allows you to run these quick queries in the console and display results
    directly on a canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Getting access to the level of data in GIS format within QGIS allows you to
    select a variety of amenities to include in a single map layer. This is an opportunity
    to explore `key:value` relationships outside of a Notebook as your data questions
    grow in scope.
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating OSM key:value pairs in QGIS](assets/pgda_0518.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-18\. Integrating OSM `key:value` pairs in QGIS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you explored OpenStreetMap and learned how to generate street
    networks across the world as well as to use functions to calculate travel times,
    circuity, and other important measures.
  prefs: []
  type: TYPE_NORMAL
- en: OSM contains a wealth of open source geospatial data that you can access, model,
    project, visualize, and use to explore real-world street networks, points of interest,
    building locations, elevations, and more. I hope you will continue to play with
    it. Now I want to show you how to integrate this new skill with another tool,
    the ArcGIS Python API.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](ch05.xhtml#ch01fn9-marker)) If you would like the details behind these
    calculations and a case study, see Boeing, G. 2017\. “OSMnx: New Methods for Acquiring,
    Constructing, Analyzing, and Visualizing Complex Street Networks.” *Computers,
    Environment and Urban Systems,* 65: 126–139\. [*https://doi.org/10.1016/j.compenvurbsys.2017.05.004*](https://doi.org/10.1016/j.compenvurbsys.2017.05.004).
    The user reference also provides a summary of the dictionary with attributes included.'
  prefs: []
  type: TYPE_NORMAL
