- en: Chapter 27\. Simple Scatter Plots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第27章\. 简单散点图
- en: 'Another commonly used plot type is the simple scatter plot, a close cousin
    of the line plot. Instead of points being joined by line segments, here the points
    are represented individually with a dot, circle, or other shape. We’ll start by
    setting up the notebook for plotting and importing the packages we will use:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常用的图表类型是简单的散点图，它与线图非常相似。点不是通过线段连接，而是分别用点、圆或其他形状表示。我们将从设置绘图笔记本和导入我们将使用的包开始：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Scatter Plots with plt.plot
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 plt.plot 创建散点图
- en: In the previous chapter we looked at using `plt.plot`/`ax.plot` to produce line
    plots. It turns out that this same function can produce scatter plots as well
    (see [Figure 27-1](#fig_0402-simple-scatter-plots_files_in_output_4_0)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们使用 `plt.plot`/`ax.plot` 来生成线图。事实证明，这个函数也可以生成散点图（参见 [图 27-1](#fig_0402-simple-scatter-plots_files_in_output_4_0)）。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![output 4 0](assets/output_4_0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![output 4 0](assets/output_4_0.png)'
- en: Figure 27-1\. Scatter plot example
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-1\. 散点图示例
- en: The third argument in the function call is a character that represents the type
    of symbol used for the plotting. Just as you can specify options such as `'-'`
    or `'--'` to control the line style, the marker style has its own set of short
    string codes. The full list of available symbols can be seen in the documentation
    of `plt.plot`, or in Matplotlib’s [online documentation](https://oreil.ly/tmYIL).
    Most of the possibilities are fairly intuitive, and a number of the more common
    ones are demonstrated here (see [Figure 27-2](#fig_0402-simple-scatter-plots_files_in_output_6_0)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用中的第三个参数是一个字符，代表用于绘图的符号类型。正如你可以指定 `'-'` 或 `'--'` 控制线条样式一样，标记样式也有自己一套简短的字符串代码。可用符号的完整列表可以在
    `plt.plot` 的文档中或Matplotlib的[在线文档](https://oreil.ly/tmYIL)中找到。大多数可能性都相当直观，并且其中一些更常见的示例在此处演示（参见
    [图 27-2](#fig_0402-simple-scatter-plots_files_in_output_6_0)）。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![output 6 0](assets/output_6_0.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![output 6 0](assets/output_6_0.png)'
- en: Figure 27-2\. Demonstration of point numbers
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-2\. 点数示例
- en: For even more possibilities, these character codes can be used together with
    line and color codes to plot points along with a line connecting them (see [Figure 27-3](#fig_0402-simple-scatter-plots_files_in_output_8_0)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步地，这些字符代码可以与线条和颜色代码一起使用，以绘制带有连接线的点（参见 [图 27-3](#fig_0402-simple-scatter-plots_files_in_output_8_0)）。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 8 0](assets/output_8_0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![output 8 0](assets/output_8_0.png)'
- en: Figure 27-3\. Combining line and point markers
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-3\. 结合线条和点标记的示例
- en: Additional keyword arguments to `plt.plot` specify a wide range of properties
    of the lines and markers, as you can see in [Figure 27-4](#fig_0402-simple-scatter-plots_files_in_output_10_0).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.plot` 的额外关键字参数可以指定线条和标记的多种属性，正如你可以在 [图 27-4](#fig_0402-simple-scatter-plots_files_in_output_10_0)
    中看到的。'
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![output 10 0](assets/output_10_0.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![output 10 0](assets/output_10_0.png)'
- en: Figure 27-4\. Customizing line and point markers
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-4\. 自定义线条和点标记
- en: These kinds of options make `plt.plot` the primary workhorse for two-dimensional
    plots in Matplotlib. For a full description of the options available, refer to
    the [`plt.plot` documentation](https://oreil.ly/ON1xj).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项使得 `plt.plot` 成为 Matplotlib 中二维图的主要工具。要了解所有可用选项的详细描述，请参考 [`plt.plot` 文档](https://oreil.ly/ON1xj)。
- en: Scatter Plots with plt.scatter
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 plt.scatter 创建散点图
- en: A second, more powerful method of creating scatter plots is the `plt.scatter`
    function, which can be used very similarly to the `plt.plot` function (see [Figure 27-5](#fig_0402-simple-scatter-plots_files_in_output_13_0)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建散点图的第二种更强大的方法是 `plt.scatter` 函数，其用法与 `plt.plot` 函数非常相似（参见 [图 27-5](#fig_0402-simple-scatter-plots_files_in_output_13_0)）。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![output 13 0](assets/output_13_0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![output 13 0](assets/output_13_0.png)'
- en: Figure 27-5\. A simple scatter plot
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-5\. 一个简单的散点图
- en: The primary difference of `plt.scatter` from `plt.plot` is that it can be used
    to create scatter plots where the properties of each individual point (size, face
    color, edge color, etc.) can be individually controlled or mapped to data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.scatter` 与 `plt.plot` 的主要区别在于，它可以用于创建散点图，其中可以单独控制或映射到数据的每个点的属性（大小、填充颜色、边缘颜色等）。'
- en: Let’s show this by creating a random scatter plot with points of many colors
    and sizes. In order to better see the overlapping results, we’ll also use the
    `alpha` keyword to adjust the transparency level (see [Figure 27-6](#fig_0402-simple-scatter-plots_files_in_output_15_0)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地观察重叠的结果，我们创建一个随机散点图，点具有多种颜色和大小。为了调整透明度，我们还会使用 `alpha` 关键字（参见 [图 27-6](#fig_0402-simple-scatter-plots_files_in_output_15_0)）。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 15 0](assets/output_15_0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![output 15 0](assets/output_15_0.png)'
- en: Figure 27-6\. Changing size and color in scatter points
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-6\. 在散点图中更改点的大小和颜色
- en: Notice that the color argument is automatically mapped to a color scale (shown
    here by the `colorbar` command), and that the size argument is given in pixels.
    In this way, the color and size of points can be used to convey information in
    the visualization, in order to visualize multidimensional data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，颜色参数自动映射到颜色比例（这里通过`colorbar`命令显示），点的大小以像素表示。通过这种方式，可以利用点的颜色和大小来传达可视化信息，以便可视化多维数据。
- en: For example, we might use the Iris dataset from Scikit-Learn, where each sample
    is one of three types of flowers that has had the size of its petals and sepals
    carefully measured (see [Figure 27-7](#fig_0402-simple-scatter-plots_files_in_output_17_0)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用来自 Scikit-Learn 的鸢尾花数据集，其中每个样本是三种类型的花之一，其花瓣和萼片的大小已经被仔细测量（见[图 27-7](#fig_0402-simple-scatter-plots_files_in_output_17_0)）。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 17 0](assets/output_17_0.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![output 17 0](assets/output_17_0.png)'
- en: Figure 27-7\. Using point properties to encode features of the Iris data^([1](ch27.xhtml#idm45858760750032))
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-7\. 使用点属性来编码鸢尾花数据的特征^([1](ch27.xhtml#idm45858760750032))
- en: 'We can see that this scatter plot has given us the ability to simultaneously
    explore four different dimensions of the data: the (*x*, *y*) location of each
    point corresponds to the sepal length and width, the size of the point is related
    to the petal width, and the color is related to the particular species of flower.
    Multicolor and multifeature scatter plots like this can be useful for both exploration
    and presentation of data.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，这个散点图使我们能够同时探索数据的四个不同维度：每个点的(*x*, *y*)位置对应于萼片的长度和宽度，点的大小与花瓣的宽度相关，颜色与特定种类的花相关。像这样的多颜色和多特征散点图既可以用于数据探索，也可以用于数据展示。
- en: 'plot Versus scatter: A Note on Efficiency'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图与散点图：关于效率的一点说明
- en: Aside from the different features available in `plt.plot` and `plt.scatter`,
    why might you choose to use one over the other? While it doesn’t matter as much
    for small amounts of data, as datasets get larger than a few thousand points,
    `plt.plot` can be noticeably more efficient than `plt.scatter`. The reason is
    that `plt.scatter` has the capability to render a different size and/or color
    for each point, so the renderer must do the extra work of constructing each point
    individually. With `plt.plot`, on the other hand, the markers for each point are
    guaranteed to be identical, so the work of determining the appearance of the points
    is done only once for the entire set of data. For large datasets, this difference
    can lead to vastly different performance, and for this reason, `plt.plot` should
    be preferred over `plt.scatter` for large datasets.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`plt.plot`和`plt.scatter`中提供的不同特性外，为什么你可能选择使用一个而不是另一个？虽然对于少量数据来说这并不重要，但是随着数据集超过几千个点，`plt.plot`比`plt.scatter`效率显著更高。原因在于，`plt.scatter`可以为每个点渲染不同的大小和/或颜色，因此渲染器必须额外工作来构建每个点。而对于`plt.plot`，每个点的标记是相同的，因此确定点的外观的工作仅需一次处理整个数据集。对于大数据集，这种差异可能导致性能大不相同，因此在处理大数据集时，应优先选择`plt.plot`而不是`plt.scatter`。
- en: Visualizing Uncertainties
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化不确定性
- en: 'For any scientific measurement, accurate accounting of uncertainties is nearly
    as important, if not more so, as accurate reporting of the number itself. For
    example, imagine that I am using some astrophysical observations to estimate the
    Hubble Constant, the local measurement of the expansion rate of the Universe.
    I know that the current literature suggests a value of around 70 (km/s)/Mpc, and
    I measure a value of 74 (km/s)/Mpc with my method. Are the values consistent?
    The only correct answer, given this information, is this: there is no way to know.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何科学测量，准确地考虑不确定性几乎与准确报告数字本身同样重要，甚至更重要。例如，想象我正在使用一些天体物理观测来估计哈勃常数，即宇宙膨胀速率的本地测量。我知道当前文献建议的值约为
    70 (km/s)/Mpc，而我的方法测量的值为 74 (km/s)/Mpc。这些值是否一致？基于这些信息，唯一正确的答案是：没有办法知道。
- en: 'Suppose I augment this information with reported uncertainties: the current
    literature suggests a value of 70 ± 2.5 (km/s)/Mpc, and my method has measured
    a value of 74 ± 5 (km/s)/Mpc. Now are the values consistent? That is a question
    that can be quantitatively answered.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我将这些信息与报告的不确定性一起增加：当前文献建议的值为 70 ± 2.5 (km/s)/Mpc，而我的方法测量的值为 74 ± 5 (km/s)/Mpc。现在这些值是否一致？这是一个可以定量回答的问题。
- en: In visualization of data and results, showing these errors effectively can make
    a plot convey much more complete information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Basic Errorbars
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One standard way to visualize uncertainties is using an errorbar. A basic errorbar
    can be created with a single Matplotlib function call, as shown in [Figure 27-8](#fig_0403-errorbars_files_in_output_4_0).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here the `fmt` is a format code controlling the appearance of lines and points,
    and it has the same syntax as the shorthand used in `plt.plot`, outlined in the
    previous chapter and earlier in this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![output 4 0](assets/output_4_0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Figure 27-8\. An errorbar example
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In addition to these basic options, the `errorbar` function has many options
    to fine-tune the outputs. Using these additional options you can easily customize
    the aesthetics of your errorbar plot. I often find it helpful, especially in crowded
    plots, to make the errorbars lighter than the points themselves (see [Figure 27-9](#fig_0403-errorbars_files_in_output_6_0)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![output 6 0](assets/output_6_0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Figure 27-9\. Customizing errorbars
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In addition to these options, you can also specify horizontal errorbars, one-sided
    errorbars, and many other variants. For more information on the options available,
    refer to the docstring of `plt.errorbar`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Errors
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some situations it is desirable to show errorbars on continuous quantities.
    Though Matplotlib does not have a built-in convenience routine for this type of
    application, it’s relatively easy to combine primitives like `plt.plot` and `plt.fill_between`
    for a useful result.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we’ll perform a simple *Gaussian process regression*, using the Scikit-Learn
    API (see [Chapter 38](ch38.xhtml#section-0502-introducing-scikit-learn) for details).
    This is a method of fitting a very flexible nonparametric function to data with
    a continuous measure of the uncertainty. We won’t delve into the details of Gaussian
    process regression at this point, but will focus instead on how you might visualize
    such a continuous error measurement:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We now have `xfit`, `yfit`, and `dyfit`, which sample the continuous fit to
    our data. We could pass these to the `plt.errorbar` function as in the previous
    section, but we don’t really want to plot 1,000 points with 1,000 errorbars. Instead,
    we can use the `plt.fill_between` function with a light color to visualize this
    continuous error (see [Figure 27-10](#fig_0403-errorbars_files_in_output_11_0)).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![output 11 0](assets/output_11_0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Figure 27-10\. Representing continuous uncertainty with filled regions
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Take a look at the `fill_between` call signature: we pass an x value, then
    the lower *y*-bound, then the upper *y*-bound, and the result is that the area
    between these regions is filled.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting figure gives an intuitive view into what the Gaussian process
    regression algorithm is doing: in regions near a measured data point, the model
    is strongly constrained, and this is reflected in the small model uncertainties.
    In regions far from a measured data point, the model is not strongly constrained,
    and the model uncertainties increase.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 得到的图形直观地展示了高斯过程回归算法的运行情况：在接近测量数据点的区域，模型受到强约束，这反映在较小的模型不确定性中。在远离测量数据点的区域，模型约束不强，模型不确定性增加。
- en: For more information on the options available in `plt.fill_between` (and the
    closely related `plt.fill` function), see the function docstring or Matplotlib
    documentation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于`plt.fill_between`（及其紧密相关的`plt.fill`函数）可用选项的信息，请参阅函数文档字符串或Matplotlib文档。
- en: Finally, if this seems a bit too low-level for your taste, refer to [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn),
    where we discuss the Seaborn package, which has a more streamlined API for visualizing
    this type of continuous errorbar.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果这对你来说有点太低级了，请参考[第36章](ch36.xhtml#section-0414-visualization-with-seaborn)，在那里我们讨论了Seaborn包，它具有更简化的API来可视化这种连续误差条类型。
- en: ^([1](ch27.xhtml#idm45858760750032-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch27.xhtml#idm45858760750032-marker)) 这幅图的全彩版可在[GitHub](https://oreil.ly/PDSH_GitHub)上找到。
