- en: 'Chapter 15\. Seqmagique: Creating and Formatting Reports'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。Seqmagique：创建和格式化报告
- en: Often in bioinformatics projects, you’ll find yourself staring at a directory
    full of sequence files, probably in FASTA or FASTQ format. You’ll probably want
    to start by getting an idea of the distribution of sequences in the files, such
    as how many are in each file and the average, minimum, and maximum lengths of
    the sequences. You need to know if any files are corrupted—maybe they didn’t transfer
    completely from your sequencing center—or if any samples have far fewer reads,
    perhaps indicating a bad sequencing run that needs to be redone. In this chapter,
    I’ll introduce some techniques for checking your sequence files using hashes and
    the [Seqmagick tool](https://oreil.ly/VI9gr). Then I’ll write a small utility
    to mimic part of Seqmagick to illustrate how to create formatted text tables.
    This program serves as a template for any program that needs to process all the
    records in a given set of files and produce a table of summary statistics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在生物信息学项目中，你经常会发现自己盯着一个目录，里面充满了序列文件，通常是 FASTA 或 FASTQ 格式。你可能希望首先了解文件中序列的分布情况，例如每个文件中有多少序列以及序列的平均长度、最小长度和最大长度。你需要知道是否有任何文件损坏了，也许它们从测序中心传输时没有完全完成，或者是否有任何样本读数远低，可能表明需要重新进行糟糕的测序运行。在本章中，我将介绍使用哈希检查序列文件的一些技术，并编写一个小型实用程序来模拟
    Seqmagick 的部分功能，以说明如何创建格式化的文本表格。这个程序可以作为处理给定文件集中所有记录并生成汇总统计表格的任何程序的模板。
- en: 'You will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学到：
- en: How to install the `seqmagick` tool
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装 `seqmagick` 工具
- en: How to use MD5 hashes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 MD5 哈希
- en: How to use `choices` in `argparse` to constrain arguments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 `argparse` 中使用 `choices` 限制参数
- en: How to use the `numpy` module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `numpy` 模块
- en: How to mock a filehandle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何模拟文件句柄
- en: How to use the `tabulate` and `rich` modules to format output tables
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `tabulate` 和 `rich` 模块来格式化输出表格
- en: Using Seqmagick to Analyze Sequence Files
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Seqmagick 分析序列文件
- en: '`seqmagick` is a useful command-line utility for handling sequence files. This
    should have been installed along with the other Python modules if you followed
    the setup instructions in the Preface. If not, you can install it with `pip`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`seqmagick` 是一个处理序列文件的实用命令行工具。如果按照前言中的设置说明进行安装，它应该已经和其他 Python 模块一起安装好了。如果没有安装，你可以使用
    `pip` 安装它：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you run **`seqmagick --help`**, you’ll see the tool offers many options.
    I only want to focus on the `info` subcommand. I can run this on the test input
    FASTA files in the *15_seqmagique* directory like so:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行 **`seqmagick --help`**，你会看到这个工具提供了许多选项。我只想关注 `info` 子命令。我可以在 *15_seqmagique*
    目录中的测试输入 FASTA 文件上运行它，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this exercise, you will create a program called `seqmagique.py` (this should
    be pronounced with an exaggerated French accent) that will mimic this output.
    The point of the program is to provide a basic overview of the sequences in a
    given set of files so you can spot, for instance, a truncated or corrupted file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将创建一个名为 `seqmagique.py` 的程序（应该用夸张的法语口音发音），它将模拟这个输出。该程序的目的是提供给定文件集中序列的基本概述，以便你可以发现例如截断或损坏的文件。
- en: 'Start by copying the solution to `seqmagique.py` and requesting the usage:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将解决方案复制到 `seqmagique.py` 并请求使用说明：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO1-1)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO1-1)'
- en: The program accepts one or more input files which should be in FASTA format.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 程序接受一个或多个应该是 FASTA 格式的输入文件。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO1-2)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO1-2)'
- en: This option controls the format of the output table.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项控制输出表格的格式。
- en: 'Run this program on the same files and note that the output is almost identical,
    except that I have omitted the `alignment` column:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的文件上运行这个程序，并注意输出几乎相同，只是省略了 `alignment` 列：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `--tablefmt` option controls how the output table is formatted. This is
    the first program you’ll write that constrains the value to a given list. To see
    this in action, use a bogus value like `blargh`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`--tablefmt` 选项控制输出表格的格式。这是你将编写的第一个程序，它限制了给定列表中的值。要看看它如何运行，请使用一个像 `blargh`
    这样的虚假值：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then try a different table format, such as `simple`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试不同的表格格式，例如 `simple`：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the program with other table styles and then try the test suite. Next, I’ll
    talk about getting data for our program to analyze.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序与其他表格样式，然后尝试测试套件。接下来，我将讨论如何获取我们程序分析的数据。
- en: Checking Files Using MD5 Hashes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MD5 哈希检查文件
- en: The first step in most genomics projects will be transferring sequence files
    to some location where you can analyze them, and the first line of defense against
    data corruption is ensuring that the files were copied completely. The source
    of the files may be a sequencing center or a public repository like [GenBank](https://oreil.ly/2eaMj)
    or the [Sequence Read Archive (SRA)](https://oreil.ly/kGNCv). The files may arrive
    on a thumb drive, or you may download them from the internet. If the latter, you
    may find that your connection drops, causing some files to be truncated or corrupted.
    How can you find these types of errors?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数基因组学项目的第一步将是将序列文件传输到某个可以分析它们的位置，并且防止数据损坏的第一道防线是确保文件完整复制。文件的来源可能是测序中心或像[GenBank](https://oreil.ly/2eaMj)或[Sequence
    Read Archive (SRA)](https://oreil.ly/kGNCv)这样的公共存储库。文件可能会通过存储卡送达，或者你可以从互联网下载它们。如果是后者，你可能会发现你的连接中断，导致一些文件被截断或损坏。如何找到这些类型的错误？
- en: One way to check that your files are complete is to compare the file sizes locally
    with those on the server. For instance, you can use the **`ls -l`** command to
    view the *long* listing of files where the file size, in bytes, is shown. For
    large sequence files, this is going to be a very large number, and you will have
    to manually compare the file sizes from the source to the destination, which is
    tedious and prone to error.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个检查文件完整性的方法是在本地与服务器上的文件大小进行比较。例如，你可以使用**`ls -l`**命令查看文件的*长*列表，其中显示以字节为单位的文件大小。对于大型序列文件，这将是一个非常大的数字，你将不得不手动比较源和目的地的文件大小，这很繁琐且容易出错。
- en: Another technique involves using a *hash* or *message digest* of the file, which
    is a signature of the file’s contents generated by a one-way cryptographic algorithm
    that creates a unique output for every possible input. Although there are many
    tools you can use to create a hash, I’ll focus on tools that use the MD5 algorithm.
    This algorithm was originally developed in the context of cryptography and security,
    but researchers have since identified numerous flaws that now make it suitable
    only for purposes such as verifying data integrity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种技术涉及使用文件的*哈希*或*消息摘要*，这是由一种单向加密算法生成的文件内容签名，为每个可能的输入创建唯一的输出。尽管有许多工具可以用来创建哈希，我将专注于使用
    MD5 算法的工具。这种算法最初是在密码学和安全领域开发的，但研究人员后来发现了许多缺陷，现在只适合用于验证数据完整性等目的。
- en: 'On macOS, I can use **`md5`** to generate a 128-bit hash value from the contents
    of the first test input file, like so:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，我可以使用**`md5`**来从第一个测试输入文件的内容生成一个 128 位的哈希值，如下所示：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I can also use **`openssl`**:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以使用**`openssl`**：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On Linux, I use **`md5sum`**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，我使用**`md5sum`**：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, no matter the tool or platform, the hash value is the same
    for the same input file. If I change even one bit of the input file, a different
    hash value will be generated. Conversely, if I find another file that generates
    the same hash value, then the contents of the two files are identical. For instance,
    the *empty.fa* file is a zero-length file I created for testing, and it has the
    following hash value:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，无论是什么工具或平台，对于相同的输入文件，哈希值都是相同的。如果我改变输入文件的任何一个比特，将会生成一个不同的哈希值。相反地，如果我找到另一个生成相同哈希值的文件，那么这两个文件的内容是相同的。例如，*empty.fa*
    文件是我为测试创建的一个零长度文件，它具有以下哈希值：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If I use the **`touch foo`** command to create another empty file, I’ll find
    it has the same signature:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我使用**`touch foo`**命令创建另一个空文件，我会发现它具有相同的签名：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It’s common for data providers to create a file of the checksums so that you
    can verify that your copies of the data are complete. I created a *tests/inputs/checksums.md5*
    like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据提供者通常会创建一个校验和文件，以便你可以验证数据的完整性。我创建了一个*tests/inputs/checksums.md5*如下所示：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It has the following contents:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下内容：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `md5sum` tool has a `--check` option that I can use to automatically verify
    that the files match the checksums found in a given file. The macOS `md5` tool
    does not have an option for this, but you can use **`brew install md5sha1sum`**
    to install an equivalent `md5sum` tool that can do this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`md5sum`工具有一个`--check`选项，我可以使用它来自动验证文件与给定文件中的校验和是否匹配。macOS 的`md5`工具没有这个选项，但你可以使用**`brew
    install md5sha1sum`**来安装一个等效的`md5sum`工具来实现这个功能。'
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: MD5 checksums present more complete and easier ways to verify data integrity
    than manually checking file sizes. Although file digests are not directly part
    of this exercise, I feel it’s important to understand how to verify that you have
    complete and uncorrupted data before beginning any analyses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: MD5校验和提供了比手动检查文件大小更完整和更简便的数据完整性验证方式。虽然文件摘要不直接属于本练习的一部分，但在开始任何分析之前了解如何验证数据的完整性和未损坏性非常重要。
- en: Getting Started
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'You should work in the *15_seqmagique* directory for this exercise. I’ll start
    the program as usual:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在*15_seqmagique*目录下进行此练习。我将像往常一样启动程序：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'First I need to make the program accept one or more text files as positional
    parameters. I also want to create an option to control the output table format.
    Here is the code for that:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要使程序接受一个或多个文本文件作为位置参数。我还想创建一个选项来控制输出表格的格式。以下是相应的代码：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO2-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO2-1)'
- en: Define a positional parameter for one or more readable text files.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为一个或多个可读文本文件定义一个位置参数。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO2-2)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO2-2)'
- en: Define an option that uses `choices` to constrain the argument to a value in
    the list, making sure to define a reasonable `default` value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个选项，使用`choices`来限制参数为列表中的值，确保定义一个合理的`default`值。
- en: Using `choices` for the `--tablefmt` really saves you quite a bit of work in
    validating user input. As shown in [“Using Seqmagick to Analyze Sequence Files”](#UsingSeqmagick),
    a bad value for the table format option will trigger a useful error message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`choices`选项来控制`--tablefmt`参数确实可以大大减少验证用户输入的工作量。如在[“使用Seqmagick分析序列文件”](#UsingSeqmagick)，对于表格格式选项的错误值会触发有用的错误消息。
- en: 'Modify the `main()` function to print the input filenames:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`main()`函数以打印输入文件名：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And verify that this works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 并验证这是否有效：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The goal is to iterate through each file and print the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是遍历每个文件并打印以下内容：
- en: '`name`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`'
- en: The filename
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名
- en: '`min_len`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`min_len`'
- en: The length of the shortest sequence
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最短序列的长度
- en: '`max_len`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`max_len`'
- en: The length of the longest sequence
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最长序列的长度
- en: '`avg_len`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`avg_len`'
- en: The average/mean length of all the sequences
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有序列的平均/均值长度
- en: '`num_seqs`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`num_seqs`'
- en: The number of sequences
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的数量
- en: 'If you would like to have some real input files for the program, you can use
    the [`fastq-dump` tool](https://oreil.ly/Vmb0w) from NCBI to download sequences
    from the study [“Planktonic Microbial Communities from North Pacific Subtropical
    Gyre”](https://oreil.ly/aAGUA):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为程序准备一些真实的输入文件，可以使用[`fastq-dump`工具](https://oreil.ly/Vmb0w)从NCBI下载来自研究[“北太平洋亚热带环流中的浮游微生物群落”](https://oreil.ly/aAGUA)的序列：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO3-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO3-1)'
- en: The `--split-3` option will ensure that paired-end reads are correctly split
    into forward/reverse/unpaired reads. The `SAMN00000013` string is the accession
    of [one of the samples](https://oreil.ly/kBCQU) from the experiment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`--split-3`选项将确保成对端读取正确分割为正向/反向/未配对的读取。`SAMN00000013`字符串是实验中[一个样本](https://oreil.ly/kBCQU)的访问号。'
- en: Formatting Text Tables Using tabulate()
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用tabulate()格式化文本表格
- en: 'The output of the program will be a text table formatted using the `tabulate()`
    function from that module. Be sure to read the documentation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出将是使用该模块的`tabulate()`函数格式化的文本表格。确保阅读文档：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I need to define the headers for the table, and I decided to use the same ones
    as Seqmagick (minus the `alignment` column):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要为表格定义标题，并决定使用与Seqmagick相同的标题（减去`alignment`列）：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The first test file, *tests/inputs/1.fa*, has just one sequence of 50 bases,
    so the columns for this are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试文件*tests/inputs/1.fa*只有一个长度为50的序列，因此其列如下：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The second test file, *tests/inputs/2.fa*, has five sequences ranging from
    49 bases to 79 with an average length of 64 bases:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个测试文件*tests/inputs/2.fa*有五个序列，长度从49个碱基到79个碱基，平均长度为64个碱基：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `tabulate()` function expects the table data to be passed positionally
    as a list of lists, and I can specify the `headers` as a keyword argument:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabulate()`函数期望将表格数据作为一个列表的列表按位置传递，并且可以指定`headers`作为关键字参数：'
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Alternatively, I can place the headers as the first row of data and indicate
    this is the location of the headers:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我可以将标题放在数据的第一行，并指示这是标题的位置：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Note that the default table style for the `tabulate()` function is `simple`,
    but the `plain` format is what I need to match Seqmagick’s output. I can set this
    with the `tablefmt` option:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`tabulate()` 函数的默认表格样式是 `simple`，但我需要匹配 Seqmagick 的输出格式，所以我可以使用 `tablefmt`
    选项设置为 `plain`：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'One other thing to note is that the values in the `avg_len` column are being
    shown as integers but should be formatted as floating-point numbers to two decimal
    places. The `floatfmt` option controls this, using syntax similar to the f-string
    number formatting I’ve shown before:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点需要注意的是，`avg_len` 列中的值显示为整数，但应格式化为两位小数的浮点数。`floatfmt` 选项控制这一点，使用类似于我之前展示过的
    f-string 数字格式化的语法：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Your job is to process all the sequences in each file to find the statistics
    and print the final table. This should be enough for you to solve the problem.
    Don’t read ahead until you can pass all the tests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你的任务是处理每个文件中的所有序列，找到统计数据并打印最终表格。这应该足以帮助你解决问题。在能够通过所有测试之前，请不要提前阅读。
- en: Solutions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: I’ll present two solutions that both show the file statistics but differ in
    the formatting of the output. The first solution uses the `tabulate()` function
    to create an ASCII text table and the second uses the `rich` module to create
    a fancier table sure to impress your labmates and principal investigator (PI).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示两种解决方案，它们都显示文件统计信息，但输出格式不同。第一个解决方案使用 `tabulate()` 函数创建 ASCII 文本表格，第二个使用
    `rich` 模块创建更精美的表格，可以让你的实验室同事和主要研究员（PI）印象深刻。
- en: 'Solution 1: Formatting with tabulate()'
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 1：使用 tabulate() 进行格式化
- en: For my solution, I first decided to write a `process()` function that would
    handle each input file. Whenever I approach a problem that needs to handle some
    list of items, I prefer to focus on how to handle just one of the items. That
    is, rather than trying to find all the statistics for all the files, I first want
    to figure out how to find this information for just one file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的解决方案，我首先决定编写一个 `process()` 函数来处理每个输入文件。每当我面对需要处理某些列表项的问题时，我更喜欢专注于如何处理其中的一个项。也就是说，我不是试图找出所有文件的所有统计信息，而是首先想弄清楚如何找到一个文件的信息。
- en: 'My function needs to return the filename and the four metrics: minimum/maximum/average
    sequence lengths, plus the number of sequences. Just as with the `Args` class,
    I like to create a type based on a `NamedTuple` for this so that I have a statically
    typed data structure that `mypy` can validate:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我的函数需要返回文件名和四个指标：最小值、最大值、平均序列长度以及序列数。就像 `Args` 类一样，我喜欢为此创建一个基于 `NamedTuple`
    的类型，这样我就可以拥有一个静态类型的数据结构，可以由 `mypy` 进行验证：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now I can define a function that returns this data structure. Note that I’m
    using the `numpy.mean()` function to get the average length. The `numpy` module
    offers many powerful mathematical operations to handle numeric data and is especially
    useful for multidimensional arrays and linear algebra functions. When importing
    the dependencies, it’s common to import the `numpy` module with the alias `np`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以定义一个函数来返回这个数据结构。请注意，我使用 `numpy.mean()` 函数来获取平均长度。`numpy` 模块提供了许多强大的数学操作来处理数值数据，特别适用于多维数组和线性代数函数。在导入依赖项时，通常使用
    `np` 别名导入 `numpy` 模块：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can run **`help(np)`** in the REPL to read the documentation. Here’s how
    I wrote this function:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 REPL 中运行 **`help(np)`** 可以查看文档。这是我编写此函数的方式：
- en: '[PRE29]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-1)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-1)'
- en: The function accepts a filehandle and returns a `FastaInfo` object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个文件句柄，并返回一个 `FastaInfo` 对象。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-2)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-2)'
- en: Use a list comprehension to read all the sequences from the filehandle. Use
    the `len()` function to return the length of each sequence.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导式从文件句柄中读取所有序列。使用 `len()` 函数返回每个序列的长度。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-3)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-3)'
- en: The name of the file is available through the `fh.name` attribute.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的名称可以通过 `fh.name` 属性获得。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-4)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-4)'
- en: The `min()` function will return the minimum value.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()`函数将返回最小值。'
- en: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-5)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-5)'
- en: The `max()` function will return the maximum value.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()`函数将返回最大值。'
- en: '[![6](assets/6.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-6)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-6)'
- en: The `np.mean()` function will return the mean from a list of values. The `round()`
    function is used to round this floating-point value to two significant digits.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.mean()`函数将返回值列表的平均值。`round()`函数用于将此浮点值四舍五入为两位有效数字。'
- en: '[![7](assets/7.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-7)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-7)'
- en: The number of sequences is the length of the list.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 序列的数量是列表的长度。
- en: '[![8](assets/8.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-8)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO4-8)'
- en: If there are no sequences, return zeros for all the values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有序列，对所有值返回零。
- en: As always, I want to write a unit test for this. While it’s true that the integration
    tests I wrote cover this part of the program, I want to show how you can write
    a unit test for a function that reads a file. Rather than relying on actual files,
    I’ll create a *mock* or fake filehandle.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时，我都想为此编写一个单元测试。尽管我编写的集成测试覆盖了程序的这部分，但我想展示如何编写一个读取文件的函数的单元测试。而不是依赖实际文件，我将创建一个*模拟*或假文件句柄。
- en: 'The first test file looks like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试文件如下所示：
- en: '[PRE30]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'I can use the `io.StringIO()` function to create an object that behaves like
    a filehandle:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以使用`io.StringIO()`函数创建一个类似文件句柄的对象：
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-1)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-1)'
- en: This is the data from the first input file.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自第一个输入文件的数据。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-2)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-2)'
- en: Create a mock filehandle.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个模拟文件句柄。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-3)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-3)'
- en: Iterate through the lines of the mock filehandle.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历模拟文件句柄的各行。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-4)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO5-4)'
- en: Print the line which has a newline (`\n`), so use `end=''` to leave off an additional
    newline.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 打印具有换行符（`\n`）的行，因此使用`end=''`以避免额外的换行符。
- en: 'There’s a slight problem, though, because the `process()` function calls the
    `fh.name` attribute to get the input filename, which will raise an exception:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，有一个小问题，因为`process()`函数调用`fh.name`属性以获取输入文件名，这将引发异常：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Luckily, there’s another way to create a mock filehandle using Python’s standard
    `unittest` module. While I favor the `pytest` module for almost everything I write,
    the `unittest` module has been around for a long time and is another capable framework
    for writing and running tests. In this case, I need to import the [`uni⁠t​test.mock.mock_open()`
    function.](https://oreil.ly/EGvXh) Here is how I can create a mock filehandle
    with the data from the first test file. I use `read_data` to define the data that
    will be returned by the `fh.read()` method:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，还有另一种方法可以使用Python的标准`unittest`模块创建模拟文件句柄。虽然我几乎在所有写作中更喜欢使用`pytest`模块，但`unittest`模块已存在很长时间，是另一个能够编写和运行测试的功能强大的框架。在这种情况下，我需要导入[`uni⁠t​test.mock.mock_open()`函数。](https://oreil.ly/EGvXh)这是我如何使用来自第一个测试文件的数据创建模拟文件句柄。我使用`read_data`来定义将由`fh.read()`方法返回的数据：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the context of testing, I don’t care about the filename, only that this
    returns a string and does not throw an exception:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试的上下文中，我不关心文件名，只要它返回一个字符串且不抛出异常即可：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'While I often place my unit tests in the same modules as the functions they
    test, in this instance, I’d rather put this into a separate `unit.py` module to
    keep the main program shorter. I wrote the test to handle an empty file, a file
    with one sequence, and a file with more than one sequence (which are also reflected
    in the three input test files). Presumably, if the function works for these three
    cases, it should work for all others:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我经常将单元测试放在与它们测试的函数相同的模块中，但在这种情况下，我更愿意将其放在一个单独的`unit.py`模块中，以使主程序更短。我编写了测试来处理一个空文件，一个带有一个序列的文件和一个带有多个序列的文件（这也反映在三个输入测试文件中）。假设如果函数对这三种情况有效，则对于所有其他情况都应有效：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-1)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-1)'
- en: Import the `mock_open()` function.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`mock_open()`函数。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-2)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-2)'
- en: Import the `process()` function I’m testing.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 导入我正在测试的`process()`函数。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-3)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-3)'
- en: A mock empty filehandle that should have zeros for all the values.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一个模拟空文件句柄，所有值应该为零。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-4)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-4)'
- en: A single sequence with three bases.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有三个碱基的单一序列。
- en: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-5)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO6-5)'
- en: A filehandle with two sequences of three and four bases.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有两个序列的文件句柄，一个有三个碱基，一个有四个碱基。
- en: 'Use **`pytest`** to run the tests:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**`pytest`**运行测试：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is how I use my `process()` function in `main()`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我如何在`main()`中使用我的`process()`函数的方法：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-1)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-1)'
- en: Process all the input files into a list of `FastaInfo` objects (tuples).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有输入文件处理成一个`FastaInfo`对象（元组）列表。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-2)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-2)'
- en: Define the table headers.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 定义表头。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-3)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO7-3)'
- en: Use the `tabulate()` function to print a formatted output table.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tabulate()`函数打印格式化的输出表格。
- en: 'To test this program, I run it with the following inputs:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个程序，我使用以下输入来运行它：
- en: The empty file
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空文件
- en: The file with one sequence
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有一个序列的文件
- en: The file with two sequences
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有两个序列的文件
- en: All the input files
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有输入文件
- en: To start, I run all these with the default table style. Then I need to verify
    that all 10 of the table styles are created correctly. Combining all the possible
    test inputs with all the table styles creates a high degree of *cyclomatic complexity*—the
    number of different ways that parameters can be combined.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我使用默认表格样式运行所有这些。然后我需要验证所有10个表格样式是否正确创建。将所有可能的测试输入与所有表格样式结合起来会产生很高的*圈复杂度*——参数可以组合的不同方式的数量。
- en: 'To test this, I first need to manually verify that my program is working correctly.
    Then I need to generate sample outputs for each of the combinations I intend to
    test. I wrote the following `bash` script to create an *out* file for a given
    combination of an input file and possibly a table style:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试这个，我首先需要手动验证我的程序是否正确运行。然后我需要为我打算测试的每个组合生成样本输出。我编写了以下`bash`脚本来为给定的输入文件和可能的表格样式创建一个*out*文件：
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-1)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-1)'
- en: The program being tested.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正在测试的程序。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-2)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-2)'
- en: The directory for the input files.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件的目录。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-3)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-3)'
- en: The input files.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-4)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-4)'
- en: Run the program using the three input files and the default table style.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用三个输入文件和默认的表格样式运行程序。
- en: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-5)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO8-5)'
- en: Run the program with two of the input files and all the table styles.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个输入文件和所有表格样式运行程序。
- en: 'The tests in *tests/seqmagique_test.py* will run the program with a given file
    and will compare the output to one of the *out* files in the *tests/inputs* directory.
    At the top of this module, I define the input and output files like so:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在*tests/seqmagique_test.py*中的测试将使用给定文件运行程序，并将输出与*tests/inputs*目录中的*out*文件之一进行比较。在此模块的顶部，我定义了输入和输出文件，如下所示：
- en: '[PRE39]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'I define a `run()` function in the module to run the program with the input
    file and compare the actual output to the expected output. This is a basic pattern
    you could copy for testing any program’s output:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我在模块中定义了一个`run()`函数，用于使用输入文件运行程序，并将实际输出与预期输出进行比较。这是一个基本模式，你可以用来测试任何程序的输出：
- en: '[PRE40]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-1)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-1)'
- en: Read the expected output from the file.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中读取预期的输出。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-2)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-2)'
- en: Run the program with the given input file using the default table style.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的表格样式运行给定的输入文件。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-3)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-3)'
- en: Check that the return value is `0`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 检查返回值是否为`0`。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-4)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO9-4)'
- en: Check that the output was the expected value.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 检查输出是否符合预期值。
- en: 'I use it like so:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我是这样使用它的：
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO10-1)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO10-1)'
- en: Splat the tuple to pass the two values positionally to the `run()` function.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将元组展开以将两个值按位置传递给`run()`函数。
- en: 'The test suite also checks the table styles:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件还检查表格样式：
- en: '[PRE42]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-1)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-1)'
- en: Define a list of all possible styles.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个包含所有可能样式的列表。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-2)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-2)'
- en: Use the two nonempty files.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个非空文件。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-3)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-3)'
- en: Iterate through each style.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历每种样式。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-4)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-4)'
- en: The output file is the name of the input file plus the style and the extension
    *.out*.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出文件是输入文件名加上样式和扩展名*.out*。
- en: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-5)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-5)'
- en: Check that the file exists.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 检查文件是否存在。
- en: '[![6](assets/6.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-6)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-6)'
- en: Read the expected value from the file.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中读取预期值。
- en: '[![7](assets/7.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-7)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-7)'
- en: Randomly choose the short or long flag to test.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 随机选择短或长标志进行测试。
- en: '[![8](assets/8.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-8)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-8)'
- en: Run the program with the flag option, style, and file.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标志选项、样式和文件运行程序。
- en: '[![9](assets/9.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-9)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO11-9)'
- en: Ensure that the program ran without error and produces the correct output.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 确保程序无错误运行，并生成正确的输出。
- en: If I make a change such that the program no longer creates the same output as
    before, these tests should catch it. This is a *regression* test, where I am comparing
    how a program works now to how it previously worked. That is, a failure to produce
    the same output would be considered a regression. While my test suite isn’t completely
    exhaustive, it covers enough combinations that I feel confident the program is
    correct.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我做了改动以致于程序不再创建与之前相同的输出，这些测试应该能够捕捉到。这是一种*回归*测试，我正在比较程序现在的工作方式与之前的工作方式。也就是说，无法生成相同输出将被视为一种回归。虽然我的测试套件并非完全详尽，但它涵盖了足够多的组合，我对程序的正确性感到有信心。
- en: 'Solution 2: Formatting with rich'
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 2：使用 rich 进行格式化
- en: In this second solution I want to show a different way to create the output
    table, using the `rich` module to track the processing of the input files and
    make a fancier output table. [Figure 15-1](#fig_15.1) shows how the output looks.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第二个解决方案中，我想展示另一种创建输出表格的方法，使用 `rich` 模块来跟踪输入文件的处理并创建一个更漂亮的输出表格。[图 15-1](#fig_15.1)
    展示了输出的外观。
- en: '![mpfb 1501](assets/mpfb_1501.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1501](assets/mpfb_1501.png)'
- en: Figure 15-1\. The progress indicator and output table using the `rich` module
    are fancier
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 15-1\. 使用 `rich` 模块的进度指示器和输出表格更加华丽
- en: 'I still process the files in the same way, so the only difference is in creating
    the output. I first need to import the needed functions:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然以相同的方式处理文件，所不同的只是创建输出的方式。我首先需要导入所需的函数：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Here is how I use these:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我使用它们的方式：
- en: '[PRE44]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-1)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-1)'
- en: Create the table to hold the data. The Name column is a standard, left-justified
    string field. All the others need to be right-justified and require a custom `Column`
    object.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表格来保存数据。名称列是一个标准的左对齐字符串字段。所有其他列都需要右对齐，并需要一个自定义的 `Column` 对象。
- en: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-2)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-2)'
- en: Iterate through each filehandle using the `track()` function to create a progress
    bar for the user.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `track()` 函数迭代每个文件句柄，为用户创建进度条。
- en: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-3)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-3)'
- en: Process the file to get the statistics.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 处理文件以获取统计信息。
- en: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-4)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-4)'
- en: Add the file’s statistics to the table. Note that all the values must be strings.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件的统计信息添加到表格中。注意，所有值必须是字符串。
- en: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-5)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_seqmagique__creating__span_class__keep_together__and_formatting_reports__span__CO12-5)'
- en: Create a `Console` object, and use it to print the output.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `Console` 对象，并用它来打印输出。
- en: Going Further
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更进一步
- en: The `seqmagick` tool has many other useful options. Implement your own versions
    of as many as you can.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`seqmagick` 工具还有许多其他有用的选项。尽量实现您能实现的所有版本。'
- en: Review
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: 'Key points from this chapter:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要点：
- en: The `seqmagick` tool provides many ways to examine sequence files.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seqmagick` 工具提供了许多检查序列文件的方法。'
- en: There are many ways to verify that your input files are complete and not corrupted,
    from examining file sizes to using message digests such as MD5 hashes.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有许多方法可以验证您的输入文件是否完整且未损坏，从检查文件大小到使用 MD5 哈希等消息摘要。
- en: The `choices` option for `argparse` parameters will force the user to select
    a value from a given list.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argparse` 参数的 `choices` 选项将强制用户从给定列表中选择一个值。'
- en: The `tabulate` and `rich` modules can create text tables of data.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tabulate` 和 `rich` 模块可以创建数据的文本表格。'
- en: The `numpy` module is useful for many mathematical operations.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`numpy` 模块对许多数学操作都很有用。'
- en: The `io.StringIO()` and `unittest.mock.mock_open()` functions offer two ways
    to mock a filehandle for testing.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`io.StringIO()` 和 `unittest.mock.mock_open()` 函数提供了两种模拟文件句柄进行测试的方法。'
- en: Regression testing verifies that a program continues to work as it did before.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归测试验证程序继续像之前一样工作。
