["```py\nIn [1]: %matplotlib inline\n        import matplotlib.pyplot as plt\n        import seaborn as sns\n        import numpy as np\n        import pandas as pd\n\n        sns.set()  # seaborn's method to set its chart style\n```", "```py\nIn [2]: data = np.random.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)\n        data = pd.DataFrame(data, columns=['x', 'y'])\n\n        for col in 'xy':\n            plt.hist(data[col], density=True, alpha=0.5)\n```", "```py\nIn [3]: sns.kdeplot(data=data, shade=True);\n```", "```py\nIn [4]: sns.kdeplot(data=data, x='x', y='y');\n```", "```py\nIn [5]: iris = sns.load_dataset(\"iris\")\n        iris.head()\nOut[5]:    sepal_length  sepal_width  petal_length  petal_width species\n        0           5.1          3.5           1.4          0.2  setosa\n        1           4.9          3.0           1.4          0.2  setosa\n        2           4.7          3.2           1.3          0.2  setosa\n        3           4.6          3.1           1.5          0.2  setosa\n        4           5.0          3.6           1.4          0.2  setosa\n```", "```py\nIn [6]: sns.pairplot(iris, hue='species', height=2.5);\n```", "```py\nIn [7]: tips = sns.load_dataset('tips')\n        tips.head()\nOut[7]:    total_bill   tip     sex smoker  day    time  size\n        0       16.99  1.01  Female     No  Sun  Dinner     2\n        1       10.34  1.66    Male     No  Sun  Dinner     3\n        2       21.01  3.50    Male     No  Sun  Dinner     3\n        3       23.68  3.31    Male     No  Sun  Dinner     2\n        4       24.59  3.61  Female     No  Sun  Dinner     4\n```", "```py\nIn [8]: tips['tip_pct'] = 100 * tips['tip'] / tips['total_bill']\n\n        grid = sns.FacetGrid(tips, row=\"sex\", col=\"time\", margin_titles=True)\n        grid.map(plt.hist, \"tip_pct\", bins=np.linspace(0, 40, 15));\n```", "```py\nIn [9]: with sns.axes_style(style='ticks'):\n            g = sns.catplot(x=\"day\", y=\"total_bill\", hue=\"sex\",\n                            data=tips, kind=\"box\")\n            g.set_axis_labels(\"Day\", \"Total Bill\");\n```", "```py\nIn [10]: with sns.axes_style('white'):\n             sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='hex')\n```", "```py\nIn [11]: sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind='reg');\n```", "```py\nIn [12]: planets = sns.load_dataset('planets')\n         planets.head()\nOut[12]:             method  number  orbital_period   mass  distance  year\n         0  Radial Velocity       1         269.300   7.10     77.40  2006\n         1  Radial Velocity       1         874.774   2.21     56.95  2008\n         2  Radial Velocity       1         763.000   2.60     19.84  2011\n         3  Radial Velocity       1         326.030  19.40    110.62  2007\n         4  Radial Velocity       1         516.220  10.50    119.47  2009\n```", "```py\nIn [13]: with sns.axes_style('white'):\n             g = sns.catplot(x=\"year\", data=planets, aspect=2,\n                             kind=\"count\", color='steelblue')\n             g.set_xticklabels(step=5)\n```", "```py\nIn [14]: with sns.axes_style('white'):\n             g = sns.catplot(x=\"year\", data=planets, aspect=4.0, kind='count',\n                             hue='method', order=range(2001, 2015))\n             g.set_ylabels('Number of Planets Discovered')\n```", "```py\nIn [15]: # url = ('https://raw.githubusercontent.com/jakevdp/'\n         #        'marathon-data/master/marathon-data.csv')\n         # !cd data && curl -O {url}\n```", "```py\nIn [16]: data = pd.read_csv('data/marathon-data.csv')\n         data.head()\nOut[16]:    age gender     split     final\n         0   33      M  01:05:38  02:08:51\n         1   32      M  01:06:26  02:09:28\n         2   31      M  01:06:49  02:10:42\n         3   38      M  01:06:16  02:13:45\n         4   31      M  01:06:32  02:13:59\n```", "```py\nIn [17]: data.dtypes\nOut[17]: age        int64\n         gender    object\n         split     object\n         final     object\n         dtype: object\n```", "```py\nIn [18]: import datetime\n\n         def convert_time(s):\n             h, m, s = map(int, s.split(':'))\n             return datetime.timedelta(hours=h, minutes=m, seconds=s)\n\n         data = pd.read_csv('data/marathon-data.csv',\n                            converters={'split':convert_time, 'final':convert_time})\n         data.head()\nOut[18]:    age gender           split           final\n         0   33      M 0 days 01:05:38 0 days 02:08:51\n         1   32      M 0 days 01:06:26 0 days 02:09:28\n         2   31      M 0 days 01:06:49 0 days 02:10:42\n         3   38      M 0 days 01:06:16 0 days 02:13:45\n         4   31      M 0 days 01:06:32 0 days 02:13:59\n```", "```py\nIn [19]: data.dtypes\nOut[19]: age                 int64\n         gender             object\n         split     timedelta64[ns]\n         final     timedelta64[ns]\n         dtype: object\n```", "```py\nIn [20]: data['split_sec'] = data['split'].view(int) / 1E9\n         data['final_sec'] = data['final'].view(int) / 1E9\n         data.head()\nOut[20]:    age gender           split           final  split_sec  final_sec\n         0   33      M 0 days 01:05:38 0 days 02:08:51     3938.0     7731.0\n         1   32      M 0 days 01:06:26 0 days 02:09:28     3986.0     7768.0\n         2   31      M 0 days 01:06:49 0 days 02:10:42     4009.0     7842.0\n         3   38      M 0 days 01:06:16 0 days 02:13:45     3976.0     8025.0\n         4   31      M 0 days 01:06:32 0 days 02:13:59     3992.0     8039.0\n```", "```py\nIn [21]: with sns.axes_style('white'):\n             g = sns.jointplot(x='split_sec', y='final_sec', data=data, kind='hex')\n             g.ax_joint.plot(np.linspace(4000, 16000),\n                             np.linspace(8000, 32000), ':k')\n```", "```py\nIn [22]: data['split_frac'] = 1 - 2 * data['split_sec'] / data['final_sec']\n         data.head()\nOut[22]:    age gender           split           final  split_sec  final_sec  \\\n         0   33      M 0 days 01:05:38 0 days 02:08:51     3938.0     7731.0\n         1   32      M 0 days 01:06:26 0 days 02:09:28     3986.0     7768.0\n         2   31      M 0 days 01:06:49 0 days 02:10:42     4009.0     7842.0\n         3   38      M 0 days 01:06:16 0 days 02:13:45     3976.0     8025.0\n         4   31      M 0 days 01:06:32 0 days 02:13:59     3992.0     8039.0\n\n            split_frac\n         0   -0.018756\n         1   -0.026262\n         2   -0.022443\n         3    0.009097\n         4    0.006842\n```", "```py\nIn [23]: sns.displot(data['split_frac'], kde=False)\n         plt.axvline(0, color=\"k\", linestyle=\"--\");\n```", "```py\nIn [24]: sum(data.split_frac < 0)\nOut[24]: 251\n```", "```py\nIn [25]: g = sns.PairGrid(data, vars=['age', 'split_sec', 'final_sec', 'split_frac'],\n                          hue='gender', palette='RdBu_r')\n         g.map(plt.scatter, alpha=0.8)\n         g.add_legend();\n```", "```py\nIn [26]: sns.kdeplot(data.split_frac[data.gender=='M'], label='men', shade=True)\n         sns.kdeplot(data.split_frac[data.gender=='W'], label='women', shade=True)\n         plt.xlabel('split_frac');\n```", "```py\nIn [27]: sns.violinplot(x=\"gender\", y=\"split_frac\", data=data,\n                        palette=[\"lightblue\", \"lightpink\"]);\n```", "```py\nIn [28]: data['age_dec'] = data.age.map(lambda age: 10 * (age // 10))\n         data.head()\nOut[28]:    age gender           split           final  split_sec  final_sec  \\\n         0   33      M 0 days 01:05:38 0 days 02:08:51     3938.0     7731.0\n         1   32      M 0 days 01:06:26 0 days 02:09:28     3986.0     7768.0\n         2   31      M 0 days 01:06:49 0 days 02:10:42     4009.0     7842.0\n         3   38      M 0 days 01:06:16 0 days 02:13:45     3976.0     8025.0\n         4   31      M 0 days 01:06:32 0 days 02:13:59     3992.0     8039.0\n\n            split_frac  age_dec\n         0   -0.018756       30\n         1   -0.026262       30\n         2   -0.022443       30\n         3    0.009097       30\n         4    0.006842       30\n```", "```py\nIn [29]: men = (data.gender == 'M')\n         women = (data.gender == 'W')\n\n         with sns.axes_style(style=None):\n             sns.violinplot(x=\"age_dec\", y=\"split_frac\", hue=\"gender\", data=data,\n                            split=True, inner=\"quartile\",\n                            palette=[\"lightblue\", \"lightpink\"]);\n```", "```py\nIn [30]: (data.age > 80).sum()\nOut[30]: 7\n```", "```py\nIn [31]: g = sns.lmplot(x='final_sec', y='split_frac', col='gender', data=data,\n                        markers=\".\", scatter_kws=dict(color='c'))\n         g.map(plt.axhline, y=0.0, color=\"k\", ls=\":\");\n```"]