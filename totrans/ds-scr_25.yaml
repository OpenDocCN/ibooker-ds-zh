- en: Chapter 24\. Databases and SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第24章 数据库和SQL
- en: Memory is man’s greatest friend and worst enemy.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 记忆是人类最好的朋友，也是最坏的敌人。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gilbert Parker
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Gilbert Parker
- en: The data you need will often live in *databases*, systems designed for efficiently
    storing and querying data. The bulk of these are *relational* databases, such
    as PostgreSQL, MySQL, and SQL Server, which store data in *tables* and are typically
    queried using Structured Query Language (SQL), a declarative language for manipulating
    data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要的数据通常存储在*数据库*中，这些系统专门设计用于高效存储和查询数据。这些大部分是*关系型*数据库，如PostgreSQL、MySQL和SQL Server，它们将数据存储在*表*中，并通常使用结构化查询语言（SQL）进行查询，这是一种用于操作数据的声明性语言。
- en: SQL is a pretty essential part of the data scientist’s toolkit. In this chapter,
    we’ll create NotQuiteABase, a Python implementation of something that’s not quite
    a database. We’ll also cover the basics of SQL while showing how they work in
    our not-quite database, which is the most “from scratch” way I could think of
    to help you understand what they’re doing. My hope is that solving problems in
    NotQuiteABase will give you a good sense of how you might solve the same problems
    using SQL.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是数据科学家工具包中非常重要的一部分。在本章中，我们将创建NotQuiteABase，这是Python实现的一个几乎不是数据库的东西。我们还将介绍SQL的基础知识，并展示它们在我们的几乎不是数据库中的工作方式，这是我能想到的最“从头开始”的方式，帮助您理解它们在做什么。我希望在NotQuiteABase中解决问题将使您对如何使用SQL解决相同问题有一个良好的感觉。
- en: CREATE TABLE and INSERT
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表和插入
- en: A relational database is a collection of tables, and of relationships among
    them. A table is simply a collection of rows, not unlike some of the matrices
    we’ve been working with. However, a table also has associated with it a fixed
    *schema* consisting of column names and column types.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库是表的集合，以及它们之间的关系。表只是行的集合，与我们一直在处理的一些矩阵类似。然而，表还有一个固定的*模式*，包括列名和列类型。
- en: 'For example, imagine a `users` dataset containing for each user her `user_id`,
    `name`, and `num_friends`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一个包含每个用户的`user_id`、`name`和`num_friends`的`users`数据集：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In SQL, we might create this table with:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，我们可以这样创建这个表：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that we specified that the `user_id` and `num_friends` must be integers
    (and that `user_id` isn’t allowed to be `NULL`, which indicates a missing value
    and is sort of like our `None`) and that the name should be a string of length
    200 or less. We’ll use Python types in a similar way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们指定了`user_id`和`num_friends`必须是整数（并且`user_id`不允许为`NULL`，表示缺少值，类似于我们的`None`），而`name`应该是长度不超过200的字符串。我们将类似地使用Python类型。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: SQL is almost completely case and indentation insensitive. The capitalization
    and indentation style here is my preferred style. If you start learning SQL, you
    will surely encounter other examples styled differently.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SQL几乎完全不区分大小写和缩进。这里的大写和缩进风格是我喜欢的风格。如果您开始学习SQL，您肯定会遇到其他样式不同的例子。
- en: 'You can insert the rows with `INSERT` statements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`INSERT`语句插入行：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice also that SQL statements need to end with semicolons, and that SQL requires
    single quotes for its strings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意SQL语句需要以分号结尾，并且SQL中字符串需要用单引号括起来。
- en: In NotQuiteABase, you’ll create a `Table` by specifying a similar schema. Then
    to insert a row, you’ll use the table’s `insert` method, which takes a `list`
    of row values that need to be in the same order as the table’s column names.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在NotQuiteABase中，您将通过指定类似的模式来创建一个`Table`。然后，要插入一行，您将使用表的`insert`方法，该方法接受一个与表列名顺序相同的`list`行值。
- en: Behind the scenes, we’ll store each row as a `dict` from column names to values.
    A real database would never use such a space-wasting representation, but doing
    so will make NotQuiteABase much easier to work with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，我们将每一行都存储为一个从列名到值的`dict`。一个真正的数据库永远不会使用这样浪费空间的表示方法，但这样做将使得NotQuiteABase更容易处理。
- en: 'We’ll implement the NotQuiteABase `Table` as a giant class, which we’ll implement
    one method at a time. Let’s start by getting out of the way some imports and type
    aliases:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将NotQuiteABase `Table`实现为一个巨大的类，我们将一次实现一个方法。让我们先把导入和类型别名处理掉：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s start with the constructor. To create a NotQuiteABase table, we’ll need
    to pass in a list of column names, and a list of column types, just as you would
    if you were creating a table in a SQL database:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从构造函数开始。要创建一个NotQuiteABase表，我们需要传入列名列表和列类型列表，就像您在创建SQL数据库中的表时所做的一样：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We’ll add a helper method to get the type of a column:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个帮助方法来获取列的类型：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And we’ll add an `insert` method that checks that the values you’re inserting
    are valid. In particular, you have to provide the correct number of values, and
    each has to be the correct type (or `None`):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个 `insert` 方法来检查您要插入的值是否有效。特别是，您必须提供正确数量的值，并且每个值必须是正确的类型（或 `None`）：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In an actual SQL database you’d explicitly specify whether any given column
    was allowed to contain null (`None`) values; to make our lives simpler we’ll just
    say that any column can.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的 SQL 数据库中，你需要明确指定任何给定列是否允许包含空值 (`None`)；为了简化我们的生活，我们只会说任何列都可以。
- en: 'We’ll also introduce a few dunder methods that allow us to treat a table like
    a `List[Row]`, which we’ll mostly use for testing our code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将引入一些 dunder 方法，允许我们将表视为一个 `List[Row]`，我们主要用于测试我们的代码：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And we’ll add a method to pretty-print our table:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个方法来漂亮地打印我们的表：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we can create our `Users` table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建我们的 `Users` 表：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you now `print(users)`, you’ll see:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在 `print(users)`，您将看到：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The list-like API makes it easy to write tests:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 列表样的 API 使得编写测试变得容易：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We’ve got a lot more functionality to add.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有更多功能要添加。
- en: UPDATE
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新
- en: 'Sometimes you need to update the data that’s already in the database. For instance,
    if Dunn acquires another friend, you might need to do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要更新已经在数据库中的数据。例如，如果 Dunn 又交了一个朋友，您可能需要这样做：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The key features are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关键特性包括：
- en: What table to update
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新哪个表
- en: Which rows to update
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新哪些行
- en: Which fields to update
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新哪些字段
- en: What their new values should be
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的新值应该是什么
- en: 'We’ll add a similar `update` method to NotQuiteABase. Its first argument will
    be a `dict` whose keys are the columns to update and whose values are the new
    values for those fields. Its second (optional) argument should be a `predicate`
    that returns `True` for rows that should be updated, and `False` otherwise:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 NotQuiteABase 中添加一个类似的 `update` 方法。它的第一个参数将是一个 `dict`，其键是要更新的列，其值是这些字段的新值。其第二个（可选）参数应该是一个
    `predicate`，对于应该更新的行返回 `True`，否则返回 `False`：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'after which we can simply do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 之后我们可以简单地这样做：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: DELETE
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除
- en: 'There are two ways to delete rows from a table in SQL. The dangerous way deletes
    every row from a table:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中从表中删除行有两种方法。危险的方式会删除表中的每一行：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The less dangerous way adds a `WHERE` clause and deletes only rows that match
    a certain condition:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 较不危险的方式添加了一个 `WHERE` 子句，并且仅删除满足特定条件的行：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It’s easy to add this functionality to our `Table`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将此功能添加到我们的 `Table` 中很容易：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you supply a `predicate` function (i.e., a `WHERE` clause), this deletes
    only the rows that satisfy it. If you don’t supply one, the default `predicate`
    always returns `True`, and you will delete every row.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您提供一个 `predicate` 函数（即 `WHERE` 子句），这将仅删除满足它的行。如果您不提供一个，那么默认的 `predicate` 总是返回
    `True`，并且您将删除每一行。
- en: 'For example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: SELECT
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择
- en: 'Typically you don’t inspect SQL tables directly. Instead you query them with
    a `SELECT` statement:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你不直接检查 SQL 表。相反，您使用 `SELECT` 语句查询它们：
- en: '[PRE19]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also use `SELECT` statements to calculate fields:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `SELECT` 语句计算字段：
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We’ll give our `Table` class a `select` method that returns a new `Table`.
    The method accepts two optional arguments:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将给我们的 `Table` 类添加一个 `select` 方法，该方法返回一个新的 `Table`。该方法接受两个可选参数：
- en: '`keep_columns` specifies the names of the columns you want to keep in the result.
    If you don’t supply it, the result contains all the columns.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keep_columns` 指定结果中要保留的列名。如果您没有提供它，结果将包含所有列。'
- en: '`additional_columns` is a dictionary whose keys are new column names and whose
    values are functions specifying how to compute the values of the new columns.
    We’ll peek at the type annotations of those functions to figure out the types
    of the new columns, so the functions will need to have annotated return types.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`additional_columns` 是一个字典，其键是新列名，值是指定如何计算新列值的函数。我们将查看这些函数的类型注解来确定新列的类型，因此这些函数需要有注解的返回类型。'
- en: 'If you were to supply neither of them, you’d simply get back a copy of the
    table:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有提供它们中的任何一个，你将简单地得到表的一个副本：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember way back in [Chapter 2](ch02.html#python) when we said that type annotations
    don’t actually do anything? Well, here’s the counterexample. But look at the convoluted
    procedure we have to go through to get at them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在[第2章](ch02.html#python)中我们说过类型注解实际上什么也不做吗？好吧，这里是反例。但是看看我们必须经历多么复杂的过程才能得到它们。
- en: Our `select` returns a new `Table`, while the typical SQL `SELECT` just produces
    some sort of transient result set (unless you explicitly insert the results into
    a table).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`select`返回一个新的`Table`，而典型的SQL `SELECT`仅产生某种临时结果集（除非您将结果明确插入到表中）。
- en: 'We’ll also need `where` and `limit` methods. Both are pretty simple:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要`where`和`limit`方法。这两者都很简单：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'after which we can easily construct NotQuiteABase equivalents to the preceding
    SQL statements:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以轻松地构造与前面的SQL语句相等的NotQuiteABase等效语句：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice that for the multiline “fluent” queries we have to wrap the whole query
    in parentheses.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于多行“流畅”查询，我们必须将整个查询包装在括号中。
- en: GROUP BY
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GROUP BY
- en: Another common SQL operation is `GROUP BY`, which groups together rows with
    identical values in specified columns and produces aggregate values like `MIN`
    and `MAX` and `COUNT` and `SUM`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的SQL操作是`GROUP BY`，它将具有指定列中相同值的行分组在一起，并生成诸如`MIN`、`MAX`、`COUNT`和`SUM`之类的聚合值。
- en: 'For example, you might want to find the number of users and the smallest `user_id`
    for each possible name length:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可能希望找到每个可能的名称长度的用户数和最小的`user_id`：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Every field we `SELECT` needs to be either in the `GROUP BY` clause (which `name_length`
    is) or an aggregate computation (which `min_user_id` and `num_users` are).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择的每个字段都需要在`GROUP BY`子句（其中`name_length`是）或聚合计算（`min_user_id`和`num_users`是）中。
- en: SQL also supports a `HAVING` clause that behaves similarly to a `WHERE` clause,
    except that its filter is applied to the aggregates (whereas a `WHERE` would filter
    out rows before aggregation even took place).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SQL还支持一个`HAVING`子句，其行为类似于`WHERE`子句，只是其过滤器应用于聚合（而`WHERE`将在聚合之前过滤行）。
- en: You might want to know the average number of friends for users whose names start
    with specific letters but see only the results for letters whose corresponding
    average is greater than 1\. (Yes, some of these examples are contrived.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道以特定字母开头的用户名的平均朋友数量，但仅查看其对应平均值大于1的字母的结果。（是的，这些示例中有些是人为构造的。）
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Functions for working with strings vary across SQL implementations; some databases
    might instead use `SUBSTRING` or something else.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不同数据库中用于处理字符串的函数各不相同；一些数据库可能会使用`SUBSTRING`或其他东西。
- en: 'You can also compute overall aggregates. In that case, you leave off the `GROUP
    BY`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以计算整体聚合值。在这种情况下，您可以省略`GROUP BY`：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To add this functionality to NotQuiteABase `Table`s, we’ll add a `group_by`
    method. It takes the names of the columns you want to group by, a dictionary of
    the aggregation functions you want to run over each group, and an optional predicate
    called `having` that operates on multiple rows.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此功能添加到NotQuiteABase的`Table`中，我们将添加一个`group_by`方法。它接受您要按组分组的列的名称，您要在每个组上运行的聚合函数的字典，以及一个可选的名为`having`的谓词，该谓词对多行进行操作。
- en: 'Then it does the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行以下步骤：
- en: Creates a `defaultdict` to map `tuple`s (of the group-by values) to rows (containing
    the group-by values). Recall that you can’t use lists as `dict` keys; you have
    to use tuples.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`defaultdict`来将`tuple`（按分组值）映射到行（包含分组值的行）。请记住，您不能使用列表作为`dict`的键；您必须使用元组。
- en: Iterates over the rows of the table, populating the `defaultdict`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历表的行，填充`defaultdict`。
- en: Creates a new table with the correct output columns.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有正确输出列的新表。
- en: Iterates over the `defaultdict` and populates the output table, applying the
    `having` filter, if any.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历`defaultdict`并填充输出表，应用`having`过滤器（如果有）。
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: An actual database would almost certainly do this in a more efficient manner.)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的数据库几乎肯定会以更有效的方式执行此操作。
- en: 'Again, let’s see how we would do the equivalent of the preceding SQL statements.
    The `name_length` metrics are:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，让我们看看如何执行与前面的SQL语句等效的操作。`name_length`指标是：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `first_letter` metrics:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`first_letter`指标是：'
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'and the `user_id_sum` is:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_id_sum`是：'
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: ORDER BY
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORDER BY
- en: 'Frequently, you’ll want to sort your results. For example, you might want to
    know the (alphabetically) first two names of your users:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，您可能希望对结果进行排序。例如，您可能希望知道用户的（按字母顺序）前两个名称：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is easy to implement by giving our `Table` an `order_by` method that takes
    an `order` function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易通过给我们的`Table`添加一个`order_by`方法来实现，该方法接受一个`order`函数来实现：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'which we can then use as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以像这样使用它们：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The SQL `ORDER BY` lets you specify `ASC` (ascending) or `DESC` (descending)
    for each sort field; here we’d have to bake that into our `order` function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的`ORDER BY`允许您为每个排序字段指定`ASC`（升序）或`DESC`（降序）；在这里，我们必须将其嵌入到我们的`order`函数中。
- en: JOIN
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JOIN
- en: Relational database tables are often *normalized*, which means that they’re
    organized to minimize redundancy. For example, when we work with our users’ interests
    in Python, we can just give each user a `list` containing his interests.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库表通常是*规范化*的，这意味着它们被组织成最小化冗余。例如，当我们在Python中处理用户的兴趣时，我们可以为每个用户分配一个包含其兴趣的`list`。
- en: 'SQL tables can’t typically contain lists, so the typical solution is to create
    a second table called `user_interests` containing the one-to-many relationship
    between `user_id`s and `interest`s. In SQL you might do:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: SQL表通常不能包含列表，所以典型的解决方案是创建第二个表，称为`user_interests`，包含`user_id`和`interest`之间的一对多关系。在SQL中，你可以这样做：
- en: '[PRE34]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'whereas in NotQuiteABase you’d create the table:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 而在NotQuiteABase中，你需要创建这样一个表：
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: There’s still plenty of redundancy—the interest “SQL” is stored in two different
    places. In a real database you might store `user_id` and `interest_id` in the
    `user_interests` table and then create a third table, `interests`, mapping `interest_id`
    to `interest` so you could store the interest names only once each. Here that
    would just make our examples more complicated than they need to be.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然存在大量冗余 —— 兴趣“SQL”存储在两个不同的地方。在实际数据库中，您可能会将`user_id`和`interest_id`存储在`user_interests`表中，然后创建第三个表`interests`，将`interest_id`映射到`interest`，这样您只需存储兴趣名称一次。但这会使我们的示例变得比必要的复杂。
- en: When our data lives across different tables, how do we analyze it? By `JOIN`ing
    the tables together. A `JOIN` combines rows in the left table with corresponding
    rows in the right table, where the meaning of “corresponding” is based on how
    we specify the join.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的数据分布在不同的表中时，我们如何分析它？通过将表进行`JOIN`。`JOIN`将左表中的行与右表中相应的行组合在一起，其中“相应”的含义基于我们如何指定连接的方式。
- en: 'For example, to find the users interested in SQL you’d query:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查找对SQL感兴趣的用户，你会这样查询：
- en: '[PRE36]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `JOIN` says that, for each row in `users`, we should look at the `user_id`
    and associate that row with every row in `user_interests` containing the same
    `user_id`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`JOIN`指示，对于`users`中的每一行，我们应该查看`user_id`并将该行与包含相同`user_id`的`user_interests`中的每一行关联起来。'
- en: Notice we had to specify which tables to `JOIN` and also which columns to join
    `ON`. This is an `INNER JOIN`, which returns the combinations of rows (and only
    the combinations of rows) that match according to the specified join criteria.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们必须指定要`JOIN`的表和要`ON`连接的列。这是一个`INNER JOIN`，它根据指定的连接条件返回匹配的行组合（仅限匹配的行组合）。
- en: There is also a `LEFT JOIN`, which—in addition to the combinations of matching
    rows—returns a row for each left-table row with no matching rows (in which case,
    the fields that would have come from the right table are all `NULL`).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种`LEFT JOIN`，除了匹配行的组合外，还返回每个左表行的未匹配行（在这种情况下，右表应该出现的字段都是`NULL`）。
- en: 'Using a `LEFT JOIN`, it’s easy to count the number of interests each user has:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LEFT JOIN`，很容易统计每个用户的兴趣数量：
- en: '[PRE37]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `LEFT JOIN` ensures that users with no interests will still have rows in
    the joined dataset (with `NULL` values for the fields coming from `user_interests`),
    and `COUNT` counts only values that are non-`NULL`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`LEFT JOIN`确保没有兴趣的用户仍然在连接数据集中具有行（`user_interests`字段的值为`NULL`），而`COUNT`仅计算非`NULL`值。'
- en: 'The NotQuiteABase `join` implementation will be more restrictive—it simply
    joins two tables on whatever columns they have in common. Even so, it’s not trivial
    to write:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: NotQuiteABase的`join`实现将更为严格 —— 它仅仅在两个表中存在共同列时进行连接。即便如此，编写起来也不是件简单的事情：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'So, we could find users interested in SQL with:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以找到对SQL感兴趣的用户：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And we could get the interest counts with:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式获得兴趣计数：
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In SQL, there is also a `RIGHT JOIN`, which keeps rows from the right table
    that have no matches, and a `FULL OUTER JOIN`, which keeps rows from both tables
    that have no matches. We won’t implement either of those.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，还有一种`RIGHT JOIN`，它保留来自右表且没有匹配的行，还有一种`FULL OUTER JOIN`，它保留来自两个表且没有匹配的行。我们不会实现其中任何一种。
- en: Subqueries
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子查询
- en: In SQL, you can `SELECT` from (and `JOIN`) the results of queries as if they
    were tables. So, if you wanted to find the smallest `user_id` of anyone interested
    in SQL, you could use a subquery. (Of course, you could do the same calculation
    using a `JOIN`, but that wouldn’t illustrate subqueries.)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，您可以从（和`JOIN`）查询的结果中`SELECT`，就像它们是表一样。因此，如果您想找到任何对SQL感兴趣的人中最小的`user_id`，您可以使用子查询。（当然，您也可以使用`JOIN`执行相同的计算，但这不会说明子查询。）
- en: '[PRE41]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Given the way we’ve designed NotQuiteABase, we get this for free. (Our query
    results are actual tables.)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们设计的NotQuiteABase的方式，我们可以免费获得这些功能。（我们的查询结果是实际的表。）
- en: '[PRE42]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Indexes
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引
- en: To find rows containing a specific value (say, where `name` is “Hero”), NotQuiteABase
    has to inspect every row in the table. If the table has a lot of rows, this can
    take a very long time.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找包含特定值（比如`name`为“Hero”的行），NotQuiteABase必须检查表中的每一行。如果表中有很多行，这可能需要很长时间。
- en: Similarly, our `join` algorithm is extremely inefficient. For each row in the
    left table, it inspects every row in the right table to see if it’s a match. With
    two large tables this could take approximately forever.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们的`join`算法非常低效。对于左表中的每一行，它都要检查右表中的每一行是否匹配。对于两个大表来说，这可能永远都需要很长时间。
- en: Also, you’d often like to apply constraints to some of your columns. For example,
    in your `users` table you probably don’t want to allow two different users to
    have the same `user_id`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您经常希望对某些列应用约束。例如，在您的`users`表中，您可能不希望允许两个不同的用户具有相同的`user_id`。
- en: Indexes solve all these problems. If the `user_interests` table had an index
    on `user_id`, a smart `join` algorithm could find matches directly rather than
    scanning the whole table. If the `users` table had a “unique” index on `user_id`,
    you’d get an error if you tried to insert a duplicate.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 索引解决了所有这些问题。如果`user_interests`表上有一个关于`user_id`的索引，智能的`join`算法可以直接找到匹配项，而不必扫描整个表。如果`users`表上有一个关于`user_id`的“唯一”索引，如果尝试插入重复项，则会收到错误提示。
- en: Each table in a database can have one or more indexes, which allow you to quickly
    look up rows by key columns, efficiently join tables together, and enforce unique
    constraints on columns or combinations of columns.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的每个表可以有一个或多个索引，这些索引允许您通过关键列快速查找行，在表之间有效地进行连接，并在列或列组合上强制唯一约束。
- en: Designing and using indexes well is something of a black art (which varies somewhat
    depending on the specific database), but if you end up doing a lot of database
    work it’s worth learning about.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 良好设计和使用索引有点像黑魔法（这取决于具体的数据库有所不同），但是如果您经常进行数据库工作，学习这些知识是值得的。
- en: Query Optimization
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询优化
- en: 'Recall the query to find all users who are interested in SQL:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾查询以查找所有对SQL感兴趣的用户：
- en: '[PRE43]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In NotQuiteABase there are (at least) two different ways to write this query.
    You could filter the `user_interests` table before performing the join:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在NotQuiteABase中有（至少）两种不同的方法来编写此查询。您可以在执行连接之前过滤`user_interests`表：
- en: '[PRE44]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Or you could filter the results of the join:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以过滤连接的结果：
- en: '[PRE45]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You’ll end up with the same results either way, but filter-before-join is almost
    certainly more efficient, since in that case `join` has many fewer rows to operate
    on.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，最终的结果都是相同的，但是在连接之前过滤几乎肯定更有效，因为在这种情况下，`join`操作的行数要少得多。
- en: In SQL, you generally wouldn’t worry about this. You “declare” the results you
    want and leave it up to the query engine to execute them (and use indexes efficiently).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，您通常不必担心这个问题。您可以“声明”您想要的结果，然后由查询引擎来执行它们（并有效地使用索引）。
- en: NoSQL
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL
- en: A recent trend in databases is toward nonrelational “NoSQL” databases, which
    don’t represent data in tables. For instance, MongoDB is a popular schemaless
    database whose elements are arbitrarily complex JSON documents rather than rows.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的一个最新趋势是向非关系型的“NoSQL”数据库发展，它们不以表格形式表示数据。例如，MongoDB是一种流行的无模式数据库，其元素是任意复杂的JSON文档，而不是行。
- en: There are column databases that store data in columns instead of rows (good
    when data has many columns but queries need few of them), key/value stores that
    are optimized for retrieving single (complex) values by their keys, databases
    for storing and traversing graphs, databases that are optimized to run across
    multiple datacenters, databases that are designed to run in memory, databases
    for storing time-series data, and hundreds more.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有列数据库，它们将数据存储在列中而不是行中（当数据具有许多列但查询只需少数列时很好），键/值存储优化了通过键检索单个（复杂）值的数据库，用于存储和遍历图形的数据库，优化用于跨多个数据中心运行的数据库，专为内存运行而设计的数据库，用于存储时间序列数据的数据库等等。
- en: Tomorrow’s flavor of the day might not even exist now, so I can’t do much more
    than let you know that NoSQL is a thing. So now you know. It’s a thing.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 明天的热门可能甚至现在都不存在，所以我不能做更多的事情，只能告诉您NoSQL是一种事物。所以现在您知道了。它是一种事物。
- en: For Further Exploration
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步探索
- en: If you’d like to download a relational database to play with, [SQLite](http://www.sqlite.org)
    is fast and tiny, while [MySQL](http://www.mysql.com) and [PostgreSQL](http://www.postgresql.org)
    are larger and featureful. All are free and have lots of documentation.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要下载一个关系型数据库来玩玩，[SQLite](http://www.sqlite.org) 快速且小巧，而 [MySQL](http://www.mysql.com)
    和 [PostgreSQL](http://www.postgresql.org) 则更大且功能丰富。所有这些都是免费的，并且有大量文档支持。
- en: If you want to explore NoSQL, [MongoDB](http://www.mongodb.org) is very simple
    to get started with, which can be both a blessing and somewhat of a curse. It
    also has pretty good documentation.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想探索 NoSQL，[MongoDB](http://www.mongodb.org) 非常简单入门，这既是一种福音也有点儿“诅咒”。它的文档也相当不错。
- en: The [Wikipedia article on NoSQL](http://en.wikipedia.org/wiki/NoSQL) almost
    certainly now contains links to databases that didn’t even exist when this book
    was written.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NoSQL 的维基百科文章](http://en.wikipedia.org/wiki/NoSQL)几乎可以肯定地包含了在这本书写作时甚至都不存在的数据库链接。'
