["```py\n`import` `pandas` `as` `pd`\n`import` `sqlalchemy`\n\n```", "```py\n`db` `=` `sqlalchemy``.``create_engine``(``'``sqlite:///babynames.db``'``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n2020722 rows × 4 columns\n```", "```py\nSELECT  *  -- Get all the columns...\nFROM  baby;  -- ...from the baby relation\n\n```", "```py\n`query` `=` `'''` \n`SELECT Name`\n`FROM baby;`\n`'''` \n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n2020722 rows × 1 columns\n```", "```py\n`query` `=` `'''` \n`SELECT Name, Count`\n`FROM baby;`\n`'''` \n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n2020722 rows × 2 columns\n```", "```py\n`query` `=` `'''` \n`SELECT Name`\n`FROM baby`\n`LIMIT 10;`\n`'''` \n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 1 columns\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby`\n`WHERE Year = 2020;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n31270 rows × 4 columns\n```", "```py\nSELECT  *\nFROM  baby\nWHERE  Year  =  2020;\n--         ↑\n--         Single equals sign\n\n```", "```py\n`# Assignment`\n`my_year` `=` `2021`\n\n`# Comparison, which evaluates to False`\n`my_year` `==` `2020`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby`\n`WHERE Count > 10000`\n `AND (Year = 2020`\n `OR Year = 2019);`\n`-- Notice that we use parentheses to enforce evaluation order`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n44 rows × 4 columns\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby`\n`WHERE Year = 2020`\n`ORDER BY Count DESC`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 4 columns\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby`\n`WHERE Name =` `\"``Luna``\"`\n `AND Sex =` `\"``F``\"``;`\n`'''`\n\n`luna` `=` `pd``.``read_sql``(``query``,` `db``)`\n`luna`\n\n```", "```py\n128 rows × 4 columns\n```", "```py\n`px``.``line``(``luna``,` `x``=``'``Year``'``,` `y``=``'``Count``'``,` `width``=``350``,` `height``=``250``)`\n\n```", "```py\n`import` `sqlalchemy`\n`db` `=` `sqlalchemy``.``create_engine``(``'``sqlite:///babynames.db``'``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby`\n`LIMIT 10`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 4 columns\n```", "```py\n`query` `=` `'''` \n`SELECT SUM(Count)`\n`FROM baby`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT Year, SUM(Count)`\n`FROM baby`\n`GROUP BY Year`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n141 rows × 2 columns\n```", "```py\nSELECT\n  col1,  -- column used for grouping\n  SUM(col2)  -- aggregation of another column\nFROM  table_name  -- relation to use\nGROUP  BY  col1  -- the column(s) to group by\n\n```", "```py\n`query` `=` `'''` \n`SELECT Year, Sex, SUM(Count)`\n`FROM baby`\n`GROUP BY Year, Sex`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n282 rows × 3 columns\n```", "```py\n`query` `=` `'''` \n`SELECT Year, MAX(Count)`\n`FROM baby`\n`GROUP BY Year`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n141 rows × 2 columns\n```", "```py\n`import` `sqlalchemy`\n`db` `=` `sqlalchemy``.``create_engine``(``'``sqlite:///babynames.db``'``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM nyt;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n23 rows × 2 columns\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby_small;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM nyt_small;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby_small INNER JOIN nyt_small`\n `ON baby_small.Name = nyt_small.nyt_name`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM baby_small LEFT JOIN nyt_small`\n `ON baby_small.Name = nyt_small.nyt_name`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT *`\n`FROM nyt_small LEFT JOIN baby_small`\n `ON baby_small.Name = nyt_small.nyt_name`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT`\n `category,`\n `Year,`\n `SUM(Count) AS count           -- [3]`\n`FROM baby INNER JOIN nyt        -- [1]`\n `ON baby.Name = nyt.nyt_name   -- [1]`\n`GROUP BY category, Year         -- [2]`\n`'''`\n\n`cate_counts` `=` `pd``.``read_sql``(``query``,` `db``)`\n`cate_counts`\n\n```", "```py\n650 rows × 3 columns\n```", "```py\n`# Set up connection to database`\n`import` `sqlalchemy`\n`db` `=` `sqlalchemy``.``create_engine``(``'``sqlite:///babynames.db``'``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT Name, LENGTH(Name)`\n`FROM baby`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 2 columns\n```", "```py\n`query` `=` `'''` \n`SELECT Name, LENGTH(Name), AVG(Count)`\n`FROM baby`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n`query` `=` `'''` \n`SELECT Name, SUBSTR(Name, 1, 1)`\n`FROM baby`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 2 columns\n```", "```py\n`query` `=` `'''` \n`SELECT *, SUBSTR(Name, 1, 1) AS Firsts`\n`FROM baby`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 5 columns\n```", "```py\n`query` `=` `'''` \n`-- Create a temporary relation called letters by calculating`\n`-- the first letter for each name in baby`\n`WITH letters AS (`\n `SELECT *, SUBSTR(Name, 1, 1) AS Firsts`\n `FROM baby`\n`)`\n`-- Then, select the first ten rows from letters`\n`SELECT *`\n`FROM letters`\n`LIMIT 10;`\n`'''`\n\n`pd``.``read_sql``(``query``,` `db``)`\n\n```", "```py\n10 rows × 5 columns\n```", "```py\n`query` `=` `'''` \n`WITH letters AS (`\n `SELECT *, SUBSTR(Name, 1, 1) AS Firsts`\n `FROM baby`\n`)`\n`SELECT Firsts, Year, SUM(Count) AS Count`\n`FROM letters`\n`WHERE Firsts =` `\"``L``\"`\n`GROUP BY Firsts, Year;`\n`'''`\n\n`letter_counts` `=` `pd``.``read_sql``(``query``,` `db``)`\n`letter_counts`\n\n```", "```py\n141 rows × 3 columns\n```"]