- en: Chapter 14\. Finding Open Reading Frames
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。寻找开放阅读框架
- en: The [ORF challenge](https://oreil.ly/DPWXc) is the last Rosalind problem I’ll
    tackle in this book. The goal is to find all the possible open reading frames
    (ORFs) in a sequence of DNA. An ORF is a region of nucleotides between the start
    codon and the stop codon. The solution will consider both the forward and reverse
    complement as well as frameshifts. Although there are existing tools such as TransDecoder
    to find coding regions, writing a bespoke solution brings together many skills
    from previous chapters, including reading a FASTA file, creating the reverse complement
    of a sequence, using string slices, finding k-mers, using multiple `for` loops/iterations,
    translating DNA, and using regular expressions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORF挑战](https://oreil.ly/DPWXc)是本书中我将处理的最后一个Rosalind问题。其目标是在DNA序列中找到所有可能的开放阅读框架（ORFs）。一个ORF是从起始密码子到终止密码子之间的核苷酸区域。解决方案将考虑前向和反向互补以及移码。虽然有像TransDecoder这样的现有工具来找到编码区域，但编写一个专门的解决方案将集成许多前几章的技能，包括读取FASTA文件、创建序列的反向互补、使用字符串切片、找到k-mer、使用多个`for`循环/迭代、翻译DNA和使用正则表达式。'
- en: 'You will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学到：
- en: How to truncate a sequence to a length evenly divisible by a codon size
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将序列截断到与密码子大小整除的长度
- en: How to use the `str.find()` and `str.partition()` functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`str.find()`和`str.partition()`函数
- en: How to document a regular expression using code formatting, comments, and Python’s
    implicit string concatenation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用代码格式化、注释和Python的隐式字符串连接来记录正则表达式
- en: Getting Started
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'The code, tests, and solutions for this challenge are located in the *14_orf*
    directory. Start by copying the first solution to the program `orf.py`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个挑战的代码、测试和解决方案位于*14_orf*目录中。首先复制第一个解决方案到`orf.py`程序中：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you request the usage, you’ll see the program takes a single positional
    argument of a FASTA-formatted file of sequences:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你请求使用方法，你将看到程序需要一个FASTA格式文件的单个位置参数：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first test input file has the same content as the example on the Rosalind
    page. Note that I’ve broken the sequence file here, but it’s a single line in
    the input file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试输入文件与Rosalind页面上的示例内容相同。请注意，我在这里断开了序列文件，但在输入文件中是单行：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the program with this input file and note the output. The order of the
    ORFs is not important:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序并注意输出。ORF的顺序并不重要：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the test suite to ensure the program passes the tests. When you are satisfied
    with how your program should work, start over:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试套件以确保程序通过测试。当你对程序的工作方式感到满意时，请重新开始：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, you probably need no help in defining a single positional file
    argument, but here is the code you can use:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，你可能不需要帮助来定义单个位置参数文件，但这是你可以使用的代码：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO1-1)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO1-1)'
- en: Define a positional argument that must be a readable text file.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个必须是可读文本文件的位置参数。
- en: 'Modify the `main()` to print the incoming filename:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`main()`函数以打印传入的文件名：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Verify that the program prints the usage, rejects bad files, and prints the
    filename for a valid argument:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 验证程序是否打印使用说明，拒绝坏文件，并打印有效参数的文件名：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, your program should pass the first three tests. Next, I’ll talk
    about how to make the program find ORFs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，你的程序应该通过前三个测试。接下来，我将讨论如何让程序找到开放阅读框架（ORFs）。
- en: Translating Proteins Inside Each Frame
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在每一帧内翻译蛋白质
- en: 'It might be helpful to write a bit of pseudocode to help sketch out what needs
    to happen:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以写一些伪代码来帮助勾勒出需要发生的事情：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can use a `for` loop to iterate through the input sequences using `Bio.SeqIO`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`for`循环来迭代通过`Bio.SeqIO`读取的输入序列：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the program to verify that this works:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序以验证其工作情况：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I need to transcribe this to mRNA, which entails changing all the *T*s to *U*s.
    I’ll let you use whatever solution from [Chapter 2](ch02.html#ch02) you like so
    long as your program can now print this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要将这段转录成mRNA，这意味着将所有的*T*改成*U*。你可以使用第[第2章](ch02.html#ch02)中任何你喜欢的解决方案，只要你的程序现在能打印出这个：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, refer to [Chapter 3](ch03.html#ch03) and have your program print both
    the forward and reverse complements of this sequence:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，参考[第3章](ch03.html#ch03)，让你的程序打印出这个序列的前向和反向互补：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Refer to [Chapter 7](ch07.html#ch07) to translate the forward and reverse complements
    to proteins:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[第7章](ch07.html#ch07)来将前向和反向互补转化为蛋白质：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, rather than reading each mRNA sequence from the beginning, implement frameshifts
    by reading them starting from the zeroth, first, and second characters, which
    you can do using a string slice. If you use Biopython to translate the mRNA slice,
    you may encounter the warning:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，不再从每个mRNA序列的开头读取，而是通过从零点、第一个和第二个字符开始读取来实现移位，可以使用字符串切片。如果使用Biopython翻译mRNA切片，可能会遇到以下警告：
- en: '*Partial codon, len(sequence) not a multiple of three. Explicitly trim the
    sequence or add trailing N before translation. This may become an error in the
    future.*'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*部分密码子，长度(sequence)不是三的倍数。在翻译之前明确修剪序列或添加尾随的N。这在未来可能会成为错误。*'
- en: 'To fix this, I created a function to truncate a sequence to the nearest even
    division by a value:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个问题，我创建了一个函数来截断序列，使其最接近被一个值偶数分割：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Figure 14-1](#fig_14.1) shows the results of shifting through the string `0123456789`
    and truncating each result to a length that is evenly divisible by 3.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-1](#fig_14.1)显示了通过字符串`0123456789`进行位移并将每个结果截断到可以被3整除的长度的结果。'
- en: '![mpfb 1401](assets/mpfb_1401.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1401](assets/mpfb_1401.png)'
- en: Figure 14-1\. Truncating the various frameshifts to a length that is evenly
    divisible by the codon size 3
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-1\. 将各种移位截断到密码子大小3可以整除的长度
- en: 'Here is a test you could use:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个你可以使用的测试：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Change your program to print the protein translations for the three shifts
    for both the forward and reverse complements of the mRNA. Be sure to print the
    entire translation, including all stop (`*`) codons, like so:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 修改你的程序，以打印mRNA的前向和反向互补物的三种移位的蛋白质翻译。确保打印完整的翻译，包括所有的终止(`*`)密码子，如下所示：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finding the ORFs in a Protein Sequence
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在蛋白质序列中找到ORF
- en: Now that the program can find all the protein sequences from each frameshift
    of the mRNA, it’s time to look for the open reading frames in the proteins. Your
    code will need to consider every interval from each start codon to the first subsequent
    stop codon. The codon *AUG* is the most common start codon, and it codes for the
    amino acid methionine (*M*). There are three possible stop codons shown with the
    asterisk (`*`). For example, [Figure 14-2](#fig_14.2) shows that the amino acid
    sequence *MAMAPR** contains two start codons and one stop codon and so has two
    possible proteins of *MAMAPR* and *MAPR*. Although it is common for tools to report
    only the longer sequence, the Rosalind challenge expects all possible sequences.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，程序可以从每个mRNA的移位框中找到所有蛋白质序列，是时候在蛋白质中寻找开放阅读框了。你的代码需要考虑从每个起始密码子到第一个随后的终止密码子的每个区间。密码子*AUG*是最常见的起始密码子，编码氨基酸甲硫氨酸(*M*)。有三种可能的终止密码子，用星号(`*`)表示。例如，[图 14-2](#fig_14.2)显示，氨基酸序列*MAMAPR**包含两个起始密码子和一个终止密码子，因此有*MAMAPR*和*MAPR*两种可能的蛋白质。尽管通常工具只报告较长的序列，但Rosalind挑战期望所有可能的序列。
- en: '![mpfb 1402](assets/mpfb_1402.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1402](assets/mpfb_1402.png)'
- en: Figure 14-2\. The protein sequence MAMAPR* has two overlapping open reading
    frames
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-2\. 蛋白质序列MAMAPR*有两个重叠的开放阅读框
- en: 'I decided to write a function called `find_orfs()` that will accept an amino
    acid string and return a list of ORFs:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定编写一个名为`find_orfs()`的函数，它将接受一个氨基酸字符串并返回一个ORF列表：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO2-1)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO2-1)'
- en: The function accepts a string of amino acids and returns a list of possible
    protein strings.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个氨基酸字符串，并返回可能的蛋白质字符串列表。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO2-2)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO2-2)'
- en: For now, return the empty list.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，返回空列表。
- en: 'Here is a test for this function. If you can implement the `find_orfs()` that
    passes this test, then you should be able to pass the integration test:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个函数的一个测试。如果你能实现通过这个测试的`find_orfs()`，那么你应该能够通过集成测试：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO3-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO3-1)'
- en: The empty string should produce no ORFs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 空字符串应该不产生ORF。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO3-2)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO3-2)'
- en: A single start codon with no stop codon should produce no ORFs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 单个起始密码子而没有终止密码子应该不产生ORF。
- en: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO3-3)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO3-3)'
- en: A single stop codon with no preceding start codon should produce no ORFs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 单个终止密码子而没有前置的起始密码子应该不产生ORF。
- en: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO3-4)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO3-4)'
- en: The function should return the start codon even if there are no intervening
    bases before the stop codon.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在停止密码子之前没有中间碱基，函数也应该返回起始密码子。
- en: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO3-5)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO3-5)'
- en: This sequence contains two ORFs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列包含两个ORF。
- en: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO3-6)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO3-6)'
- en: This sequence also contains only two ORFs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列同样仅包含两个ORF。
- en: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO3-7)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO3-7)'
- en: This sequence contains three putative ORFs in two separate sections.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列在两个不同部分中包含三个推测的ORF。
- en: Once you can find all the ORFs in each mRNA sequence, you should collect them
    into a distinct list. I suggest you use a `set()` for this. Though my solution
    prints the ORFs in sorted order, this is not a requirement for the test. The solution
    will bring together many of the skills you’ve already learned. The craft of writing
    longer and longer programs lies in composing smaller pieces that you understand
    and test. Keep plugging away at your program until you pass all the tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你能在每个mRNA序列中找到所有ORFs，你应该将它们收集到一个独特的列表中。我建议你使用`set()`来完成这个任务。虽然我的解决方案按排序顺序打印ORFs，但这不是测试的要求。解决问题的关键是将你已经学到的各种技能组合起来。编写越来越长的程序的技艺在于组合你理解和测试过的较小的片段。继续努力直到你通过所有的测试。
- en: Solutions
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: I’ll present three solutions to finding ORFs using two string functions and
    regular expressions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提出三种解决方案来使用两个字符串函数和正则表达式来查找ORFs。
- en: 'Solution 1: Using the str.index() Function'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案1：使用`str.index()`函数
- en: 'To start, here is how I wrote the `truncate()` function that will assuage the
    `Bio.Seq.translate()` function when I try to translate the various frame-shifted
    mRNA sequences:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这里是我编写的`truncate()`函数的方法，该函数将在尝试转换各种移码mRNA序列时缓解`Bio.Seq.translate()`函数的影响：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO4-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO4-1)'
- en: Find the length of the sequence.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 找到序列的长度。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO4-2)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO4-2)'
- en: The end of the desired subsequence is the length minus the length modulo `k`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所需子序列的末尾是长度减去长度模`k`。
- en: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO4-3)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO4-3)'
- en: Return the subsequence.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 返回子序列。
- en: 'Next, here is one way to write the `find_orfs()` that uses the `str.index()`
    function to find each starting *M* codon followed by a `*` stop codon:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，这里是编写`find_orfs()`的一种方法，它使用`str.index()`函数来查找每个起始密码子 *M* 后面跟着一个`*`停止密码子：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO5-1)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO5-1)'
- en: Initialize a list to hold the ORFs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个列表来保存ORFs。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO5-2)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO5-2)'
- en: Create a loop to iterate while there are start codons present.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个循环来在存在起始密码子时迭代。
- en: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO5-3)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO5-3)'
- en: Use `str.index()` to find the location of the start codon.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`str.index()`查找起始密码子的位置。
- en: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO5-4)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO5-4)'
- en: See if the stop codon is present after the start codon’s position.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 查看起始密码子位置后是否存在停止密码子。
- en: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO5-5)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO5-5)'
- en: Get the index of the stop codon after the start codon.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 获取起始密码子之后停止密码子的索引。
- en: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO5-6)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO5-6)'
- en: Use a string slice to grab the protein.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串切片来获取蛋白质。
- en: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO5-7)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO5-7)'
- en: Set the amino acid string to the index after the position of the start codon
    to find the next start codon.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将氨基酸字符串设置为起始密码子位置之后的索引，以查找下一个起始密码子。
- en: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO5-8)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO5-8)'
- en: Leave the `while` loop if there is no stop codon.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有停止密码子，退出`while`循环。
- en: 'Here is how I incorporate these ideas into the program:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我如何将这些想法整合到程序中的方法：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO6-1)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO6-1)'
- en: Iterate through the input sequences.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历输入序列。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO6-2)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO6-2)'
- en: Transcribe the DNA sequence to mRNA.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将DNA序列转录为mRNA。
- en: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO6-3)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO6-3)'
- en: Create an empty set to hold all the ORFs.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个空集合来保存所有的ORF。
- en: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO6-4)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO6-4)'
- en: Iterate through the forward and reverse complement of the mRNA.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历mRNA的正向和反向互补。
- en: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO6-5)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO6-5)'
- en: Iterate through the frameshifts.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历移码。
- en: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO6-6)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO6-6)'
- en: Attempt to translate the truncated, frame-shifted mRNA into a protein sequence.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将截断的、移码的mRNA翻译成蛋白质序列。
- en: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO6-7)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO6-7)'
- en: Iterate through each ORF found in the protein sequence.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历蛋白质序列中找到的每一个ORF。
- en: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO6-8)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO6-8)'
- en: Add the ORF to the set to maintain a unique list.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将ORF添加到集合中以保持唯一列表。
- en: '[![9](assets/9.png)](#co_finding_open_reading_frames_CO6-9)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_finding_open_reading_frames_CO6-9)'
- en: Print the sorted ORFs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 打印排序后的ORF。
- en: 'Solution 2: Using the str.partition() Function'
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案2：使用str.partition()函数
- en: 'Here is another approach to writing the `find_orfs()` function that uses `str.partition()`.
    This function breaks a string into the part before some substring, the substring,
    and the part after. For instance, the string *MAMAPR*MP** can be partitioned on
    the stop codon (`*`):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是编写`find_orfs()`函数的另一种方法，使用了`str.partition()`。此函数将字符串分成某个子字符串前的部分、子字符串本身和后面的部分。例如，字符串*MAMAPR*MP**可以在终止密码子(`*`)上进行分区：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If the protein sequence does not contain a stop codon, the function returns
    the entire sequence in the first position and empty strings for the others:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果蛋白质序列不包含终止密码子，则函数将在第一个位置返回整个序列和其他位置返回空字符串：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this version, I use two infinite loops. The first tries to partition the
    given amino acid sequence on the stop codon. If this is not successful, I exit
    the loop. [Figure 14-3](#fig_14.3) shows that the protein sequence *MAMAPR*MP**
    contains two sections that have start and end codons.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，我使用了两个无限循环。第一个尝试在终止密码子上对给定的氨基酸序列进行分区。如果这不成功，我退出循环。[图14-3](#fig_14.3)显示蛋白质序列*MAMAPR*MP**包含两个有起始和终止密码子的部分。
- en: '![mpfb 1403](assets/mpfb_1403.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1403](assets/mpfb_1403.png)'
- en: Figure 14-3\. The protein sequence MAMAPR*MP* has three ORFs in two sections
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-3。蛋白质序列*MAMAPR*MP*包含两个有起始和终止密码子的部分
- en: 'The second loop checks the first partition to find all the subsequences starting
    with the *M* start codon. So in the partition *MAMAPR*, it finds the two sequences
    *MAMAPR* and *MAPR*. The code then truncates the amino acid sequence to the last
    partition, *MP**, to repeat the operation until all ORFs have been found:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个循环检查第一个分区，以找到所有以*M*起始密码子的子序列。因此，在分区*MAMAPR*中，它找到两个序列*MAMAPR*和*MAPR*。然后，代码截断氨基酸序列到最后分区*MP**，重复操作直到找到所有ORF：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO7-1)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO7-1)'
- en: Initialize a list for the ORFs to return.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个用于返回ORF的列表。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO7-2)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO7-2)'
- en: Create the first infinite loop.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 创建第一个无限循环。
- en: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO7-3)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_finding_open_reading_frames_CO7-3)'
- en: Partition the amino acid sequence on the stop codon.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在终止密码子上对氨基酸序列进行分区。
- en: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO7-4)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_finding_open_reading_frames_CO7-4)'
- en: The middle will be empty if the stop codon is not present, so break from the
    outer loop.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果终止密码子不存在，则中间为空，因此退出外循环。
- en: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO7-5)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_finding_open_reading_frames_CO7-5)'
- en: Set a variable to remember the last position of a start codon.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个变量以记住起始密码子的最后位置。
- en: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO7-6)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_finding_open_reading_frames_CO7-6)'
- en: Create a second infinite loop.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建第二个无限循环。
- en: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO7-7)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_finding_open_reading_frames_CO7-7)'
- en: Use the `str.find()` method to locate the index of the start codon.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`str.find()`方法找到起始密码子的索引。
- en: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO7-8)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_finding_open_reading_frames_CO7-8)'
- en: The value -1 indicates that the start codon is not present, so leave the inner
    loop.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 值为-1表示起始密码子不存在，因此退出内循环。
- en: '[![9](assets/9.png)](#co_finding_open_reading_frames_CO7-9)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](assets/9.png)](#co_finding_open_reading_frames_CO7-9)'
- en: Add the substring from the start index to the list of ORFs.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将起始索引到ORF列表的子字符串添加。
- en: '[![10](assets/10.png)](#co_finding_open_reading_frames_CO7-10)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[![10](assets/10.png)](#co_finding_open_reading_frames_CO7-10)'
- en: Move the last known position to after the current start position.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 将最后已知位置移动到当前起始位置之后。
- en: '[![11](assets/11.png)](#co_finding_open_reading_frames_CO7-11)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[![11](assets/11.png)](#co_finding_open_reading_frames_CO7-11)'
- en: Truncate the protein sequence to the last part of the initial partition.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将蛋白质序列截断到初始分区的最后部分。
- en: '[![12](assets/12.png)](#co_finding_open_reading_frames_CO7-12)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[![12](assets/12.png)](#co_finding_open_reading_frames_CO7-12)'
- en: Return the ORFs to the caller.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将ORFs返回给调用者。
- en: 'Solution 3: Using a Regular Expression'
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 3：使用正则表达式
- en: 'In this final solution, I’ll once again point out that a regular expression
    is probably the most fitting solution to find a pattern of text. This pattern
    always starts with *M*, and I can use the `re.findall()` function to find the
    four *M*s in this protein sequence:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最终解决方案中，我再次指出，正则表达式可能是找到文本模式的最合适解决方案。这个模式总是以*M*开头，我可以使用`re.findall()`函数来找到这个蛋白质序列中的四个*M*：
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The Rosalind challenge does not consider noncanonical start codons, so an ORF
    will always start with an *M* and extend to the first stop codon. In between these,
    there can be zero or more not-stop codons which I can represent using a negated
    character class of `[^*]` that excludes the stop codon followed by a `*` to indicate
    that there can be *zero or more* of the preceding pattern:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Rosalind挑战不考虑非规范起始密码子，因此ORF始终以*M*开头，并延伸到第一个停止密码子。在这些之间，可以有零个或多个非停止密码子，我可以用`[^*]`的否定字符类来表示，该类排除停止密码子，后跟一个`*`以指示可以有*零个或多个*之前的模式：
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'I need to add the stop codon `*` to this pattern. Because the literal asterisk
    is a metacharacter, I must use a backslash to escape it:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要将停止密码子`*`添加到这个模式中。因为文字星号是一个元字符，我必须使用反斜杠进行转义：
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'I can also place the asterisk inside a character class where it has no meta
    meaning:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我也可以将星号放在字符类内，这样它就没有元字符的含义：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[Figure 14-4](#fig_14.4) shows this pattern using a finite state machine diagram.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[图14-4](#fig_14.4)显示了使用有限状态机图的正则表达式来找到开放阅读框的模式。'
- en: '![mpfb 1404](assets/mpfb_1404.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1404](assets/mpfb_1404.png)'
- en: Figure 14-4\. A finite state machine diagram of the regular expression to find
    an open reading frame
  id: totrans-171
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-4\. 正则表达式找到开放阅读框的有限状态机图示
- en: 'I can see that this pattern is close to working, but it’s only finding two
    of the three ORFs because the first one overlaps the second one. As in Chapters
    [8](ch08.html#ch08) and [11](ch11.html#ch11), I can wrap the pattern in a positive
    look-ahead assertion. Further, I will use parentheses to create a capture group
    around the ORF up to the stop codon:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以看到这个模式接近工作，但它只找到三个ORFs中的两个，因为第一个与第二个重叠。就像第[8章](ch08.html#ch08)和[11章](ch11.html#ch11)中一样，我可以在正向先行断言中包装模式。此外，我将使用括号创建一个围绕ORF到停止密码子的捕获组：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here is one version of the `find_orfs()` that uses this pattern:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用这个模式的`find_orfs()`的版本：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'While this passes `test_find_orfs()`, this is a complicated regex that I will
    have to relearn every time I come back to it. An alternate way to write this is
    to place each functional piece of the regex on a separate line, followed by an
    end-of-line comment, and rely on Python’s implicit string concatenation (first
    shown in [Chapter 2](ch02.html#ch02)) to join these into a single string. This
    is my preferred method to find the ORFs:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这通过了`test_find_orfs()`，但这是一个复杂的正则表达式，我每次回头都需要重新学习它。另一种编写方式是将正则表达式的每个功能部分放在单独的行上，然后跟随一条行尾注释，并依赖Python的隐式字符串连接（首次出现在[第2章](ch02.html#ch02)）将它们连接成一个字符串。这是我首选的找到开放阅读框（ORFs）的方法：
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO8-1)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_finding_open_reading_frames_CO8-1)'
- en: The parentheses group the following lines such that Python will automatically
    join the strings into a single string. Be sure there are no commas or Python will
    create a tuple.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 括号将下面的行分组，以便Python会自动将字符串连接成单个字符串。确保没有逗号，否则Python会创建一个元组。
- en: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO8-2)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_finding_open_reading_frames_CO8-2)'
- en: Use the pattern with the `re.findall()` function.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`re.findall()`函数与模式。
- en: This is a longer function, but it will be much easier to understand the next
    time I see it. One downside is that `yapf` that I use to format my code will remove
    the vertical alignment of the comments, so I must manually format this section.
    Still, I think it’s worth it to have more self-documenting code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更长的函数，但下次看到它时会更容易理解。唯一的缺点是我用来格式化代码的`yapf`会移除注释的垂直对齐，因此我必须手动格式化这部分。不过，我认为值得这样做，以获得更具自我描述性的代码。
- en: Going Further
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更进一步
- en: Expand the program to process multiple input files, writing all the unique ORFs
    to an indicated output file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展程序以处理多个输入文件，并将所有唯一的 ORFs 写入指定的输出文件。
- en: Review
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: 'Key points from this chapter:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的关键点：
- en: The `Bio.Seq.translate()` function will print warnings if the input sequence
    is not evenly divisible by three, so I wrote a `truncate()` function to trim the
    protein.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果输入序列不能被三整除，`Bio.Seq.translate()` 函数会打印警告，因此我编写了一个 `truncate()` 函数来修剪蛋白质。
- en: The `str.find()` and `str.partition()` functions each present ways to find subsequences
    in a string.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str.find()` 和 `str.partition()` 函数各自提供了在字符串中查找子序列的方法。'
- en: A regular expression remains my preferred method to find a pattern in some text.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式仍然是我在文本中查找模式的首选方法。
- en: A complicated regex can be written over multiple lines with comments so that
    Python will implicitly concatenate them into a single string.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂的正则表达式可以分行编写，并附有注释，这样Python会隐式地将它们连接成单个字符串。
