- en: Chapter 4\. Understanding Data Types in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effective data-driven science and computation requires understanding how data
    is stored and manipulated. This chapter outlines and contrasts how arrays of data
    are handled in the Python language itself, and how NumPy improves on this. Understanding
    this difference is fundamental to understanding much of the material throughout
    the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users of Python are often drawn in by its ease of use, one piece of which is
    dynamic typing. While a statically typed language like C or Java requires each
    variable to be explicitly declared, a dynamically typed language like Python skips
    this specification. For example, in C you might specify a particular operation
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'While in Python the equivalent operation could be written this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice one main difference: in C, the data types of each variable are explicitly
    declared, while in Python the types are dynamically inferred. This means, for
    example, that we can assign any kind of data to any variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we’ve switched the contents of `x` from an integer to a string. The same
    thing in C would lead (depending on compiler settings) to a compilation error
    or other unintended consequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sort of flexibility is one element that makes Python and other dynamically
    typed languages convenient and easy to use. Understanding *how* this works is
    an important piece of learning to analyze data efficiently and effectively with
    Python. But what this type flexibility also points to is the fact that Python
    variables are more than just their values; they also contain extra information
    about the *type* of the value. We’ll explore this more in the sections that follow.
  prefs: []
  type: TYPE_NORMAL
- en: A Python Integer Is More Than Just an Integer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The standard Python implementation is written in C. This means that every Python
    object is simply a cleverly disguised C structure, which contains not only its
    value, but other information as well. For example, when we define an integer in
    Python, such as `x = 10000`, `x` is not just a “raw” integer. It’s actually a
    pointer to a compound C structure, which contains several values. Looking through
    the Python 3.10 source code, we find that the integer (long) type definition effectively
    looks like this (once the C macros are expanded):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A single integer in Python 3.10 actually contains four pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ob_refcnt`, a reference count that helps Python silently handle memory allocation
    and deallocation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ob_type`, which encodes the type of the variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ob_size`, which specifies the size of the following data members'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ob_digit`, which contains the actual integer value that we expect the Python
    variable to represent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that there is some overhead involved in storing an integer in Python
    as compared to a compiled language like C, as illustrated in [Figure 4-1](#fig_images_in_cint_vs_pyint).
  prefs: []
  type: TYPE_NORMAL
- en: '![cint vs pyint](assets/cint_vs_pyint.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-1\. The difference between C and Python integers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, `PyObject_HEAD` is the part of the structure containing the reference
    count, type code, and other pieces mentioned before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the difference here: a C integer is essentially a label for a position
    in memory whose bytes encode an integer value. A Python integer is a pointer to
    a position in memory containing all the Python object information, including the
    bytes that contain the integer value. This extra information in the Python integer
    structure is what allows Python to be coded so freely and dynamically. All this
    additional information in Python types comes at a cost, however, which becomes
    especially apparent in structures that combine many of these objects.'
  prefs: []
  type: TYPE_NORMAL
- en: A Python List Is More Than Just a List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s consider now what happens when we use a Python data structure that holds
    many Python objects. The standard mutable multielement container in Python is
    the list. We can create a list of integers as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, similarly, a list of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Because of Python’s dynamic typing, we can even create heterogeneous lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'But this flexibility comes at a cost: to allow these flexible types, each item
    in the list must contain its own type, reference count, and other information.
    That is, each item is a complete Python object. In the special case that all variables
    are of the same type, much of this information is redundant, so it can be much
    more efficient to store the data in a fixed-type array. The difference between
    a dynamic-type list and a fixed-type (NumPy-style) array is illustrated in [Figure 4-2](#fig_images_in_array_vs_list).'
  prefs: []
  type: TYPE_NORMAL
- en: '![array vs list](assets/array_vs_list.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-2\. The difference between C and Python lists
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'At the implementation level, the array essentially contains a single pointer
    to one contiguous block of data. The Python list, on the other hand, contains
    a pointer to a block of pointers, each of which in turn points to a full Python
    object like the Python integer we saw earlier. Again, the advantage of the list
    is flexibility: because each list element is a full structure containing both
    data and type information, the list can be filled with data of any desired type.
    Fixed-type NumPy-style arrays lack this flexibility, but are much more efficient
    for storing and manipulating data.'
  prefs: []
  type: TYPE_NORMAL
- en: Fixed-Type Arrays in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python offers several different options for storing data in efficient, fixed-type
    data buffers. The built-in `array` module (available since Python 3.3) can be
    used to create dense arrays of a uniform type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `'i'` is a type code indicating the contents are integers.
  prefs: []
  type: TYPE_NORMAL
- en: Much more useful, however, is the `ndarray` object of the NumPy package. While
    Python’s `array` object provides efficient storage of array-based data, NumPy
    adds to this efficient *operations* on that data. We will explore these operations
    in later chapters; next, I’ll show you a few different ways of creating a NumPy
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Arrays from Python Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll start with the standard NumPy import, under the alias `np`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use `np.array` to create arrays from Python lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that unlike Python lists, NumPy arrays can only contain data of the
    same type. If the types do not match, NumPy will upcast them according to its
    type promotion rules; here, integers are upcast to floating point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to explicitly set the data type of the resulting array, we can use
    the `dtype` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, unlike Python lists, which are always one-dimensional sequences, NumPy
    arrays can be multidimensional. Here’s one way of initializing a multidimensional
    array using a list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The inner lists are treated as rows of the resulting two-dimensional array.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Arrays from Scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Especially for larger arrays, it is more efficient to create arrays from scratch
    using routines built into NumPy. Here are several examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: NumPy Standard Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NumPy arrays contain values of a single type, so it is important to have detailed
    knowledge of those types and their limitations. Because NumPy is built in C, the
    types will be familiar to users of C, Fortran, and other related languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The standard NumPy data types are listed in [Table 4-1](#table-4-1). Note that
    when constructing an array, they can be specified using a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Or using the associated NumPy object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: More advanced type specification is possible, such as specifying big- or little-endian
    numbers; for more information, refer to the [NumPy documentation](http://numpy.org).
    NumPy also supports compound data types, which will be covered in [Chapter 12](ch12.xhtml#section-0209-structured-data-numpy).
  prefs: []
  type: TYPE_NORMAL
- en: Table 4-1\. Standard NumPy data types
  prefs: []
  type: TYPE_NORMAL
- en: '| Data type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `bool_` | Boolean (True or False) stored as a byte |'
  prefs: []
  type: TYPE_TB
- en: '| `int_` | Default integer type (same as C `long`; normally either `int64`
    or `int32`) |'
  prefs: []
  type: TYPE_TB
- en: '| `intc` | Identical to C `int` (normally `int32` or `int64`) |'
  prefs: []
  type: TYPE_TB
- en: '| `intp` | Integer used for indexing (same as C `ssize_t`; normally either
    `int32` or `int64`) |'
  prefs: []
  type: TYPE_TB
- en: '| `int8` | Byte (–128 to 127) |'
  prefs: []
  type: TYPE_TB
- en: '| `int16` | Integer (–32768 to 32767) |'
  prefs: []
  type: TYPE_TB
- en: '| `int32` | Integer (–2147483648 to 2147483647) |'
  prefs: []
  type: TYPE_TB
- en: '| `int64` | Integer (–9223372036854775808 to 9223372036854775807) |'
  prefs: []
  type: TYPE_TB
- en: '| `uint8` | Unsigned integer (0 to 255) |'
  prefs: []
  type: TYPE_TB
- en: '| `uint16` | Unsigned integer (0 to 65535) |'
  prefs: []
  type: TYPE_TB
- en: '| `uint32` | Unsigned integer (0 to 4294967295) |'
  prefs: []
  type: TYPE_TB
- en: '| `uint64` | Unsigned integer (0 to 18446744073709551615) |'
  prefs: []
  type: TYPE_TB
- en: '| `float_` | Shorthand for `float64` |'
  prefs: []
  type: TYPE_TB
- en: '| `float16` | Half-precision float: sign bit, 5 bits exponent, 10 bits mantissa
    |'
  prefs: []
  type: TYPE_TB
- en: '| `float32` | Single-precision float: sign bit, 8 bits exponent, 23 bits mantissa
    |'
  prefs: []
  type: TYPE_TB
- en: '| `float64` | Double-precision float: sign bit, 11 bits exponent, 52 bits mantissa
    |'
  prefs: []
  type: TYPE_TB
- en: '| `complex_` | Shorthand for `complex128` |'
  prefs: []
  type: TYPE_TB
- en: '| `complex64` | Complex number, represented by two 32-bit floats |'
  prefs: []
  type: TYPE_TB
- en: '| `complex128` | Complex number, represented by two 64-bit floats |'
  prefs: []
  type: TYPE_TB
