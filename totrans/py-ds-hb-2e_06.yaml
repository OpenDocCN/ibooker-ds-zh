- en: Chapter 4\. Understanding Data Types in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章. 理解Python中的数据类型
- en: Effective data-driven science and computation requires understanding how data
    is stored and manipulated. This chapter outlines and contrasts how arrays of data
    are handled in the Python language itself, and how NumPy improves on this. Understanding
    this difference is fundamental to understanding much of the material throughout
    the rest of the book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的数据驱动科学和计算需要理解数据如何存储和操作。本章概述了在Python语言本身中如何处理数据数组，并介绍了NumPy在此基础上的改进。理解这种差异对于理解本书其余部分的材料至关重要。
- en: 'Users of Python are often drawn in by its ease of use, one piece of which is
    dynamic typing. While a statically typed language like C or Java requires each
    variable to be explicitly declared, a dynamically typed language like Python skips
    this specification. For example, in C you might specify a particular operation
    as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python的用户经常被其易用性所吸引，其中一个因素是动态类型。而静态类型语言如C或Java要求每个变量都必须显式声明，而像Python这样的动态类型语言则跳过了这个规范。例如，在C语言中，您可能会这样指定特定的操作：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'While in Python the equivalent operation could be written this way:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 而在Python中，等价的操作可以这样写：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice one main difference: in C, the data types of each variable are explicitly
    declared, while in Python the types are dynamically inferred. This means, for
    example, that we can assign any kind of data to any variable:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意一个主要区别：在C语言中，每个变量的数据类型都是显式声明的，而在Python中类型是动态推断的。这意味着，例如，我们可以将任何类型的数据分配给任何变量：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we’ve switched the contents of `x` from an integer to a string. The same
    thing in C would lead (depending on compiler settings) to a compilation error
    or other unintended consequences:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经将`x`的内容从整数变为字符串。在C语言中，相同操作会导致（依赖于编译器设置）编译错误或其他意外后果：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sort of flexibility is one element that makes Python and other dynamically
    typed languages convenient and easy to use. Understanding *how* this works is
    an important piece of learning to analyze data efficiently and effectively with
    Python. But what this type flexibility also points to is the fact that Python
    variables are more than just their values; they also contain extra information
    about the *type* of the value. We’ll explore this more in the sections that follow.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活性是Python和其他动态类型语言方便和易于使用的一个要素。理解*这是如何工作*是学习如何有效和有效地分析数据的重要一环。但是，这种类型灵活性也指出了Python变量不仅仅是它们的值；它们还包含关于值的*类型*的额外信息。我们将在接下来的章节中更多地探讨这一点。
- en: A Python Integer Is More Than Just an Integer
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python整数不仅仅是一个整数
- en: 'The standard Python implementation is written in C. This means that every Python
    object is simply a cleverly disguised C structure, which contains not only its
    value, but other information as well. For example, when we define an integer in
    Python, such as `x = 10000`, `x` is not just a “raw” integer. It’s actually a
    pointer to a compound C structure, which contains several values. Looking through
    the Python 3.10 source code, we find that the integer (long) type definition effectively
    looks like this (once the C macros are expanded):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的Python实现是用C编写的。这意味着每个Python对象实际上是一个巧妙伪装的C结构，不仅包含其值，还包含其他信息。例如，当我们在Python中定义一个整数，如`x
    = 10000`，`x`不只是一个“原始”整数。它实际上是一个指向复合C结构的指针，该结构包含几个值。浏览Python 3.10源代码时，我们发现整数（long）类型定义实际上看起来是这样的（一旦C宏被展开）：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A single integer in Python 3.10 actually contains four pieces:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.10中，一个单独的整数实际上包含四个部分：
- en: '`ob_refcnt`, a reference count that helps Python silently handle memory allocation
    and deallocation'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ob_refcnt`，一个引用计数，帮助Python静默处理内存分配和释放'
- en: '`ob_type`, which encodes the type of the variable'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ob_type`，编码变量的类型'
- en: '`ob_size`, which specifies the size of the following data members'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ob_size`指定了接下来的数据成员的大小。'
- en: '`ob_digit`, which contains the actual integer value that we expect the Python
    variable to represent'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ob_digit`包含了我们期望Python变量表示的实际整数值。'
- en: This means that there is some overhead involved in storing an integer in Python
    as compared to a compiled language like C, as illustrated in [Figure 4-1](#fig_images_in_cint_vs_pyint).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在Python中存储整数与在编译语言如C中的存储相比，会有一些额外开销，正如[图4-1](#fig_images_in_cint_vs_pyint)所示。
- en: '![cint vs pyint](assets/cint_vs_pyint.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![cint vs pyint](assets/cint_vs_pyint.png)'
- en: Figure 4-1\. The difference between C and Python integers
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-1. C和Python整数的差异
- en: Here, `PyObject_HEAD` is the part of the structure containing the reference
    count, type code, and other pieces mentioned before.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`PyObject_HEAD` 是包含引用计数、类型代码和之前提到的其他部分的结构的一部分。
- en: 'Notice the difference here: a C integer is essentially a label for a position
    in memory whose bytes encode an integer value. A Python integer is a pointer to
    a position in memory containing all the Python object information, including the
    bytes that contain the integer value. This extra information in the Python integer
    structure is what allows Python to be coded so freely and dynamically. All this
    additional information in Python types comes at a cost, however, which becomes
    especially apparent in structures that combine many of these objects.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里的区别：C 整数本质上是一个标签，指向内存中的一个位置，其字节编码包含一个整数值。Python 整数是指向内存中包含所有 Python 对象信息的位置的指针，包括包含整数值的字节。Python
    整数结构中的这些额外信息是允许 Python 如此自由和动态编码的原因。然而，Python 类型中的所有这些额外信息都是有代价的，特别是在结合许多这些对象的结构中尤为明显。
- en: A Python List Is More Than Just a List
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表不仅仅是一个列表
- en: 'Let’s consider now what happens when we use a Python data structure that holds
    many Python objects. The standard mutable multielement container in Python is
    the list. We can create a list of integers as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑当我们使用一个包含许多 Python 对象的 Python 数据结构时会发生什么。Python 中标准的可变多元素容器是列表。我们可以按照以下方式创建一个整数列表：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or, similarly, a list of strings:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，类似地，一个字符串列表：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Because of Python’s dynamic typing, we can even create heterogeneous lists:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 的动态类型，我们甚至可以创建异构列表：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'But this flexibility comes at a cost: to allow these flexible types, each item
    in the list must contain its own type, reference count, and other information.
    That is, each item is a complete Python object. In the special case that all variables
    are of the same type, much of this information is redundant, so it can be much
    more efficient to store the data in a fixed-type array. The difference between
    a dynamic-type list and a fixed-type (NumPy-style) array is illustrated in [Figure 4-2](#fig_images_in_array_vs_list).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种灵活性是有代价的：为了允许这些灵活的类型，列表中的每个项目都必须包含自己的类型、引用计数和其他信息。也就是说，每个项目都是一个完整的 Python
    对象。在所有变量都是相同类型的特殊情况下，大部分信息是冗余的，因此将数据存储在固定类型的数组中可能更有效。动态类型列表和固定类型（NumPy 风格）数组之间的区别在
    [图 4-2](#fig_images_in_array_vs_list) 中有所说明。
- en: '![array vs list](assets/array_vs_list.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![array vs list](assets/array_vs_list.png)'
- en: Figure 4-2\. The difference between C and Python lists
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-2\. C 和 Python 列表之间的区别
- en: 'At the implementation level, the array essentially contains a single pointer
    to one contiguous block of data. The Python list, on the other hand, contains
    a pointer to a block of pointers, each of which in turn points to a full Python
    object like the Python integer we saw earlier. Again, the advantage of the list
    is flexibility: because each list element is a full structure containing both
    data and type information, the list can be filled with data of any desired type.
    Fixed-type NumPy-style arrays lack this flexibility, but are much more efficient
    for storing and manipulating data.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现级别上，数组基本上包含一个指向一个连续数据块的单个指针。另一方面，Python 列表包含一个指向指针块的指针，每个指针又指向一个完整的 Python
    对象，就像我们之前看到的 Python 整数一样。再次强调列表的优势在于灵活性：因为每个列表元素都是一个包含数据和类型信息的完整结构，所以列表可以填充任何所需类型的数据。固定类型的
    NumPy 风格数组缺乏这种灵活性，但对于存储和操作数据来说更加高效。
- en: Fixed-Type Arrays in Python
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的固定类型数组
- en: 'Python offers several different options for storing data in efficient, fixed-type
    data buffers. The built-in `array` module (available since Python 3.3) can be
    used to create dense arrays of a uniform type:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了几种不同的选项来在高效的固定类型数据缓冲区中存储数据。内置的 `array` 模块（自 Python 3.3 起可用）可用于创建统一类型的密集数组：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `'i'` is a type code indicating the contents are integers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`'i'` 是指示内容为整数的类型代码。
- en: Much more useful, however, is the `ndarray` object of the NumPy package. While
    Python’s `array` object provides efficient storage of array-based data, NumPy
    adds to this efficient *operations* on that data. We will explore these operations
    in later chapters; next, I’ll show you a few different ways of creating a NumPy
    array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，更有用的是 NumPy 包的 `ndarray` 对象。虽然 Python 的 `array` 对象提供了对基于数组的数据的有效存储，但 NumPy
    在此基础上添加了对该数据的有效*操作*。我们将在后面的章节中探讨这些操作；接下来，我将向您展示创建 NumPy 数组的几种不同方法。
- en: Creating Arrays from Python Lists
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Python 列表创建数组
- en: 'We’ll start with the standard NumPy import, under the alias `np`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从标准的 NumPy 导入开始，使用别名 `np`：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can use `np.array` to create arrays from Python lists:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `np.array` 来从 Python 列表创建数组：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Remember that unlike Python lists, NumPy arrays can only contain data of the
    same type. If the types do not match, NumPy will upcast them according to its
    type promotion rules; here, integers are upcast to floating point:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，与 Python 列表不同，NumPy 数组只能包含相同类型的数据。如果类型不匹配，NumPy 将根据其类型提升规则进行类型提升；在这里，整数被提升为浮点数：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we want to explicitly set the data type of the resulting array, we can use
    the `dtype` keyword:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要显式地设置结果数组的数据类型，可以使用 `dtype` 关键字：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, unlike Python lists, which are always one-dimensional sequences, NumPy
    arrays can be multidimensional. Here’s one way of initializing a multidimensional
    array using a list of lists:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，与 Python 列表不同，NumPy 数组可以是多维的。以下是使用列表的列表初始化多维数组的一种方法：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The inner lists are treated as rows of the resulting two-dimensional array.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 内部列表被视为生成的二维数组的行。
- en: Creating Arrays from Scratch
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头创建数组
- en: 'Especially for larger arrays, it is more efficient to create arrays from scratch
    using routines built into NumPy. Here are several examples:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于较大的数组，使用 NumPy 内置的函数从头创建数组更有效率。以下是几个示例：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: NumPy Standard Data Types
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 标准数据类型
- en: NumPy arrays contain values of a single type, so it is important to have detailed
    knowledge of those types and their limitations. Because NumPy is built in C, the
    types will be familiar to users of C, Fortran, and other related languages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组包含单一类型的值，因此对这些类型及其限制有详细了解很重要。因为 NumPy 是用 C 语言构建的，所以这些类型对于使用 C、Fortran
    和其他相关语言的用户来说应该很熟悉。
- en: 'The standard NumPy data types are listed in [Table 4-1](#table-4-1). Note that
    when constructing an array, they can be specified using a string:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的 NumPy 数据类型列在 [表 4-1](#table-4-1) 中。注意，在构建数组时，它们可以使用字符串来指定：
- en: '[PRE26]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or using the associated NumPy object:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用相关的 NumPy 对象：
- en: '[PRE27]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: More advanced type specification is possible, such as specifying big- or little-endian
    numbers; for more information, refer to the [NumPy documentation](http://numpy.org).
    NumPy also supports compound data types, which will be covered in [Chapter 12](ch12.xhtml#section-0209-structured-data-numpy).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以进行更高级的类型规定，例如指定大端或小端数字；有关更多信息，请参阅 [NumPy 文档](http://numpy.org)。NumPy 还支持复合数据类型，这将在
    [第 12 章](ch12.xhtml#section-0209-structured-data-numpy) 中介绍。
- en: Table 4-1\. Standard NumPy data types
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1\. 标准的 NumPy 数据类型
- en: '| Data type | Description |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `bool_` | Boolean (True or False) stored as a byte |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `bool_` | 存储为字节的布尔值（True 或 False） |'
- en: '| `int_` | Default integer type (same as C `long`; normally either `int64`
    or `int32`) |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `int_` | 默认整数类型（与 C 语言的 `long` 相同；通常是 `int64` 或 `int32`） |'
- en: '| `intc` | Identical to C `int` (normally `int32` or `int64`) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `intc` | 与 C 语言 `int` 相同（通常是 `int32` 或 `int64`） |'
- en: '| `intp` | Integer used for indexing (same as C `ssize_t`; normally either
    `int32` or `int64`) |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `intp` | 用于索引的整数（与 C 语言的 `ssize_t` 相同；通常是 `int32` 或 `int64`） |'
- en: '| `int8` | Byte (–128 to 127) |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `int8` | 字节（–128 到 127） |'
- en: '| `int16` | Integer (–32768 to 32767) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `int16` | 整数（–32768 到 32767） |'
- en: '| `int32` | Integer (–2147483648 to 2147483647) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `int32` | 整数（–2147483648 到 2147483647） |'
- en: '| `int64` | Integer (–9223372036854775808 to 9223372036854775807) |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `int64` | 整数（–9223372036854775808 到 9223372036854775807） |'
- en: '| `uint8` | Unsigned integer (0 to 255) |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `uint8` | 无符号整数（0 到 255） |'
- en: '| `uint16` | Unsigned integer (0 to 65535) |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `uint16` | 无符号整数（0 到 65535） |'
- en: '| `uint32` | Unsigned integer (0 to 4294967295) |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `uint32` | 无符号整数（0 到 4294967295） |'
- en: '| `uint64` | Unsigned integer (0 to 18446744073709551615) |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `uint64` | 无符号整数（0 到 18446744073709551615） |'
- en: '| `float_` | Shorthand for `float64` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `float_` | `float64` 的简写 |'
- en: '| `float16` | Half-precision float: sign bit, 5 bits exponent, 10 bits mantissa
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `float16` | 半精度浮点数：符号位，5 位指数，10 位尾数 |'
- en: '| `float32` | Single-precision float: sign bit, 8 bits exponent, 23 bits mantissa
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `float32` | 单精度浮点数：符号位，8 位指数，23 位尾数 |'
- en: '| `float64` | Double-precision float: sign bit, 11 bits exponent, 52 bits mantissa
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `float64` | 双精度浮点数：符号位，11 位指数，52 位尾数 |'
- en: '| `complex_` | Shorthand for `complex128` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `complex_` | `complex128` 的简写 |'
- en: '| `complex64` | Complex number, represented by two 32-bit floats |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `complex64` | 复数，由两个 32 位浮点数表示 |'
- en: '| `complex128` | Complex number, represented by two 64-bit floats |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `complex128` | 复数，由两个 64 位浮点数表示 |'
