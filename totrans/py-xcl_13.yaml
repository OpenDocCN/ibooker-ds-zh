- en: Chapter 10\. Python-Powered Excel Tools
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 10 章 Python 驱动的 Excel 工具
- en: In the last chapter, we learned how to write Python scripts to automate Microsoft
    Excel. While this is very powerful, the user must feel comfortable using either
    the Anaconda Prompt or an editor like VS Code to run the scripts. This is most
    likely not the case if your tools are used by business users. For them, you’ll
    want to hide away the Python part so that the Excel tool feels like a normal macro-enabled
    workbook again. How you achieve that with xlwings is the topic of this chapter.
    I’ll start by showing you the shortest path to run Python code from Excel before
    looking at the challenges of deploying xlwings tools—this will also allow us to
    have a more detailed look at the available settings that xlwings offers. Like
    the last chapter, this chapter requires you to have an installation of Microsoft
    Excel on either Windows or macOS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何编写 Python 脚本来自动化 Microsoft Excel。虽然这非常强大，但用户必须习惯使用 Anaconda Prompt
    或像 VS Code 这样的编辑器来运行脚本。如果您的工具是由业务用户使用，情况可能不会如此。对于他们，您希望隐藏 Python 部分，使 Excel 工具再次感觉像一个普通的启用宏的工作簿。如何通过
    xlwings 实现这一点是本章的主题。在查看 xlwings 工具部署的挑战之前，我将首先向您展示从 Excel 运行 Python 代码的最短路径——这也将使我们更详细地了解
    xlwings 提供的可用设置。与上一章类似，本章要求您在 Windows 或 macOS 上安装 Microsoft Excel。
- en: Using Excel as Frontend with xlwings
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Excel 作为前端与 xlwings
- en: 'The frontend is the part of an application that a user sees and interacts with.
    Other common names for frontend are graphical user interface (GUI) or just user
    interface (UI). When I ask xlwings users why they are creating their tool with
    Excel rather than building a modern web application, what I usually hear is this:
    “Excel is the interface that our users are familiar with.” Relying on spreadsheet
    cells allows the users to provide inputs quickly and intuitively, making them
    often more productive than if they have to use a half-baked web interface. I’ll
    start this section by introducing you to the xlwings Excel add-in and the xlwings
    CLI (command line interface) before creating our first project via the `quickstart`
    command. I’ll wrap this section up by showing you two ways of calling Python code
    from Excel: by clicking the Run main button in the add-in and by using the `RunPython`
    function in VBA. Let’s get started by installing the xlwings Excel add-in!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 前端是应用程序中用户看到并与之交互的部分。其他常见的前端名称包括图形用户界面（GUI）或用户界面（UI）。当我问 xlwings 用户为什么要用 Excel
    创建他们的工具，而不是构建现代 Web 应用程序时，我通常听到的答案是：“Excel 是我们的用户熟悉的界面。” 依赖电子表格单元格使用户能够快速直观地提供输入，这使他们通常比使用简陋的
    Web 界面更高效。在介绍 xlwings Excel 插件和 xlwings 命令行界面（CLI）之前，我将从`quickstart`命令创建我们的第一个项目。在结束本节之前，我将向您展示两种从
    Excel 调用 Python 代码的方法：通过单击插件中的“运行主”按钮和使用 VBA 中的`RunPython`函数。让我们通过安装 xlwings Excel
    插件来开始吧！
- en: Excel Add-in
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 插件
- en: 'Since xlwings is included in the Anaconda distribution, in the previous chapter,
    we could run xlwings commands in Python right out of the box. If you, however,
    want to call Python scripts from Excel, you need to either install the Excel add-in
    or set the workbook up in the standalone mode. While I will introduce the standalone
    mode under [“Deployment”](#filepos1471908), this section shows you how to work
    with the add-in. To install it, run the following on an Anaconda Prompt:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 xlwings 包含在 Anaconda 发行版中，在上一章中，我们可以直接在 Python 中运行 xlwings 命令。然而，如果您希望从 Excel
    调用 Python 脚本，则需要安装 Excel 插件或在独立模式下设置工作簿。虽然我将在 [“部署”](#filepos1471908) 中介绍独立模式，但本节向您展示如何使用插件。要安装插件，请在
    Anaconda Prompt 上运行以下命令：
- en: '`(base)>` `xlwings addin install`'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `xlwings addin install`'
- en: 'You will need to keep the version of the Python package and the version of
    the add-in in sync whenever you update xlwings. Therefore, you should always run
    two commands when you update xlwings—one for the Python package and one for the
    Excel add-in. Depending on whether you use the Conda or pip package manager, this
    is how you update your xlwings installation:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每当更新 xlwings 时，您需要保持 Python 包的版本和 Excel 插件的版本同步。因此，更新 xlwings 时，您应该始终运行两个命令——一个用于
    Python 包，另一个用于 Excel 插件。根据您使用的是 Conda 还是 pip 包管理器，这是更新 xlwings 安装的方式：
- en: Conda (use this with the Anaconda Python distribution)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Conda（与 Anaconda Python 发行版一起使用）
- en: '`(base)>` `conda update xlwings` `(base)>` `xlwings addin install`'
  id: totrans-9
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `conda update xlwings` `(base)>` `xlwings addin install`'
- en: pip (use this with any other Python distribution)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: pip（与任何其他 Python 发行版一起使用）
- en: '`(base)>` `pip install --upgrade xlwings` `(base)>` `xlwings addin install`'
  id: totrans-11
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `pip install --upgrade xlwings` `(base)>` `xlwings addin install`'
- en: ANTIVIRUS SOFTWARE
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 杀毒软件
- en: Unfortunately, the xlwings add-in is sometimes flagged as a malicious add-in
    by antivirus software, especially if you’re using a brand-new release. If this
    happens on your machine, go to the settings of your antivirus software, where
    you should be able to mark xlwings as safe to run. Usually, it’s also possible
    to report such false positives via the software’s home page.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，有时候 xlwings 插件会被杀毒软件标记为恶意插件，特别是如果你使用的是全新版本。如果这种情况发生在你的电脑上，请转到杀毒软件的设置，在那里你应该能够将
    xlwings 标记为安全运行。通常，你也可以通过软件的主页报告此类误报。
- en: 'When you type `xlwings` on an Anaconda Prompt, you are using the xlwings CLI.
    Apart from making the installation of the xlwings add-in easy, it offers a few
    more commands: I will introduce them whenever we need them, but you can always
    type `xlwings` on an Anaconda Prompt and hit Enter to print the available options.
    Let’s now have a closer look at what `xlwings addin install` does:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Anaconda Prompt 上输入`xlwings`时，你正在使用 xlwings CLI。除了使 xlwings 插件的安装变得容易之外，它还提供了一些其他命令：我将在我们需要时介绍它们，但你随时可以在
    Anaconda Prompt 上输入`xlwings`并按 Enter 键以打印可用选项。现在让我们更仔细地看看`xlwings addin install`做了什么：
- en: Installation
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装
- en: 'The actual installation of the add-in is done by copying xlwings.xlam from
    the directory of the Python package into Excel’s XLSTART folder, which is a special
    folder: Excel will open all files that are in this folder every time you start
    Excel. When you run `xlwings addin status` on an Anaconda Prompt, it will print
    where the XLSTART directory is on your system and whether or not the add-in is
    installed.'
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 插件的实际安装是通过将 xlwings.xlam 从 Python 包目录复制到 Excel 的 XLSTART 文件夹中完成的，这是一个特殊的文件夹：Excel
    将在每次启动 Excel 时打开该文件夹中的所有文件。当你在 Anaconda Prompt 上运行`xlwings addin status`时，它会打印
    XLSTART 目录在你系统上的位置以及插件是否已安装。
- en: Configuration
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 配置
- en: 'When you install the add-in for the very first time, it will also configure
    it to use the Python interpreter or Conda environment from where you are running
    the `install` command: as you see in [Figure 10-1](#filepos1447147), the values
    for `Conda Path` and `Conda Env` are filled in automatically by the xlwings CLI.[1](#filepos1486934)
    These values are stored in a file called xlwings.conf in the .xlwings folder in
    your home directory. On Windows, this is usually C:\Users\<username>\.xlwings\xlwings.conf
    and on macOS /Users/<username>/.xlwings/xlwings.conf. On macOS, folders and files
    with a leading dot are hidden by default. When you are in Finder, type the keyboard
    shortcut Command-Shift-. to toggle their visibility.'
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你首次安装插件时，它也会配置使用你运行`install`命令的 Python 解释器或 Conda 环境：就像你在[图 10-1](#filepos1447147)中看到的那样，`Conda
    Path` 和 `Conda Env` 的值会被 xlwings CLI 自动填入。[1](#filepos1486934) 这些值会存储在一个名为 xlwings.conf
    的文件中，该文件位于你的主目录中的 .xlwings 文件夹中。在 Windows 上，这通常是 C:\Users\<用户名>\.xlwings\xlwings.conf，在
    macOS 上是 /Users/<用户名>/.xlwings/xlwings.conf。在 macOS 上，以点开头的文件和文件夹默认是隐藏的。当你在 Finder
    中时，按下键盘快捷键 Command-Shift-. 即可切换它们的可见性。
- en: After running the installation command, you’ll have to restart Excel to see
    the xlwings tab in the ribbon as shown in [Figure 10-1](#filepos1447147).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行安装命令后，你需要重新启动 Excel 才能看到功能区中的 xlwings 选项卡，如[图 10-1](#filepos1447147)所示。
- en: '![](images/00040.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00040.jpg)'
- en: Figure 10-1\. The xlwings ribbon add-in after running the install command
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-1\. 运行安装命令后的 xlwings 功能区插件
- en: THE RIBBON ADD-IN ON MACOS
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: macOS 上的功能区插件
- en: 'On macOS, the ribbon looks a bit different as it’s missing the sections about
    user-defined functions and Conda: while user-defined functions are not supported
    on macOS, Conda environments don’t require special treatment, i.e., are configured
    as Interpreter under the Python group.'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，由于缺少关于用户定义函数和 Conda 的部分，功能区看起来有些不同：虽然 macOS 不支持用户定义函数，但 Conda 环境不需要特殊处理，即被配置为
    Python 组下的 Interpreter。
- en: Now that you have the xlwings add-in installed, we’ll need a workbook and some
    Python code to test it out. The fastest way of getting there is by using the `quickstart`
    command, as I will show you next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 xlwings 插件，我们需要一个工作簿和一些 Python 代码来测试它。最快的方法是使用`quickstart`命令，接下来我将向你展示。
- en: Quickstart Command
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 快速开始命令
- en: 'To make the creation of your first xlwings tool as easy as possible, the xlwings
    CLI offers the `quickstart` command. On an Anaconda Prompt, use the `cd` command
    to change into the directory where you want to create your first project (e.g.,
    `cd Desktop`), then run the following to create a project with the name `first_project`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings quickstart first_project`'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The project name has to be a valid Python module name: it can contain characters,
    numbers, and underscores, but no spaces or dashes, and it must not start with
    a number. I will show you under [“RunPython Function”](#filepos1459239) how you
    can change the name of the Excel file into something that doesn’t have to follow
    these rules. Running the `quickstart` command will create a folder called first_project
    in your current directory. When you open it in the File Explorer on Windows or
    the Finder on macOS, you will see two files: first_project.xlsm and first_project.py.
    Open both files—the Excel file in Excel and the Python file in VS Code. The easiest
    way to run the Python code from Excel is by using the Run main button in the add-in—let’s
    see how it works!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Run Main
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Before looking at first_project.py in more detail, go ahead and click the Run
    main button on the very left of the xlwings add-in while first_project.xlsm is
    your active file; it will write “Hello xlwings!” into cell `A1` of the first sheet.
    Click the button again and it will change to “Bye xlwings!” Congratulations, you
    have just run your first Python function from Excel! After all, that wasn’t much
    harder than writing a VBA macro, was it? Let’s now have a look at first_project.py
    in [Example 10-1](#filepos1450512).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-1\. first_project.py
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``def``main``():``wb``=``xw``.``Book``.``caller``()`![](images/00031.jpg)`sheet``=``wb``.``sheets``[``0``]``if``sheet``[``"A1"``]``.``value``==``"Hello
    xlwings!"``:``sheet``[``"A1"``]``.``value``=``"Bye xlwings!"``else``:``sheet``[``"A1"``]``.``value``=``"Hello
    xlwings!"``@xw.func`![](images/00039.jpg)`def``hello``(``name``):``return``f``"Hello
    {name}!"`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`if` `__name__` `==``"__main__"``:`![](images/00050.jpg)`xw``.``Book``(``"first_project.xlsm"``)``.``set_mock_caller``()``main``()`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: '`xw.Book.caller()` is an xlwings `book` object that refers to the Excel workbook
    that is active when you click the Run main button. In our case, it corresponds
    to `xw.Book("first_project.xlsm")`. Using `xw.Book.caller()` allows you to rename
    and move your Excel file around on the file system without breaking the reference.
    It also makes sure that you are manipulating the correct workbook if you have
    it open in multiple Excel instances.'
  id: totrans-35
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we will ignore the function `hello` as this will be the topic
    of [Chapter 12](index_split_028.html#filepos1653100). If you run the `quickstart`
    command on macOS, you won’t see the `hello` function anyway, as user-defined functions
    are only supported on Windows.
  id: totrans-37
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00050.jpg)'
- en: I will explain the last three lines when we look at debugging in the next chapter.
    For the purpose of this chapter, ignore or even delete everything below the first
    function.
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在下一章讨论调试时，我将解释最后三行内容。在本章的目的上，忽略甚至删除第一个函数以下的所有内容。
- en: 'The Run main button in the Excel add-in is a convenience feature: it allows
    you to call a function with the name `main` in a Python module that has the same
    name as the Excel file without having to add a button first to your workbook.
    It will even work if you save your workbook in the macro-free xlsx format. If,
    however, you want to call one or more Python functions that are not called `main`
    and are not part of a module with the same name as the workbook, you have to use
    the `RunPython` function from VBA instead. The next section has the details!'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Excel加载项中的Run主按钮是一个便利功能：它允许你调用Python模块中与Excel文件同名的`main`函数，而无需首先向工作簿添加按钮。即使你将工作簿保存为无宏的xlsx格式，它也能正常工作。但是，如果你想调用一个或多个不叫`main`且不属于与工作簿同名模块的Python函数，你必须使用VBA中的`RunPython`函数。接下来的部分详细介绍了相关内容！
- en: RunPython Function
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: RunPython函数
- en: If you need more control over how you call your Python code, use the VBA function
    `RunPython`. Consequently, `RunPython` requires your workbook to be saved as a
    macro-enabled workbook.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多控制如何调用你的Python代码，可以使用VBA函数`RunPython`。因此，`RunPython`要求你的工作簿保存为启用宏的工作簿。
- en: ENABLE MACROS
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 启用宏
- en: You need to click on Enable Content (Windows) or Enable Macros (macOS) when
    you open a macro-enabled workbook (xlsm extension) such as the one that is generated
    by the `quickstart` command. On Windows, when you work with xlsm files from the
    companion repository, you have to additionally click on Enable Editing or Excel
    won’t open files that are downloaded from the internet properly.
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你打开一个启用宏的工作簿（xlsm扩展名）时（例如通过`quickstart`命令生成的工作簿），你需要点击“启用内容”（Windows）或“启用宏”（macOS）。在Windows上，当你使用伴随库中的xlsm文件时，你还必须点击“启用编辑”，否则Excel无法正确打开从互联网下载的文件。
- en: '`RunPython` accepts a string with Python code: most commonly, you import a
    Python module and run one of its functions. When you open the VBA editor via Alt+F11
    (Windows) or Option-F11 (macOS), you will see that the `quickstart` command adds
    a macro called `SampleCall` in a VBA module with the name “Module1” (see [Figure 10-2](#filepos1460941)).
    If you don’t see the `SampleCall`, double-click Module1 in the VBA project tree
    on the lefthand side.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`RunPython`接受一个包含Python代码的字符串：通常情况下，你会导入一个Python模块并运行其中的一个函数。当你通过Alt+F11（Windows）或Option-F11（macOS）打开VBA编辑器时，你会看到`quickstart`命令在名为“Module1”的VBA模块中添加了一个名为`SampleCall`的宏（参见[Figure 10-2](#filepos1460941)）。如果你看不到`SampleCall`，请在左侧的VBA项目树中双击Module1。'
- en: '![](images/00032.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00032.jpg)'
- en: Figure 10-2\. The VBA editor showing Module1
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-2\. VBA编辑器显示Module1
- en: 'The code looks a bit convoluted, but this is only to make it work dynamically
    no matter what project name you choose when running the `quickstart` command.
    As our Python module is called `first_project`, you could replace the code with
    the following easy-to-understand equivalent:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来有些复杂，但这仅是为了使其能动态工作，无论你在运行`quickstart`命令时选择了什么项目名称。由于我们的Python模块名为`first_project`，你可以用以下易于理解的等效代码替换它：
- en: '`Sub``SampleCall``()``RunPython``"import first_project; first_project.main()"``End``Sub`'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Sub``SampleCall``()``RunPython``"import first_project; first_project.main()"``End``Sub`'
- en: 'Since it’s no fun to write multiline strings in VBA, we use a semicolon that
    Python accepts instead of a line break. There are a couple of ways you can run
    this code: for example, while you are in the VBA editor, place your cursor on
    any line of the `SampleCall` macro and hit F5\. Usually, however, you will be
    running the code from an Excel sheet and not from the VBA editor. Therefore, close
    the VBA editor and switch back to the workbook. Typing Alt+F8 (Windows) or Option-F8
    (macOS) will bring up the macro menu: select `SampleCall` and click on the Run
    button. Or, to make it more user-friendly, add a button to your Excel workbook
    and connect it with the `SampleCall`: first, make sure that the Developer tab
    in the ribbon is shown. If it isn’t, go to `File` > Options > Customize Ribbon
    and activate the checkbox next to Developer (on macOS, you’ll find it under Excel
    > Preferences > Ribbon & Toolbar instead). To insert a button, go to the Developer
    tab and in the Controls group, click on Insert > Button (under Form Controls).
    On macOS, you’ll be presented with the button without having to go to Insert first.
    When you click the button icon, your cursor turns into a small cross: use it to
    draw a button on your sheet by holding your left mouse button down while drawing
    a rectangular form. Once you let go of your mouse button, you’ll be presented
    with the Assign Macro menu—select the `SampleCall` and click OK. Click the button
    that you’ve just created (in my case it’s called “Button 1”), and it will run
    our `main` function again, as in [Figure 10-3](#filepos1464065).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在VBA中写多行字符串并不好玩，我们使用了Python接受的分号而不是换行符。你可以有几种方式运行这段代码：例如，在VBA编辑器中时，将光标放在`SampleCall`宏的任一行上，然后按F5。通常情况下，你会从Excel工作表而不是VBA编辑器运行代码。因此，关闭VBA编辑器并切换回工作簿。在Windows上，键入Alt+F8或macOS上的Option-F8将显示宏菜单：选择`SampleCall`并点击运行按钮。或者，为了使其更加用户友好，在你的Excel工作簿中添加一个按钮并将其与`SampleCall`连接起来：首先确保在功能区中显示了开发人员选项卡。如果没有显示，请转到`文件`
    > `选项` > `自定义功能区`并激活开发人员旁边的复选框（在macOS上，你可以在Excel > `首选项` > `功能区和工具栏`下找到它）。要插入按钮，请转到开发人员选项卡，在控件组中点击`插入`
    > `按钮`（在表单控件下）。在macOS上，你将直接看到按钮，无需先进入插入选项。当你点击按钮图标时，你的光标会变成一个小十字：使用它通过按住左键并绘制一个矩形形状在你的工作表上绘制一个按钮。一旦释放鼠标按钮，你将看到分配宏菜单——选择`SampleCall`并点击确定。点击你刚刚创建的按钮（在我的情况下是“Button
    1”），它将再次运行我们的`main`函数，就像在[图10-3](#filepos1464065)中一样。
- en: '![](images/00060.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00060.jpg)'
- en: Figure 10-3\. Drawing a button on a sheet
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-3。在工作表上绘制按钮
- en: FORM CONTROLS VS. ACTIVEX CONTROLS
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: FORM CONTROLS VS. ACTIVEX CONTROLS
- en: 'On Windows, you have two types of controls: Form Controls and ActiveX Controls.
    While you could use a button from either group to connect to your `SampleCall`
    macro, only the one from the Form Controls will work on macOS too. In the next
    chapter, we will use Rectangles as buttons to make them look a bit more modern.'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在Windows上，你有两种类型的控件：表单控件和ActiveX控件。虽然你可以从任一组中使用按钮连接到你的`SampleCall`宏，但只有来自表单控件的按钮在macOS上也能正常工作。在下一章中，我们将使用矩形作为按钮，使其看起来更现代化。
- en: 'Now let’s take a look at how we can change the default names that were assigned
    by the `quickstart` command: go back to your Python file and rename it from first_project.py
    to hello.py. Also, rename your `main` function into `hello_world`. Make sure to
    save the file, then open the VBA editor again via Alt+F11 (Windows) or Option-F11
    (macOS) and edit `SampleCall` as follows to reflect the changes:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何更改由`quickstart`命令分配的默认名称：返回到你的Python文件，并将其从`first_project.py`重命名为`hello.py`。同时，将你的`main`函数改名为`hello_world`。确保保存文件，然后再次通过Alt+F11（Windows）或Option-F11（macOS）打开VBA编辑器，并编辑`SampleCall`如下以反映这些更改：
- en: '`Sub``SampleCall``()``RunPython``"import hello; hello.hello_world()"``End``Sub`'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Sub``SampleCall``()``RunPython``"import hello; hello.hello_world()"``End``Sub`'
- en: 'Back on the sheet, click the “Button 1” to make sure that everything still
    works. Finally, you may also want to keep the Python script and the Excel file
    in two different directories. To understand the implications of this, I’ll first
    need to say a word about Python’s module search path: if you import a module in
    your code, Python searches for it in various directories. First, Python checks
    if there is a built-in module with this name, and if it doesn’t find one, moves
    on to look in the current working directory and in the directories provided by
    the so-called `PYTHONPATH`. xlwings automatically adds the directory of the workbook
    to the `PYTHONPATH` and allows you to add additional paths via the add-in. To
    try this out, take the Python script that is now called hello.py and move it to
    a folder called pyscripts that you create under your home directory: in my case,
    this would be C:\Users\felix\pyscripts on Windows or /Users/felix/pyscripts on
    macOS. When you now click the button again, you will get the following error in
    a pop-up:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 回到表格，点击“按钮 1”确保一切正常。最后，您可能还希望将 Python 脚本和 Excel 文件保存在两个不同的目录中。要理解这一点的含义，我首先需要简单介绍一下
    Python 的模块搜索路径：如果在您的代码中导入一个模块，Python 会在各个目录中查找它。首先，Python 会检查是否有内置模块与此名称相匹配，如果找不到，则继续查找当前工作目录和所谓的`PYTHONPATH`中的目录。xlwings
    会自动将工作簿的目录添加到`PYTHONPATH`，并允许您通过插件添加额外的路径。要尝试这一功能，请将现在名为 hello.py 的 Python 脚本移动到一个名为
    pyscripts 的文件夹中，该文件夹位于您的主目录下：在我的情况下，这将是 Windows 上的 C:\Users\felix\pyscripts 或
    macOS 上的 /Users/felix/pyscripts。现在再次点击按钮时，您将在弹出窗口中收到以下错误：
- en: '`Traceback (most recent call last):   File "<string>", line 1, in <module>
    ModuleNotFoundError: No module named ''first_project''`'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Traceback (most recent call last):   File "<string>", line 1, in <module>
    ModuleNotFoundError: No module named ''first_project''`'
- en: To fix this, simply add the path of the pyscripts directory to the `PYTHONPATH`
    setting in your xlwings ribbon, as in [Figure 10-4](#filepos1467883). When you
    now click the button one more time, it will work again.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此问题，只需在 xlwings 标签中的`PYTHONPATH`设置中添加 pyscripts 目录的路径，如[图 10-4](#filepos1467883)所示。现在再次单击按钮时，它将再次正常工作。
- en: '![](images/00033.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00033.jpg)'
- en: Figure 10-4\. The PYTHONPATH setting
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10-4\. PYTHONPATH 设置
- en: 'What I haven’t touched on yet is the name of the Excel workbook: once your
    `RunPython` function call uses an explicit module name like `first_project` instead
    of the code that was added by `quickstart`, you are free to rename your Excel
    workbook anything you want.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有提到的是 Excel 工作簿的名称：一旦您的`RunPython`函数调用使用显式模块名称如`first_project`而不是通过`quickstart`添加的代码，您可以随意将
    Excel 工作簿重命名为任何您想要的名称。
- en: Relying on the `quickstart` command is the easiest way if you start a new xlwings
    project. If you have an existing workbook, however, you may prefer to set it up
    manually. Let’s see how it’s done!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开始一个新的 xlwings 项目，依赖`quickstart`命令是最简单的方式。然而，如果您有一个现有的工作簿，您可能更喜欢手动设置。让我们看看如何操作！
- en: RunPython without quickstart command
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用 quickstart 命令的 RunPython
- en: 'If you want to use the `RunPython` function with an existing workbook that
    wasn’t created by the `quickstart` command, you need to manually take care of
    the things that the `quickstart` command does for you otherwise. Note that the
    following steps are only required for the `RunPython` call but not when you want
    to use the Run main button:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用`RunPython`函数处理未通过`quickstart`命令创建的现有工作簿，您需要手动处理`quickstart`命令为您处理的事情。请注意，以下步骤仅适用于`RunPython`调用，而不适用于您想要使用主按钮的
    Run：
- en: First of all, make sure to save your workbook as a macro-enabled workbook with
    either the xlsm or xlsb extension.
  id: totrans-66
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首先确保将工作簿另存为带有 xlsm 或 xlsb 扩展名的宏启用工作簿。
- en: Add a VBA module; to do so, open the VBA editor via Alt+F11 (Windows) or Option-F11
    (macOS) and make sure to select the VBAProject of your workbook in the tree view
    on the lefthand side, then right-click on it and choose Insert > Module, as in
    [Figure 10-5](#filepos1470658). This will insert an empty VBA module where you
    can write your VBA macro with the `RunPython` call.
  id: totrans-67
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加 VBA 模块；要添加 VBA 模块，请通过 Alt+F11（Windows）或 Option-F11（macOS）打开 VBA 编辑器，并确保在左侧树视图中选择工作簿的
    VBAProject，然后右键单击它，选择“插入” > “模块”，如[图 10-5](#filepos1470658)所示。这将插入一个空的 VBA 模块，您可以在其中编写带有`RunPython`调用的
    VBA 宏。
- en: '![](images/00075.jpg)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
  zh: '![](images/00075.jpg)'
- en: Figure 10-5\. Add a VBA module
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 图 10-5\. 添加一个 VBA 模块
- en: 'Add a reference to xlwings: `RunPython` is a function that is part of the xlwings
    add-in. To use it, you will need to make sure that you have a reference set to
    `xlwings` in your VBA Project. Again, start by selecting the correct workbook
    in the tree view on the lefthand side of the VBA editor, then go to Tools > Reference
    and activate the checkbox for xlwings, as seen in [Figure 10-6](#filepos1471674).'
  id: totrans-70
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加对xlwings的引用：`RunPython` 是xlwings插件的一部分。要使用它，您需要确保在您的VBA项目中设置了对`xlwings`的引用。同样，首先在VBA编辑器左侧的树视图中选择正确的工作簿，然后转到工具
    > 引用，并激活xlwings的复选框，如图[10-6](#filepos1471674)所示。
- en: Your workbook is now ready to be used with the `RunPython` call again. Once
    everything works on your machine, the next step is usually to make it work on
    your colleague’s machine—let’s go through a couple of options to make this part
    easier!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的工作簿已准备好再次使用`RunPython`调用。一旦一切在您的机器上正常运行，下一步通常是让它在您同事的机器上工作 — 让我们来看看几种使这部分更容易的选项！
- en: '![](images/00047.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00047.jpg)'
- en: Figure 10-6\. RunPython requires a reference to xlwings
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-6\. RunPython 需要引用xlwings。
- en: Deployment
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 部署
- en: In software development, the term deployment refers to distributing and installing
    software so that end users are able to use it. In the case of xlwings tools, it
    helps to know which dependencies are required and which settings can make deployment
    easier. I’ll start with the most important dependency, which is Python, before
    looking at workbooks that have been set up in the standalone mode to get rid of
    the xlwings Excel add-in. I’ll conclude this section by having a closer look at
    how configuration works with xlwings.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，部署一词指的是分发和安装软件，以便最终用户能够使用它。在xlwings工具的情况下，了解所需的依赖项和可以简化部署的设置非常重要。我将从最重要的依赖项Python开始讲起，然后看看已经设置为独立模式的工作簿，以摆脱xlwings
    Excel插件。我将通过更详细地查看xlwings配置如何工作来结束本节。
- en: Python Dependency
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Python依赖
- en: 'To be able to run xlwings tools, your end users must have an installation of
    Python. But just because they don’t have Python yet doesn’t mean that there aren’t
    ways to make the installation process easy. Here are a couple of options:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够运行xlwings工具，您的最终用户必须安装Python。但仅因为他们还没有安装Python并不意味着没有简化安装过程的方法。以下是几种选择：
- en: Anaconda or WinPython
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 或 WinPython
- en: Instruct your users to download and install the Anaconda distribution. To be
    on the safe side, you would have to agree to a specific version of Anaconda to
    make sure they are using the same versions of the contained packages that you’re
    using. This is a good option if you only use packages that are part of Anaconda.
    [WinPython](https://oreil.ly/A66KN) is an interesting alternative to Anaconda,
    as it is distributed under the MIT open source license and also comes with xlwings
    preinstalled. As the name suggests, it is only available on Windows.
  id: totrans-79
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 指导用户下载并安装Anaconda发行版。为了安全起见，您可能需要同意特定版本的Anaconda，以确保他们使用的是与您相同的包含包的版本。如果您只使用Anaconda中包含的软件包，这是一个不错的选择。[WinPython](https://oreil.ly/A66KN)
    是Anaconda的一个有趣的替代品，它在MIT开源许可下发布，并且也预装了xlwings。顾名思义，它只适用于Windows系统。
- en: Shared drive
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 共享驱动器
- en: If you have access to a reasonably fast shared drive, you may be able to install
    Python directly on there, which will allow everyone to use the tools without a
    local Python installation.
  id: totrans-81
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您可以访问一个相对快速的共享驱动器，您可能能够直接在那里安装Python，这将允许每个人在没有本地Python安装的情况下使用工具。
- en: Frozen executable
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 冻结的可执行文件
- en: On Windows, xlwings allows you to work with frozen executables, which are files
    with the .exe extension that contain Python and all the dependencies. A popular
    package to produce frozen executables is [PyInstaller](https://oreil.ly/AnYlV).
    Frozen executables have the advantage that they are only packaging up what your
    program needs and can produce a single file, which can make distribution easier.
    For more details on how to work with frozen executables, have a look at the [xlwings
    docs](https://oreil.ly/QWz7i). Note that frozen executables will not work when
    you use xlwings for user-defined functions, the functionality that I will introduce
    in [Chapter 12](index_split_028.html#filepos1653100).
  id: totrans-83
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上，xlwings 允许你使用冻结的可执行文件，这些文件具有 .exe 扩展名，包含 Python 和所有依赖项。生产冻结可执行文件的流行包是
    [PyInstaller](https://oreil.ly/AnYlV)。冻结可执行文件的优点是它们只打包你的程序所需的内容，并可以生成单个文件，这可以使分发更加容易。有关如何使用冻结可执行文件的详细信息，请查看
    [xlwings 文档](https://oreil.ly/QWz7i)。请注意，当你使用 xlwings 用于用户定义函数时，冻结可执行文件将无法使用，这是我将在
    [第 12 章](index_split_028.html#filepos1653100) 中介绍的功能。
- en: While Python is a hard requirement, the installation of the xlwings add-in is
    not, as I will explain next.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 是硬性要求，但不需要安装 xlwings 插件，接下来我会解释原因。
- en: 'Standalone Workbooks: Getting Rid of the xlwings Add-in'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 独立工作簿：摆脱 xlwings 插件
- en: 'In this chapter, we have always relied on the xlwings add-in to call Python
    code either by clicking the Run main button or by using the `RunPython` function.
    Even if the xlwings CLI makes it easy to install the add-in, it may still be a
    hassle for less technical users who don’t feel comfortable using the Anaconda
    Prompt. Also, since the xlwings add-in and the xlwings Python package need to
    have the same version, you may run into a conflict where your recipients already
    have the xlwings add-in installed, but with a different version than your tool
    requires. There is a simple solution, though: xlwings doesn’t require the Excel
    add-in and can be set up as a standalone workbook instead. In this case, the VBA
    code of the add-in is stored directly in your workbook. As usual, the easiest
    way to get everything set up is by using the `quickstart` command, this time with
    the `--standalone` flag:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们一直依赖 xlwings 插件通过单击“运行主按钮”或使用 `RunPython` 函数来调用 Python 代码。即使 xlwings
    CLI 使得安装插件变得简单，对于不太熟悉使用 Anaconda Prompt 的非技术用户来说，可能仍然有些麻烦。此外，由于 xlwings 插件和 xlwings
    Python 包需要相同的版本，你可能会遇到收件人已经安装了与你的工具所需版本不同的 xlwings 插件的冲突。不过，有一个简单的解决方案：xlwings
    不需要 Excel 插件，可以设置为独立的工作簿。在这种情况下，插件的 VBA 代码直接存储在你的工作簿中。通常，设置所有内容的最简单方式是使用 `quickstart`
    命令，这次使用 `--standalone` 标志：
- en: '`(base)>` `xlwings quickstart second_project --standalone`'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `xlwings quickstart second_project --standalone`'
- en: 'When you open the generated second_project.xlsm workbook in Excel and press
    Alt+F11 (Windows) or Option-F11 (macOS), you will see the `xlwings` module and
    the `Dictionary` class module that are required in place of the add-in. Most importantly,
    a standalone project must not have a reference to xlwings anymore. While this
    is configured automatically when using the `--standalone` flag, it is important
    that you remove the reference in case you want to convert an existing workbook:
    go to Tools > References in your VBA editor and clear the checkbox for `xlwings`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Excel 中打开生成的 second_project.xlsm 工作簿并按 Alt+F11（Windows）或 Option-F11（macOS）时，你会看到需要放置插件的
    `xlwings` 模块和 `Dictionary` 类模块。最重要的是，独立项目不再需要引用 xlwings。尽管使用 `--standalone` 标志时会自动配置这一点，但如果要转换现有工作簿，则重要的是你在
    VBA 编辑器的工具 > 引用中取消勾选 `xlwings` 复选框。
- en: BUILDING A CUSTOM ADD-IN
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 构建自定义插件
- en: While this section shows you how to get rid of the dependency of the xlwings
    add-in, you may sometimes want to build your own add-in for deployment. This makes
    sense if you want to use the same macros with many different workbooks. You will
    find instructions on how to build your own custom add-in in the [xlwings docs](https://oreil.ly/hFvlj).
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 虽然本节展示了如何摆脱 xlwings 插件的依赖性，但有时你可能希望为部署构建自己的插件。如果你希望在许多不同的工作簿中使用相同的宏，这是有道理的。你可以在
    [xlwings 文档](https://oreil.ly/hFvlj) 中找到构建自定义插件的说明。
- en: Having touched upon Python and the add-in, let’s now have a more in-depth look
    at how the xlwings configuration works.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 已经涉及 Python 和插件，现在让我们更深入地了解 xlwings 配置是如何工作的。
- en: Configuration Hierarchy
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 配置层次结构
- en: 'As mentioned at the beginning of this chapter, the ribbon stores its configuration
    in the user’s home directory, under .xlwings\xlwings.conf. The configuration consists
    of individual settings, like the `PYTHONPATH` that we already saw at the beginning
    of this chapter. The settings you set in your add-in can be overridden on the
    directory and workbook level—xlwings looks for settings in the following locations
    and order:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章开头提到的，Ribbon 存储其配置在用户主目录下的 .xlwings\xlwings.conf 文件中。配置包括像我们在本章开头已经看到的 `PYTHONPATH`
    这样的个别设置。你在插件中设置的设置可以在目录和工作簿级别上被覆盖 — xlwings 会按照以下位置和顺序查找设置：
- en: Workbook configuration
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 工作簿配置
- en: 'First, xlwings looks for a sheet called xlwings.conf. This is the recommended
    way to configure your workbook for deployment as you don’t have to handle an additional
    config file. When you run the `quickstart` command, it will create a sample configuration
    on a sheet called “_xlwings.conf”: remove the leading underscore in the name to
    activate it. If you don’t want to use it, feel free to delete the sheet.'
  id: totrans-95
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首先，xlwings 将查找一个名为 xlwings.conf 的工作表。这是配置你的工作簿进行部署的推荐方式，因为你不需要处理额外的配置文件。当你运行
    `quickstart` 命令时，它将在名为 "_xlwings.conf" 的工作表上创建一个示例配置：去掉名称前面的下划线以激活它。如果你不想使用它，可以随意删除该工作表。
- en: Directory configuration
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目录配置
- en: Next, xlwings looks for a file called xlwings.conf in the same directory as
    your Excel workbook.
  id: totrans-97
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 接下来，xlwings 将在 Excel 工作簿所在目录中查找一个名为 xlwings.conf 的文件。
- en: User configuration
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 用户配置
- en: Finally, xlwings looks for a file called xlwings.conf in the .xlwings folder
    in the user’s home directory. Normally, you don’t edit this file directly—instead,
    it is created and edited by the add-in whenever you change a setting.
  id: totrans-99
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最后，xlwings 将在用户主目录的 .xlwings 文件夹中查找一个名为 xlwings.conf 的文件。通常情况下，你不直接编辑这个文件 —
    而是通过插件在你修改设置时自动创建和编辑它。
- en: If xlwings doesn’t find any settings in these three locations, it falls back
    to default values.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 xlwings 在这三个位置找不到任何设置，它将回退到默认值。
- en: When you edit the settings via the Excel add-in, it will automatically edit
    the xlwings.conf file. If you want to edit the file directly, look up the exact
    format and available settings by going to the [xlwings docs](https://oreil.ly/U9JTY),
    but I’ll point out the most helpful settings in the context of deployment next.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过 Excel 插件编辑设置时，它会自动编辑 xlwings.conf 文件。如果你想直接编辑文件，请访问 [xlwings 文档](https://oreil.ly/U9JTY)
    查找确切的格式和可用设置，但接下来我会在部署的上下文中指出最有帮助的设置。
- en: Settings
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 设置
- en: The most critical setting is certainly the Python interpreter—if your Excel
    tool can’t find the correct Python interpreter, nothing will work. The `PYTHONPATH`
    setting allows you to control where you place your Python source files, and the
    Use UDF Server setting keeps the Python interpreter running in between calls on
    Windows, which can greatly improve performance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最关键的设置当然是 Python 解释器 — 如果你的 Excel 工具找不到正确的 Python 解释器，什么都不会正常工作。`PYTHONPATH`
    设置允许你控制放置 Python 源文件的位置，而使用 UDF 服务器设置可以在 Windows 上在调用之间保持 Python 解释器运行，这可以极大地提高性能。
- en: Python Interpreter
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器
- en: xlwings relies on a locally installed Python installation. This, however, doesn’t
    necessarily mean that the recipient of your xlwings tool needs to mess around
    with the configuration before they can use the tool. As mentioned previously,
    you could tell them to install the Anaconda distribution with the default settings,
    which will install it in the user’s home directory. If you use environment variables
    in your configuration, xlwings will find the correct path to the Python interpreter.
    An environment variable is a variable set on the user’s computer that allows programs
    to query information specific to this environment, like the name of the current
    user’s home folder. As an example, on Windows, set the `Conda Path` to `%USERPROFILE%\anaconda3`
    and on macOS, set `Interpreter_Mac` to `$HOME/opt/anaconda3/bin/python`. These
    paths will then dynamically resolve to Anaconda’s default installation path.
  id: totrans-105
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: xlwings 依赖于本地安装的 Python 程序。然而，这并不一定意味着你的 xlwings 工具的接收者需要在使用工具之前进行配置。如前所述，你可以建议他们安装
    Anaconda 发行版，并选择默认设置，这将会将其安装在用户的主目录下。如果在配置中使用环境变量，xlwings 将会找到正确的 Python 解释器路径。环境变量是设置在用户计算机上的变量，允许程序查询特定于该环境的信息，比如当前用户主目录的名称。例如，在
    Windows 上，将 `Conda Path` 设置为 `%USERPROFILE%\anaconda3`，而在 macOS 上，将 `Interpreter_Mac`
    设置为 `$HOME/opt/anaconda3/bin/python`。这些路径将动态解析为 Anaconda 的默认安装路径。
- en: PYTHONPATH
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PYTHONPATH
- en: By default, xlwings looks for the Python source file in the same directory as
    the Excel file. This may not be ideal when you give your tool to users who aren’t
    familiar with Python as they could forget to keep the two files together when
    moving the Excel file around. Instead, you can put your Python source files in
    a dedicated folder (this could be on a shared drive) and add this folder to the
    `PYTHONPATH` setting. Alternatively, you could also place your source files on
    a path that is already part of the Python module search path. One way to achieve
    this would be to distribute your source code as a Python package—installing it
    will place it in Python’s site-packages directory, where Python will find your
    code. For more information on how to build a Python package, see the [Python Packaging
    User Guide](https://oreil.ly/_kJoj).
  id: totrans-107
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 默认情况下，xlwings 在与 Excel 文件相同的目录中查找 Python 源文件。当您将工具交给不熟悉 Python 的用户时，这可能不是理想的做法，因为移动
    Excel 文件时他们可能会忘记保持这两个文件在一起。相反，您可以将 Python 源文件放在一个专用文件夹中（可以是共享驱动器上的文件夹），并将此文件夹添加到`PYTHONPATH`设置中。或者，您也可以将源文件放在
    Python 模块搜索路径中的路径上。实现这一目标的一种方法是将您的源代码作为 Python 包进行分发 — 安装后会将其放置在 Python 的 site-packages
    目录中，Python 将在那里找到您的代码。有关如何构建 Python 包的更多信息，请参阅 [Python Packaging User Guide](https://oreil.ly/_kJoj)。
- en: 'RunPython: Use UDF Server (Windows only)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'RunPython: 使用 UDF 服务器（仅限 Windows）'
- en: 'You may have noticed that a `RunPython` call can be rather slow. This is because
    xlwings starts a Python interpreter, runs the Python code, and finally shuts the
    interpreter down again. This may not be so bad during development, as it makes
    sure that all modules are loaded from scratch every time you call the `RunPython`
    command. Once your code is stable, though, you might want to activate the checkbox
    “RunPython: Use UDF Server” that is only available on Windows. This will use the
    same Python server as the user-defined functions use (the topic of [Chapter 12](index_split_028.html#filepos1653100))
    and keep the Python session running in between calls, which will be much faster.
    Note, however, that you need to click the Restart UDF Server button in the ribbon
    after code changes.'
  id: totrans-109
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '您可能已经注意到，`RunPython` 调用可能会相当慢。这是因为 xlwings 启动一个 Python 解释器，运行 Python 代码，然后再次关闭解释器。这在开发过程中可能不算太糟糕，因为它确保每次调用
    `RunPython` 命令时都会从头开始加载所有模块。不过，一旦您的代码稳定下来，您可能希望激活“RunPython: Use UDF Server”复选框（仅在
    Windows 上可用）。这将使用与用户定义函数使用的相同 Python 服务器（第 12 章的主题，参见 [Chapter 12](index_split_028.html#filepos1653100)）并在调用之间保持
    Python 会话运行，速度将会快得多。但请注意，您需要在代码更改后单击功能区中的“重新启动 UDF 服务器”按钮。'
- en: XLWINGS PRO
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: XLWINGS PRO
- en: 'While this book makes use of only the free and open source version of xlwings,
    there is also a commercial PRO package available to fund the continued maintenance
    and development of the open source package. Some of the additional functionality
    that xlwings PRO offers are:'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管本书仅使用免费和开源版本的**xlwings**，但也提供了商业版PRO，用于支持持续的开源版本维护和开发。xlwings PRO 提供的一些额外功能包括：
- en: Python code can be embedded in Excel, thereby getting rid of external source
    files.
  id: totrans-112
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 代码可以嵌入到 Excel 中，从而摆脱外部源文件。
- en: The reports package allows you to turn your workbooks into templates with placeholders.
    This gives nontechnical users the power to edit the template without having to
    change the Python code.
  id: totrans-113
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 报告包允许您将工作簿转换为带有占位符的模板。这使非技术用户能够编辑模板，而无需更改 Python 代码。
- en: 'Installers can be built easily to get rid of any deployment headaches: end
    users can install Python including all dependencies with a single click, giving
    them the feeling of dealing with normal Excel workbooks without having to manually
    configure anything.'
  id: totrans-114
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可轻松构建安装程序，摆脱任何部署问题：最终用户可以通过单击安装 Python 及其所有依赖项，给他们带来处理普通 Excel 工作簿的感觉，而无需手动配置任何内容。
- en: For further details about xlwings PRO and to request a trial license, see the
    [xlwings home page](https://oreil.ly/QEuoo).
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有关 xlwings PRO 的更多详细信息及申请试用许可证，请参阅 [xlwings 主页](https://oreil.ly/QEuoo)。
- en: Conclusion
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'This chapter started by showing you how easy it is to run Python code from
    Excel: with Anaconda installed, you only need to run `xlwings addin install` followed
    by `xlwings quickstart myproject`, and you are ready to click the Run main button
    in the xlwings add-in or use the `RunPython` VBA function. The second part introduced
    a few settings that make it easier to deploy your xlwings tool to your end users.
    The fact that xlwings comes preinstalled with Anaconda helps a lot in lowering
    the entry barriers for new users.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先向您展示了如何轻松地从 Excel 中运行 Python 代码：只需安装 Anaconda，然后运行`xlwings addin install`，接着运行`xlwings
    quickstart myproject`，就可以点击 xlwings 加载项中的“运行主程序”按钮或使用`RunPython` VBA 函数。第二部分介绍了一些设置，使得部署
    xlwings 工具到最终用户变得更加容易。xlwings 预先安装在 Anaconda 中这一事实，在降低新用户的入门难度方面起到了很大的作用。
- en: In this chapter, we were merely using the Hello World example to learn how everything
    works. The next chapter takes these foundations to build the Python Package Tracker,
    a full-fledged business application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们仅使用了 Hello World 示例来学习一切是如何工作的。下一章将利用这些基础知识构建 Python 包跟踪器，一个完整的商业应用程序。
- en: '[1  ](#filepos1446851) If you are on macOS or using a Python distribution other
    than Anaconda, it will configure the Interpreter rather than the Conda settings.'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[1  ](#filepos1446851) 如果您使用的是 macOS 或者使用的是 Anaconda 之外的 Python 发行版，它会配置解释器而不是
    Conda 设置。'
