- en: Chapter 10\. Python-Powered Excel Tools
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter, we learned how to write Python scripts to automate Microsoft
    Excel. While this is very powerful, the user must feel comfortable using either
    the Anaconda Prompt or an editor like VS Code to run the scripts. This is most
    likely not the case if your tools are used by business users. For them, you’ll
    want to hide away the Python part so that the Excel tool feels like a normal macro-enabled
    workbook again. How you achieve that with xlwings is the topic of this chapter.
    I’ll start by showing you the shortest path to run Python code from Excel before
    looking at the challenges of deploying xlwings tools—this will also allow us to
    have a more detailed look at the available settings that xlwings offers. Like
    the last chapter, this chapter requires you to have an installation of Microsoft
    Excel on either Windows or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Using Excel as Frontend with xlwings
  prefs: []
  type: TYPE_NORMAL
- en: 'The frontend is the part of an application that a user sees and interacts with.
    Other common names for frontend are graphical user interface (GUI) or just user
    interface (UI). When I ask xlwings users why they are creating their tool with
    Excel rather than building a modern web application, what I usually hear is this:
    “Excel is the interface that our users are familiar with.” Relying on spreadsheet
    cells allows the users to provide inputs quickly and intuitively, making them
    often more productive than if they have to use a half-baked web interface. I’ll
    start this section by introducing you to the xlwings Excel add-in and the xlwings
    CLI (command line interface) before creating our first project via the `quickstart`
    command. I’ll wrap this section up by showing you two ways of calling Python code
    from Excel: by clicking the Run main button in the add-in and by using the `RunPython`
    function in VBA. Let’s get started by installing the xlwings Excel add-in!'
  prefs: []
  type: TYPE_NORMAL
- en: Excel Add-in
  prefs: []
  type: TYPE_NORMAL
- en: 'Since xlwings is included in the Anaconda distribution, in the previous chapter,
    we could run xlwings commands in Python right out of the box. If you, however,
    want to call Python scripts from Excel, you need to either install the Excel add-in
    or set the workbook up in the standalone mode. While I will introduce the standalone
    mode under [“Deployment”](#filepos1471908), this section shows you how to work
    with the add-in. To install it, run the following on an Anaconda Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings addin install`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You will need to keep the version of the Python package and the version of
    the add-in in sync whenever you update xlwings. Therefore, you should always run
    two commands when you update xlwings—one for the Python package and one for the
    Excel add-in. Depending on whether you use the Conda or pip package manager, this
    is how you update your xlwings installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Conda (use this with the Anaconda Python distribution)
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda update xlwings` `(base)>` `xlwings addin install`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: pip (use this with any other Python distribution)
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `pip install --upgrade xlwings` `(base)>` `xlwings addin install`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ANTIVIRUS SOFTWARE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unfortunately, the xlwings add-in is sometimes flagged as a malicious add-in
    by antivirus software, especially if you’re using a brand-new release. If this
    happens on your machine, go to the settings of your antivirus software, where
    you should be able to mark xlwings as safe to run. Usually, it’s also possible
    to report such false positives via the software’s home page.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you type `xlwings` on an Anaconda Prompt, you are using the xlwings CLI.
    Apart from making the installation of the xlwings add-in easy, it offers a few
    more commands: I will introduce them whenever we need them, but you can always
    type `xlwings` on an Anaconda Prompt and hit Enter to print the available options.
    Let’s now have a closer look at what `xlwings addin install` does:'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual installation of the add-in is done by copying xlwings.xlam from
    the directory of the Python package into Excel’s XLSTART folder, which is a special
    folder: Excel will open all files that are in this folder every time you start
    Excel. When you run `xlwings addin status` on an Anaconda Prompt, it will print
    where the XLSTART directory is on your system and whether or not the add-in is
    installed.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'When you install the add-in for the very first time, it will also configure
    it to use the Python interpreter or Conda environment from where you are running
    the `install` command: as you see in [Figure 10-1](#filepos1447147), the values
    for `Conda Path` and `Conda Env` are filled in automatically by the xlwings CLI.[1](#filepos1486934)
    These values are stored in a file called xlwings.conf in the .xlwings folder in
    your home directory. On Windows, this is usually C:\Users\<username>\.xlwings\xlwings.conf
    and on macOS /Users/<username>/.xlwings/xlwings.conf. On macOS, folders and files
    with a leading dot are hidden by default. When you are in Finder, type the keyboard
    shortcut Command-Shift-. to toggle their visibility.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: After running the installation command, you’ll have to restart Excel to see
    the xlwings tab in the ribbon as shown in [Figure 10-1](#filepos1447147).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-1\. The xlwings ribbon add-in after running the install command
  prefs: []
  type: TYPE_NORMAL
- en: THE RIBBON ADD-IN ON MACOS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On macOS, the ribbon looks a bit different as it’s missing the sections about
    user-defined functions and Conda: while user-defined functions are not supported
    on macOS, Conda environments don’t require special treatment, i.e., are configured
    as Interpreter under the Python group.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that you have the xlwings add-in installed, we’ll need a workbook and some
    Python code to test it out. The fastest way of getting there is by using the `quickstart`
    command, as I will show you next.
  prefs: []
  type: TYPE_NORMAL
- en: Quickstart Command
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the creation of your first xlwings tool as easy as possible, the xlwings
    CLI offers the `quickstart` command. On an Anaconda Prompt, use the `cd` command
    to change into the directory where you want to create your first project (e.g.,
    `cd Desktop`), then run the following to create a project with the name `first_project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings quickstart first_project`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The project name has to be a valid Python module name: it can contain characters,
    numbers, and underscores, but no spaces or dashes, and it must not start with
    a number. I will show you under [“RunPython Function”](#filepos1459239) how you
    can change the name of the Excel file into something that doesn’t have to follow
    these rules. Running the `quickstart` command will create a folder called first_project
    in your current directory. When you open it in the File Explorer on Windows or
    the Finder on macOS, you will see two files: first_project.xlsm and first_project.py.
    Open both files—the Excel file in Excel and the Python file in VS Code. The easiest
    way to run the Python code from Excel is by using the Run main button in the add-in—let’s
    see how it works!'
  prefs: []
  type: TYPE_NORMAL
- en: Run Main
  prefs: []
  type: TYPE_NORMAL
- en: Before looking at first_project.py in more detail, go ahead and click the Run
    main button on the very left of the xlwings add-in while first_project.xlsm is
    your active file; it will write “Hello xlwings!” into cell `A1` of the first sheet.
    Click the button again and it will change to “Bye xlwings!” Congratulations, you
    have just run your first Python function from Excel! After all, that wasn’t much
    harder than writing a VBA macro, was it? Let’s now have a look at first_project.py
    in [Example 10-1](#filepos1450512).
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-1\. first_project.py
  prefs: []
  type: TYPE_NORMAL
- en: '`import``xlwings``as``xw``def``main``():``wb``=``xw``.``Book``.``caller``()`![](images/00031.jpg)`sheet``=``wb``.``sheets``[``0``]``if``sheet``[``"A1"``]``.``value``==``"Hello
    xlwings!"``:``sheet``[``"A1"``]``.``value``=``"Bye xlwings!"``else``:``sheet``[``"A1"``]``.``value``=``"Hello
    xlwings!"``@xw.func`![](images/00039.jpg)`def``hello``(``name``):``return``f``"Hello
    {name}!"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if` `__name__` `==``"__main__"``:`![](images/00050.jpg)`xw``.``Book``(``"first_project.xlsm"``)``.``set_mock_caller``()``main``()`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`xw.Book.caller()` is an xlwings `book` object that refers to the Excel workbook
    that is active when you click the Run main button. In our case, it corresponds
    to `xw.Book("first_project.xlsm")`. Using `xw.Book.caller()` allows you to rename
    and move your Excel file around on the file system without breaking the reference.
    It also makes sure that you are manipulating the correct workbook if you have
    it open in multiple Excel instances.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we will ignore the function `hello` as this will be the topic
    of [Chapter 12](index_split_028.html#filepos1653100). If you run the `quickstart`
    command on macOS, you won’t see the `hello` function anyway, as user-defined functions
    are only supported on Windows.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00050.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I will explain the last three lines when we look at debugging in the next chapter.
    For the purpose of this chapter, ignore or even delete everything below the first
    function.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Run main button in the Excel add-in is a convenience feature: it allows
    you to call a function with the name `main` in a Python module that has the same
    name as the Excel file without having to add a button first to your workbook.
    It will even work if you save your workbook in the macro-free xlsx format. If,
    however, you want to call one or more Python functions that are not called `main`
    and are not part of a module with the same name as the workbook, you have to use
    the `RunPython` function from VBA instead. The next section has the details!'
  prefs: []
  type: TYPE_NORMAL
- en: RunPython Function
  prefs: []
  type: TYPE_NORMAL
- en: If you need more control over how you call your Python code, use the VBA function
    `RunPython`. Consequently, `RunPython` requires your workbook to be saved as a
    macro-enabled workbook.
  prefs: []
  type: TYPE_NORMAL
- en: ENABLE MACROS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You need to click on Enable Content (Windows) or Enable Macros (macOS) when
    you open a macro-enabled workbook (xlsm extension) such as the one that is generated
    by the `quickstart` command. On Windows, when you work with xlsm files from the
    companion repository, you have to additionally click on Enable Editing or Excel
    won’t open files that are downloaded from the internet properly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`RunPython` accepts a string with Python code: most commonly, you import a
    Python module and run one of its functions. When you open the VBA editor via Alt+F11
    (Windows) or Option-F11 (macOS), you will see that the `quickstart` command adds
    a macro called `SampleCall` in a VBA module with the name “Module1” (see [Figure 10-2](#filepos1460941)).
    If you don’t see the `SampleCall`, double-click Module1 in the VBA project tree
    on the lefthand side.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-2\. The VBA editor showing Module1
  prefs: []
  type: TYPE_NORMAL
- en: 'The code looks a bit convoluted, but this is only to make it work dynamically
    no matter what project name you choose when running the `quickstart` command.
    As our Python module is called `first_project`, you could replace the code with
    the following easy-to-understand equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sub``SampleCall``()``RunPython``"import first_project; first_project.main()"``End``Sub`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since it’s no fun to write multiline strings in VBA, we use a semicolon that
    Python accepts instead of a line break. There are a couple of ways you can run
    this code: for example, while you are in the VBA editor, place your cursor on
    any line of the `SampleCall` macro and hit F5\. Usually, however, you will be
    running the code from an Excel sheet and not from the VBA editor. Therefore, close
    the VBA editor and switch back to the workbook. Typing Alt+F8 (Windows) or Option-F8
    (macOS) will bring up the macro menu: select `SampleCall` and click on the Run
    button. Or, to make it more user-friendly, add a button to your Excel workbook
    and connect it with the `SampleCall`: first, make sure that the Developer tab
    in the ribbon is shown. If it isn’t, go to `File` > Options > Customize Ribbon
    and activate the checkbox next to Developer (on macOS, you’ll find it under Excel
    > Preferences > Ribbon & Toolbar instead). To insert a button, go to the Developer
    tab and in the Controls group, click on Insert > Button (under Form Controls).
    On macOS, you’ll be presented with the button without having to go to Insert first.
    When you click the button icon, your cursor turns into a small cross: use it to
    draw a button on your sheet by holding your left mouse button down while drawing
    a rectangular form. Once you let go of your mouse button, you’ll be presented
    with the Assign Macro menu—select the `SampleCall` and click OK. Click the button
    that you’ve just created (in my case it’s called “Button 1”), and it will run
    our `main` function again, as in [Figure 10-3](#filepos1464065).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00060.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-3\. Drawing a button on a sheet
  prefs: []
  type: TYPE_NORMAL
- en: FORM CONTROLS VS. ACTIVEX CONTROLS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'On Windows, you have two types of controls: Form Controls and ActiveX Controls.
    While you could use a button from either group to connect to your `SampleCall`
    macro, only the one from the Form Controls will work on macOS too. In the next
    chapter, we will use Rectangles as buttons to make them look a bit more modern.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now let’s take a look at how we can change the default names that were assigned
    by the `quickstart` command: go back to your Python file and rename it from first_project.py
    to hello.py. Also, rename your `main` function into `hello_world`. Make sure to
    save the file, then open the VBA editor again via Alt+F11 (Windows) or Option-F11
    (macOS) and edit `SampleCall` as follows to reflect the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sub``SampleCall``()``RunPython``"import hello; hello.hello_world()"``End``Sub`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Back on the sheet, click the “Button 1” to make sure that everything still
    works. Finally, you may also want to keep the Python script and the Excel file
    in two different directories. To understand the implications of this, I’ll first
    need to say a word about Python’s module search path: if you import a module in
    your code, Python searches for it in various directories. First, Python checks
    if there is a built-in module with this name, and if it doesn’t find one, moves
    on to look in the current working directory and in the directories provided by
    the so-called `PYTHONPATH`. xlwings automatically adds the directory of the workbook
    to the `PYTHONPATH` and allows you to add additional paths via the add-in. To
    try this out, take the Python script that is now called hello.py and move it to
    a folder called pyscripts that you create under your home directory: in my case,
    this would be C:\Users\felix\pyscripts on Windows or /Users/felix/pyscripts on
    macOS. When you now click the button again, you will get the following error in
    a pop-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Traceback (most recent call last):   File "<string>", line 1, in <module>
    ModuleNotFoundError: No module named ''first_project''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To fix this, simply add the path of the pyscripts directory to the `PYTHONPATH`
    setting in your xlwings ribbon, as in [Figure 10-4](#filepos1467883). When you
    now click the button one more time, it will work again.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-4\. The PYTHONPATH setting
  prefs: []
  type: TYPE_NORMAL
- en: 'What I haven’t touched on yet is the name of the Excel workbook: once your
    `RunPython` function call uses an explicit module name like `first_project` instead
    of the code that was added by `quickstart`, you are free to rename your Excel
    workbook anything you want.'
  prefs: []
  type: TYPE_NORMAL
- en: Relying on the `quickstart` command is the easiest way if you start a new xlwings
    project. If you have an existing workbook, however, you may prefer to set it up
    manually. Let’s see how it’s done!
  prefs: []
  type: TYPE_NORMAL
- en: RunPython without quickstart command
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the `RunPython` function with an existing workbook that
    wasn’t created by the `quickstart` command, you need to manually take care of
    the things that the `quickstart` command does for you otherwise. Note that the
    following steps are only required for the `RunPython` call but not when you want
    to use the Run main button:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, make sure to save your workbook as a macro-enabled workbook with
    either the xlsm or xlsb extension.
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Add a VBA module; to do so, open the VBA editor via Alt+F11 (Windows) or Option-F11
    (macOS) and make sure to select the VBAProject of your workbook in the tree view
    on the lefthand side, then right-click on it and choose Insert > Module, as in
    [Figure 10-5](#filepos1470658). This will insert an empty VBA module where you
    can write your VBA macro with the `RunPython` call.
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](images/00075.jpg)'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_IMG
- en: Figure 10-5\. Add a VBA module
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Add a reference to xlwings: `RunPython` is a function that is part of the xlwings
    add-in. To use it, you will need to make sure that you have a reference set to
    `xlwings` in your VBA Project. Again, start by selecting the correct workbook
    in the tree view on the lefthand side of the VBA editor, then go to Tools > Reference
    and activate the checkbox for xlwings, as seen in [Figure 10-6](#filepos1471674).'
  prefs:
  - PREF_OL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your workbook is now ready to be used with the `RunPython` call again. Once
    everything works on your machine, the next step is usually to make it work on
    your colleague’s machine—let’s go through a couple of options to make this part
    easier!
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-6\. RunPython requires a reference to xlwings
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs: []
  type: TYPE_NORMAL
- en: In software development, the term deployment refers to distributing and installing
    software so that end users are able to use it. In the case of xlwings tools, it
    helps to know which dependencies are required and which settings can make deployment
    easier. I’ll start with the most important dependency, which is Python, before
    looking at workbooks that have been set up in the standalone mode to get rid of
    the xlwings Excel add-in. I’ll conclude this section by having a closer look at
    how configuration works with xlwings.
  prefs: []
  type: TYPE_NORMAL
- en: Python Dependency
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to run xlwings tools, your end users must have an installation of
    Python. But just because they don’t have Python yet doesn’t mean that there aren’t
    ways to make the installation process easy. Here are a couple of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda or WinPython
  prefs: []
  type: TYPE_NORMAL
- en: Instruct your users to download and install the Anaconda distribution. To be
    on the safe side, you would have to agree to a specific version of Anaconda to
    make sure they are using the same versions of the contained packages that you’re
    using. This is a good option if you only use packages that are part of Anaconda.
    [WinPython](https://oreil.ly/A66KN) is an interesting alternative to Anaconda,
    as it is distributed under the MIT open source license and also comes with xlwings
    preinstalled. As the name suggests, it is only available on Windows.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Shared drive
  prefs: []
  type: TYPE_NORMAL
- en: If you have access to a reasonably fast shared drive, you may be able to install
    Python directly on there, which will allow everyone to use the tools without a
    local Python installation.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frozen executable
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, xlwings allows you to work with frozen executables, which are files
    with the .exe extension that contain Python and all the dependencies. A popular
    package to produce frozen executables is [PyInstaller](https://oreil.ly/AnYlV).
    Frozen executables have the advantage that they are only packaging up what your
    program needs and can produce a single file, which can make distribution easier.
    For more details on how to work with frozen executables, have a look at the [xlwings
    docs](https://oreil.ly/QWz7i). Note that frozen executables will not work when
    you use xlwings for user-defined functions, the functionality that I will introduce
    in [Chapter 12](index_split_028.html#filepos1653100).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: While Python is a hard requirement, the installation of the xlwings add-in is
    not, as I will explain next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Standalone Workbooks: Getting Rid of the xlwings Add-in'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we have always relied on the xlwings add-in to call Python
    code either by clicking the Run main button or by using the `RunPython` function.
    Even if the xlwings CLI makes it easy to install the add-in, it may still be a
    hassle for less technical users who don’t feel comfortable using the Anaconda
    Prompt. Also, since the xlwings add-in and the xlwings Python package need to
    have the same version, you may run into a conflict where your recipients already
    have the xlwings add-in installed, but with a different version than your tool
    requires. There is a simple solution, though: xlwings doesn’t require the Excel
    add-in and can be set up as a standalone workbook instead. In this case, the VBA
    code of the add-in is stored directly in your workbook. As usual, the easiest
    way to get everything set up is by using the `quickstart` command, this time with
    the `--standalone` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `xlwings quickstart second_project --standalone`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'When you open the generated second_project.xlsm workbook in Excel and press
    Alt+F11 (Windows) or Option-F11 (macOS), you will see the `xlwings` module and
    the `Dictionary` class module that are required in place of the add-in. Most importantly,
    a standalone project must not have a reference to xlwings anymore. While this
    is configured automatically when using the `--standalone` flag, it is important
    that you remove the reference in case you want to convert an existing workbook:
    go to Tools > References in your VBA editor and clear the checkbox for `xlwings`.'
  prefs: []
  type: TYPE_NORMAL
- en: BUILDING A CUSTOM ADD-IN
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While this section shows you how to get rid of the dependency of the xlwings
    add-in, you may sometimes want to build your own add-in for deployment. This makes
    sense if you want to use the same macros with many different workbooks. You will
    find instructions on how to build your own custom add-in in the [xlwings docs](https://oreil.ly/hFvlj).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Having touched upon Python and the add-in, let’s now have a more in-depth look
    at how the xlwings configuration works.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning of this chapter, the ribbon stores its configuration
    in the user’s home directory, under .xlwings\xlwings.conf. The configuration consists
    of individual settings, like the `PYTHONPATH` that we already saw at the beginning
    of this chapter. The settings you set in your add-in can be overridden on the
    directory and workbook level—xlwings looks for settings in the following locations
    and order:'
  prefs: []
  type: TYPE_NORMAL
- en: Workbook configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'First, xlwings looks for a sheet called xlwings.conf. This is the recommended
    way to configure your workbook for deployment as you don’t have to handle an additional
    config file. When you run the `quickstart` command, it will create a sample configuration
    on a sheet called “_xlwings.conf”: remove the leading underscore in the name to
    activate it. If you don’t want to use it, feel free to delete the sheet.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Directory configuration
  prefs: []
  type: TYPE_NORMAL
- en: Next, xlwings looks for a file called xlwings.conf in the same directory as
    your Excel workbook.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: User configuration
  prefs: []
  type: TYPE_NORMAL
- en: Finally, xlwings looks for a file called xlwings.conf in the .xlwings folder
    in the user’s home directory. Normally, you don’t edit this file directly—instead,
    it is created and edited by the add-in whenever you change a setting.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: If xlwings doesn’t find any settings in these three locations, it falls back
    to default values.
  prefs: []
  type: TYPE_NORMAL
- en: When you edit the settings via the Excel add-in, it will automatically edit
    the xlwings.conf file. If you want to edit the file directly, look up the exact
    format and available settings by going to the [xlwings docs](https://oreil.ly/U9JTY),
    but I’ll point out the most helpful settings in the context of deployment next.
  prefs: []
  type: TYPE_NORMAL
- en: Settings
  prefs: []
  type: TYPE_NORMAL
- en: The most critical setting is certainly the Python interpreter—if your Excel
    tool can’t find the correct Python interpreter, nothing will work. The `PYTHONPATH`
    setting allows you to control where you place your Python source files, and the
    Use UDF Server setting keeps the Python interpreter running in between calls on
    Windows, which can greatly improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: Python Interpreter
  prefs: []
  type: TYPE_NORMAL
- en: xlwings relies on a locally installed Python installation. This, however, doesn’t
    necessarily mean that the recipient of your xlwings tool needs to mess around
    with the configuration before they can use the tool. As mentioned previously,
    you could tell them to install the Anaconda distribution with the default settings,
    which will install it in the user’s home directory. If you use environment variables
    in your configuration, xlwings will find the correct path to the Python interpreter.
    An environment variable is a variable set on the user’s computer that allows programs
    to query information specific to this environment, like the name of the current
    user’s home folder. As an example, on Windows, set the `Conda Path` to `%USERPROFILE%\anaconda3`
    and on macOS, set `Interpreter_Mac` to `$HOME/opt/anaconda3/bin/python`. These
    paths will then dynamically resolve to Anaconda’s default installation path.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHONPATH
  prefs: []
  type: TYPE_NORMAL
- en: By default, xlwings looks for the Python source file in the same directory as
    the Excel file. This may not be ideal when you give your tool to users who aren’t
    familiar with Python as they could forget to keep the two files together when
    moving the Excel file around. Instead, you can put your Python source files in
    a dedicated folder (this could be on a shared drive) and add this folder to the
    `PYTHONPATH` setting. Alternatively, you could also place your source files on
    a path that is already part of the Python module search path. One way to achieve
    this would be to distribute your source code as a Python package—installing it
    will place it in Python’s site-packages directory, where Python will find your
    code. For more information on how to build a Python package, see the [Python Packaging
    User Guide](https://oreil.ly/_kJoj).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'RunPython: Use UDF Server (Windows only)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed that a `RunPython` call can be rather slow. This is because
    xlwings starts a Python interpreter, runs the Python code, and finally shuts the
    interpreter down again. This may not be so bad during development, as it makes
    sure that all modules are loaded from scratch every time you call the `RunPython`
    command. Once your code is stable, though, you might want to activate the checkbox
    “RunPython: Use UDF Server” that is only available on Windows. This will use the
    same Python server as the user-defined functions use (the topic of [Chapter 12](index_split_028.html#filepos1653100))
    and keep the Python session running in between calls, which will be much faster.
    Note, however, that you need to click the Restart UDF Server button in the ribbon
    after code changes.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: XLWINGS PRO
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While this book makes use of only the free and open source version of xlwings,
    there is also a commercial PRO package available to fund the continued maintenance
    and development of the open source package. Some of the additional functionality
    that xlwings PRO offers are:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python code can be embedded in Excel, thereby getting rid of external source
    files.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: The reports package allows you to turn your workbooks into templates with placeholders.
    This gives nontechnical users the power to edit the template without having to
    change the Python code.
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Installers can be built easily to get rid of any deployment headaches: end
    users can install Python including all dependencies with a single click, giving
    them the feeling of dealing with normal Excel workbooks without having to manually
    configure anything.'
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: For further details about xlwings PRO and to request a trial license, see the
    [xlwings home page](https://oreil.ly/QEuoo).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter started by showing you how easy it is to run Python code from
    Excel: with Anaconda installed, you only need to run `xlwings addin install` followed
    by `xlwings quickstart myproject`, and you are ready to click the Run main button
    in the xlwings add-in or use the `RunPython` VBA function. The second part introduced
    a few settings that make it easier to deploy your xlwings tool to your end users.
    The fact that xlwings comes preinstalled with Anaconda helps a lot in lowering
    the entry barriers for new users.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we were merely using the Hello World example to learn how everything
    works. The next chapter takes these foundations to build the Python Package Tracker,
    a full-fledged business application.
  prefs: []
  type: TYPE_NORMAL
- en: '[1  ](#filepos1446851) If you are on macOS or using a Python distribution other
    than Anaconda, it will configure the Interpreter rather than the Conda settings.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
