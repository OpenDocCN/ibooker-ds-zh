["```py\nsecond_addressable_\nobject_name\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom ridgeplot import ridgeplot\n\ndef load_price_data():\n    return pd.read_parquet(\"./data/wales.parquet\")\n```", "```py\ndef get_counties(df):\n    return sorted(df[\"county\"].unique())\n```", "```py\ndef get_towns(df, county, null_value):\n    if (not county) or (county == null_value):\n        return []\n\n    return (\n        [null_value]\n        + sorted(\n            df.loc[df[\"county\"] == county, \"town_city\"]\n            .unique()\n        )\n    )\n```", "```py\ndef get_streets(df, county, town, null_value):\n    if (not (county and town)) or (town == null_value):\n        return []\n\n    return (\n        [null_value] +\n        sorted(\n            df.loc[(df[\"county\"] == county)\n                   & (df[\"town_city\"] == town),\n            \"street\"]\n            .unique()\n        )\n    )\n```", "```py\ndef transactions_per_year(df):\n    fig, axis = plt.subplots()\n\n    (\n        df\n        .set_index(\"sale_date\")\n        .resample(\"YS\")      #1\n        .size()\n        .plot(ax=axis, color=\"gray\", marker=\"x\")\n    )\n\n    axis.set(\n        ylabel=\"# of transactions\"\n    )\n\n    return fig\n```", "```py\ndef distribution_of_property_type(df):    \n    fig, axis = plt.subplots()\n\n    (\n        df[\"property_type\"]\n        .value_counts()\n        .sort_values()\n        .plot\n        .barh(ax=axis, color=\"gray\")\n    )\n\n    axis.set(\n        xlabel=\"# of transactions\"\n    )\n\n    return fig\n\ndef median_price_by_property_type(df):\n    fig, axis = plt.subplots()\n\n    (\n        df\n        .groupby(\"property_type\")\n        [\"sale_price\"]\n        .median()\n        .sort_values()\n        .plot\n        .barh(ax=axis, color=\"gray\")\n    )\n    axis.set(\n        xlabel=\"Median price (£)\",\n        ylabel=None\n    )\n\n    return fig\n```", "```py\ndef get_county_ridgeplot_data(df, counties):\n    sales_by_county = []\n\n    for county in counties:\n        prices = (\n            df\n            .loc[(df[\"county\"] == county)\n                 & (df[\"sale_price\"] < 500_000)\n                 & (df[\"year\"] == 2023),\n            \"sale_price\"]\n        )\n        sales_by_county.append([prices])\n\n    return sales_by_county\n\ndef county_ridgeplot(sales_by_county, counties):\n    fig = ridgeplot(sales_by_county,\n                    labels=counties,\n                    colorscale=\"gray\",\n                    coloralpha=0.9,\n                    colormode=\"mean-minmax\",\n                    spacing=0.7)\n\n    fig.update_layout(\n        title=\"Distribution of house sale prices in Wales in 2023, by county\",\n        height=650,\n        width=950,\n        font_size=12,\n        plot_bgcolor=\"rgb(245, 245, 245)\",\n        xaxis_gridcolor=\"white\",\n        yaxis_gridcolor=\"white\",\n        xaxis_gridwidth=2,\n        yaxis_title=\"County\",\n        xaxis_title=\"Sale price (£)\",\n        showlegend=False\n    )\n\n    return fig\n```", "```py\nimport streamlit as st\nimport pandas as pd\nimport helpers      #1\n\nst.set_page_config(layout=\"wide\")\n```", "```py\n@st.cache_data\ndef get_price_data():\n    return helpers.load_price_data()\n\nwales = get_price_data()\n\n@st.cache_data\ndef get_counties(wales):\n    return helpers.get_counties()\n\ncounties = get_counties(wales)\n\n@st.cache_data\ndef get_county_data(wales, counties):\n    return helpers.get_county_ridgeplot_data(wales, counties)\n\nsales_by_county = get_county_data(wales, counties)\n```", "```py\nst.title(\"House price explorer - Wales\")\nst.markdown(\"\"\"This tool lets you explore...\"\"\")\n\nst.plotly_chart(helpers.county_ridgeplot(sales_by_county, counties))\n```", "```py\nst.header(\"Explore house prices at different levels\")\n\nselect_col1, select_col2, select_col3 = st.columns(3)\n\nwith select_col1:\n    county_select = st.selectbox(\n        'Select a county:',\n        helpers.get_counties(wales),\n        index=None,\n        placeholder=\"-- Select a county --\"\n    )\n\nTOWN_NULL_VALUE = \"-- No town selected --\"    #1\n\nwith select_col2:\n    town_select = st.selectbox(\n        'Select a town:',\n        helpers.get_towns(\n            wales,\n            county_select,     #2\n            null_value=TOWN_NULL_VALUE),\n        index=None,\n        placeholder=TOWN_NULL_VALUE\n    )\n\nSTREET_NULL_VALUE = \"-- No street selected --\"\n\nwith select_col3:\n    street_select = st.selectbox(\n        'Select a street:',\n        helpers.get_streets(\n            wales,\n            county_select,\n            town_select,\n            null_value=STREET_NULL_VALUE),\n        index=None,\n        placeholder=STREET_NULL_VALUE\n    )\n```", "```py\nhouse_filter_query = \"county == @county_select\"\nfilter_message = f\"Results for {county_select}\"\n\nif town_select and town_select != TOWN_NULL_VALUE:\n    house_filter_query += \" and town_city == @town_select\"\n    filter_message += f\", {town_select}\"\n\nif street_select and street_select != STREET_NULL_VALUE:\n    house_filter_query += \" and street == @street_select\"\n    filter_message += f\", {street_select}\"\n\nselected_data = wales.query(house_filter_query)\n```", "```py\nmedian_price = selected_data[\"sale_price\"].median()\n\nif county_select:   #1\n    st.header(filter_message)\n\n    metric_col1, metric_col2 = st.columns(2)\n    metric_col1.metric(\"Number of records\", f\"{len(selected_data):,.0f}\")\n    metric_col2.metric(\"Median sale price\", f\"£{median_price:,.0f}\")\n```", "```py\nif county_select:\n    st.header(filter_message)\n\n    metric_col1, metric_col2 = st.columns(2)\n    metric_col1.metric(\"Number of records\", f\"{len(selected_data):,.0f}\")\n    metric_col2.metric(\"Median sale price\", f\"£{median_price:,.0f}\")\n\n    chart_col1, chart_col2, chart_col3 = st.columns(3)\n\n    with chart_col1:\n        st.subheader(\"Transactions over time\")\n        st.pyplot(helpers.transactions_per_year(selected_data))\n\n    with chart_col2:\n        st.subheader(\"Distribution of property type\")\n        st.pyplot(helpers.distribution_of_property_type(selected_data))\n\n    with chart_col3:\n        st.subheader(\"Median sale price by property type\")\n        st.pyplot(helpers.median_price_by_property_type(selected_data))\n\n    st.header(\"Raw data\")\n    st.write(selected_data)\n```"]