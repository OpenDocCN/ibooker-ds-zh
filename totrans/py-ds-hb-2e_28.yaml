- en: Part IV. Visualization with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll now take an in-depth look at the Matplotlib package for visualization
    in Python. Matplotlib is a multiplatform data visualization library built on NumPy
    arrays and designed to work with the broader SciPy stack. It was conceived by
    John Hunter in 2002, originally as a patch to IPython for enabling interactive
    MATLAB-style plotting via `gnuplot` from the IPython command line. IPython’s creator,
    Fernando Perez, was at the time scrambling to finish his PhD, and let John know
    he wouldn’t have time to review the patch for several months. John took this as
    a cue to set out on his own, and the Matplotlib package was born, with version
    0.1 released in 2003\. It received an early boost when it was adopted as the plotting
    package of choice of the Space Telescope Science Institute (the folks behind the
    Hubble Telescope), which financially supported Matplotlib’s development and greatly
    expanded its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: One of Matplotlib’s most important features is its ability to play well with
    many operating systems and graphics backends. Matplotlib supports dozens of backends
    and output types, which means you can count on it to work regardless of which
    operating system you are using or which output format you desire. This cross-platform,
    everything-to-everyone approach has been one of the great strengths of Matplotlib.
    It has led to a large user base, which in turn has led to an active developer
    base and Matplotlib’s powerful tools and ubiquity within the scientific Python
    world.
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, however, the interface and style of Matplotlib have begun to
    show their age. Newer tools like `ggplot` and `ggvis` in the R language, along
    with web visualization toolkits based on D3js and HTML5 canvas, often make Matplotlib
    feel clunky and old-fashioned. Still, I’m of the opinion that we cannot ignore
    Matplotlib’s strength as a well-tested, cross-platform graphics engine. Recent
    Matplotlib versions make it relatively easy to set new global plotting styles
    (see [Chapter 34](ch34.xhtml#section-0411-settings-and-stylesheets)), and people
    have been developing new packages that build on its powerful internals to drive
    Matplotlib via cleaner, more modern APIs—for example, Seaborn (discussed in [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)),
    [`ggpy`](http://yhat.github.io/ggpy), [HoloViews](http://holoviews.org), and even
    Pandas itself can be used as wrappers around Matplotlib’s API. Even with wrappers
    like these, it is still often useful to dive into Matplotlib’s syntax to adjust
    the final plot output. For this reason, I believe that Matplotlib itself will
    remain a vital piece of the data visualization stack, even if new tools mean the
    community gradually moves away from using the Matplotlib API directly.
  prefs: []
  type: TYPE_NORMAL
