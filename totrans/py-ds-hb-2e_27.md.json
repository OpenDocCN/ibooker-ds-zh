["```py\nIn [1]: import numpy as np\n        rng = np.random.default_rng(42)\n        x = rng.random(1000000)\n        y = rng.random(1000000)\n        %timeit x + y\nOut[1]: 2.21 ms ± 142 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```", "```py\nIn [2]: %timeit np.fromiter((xi + yi for xi, yi in zip(x, y)),\n                            dtype=x.dtype, count=len(x))\nOut[2]: 263 ms ± 43.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn [3]: mask = (x > 0.5) & (y < 0.5)\n```", "```py\nIn [4]: tmp1 = (x > 0.5)\n        tmp2 = (y < 0.5)\n        mask = tmp1 & tmp2\n```", "```py\nIn [5]: import numexpr\n        mask_numexpr = numexpr.evaluate('(x > 0.5) & (y < 0.5)')\n        np.all(mask == mask_numexpr)\nOut[5]: True\n```", "```py\nIn [6]: import pandas as pd\n        nrows, ncols = 100000, 100\n        df1, df2, df3, df4 = (pd.DataFrame(rng.random((nrows, ncols)))\n                              for i in range(4))\n```", "```py\nIn [7]: %timeit df1 + df2 + df3 + df4\nOut[7]: 73.2 ms ± 6.72 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [8]: %timeit pd.eval('df1 + df2 + df3 + df4')\nOut[8]: 34 ms ± 4.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [9]: np.allclose(df1 + df2 + df3 + df4,\n                    pd.eval('df1 + df2 + df3 + df4'))\nOut[9]: True\n```", "```py\nIn [10]: df1, df2, df3, df4, df5 = (pd.DataFrame(rng.integers(0, 1000, (100, 3)))\n                                    for i in range(5))\n```", "```py\nIn [11]: result1 = -df1 * df2 / (df3 + df4) - df5\n         result2 = pd.eval('-df1 * df2 / (df3 + df4) - df5')\n         np.allclose(result1, result2)\nOut[11]: True\n```", "```py\nIn [12]: result1 = (df1 < df2) & (df2 <= df3) & (df3 != df4)\n         result2 = pd.eval('df1 < df2 <= df3 != df4')\n         np.allclose(result1, result2)\nOut[12]: True\n```", "```py\nIn [13]: result1 = (df1 < 0.5) & (df2 < 0.5) | (df3 < df4)\n         result2 = pd.eval('(df1 < 0.5) & (df2 < 0.5) | (df3 < df4)')\n         np.allclose(result1, result2)\nOut[13]: True\n```", "```py\nIn [14]: result3 = pd.eval('(df1 < 0.5) and (df2 < 0.5) or (df3 < df4)')\n         np.allclose(result1, result3)\nOut[14]: True\n```", "```py\nIn [15]: result1 = df2.T[0] + df3.iloc[1]\n         result2 = pd.eval('df2.T[0] + df3.iloc[1]')\n         np.allclose(result1, result2)\nOut[15]: True\n```", "```py\nIn [16]: df = pd.DataFrame(rng.random((1000, 3)), columns=['A', 'B', 'C'])\n         df.head()\nOut[16]:           A         B         C\n         0  0.850888  0.966709  0.958690\n         1  0.820126  0.385686  0.061402\n         2  0.059729  0.831768  0.652259\n         3  0.244774  0.140322  0.041711\n         4  0.818205  0.753384  0.578851\n```", "```py\nIn [17]: result1 = (df['A'] + df['B']) / (df['C'] - 1)\n         result2 = pd.eval(\"(df.A + df.B) / (df.C - 1)\")\n         np.allclose(result1, result2)\nOut[17]: True\n```", "```py\nIn [18]: result3 = df.eval('(A + B) / (C - 1)')\n         np.allclose(result1, result3)\nOut[18]: True\n```", "```py\nIn [19]: df.head()\nOut[19]:           A         B         C\n         0  0.850888  0.966709  0.958690\n         1  0.820126  0.385686  0.061402\n         2  0.059729  0.831768  0.652259\n         3  0.244774  0.140322  0.041711\n         4  0.818205  0.753384  0.578851\n```", "```py\nIn [20]: df.eval('D = (A + B) / C', inplace=True)\n         df.head()\nOut[20]:           A         B         C          D\n         0  0.850888  0.966709  0.958690   1.895916\n         1  0.820126  0.385686  0.061402  19.638139\n         2  0.059729  0.831768  0.652259   1.366782\n         3  0.244774  0.140322  0.041711   9.232370\n         4  0.818205  0.753384  0.578851   2.715013\n```", "```py\nIn [21]: df.eval('D = (A - B) / C', inplace=True)\n         df.head()\nOut[21]:           A         B         C         D\n         0  0.850888  0.966709  0.958690 -0.120812\n         1  0.820126  0.385686  0.061402  7.075399\n         2  0.059729  0.831768  0.652259 -1.183638\n         3  0.244774  0.140322  0.041711  2.504142\n         4  0.818205  0.753384  0.578851  0.111982\n```", "```py\nIn [22]: column_mean = df.mean(1)\n         result1 = df['A'] + column_mean\n         result2 = df.eval('A + @column_mean')\n         np.allclose(result1, result2)\nOut[22]: True\n```", "```py\nIn [23]: result1 = df[(df.A < 0.5) & (df.B < 0.5)]\n         result2 = pd.eval('df[(df.A < 0.5) & (df.B < 0.5)]')\n         np.allclose(result1, result2)\nOut[23]: True\n```", "```py\nIn [24]: result2 = df.query('A < 0.5 and B < 0.5')\n         np.allclose(result1, result2)\nOut[24]: True\n```", "```py\nIn [25]: Cmean = df['C'].mean()\n         result1 = df[(df.A < Cmean) & (df.B < Cmean)]\n         result2 = df.query('A < @Cmean and B < @Cmean')\n         np.allclose(result1, result2)\nOut[25]: True\n```", "```py\nIn [26]: x = df[(df.A < 0.5) & (df.B < 0.5)]\n```", "```py\nIn [27]: tmp1 = df.A < 0.5\n         tmp2 = df.B < 0.5\n         tmp3 = tmp1 & tmp2\n         x = df[tmp3]\n```", "```py\nIn [28]: df.values.nbytes\nOut[28]: 32000\n```"]