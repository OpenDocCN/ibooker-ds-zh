["```py\n$ python3 -m pip install seqmagick\n```", "```py\n$ cd 15_seqmagique\n$ seqmagick info tests/inputs/*.fa\nname                  alignment    min_len   max_len   avg_len  num_seqs\ntests/inputs/1.fa     FALSE             50        50     50.00         1\ntests/inputs/2.fa     FALSE             49        79     64.00         5\ntests/inputs/empty.fa FALSE              0         0      0.00         0\n```", "```py\n$ cp solution1.py seqmagique.py\n$ ./seqmagique.py -h\nusage: seqmagique.py [-h] [-t table] FILE [FILE ...]\n\nMimic seqmagick\n\npositional arguments:\n  FILE                  Input FASTA file(s) ![1](assets/1.png)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -t table, --tablefmt table ![2](assets/2.png)\n                        Tabulate table style (default: plain)\n```", "```py\n$ ./seqmagique.py tests/inputs/*.fa\nname                     min_len    max_len    avg_len    num_seqs\ntests/inputs/1.fa             50         50      50.00           1\ntests/inputs/2.fa             49         79      64.00           5\ntests/inputs/empty.fa          0          0       0.00           0\n```", "```py\n$ ./seqmagique.py -t blargh tests/inputs/1.fa\nusage: seqmagique.py [-h] [-t table] FILE [FILE ...]\nseqmagique.py: error: argument -t/--tablefmt: invalid choice: 'blargh'\n(choose from 'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst',\n 'mediawiki', 'latex', 'latex_raw', 'latex_booktabs')\n```", "```py\n$ ./seqmagique.py -t simple tests/inputs/*.fa\nname                     min_len    max_len    avg_len    num_seqs\n---------------------  ---------  ---------  ---------  ----------\ntests/inputs/1.fa             50         50      50.00           1\ntests/inputs/2.fa             49         79      64.00           5\ntests/inputs/empty.fa          0          0       0.00           0\n```", "```py\n$ md5 -r tests/inputs/1.fa\nc383c386a44d83c37ae287f0aa5ae11d tests/inputs/1.fa\n```", "```py\n$ openssl md5 tests/inputs/1.fa\nMD5(tests/inputs/1.fa)= c383c386a44d83c37ae287f0aa5ae11d\n```", "```py\n$ md5sum tests/inputs/1.fa\nc383c386a44d83c37ae287f0aa5ae11d  tests/inputs/1.fa\n```", "```py\n$ md5 -r tests/inputs/empty.fa\nd41d8cd98f00b204e9800998ecf8427e tests/inputs/empty.fa\n```", "```py\n$ touch foo\n$ md5 -r foo\nd41d8cd98f00b204e9800998ecf8427e foo\n```", "```py\n$ cd tests/inputs\n$ md5 -r *.fa > checksums.md5\n```", "```py\n$ cat checksums.md5\nc383c386a44d83c37ae287f0aa5ae11d 1.fa\n863ebc53e28fdfe6689278e40992db9d 2.fa\nd41d8cd98f00b204e9800998ecf8427e empty.fa\n```", "```py\n$ md5sum --check checksums.md5\n1.fa: OK\n2.fa: OK\nempty.fa: OK\n```", "```py\n$ new.py -fp 'Mimic seqmagick' seqmagique.py\nDone, see new script \"seqmagique.py\".\n```", "```py\nimport argparse\nfrom typing import NamedTuple, TextIO, List\n\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    files: List[TextIO]\n    tablefmt: str\n\ndef get_args() -> Args:\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Argparse Python script',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file', ![1](assets/1.png)\n                        metavar='FILE',\n                        type=argparse.FileType('rt'),\n                        nargs='+',\n                        help='Input FASTA file(s)')\n\n    parser.add_argument('-t',\n                        '--tablefmt',\n                        metavar='table',\n                        type=str,\n                        choices=[ ![2](assets/2.png)\n                            'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst',\n                            'mediawiki', 'latex', 'latex_raw', 'latex_booktabs'\n                        ],\n                        default='plain',\n                        help='Tabulate table style')\n\n    args = parser.parse_args()\n\n    return Args(args.file, args.tablefmt)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for fh in args.files:\n        print(fh.name)\n```", "```py\n$ ./seqmagique.py tests/inputs/*.fa\ntests/inputs/1.fa\ntests/inputs/2.fa\ntests/inputs/empty.fa\n```", "```py\n$ fastq-dump --split-3 SAMN00000013 ![1](assets/1.png)\n```", "```py\n>>> from tabulate import tabulate\n>>> help(tabulate)\n```", "```py\n>>> hdr = ['name', 'min_len', 'max_len', 'avg_len', 'num_seqs']\n```", "```py\n>>> f1 = ['tests/inputs/1.fa', 50, 50, 50.00, 1]\n```", "```py\n>>> f2 = ['tests/inputs/2.fa', 49, 79, 64.00, 5]\n```", "```py\n>>> print(tabulate([f1, f2], headers=hdr))\nname                 min_len    max_len    avg_len    num_seqs\n-----------------  ---------  ---------  ---------  ----------\ntests/inputs/1.fa         50         50         50           1\ntests/inputs/2.fa         49         79         64           5\n```", "```py\n>>> print(tabulate([hdr, f1, f2], headers='firstrow'))\nname                 min_len    max_len    avg_len    num_seqs\n-----------------  ---------  ---------  ---------  ----------\ntests/inputs/1.fa         50         50         50           1\ntests/inputs/2.fa         49         79         64           5\n```", "```py\n>>> print(tabulate([f1, f2], headers=hdr, tablefmt='plain'))\nname                 min_len    max_len    avg_len    num_seqs\ntests/inputs/1.fa         50         50         50           1\ntests/inputs/2.fa         49         79         64           5\n```", "```py\n>>> print(tabulate([f1, f2], headers=hdr, tablefmt='plain', floatfmt='.2f'))\nname                 min_len    max_len    avg_len    num_seqs\ntests/inputs/1.fa         50         50      50.00           1\ntests/inputs/2.fa         49         79      64.00           5\n```", "```py\nclass FastaInfo(NamedTuple):\n    \"\"\" FASTA file information \"\"\"\n    filename: str\n    min_len: int\n    max_len: int\n    avg_len: float\n    num_seqs: int\n```", "```py\nimport numpy as np\nfrom tabulate import tabulate\nfrom Bio import SeqIO\n```", "```py\ndef process(fh: TextIO) -> FastaInfo: ![1](assets/1.png)\n    \"\"\" Process a file \"\"\"\n\n    if lengths := [len(rec.seq) for rec in SeqIO.parse(fh, 'fasta')]: ![2](assets/2.png)\n        return FastaInfo(filename=fh.name, ![3](assets/3.png)\n                         min_len=min(lengths), ![4](assets/4.png)\n                         max_len=max(lengths), ![5](assets/5.png)\n                         avg_len=round(float(np.mean(lengths)), 2), ![6](assets/6.png)\n                         num_seqs=len(lengths)) ![7](assets/7.png)\n\n    return FastaInfo(filename=fh.name, ![8](assets/8.png)\n                     min_len=0,\n                     max_len=0,\n                     avg_len=0,\n                     num_seqs=0)\n```", "```py\n$ cat tests/inputs/1.fa\n>SEQ0\nGGATAAAGCGAGAGGCTGGATCATGCACCAACTGCGTGCAACGAAGGAAT\n```", "```py\n>>> import io\n>>> f1 = '>SEQ0\\nGGATAAAGCGAGAGGCTGGATCATGCACCAACTGCGTGCAACGAAGGAAT\\n' ![1](assets/1.png)\n>>> fh = io.StringIO(f1) ![2](assets/2.png)\n>>> for line in fh: ![3](assets/3.png)\n...     print(line, end='') ![4](assets/4.png)\n...\n>SEQ0\nGGATAAAGCGAGAGGCTGGATCATGCACCAACTGCGTGCAACGAAGGAAT\n```", "```py\n>>> fh.name\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: '_io.StringIO' object has no attribute 'name'\n```", "```py\n>>> from unittest.mock import mock_open\n>>> fh = mock_open(read_data=f1)()\n>>> fh.read()\n'>SEQ0\\nGGATAAAGCGAGAGGCTGGATCATGCACCAACTGCGTGCAACGAAGGAAT\\n'\n```", "```py\n>>> fh.name\n<MagicMock name='open().name' id='140349116126880'>\n```", "```py\nfrom unittest.mock import mock_open ![1](assets/1.png)\nfrom seqmagique import process ![2](assets/2.png)\n\ndef test_process() -> None:\n    \"\"\" Test process \"\"\"\n\n    empty = process(mock_open(read_data='')()) ![3](assets/3.png)\n    assert empty.min_len == 0\n    assert empty.max_len == 0\n    assert empty.avg_len == 0\n    assert empty.num_seqs == 0\n\n    one = process(mock_open(read_data='>SEQ0\\nAAA')()) ![4](assets/4.png)\n    assert one.min_len == 3\n    assert one.max_len == 3\n    assert one.avg_len == 3\n    assert one.num_seqs == 1\n\n    two = process(mock_open(read_data='>SEQ0\\nAAA\\n>SEQ1\\nCCCC')()) ![5](assets/5.png)\n    assert two.min_len == 3\n    assert two.max_len == 4\n    assert two.avg_len == 3.5\n    assert two.num_seqs == 2\n```", "```py\n$ pytest -xv unit.py\n============================= test session starts ==============================\n...\n\nunit.py::test_process PASSED                                             [100%]\n\n============================== 1 passed in 2.55s ===============================\n```", "```py\ndef main() -> None:\n    args = get_args()\n    data = [process(fh) for fh in args.files] ![1](assets/1.png)\n    hdr = ['name', 'min_len', 'max_len', 'avg_len', 'num_seqs'] ![2](assets/2.png)\n    print(tabulate(data, tablefmt=args.tablefmt, headers=hdr, floatfmt='.2f')) ![3](assets/3.png)\n```", "```py\n$ cat mk-outs.sh\n#!/usr/bin/env bash\n\nPRG=\"./seqmagique.py\" ![1](assets/1.png)\nDIR=\"./tests/inputs\" ![2](assets/2.png)\nINPUT1=\"${DIR}/1.fa\" ![3](assets/3.png)\nINPUT2=\"${DIR}/2.fa\"\nEMPTY=\"${DIR}/empty.fa\"\n\n$PRG $INPUT1 > \"${INPUT1}.out\" ![4](assets/4.png)\n$PRG $INPUT2 > \"${INPUT2}.out\"\n$PRG $EMPTY > \"${EMPTY}.out\"\n$PRG $INPUT1 $INPUT2 $EMPTY > \"$DIR/all.fa.out\"\n\nSTYLES=\"plain simple grid pipe orgtbl rst mediawiki latex latex_raw\n latex_booktabs\"\n\nfor FILE in $INPUT1 $INPUT2; do ![5](assets/5.png)\n    for STYLE in $STYLES; do\n        $PRG -t $STYLE $FILE > \"$FILE.${STYLE}.out\"\n    done\ndone\n\necho Done.\n```", "```py\nTEST1 = ('./tests/inputs/1.fa', './tests/inputs/1.fa.out')\n```", "```py\ndef run(input_file: str, expected_file: str) -> None:\n    \"\"\" Runs on command-line input \"\"\"\n\n    expected = open(expected_file).read().rstrip() ![1](assets/1.png)\n    rv, out = getstatusoutput(f'{RUN} {input_file}') ![2](assets/2.png)\n    assert rv == 0 ![3](assets/3.png)\n    assert out == expected ![4](assets/4.png)\n```", "```py\ndef test_input1() -> None:\n    \"\"\" Runs on command-line input \"\"\"\n\n    run(*TEST1) ![1](assets/1.png)\n```", "```py\ndef test_styles() -> None:\n    \"\"\" Test table styles \"\"\"\n\n    styles = [ ![1](assets/1.png)\n        'plain', 'simple', 'grid', 'pipe', 'orgtbl', 'rst', 'mediawiki',\n        'latex', 'latex_raw', 'latex_booktabs'\n    ]\n\n    for file in [TEST1[0], TEST2[0]]: ![2](assets/2.png)\n        for style in styles: ![3](assets/3.png)\n            expected_file = file + '.' + style + '.out' ![4](assets/4.png)\n            assert os.path.isfile(expected_file) ![5](assets/5.png)\n            expected = open(expected_file).read().rstrip() ![6](assets/6.png)\n            flag = '--tablefmt' if random.choice([0, 1]) else '-t' ![7](assets/7.png)\n            rv, out = getstatusoutput(f'{RUN} {flag} {style} {file}') ![8](assets/8.png)\n            assert rv == 0 ![9](assets/9.png)\n            assert out == expected\n```", "```py\nfrom rich.console import Console\nfrom rich.progress import track\nfrom rich.table import Table, Column\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    table = Table('Name', ![1](assets/1.png)\n                  Column(header='Min. Len', justify='right'),\n                  Column(header='Max. Len', justify='right'),\n                  Column(header='Avg. Len', justify='right'),\n                  Column(header='Num. Seqs', justify='right'),\n                  header_style=\"bold black\")\n\n    for fh in track(args.file): ![2](assets/2.png)\n        file = process(fh) ![3](assets/3.png)\n        table.add_row(file.filename, str(file.min_len), str(file.max_len), ![4](assets/4.png)\n                      str(file.avg_len), str(file.num_seqs))\n\n    console = Console() ![5](assets/5.png)\n    console.print(table)\n```"]