- en: Chapter 3\. Visualizing Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I believe that visualization is one of the most powerful means of achieving
    personal goals.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Harvey Mackay
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A fundamental part of the data scientist’s toolkit is data visualization. Although
    it is very easy to create visualizations, it’s much harder to produce *good* ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary uses for data visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: To *explore* data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To *communicate* data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will concentrate on building the skills that you’ll need
    to start exploring your own data and to produce the visualizations we’ll be using
    throughout the rest of the book. Like most of our chapter topics, data visualization
    is a rich field of study that deserves its own book. Nonetheless, I’ll try to
    give you a sense of what makes for a good visualization and what doesn’t.
  prefs: []
  type: TYPE_NORMAL
- en: matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A wide variety of tools exist for visualizing data. We will be using the [matplotlib
    library](http://matplotlib.org/), which is widely used (although sort of showing
    its age). If you are interested in producing elaborate interactive visualizations
    for the web, it is likely not the right choice, but for simple bar charts, line
    charts, and scatterplots, it works pretty well.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, matplotlib is not part of the core Python library. With
    your virtual environment activated (to set one up, go back to [“Virtual Environments”](ch02.html#virtual_environments)
    and follow the instructions), install it using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We will be using the `matplotlib.pyplot` module. In its simplest use, `pyplot`
    maintains an internal state in which you build up a visualization step by step.
    Once you’re done, you can save it with `savefig` or display it with `show`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, making simple plots (like [Figure 3-1](#simple_line_chart)) is
    pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![A simple line chart.](assets/dsf2_0301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-1\. A simple line chart
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Making plots that look publication-quality good is more complicated and beyond
    the scope of this chapter. There are many ways you can customize your charts with,
    for example, axis labels, line styles, and point markers. Rather than attempt
    a comprehensive treatment of these options, we’ll just use (and call attention
    to) some of them in our examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Although we won’t be using much of this functionality, matplotlib is capable
    of producing complicated plots within plots, sophisticated formatting, and interactive
    visualizations. Check out [its documentation](https://matplotlib.org) if you want
    to go deeper than we do in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Bar Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A bar chart is a good choice when you want to show how some quantity varies
    among some *discrete* set of items. For instance, [Figure 3-2](#simple_bar_chart)
    shows how many Academy Awards were won by each of a variety of movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![A simple bar chart.](assets/dsf2_0302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-2\. A simple bar chart
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A bar chart can also be a good choice for plotting histograms of bucketed numeric
    values, as in [Figure 3-3](#bar_chart_histogram), in order to visually explore
    how the values are *distributed*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![A bar chart histogram.](assets/dsf2_0303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-3\. Using a bar chart for a histogram
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The third argument to `plt.bar` specifies the bar width. Here we chose a width
    of 10, to fill the entire decile. We also shifted the bars right by 5, so that,
    for example, the “10” bar (which corresponds to the decile 10–20) would have its
    center at 15 and hence occupy the correct range. We also added a black edge to
    each bar to make them visually distinct.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `plt.axis` indicates that we want the x-axis to range from –5 to
    105 (just to leave a little space on the left and right), and that the y-axis
    should range from 0 to 5\. And the call to `plt.xticks` puts x-axis labels at
    0, 10, 20, …, 100.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be judicious when using `plt.axis`. When creating bar charts it is considered
    especially bad form for your y-axis not to start at 0, since this is an easy way
    to mislead people ([Figure 3-4](#misleading_y_axis)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Misleading y-axis.](assets/dsf2_0304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-4\. A chart with a misleading y-axis
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In [Figure 3-5](#non_misleading_y_axis), we use more sensible axes, and it
    looks far less impressive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Non-misleading y-axis.](assets/dsf2_0305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-5\. The same chart with a nonmisleading y-axis
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Line Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw already, we can make line charts using `plt.plot`. These are a good
    choice for showing *trends*, as illustrated in [Figure 3-6](#several_line_charts):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Several line charts with a legend.](assets/dsf2_0306.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-6\. Several line charts with a legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Scatterplots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A scatterplot is the right choice for visualizing the relationship between
    two paired sets of data. For example, [Figure 3-7](#friends_and_minutes) illustrates
    the relationship between the number of friends your users have and the number
    of minutes they spend on the site every day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![A scatterplot of friends and time on the site.](assets/dsf2_0307.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-7\. A scatterplot of friends and time on the site
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re scattering comparable variables, you might get a misleading picture
    if you let matplotlib choose the scale, as in [Figure 3-8](#scatterplot_incomparable_axes).
  prefs: []
  type: TYPE_NORMAL
- en: '![A scatterplot with uncomparable axes.](assets/dsf2_0308.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-8\. A scatterplot with uncomparable axes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If we include a call to `plt.axis("equal")`, the plot ([Figure 3-9](#scatterplot_equal_axes))
    more accurately shows that most of the variation occurs on test 2.
  prefs: []
  type: TYPE_NORMAL
- en: That’s enough to get you started doing visualization. We’ll learn much more
    about visualization throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: '![A scatterplot with equal axes.](assets/dsf2_0309.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3-9\. The same scatterplot with equal axes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For Further Exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [matplotlib Gallery](https://matplotlib.org/gallery.html) will give you
    a good idea of the sorts of things you can do with matplotlib (and how to do them).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[seaborn](https://seaborn.pydata.org/) is built on top of matplotlib and allows
    you to easily produce prettier (and more complex) visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Altair](https://altair-viz.github.io/) is a newer Python library for creating
    declarative visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[D3.js](http://d3js.org) is a JavaScript library for producing sophisticated
    interactive visualizations for the web. Although it is not in Python, it is widely
    used, and it is well worth your while to be familiar with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bokeh](http://bokeh.pydata.org) is a library that brings D3-style visualizations
    into Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
