["```py\nYou can now view your Streamlit app in your browser.\n\n  Local URL: http://localhost:8502\n  Network URL: http://192.168.50.68:8502\n```", "```py\ngit init\n```", "```py\ngit add .\n```", "```py\ngit commit -m \"Commit Streamlit to-do list app\"\n```", "```py\nhttps://<Your PAT>@<Repo URL without the https://>\n```", "```py\nhttps://ghp_fLbbSwjMlw3gUs7fgRux8Ha3PIlG9w3ZY3zY@github.com/omnom-code2/streamlit-todo-list-app.git\n```", "```py\ngit remote add origin <PAT-embedded URL>\n```", "```py\ngit remote add origin https://ghp_fLbbSwjMlw3gUs7fgRux8Ha3PIlG9w3ZY3zY@github.com/omnom-code2/streamlit-todo-list-app.git\n```", "```py\ngit push -u origin master\n```", "```py\nhttps://<base address>/<endpoint>\n```", "```py\nhttps://api.weathersite.com/forecast?date=2024-08-01\n```", "```py\n{\n  \"high_temp\": 72,\n  \"low_temp\": 60,\n  \"forecast_text\": \"Nice and sunny, a good day for the park\"\n}\n```", "```py\nhttps://api.api-ninjas.com/v1/quotes?category=friendship\n```", "```py\n{\"error\": \"Missing API Key.\"}\n```", "```py\npip install requests\n```", "```py\n>>> import requests\n>>> response = requests.get(\"https://api.api-ninjas.com/v1/quotes?category=friendship\")\n>>> response\n<Response [400]>\n>>> response.text\n'{\"error\": \"Missing API Key.\"}'\n\n```", "```py\n>>> headers={\"X-Api-Key\": \"+4VJR...\"}   #A\n>>> response = requests.get(\"https://api.api-ninjas.com/v1/quotes?category=friendship\", headers=headers)\n>>> response.text\n'[{\"quote\": \"People come in and out of our lives, and the true test of friendship is whether you can pick back up right where you left off the last time you saw each other.\", \"author\": \"Lisa See\", \"category\": \"friendship\"}]'\n```", "```py\nimport requests\n\nAPI_URL = \"https://api.api-ninjas.com/v1/quotes\"\nQUOTE_CATEGORY = \"inspirational\"\n\ndef generate_quote(api_key):\n    params = {\"category\": QUOTE_CATEGORY}\n    headers = {\"X-Api-Key\": api_key}\n    response = requests.get(API_URL, params=params, headers=headers)\n    quote_obj = response.json()[0]\n    if response.status_code == requests.codes.ok:\n        return f\"{quote_obj['quote']} -- {quote_obj['author']}\"\n    return f\"Just do it! -- Shia LaBeouf\"\n\n```", "```py\nparams = {\"category\": QUOTE_CATEGORY}\n```", "```py\nresponse = requests.get(API_URL, params=params, headers=headers)\n```", "```py\n>>> response.text\n'[{\"quote\": \"People come in and out of our lives, and the true test of friendship is whether you can pick back up right where you left off the last time you saw each other.\", \"author\": \"Lisa See\", \"category\": \"friendship\"}]'\n```", "```py\nquote_obj = response.json()[0]\n```", "```py\nif response.status_code == requests.codes.ok:\n        return f\"{quote_obj['quote']} -- {quote_obj['author']}\"\n```", "```py\nreturn f\"Just do it! -- Shia LaBeouf\"\n\n```", "```py\nfrom quotes import generate_quote\n```", "```py\nst.info(generate_quote(\"+4VJR...\"))\n```", "```py\nif \"quote\" not in st.session_state:\n    st.session_state.quote = generate_quote(\"+4VJR...\")    #A\n```", "```py\nst.info(st.session_state.quote)\n```", "```py\n[quotes_api]\napi_key = \"+4VJR...\"\n```", "```py\n{'quotes_api': {'api_key': '+4VJR...'}}\n```", "```py\nif \"quote\" not in st.session_state:\n    api_key = st.secrets[\"quotes_api\"][\"api_key\"]\n    st.session_state.quote = generate_quote(api_key)\n```", "```py\nimport streamlit as st\nfrom task import Task\nfrom quotes import generate_quote\n\nif \"task_list\" not in st.session_state:\n    st.session_state.task_list = []\ntask_list = st.session_state.task_list\n\nif \"quote\" not in st.session_state:\n api_key = st.secrets[\"quotes_api\"][\"api_key\"]\n st.session_state.quote = generate_quote(api_key)\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\nst.info(st.session_state.quote)\n\ntotal_tasks = len(task_list)\ncompleted_tasks = sum(1 for task in task_list if task.is_done)\nmetric_display = f\"{completed_tasks}/{total_tasks} done\"\nst.metric(\"Task completion\", metric_display, delta=None)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    label = f\"~~{task.name}~~\" if task.is_done else task.name\n    checked = task_col.checkbox(label, task.is_done, key=f\"task_{idx}\")\n    if checked and not task.is_done:\n        mark_done(task)\n        st.rerun()\n    elif not checked and task.is_done:\n        mark_not_done(task)\n        st.rerun()\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        delete_task(idx)\n        st.rerun()\n```", "```py\nrequests\nstreamlit\n\n```", "```py\nrequests==2.31.0\nstreamlit==1.34.0\n\n```", "```py\nrequests>=2.31.0\nstreamlit>=1.34.0\n\n```", "```py\n.streamlit/\n```", "```py\nRoot of your Git repo\n├── .streamlit (folder)\n│   └── secrets.toml\n├── .gitignore\n├── requirements.txt\n├── quotes.py\n├── task.py\n└── todo_list.py\n```", "```py\ngit add .\ngit commit -m \"Add quote-of-the-day functionality\"\ngit push\n\n```"]