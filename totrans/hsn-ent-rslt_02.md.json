["```py\n>>>git clone https://github.com/mshearer0/HandsOnEntityResolution\n```", "```py\n>>>python -m venv HandsOnEntityResolution\n```", "```py\n>>>.\\HandsOnEntityResolution\\Scripts\\activate.bat\n(Windows)\n\n>>>source HandsOnEntityResolution/bin/activate \n(Linux)\n```", "```py\n>>>(HandsOnEntityResolution) \n    your_path\\HandsOnEntityResolution\n```", "```py\n>>>deactivate (Windows)\n\n>>>deactivate (Linux)\n```", "```py\n>>>cd HandsOnEntityResolution\n```", "```py\n>>>python -m pip --version\npip 23.0.1 from your_path\\HandsOnEntityResolution\\lib\\\n   site-packages\\pip (python 3.7)\n```", "```py\n>>>pip install -r requirements.txt\n```", "```py\n>>>python -m ipykernel install --user\n   --name=handsonentityresolution\n```", "```py\n>>>jupyter-lab\n```", "```py\nurl = \"https://en.wikipedia.org/wiki/\n       List_of_MPs_elected_in_the_2019_United_Kingdom_general_election\"\n```", "```py\nimport requests\nfrom bs4 import BeautifulSoup\n\nwebsite_url = requests.get(url).text\nsoup = BeautifulSoup(website_url,'html.parser')\ntables = soup.find_all('table')\n```", "```py\nimport pandas as pd\n\nfor table in tables:\n   if 'Member returned' in table.text:\n      headers = [header.text.strip() for header in table.find_all('th')]\n      headers = headers[:5]\n      dfrows = []\n      table_rows = table.find_all('tr')\n      for row in table_rows:\n         td = row.find_all('td')\n         dfrow = [row.text for row in td if row.text!='\\n']\n         dfrows.append(dfrow)\n\ndf_w = pd.DataFrame(dfrows, columns=headers)\n```", "```py\ndf_w = df_w[['Constituency','Member returned','Notes']]\n```", "```py\nurl = \"https://www.theyworkforyou.com/mps/?f=csv\"\ndf_t = pd.read_csv(url, header=0)\n```", "```py\ndef facelink(url):\n   website_url = requests.get(url).text\n   soup = BeautifulSoup(website_url,'html.parser')\n   flinks = [f\"{item['href']}\" for item in soup.select\n      (\"a[href*='facebook.com']\")]\n   if flinks[0]!=\"https://www.facebook.com/TheyWorkForYou\":\n      return(flinks[0])\n   else:\n      return(\"\")\n```", "```py\ndf_t['Flink'] = df_t.apply(lambda x: facelink(x.URI), axis=1)\n```", "```py\ndf_t = df_t[['Constituency','First name','Last name','Flink']]\n```", "```py\ndf_w = df_w.rename(columns={ 'Member returned' : 'Fullname'})\n```", "```py\ndf = df.dropna()\n```", "```py\ndf_w['Constituency'] = df_w['Constituency'].str.rstrip(\"\\n\")\ndf_w['Fullname'] = df_w['Fullname'].str.rstrip(\"\\n\")\n```", "```py\ndf_w[df_w['Fullname'].astype(str).str.contains('\\n')]\n```", "```py\ndf_w['Fullname'] = df_w['Fullname'].str.lstrip(\"\\n\")\n```", "```py\ndf_w['Firstname'] = df_w['Fullname'].str.split().str[0]\ndf_w['Lastname'] = df_w['Fullname'].astype(str).apply(lambda x:\n   ' '.join(x.split()[1:]))\n```", "```py\ndf_t = df_t.rename(columns={'Last name' : 'Lastname',\n                             'First name' : 'Firstname'})\n```", "```py\nlen(df_w.merge(df_t, on=['Constituency','Firstname','Lastname']))\n599\n```", "```py\nlen(df_w.merge(df_t, on=['Constituency','Lastname']))\n607\n```", "```py\nlen(df_w.merge(df_t, on=['Constituency'] ))\n623\n```", "```py\ndf_t['Constituency'] = df_t['Constituency'].str.replace(',', '')\ndf_w['Constituency'] = df_w['Constituency'].str.replace(',', '')\n```", "```py\nlen(df_w.merge(df_t, on=['Constituency']))\n650\n```", "```py\nlen(df_w.merge(df_t, on=['Constituency','Firstname','Lastname']))\n624\n```", "```py\ndf_t['Firstname'] = df_t['Firstname'].str.split().str[0]\n```", "```py\ndf_resolved = df_w.merge(df_t, on=['Firstname','Lastname'] )\n\nlen(df_resolved)\n628\n```", "```py\ndf_heldwithface = df_resolved[(df_resolved['Flink']!=\"\") &\n      (df_resolved['Notes']==\"Seat held\\n\")]\nlen(df_heldwithface)\n474\n```", "```py\ndf_w.to_csv('mps_wiki_clean.csv', index=False)\ndf_t.to_csv('mps_they_clean.csv', index=False)\n```"]