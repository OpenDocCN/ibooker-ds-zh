- en: Chapter 16\. Handling Missing Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章 处理缺失数据
- en: The difference between data found in many tutorials and data in the real world
    is that real-world data is rarely clean and homogeneous. In particular, many interesting
    datasets will have some amount of data missing. To make matters even more complicated,
    different data sources may indicate missing data in different ways.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多教程中找到的数据与现实世界中的数据之间的区别在于，现实世界的数据很少是干净且同质的。特别是，许多有趣的数据集会有一些数据缺失。更复杂的是，不同的数据源可能以不同的方式指示缺失数据。
- en: In this chapter, we will discuss some general considerations for missing data,
    look at how Pandas chooses to represent it, and explore some built-in Pandas tools
    for handling missing data in Python. Here and throughout the book, I will refer
    to missing data in general as *null*, `*NaN*`, or *NA* values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论一些有关缺失数据的一般考虑事项，看看 Pandas 如何选择表示它，并探索一些处理 Python 中缺失数据的内置 Pandas 工具。在本书中，我将通常将缺失数据总称为*null*、`*NaN*`或*NA*值。
- en: Trade-offs in Missing Data Conventions
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失数据约定中的权衡
- en: 'A number of approaches have been developed to track the presence of missing
    data in a table or `DataFrame`. Generally, they revolve around one of two strategies:
    using a *mask* that globally indicates missing values, or choosing a *sentinel
    value* that indicates a missing entry.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 已开发出许多方法来跟踪表格或`DataFrame`中缺失数据的存在。通常，它们围绕两种策略之一展开：使用*掩码*全局指示缺失值，或选择指示缺失条目的*哨兵值*。
- en: In the masking approach, the mask might be an entirely separate Boolean array,
    or it might involve appropriation of one bit in the data representation to locally
    indicate the null status of a value.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在掩码方法中，掩码可以是一个完全独立的布尔数组，也可以涉及在数据表示中占用一个比特来局部指示值的空状态。
- en: In the sentinel approach, the sentinel value could be some data-specific convention,
    such as indicating a missing integer value with –9999 or some rare bit pattern,
    or it could be a more global convention, such as indicating a missing floating-point
    value with `NaN` (Not a Number), a special value that is part of the IEEE floating-point
    specification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在哨兵方法中，哨兵值可以是一些特定于数据的约定，比如用 -9999 表示缺失的整数值或一些罕见的比特模式，或者可以是一个更全局的约定，比如用`NaN`（不是数字）表示缺失的浮点值，这是
    IEEE 浮点规范的一部分。
- en: Neither of these approaches is without trade-offs. Use of a separate mask array
    requires allocation of an additional Boolean array, which adds overhead in both
    storage and computation. A sentinel value reduces the range of valid values that
    can be represented, and may require extra (often nonoptimized) logic in CPU and
    GPU arithmetic, because common special values like `NaN` are not available for
    all data types.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都不是没有权衡的。使用单独的掩码数组需要分配额外的布尔数组，这在存储和计算上都增加了开销。哨兵值会减少可以表示的有效值范围，并且可能需要额外的（通常是非优化的）CPU
    和 GPU 算术逻辑，因为常见的特殊值如`NaN`并不适用于所有数据类型。
- en: As in most cases where no universally optimal choice exists, different languages
    and systems use different conventions. For example, the R language uses reserved
    bit patterns within each data type as sentinel values indicating missing data,
    while the SciDB system uses an extra byte attached to every cell to indicate an
    NA state.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数情况下没有普遍适用的最佳选择一样，不同的语言和系统使用不同的约定。例如，R 语言使用每种数据类型内的保留比特模式作为指示缺失数据的哨兵值，而
    SciDB 系统使用附加到每个单元的额外字节来指示 NA 状态。
- en: Missing Data in Pandas
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 中的缺失数据
- en: The way in which Pandas handles missing values is constrained by its reliance
    on the NumPy package, which does not have a built-in notion of NA values for non-floating-point
    data types.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 处理缺失值的方式受其对 NumPy 包的依赖限制，后者对非浮点数据类型没有内置的 NA 值概念。
- en: 'Perhaps Pandas could have followed R’s lead in specifying bit patterns for
    each individual data type to indicate nullness, but this approach turns out to
    be rather unwieldy. While R has just 4 main data types, NumPy supports *far* more
    than this: for example, while R has a single integer type, NumPy supports 14 basic
    integer types once you account for available bit widths, signedness, and endianness
    of the encoding. Reserving a specific bit pattern in all available NumPy types
    would lead to an unwieldy amount of overhead in special-casing various operations
    for various types, likely even requiring a new fork of the NumPy package. Further,
    for the smaller data types (such as 8-bit integers), sacrificing a bit to use
    as a mask would significantly reduce the range of values it can represent.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 也许Pandas本可以效仿R在指定每个单独数据类型的位模式以指示空值方面的领先地位，但是这种方法事实证明相当笨拙。虽然R只有4种主要数据类型，但是NumPy支持的数据类型远远超过这个数字：例如，虽然R只有一个整数类型，但是考虑到可用的位宽、符号性和编码的字节顺序，NumPy支持14种基本整数类型。在所有可用的NumPy类型中保留特定的位模式将导致在各种类型的操作中特殊处理大量操作，很可能甚至需要新的NumPy软件包的分支。此外，对于较小的数据类型（如8位整数），牺牲一位用作掩码将显著减少其可以表示的值的范围。
- en: 'Because of these constraints and trade-offs, Pandas has two “modes” of storing
    and manipulating null values:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些限制和权衡，Pandas有两种存储和操作空值的“模式”：
- en: The default mode is to use a sentinel-based missing data scheme, with sentinel
    values `NaN` or `None` depending on the type of the data.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认模式是使用基于哨兵值的缺失数据方案，哨兵值为`NaN`或`None`，具体取决于数据类型。
- en: Alternatively, you can opt in to using the nullable data types (dtypes) Pandas
    provides (discussed later in this chapter), which results in the creation an accompanying
    mask array to track missing entries. These missing entries are then presented
    to the user as the special `pd.NA` value.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，您可以选择使用Pandas提供的可空数据类型（dtypes）（稍后在本章讨论），这将导致创建一个伴随的掩码数组来跟踪缺失的条目。然后，这些缺失的条目将被呈现给用户作为特殊的`pd.NA`值。
- en: 'In either case, the data operations and manipulations provided by the Pandas
    API will handle and propagate those missing entries in a predictable manner. But
    to develop some intuition into *why* these choices are made, let’s dive quickly
    into the trade-offs inherent in `None`, `NaN`, and `NA`. As usual, we’ll start
    by importing NumPy and Pandas:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，Pandas API提供的数据操作和操作将以可预测的方式处理和传播这些缺失的条目。但是为了对为什么会做出这些选择有一些直觉，让我们快速探讨一下`None`、`NaN`和`NA`中固有的权衡。像往常一样，我们将从导入NumPy和Pandas开始：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: None as a Sentinel Value
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`None`作为哨兵值'
- en: For some data types, Pandas uses `None` as a sentinel value. `None` is a Python
    object, which means that any array containing `None` must have `dtype=object`—that
    is, it must be a sequence of Python objects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些数据类型，Pandas使用`None`作为哨兵值。`None`是一个Python对象，这意味着包含`None`的任何数组必须具有`dtype=object`，即它必须是Python对象的序列。
- en: 'For example, observe what happens if you pass `None` to a NumPy array:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，观察将`None`传递给NumPy数组会发生什么：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This `dtype=object` means that the best common type representation NumPy could
    infer for the contents of the array is that they are Python objects. The downside
    of using `None` in this way is that operations on the data will be done at the
    Python level, with much more overhead than the typically fast operations seen
    for arrays with native types:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`dtype=object`意味着NumPy可以推断出数组内容的最佳公共类型表示是Python对象。以这种方式使用`None`的缺点是数据的操作将在Python级别完成，其开销比通常对具有本地类型的数组所见的快速操作要大得多：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Further, because Python does not support arithmetic operations with `None`,
    aggregations like `sum` or `min` will generally lead to an error:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为Python不支持与`None`的算术运算，像`sum`或`min`这样的聚合通常会导致错误：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For this reason, Pandas does not use `None` as a sentinel in its numerical arrays.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Pandas在其数值数组中不使用`None`作为哨兵值。
- en: 'NaN: Missing Numerical Data'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`NaN`：缺失的数值数据'
- en: 'The other missing data sentinel, `NaN` is different; it is a special floating-point
    value recognized by all systems that use the standard IEEE floating-point representation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个缺失数据哨兵，`NaN`，是不同的；它是一种特殊的浮点值，在所有使用标准IEEE浮点表示的系统中都被识别：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that NumPy chose a native floating-point type for this array: this means
    that unlike the object array from before, this array supports fast operations
    pushed into compiled code. Keep in mind that `NaN` is a bit like a data virus—it
    infects any other object it touches.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，NumPy为此数组选择了本地的浮点类型：这意味着与之前的对象数组不同，此数组支持快速操作并推入编译代码中。请记住，`NaN`有点像数据病毒——它会感染到任何它接触到的其他对象。
- en: 'Regardless of the operation, the result of arithmetic with `NaN` will be another
    `NaN`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不管进行何种操作，带有`NaN`的算术运算的结果都将是另一个`NaN`：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This means that aggregates over the values are well defined (i.e., they don’t
    result in an error) but not always useful:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对值的聚合是定义良好的（即，它们不会导致错误），但并不总是有用的：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That said, NumPy does provide `NaN`-aware versions of aggregations that will
    ignore these missing values:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，NumPy确实提供了对`NaN`敏感的聚合函数版本，将忽略这些缺失值：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The main downside of `NaN` is that it is specifically a floating-point value;
    there is no equivalent `NaN` value for integers, strings, or other types.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`的主要缺点是它是特定的浮点值；对于整数、字符串或其他类型，都没有等价的`NaN`值。'
- en: NaN and None in Pandas
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas中的NaN和None
- en: '`NaN` and `None` both have their place, and Pandas is built to handle the two
    of them nearly interchangeably, converting between them where appropriate:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`和`None`都有它们的用途，而且Pandas几乎可以在它们之间自由转换，视情况而定：'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For types that don’t have an available sentinel value, Pandas automatically
    typecasts when NA values are present. For example, if we set a value in an integer
    array to `np.nan`, it will automatically be upcast to a floating-point type to
    accommodate the NA:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有可用哨兵值的类型，当存在NA值时，Pandas会自动进行类型转换。例如，如果我们将整数数组中的一个值设置为`np.nan`，它将自动提升为浮点类型以容纳NA：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that in addition to casting the integer array to floating point, Pandas
    automatically converts the `None` to a `NaN` value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，除了将整数数组转换为浮点数外，Pandas还会自动将`None`转换为`NaN`值。
- en: While this type of magic may feel a bit hackish compared to the more unified
    approach to NA values in domain-specific languages like R, the Pandas sentinel/casting
    approach works quite well in practice and in my experience only rarely causes
    issues.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种类型的魔法操作可能与像R这样的特定领域语言中的NA值的更统一方法相比显得有些投机，但是Pandas的哨兵/转换方法在实践中运作得非常好，并且据我经验，很少引起问题。
- en: '[Table 16-1](#table-16-1) lists the upcasting conventions in Pandas when NA
    values are introduced.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 16-1](#table-16-1)列出了引入NA值时Pandas中的提升转换规则。'
- en: Table 16-1\. Pandas handling of NAs by type
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16-1\. Pandas按类型处理NA值
- en: '| Typeclass | Conversion when storing NAs | NA sentinel value |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 存储NA时的转换 | NA哨兵值 |'
- en: '| --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `floating` | No change | `np.nan` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `floating` | 无变化 | `np.nan` |'
- en: '| `object` | No change | `None` or `np.nan` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `object` | 无变化 | `None`或`np.nan` |'
- en: '| `integer` | Cast to `float64` | `np.nan` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `integer` | 转换为`float64` | `np.nan` |'
- en: '| `boolean` | Cast to `object` | `None` or `np.nan` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `boolean` | 转换为`object` | `None`或`np.nan` |'
- en: Keep in mind that in Pandas, string data is always stored with an `object` dtype.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在Pandas中，字符串数据始终以`object`类型存储。
- en: Pandas Nullable Dtypes
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas可空数据类型
- en: 'In early versions of Pandas, `NaN` and `None` as sentinel values were the only
    missing data representations available. The primary difficulty this introduced
    was with regard to the implicit type casting: for example, there was no way to
    represent a true integer array with missing data.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期版本的Pandas中，`NaN`和`None`作为哨兵值是唯一可用的缺失数据表示。这引入的主要困难是隐式类型转换：例如，无法表示真正的整数数组带有缺失数据。
- en: To address this difficulty, Pandas later added *nullable dtypes*, which are
    distinguished from regular dtypes by capitalization of their names (e.g., `pd.Int32`
    versus `np.int32`). For backward compatibility, these nullable dtypes are only
    used if specifically requested.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Pandas后来添加了*可空数据类型*，它们通过名称的大写区分于常规数据类型（例如，`pd.Int32`与`np.int32`）。为了向后兼容，只有在明确请求时才会使用这些可空数据类型。
- en: 'For example, here is a `Series` of integers with missing data, created from
    a list containing all three available markers of missing data:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个带有缺失数据的整数`Series`，由包含所有三种可用缺失数据标记的列表创建：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This representation can be used interchangeably with the others in all the operations
    explored through the rest of this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示可以在本章剩余的所有操作中与其他表示方法交替使用。
- en: Operating on Null Values
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作空值
- en: 'As we have seen, Pandas treats `None`, `NaN`, and `NA` as essentially interchangeable
    for indicating missing or null values. To facilitate this convention, Pandas provides
    several methods for detecting, removing, and replacing null values in Pandas data
    structures. They are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，Pandas 将 `None`、`NaN` 和 `NA` 视为基本可以互换，用于指示缺失或空值。为了促进这一约定，Pandas 提供了几种方法来检测、删除和替换
    Pandas 数据结构中的空值。它们包括：
- en: '`isnull`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`isnull`'
- en: Generates a Boolean mask indicating missing values
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个指示缺失值的布尔掩码
- en: '`notnull`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`notnull`'
- en: Opposite of `isnull`
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`isnull` 的反操作'
- en: '`dropna`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropna`'
- en: Returns a filtered version of the data
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据的过滤版本
- en: '`fillna`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`fillna`'
- en: Returns a copy of the data with missing values filled or imputed
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 返回填充或插补了缺失值的数据副本
- en: We will conclude this chapter with a brief exploration and demonstration of
    these routines.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以对这些程序的简要探索和演示来结束本章。
- en: Detecting Null Values
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测空值
- en: 'Pandas data structures have two useful methods for detecting null data: `isnull`
    and `notnull`. Either one will return a Boolean mask over the data. For example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 数据结构有两个有用的方法来检测空数据：`isnull` 和 `notnull`。任何一个都将返回数据的布尔掩码。例如：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As mentioned in [Chapter 14](ch14.xhtml#section-0302-data-indexing-and-selection),
    Boolean masks can be used directly as a `Series` or `DataFrame` index:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 [第 14 章](ch14.xhtml#section-0302-data-indexing-and-selection) 中提到的那样，布尔掩码可以直接用作
    `Series` 或 `DataFrame` 的索引：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `isnull()` and `notnull()` methods produce similar Boolean results for `DataFrame`
    objects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `DataFrame` 对象，`isnull()` 和 `notnull()` 方法生成类似的布尔结果。
- en: Dropping Null Values
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除空值
- en: 'In addition to these masking methods, there are the convenience methods `dropna`
    (which removes NA values) and `fillna` (which fills in NA values). For a `Series`,
    the result is straightforward:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些掩码方法之外，还有方便的方法 `dropna`（用于删除 NA 值）和 `fillna`（用于填充 NA 值）。对于 `Series`，结果是直接的：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For a `DataFrame`, there are more options. Consider the following `DataFrame`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `DataFrame`，有更多的选择。考虑以下 `DataFrame`：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We cannot drop single values from a `DataFrame`; we can only drop entire rows
    or columns. Depending on the application, you might want one or the other, so
    `dropna` includes a number of options for a `DataFrame`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能从 `DataFrame` 中删除单个值；我们只能删除整行或整列。根据应用程序的不同，您可能需要其中一个，因此 `dropna` 包含了一些 `DataFrame`
    的选项。
- en: 'By default, `dropna` will drop all rows in which *any* null value is present:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`dropna` 将删除*任何*存在空值的行：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Alternatively, you can drop NA values along a different axis. Using `axis=1`
    or `axis=''columns''` drops all columns containing a null value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以沿不同的轴删除 NA 值。使用 `axis=1` 或 `axis='columns'` 将删除包含空值的所有列：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: But this drops some good data as well; you might rather be interested in dropping
    rows or columns with *all* NA values, or a majority of NA values. This can be
    specified through the `how` or `thresh` parameters, which allow fine control of
    the number of nulls to allow through.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这样会丢掉一些好数据；您可能更感兴趣的是删除具有*所有* NA 值或大多数 NA 值的行或列。这可以通过 `how` 或 `thresh` 参数进行指定，这些参数允许对允许通过的空值数量进行精细控制。
- en: 'The default is `how=''any''`, such that any row or column containing a null
    value will be dropped. You can also specify `how=''all''`, which will only drop
    rows/columns that contain *all* null values:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值为 `how='any'`，这样任何包含空值的行或列都将被删除。您还可以指定 `how='all'`，这样只会删除包含*所有*空值的行/列：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For finer-grained control, the `thresh` parameter lets you specify a minimum
    number of non-null values for the row/column to be kept:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更精细的控制，`thresh` 参数允许您指定保留行/列的最小非空值数：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, the first and last rows have been dropped because they each contain only
    two non-null values.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一行和最后一行已被删除，因为它们各自只包含两个非空值。
- en: Filling Null Values
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充空值
- en: Sometimes rather than dropping NA values, you’d like to replace them with a
    valid value. This value might be a single number like zero, or it might be some
    sort of imputation or interpolation from the good values. You could do this in-place
    using the `isnull` method as a mask, but because it is such a common operation
    Pandas provides the `fillna` method, which returns a copy of the array with the
    null values replaced.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您不想丢弃 NA 值，而是希望用有效值替换它们。这个值可以是一个单独的数字，比如零，或者可能是一些从好的值中插补或插值出来的值。您可以使用 `isnull`
    方法作为掩码来原地进行这个操作，但是因为这是一个常见的操作，Pandas 提供了 `fillna` 方法，它返回一个替换了空值的数组的副本。
- en: 'Consider the following `Series`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 `Series`：
- en: '[PRE24]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can fill NA entries with a single value, such as zero:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用一个单一的值（如零）填充 NA 条目：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can specify a forward fill to propagate the previous value forward:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定向前填充以向前传播上一个值：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or we can specify a backward fill to propagate the next values backward:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以指定向后填充以向后传播下一个值：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the case of a `DataFrame`, the options are similar, but we can also specify
    an `axis` along which the fills should take place:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`DataFrame`，选项类似，但我们还可以指定填充应该沿着的`axis`：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that if a previous value is not available during a forward fill, the
    NA value remains.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在向前填充时前一个值不可用，NA 值将保留。
