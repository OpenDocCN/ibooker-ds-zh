["```py\nTo authorize access needed by Earth Engine, open the following URL \nin a web browser and follow the instructions:\nhttps://accounts.google.com/o/oauth2/auth?client_id=xxx\nThe authorization workflow will generate a code, which you should paste \nin the box below\nEnter verification code: code will be here\n\nSuccessfully saved authorization token.\n```", "```py\nconda create -n gee python=3.9\nconda activate gee\nconda install geemap -c conda-forge\nconda install cartopy -c conda-forge\nconda install jupyter_contrib_nbextensions -c conda-forge\njupyter contrib nbextension install --user\n```", "```py\n(gee) MacBook-Pro-8:~ bonnymcclain$ conda list\n```", "```py\n# packages in environment at /Users/bonnymcclain/opt/miniconda3/envs/geo:\n#\n# Name                         Version                 Build    Channel\naiohttp                        3.7.4          py38h96a0964_0    conda-forge\nanyio                          3.1.0          py38h50d1736_0    conda-forge\nappnope                        0.1.2          py38h50d1736_1    conda-forge\nargon2-cffi                    20.1.0         py38h5406a74_2    conda-forge\nasync-timeout                  3.0.1                 py_1000    conda-forge\nasync_generator                1.10                     py_0    conda-forge\nattrs                          21.2.0           pyhd8ed1ab_0    conda-forge\nbackcall                       0.2.0            pyh9f0ad1d_0    conda-forge\nbackports                      1.0                      py_2    conda-forge\nbackports.functools_lru_cache  1.6.4            pyhd8ed1ab_0    conda-forge\nbeautifulsoup4                 4.9.3            pyhb0f4dca_0    conda-forge\nbleach                         3.3.0            pyh44b312d_0    conda-forge\nbqplot                         0.12.27          pyhd8ed1ab_0    conda-forge\nbranca                         0.4.2            pyhd8ed1ab_0    conda-forge\nbrotlipy                       0.7.0       py38h5406a74_1001    conda-forge\nbzip2                          1.0.8              h0d85af4_4    conda-forge\nc-ares                         1.17.1             h0d85af4_1    conda-forge\nca-certificates                2020.12.5          h033912b_0    conda-forge\ncachetools                     4.2.2            pyhd8ed1ab_0    conda-forge\ncartopy                        0.19.0.post1   py38h4be4431_0    conda-forge\ncertifi                        2020.12.5      py38h50d1736_1    conda-forge\ncffi                           1.14.5         py38ha97d567_0    conda-forge\nchardet                        4.0.0          py38h50d1736_1    conda-forge\nclick                          8.0.1          py38h50d1736_0    conda-forge\ncolour                         0.1.5                    py_0    conda-forge\ngeemap                         0.8.16           pyhd8ed1ab_0    conda-forge\n...\n```", "```py\nconda install ipykernel\n```", "```py\npython -m ipykernel install --user --name myenv --display-name \n\"<your environment name>\"\n```", "```py\nimport os\nimport ee\nimport geemap\n#geemap.update_package()\n```", "```py\nmap = geemap.Map(center=(40, -100), zoom=4)\nmap\n```", "```py\nmap = geemap.Map(center =(40, -100), zoom=4)\nmap.basemap()\nmap\n```", "```py\nadd_google_map = False\n```", "```py\ncollection = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')\nprint(collection.size().getInfo())\n```", "```py\nmedian = collection.median()\n```", "```py\ndef apply_scale_factors(image):\n   opticalBands = image.select('SR_B.*').multiply(0.0000275).add(-0.2)\n   thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0)\n   return image.addBands(opticalBands, None, True).addBands(thermalBands, None, \n   True)\n```", "```py\ndataset = apply_scale_factors(median)\n```", "```py\nvis_natural = {\n   'bands': ['SR_B4', 'SR_B3', 'SR_B2'],\n   'min': 0.0,\n   'max': 0.3,\n}\n\nvis_nir = {\n   'bands': ['SR_B5', 'SR_B4', 'SR_B3'],\n   'min': 0.0,\n   'max': 0.3,\n}\n```", "```py\nMap.addLayer(dataset, vis_natural, 'True color (432)')\nMap.addLayer(dataset, vis_nir, 'Color infrared (543)')\nMap\n```", "```py\nvis_params = [\n   {'bands': ['SR_B4', 'SR_B3', 'SR_B2'], 'min': 0, 'max': 0.3},\n   {'bands': ['SR_B5', 'SR_B4', 'SR_B3'], 'min': 0, 'max': 0.3},\n   {'bands': ['SR_B7', 'SR_B6', 'SR_B4'], 'min': 0, 'max': 0.3},\n   {'bands': ['SR_B6', 'SR_B5', 'SR_B2'], 'min': 0, 'max': 0.3},\n]\n```", "```py\nlabels = [\n   'Natural Color (4, 3, 2)',\n   'Color Infrared (5, 4, 3)',\n   'Short-Wave Infrared (7, 6 4)',\n   'Agriculture (6, 5, 2)',\n]\n```", "```py\ngeemap.linked_maps(\n   rows=2,\n   cols=2,\n   height=\"400px\",\n   center=[-3.4653, -62.2159],\n   zoom=4,\n   ee_objects=[dataset],\n   vis_params=vis_params,\n   labels=labels,\n   label_position=\"topright\",\n)\n```", "```py\nmap = geemap.Map()  \nmap\n```", "```py\n// Import the NLCD collection.\nvar dataset = ee.ImageCollection('USGS/NLCD_RELEASES/2019_REL/NLCD');\n\n// The collection contains images for multiple years and regions in the USA.\nprint('Products:', dataset.aggregate_array('system:index'));\n\n// Filter the collection to the 2016 product.\nvar nlcd2016 = dataset.filter(ee.Filter.eq('system:index', '2016')).first();\n\n// Each product has multiple bands for describing aspects of land cover.\nprint('Bands:', nlcd2016.bandNames());\n\n// Select the land cover band.\nvar landcover = nlcd2016.select('landcover');\n\n// Display land cover on the map.\nMap.setCenter(-95, 38, 5);\nMap.addLayer(landcover, null, 'Landcover');\n```", "```py\nlegends = geemap.builtin_legends\nfor legend in legends:\n    print(legend)\n```", "```py\nmap = geemap.Map()\n\nlegend_dict = {\n    '11 Open Water': '466b9f',\n    '12 Perennial Ice/Snow': 'd1def8',\n    '21 Developed, Open Space': 'dec5c5',\n    '22 Developed, Low Intensity': 'd99282',\n    '23 Developed, Medium Intensity': 'eb0000',\n    '24 Developed High Intensity': 'ab0000',\n    '31 Barren Land (Rock/Sand/Clay)': 'b3ac9f',\n    '41 Deciduous Forest': '68ab5f',\n    '42 Evergreen Forest': '1c5f2c',\n    '43 Mixed Forest': 'b5c58f',\n    '51 Dwarf Scrub': 'af963c',\n    '52 Shrub/Scrub': 'ccb879',\n    '71 Grassland/Herbaceous': 'dfdfc2',\n    '72 Sedge/Herbaceous': 'd1d182',\n    '73 Lichens': 'a3cc51',\n    '74 Moss': '82ba9e',\n    '81 Pasture/Hay': 'dcd939',\n    '82 Cultivated Crops': 'ab6c28',\n    '90 Woody Wetlands': 'b8d9eb',\n    '95 Emergent Herbaceous Wetlands': '6c9fb8' }\n\nlandcover = ee.Image('USGS/NLCD/NLCD2019').select('landcover')\nMap.addLayer(landcover, {}, 'NLCD Land Cover')\n\nMap.add_legend(legend_title=\"NLCD Land Cover Classification\", \n   legend_dict=legend_dict)\nMap\n```", "```py\nconda create -n geo python=3.8\nconda activate geo\nconda install geopandas\nconda install leafmap -c conda-forge\nconda install mamba -c conda-forge\nmamba install leafmap xarray_leaflet -c conda-forge\nconda install jupyter_contrib_nbextensions -c conda-forge\npip install keplergl\n```", "```py\nfrom ipyleaflet import *\nm = Map(center=[48.8566, 2.3522], zoom=10, height=600, widescreen=False,\nbasemaps=basemaps.Stamen.Terrain)\nm\n```", "```py\nm.interact(zoom=(5,10,1))\n```", "```py\nminimap = Map(\n    zoom_control=False, attribution_control=False, \n    zoom=5, center=m.center, basemap=basemaps.Stamen.Terrain\n)\nminimap.layout.width = '200px'\nminimap.layout.height = '200px'\nlink((minimap, 'center'), (m, 'center'))\nminimap_control = WidgetControl(widget=minimap, position='bottomleft')\nm.add_control(minimap_control)\n```"]