["```py\n$ jupyter notebook\n[I 15:27:44.553 NotebookApp] Serving notebooks from local\ndirectory:\n...\n[I 15:27:44.553 NotebookApp] http://localhost:8888/?token=5e09...\n```", "```py\nsandpit\n├── index.xhtml\n└── script.js\n```", "```py\n<!-- index.xhtml -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n\n<div id='viz'></div>\n\n<script type=\"text/javascript\" src=\"script.js\" async></script>\n```", "```py\n// script.js\nlet data = [3, 7, 2, 9, 1, 11];\nlet sum = 0;\ndata.forEach(function(d){\n    sum += d;\n});\n\nconsole.log('Sum = ' + sum);\n// outputs 'Sum = 33'\n```", "```py\n$ python -m http.server 8000\nServing HTTP on 0.0.0.0 port 8000 ...\n```", "```py\n(function(foo){\n  'use strict';\n  // ...\n}(window.foo = window.foo || {}));\n```", "```py\nFOO_CONST = 10\nclass FooBar(object): # ...\ndef foo_bar():\n    baz_bar = 'some string'\n```", "```py\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n  <script src=\"http://d3js.org/d3.v7.min.js\"></script>\n```", "```py\nlet r = d3.range(0, 10, 2)\nconsole.log(r)\n// out: [0, 2, 4, 6, 8]\n```", "```py\nIn [1]: import sys\n\nIn [2]: sys.platform\nOut[2]: 'linux'\n```", "```py\nimport pandas as pd\nfrom csv import DictWriter, DictReader\nfrom numpy import * ![1](assets/1.png)\n\ndf = pd.read_json('data.json')\nreader = DictReader('data.csv')\nmd = median([12, 56, 44, 33])\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nmypackage\n├── __init__.py\n...\n├── core\n│   └── __init__.py\n│   ...\n...\n└── io\n    ├── __init__.py\n    └── api.py\n    ...\n    └── tests\n        └── __init__.py\n        └── test_data.py\n        └── test_excel.py ![1](assets/1.png)\n        ...\n...\n```", "```py\nfrom mypackage.io.tests import test_data ![1](assets/1.png)\nfrom . import test_data ![2](assets/2.png)\nimport test_data ![2](assets/2.png)\nfrom ..io import api ![3](assets/3.png)\n```", "```py\n.\n├── index.mjs\n└── lib\n    └── libFoo.mjs\n```", "```py\n// lib/libFoo.mjs export let findOdds = (a) => {\n  return a.filter(x => x%2)\n}\n\nlet api = {findOdds} ![1](assets/1.png)\n\nexport default api\n```", "```py\n// index.mjs\nimport api from './lib/libFoo.mjs'\nimport { findOdds } from './lib/libFoo.mjs'\n\nlet odds = findOdds([2, 4, 24, 33, 5, 66, 24])\nconsole.log('Odd numbers: ', odds)\n\nodds = api.findOdds([12, 43, 22, 39, 52, 21])\nconsole.log('Odd numbers: ', odds)\n```", "```py\n// index.mjs\nimport api as foo from './lib/libFoo.mjs'\nimport { findOdds as odds } from './lib/libFoo.mjs'\n// ...\n```", "```py\n(function(nbviz) { ![1](assets/1.png)\n    'use strict';\n    // ...\n    nbviz.updateTimeChart = function(data) {..} ![2](assets/2.png)\n    // ... }(window.nbviz = window.nbviz || {})); ![3](assets/3.png)\n```", "```py\nprint('Hello World!')\n```", "```py\nconsole.log('Hello World!')\n```", "```py\n# A\nstudent_data = [\n    {'name': 'Bob', 'id':0, 'scores':[68, 75, 56, 81]},\n    {'name': 'Alice', 'id':1,  'scores':[75, 90, 64, 88]},\n    {'name': 'Carol', 'id':2, 'scores':[59, 74, 71, 68]},\n    {'name': 'Dan', 'id':3, 'scores':[64, 58, 53, 62]},\n]\n\n# B\ndef process_student_data(data, pass_threshold=60,\n                         merit_threshold=75):\n    \"\"\" Perform some basic stats on some student data. \"\"\"\n\n    # C\n    for sdata in data:\n        av = sum(sdata['scores'])/float(len(sdata['scores']))\n\n        if av > merit_threshold:\n            sdata['assessment'] = 'passed with merit'\n        elif av >= pass_threshold:\n            sdata['assessment'] = 'passed'\n        else:\n            sdata['assessment'] = 'failed'\n        # D\n        print(f\"{sdata['name']}'s (id: {sdata['id']}) final assessment is:\\\n        {sdata['assessment'].upper()}\")\n        # For Python versions before 3.7, the old-style string formatting is equivalent\n        # print(\"%s's (id: %d) final assessment is: %s\"%(sdata['name'],\\\n        # sdata['id'], sdata['assessment'].upper()))     sdata['name'], sdata['id'],\\\n        # sdata['assessment'].upper()))\n        print(f\"{sdata['name']}'s (id: {sdata['id']}) final assessment is:\\\n         {sdata['assessment'].upper()}\")\n\n        sdata['average'] = av\n\n# E\nif __name__ == '__main__':\n    process_student_data(student_data)\n```", "```py\nlet studentData = [ ![1](assets/1.png)\n    {name: 'Bob', id:0, 'scores':[68, 75, 76, 81]},\n    {name: 'Alice', id:1, 'scores':[75, 90, 64, 88]},\n    {'name': 'Carol', id:2, 'scores':[59, 74, 71, 68]},\n    {'name': 'Dan', id:3, 'scores':[64, 58, 53, 62]},\n];\n\n// B function processStudentData(data, passThreshold, meritThreshold){\n    passThreshold = typeof passThreshold !== 'undefined'?\\\n    passThreshold: 60;\n    meritThreshold = typeof meritThreshold !== 'undefined'?\\\n    meritThreshold: 75;\n\n    // C\n    data.forEach(function(sdata){\n        let av = sdata.scores.reduce(function(prev, current){\n            return prev+current;\n        },0) / sdata.scores.length;\n\n        if(av > meritThreshold){\n            sdata.assessment = 'passed with merit';\n        }\n        else if(av >= passThreshold){\n            sdata.assessment = 'passed';\n        }\n        else{\n            sdata.assessment = 'failed';\n        }\n        // D\n        console.log(sdata.name + \"'s (id: \" + sdata.id +\n          \") final assessment is: \" +\n            sdata.assessment.toUpperCase());\n        sdata.average = av;\n    });\n\n}\n\n// E processStudentData(studentData);\n```", "```py\nconsole.log(sdata.name + \"'s (id: \" + sdata.id +\n  \") final assessment is: \" + sdata.assessment.toUpperCase());\n```", "```py\nprint(\"%s's (id: %d) final assessment is: %s\"\n  %(sdata['name'], sdata['id'], sdata['assessment'].upper()))\n```", "```py\nimport logging\nlogger = logging.getLogger(__name__) ![1](assets/1.png)\n//...\nlogger.debug('Some useful debugging output')\nlogger.info('Some general information')\n\n// IN INITIAL MODULE\nlogging.basicConfig(level=logging.DEBUG) ![2](assets/2.png)\n```", "```py\ndef doubler(x):\n    return x * 2\n#  |<-this spacing is important\n```", "```py\nlet doubler = function(x){\n  return x * 2;\n}\n\nlet doubler=function(x){return x*2;}\n```", "```py\n# ex.py, a single informative comment\n\ndata = {} # Our main data-ball\n```", "```py\n// script.js, a single informative comment\n/* A multiline comment block for\nfunction descriptions, library script\nheaders, and the like */\nlet data = {}; // Our main data-ball\n```", "```py\ndef doubler(x):\n    \"\"\"This function returns double its input.\"\"\"\n    return 2 * x\n\ndef sanitize_string(s):\n    \"\"\"This function replaces any string spaces\n with '-' after stripping any whitespace\n \"\"\"\n    return s.strip().replace(' ', '-')\n```", "```py\npub_name = \"The Brewer's Tap\"\n```", "```py\nlet x = parseInt(3.45); // 'cast' x to 3\ntypeof(x); // \"number\"\n```", "```py\nfoo = 3.4 # type(foo) -> float\nbar = int(3.4) # type(bar) -> int\n```", "```py\nrocket_launch = True\n(rocket_launch == True and 'All OK') or 'We have a problem!'\nOut:\n'All OK'\n\nrocket_launch = False\n(rocket_launch == True and 'All OK') or 'We have a problem!'\nOut:\n'We have a problem!'\n```", "```py\n# Python\nd = {'name': 'Groucho', 'occupation': 'Ruler of Freedonia'}\nl = ['Harpo', 'Groucho', 99]\nt = ('an', 'immutable', 'container')\n```", "```py\n// JavaScript\nd = {'name': 'Groucho', 'occupation': 'Ruler of Freedonia'}\nl = ['Harpo', 'Groucho', 99]\n```", "```py\nlet foo = {bar:3, baz:5};\nfoo.bar; // 3\nfoo['baz']; // 5, same as Python\n```", "```py\ndef process_student_data(data, pass_threshold=60,\n                         merit_threshold=75):\n    \"\"\" Perform some basic stats on some student data. \"\"\"\n    ...\n```", "```py\nfunction processStudentData(data, passThreshold=60, meritThreshold=75){\n    ...\n}\n```", "```py\nlet processStudentData = function( ...){...}\n```", "```py\nlet processStudentData = ( ...) => {...}\n```", "```py\nfoo = {'a':3, 'b':2}\nfor x in foo:\n    print(x)\n# outputs 'a' 'b'\n```", "```py\nfor x in foo.items():\n    print(x)\n# outputs key-value tuples ('a', 3) ('b' 2)\n```", "```py\nfor key, value in foo.items():\n```", "```py\nfor line in open('data.txt'):\n    print(line)\n```", "```py\nfor(let i in ['a', 'b', 'c']){\n  console.log(i)\n}\n// outputs 1, 2, 3\n```", "```py\ndata.forEach(function(currentValue, index){...})\n```", "```py\nlet obj = {a:3, b:2, c:4};\nfor (let prop in obj) {\n  if( obj.hasOwnProperty( prop ) ) {\n    console.log(\"o.\" + prop + \" = \" + obj[prop]);\n  }\n}\n// out: o.a = 3, o.b = 2, o.c = 4\n```", "```py\nlet obj = {a:3, b:2, c:4};\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`${key}: ${value}`); ![1](assets/1.png)\n}\n// out: a: 3 //      b: 2 ...\n```", "```py\nswitch(expression){\n  case value1:\n    // execute if expression === value1\n    break; // optional end expression\n  case value2:\n    //...\n  default:\n    // if other matches fail\n}\n```", "```py\nfor value in [value1, value2, value3]:\n    match value:\n        case value1:\n            # do foo\n        case value2:\n            # do baa\n        case value3:\n            # do baz\n```", "```py\n# READING A FILE\nf = open(\"data.txt\") # open file for reading\n\nfor line in f: # iterate over file lines\n    print(line)\n\nlines = f.readlines() # grab all lines in file into array\ndata = f.read() # read all of file as single string\n\n# WRITING TO A FILE\nf = open(\"data.txt\", 'w')\n# use 'w' to write, 'a' to append to file\nf.write(\"this will be written as a line to the file\")\nf.close() # explicitly close the file\n```", "```py\nwith open(\"data.txt\") as f:\n    lines = f.readlines()\n    ...\n```", "```py\nfetch('/static/data/nobel_winners.json')\n  .then(function(response) {\n  console.log(response.json())\n})\nOut:\n[{name: 'Albert Einstein', category: 'Physics'...},]\n```", "```py\nclass Citizen(object):\n\n    def __init__(self, name, country): ![1](assets/1.png)\n        self.name = name\n        self.country = country\n\n     def __str__(self): ![2](assets/2.png)\n        return f'Citizen {self.name} from {self.country}'\n\n     def print_details(self):\n         print(f'Citizen {self.name} from {self.country}')\n\ngroucho = Citizen('Groucho M.', 'Freedonia') ![3](assets/3.png)\nprint(groucho) # or groucho.print_details()\n# Out:\n# Citizen Groucho M. from Freedonia\n```", "```py\nclass Winner(Citizen):\n\n    def __init__(self, name, country, category, year):\n        super().__init__(name, country) ![1](assets/1.png)\n        self.category = category\n        self.year = year\n\n    def __str__(self):\n        return 'Nobel winner %s from %s, category %s, year %s'\\\n        %(self.name, self.country, self.category,\\\n        str(self.year))\n\nw = Winner('Albert E.', 'Switzerland', 'Physics', 1921)\nw.print_details()\n# Out:\n# Nobel prizewinner Albert E. from Switzerland, category Physics,\n# year 1921\n```", "```py\nlet Citizen = function(name, country){ ![1](assets/1.png)\n  this.name = name; ![2](assets/2.png)\n  this.country = country;\n};\n\nCitizen.prototype = { ![3](assets/3.png)\n  logDetails: function(){\n    console.log(`Citizen ${this.name} from ${this.country}`);\n  }\n};\n\nlet c = new Citizen('Groucho M.', 'Freedonia'); ![4](assets/4.png)\n\nc.logDetails();\nOut:\nCitizen Groucho M. from Freedonia\n\ntypeof(c) # object\n```", "```py\nclass Citizen {\n  constructor(name, country) {\n    this.name = name\n    this.country = country\n  }\n\n  logDetails() {\n    console.log(`Citizen ${this.name} from ${this.country}`)\n  }\n}\n\nconst c = new Citizen('Groucho M.', 'Freedonia')\n```", "```py\nlet Citizen = { ![1](assets/1.png)\n    setCitizen: function(name, country){\n        this.name = name;\n        this.country = country;\n        return this;\n    },\n    printDetails: function(){\n        console.log('Citizen ' + this.name + ' from ',\\\n        + this.country);\n    }\n};\n\nlet Winner = Object.create(Citizen);\n\nWinner.setWinner = function(name, country, category, year){\n    this.setCitizen(name, country);\n    this.category = category;\n    this.year = year;\n    return this;\n};\n\nWinner.logDetails = function(){\n    console.log('Nobel winner ' + this.name + ' from ' +\n    this.country + ', category ' + this.category + ', year ' +\n    this.year);\n};\n\nlet albert = Object.create(Winner)\n    .setWinner('Albert Einstein', 'Switzerland', 'Physics', 1921);\n\nalbert.logDetails();\n// Out: // Nobel winner Albert Einstein from Switzerland, category // Physics, year 1921\n```", "```py\nlet sel = d3.select('#viz')\n    .attr('width', '600px') ![1](assets/1.png)\n    .attr('height', '400px')\n    .style('background', 'lightgray');\n```", "```py\nnames = ['Alice', 'Bob', 'Carol']\n\nfor i, n in enumerate(names):\n    print(f'{i}: {n}')\n```", "```py\nOut:\n0: Alice\n1: Bob\n2: Carol\n```", "```py\nlet names = ['Alice', 'Bob', 'Carol'];\n\nnames.forEach(function(n, i){\n    console.log(i + ': ' + n);\n});\n```", "```py\nOut:\n0: Alice\n1: Bob\n2: Carol\n```", "```py\n(a, b) = (b, a)\n```", "```py\ndef fibonacci(n):\n    x, y = 0, 1\n    for i in range(n):\n        print(x)\n        x, y = y, x + y\n# fibonacci(6) -> 0, 1, 1, 2, 3, 5\n```", "```py\nwinner = 'Albert Einstein', 'Physics', 1921, 'Swiss'\n\nname, _, _, nationality = winner ![1](assets/1.png)\nprint(f'{name}, {nationality}')\n# Albert Einstein, Swiss\n```", "```py\nlet a, b, rem ![1](assets/1.png)\n\n[a, b] = [1, 2]\n// swap variables [a, b] = [b, a]\n// using the spread operator [a, b, ...rem] = [1, 2, 3, 4, 5, 6,] // rem = [3, 4, 5, 6]\n```", "```py\nfrom collections import Counter, defaultdict, OrderedDict\n\nitems = ['F', 'C', 'C', 'A', 'B', 'A', 'C', 'E', 'F']\n\ncntr = Counter(items)\nprint(cntr)\ncntr['C'] -=1\nprint(cntr)\nOut:\nCounter({'C': 3, 'A': 2, 'F': 2, 'B': 1, 'E': 1})\nCounter({'A': 2, 'C': 2, 'F': 2, 'B': 1, 'E': 1})\n\nd = defaultdict(int) ![1](assets/1.png)\n\nfor item in items:\n    d[item] += 1 ![2](assets/2.png)\n\nd\nOut:\ndefaultdict(<type 'int'>, {'A': 2, 'C': 3, 'B': 1, 'E': 1, 'F': 2})\n\nOrderedDict(sorted(d.items(), key=lambda i: i[1])) ![3](assets/3.png)\nOut:\nOrderedDict([('B', 1), ('E', 1), ('A', 2), ('F', 2), ('C', 3)]) ![4](assets/4.png)\n```", "```py\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/\n underscore.js/1.13.1/underscore-min.js\"></script>\n```", "```py\nlet items = ['F', 'C', 'C', 'A', 'B', 'A', 'C', 'E', 'F'];\n\n_.countBy(items) ![1](assets/1.png)\nOut:\nObject {F: 2, C: 3, A: 2, B: 1, E: 1}\n```", "```py\njourneys = [\n  {period:'morning', times:[44, 34, 56, 31]},\n  {period:'evening', times:[35, 33],},\n  {period:'morning', times:[33, 29, 35, 41]},\n  {period:'evening', times:[24, 45, 27]},\n  {period:'morning', times:[18, 23, 28]}\n];\n\nlet groups = _.groupBy(journeys, 'period');\nlet mTimes = _.pluck(groups['morning'], 'times');\nmTimes = _.flatten(mTimes); ![1](assets/1.png)\nlet average = function(l){\n  let sum = _.reduce(l, function(a,b){return a+b},0);\n  return sum/l.length;\n};\nconsole.log('Average morning time is ' + average(mTimes));\nOut:\nAverage morning time is 33.81818181818182\n```", "```py\nlet nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nlet sum = nums.filter(x => x%2) ![1](assets/1.png)\n  .map(x => x * x) ![2](assets/2.png)\n  .reduce((total, current) => total + current, 0); ![3](assets/3.png)\n\nconsole.log('Sum of the odd squares is ' + sum);\n```", "```py\nnums = range(10) ![1](assets/1.png)\n\nodd_squares = [x * x for x in nums if x%2] ![2](assets/2.png)\nsum(odd_squares) ![3](assets/3.png)\nOut:\n165\n```", "```py\nitems = [1, 2, 3, 4, 5]\n\ndef is_odd(x):\n    return x%2\n\ndef sq(x):\n    return x * x\n\nsum([sq(x) for x in items if is_odd(x)])\n```", "```py\nlet isOdd = function(x){ return x%2; };\n\nsum = l.filter(isOdd)\n...\n```", "```py\nfrom functools import reduce # if using Python 3+\n\nnums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nodds = filter(lambda x: x % 2, nums)\nodds_sq = map(lambda x: x * x, odds)\nreduce(lambda x, y: x + y, odds_sq) ![1](assets/1.png)\nOut:\n165\n```", "```py\nfunction Counter(inc) {\n  let count = 0;\n  let add = function() { ![1](assets/1.png)\n    count += inc;\n    console.log('Current count: ' + count);\n  }\n  return add;\n}\n\nlet inc2 = Counter(2); ![2](assets/2.png)\ninc2(); ![3](assets/3.png)\nOut:\nCurrent count: 2\ninc2();\nOut:\nCurrent count: 4\n```", "```py\nfunction Counter(inc) {\n  let count = 0\n  let api = {}\n  api.add = function() {\n    count += inc\n    console.log('Current count: ' + count);\n  }\n  api.sub = function() {\n    count -= inc\n    console.log('Current count: ' + count)\n  }\n  api.reset = function() {\n    count = 0;\n    console.log('Count reset to 0')\n  }\n\n  return api\n}\n\ncntr = Counter(3);\ncntr.add() // Current count: 3\ncntr.add() // Current count: 6\ncntr.sub() // Current count: 3\ncntr.reset() // Count reset to 0\n```", "```py\ndef get_counter(inc):\n    count = 0\n    def add():\n        count += inc\n        print('Current count: ' + str(count))\n    return add\n```", "```py\ncntr = get_counter(2)\ncntr()\nOut:\n...\nUnboundLocalError: local variable 'count' referenced before\nassignment\n```", "```py\n...\ndef add():\n    nonlocal count\n    count += inc\n...\n```", "```py\ndef get_counter(inc):\n    vars = {'count': 0}\n    def add():\n        vars['count'] += inc\n        print('Current count: ' + str(vars['count']))\n    return add\n```"]