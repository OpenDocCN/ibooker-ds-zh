["```py\nimport numpy as np ![1](assets/1.png)\n\na = np.array([1, 2, 3]) ![2](assets/2.png)\na + a\n# output array([2, 4, 6])\n```", "```py\ndef print_array_details(a):\n    print('Dimensions: %d, shape: %s, dtype: %s'\\\n        %(a.ndim, a.shape, a.dtype))\n```", "```py\nIn [1]: a = np.array([1, 2, 3, 4, 5, 6, 7, 8])\n\nIn [2]: a\nOut[2]: array([1, 2, 3, 4, 5, 6, 7, 8])\n\nIn [3]: print_array_details(a)\nDimensions: 1, shape: (8,), dtype: int64\n```", "```py\nIn [4]: a = a.reshape([2, 4])\nIn [5]: a\nOut[5]:\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\nIn [6]: print_array_details(a)\nDimensions: 2, shape: (2, 4), dtype: int64\n```", "```py\nIn [7]: a = a.reshape([2, 2, 2])\n\nIn [8]: a\nOut[8]:\narray([[[1, 2],\n        [3, 4]],\n\n       [[5, 6],\n        [7, 8]]])\n\nIn [9]: print_array_details(a)\nDimensions: 3, shape: (2, 2, 2), dtype: int64\n```", "```py\nIn [0]: x = np.array([[1, 2, 3], [4, 5, 6]], np.int32) ![1](assets/1.png)\nIn [1]: x.shape\nOut[1]: (2, 3)\nIn [2]: x.shape = (6,)\nIn [3]: x\nOut[3]: array([1, 2, 3, 4, 5, 6], dtype=int32)\nIn [4]  x = x.astype('int64')\nIn [5]: x.dtype\nOut[5]: dtype('int64')\n```", "```py\nIn [32]: a = np.zeros([2,3])\nIn [33]: a\nOut[33]:\narray([[ 0.,  0.,  0.],\n       [ 0.,  0.,  0.]])\n\nIn [34]: a.dtype\nOut[34]: dtype('float64')\n\nIn [35]: np.ones([2, 3])\nOut[35]:\narray([[ 1.,  1.,  1.],\n       [ 1.,  1.,  1.]])\n```", "```py\nempty_array = np.empty((2,3)) # create an uninitialized array\n\nempty_array\nOut[3]:\narray([[  6.93185732e-310,   2.52008024e-316,   4.71690401e-317],\n       [  2.38085057e-316,   6.93185752e-310,   6.93185751e-310]])\n```", "```py\n>>> np.random.random((2,3))\n>>> Out:\narray([[ 0.97519667,  0.94934859,  0.98379541], ![1](assets/1.png)\n       [ 0.10407003,  0.35752882,  0.62971186]])\n```", "```py\nnp.linspace(2, 10, 5) # 5 numbers in range 2-10\nOut: array([2., 4.,6., 8., 10.]) ![1](assets/1.png)\n\nnp.arange(2, 10, 2) # from 2 to 10 (exlusive) with step-size 2.\nOut: array([2, 4, 6, 8])\n```", "```py\na = np.array([1, 2, 3, 4, 5, 6])\na[2] # Out: 3\na[3:5] # Out: array([4, 5])\n# every second item from 0-4 set to 0\na[:4:2] = 0 # Out: array([0, 2, 0, 4, 5, 6])\na[::-1] # Out: array([6, 5, 4, 0, 2, 0]), reversed\n```", "```py\na = np.arange(8)\na.shape = (2, 2, 2)\na\nOut:\narray([[[0, 1],\n        [2, 3]],\n\n       [[4, 5],\n        [6, 7]]])\n```", "```py\na1 = a[1]\na1\nOut:\narray([[4, 5],\n       [6, 7]])\n```", "```py\nnp.array_equal(a1, a[1,:])\nOut: True\n\nnp.array_equal(a1, a[1,:,:])\nOut: True\n# Taking the first element of the subarrays\n# array([[0, 2], [4, 6]])\nnp.array_equal(a[...,0], a[:,:,0])\nOut: True\n```", "```py\na = np.array([45, 65, 76, 32, 99, 22])\na < 50\nOut[69]: array([ True, False, False,  True, False,  True]\n               , dtype=bool)\n```", "```py\na = np.arange(8).reshape((2,4))\n# array([[0, 1, 2, 3],\n#        [4, 5, 6, 7]])\na.min(axis=1)\n# array([0, 4])\na.sum(axis=0)\n# array([4, 6, 8, 10])\na.mean(axis=1) ![1](assets/1.png)\n# array([ 1.5, 5.5 ])\na.std(axis=1) ![2](assets/2.png)\n# array([ 1.11803399,  1.11803399])\n```", "```py\n# Trigonometric functions\npi = np.pi\na = np.array([pi, pi/2, pi/4, pi/6])\n\nnp.degrees(a) # radians to degrees\n# Out: array([ 180., 90., 45., 30.,])\n\nsin_a = np.sin(a)\n# Out: array([  1.22464680e-16,   1.00000000e+00, ![1](assets/1.png)\n#               7.07106781e-01,   5.00000000e-01])\n# Rounding\nnp.round(sin_a, 7) # round to 7 decimal places\n# Out: array([ 0.,  1.,  0.7071068,  0.5 ])\n\n# Sums, products, differences\na = np.arange(8).reshape((2,4))\n# array([[0, 1, 2, 3],\n#        [4, 5, 6, 7]])\n\nnp.cumsum(a, axis=1) # cumulative sum along second axis\n# array([[ 0,  1,  3,  6],\n#        [ 4,  9, 15, 22]])\n\nnp.cumsum(a) # without axis argument, array is flattened\n# array([ 0,  1,  3,  6, 10, 15, 21, 28])\n```", "```py\ndef moving_average(a, n=3):\n    ret = np.cumsum(a, dtype=float)\n    ret[n:] = ret[n:] - ret[:-n]\n    return ret[n - 1:] / n\n```", "```py\na = np.arange(6)\n# array([0, 1, 2, 3, 4, 5])\ncsum = np.cumsum(a)\ncsum\n# Out: array([0, 1, 3, 6, 10, 15])\n```", "```py\n# a = array([0, 1, 2, 3, 4, 5])\n# csum = array([0, 1, 3, 6, 10, 15])\ncsum[3:] = csum[3:] - csum[:-3]\n# csum = array([0, 1, 3, 6, 9, 12])\n```", "```py\na = np.arange(10)\nmoving_average(a, 4)\n# Out[98]: array([ 1.5,  2.5,  3.5,  4.5,  5.5,  6.5,  7.5])\n```"]