["```py\nIn [1]: import pandas as pd\n        import numpy as np\n\n        class display(object):\n            \"\"\"Display HTML representation of multiple objects\"\"\"\n            template = \"\"\"<div style=\"float: left; padding: 10px;\">\n <p style='font-family:\"Courier New\", Courier, monospace'>{0}{1}\n \"\"\"\n            def __init__(self, *args):\n                self.args = args\n\n            def _repr_html_(self):\n                return '\\n'.join(self.template.format(a, eval(a)._repr_html_())\n                                 for a in self.args)\n\n            def __repr__(self):\n                return '\\n\\n'.join(a + '\\n' + repr(eval(a))\n                                   for a in self.args)\n```", "```py\nIn [2]: df1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                            'group': ['Accounting', 'Engineering',\n                                      'Engineering', 'HR']})\n        df2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n                            'hire_date': [2004, 2008, 2012, 2014]})\n        display('df1', 'df2')\nOut[2]: df1                         df2\n          employee        group       employee  hire_date\n        0      Bob   Accounting     0     Lisa       2004\n        1     Jake  Engineering     1      Bob       2008\n        2     Lisa  Engineering     2     Jake       2012\n        3      Sue           HR     3      Sue       2014\n```", "```py\nIn [3]: df3 = pd.merge(df1, df2)\n        df3\nOut[3]:   employee        group  hire_date\n        0      Bob   Accounting       2008\n        1     Jake  Engineering       2012\n        2     Lisa  Engineering       2004\n        3      Sue           HR       2014\n```", "```py\nIn [4]: df4 = pd.DataFrame({'group': ['Accounting', 'Engineering', 'HR'],\n                            'supervisor': ['Carly', 'Guido', 'Steve']})\n        display('df3', 'df4', 'pd.merge(df3, df4)')\nOut[4]: df3                                   df4\n          employee        group  hire_date              group supervisor\n        0      Bob   Accounting       2008      0   Accounting      Carly\n        1     Jake  Engineering       2012      1  Engineering      Guido\n        2     Lisa  Engineering       2004      2           HR      Steve\n        3      Sue           HR       2014\n\n        pd.merge(df3, df4)\n          employee        group  hire_date supervisor\n        0      Bob   Accounting       2008      Carly\n        1     Jake  Engineering       2012      Guido\n        2     Lisa  Engineering       2004      Guido\n        3      Sue           HR       2014      Steve\n```", "```py\nIn [5]: df5 = pd.DataFrame({'group': ['Accounting', 'Accounting',\n                                      'Engineering', 'Engineering', 'HR', 'HR'],\n                            'skills': ['math', 'spreadsheets', 'software', 'math',\n                                       'spreadsheets', 'organization']})\n        display('df1', 'df5', \"pd.merge(df1, df5)\")\nOut[5]: df1                       df5\n        employee        group              group        skills\n      0      Bob   Accounting     0   Accounting          math\n      1     Jake  Engineering     1   Accounting  spreadsheets\n      2     Lisa  Engineering     2  Engineering      software\n      3      Sue           HR     3  Engineering          math\n                                  4           HR  spreadsheets\n                                  5           HR  organization\n\n      pd.merge(df1, df5)\n        employee        group        skills\n      0      Bob   Accounting          math\n      1      Bob   Accounting  spreadsheets\n      2     Jake  Engineering      software\n      3     Jake  Engineering          math\n      4     Lisa  Engineering      software\n      5     Lisa  Engineering          math\n      6      Sue           HR  spreadsheets\n      7      Sue           HR  organization\n```", "```py\nIn [6]: display('df1', 'df2', \"pd.merge(df1, df2, on='employee')\")\nOut[6]: df1                         df2\n          employee        group       employee  hire_date\n        0      Bob   Accounting     0     Lisa       2004\n        1     Jake  Engineering     1      Bob       2008\n        2     Lisa  Engineering     2     Jake       2012\n        3      Sue           HR     3      Sue       2014\n\n        pd.merge(df1, df2, on='employee')\n          employee        group  hire_date\n        0      Bob   Accounting       2008\n        1     Jake  Engineering       2012\n        2     Lisa  Engineering       2004\n        3      Sue           HR       2014\n```", "```py\nIn [7]: df3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                            'salary': [70000, 80000, 120000, 90000]})\n        display('df1', 'df3', 'pd.merge(df1, df3, left_on=\"employee\",\n                 right_on=\"name\")')\nOut[7]: df1                         df3\n          employee        group        name  salary\n        0      Bob   Accounting     0   Bob   70000\n        1     Jake  Engineering     1  Jake   80000\n        2     Lisa  Engineering     2  Lisa  120000\n        3      Sue           HR     3   Sue   90000\n\n        pd.merge(df1, df3, left_on=\"employee\", right_on=\"name\")\n          employee        group  name  salary\n        0      Bob   Accounting   Bob   70000\n        1     Jake  Engineering  Jake   80000\n        2     Lisa  Engineering  Lisa  120000\n        3      Sue           HR   Sue   90000\n```", "```py\nIn [8]: pd.merge(df1, df3, left_on=\"employee\", right_on=\"name\").drop('name', axis=1)\nOut[8]:   employee        group  salary\n        0      Bob   Accounting   70000\n        1     Jake  Engineering   80000\n        2     Lisa  Engineering  120000\n        3      Sue           HR   90000\n```", "```py\nIn [9]: df1a = df1.set_index('employee')\n        df2a = df2.set_index('employee')\n        display('df1a', 'df2a')\nOut[9]: df1a                      df2a\n                        group               hire_date\n        employee                  employee\n        Bob        Accounting     Lisa           2004\n        Jake      Engineering     Bob            2008\n        Lisa      Engineering     Jake           2012\n        Sue                HR     Sue            2014\n```", "```py\nIn [10]: display('df1a', 'df2a',\n                 \"pd.merge(df1a, df2a, left_index=True, right_index=True)\")\nOut[10]: df1a                       df2a\n                         group                hire_date\n         employee                   employee\n         Bob        Accounting      Lisa           2004\n         Jake      Engineering      Bob            2008\n         Lisa      Engineering      Jake           2012\n         Sue                HR      Sue            2014\n\n         pd.merge(df1a, df2a, left_index=True, right_index=True)\n                         group  hire_date\n         employee\n         Bob        Accounting       2008\n         Jake      Engineering       2012\n         Lisa      Engineering       2004\n         Sue                HR       2014\n```", "```py\nIn [11]: df1a.join(df2a)\nOut[11]:                 group  hire_date\n         employee\n         Bob        Accounting       2008\n         Jake      Engineering       2012\n         Lisa      Engineering       2004\n         Sue                HR       2014\n```", "```py\nIn [12]: display('df1a', 'df3', \"pd.merge(df1a, df3, left_index=True,\n                  right_on='name')\")\nOut[12]: df1a                       df3\n                         group      name  salary\n         employee                   0   Bob   70000\n         Bob        Accounting      1  Jake   80000\n         Jake      Engineering      2  Lisa  120000\n         Lisa      Engineering      3   Sue   90000\n         Sue                HR\n\n         pd.merge(df1a, df3, left_index=True, right_on='name')\n                  group  name  salary\n         0   Accounting   Bob   70000\n         1  Engineering  Jake   80000\n         2  Engineering  Lisa  120000\n         3           HR   Sue   90000\n```", "```py\nIn [13]: df6 = pd.DataFrame({'name': ['Peter', 'Paul', 'Mary'],\n                             'food': ['fish', 'beans', 'bread']},\n                            columns=['name', 'food'])\n         df7 = pd.DataFrame({'name': ['Mary', 'Joseph'],\n                             'drink': ['wine', 'beer']},\n                            columns=['name', 'drink'])\n         display('df6', 'df7', 'pd.merge(df6, df7)')\nOut[13]: df6                  df7\n             name   food           name drink\n         0  Peter   fish      0    Mary  wine\n         1   Paul  beans      1  Joseph  beer\n         2   Mary  bread\n\n         pd.merge(df6, df7)\n            name   food drink\n         0  Mary  bread  wine\n```", "```py\nIn [14]: pd.merge(df6, df7, how='inner')\nOut[14]:    name   food drink\n         0  Mary  bread  wine\n```", "```py\nIn [15]: display('df6', 'df7', \"pd.merge(df6, df7, how='outer')\")\nOut[15]: df6                  df7\n             name   food           name drink\n         0  Peter   fish      0    Mary  wine\n         1   Paul  beans      1  Joseph  beer\n         2   Mary  bread\n\n         pd.merge(df6, df7, how='outer')\n              name   food drink\n         0   Peter   fish   NaN\n         1    Paul  beans   NaN\n         2    Mary  bread  wine\n         3  Joseph    NaN  beer\n```", "```py\nIn [16]: display('df6', 'df7', \"pd.merge(df6, df7, how='left')\")\nOut[16]: df6                  df7\n             name   food           name drink\n         0  Peter   fish      0    Mary  wine\n         1   Paul  beans      1  Joseph  beer\n         2   Mary  bread\n\n         pd.merge(df6, df7, how='left')\n             name   food drink\n         0  Peter   fish   NaN\n         1   Paul  beans   NaN\n         2   Mary  bread  wine\n```", "```py\nIn [17]: df8 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                             'rank': [1, 2, 3, 4]})\n         df9 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n                             'rank': [3, 1, 4, 2]})\n         display('df8', 'df9', 'pd.merge(df8, df9, on=\"name\")')\nOut[17]: df8                df9\n            name  rank         name  rank\n         0   Bob     1      0   Bob     3\n         1  Jake     2      1  Jake     1\n         2  Lisa     3      2  Lisa     4\n         3   Sue     4      3   Sue     2\n\n         pd.merge(df8, df9, on=\"name\")\n            name  rank_x  rank_y\n         0   Bob       1       3\n         1  Jake       2       1\n         2  Lisa       3       4\n         3   Sue       4       2\n```", "```py\nIn [18]: pd.merge(df8, df9, on=\"name\", suffixes=[\"_L\", \"_R\"])\nOut[18]:    name  rank_L  rank_R\n         0   Bob       1       3\n         1  Jake       2       1\n         2  Lisa       3       4\n         3   Sue       4       2\n```", "```py\nIn [19]: # Following are commands to download the data\n         # repo = \"https://raw.githubusercontent.com/jakevdp/data-USstates/master\"\n         # !cd data && curl -O {repo}/state-population.csv\n         # !cd data && curl -O {repo}/state-areas.csv\n         # !cd data && curl -O {repo}/state-abbrevs.csv\n```", "```py\nIn [20]: pop = pd.read_csv('data/state-population.csv')\n         areas = pd.read_csv('data/state-areas.csv')\n         abbrevs = pd.read_csv('data/state-abbrevs.csv')\n\n         display('pop.head()', 'areas.head()', 'abbrevs.head()')\nOut[20]: pop.head()\n           state/region     ages  year  population\n         0           AL  under18  2012   1117489.0\n         1           AL    total  2012   4817528.0\n         2           AL  under18  2010   1130966.0\n         3           AL    total  2010   4785570.0\n         4           AL  under18  2011   1125763.0\n\n         areas.head()\n                 state  area (sq. mi)\n         0     Alabama          52423\n         1      Alaska         656425\n         2     Arizona         114006\n         3    Arkansas          53182\n         4  California         163707\n\n         abbrevs.head()\n                 state abbreviation\n         0     Alabama           AL\n         1      Alaska           AK\n         2     Arizona           AZ\n         3    Arkansas           AR\n         4  California           CA\n```", "```py\nIn [21]: merged = pd.merge(pop, abbrevs, how='outer',\n                           left_on='state/region', right_on='abbreviation')\n         merged = merged.drop('abbreviation', axis=1) # drop duplicate info\n         merged.head()\nOut[21]:   state/region     ages  year  population    state\n         0           AL  under18  2012   1117489.0  Alabama\n         1           AL    total  2012   4817528.0  Alabama\n         2           AL  under18  2010   1130966.0  Alabama\n         3           AL    total  2010   4785570.0  Alabama\n         4           AL  under18  2011   1125763.0  Alabama\n```", "```py\nIn [22]: merged.isnull().any()\nOut[22]: state/region    False\n         ages            False\n         year            False\n         population       True\n         state            True\n         dtype: bool\n```", "```py\nIn [23]: merged[merged['population'].isnull()].head()\nOut[23]:      state/region     ages  year  population state\n         2448           PR  under18  1990         NaN   NaN\n         2449           PR    total  1990         NaN   NaN\n         2450           PR    total  1991         NaN   NaN\n         2451           PR  under18  1991         NaN   NaN\n         2452           PR    total  1993         NaN   NaN\n```", "```py\nIn [24]: merged.loc[merged['state'].isnull(), 'state/region'].unique()\nOut[24]: array(['PR', 'USA'], dtype=object)\n```", "```py\nIn [25]: merged.loc[merged['state/region'] == 'PR', 'state'] = 'Puerto Rico'\n         merged.loc[merged['state/region'] == 'USA', 'state'] = 'United States'\n         merged.isnull().any()\nOut[25]: state/region    False\n         ages            False\n         year            False\n         population       True\n         state           False\n         dtype: bool\n```", "```py\nIn [26]: final = pd.merge(merged, areas, on='state', how='left')\n         final.head()\nOut[26]:   state/region     ages  year  population    state  area (sq. mi)\n         0           AL  under18  2012   1117489.0  Alabama        52423.0\n         1           AL    total  2012   4817528.0  Alabama        52423.0\n         2           AL  under18  2010   1130966.0  Alabama        52423.0\n         3           AL    total  2010   4785570.0  Alabama        52423.0\n         4           AL  under18  2011   1125763.0  Alabama        52423.0\n```", "```py\nIn [27]: final.isnull().any()\nOut[27]: state/region     False\n         ages             False\n         year             False\n         population        True\n         state            False\n         area (sq. mi)     True\n         dtype: bool\n```", "```py\nIn [28]: final['state'][final['area (sq. mi)'].isnull()].unique()\nOut[28]: array(['United States'], dtype=object)\n```", "```py\nIn [29]: final.dropna(inplace=True)\n         final.head()\nOut[29]:   state/region     ages  year  population    state  area (sq. mi)\n         0           AL  under18  2012   1117489.0  Alabama        52423.0\n         1           AL    total  2012   4817528.0  Alabama        52423.0\n         2           AL  under18  2010   1130966.0  Alabama        52423.0\n         3           AL    total  2010   4785570.0  Alabama        52423.0\n         4           AL  under18  2011   1125763.0  Alabama        52423.0\n```", "```py\nIn [30]: data2010 = final.query(\"year == 2010 & ages == 'total'\")\n         data2010.head()\nOut[30]:     state/region   ages  year  population       state  area (sq. mi)\n         3             AL  total  2010   4785570.0     Alabama        52423.0\n         91            AK  total  2010    713868.0      Alaska       656425.0\n         101           AZ  total  2010   6408790.0     Arizona       114006.0\n         189           AR  total  2010   2922280.0    Arkansas        53182.0\n         197           CA  total  2010  37333601.0  California       163707.0\n```", "```py\nIn [31]: data2010.set_index('state', inplace=True)\n         density = data2010['population'] / data2010['area (sq. mi)']\n```", "```py\nIn [32]: density.sort_values(ascending=False, inplace=True)\n         density.head()\nOut[32]: state\n         District of Columbia    8898.897059\n         Puerto Rico             1058.665149\n         New Jersey              1009.253268\n         Rhode Island             681.339159\n         Connecticut              645.600649\n         dtype: float64\n```", "```py\nIn [33]: density.tail()\nOut[33]: state\n         South Dakota    10.583512\n         North Dakota     9.537565\n         Montana          6.736171\n         Wyoming          5.768079\n         Alaska           1.087509\n         dtype: float64\n```"]