- en: Chapter 21\. The Menu Bar
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 21 章\. 菜单栏
- en: The previous chapters showed how to build the visual components of our interactive
    Nobel Prize visualization, the time chart to display all Nobel Prize winners by
    year, a map to show geographic distributions, a list to display the currently
    selected winners, and a bar chart to compare absolute and per capita wins by country.
    In this chapter, we will see how the user interacts with the visualization by
    using selectors and buttons (see [Figure 21-1](#ui_target)) to create a filtered
    dataset that is then reflected by the visual components. For example, selecting
    Physics in the category-select box filters will display only Physics prize winners
    in the Nobel Prize visualization (Nobel-viz) elements. The filters in our menu
    bar are cumulative, so we can, for example, select only those female chemists
    from France to have won the Nobel Prize.^([1](ch21.xhtml#idm45607736427392))
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章展示了如何构建我们交互式诺贝尔奖可视化的视觉组件：时间图表用于显示所有诺贝尔奖得主按年份排序，地图显示地理分布，列表显示当前选定的获奖者，条形图比较各国的绝对和人均获奖情况。在本章中，我们将看到用户如何通过使用选择器和按钮（参见[图
    21-1](#ui_target)）与可视化进行交互，以创建一个经过筛选的数据集，然后这些数据将反映在视觉组件中。例如，在类别选择框中选择物理学，筛选器将只显示诺贝尔奖可视化元素中的物理奖获得者。我们的菜单栏中的筛选器是累积的，因此我们可以选择只有来自法国的女性化学家曾获诺贝尔奖的人。^([1](ch21.xhtml#idm45607736427392))
- en: '![dpj2 2101](assets/dpj2_2101.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 2101](assets/dpj2_2101.png)'
- en: Figure 21-1\. This chapter’s target menu bar
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-1\. 本章目标菜单栏
- en: In the sections ahead, I will show you how to use D3 to build the menu bar and
    how JavaScript callbacks are used to respond to user-driven changes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我将向您展示如何使用 D3 构建菜单栏，以及如何使用 JavaScript 回调来响应用户驱动的变化。
- en: Creating HTML Elements with D3
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 D3 创建 HTML 元素
- en: Many people think of D3 as a specialized tool for creating SVG visualizations
    composed of graphical primitives such as lines and circles. Though D3 is great
    for this (the best there is), it’s equally at home creating conventional HTML
    elements such as tables or selector boxes. For tricky, data-driven HTML complexes
    like hierarchical menus, D3’s nested data-joins are an ideal way to create the
    DOM elements and the callbacks to deal with user selections.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为 D3 是一个专门用于创建由图形基元组成的 SVG 可视化工具。虽然 D3 在这方面非常出色（是最好的），但它同样擅长创建传统的 HTML 元素，如表格或选择框。对于像层次菜单这样的复杂、数据驱动的
    HTML 结构，D3 的嵌套数据连接是创建 DOM 元素和处理用户选择回调的理想方式。
- en: We saw in [Chapter 20](ch20.xhtml#chapter_d3_bios) how easy it is to create
    `table` rows from a selected dataset or fill in the details of a biography box
    with a winner’s data. In this chapter, we’ll show how to populate selectors with
    options based on changing datasets and how to attach callback functions to user
    interface elements such as selectors and radio boxes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 20 章](ch20.xhtml#chapter_d3_bios)中，我们看到从选定数据集创建`table`行或填写获奖者数据的传记框是多么容易。在本章中，我们将展示如何基于变化的数据集填充选择器的选项，以及如何将回调函数附加到用户界面元素，如选择器和单选框。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you have stable HTML elements (e.g., a select box whose options are not dependent
    on changing data), it’s best to write them in HTML and then use D3 to attach any
    callback functions you need to deal with user input. As with CSS styling, you
    should do as much as possible in vanilla HTML. It keeps the codebase cleaner and
    is easier to understand by other devs and non-devs. In this chapter, I stretch
    this rule a bit to demonstrate the creation of HTML elements, but it’s pretty
    much always the way to go.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有稳定的 HTML 元素（例如，一个选择框，其选项不依赖于变化的数据），最好是先用 HTML 编写它们，然后再使用 D3 绑定任何需要处理用户输入的回调函数。与
    CSS 样式一样，你应该尽可能多地在原生 HTML 中完成。这样可以保持代码库的清洁，并且易于其他开发人员和非开发人员理解。在本章中，我会稍微放宽这一规则，来演示如何创建
    HTML 元素，但通常情况下，这确实是最佳实践。
- en: Building the Menu Bar
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建菜单栏
- en: As discussed in [“The HTML Skeleton”](ch16.xhtml#html_skeleton), our Nobel-viz
    is built on HTML `<div>` placeholders, fleshed out with JavaScript and D3\. As
    shown in [Example 21-1](#d3menu_skeleton), our menu bar is built on the `nobel-menu`
    `<div>`, placed above the main chart holder, and consists of three selector filters
    (by the winners’ category, gender, and country) and a couple of radio buttons
    to select the country prize-winning metric (absolute or per capita).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[“HTML骨架”](ch16.xhtml#html_skeleton)中所述，我们的Nobel-viz是建立在HTML `<div>`占位符上的，通过JavaScript和D3扩展。如[例 21-1](#d3menu_skeleton)所示，我们的菜单栏建立在`nobel-menu`
    `<div>`上，放置在主图表持有者的上方，包括三个选择器过滤器（按获奖者类别、性别和国家）和一对单选按钮来选择国家获奖指标（绝对或人均）。
- en: Example 21-1\. The HTML skeleton for the menu bar
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例 21-1。菜单栏的HTML骨架
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we’ll add the UI elements in turn, starting with the selector filters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将依次添加UI元素，首先是选择器过滤器。
- en: Building the Category Selector
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建类别选择器
- en: 'In order to build the category selector, we’re going to need a list of option
    strings. Let’s create that list using the `CATEGORIES` list defined in *nbviz_core.js*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建类别选择器，我们需要一个选项字符串列表。让我们使用*nbviz_core.js*中定义的`CATEGORIES`列表创建该列表：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO1-1)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO1-1)'
- en: Creates the category selector’s list `['All Categories', 'Chemistry', 'Economics',
    …​ ]` by concatenating the list `['All Categories']` and the list `['Chemistry',
    'Economics', …​ ]`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过连接`['所有类别', '化学', '经济学', ... ]`列表和`['所有类别']`列表以创建类别选择器的列表。
- en: 'We’re now going to use this category list to make the options tags. We’ll first
    use D3 to grab the `#cat-select` select tag:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用这个类别列表来制作选项标签。我们首先使用D3来获取`#cat-select`选择标签：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With `catSelect` to hand, let’s use a standard D3 data-join to turn our `catList`
    list of categories into HTML `option` tags:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`catSelect`，让我们使用标准的D3数据连接来将我们的`catList`类别列表转换为HTML `option`标签：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO2-1)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO2-1)'
- en: After data binding, append an `option` for each `catList` member.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定后，为每个`catList`成员附加一个`option`。
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO2-2)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO2-2)'
- en: We are setting the `option`’s `value` attribute and text to a category (e.g.,
    `<option value="Peace">Peace</option>`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置`option`的`value`属性和文本为一个类别（例如，`<option value="Peace">和平</option>`）。
- en: 'The result of the preceding `append` operations is the following `cat-select`
    DOM element:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前述`append`操作的结果是以下`cat-select` DOM元素：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have our selector, we can use D3’s `on` method to attach an event-handler
    callback function, triggered when the selector is changed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了选择器，我们可以使用D3的`on`方法来附加一个事件处理回调函数，当选择器被改变时触发：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO3-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO3-1)'
- en: '`this` is the select tag, with the `value` property as the selected category
    option.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`是选择标签，`value`属性是选定类别选项。'
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO3-2)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO3-2)'
- en: We call the `filterByCategory` method defined in *nbviz_core.js* to filter our
    dataset for prizes in the category selected.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用*nbviz_core.js*中定义的`filterByCategory`方法来过滤所选类别的奖项数据集。
- en: '[![3](assets/3.png)](#co_the_menu_bar_CO3-3)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_menu_bar_CO3-3)'
- en: '`onDataChange` triggers the visual-component update methods that will change
    to reflect our newly filtered dataset.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`onDataChange`触发了将更新以反映我们新过滤的数据集的可视组件的方法。'
- en: '[Figure 21-2](#d3ui_select) is a schematic of our select callback. Selecting
    Physics calls the anonymous callback function attached to our selector’s change
    event. This function initiates the update of the Nobel-viz’s visual elements.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-2是我们选择回调的示意图。选择物理学调用我们附加到选择器变更事件的匿名回调函数。此函数启动了Nobel-viz可视元素的更新。
- en: '![dpj2 2102](assets/dpj2_2102.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 2102](assets/dpj2_2102.png)'
- en: Figure 21-2\. The category select callback
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-2。类别选择回调
- en: Within the category selector’s callback, we first call the `filterByCategory`
    method^([2](ch21.xhtml#idm45607735804864)) to select only the Physics winners
    and the `onDataChange` method to trigger an update of all the visual components.
    Where applicable, these will reflect the changed data. For example, the map’s
    distribution circular indicators will resize, vanishing in the case of countries
    with no Nobel Physics winners.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在类别选择器的回调中，我们首先调用`filterByCategory`方法^([2](ch21.xhtml#idm45607735804864))来选择仅物理学获奖者，并调用`onDataChange`方法来触发所有可视化组件的更新。在适用的情况下，这些将反映更改后的数据。例如，地图的分布环形指示器将重新调整大小，在没有诺贝尔物理学获奖者的国家中会消失。
- en: Adding the Gender Selector
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加性别选择器
- en: 'We have already added the HTML for our gender selector and its options, in
    the menu bar’s description in *index.xhtml*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 *index.xhtml* 中的菜单栏描述中添加了性别选择器及其选项的 HTML：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'All we need to do now is select the gender `select` tag and add a callback
    function to handle user selections. We can easily achieve this using D3’s `on`
    method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需选择性别 `select` 标签，并添加一个回调函数来处理用户的选择。我们可以很容易地通过 D3 的 `on` 方法实现这一点：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO4-1)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO4-1)'
- en: Calling the gender dimension’s filter without an argument resets it to allow
    all genders.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 调用性别维度的过滤器，不带参数则将其重置以允许所有性别。
- en: First, we select the selector’s option value. We then use this value to filter
    the current dataset. Finally, we call `onDataChange` to trigger any changes to
    the Nobel-viz’s visual components caused by the new dataset.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们选择选择器的选项值。然后，我们使用此值来过滤当前的数据集。最后，我们调用 `onDataChange` 方法来触发 Nobel-viz 可视组件由新数据集引起的任何变化。
- en: 'To place the gender `select` tag, we use a little CSS, giving it a left margin
    of 20 pixels:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要放置性别 `select` 标签，我们使用了一点 CSS，给它左边距 20 像素：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding the Country Selector
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加国家选择器
- en: Adding the country selector is a little more involved than adding those of category
    and gender. The distribution of Nobel Prizes by country has a long tail (see [Figure 17-1](ch17.xhtml#target_barchart)),
    with lots of countries having one or two prizes. We could include all of these
    in our selector, but it would make it rather long and cumbersome. A better way
    is to add groups for the single- and double-winning countries, keeping the number
    of select options manageable and adding a little narrative to the chart, namely
    the distributions of small winners over time, which might conceivably say something
    about changing trends in the Nobel Prize award allocation.^([3](ch21.xhtml#idm45607735600416))
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 添加国家选择器比添加类别和性别选择器更复杂。诺贝尔奖按国家分布有长尾效应（参见[图 17-1](ch17.xhtml#target_barchart)），许多国家只有一两个奖项。我们可以将所有这些包括在我们的选择器中，但这将使其变得相当长和笨重。一个更好的方法是为单个和双重获奖国家添加分组，以保持可管理的选择项数量，并向图表添加一些叙述，即小奖项随时间的分布，这可能反映出诺贝尔奖分配趋势的变化。（参见[3](ch21.xhtml#idm45607735600416)）。
- en: In order to add our single- and double-country winner groups, we will need the
    crossfiltered country dimension to get the group sizes by country. This means
    creating the country selector after our Nobel Prize dataset has loaded. To do
    this, we put it in an `nbviz.initUI` method, called in our main *nbviz_main.js*
    script after the crossfilter dimensions have been created (see [“Filtering Data
    with Crossfilter”](ch16.xhtml#crossfilter)).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加我们的单个和双重获奖国家组，我们需要使用交叉过滤的国家维度获取每个国家的组大小。这意味着在我们的诺贝尔奖数据集加载后，将其放入一个 `nbviz.initUI`
    方法中，该方法在我们主要的 *nbviz_main.js* 脚本中的交叉过滤器维度创建完成后调用（参见[“使用交叉过滤器过滤数据”](ch16.xhtml#crossfilter)）。
- en: The following code creates a selection list. Countries with three or more winners
    get their own selection slot, below the All Winners selection. Single- and double-country
    winners are added to their respective lists, which will be used to filter the
    dataset if the user selects the Single Winning Countries or Double Winning Countries
    from the selector’s options.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码创建一个选择列表。三次或更多获奖的国家会有自己的选择项，出现在“所有获奖者”选择项下方。单个和双重获奖的国家会被添加到各自的列表中，这些列表将用于在用户从选择器选项中选择“单个获奖国家”或“双重获奖国家”时过滤数据集。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO5-1)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO5-1)'
- en: Sorted group array of form (`{key:"United States", value:336}, …​`) where `value`
    is the number of winners from that country.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按 (`{key:"United States", value:336}, …​`) 排序的组数组，其中 `value` 是该国家的获奖者数量。
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO5-2)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO5-2)'
- en: An object with lists to store single and double winners.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含用于存储单个和双重获奖者的列表的对象。
- en: '[![3](assets/3.png)](#co_the_menu_bar_CO5-3)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_menu_bar_CO5-3)'
- en: Countries with more than two winners get their own slot in the `selectData`
    list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有两名以上获奖者的国家在 `selectData` 列表中有自己的位置。
- en: '[![4](assets/4.png)](#co_the_menu_bar_CO5-4)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_the_menu_bar_CO5-4)'
- en: Single- and double-winning countries are added to their respective lists based
    on the group size (value) of 1 or 2.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 基于值为 1 或 2 的组大小，将单个和双重获奖的国家添加到各自的列表中。
- en: 'Now that we have our `selectData` list with corresponding `fewWinners` arrays,
    we can use it to create the options for our country selector. We first use D3
    to grab the country selector’s `select` tag and then add the options to it using
    standard data binding:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了带有对应`fewWinners`数组的`selectData`列表，我们可以用它来创建国家选择器的选项。我们首先使用D3获取国家选择器的`select`标签，然后使用标准数据绑定将选项添加到其中：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With our `selectData` options appended, the selector looks like [Figure 21-3](#d3ui_nats_select).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了我们的`selectData`选项后，选择器看起来像[图 21-3](#d3ui_nats_select)。
- en: '![dpj2 2103](assets/dpj2_2103.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 2103](assets/dpj2_2103.png)'
- en: Figure 21-3\. Selector for prizes by country
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-3\. 按国家选择奖项的选择器
- en: 'Now all we need is a callback function, triggered when an option is selected,
    to filter our main dataset by country. The following code shows how it’s done.
    First, we get the select’s `value` property (1), a country or one of `ALL_WINNERS`,
    `DOUBLE_WINNERS`, or `SINGLE_WINNERS`. We then construct a list of countries to
    send to our national filter method, `nbviz.filterByCountries` (defined in *nbviz_core.js*):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要一个回调函数，当选择一个选项时触发，通过国家过滤我们的主数据集。以下代码展示了如何完成。首先，我们获取选择的`select`的`value`属性（1），一个国家或者`ALL_WINNERS`、`DOUBLE_WINNERS`或`SINGLE_WINNERS`之一。然后，我们构造一个国家列表，发送到我们的国家过滤方法`nbviz.filterByCountries`（在*nbviz_core.js*中定义）：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO6-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO6-1)'
- en: These conditionals make a `countries` array, depending on the `country` string.
    This array is empty, single-valued, or with one of `fewWinners` arrays.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`country`字符串创建一个`countries`数组的条件语句。这个数组可以为空，单值，或包含一个`fewWinners`数组中的国家。
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO6-2)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO6-2)'
- en: Calls `filterByCountries` to filter our main Nobel-winners dataset using the
    array of countries.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`filterByCountries`来使用国家数组过滤我们的主要诺贝尔获奖者数据集。
- en: '[![3](assets/3.png)](#co_the_menu_bar_CO6-3)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_menu_bar_CO6-3)'
- en: Triggers an update to all the Nobel-viz’s elements.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 触发更新所有诺贝尔可视化元素。
- en: The `filterByCountries` function is shown in [Example 21-2](#d3ui_filter_by_countries).
    An empty `countryNames` argument resets the filter; otherwise, we filter the country
    dimension `countryDim` for all those countries in `countryNames` ![1](assets/1.png).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`filterByCountries`函数显示在[示例 21-2](#d3ui_filter_by_countries)中。一个空的`countryNames`参数将重置过滤器；否则，我们将按`countryNames`中的所有国家过滤国家维度`countryDim`
    ![1](assets/1.png)。'
- en: Example 21-2\. Filter by countries function
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 21-2\. 按国家过滤函数
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO7-1)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO7-1)'
- en: Resets the filter if the `countryNames` array is empty (the user chose All Countries).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`countryNames`数组为空（用户选择所有国家），则重置过滤器。
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO7-2)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO7-2)'
- en: Here, we create a filter function on our `crossfilter` country dimension, which
    returns `true` if a country is in the `countryNames` list (containing either a
    single country or all single or double winners).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`crossfilter`国家维度上创建一个过滤器函数，如果一个国家在`countryNames`列表中（包含单个国家或所有单个或双赢家），则返回`true`。
- en: '[![3](assets/3.png)](#co_the_menu_bar_CO7-3)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_the_menu_bar_CO7-3)'
- en: Keeps a record of any single selected country in order—for example, to highlight
    it in the map and bar chart.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 记录任何单个选择的国家，例如在地图和条形图中突出显示。
- en: Now that we’ve built the filter selectors for our category, gender, and country
    dimensions, all we need to do is add the callback function to deal with changes
    to the prize-winning metric radio button.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为类别、性别和国家维度构建了过滤选择器，现在我们只需要添加回调函数，以处理获奖度量单选按钮的更改。
- en: Wiring Up the Metric Radio Button
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接度量单选按钮
- en: 'The metric radio button has already been built in HTML, consisting of a form
    with `radio` inputs:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 指标单选按钮已在HTML中构建完成，由带有`radio`输入的表单组成：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO8-1)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO8-1)'
- en: '`&nbsp;` is used to create a nonbreaking space between the form and its label.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`&nbsp;`在表单和其标签之间创建一个不间断的空格。
- en: '[![2](assets/2.png)](#co_the_menu_bar_CO8-2)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_the_menu_bar_CO8-2)'
- en: Inputs of type `radio` sharing the same name (`mode`, in this case) are grouped
    together, and activating one deactivates all others. They are differentiated by
    value (`0` and `1` in this case). Here we use the `checked` attribute to activate
    value `0` initially.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为`radio`的输入共享相同的名称（在本例中为`mode`），它们被分组在一起，激活其中一个将取消激活其他所有输入。它们通过值（在本例中为`0`和`1`）进行区分。这里我们使用`checked`属性来初始激活值`0`。
- en: 'With the radio button form in place, we need only select all its inputs and
    add a callback function to deal with any button presses triggering a change:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有了单选按钮表单，我们只需选择所有其输入，并添加一个回调函数来处理任何按下按钮触发的更改：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_the_menu_bar_CO9-1)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_the_menu_bar_CO9-1)'
- en: Update the value of `valuePerCapita` before calling `onDataChange` and triggering
    a redraw of the visual elements.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`onDataChange`并触发可视元素重新绘制之前，更新`valuePerCapita`的值。
- en: We are storing the current state of the button with our `valuePerCapita` integer.
    When the user selects a radio box, this value is changed and a redraw with the
    new metric is triggered with `onDataChange`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用我们的`valuePerCapita`整数存储按钮的当前状态。当用户选择单选框时，此值将更改，并使用`onDataChange`触发具有新度量的重新绘制。
- en: We now have the menu bar elements to our Nobel-viz, allowing users to refine
    the displayed dataset and drill down to subsets they are most curious about.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为我们的 Nobel-viz 添加了菜单栏元素，允许用户细化显示的数据集并深入到他们最感兴趣的子集。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to add selectors and radio-button elements to our
    Nobel Prize visualization. There are a number of other user interface HTML tags,
    such as button groups, groups of checkboxes, time pickers, and plain buttons.^([4](ch21.xhtml#idm45607734742848))
    But implementing these controllers involves the same patterns as shown in this
    chapter. A list of data is used to append and insert DOM elements, setting properties
    where appropriate, and callback functions are bound to any change events. This
    is a very powerful method that plays very well with such D3 (and JS) idioms as
    method chaining and anonymous functions. It will quickly become a very natural
    part of your D3 workflow.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到如何将选择器和单选按钮元素添加到我们的诺贝尔奖可视化中。还有许多其他用户界面 HTML 标记，如按钮组、复选框组、时间选择器和普通按钮。^([4](ch21.xhtml#idm45607734742848))
    但是，实现这些控件涉及与本章所示的相同模式。使用数据列表来附加和插入 DOM 元素，根据需要设置属性，并将回调函数绑定到任何更改事件。这是一种非常强大的方法，非常适合与
    D3（和 JS）习惯用法相结合，如方法链和匿名函数。它将很快成为您 D3 工作流程的自然组成部分。
- en: ^([1](ch21.xhtml#idm45607736427392-marker)) Remarkably, Marie Curie and her
    daughter Irène Joliot-Curie hold this distinction.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch21.xhtml#idm45607736427392-marker)) 值得注意的是，玛丽·居里和她的女儿伊莲·居里-居里拥有这一荣誉。
- en: ^([2](ch21.xhtml#idm45607735804864-marker)) Defined in the *nbviz_core.js* script.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch21.xhtml#idm45607735804864-marker)) 定义在 *nbviz_core.js* 脚本中。
- en: ^([3](ch21.xhtml#idm45607735600416-marker)) It does show that among single winners,
    the Nobel Prize for Peace predominates, followed by Literature.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch21.xhtml#idm45607735600416-marker)) 它确实显示，在单个获奖者中，和平诺贝尔奖占主导地位，其次是文学奖。
- en: ^([4](ch21.xhtml#idm45607734742848-marker)) There are also native sliders in
    HTML5, where before one relied on jQuery plug-ins.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch21.xhtml#idm45607734742848-marker)) 在 HTML5 中还有原生滑块，以前要依赖于 jQuery 插件。
