["```py\n>>>cd /home\n```", "```py\n>>>git clone https://github.com/mshearer0/handsonentityresolution\n\n>>>cd handsonentityresolution\n```", "```py\ndf_c.to_csv('/home/handsonentityresolution/basic_clean.csv')\n\ndf_m.to_csv('/home/handsonentityresolution/mari_clean.csv',\n   index=False)\n```", "```py\n>>>gsutil cp /home/handsonentityresolution/* gs://<*your\n   bucket*>/handsonentityresolution/\n```", "```py\n>>>pip install splink\n```", "```py\n​>>>wget https://github.com/moj-analytical-services/\n   splink_scalaudfs/raw/spark3_x/jars/scala-udf-similarity-\n   0.1.1_spark3.x.jar\n```", "```py\n>>>gsutil cp /home/handsonentityresolution/*.jar\n   gs://<*your bucket*>/handsonentityresolution/\n```", "```py\nspark.jars=gs://<*your_bucket*>/handsonentityresolution/\n   scala-udf-similarity-0.1.1_spark3.x.jar\n```", "```py\ndf_m = pd.read_csv('gs://<*your bucket*>/\n   handsonentityresolution/mari_clean.csv')\ndf_c = pd.read_csv('gs://<*your bucket*>/\n   handsonentityresolution/basic_clean.csv')\n```", "```py\nfrom pyspark import SparkContext, SparkConf\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import types\n\nconf = SparkConf()\nconf.set(\"spark.default.parallelism\", \"240\")\nconf.set(\"spark.sql.shuffle.partitions\", \"240\")\n\nsc = SparkContext.getOrCreate(conf=conf)\nspark = SparkSession(sc)\nspark.sparkContext.setCheckpointDir(\"gs://<*your bucket*>/\n    handsonentityresolution/\")\n\nspark.udfspark.udf.registerJavaFunction(\n   \"jaro_winkler_similarity\",\n   \"uk.gov.moj.dash.linkage.JaroWinklerSimilarity\",\n   types.DoubleType())\n```", "```py\nfrom pyspark.sql.types import StructType, StructField, StringType, IntegerType\n\nschema = StructType(\n   [StructField(\"Postcode\", StringType()),\n    StructField(\"CompanyName\", StringType()),\n    StructField(\"unique_id\", IntegerType())]\n)\n```", "```py\ndfs_m = spark.createDataFrame(df_m, schema)\ndfs_c = spark.createDataFrame(df_c, schema)\n```", "```py\nimport splink.spark.comparison_library as cl\n\nsettings = {\n   \"link_type\": \"link_only\",\n   \"blocking_rules_to_generate_predictions\": [ \"l.Postcode = r.Postcode\",\n   \"l.CompanyName = r.CompanyName\", ],\n   \"comparisons\": [ cl.jaro_winkler_at_thresholds(\"CompanyName\",[0.9,0.8]), ],\n   \"retain_intermediate_calculation_columns\" : True,\n   \"retain_matching_columns\" : True\n}\n```", "```py\nfrom splink.spark.linker import SparkLinker\nlinker = SparkLinker([dfs_m, dfs_c], settings, input_table_aliases=\n[\"dfs_m\", \"dfs_c\"])\n```", "```py\nlinker.estimate_u_using_random_sampling(max_pairs=5e7)\nlinker.estimate_parameters_using_expectation_maximisation\n   (\"l.Postcode = r.Postcode\")\n```", "```py\nlinker.load_model(\"<*your_path*>/Chapter8_Splink_Settings.json\")\n```", "```py\ndf_pred = linker.predict(threshold_match_probability=0.1)\n   .as_pandas_dataframe()\nlen(df_pred)\n```"]