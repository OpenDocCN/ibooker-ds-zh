["```py\nprefixes:\n   ekg: http://cloud.google.com/ekg/0.0.1#\n   schema: https://schema.org/\n\nmappings:\n   organization:\n      sources:\n         - [example_project:example_dataset.example_table~bigquery]        \n      s: ekg:company_$(record_id)\n      po:\n         - [a, schema:Organization]\n         - [schema:name, $(company_name_in_source)]\n         - [schema:streetAddress, $(street)]\n         - [schema:postalCode, $(postal_code)]\n         - [schema:addressCountry, $(country)]\n         - [schema:addressLocality, $(city)]\n         - [schema:addressRegion, $(state)]\n         - [ekg:recon.source_name, $(source_system)]\n         - [ekg:recon.source_key, $(source_key)]\n```", "```py\nprefixes:\n  ekg: http://cloud.google.com/ekg/0.0.1#\n  schema: https://schema.org/\n\nmappings:\n  organization:\n    sources:\n      - [<*your_project_name*>:Chapter9.mari~bigquery]\n    s: ekg:company1_$(unique_id)\n    po:\n      - [a, schema:Organization]\n      - [schema:postalCode, $(Postcode)]\n      - [schema:name, $(CompanyName)]\n      - [ekg:recon.source_name, (mari)]\n      - [ekg:recon.source_key, $(unique_id)]\n```", "```py\ngs://<*your bucket*>/handsonentityresolution/Chapter9SchemaMari\n```", "```py\n    - [<your_bucket>:Chapter9.basic~bigquery]\n   s: ekg:company2_$(unique_id)\n   po:\n       - [a, schema:Organization]\n       - [ekg:recon.source_name, (basic)]\n```", "```py\nCREATE TEMP TABLE temp AS SELECT\n   src.* FROM Chapter9.clusters_15719257497877843494 AS src\n      INNER JOIN (SELECT cluster_id from\n         Chapter9.clusters_15719257497877843494 WHERE \n             source_name = \"mari\") AS mari\n         ON src.cluster_id = mari.cluster_id;\n```", "```py\nCREATE TEMP TABLE match AS SELECT\n   src.* FROM temp AS src\n      INNER JOIN (SELECT cluster_id FROM temp GROUP BY cluster_id \n          HAVING COUNT(*) > 1) AS matches\n      ON matches.cluster_id = src.cluster_id;\n```", "```py\nCREATE TABLE Chapter9.results AS\n\n   SELECT * FROM Chapter9.basic AS bas\n   INNER JOIN (SELECT * FROM match WHERE match.source_name = \"basic\") AS res1\n   ON res1.source_key = CAST(bas.unique_id AS STRING)\n\n   UNION ALL\n\n   SELECT * FROM Chapter9.mari AS mari\n      INNER JOIN (SELECT * FROM match WHERE match.source_name = \"mari\") AS res2\n      ON res2.source_key = CAST(mari.unique_id AS STRING)\n\nORDER BY confidence, cluster_id\n```", "```py\n>>>gsutil cp gs://<your_bucket>/handsonentityresolution/\n   Chapter9.py .\n```", "```py\n#!/usr/bin/env python\n# coding: utf-8\n\nfrom google.cloud import enterpriseknowledgegraph as ekg\n\nproject_id = '<your_project>'\ndataset_id = 'Chapter9'\n\nimport google.cloud.enterpriseknowledgegraph as ekg\n\nclient = ekg.EnterpriseKnowledgeGraphServiceClient()\nparent = client.common_location_path(project=project_id, location='global')\n\ninput_config = ekg.InputConfig(\n        bigquery_input_configs=[\n            ekg.BigQueryInputConfig(\n                bigquery_table=client.table_path(\n                    project=project_id, dataset=dataset_id, table='mari'\n                ),\n                gcs_uri='gs://<your bucket>/\n                  handsonentityresolution/Chapter9SchemaMari',\n            ),\n             ekg.BigQueryInputConfig(\n                bigquery_table=client.table_path(\n                    project=project_id, dataset=dataset_id, table='basic'\n                ),\n                gcs_uri='gs://<your bucket>/\n                  handsonentityresolution/Chapter9SchemaBasic',\n            )   \n        ],\n        entity_type=ekg.InputConfig.EntityType.ORGANIZATION,\n    )\n\noutput_config = ekg.OutputConfig(\n        bigquery_dataset=client.dataset_path(project=project_id, \n            dataset=dataset_id)\n    )\n\nentity_reconciliation_job = ekg.EntityReconciliationJob(\n        input_config=input_config, output_config=output_config\n)\n\nrequest = ekg.CreateEntityReconciliationJobRequest(\n        parent=parent, entity_reconciliation_job=entity_reconciliation_job\n)\n\nresponse = client.create_entity_reconciliation_job(request=request)\n\nprint(f\"Job: {response.name}\")\n```", "```py\n>>>python Chapter9.py\n\n```", "```py\n>>>gsutil cp gs://<your_bucket>/handsonentityresolution/\n    Chapter9.sql\n```", "```py\n>>>bq query --use_legacy_sql=false < Chapter9.sql\n```", "```py\n>>>bq rm -f -t Chapter9.results\n\n```"]