["```py\nimport pandas as pd\n\ndata = pd.read_csv(“dataset.csv”)\n```", "```py\nimport csv\n\nwith open(“dataset.csv”, “r”) as file: ![1](Images/1.png)\n\treader = csv.reader(file, delimiter=“,”)\nfor row in reader: ![2](Images/2.png)\n\tprint(row)\n```", "```py\nimport cv2 ![1](Images/1.png)\nsingle_image = cv2.imread(\"img_01.jpg\")\n\nplt.imshow(single_image)\nplt.show()\n```", "```py\nprint(type(single_image))\nnumpy.ndarray\n```", "```py\nlibrary(magick)\nsingle_image <- image_read('img_01.jpg')\nclass(single_image)\n[1] \"magick-image\"\n```", "```py\nprint(single_image.shape)\n224 224 3\n```", "```py\nsingle_image = cv2.resize(single_image,(150, 150))\nprint(single_image.shape)\n(150, 150, 3)\n```", "```py\ngray_image = cv2.cvtColor(single_image, cv2.COLOR_RGB2GRAY)\nprint(gray_image.shape)\n(150, 150)\n```", "```py\nflipped_image = np.fliplr(gray_image)\n```", "```py\nfrom skimage import transform\nrotated_image = transform.rotate(single_image, angle=45)\n```", "```py\nlibrary(adimpro)\nrotate.image(single_image, angle = 90, compress=NULL)\n```", "```py\nexample_review = reviews[\"reviewText\"].sample()\nprint(example_review)\nprint(type(example_review))\n```", "```py\nI just recently purchased her ''Paint The Sky With Stars''\n CD and was so impressed that I bought 3 of her previously\n released CD's and plan to buy all her music.  She is\n truely talented and her music is very unique with a\n combination of modern classical and pop with a hint of\n an Angelic tone. I still recommend you buy this CD. Anybody\n  who has an appreciation for music will certainly enjoy her music.\n\nstr\n```", "```py\nsentences = nltk.sent_tokenize(example_review)\nprint(sentences)\n```", "```py\n[\"I just recently purchased her ''Paint The Sky With Stars''\nCD and was so impressed that I bought 3 of her\npreviously released CD's and plan to buy all her music.\",\n 'She is truely talented and her music is very unique with\n  a combination of modern classical and pop with a hint of an Angelic tone.',\n 'I still recommend you buy this CD.',\n 'Anybody who has an appreciation for music will certainly enjoy her music.']\n```", "```py\ntidy_reviews <- amazon_reviews %>%\n  unnest_tokens(word, reviewText) %>%\n  mutate(word = lemmatize_strings(word, dictionary = lexicon::hash_lemmas))\n```", "```py\ntidy_reviews <- tidy_reviews %>%\n  anti_join(stop_words)\n```", "```py\nenglish_stop_words = set(stopwords.words(\"english\"))\ncleaned_words = [word for word in words if word not in english_stop_words]\n```", "```py\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\") ![1](Images/1.png)\n\ndoc = nlp(example_review) ![2](Images/2.png)\nprint(type(doc))\n```", "```py\nspacy.tokens.doc.Doc\n```", "```py\nfor token in doc:\n    print(token.text, token.pos_)\n```", "```py\nfor token in doc:\n    print(token.text, token.has_vector, token.vector_norm, token.is_oov)\n```", "```py\nfor token in doc:...\nI True 21.885008 True\njust True 22.404057 True\nrecently True 23.668447 True\npurchased True 23.86188 True\nher True 21.763712 True\n' True 18.825636 True\n```", "```py\ndf_ts <- ts(ts_data_raw$Temp, start=c(1981, 01, 01),\n            end=c(1990, 12, 31), frequency=365)\nclass(df_ts)\n```", "```py\nplot(df_ts)\n```", "```py\ndecomposed_ts <- decompose(df_ts)\nplot(decomposed_ts)\n```", "```py\nfrom fbprophet import Prophet\n\nm = Prophet()\nm.fit(df) ![1](Images/1.png)\n\nfuture = m.make_future_dataframe(periods=365) ![2](Images/2.png)\nfuture.tail()\n```", "```py\nlibrary(prophet)\n\nm <- prophet(df)\n\nfuture <- make_future_dataframe(m, periods = 365)\ntail(future)\n```", "```py\nlibrary(raster)\nclimate_variables <- getData(name = \"worldclim\", var = \"bio\", res = 10)\n```", "```py\ne <- extent(xmin, xmax, ymin, ymax)\ncoords_absence <- dismo::randomPoints(climate_variables, 10000, ext = e)\npoints_absence <- sp::SpatialPoints(coords_absence,\n                                    proj4string = climate_variables@crs)\nenv_absence <- raster::extract(climate_variables, points_absence)\n```", "```py\nlibrary(ENMeval)\ncheck1 <- get.checkerboard1(occs, envs, bg, aggregation.factor=5)\n```", "```py\nraster_prediction <- predict(predictors, model)\nplot(raster_prediction)\n```"]