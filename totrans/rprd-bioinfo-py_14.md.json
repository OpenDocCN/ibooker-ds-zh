["```py\n>>> from Bio import Seq\n>>> seq = 'GCATGC'\n>>> Seq.reverse_complement(seq) == seq\nTrue\n```", "```py\n$ cd 13_revp\n$ cp solution1_zip_enumerate.py revp.py\n```", "```py\n$ ./revp.py -h\nusage: revp.py [-h] FILE\n\nLocating Restriction Sites\n\npositional arguments:\n  FILE        Input FASTA file ![1](assets/1.png)\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ cat tests/inputs/1.fa\n>Rosalind_24\nTCAATGCATGCGGGTCTATATGCAT\n```", "```py\n$ ./revp.py tests/inputs/1.fa\n5 4\n7 4\n17 4\n18 4\n21 4\n4 6\n6 6\n20 6\n```", "```py\n$ new.py -fp 'Locating Restriction Sites' revp.py\nDone, see new script \"revp.py\".\n```", "```py\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    file: TextIO ![1](assets/1.png)\n\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Locating Restriction Sites',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file', ![2](assets/2.png)\n                        help='Input FASTA file',\n                        metavar='FILE',\n                        type=argparse.FileType('rt'))\n\n    args = parser.parse_args()\n\n    return Args(args.file)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(args.file.name)\n```", "```py\n$ ./revp.py tests/inputs/1.fa\ntests/inputs/1.fa\n```", "```py\n>>> from Bio import SeqIO\n>>> recs = SeqIO.parse(open('tests/inputs/1.fa'), 'fasta')\n>>> rec = next(recs)\n>>> seq = str(rec.seq)\n>>> seq\n'TCAATGCATGCGGGTCTATATGCAT'\n```", "```py\n>>> empty = SeqIO.parse(open('tests/inputs/empty.fa'), 'fasta')\n>>> next(empty)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/\n  site-packages/Bio/SeqIO/Interfaces.py\", line 73, in __next__\n    return next(self.records)\nStopIteration\n```", "```py\n>>> def find_kmers(seq, k):\n...     n = len(seq) - k + 1\n...     return [] if n < 1 else [seq[i:i + k] for i in range(n)]\n...\n```", "```py\n>>> for k in range(4, 13):\n...     print(k, len(find_kmers(seq, k)))\n...\n4 22\n5 21\n6 20\n7 19\n8 18\n9 17\n10 16\n11 15\n12 14\n```", "```py\n>>> kmers = find_kmers(seq, 12)\n>>> kmers\n['TCAATGCATGCG', 'CAATGCATGCGG', 'AATGCATGCGGG', 'ATGCATGCGGGT',\n 'TGCATGCGGGTC', 'GCATGCGGGTCT', 'CATGCGGGTCTA', 'ATGCGGGTCTAT',\n 'TGCGGGTCTATA', 'GCGGGTCTATAT', 'CGGGTCTATATG', 'GGGTCTATATGC',\n 'GGTCTATATGCA', 'GTCTATATGCAT']\n```", "```py\n>>> from Bio import Seq\n>>> revc = [Seq.reverse_complement(kmer) for kmer in kmers]\n```", "```py\n>>> revc = list(map(Seq.reverse_complement, kmers))\n```", "```py\n>>> revc\n['CGCATGCATTGA', 'CCGCATGCATTG', 'CCCGCATGCATT', 'ACCCGCATGCAT',\n 'GACCCGCATGCA', 'AGACCCGCATGC', 'TAGACCCGCATG', 'ATAGACCCGCAT',\n 'TATAGACCCGCA', 'ATATAGACCCGC', 'CATATAGACCCG', 'GCATATAGACCC',\n 'TGCATATAGACC', 'ATGCATATAGAC']\n```", "```py\n>>> seq = 'TCAATGCATGCGGGTCTATATGCAT'\n>>> kmers = find_kmers(seq, 4)\n>>> revc = list(map(Seq.reverse_complement, kmers))\n>>> pairs = list(zip(kmers, revc))\n```", "```py\n>>> pprint(list(enumerate(pairs)))\n[(0, (\"TCAA\", \"TTGA\")),\n (1, (\"CAAT\", \"ATTG\")),\n (2, (\"AATG\", \"CATT\")),\n (3, (\"ATGC\", \"GCAT\")),\n (4, (\"TGCA\", \"TGCA\")),\n (5, (\"GCAT\", \"ATGC\")),\n (6, (\"CATG\", \"CATG\")),\n (7, (\"ATGC\", \"GCAT\")),\n (8, (\"TGCG\", \"CGCA\")),\n (9, (\"GCGG\", \"CCGC\")),\n (10, (\"CGGG\", \"CCCG\")),\n (11, (\"GGGT\", \"ACCC\")),\n (12, (\"GGTC\", \"GACC\")),\n (13, (\"GTCT\", \"AGAC\")),\n (14, (\"TCTA\", \"TAGA\")),\n (15, (\"CTAT\", \"ATAG\")),\n (16, (\"TATA\", \"TATA\")),\n (17, (\"ATAT\", \"ATAT\")),\n (18, (\"TATG\", \"CATA\")),\n (19, (\"ATGC\", \"GCAT\")),\n (20, (\"TGCA\", \"TGCA\")),\n (21, (\"GCAT\", \"ATGC\"))]\n```", "```py\n>>> [pos + 1 for pos, pair in enumerate(pairs) if pair[0] == pair[1]]\n[5, 7, 17, 18, 21]\n```", "```py\n$ pytest -v common.py\n============================= test session starts ==============================\n...\n\ncommon.py::test_fst PASSED                                               [ 33%]\ncommon.py::test_snd PASSED                                               [ 66%]\ncommon.py::test_find_kmers PASSED                                        [100%]\n\n============================== 3 passed in 0.01s ===============================\n```", "```py\n>>> from common import fst, snd\n>>> [pos + 1 for pos, pair in enumerate(pairs) if fst(pair) == snd(pair)]\n[5, 7, 17, 18, 21]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for rec in SeqIO.parse(args.file, 'fasta'): ![1](assets/1.png)\n        for k in range(4, 13): ![2](assets/2.png)\n            kmers = find_kmers(str(rec.seq), k) ![3](assets/3.png)\n            revc = list(map(Seq.reverse_complement, kmers)) ![4](assets/4.png)\n\n            for pos, pair in enumerate(zip(kmers, revc)): ![5](assets/5.png)\n                if fst(pair) == snd(pair): ![6](assets/6.png)\n                    print(pos + 1, k) ![7](assets/7.png)\n```", "```py\nfor pos, pair in enumerate(zip(kmers, revc)):\n    if operator.eq(*pair): ![1](assets/1.png)\n        print(pos + 1, k)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        for k in range(4, 13):\n            kmers = find_kmers(str(rec.seq), k)\n            revc = map(Seq.reverse_complement, kmers)\n            pairs = enumerate(zip(kmers, revc))\n\n            for pos in [pos + 1 for pos, pair in pairs if operator.eq(*pair)]: ![1](assets/1.png)\n                print(pos, k)\n```", "```py\ndef revp(seq: str, k: int) -> List[int]: ![1](assets/1.png)\n    \"\"\" Return positions of reverse palindromes \"\"\"\n\n    return [] ![2](assets/2.png)\n```", "```py\ndef test_revp() -> None:\n    \"\"\" Test revp \"\"\"\n\n    assert revp('CGCATGCATTGA', 4) == [3, 5]\n    assert revp('CGCATGCATTGA', 5) == []\n    assert revp('CGCATGCATTGA', 6) == [2, 4]\n    assert revp('CGCATGCATTGA', 7) == []\n    assert revp('CCCGCATGCATT', 4) == [5, 7]\n    assert revp('CCCGCATGCATT', 5) == []\n    assert revp('CCCGCATGCATT', 6) == [4, 6]\n```", "```py\ndef revp(seq: str, k: int) -> List[int]:\n    \"\"\" Return positions of reverse palindromes \"\"\"\n\n    kmers = find_kmers(seq, k)\n    revc = map(Seq.reverse_complement, kmers)\n    pairs = enumerate(zip(kmers, revc))\n    return [pos + 1 for pos, pair in pairs if operator.eq(*pair)]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        for k in range(4, 13): ![1](assets/1.png)\n            for pos in revp(str(rec.seq), k): ![2](assets/2.png)\n                print(pos, k) ![3](assets/3.png)\n```", "```py\nfor k, pos in [(k, pos) for k in range(4, 13) for pos in revp(seq, k)]: ![1](assets/1.png)\n    print(pos, k)\n```", "```py\n$ ls tests/inputs/\n1.fa          2.fa          empty.fa\n1.fa.out      2.fa.out      empty.fa.out\n```", "```py\n$ cat tests/inputs/1.fa\n>Rosalind_24\nTCAATGCATGCGGGTCTATATGCAT\n```", "```py\n$ cat tests/inputs/1.fa.out\n5 4\n7 4\n17 4\n18 4\n21 4\n4 6\n6 6\n20 6\n```", "```py\ndef run(file: str) -> None: ![1](assets/1.png)\n    \"\"\" Run the test \"\"\"\n\n    expected_file = file + '.out' ![2](assets/2.png)\n    assert os.path.isfile(expected_file) ![3](assets/3.png)\n\n    rv, out = getstatusoutput(f'{PRG} {file}') ![4](assets/4.png)\n    assert rv == 0 ![5](assets/5.png)\n\n    expected = set(open(expected_file).read().splitlines()) ![6](assets/6.png)\n    assert set(out.splitlines()) == expected ![7](assets/7.png)\n```", "```py\ndef test_ok1() -> None:\n    run(INPUT1)\n\ndef test_ok2() -> None:\n    run(INPUT2)\n\ndef test_mepty() -> None:\n    run(EMPTY)\n```"]