["```py\nIn [1]: %matplotlib inline\n        import numpy as np\n        import matplotlib.pyplot as plt\n        import seaborn as sns\n        plt.style.use('seaborn-whitegrid')\n```", "```py\nIn [2]: from sklearn.datasets import make_blobs\n        X, y = make_blobs(100, 2, centers=2, random_state=2, cluster_std=1.5)\n        plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='RdBu');\n```", "```py\nIn [3]: from sklearn.naive_bayes import GaussianNB\n        model = GaussianNB()\n        model.fit(X, y);\n```", "```py\nIn [4]: rng = np.random.RandomState(0)\n        Xnew = [-6, -14] + [14, 18] * rng.rand(2000, 2)\n        ynew = model.predict(Xnew)\n```", "```py\nIn [5]: plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='RdBu')\n        lim = plt.axis()\n        plt.scatter(Xnew[:, 0], Xnew[:, 1], c=ynew, s=20, cmap='RdBu', alpha=0.1)\n        plt.axis(lim);\n```", "```py\nIn [6]: yprob = model.predict_proba(Xnew)\n        yprob[-8:].round(2)\nOut[6]: array([[0.89, 0.11],\n               [1.  , 0.  ],\n               [1.  , 0.  ],\n               [1.  , 0.  ],\n               [1.  , 0.  ],\n               [1.  , 0.  ],\n               [0.  , 1.  ],\n               [0.15, 0.85]])\n```", "```py\nIn [7]: from sklearn.datasets import fetch_20newsgroups\n\n        data = fetch_20newsgroups()\n        data.target_names\nOut[7]: ['alt.atheism',\n         'comp.graphics',\n         'comp.os.ms-windows.misc',\n         'comp.sys.ibm.pc.hardware',\n         'comp.sys.mac.hardware',\n         'comp.windows.x',\n         'misc.forsale',\n         'rec.autos',\n         'rec.motorcycles',\n         'rec.sport.baseball',\n         'rec.sport.hockey',\n         'sci.crypt',\n         'sci.electronics',\n         'sci.med',\n         'sci.space',\n         'soc.religion.christian',\n         'talk.politics.guns',\n         'talk.politics.mideast',\n         'talk.politics.misc',\n         'talk.religion.misc']\n```", "```py\nIn [8]: categories = ['talk.religion.misc', 'soc.religion.christian',\n                      'sci.space', 'comp.graphics']\n        train = fetch_20newsgroups(subset='train', categories=categories)\n        test = fetch_20newsgroups(subset='test', categories=categories)\n```", "```py\nIn [9]: print(train.data[5][48:])\nOut[9]: Subject: Federal Hearing\n        Originator: dmcgee@uluhe\n        Organization: School of Ocean and Earth Science and Technology\n        Distribution: usa\n        Lines: 10\n\n        Fact or rumor....?  Madalyn Murray O'Hare an atheist who eliminated the\n        use of the bible reading and prayer in public schools 15 years ago is now\n        going to appear before the FCC with a petition to stop the reading of the\n        Gospel on the airways of America.  And she is also campaigning to remove\n        Christmas programs, songs, etc from the public schools.  If it is true\n        then mail to Federal Communications Commission 1919 H Street Washington DC\n        20054 expressing your opposition to her request.  Reference Petition number\n\n        2493.\n```", "```py\nIn [10]: from sklearn.feature_extraction.text import TfidfVectorizer\n         from sklearn.naive_bayes import MultinomialNB\n         from sklearn.pipeline import make_pipeline\n\n         model = make_pipeline(TfidfVectorizer(), MultinomialNB())\n```", "```py\nIn [11]: model.fit(train.data, train.target)\n         labels = model.predict(test.data)\n```", "```py\nIn [12]: from sklearn.metrics import confusion_matrix\n         mat = confusion_matrix(test.target, labels)\n         sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,\n                     xticklabels=train.target_names, yticklabels=train.target_names,\n                     cmap='Blues')\n         plt.xlabel('true label')\n         plt.ylabel('predicted label');\n```", "```py\nIn [13]: def predict_category(s, train=train, model=model):\n             pred = model.predict([s])\n             return train.target_names[pred[0]]\n```", "```py\nIn [14]: predict_category('sending a payload to the ISS')\nOut[14]: 'sci.space'\n```", "```py\nIn [15]: predict_category('discussing the existence of God')\nOut[15]: 'soc.religion.christian'\n```", "```py\nIn [16]: predict_category('determining the screen resolution')\nOut[16]: 'comp.graphics'\n```"]