- en: Chapter 9\. Exploring the Geospatial Data Abstraction Library (GDAL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No discussion of open source platforms and libraries would be complete without
    an introduction to the [Geospatial Data Abstraction Library (GDAL)](https://gdal.org),
    a resource for efficiently processing raster and vector geospatial data. Working
    with both raster and vector data requires a collection of tools, and GDAL operates
    under the hood of many of the programs you’ve used in this book, including ArcGIS,
    QGIS, and Google Earth. When relying on the programmatic ease of a graphical user
    interface, it is often easy to forget the complexity of combining diverse data
    types and formats in order to work efficiently with a unified data model. This
    is why GDAL is an important tool. It simplifies working with geospatial data across
    a wide range of formats and spatial reference systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll work with rasters and look at how to use the Spyder
    IDE to work with GDAL, including how to change your map projection with the `warp`
    function, work with raster bands, transform files, and create binary masks. We’ll
    also do a quick orientation to three other useful resources for datasets to explore
    with GDAL: EarthExplorer, Copernicus Open Access Hub, and Google Earth Engine
    (GEE).'
  prefs: []
  type: TYPE_NORMAL
- en: First, I’ll show you how to use the command line interface, also known as the
    *terminal,* to quickly read, transform, and reproject your geospatial data. Why
    the command line? If you’re working with multiple files that require the same
    functions, you don’t have to go through them one by one manually, attempting to
    recall the necessary steps and processes while working in QGIS or ArcGIS. Using
    the command line, you can save a simple line of code as a script that you can
    use to process a wide variety of files and datasets. These scripts also run in
    QGIS, as you’ll see a little later on in the chapter. While working in the command
    line, I recommend viewing the results in QGIS, or you can refer to the Spyder
    IDE section once you are comfortable with working in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Second, I’ll show you how to work with GDAL using an IDE, a tool that consolidates
    programming and application development. Many beginner Python courses are taught
    within IDEs, so if you have some background in Python programming, you may be
    familiar with at least one IDE. There are many IDEs for Python, but in this chapter
    we’ll use one called Spyder. IDEs like Spyder simplify working with and writing
    code, thanks to features like real-time code introspection (which lets you see
    directly how the functions and classes are executed and what information they
    contain), in-line graphics displayed with matplotlib, and my favorite, the *variable
    explorer,* which provides built-in support for editing and visualizing the objects
    in your code. IDEs look the same regardless of the operating system you are using,
    which is handy when your end users are accessing different workflows and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up GDAL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Historically, the library was referred to as *GDAL/OGR*, with GDAL being the
    raster side and OpenGIS Simple Features Reference Implementation (OGR) the vector
    side of the library. The combined libraries are now commonly referred to as *GDAL*.
    I know there are many data scientists working almost exclusively at the command
    line, so I want to quickly demonstrate how this is accomplished. For me, working
    at the command line made it easier to become familiar with the syntax of calling
    functions in GDAL. Its classes and functions are a little different than those
    you know from Python, although the syntax will be familiar when you engage with
    the Python API. GDAL maintains bindings for Python, but this will differ from
    how you have been working with Python libraries thus far. Even with Python bindings,
    you will need to know how to call GDAL functions and understand what they do.^([1](ch09.xhtml#ch01fn12))
    We’ll then get back to Python in the section on working with the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Spyder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spyder IDE is written entirely in Python. It is best known for being used
    by data scientists, data analysts, and data engineers. Its features include autocompletion
    and real-time analysis. Let’s install it first.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend creating a new environment for the Spyder installation. Installing
    GDAL into an existing environment is also possible; you can enter `**conda env
    list**` to see what environments you already have. You will need to add NumPy
    and matplotlib as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Spyder and GDAL in the same environment and directory, substituting
    your own filepath for mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve installed Spyder, you can launch it by writing `**spyder**` into
    the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GDAL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll also install GDAL at the command line. Open the terminal and run the
    following command at the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if the installation was successful, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You might have to set the path to your installation folder to access it from
    the terminal. The steps on how you can do this will follow. I also recommend reviewing
    the [GDAL documentation](https://oreil.ly/ye9fu).
  prefs: []
  type: TYPE_NORMAL
- en: Working with GDAL at the Command Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today, the average computer user works mostly in a GUI: a layer of graphics
    that makes it easier to visualize files and perform tasks. But the command line
    has its advantages, including faster processing. There’s no need to load a bunch
    of files, and if you want to repeat an analysis on different datasets, you can
    save small shell scripts to perform repeated actions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate your preferred environment, conda activate `minimal_ds`, or the Spyder
    environment you just created for working with GDAL. I would like to work with
    files in my TIFFs folder so I have entered `cd` to make that my current directory.
    You can now see TIFFs added as my working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To move between different directories, use `ls/` to dig deeper into your directory
    structure. For example, if you want to work with your Downloads folder (assuming
    it isn’t your current directory), use the following code to explore a folder within
    your Downloads directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Spend a little time moving in and out of directories, as understanding the structure
    is the most important lesson for working in the terminal with the GDAL package.
    Again, you will need to understand the structure when accessing packages, libraries,
    and files in the Spyder IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are in the correct directory, you will see the directory name after
    the colon and right before your username. This will output a list of the files
    in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I have included a section on resources for creating your own files using [GEE](https://oreil.ly/6dRtp)
    for following along. [Copernicus Open Access Hub](https://oreil.ly/Z8FSL) and
    [EarthExplorer](https://oreil.ly/WvlrA) are also sources of raster data but are
    often rendered slowly due to the sizes of larger files.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your installation is working, you are ready to learn a few commands
    to help you get started. Here is the [GDAL documentation](https://oreil.ly/ye9fu)
    to help you through any lingering problems with the downloading and installation.
  prefs: []
  type: TYPE_NORMAL
- en: Editing Your Data with GDAL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `gdalinfo` command line parameters demonstrate the information available
    to you about your raster dataset. You can see the parameters by using the command
    `gdalinfo` and supplying the name of a file within the active directory. Enter
    this code in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example I’ve selected a saved file from a GEE data snippet. You can
    learn more about the command line parameters in the [documentation](https://oreil.ly/lu9Z0).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code, substituting the name of your *.tif* file in your
    directory (notice that parentheses are not needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a snippet of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can see from the second line that the format of the saved file is GTiff/GeoTIFF.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To see a list of other formats, enter `gdal_translate --formats` in the command
    line. You can also see the size of the file, coordinate system, pixel size, and
    coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a section of the output that shows information about the color bands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice the color interpretation of the bands in the Sentinel satellite data.
    They are set as `Gray` for B2 and `ColorInterp=Undefined` for the remaining two
    bands. Because the metadata was not downloaded, you’ll need to help GDAL interpret
    these bands.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is [Sentinel 2 data](https://oreil.ly/mO6iH), you know that the bands
    are blue (B2), green (B3), and red (B4). You’re going to edit the dataset right
    in place, using the command `gdal_edit.py`, followed by the options (such as `colorinterp`),
    and finally the value (here, the color value of the band). The last step is to
    provide the input file, *Sentinel2_RGB20200501.tif:*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If your function requires an output file, you will also add *output.tif*. Only
    the input file is needed here.
  prefs: []
  type: TYPE_NORMAL
- en: When you rerun `gdalinfo Sentinel2_RGB20200501.tif`, you will see that the color
    bands have been updated and now show as blue, green, and red.
  prefs: []
  type: TYPE_NORMAL
- en: The Warp Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also change the raster projection by learning to use the `gdal_warp`
    function. (Once you’re familiar with the `warp` function, you can use it to learn
    other common functions; to explore them, I recommend starting with the GDAL documentation
    for the [Python API](https://oreil.ly/AKsHX).)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, the argument `-t_srs` specifies the coordinate system
    you are targeting. Every geographic coordinate system, for example, is assigned
    a unique EPSG code. Where the `*xxxxx*` appears, enter the EPSG code you would
    like to change to. The input is the raster file, and the output is the renamed
    modified file, shown here as *output_rd.tif*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Your output will demonstrate the new projection.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing Input Raster Bands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, you’ll use the command line with GDAL to capture image statistics for
    the projected bands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'An excerpt from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Why would you capture input raster bands for statistical analyses? Mostly for
    classification: to identify clusters when looking at different locations. For
    example, band characteristics help define whether you are observing vegetation,
    a body of water, or perhaps a residential area.'
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned earlier in the chapter that GDAL runs under the hood in QGIS as
    well as in a wide variety of other programs. [Figure 9-1](#gdalinfo_displayed_in_qgis)
    demonstrates the code running within the QGIS platform, uploading your *.tif*
    file(s), and selecting raster information.
  prefs: []
  type: TYPE_NORMAL
- en: '![gdalinfo displayed in QGIS](assets/pgda_0901.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-1\. `gdalinfo` displayed in QGIS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that you have a taste of working with GDAL in the command line, I encourage
    you to explore more of the tasks available. These skills are useful for working
    with and editing some of the core algorithms of geospatial data and applications.
    The ability to transform data across platforms and diverse formats is important,
    especially when you’re working with a wide variety of vector and raster data formats.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will work with GDAL integrated with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the GDAL Library in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you launch Spyder (again, by typing `**spyder**` into the terminal), the
    Spyder console will open in a new browser window, as seen in [Figure 9-2](#the_spyder_console),
    except it will be blank.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Spyder console](assets/pgda_0902.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-2\. The Spyder console
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Getting Oriented in Spyder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the left side of [Figure 9-2](#the_spyder_console) is Spyder’s script editor
    where you create and open files. (You can arrange the panels and consoles however
    you like.) The two consoles on the right are where you can explore the variables
    you generate and locate files. The panel that shows the images is the plots pane.
    You can write simple code in the bottom console. For help, select the Help tab
    in the upper window.
  prefs: []
  type: TYPE_NORMAL
- en: You can run code in the Python console or from the Editor. You can also use
    the Python console to control Spyder’s debugger. The images and figures you generate
    will be visible in the plots plane or embedded in the console.
  prefs: []
  type: TYPE_NORMAL
- en: The variable explorer, shown in the top right pane in [Figure 9-2](#the_spyder_console),
    is one of my favorite reasons for working in an IDE. These are the objects generated
    when you run your code. Click on a variable to explore it in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Each console window also has a “hamburger” icon, or ☰, which expands into a
    menu ([Figure 9-3](#working_in_console_directories)) where you can find additional
    information about the pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working in console directories](assets/pgda_0903.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-3\. Working in console directories
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These options are customizable. I suggest heading over to the [Spyder website](https://oreil.ly/SGOgy)
    for details about the interface as well as to explore all of the available panes.
    If you would like to try Spyder before installing, there is also a [Binder option](https://mybinder.org)
    that runs in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Although it’s not necessary, I like to start a new project when working in Spyder,
    as demonstrated in [Figure 9-4](#creating_a_new_project_in_spyder). This simplifies
    returning to your prior files, regardless of your current working directory. The
    project pane will also become visible. It reminds me of the ease of QGIS, since
    the files are easily within reach.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project in Spyder](assets/pgda_0904.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-4\. Creating a new project in Spyder
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Project pane can also integrate with Git for version control. Explore the
    [Spyder file documentation to learn](https://oreil.ly/8M3ZI) how to set up the
    functionality with your repository.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Your Data in Spyder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’re just a few lines of code away from exploring your raster data within
    an IDE. The first step is to import the necessary packages: GDAL, NumPY, and matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: NumPY will manipulate the array you are creating from the raster file, and matplotlib
    will allow you to view the file. The raster programs you can explore are included
    in the [GDAL documentation](https://oreil.ly/rxgLu).
  prefs: []
  type: TYPE_NORMAL
- en: '*Utility scripts* belong to a *utility class*, which is a collection of related
    methods available across the application. The Python utility scripts are located
    inside the `osgeo_utils.samples` submodule shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you are not sure where to find *.tif* files, skip ahead to [“Exploring Open
    Source Raster Files”](#exploring_open_source_raster_files), where I will review
    how to find raster files to explore. These are simple digital elevation models
    (DEMs), where each point or pixel has an elevation value. Typically, these are
    represented as DEM *.tif* files. If you’ve been exploring as you work through
    this book, your Downloads folder probably harbors quite a few by now.
  prefs: []
  type: TYPE_NORMAL
- en: The code scripts you will be writing into the editor are explained in the text;
    additional information is available from the [GDAL Python API](https://oreil.ly/lHQri).
  prefs: []
  type: TYPE_NORMAL
- en: You can call your variable anything, but for simplicity I am using `ds` to represent
    the dataset. After importing your *.tif* file and creating the variable `ds`,
    you will see the variable populate in the variable explorer. The format of the
    `ds` file is `gdal.Dataset`.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming Files in GDAL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to transform your *.tif* file from the table format that you see
    in [Figure 9-6](#the_projection_of_the_bandscomma_as_rea) to geographic coordinates,
    so next you’ll define `gt`, the geotransform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The six coefficients in [Figure 9-5](#geotransforms_to_georeferenced_coordina),
    read from top to bottom, correspond to:'
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: The *x*-coordinate of the upper-left corner of the upper-left pixel (262846.525725)
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: Pixel resolution, west to east (25.0)
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: Row rotation (usually 0)
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  prefs: []
  type: TYPE_NORMAL
- en: The *y*-coordinate of the upper-left corner of the upper-left pixel (4464275.0)
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  prefs: []
  type: TYPE_NORMAL
- en: Column rotation (again, usually 0)
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  prefs: []
  type: TYPE_NORMAL
- en: The northwest pixel resolution and height (usually negative for a north-up image),
    -25.0
  prefs: []
  type: TYPE_NORMAL
- en: '![Geotransforms to georeferenced coordinates](assets/pgda_0905.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-5\. Geotransforms to georeferenced coordinates
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The projection information is visible in the variable explorer ([Figure 9-2](#the_spyder_console))
    but is shown larger in [Figure 9-6](#the_projection_of_the_bandscomma_as_rea).
    In the Universal Transverse Mercator (UTM), the projection is UTM zone 30 N; the
    EPSG code is EPSG:32630.
  prefs: []
  type: TYPE_NORMAL
- en: '![The projection of the bands, as read by GDAL](assets/pgda_0906.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-6\. The projection of the bands, as read by GDAL
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`GetRasterBand` fetches the bands into the dataset. To determine how many bands
    you have, write into the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs: `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the number of bands into the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Exploring the array variable, you can see that Python has read the GDAL file
    into a NumPY array. The array shares elevations from our DEM, as shown in [Figure 9-7](#numpy_object_array_of_dem_dottif_file).
  prefs: []
  type: TYPE_NORMAL
- en: '![NumPY object array of DEM .tif file](assets/pgda_0907.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-7\. NumPY object array of DEM .tif file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using the Binmask in GDAL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Masking* is useful for clipping boundaries or values to a specific range.
    A *binary mask* (often called *binmask)* is a tool that filters out elevation
    values above or below a certain number (for instance, if you want to look only
    at locations that are below sea level). If you want to save everything that is
    equal to or larger than the mean, you will assign it a value of 1; otherwise,
    it will be a 0\. The output is shown in [Figure 9-8](#binary_mask_output). The
    dark values are at lower elevation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `binmask` variable in the code refers to the NumPy (`np`) function that
    returns the elements in the array based on a condition, such as the `mean`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To save this data as a GeoTIFF file, you will need a GDAL driver to support
    your chosen raster file format. You can view the long list of different drivers
    available, including for GeoTIFF, in the [GDAL documentation](https://oreil.ly/MCFi9).
    To get the shape of your binmask, you only need to register the driver and run
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This outputs (410, 601).
  prefs: []
  type: TYPE_NORMAL
- en: '![Binary mask output](assets/pgda_0908.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-8\. Binary mask output
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Recall how to use the `index` function in Python. The binmask shape is 410
    rows and 601 columns. In the following code snippet, `xsize` refers to the number
    of columns. You call columns by index, in this case as `[1]`, to get a count (in
    this case, 601). You can do the same with `ysize` and the index `[0]` to grab
    the number of rows (in this case, 410):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`gdalconst` defines the data type in the image. Since you are defining the
    shape of the binmask with `0` and `1`, you need to set the value as an integer,
    which you’ll do using `gdal.GDT_Int16`. Now you only need to print the datatype
    property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is another geotransform. The settings can stay the same since
    you didn’t change anything. Once you close the files, they will be available for
    you to use. If you forget, you will not be able to use them. You also don’t need
    to read the array, since you haven’t stored it anywhere yet. `WriteArray(binmask)`
    will provide the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To recap, you’ve identified and generated an image from a DEM and converted
    the output to a GeoTIFF file. The raster image is saved along with any information
    or metadata about the image’s location on the Earth’s surface at the pixel level.
  prefs: []
  type: TYPE_NORMAL
- en: The Complete Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the code in its entirety; uncomment the print option when you want
    to view the figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Exploring Open Source Raster Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The open source geospatial community has a huge arsenal of [publicly available
    datasets](https://oreil.ly/GIbyH) to continue your learning and fuel current and
    future projects. This book is intended to be a living resource that invites additional
    learning and skill development. So in the next few sections, I’ll provide the
    basics you need to get started with exploring some of these resources, rather
    than full exercises. The goal is to get you to a point where you can start exploring
    for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: USGS EarthExplorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The USGS hosts one of the largest free repositories of satellite and aerial
    imagery data, called EarthExplorer.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to register for a free account at [EarthExplorer](https://oreil.ly/WvlrA).
    If you have a compressed ZIP file that includes a shapefile (*.shp*), you can
    upload it using the KML/Shapefile Upload button in the upper left corner. Free
    open source data resources often offer the option to download a zipped shapefile.
    All of the accompanying files must be uploaded along with the shapefile.
  prefs: []
  type: TYPE_NORMAL
- en: To work with EarthExplorer, you can upload a shapefile you want to work with.
    [Figure 9-9](#uploading_a_shapefile_to_earthexplorer) shows a file I uploaded
    called “Bodega Marine Laboratory and Reserve.” When I draw a polygon (shown in
    red) around the area I want to look at, I can download the GeoTiff file. You can
    change the coordinates to reshape the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading a shapefile to EarthExplorer](assets/pgda_0909.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-9\. Uploading a shapefile to EarthExplorer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In addition to uploading a shapefile, there are a few other ways to create
    an image:'
  prefs: []
  type: TYPE_NORMAL
- en: Zoom to an area you wish to explore and draw a polygon or circle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for an address ([Figure 9-10](#searching_for_satellite_images_in_your))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click the map and select the Use Map button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a date range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also enter a date range or a cloud cover range in the menu shown in
    [Figure 9-10](#searching_for_satellite_images_in_your). For this exercise, use
    the method of your choice to follow me to the Bodega Marine Laboratory and Reserve.
    Enter the location into the search criteria.
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching for satellite images in your region of interest](assets/pgda_0910.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-10\. Searching for satellite images in your region of interest
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once you’re at the Bodega Marine Laboratory and Reserve, select Digital Elevation
    Data and then SRTM Void Filled, as shown in [Figure 9-11](#digital_elevation_srtm_data_in_earthexp).
    *SRTM* stands for Shuttle Radar Topography Mission. Void-filled SRTMs have additional
    processing to fill in missing data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/pgda_0911.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-11\. Digital elevation SRTM data in EarthExplorer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If there are any images that meet your criteria, they will load as search results
    ([Figure 9-12](#search_results_in_earthexplorer)). Once you adjust your parameters,
    you will see thumbnails of the datasets. Find the best dataset for your needs
    and download the GeoTIFF. Save it to the folder within your working directory
    or use the absolute (complete) filepath to upload it into your Spyder console.^([2](ch09.xhtml#ch01fn13))
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/pgda_0912.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-12\. Search results in EarthExplorer
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Copernicus Open Access Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next data resource I want to show you is [Copernicus Open Access Hub](https://oreil.ly/WR178).
    You’ll access it similarly to how you accessed EarthExplorer, navigating the settings
    within a dashboard. While Copernicus’s interface is perhaps less intuitive than
    EarthExplorer’s, it offers some great data. Try searching for Sentinel satellite
    data ([Figure 9-13](#copernicus_open_access_hub_sentinel_dat)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Copernicus Open Access Hub Sentinel data](assets/pgda_0913.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-13\. Copernicus Open Access Hub Sentinel data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Google Earth Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You learned about GEE in [Chapter 8](ch08.xhtml#data_cleaning), so here I’ll
    just briefly touch on how to use it with GDAL. GEE data is available in the cloud
    on a planetary scale, so you don’t have to download it. You can even use functions
    such as clipping satellite data.
  prefs: []
  type: TYPE_NORMAL
- en: Run search for GEE DEM files. Find Earth Engine snippet *ee.Image(“USGS/sDEP/10m”)*,
    shown in [Figure 9-14](#gee_catalog_of_dem_files). You can copy the JavaScript
    code and paste it into the GEE console.
  prefs: []
  type: TYPE_NORMAL
- en: '![GEE catalog of DEM files](assets/pgda_0914.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-14\. GEE catalog of DEM files
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the GEE console, select Run. This will generate the map shown in [Figure 9-15](#google_earth_engine_dem_dottif_file).
    You can select a polygon and create a geometry import. The layers panel will allow
    you to change the opacity of a layer or toggle layer displays on and off. Simply
    save the file as a GeoTIFF, and you have another option for a DEM file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Earth Engine DEM .tif file](assets/pgda_0915.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9-15\. Google Earth Engine DEM .tif file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: GDAL can be complex, but it’s worth learning how to use this resource library
    to extend your geospatial skills.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have observed how to work in both a terminal and an IDE, both useful in
    their own respects specific to personal preference and often accessibility. These
    skills highlight the utility of both options as well as a powerful interface relied
    on by cross-platform applications in both the enterprise (Esri) and open source
    communities.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, when working with geospatial data and a broad array of available tools,
    especially in the open source community, it is important to read the user documentation
    to grow your skills and your ability to interact with your data. Don’t hesitate
    to reach out to the community with questions or insights.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch09.xhtml#ch01fn12-marker)) You may recall that *bindings* are libraries
    that bridge two programming languages so that a library written for one language
    can be used in another.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch09.xhtml#ch01fn13-marker)) The *relative filepath* is the path relative
    to your current working directory; the *absolute filepath* is the path provided
    from your root directory.
  prefs: []
  type: TYPE_NORMAL
