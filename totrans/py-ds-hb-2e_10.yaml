- en: 'Chapter 8\. Computation on Arrays: Broadcasting'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章\. 数组上的计算：广播
- en: 'We saw in [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)
    how NumPy’s universal functions can be used to *vectorize* operations and thereby
    remove slow Python loops. This chapter discusses *broadcasting*: a set of rules
    by which NumPy lets you apply binary operations (e.g., addition, subtraction,
    multiplication, etc.) between arrays of different sizes and shapes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 6 章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)看到 NumPy 的通用函数如何用于*向量化*操作，从而消除缓慢的
    Python 循环。本章讨论*广播*：这是 NumPy 允许你在不同大小和形状的数组之间应用二元操作（如加法、减法、乘法等）的一组规则。
- en: Introducing Broadcasting
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入广播
- en: 'Recall that for arrays of the same size, binary operations are performed on
    an element-by-element basis:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对于相同大小的数组，二元操作是逐元素执行的：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Broadcasting allows these types of binary operations to be performed on arrays
    of different sizes—for example, we can just as easily add a scalar (think of it
    as a zero-dimensional array) to an array:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 广播允许在不同大小的数组上执行这些类型的二元操作，例如，我们可以很容易地将标量（将其视为零维数组）加到数组中：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can think of this as an operation that stretches or duplicates the value
    `5` into the array `[5, 5, 5]`, and adds the results.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其视为一种操作，将值`5`拉伸或复制到数组`[5, 5, 5]`中，并添加结果。
- en: 'We can similarly extend this idea to arrays of higher dimension. Observe the
    result when we add a one-dimensional array to a two-dimensional array:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以类似地将这个想法扩展到更高维度的数组。观察当我们将一个一维数组加到一个二维数组时的结果：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here the one-dimensional array `a` is stretched, or broadcasted, across the
    second dimension in order to match the shape of `M`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，一维数组`a`通过第二个维度被拉伸或广播，以匹配`M`的形状。
- en: 'While these examples are relatively easy to understand, more complicated cases
    can involve broadcasting of both arrays. Consider the following example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些示例相对容易理解，但更复杂的情况可能涉及广播两个数组。考虑以下例子：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just as before we stretched or broadcasted one value to match the shape of the
    other, here we’ve stretched *both* `a` and `b` to match a common shape, and the
    result is a two-dimensional array! The geometry of these examples is visualized
    in [Figure 8-1](#fig_images_in_0205-broadcasting).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前我们将一个值拉伸或广播到另一个形状相匹配的数组一样，这里我们拉伸了`a`和`b`，使它们匹配一个公共形状，结果是一个二维数组！这些示例的几何形状在[图
    8-1](#fig_images_in_0205-broadcasting)中可视化。
- en: 'The light boxes represent the broadcasted values. This way of thinking about
    broadcasting may raise questions about its efficiency in terms of memory use,
    but worry not: NumPy broadcasting does not actually copy the broadcasted values
    in memory. Still, this can be a useful mental model as we think about broadcasting.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 浅色框表示广播的值。这种关于广播的思考方式可能会引发关于其内存使用效率的疑问，但不用担心：NumPy 广播实际上不会在内存中复制广播的值。尽管如此，这种思维模型在我们思考广播时仍然很有用。
- en: '![02.05 broadcasting](assets/02.05-broadcasting.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![02.05 broadcasting](assets/02.05-broadcasting.png)'
- en: Figure 8-1\. Visualization of NumPy broadcasting (adapted from a source published
    in the [astroML documentation](http://astroml.org) and used with permission)^([1](ch08.xhtml#idm45858801111664))
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\. NumPy 广播可视化（改编自 [astroML 文档](http://astroml.org)，并获得许可使用）^([1](ch08.xhtml#idm45858801111664))
- en: Rules of Broadcasting
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Broadcasting 规则
- en: 'Broadcasting in NumPy follows a strict set of rules to determine the interaction
    between the two arrays:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 中的广播遵循一组严格的规则来确定两个数组之间的交互：
- en: Rule 1
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 1
- en: If the two arrays differ in their number of dimensions, the shape of the one
    with fewer dimensions is *padded* with ones on its leading (left) side.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数组在它们的维数上不同，维数较少的数组的形状将在其前导（左）侧填充`1`。
- en: Rule 2
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 2
- en: If the shape of the two arrays does not match in any dimension, the array with
    shape equal to 1 in that dimension is stretched to match the other shape.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个数组在任何维度上的形状不匹配，则具有在该维度上形状等于 1 的数组将被拉伸以匹配另一个形状。
- en: Rule 3
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 3
- en: If in any dimension the sizes disagree and neither is equal to 1, an error is
    raised.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何维度上大小不一致且都不等于 1，则会引发错误。
- en: To make these rules clear, let’s consider a few examples in detail.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清这些规则，让我们详细考虑几个例子。
- en: Broadcasting Example 1
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播示例 1
- en: 'Suppose we want to add a two-dimensional array to a one-dimensional array:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想将一个二维数组加到一个一维数组中：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s consider an operation on these two arrays, which have the following shapes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑对这两个具有以下形状的数组进行操作：
- en: '`M.shape` is `(2, 3)`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 是 `(2, 3)`'
- en: '`a.shape` is `(3,)`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 是 `(3,)`'
- en: 'We see by rule 1 that the array `a` has fewer dimensions, so we pad it on the
    left with ones:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到按照规则 1，数组 `a` 的维度较少，因此我们在左侧用 `1` 填充它：
- en: '`M.shape` remains `(2, 3)`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 仍然是 `(2, 3)`'
- en: '`a.shape` becomes `(1, 3)`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 变为 `(1, 3)`'
- en: 'By rule 2, we now see that the first dimension disagrees, so we stretch this
    dimension to match:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 根据规则 2，我们现在看到第一个维度不匹配，所以我们拉伸这个维度以匹配：
- en: '`M.shape` remains `(2, 3)`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 仍然是 `(2, 3)`'
- en: '`a.shape` becomes `(2, 3)`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 变为 `(2, 3)`'
- en: 'The shapes now match, and we see that the final shape will be `(2, 3)`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在形状匹配了，我们可以看到最终的形状将是 `(2, 3)`：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Broadcasting Example 2
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播示例 2
- en: 'Now let’s take a look at an example where both arrays need to be broadcast:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个需要广播两个数组的例子：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Again, we’ll start by determining the shapes of the arrays:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将确定数组的形状：
- en: '`a.shape` is `(3, 1)`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 是 `(3, 1)`'
- en: '`b.shape` is `(3,)`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b.shape` 是 `(3,)`'
- en: 'Rule 1 says we must pad the shape of `b` with ones:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 1 表示我们必须用 `1` 填充 `b` 的形状：
- en: '`a.shape` remains `(3, 1)`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 仍然是 `(3, 1)`'
- en: '`b.shape` becomes `(1, 3)`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b.shape` 变为 `(1, 3)`'
- en: 'And rule 2 tells us that we must upgrade each of these `1`s to match the corresponding
    size of the other array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 规则 2 告诉我们，我们必须将每个 `1` 扩展到与另一个数组的相应大小匹配：
- en: '`a.shape` becomes `(3, 3)`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 变为 `(3, 3)`'
- en: '`b.shape` becomes `(3, 3)`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b.shape` 变为 `(3, 3)`'
- en: 'Because the results match, these shapes are compatible. We can see this here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因为结果匹配，这些形状是兼容的。我们可以在这里看到：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Broadcasting Example 3
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 广播示例 3
- en: 'Next, let’s take a look at an example in which the two arrays are not compatible:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一个两个数组不兼容的例子：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is just a slightly different situation than in the first example: the
    matrix `M` is transposed. How does this affect the calculation? The shapes of
    the arrays are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是比第一个例子略有不同的情况：矩阵 `M` 被转置了。这对计算有什么影响？数组的形状如下：
- en: '`M.shape` is `(3, 2)`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 是 `(3, 2)`'
- en: '`a.shape` is `(3,)`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 是 `(3,)`'
- en: 'Again, rule 1 tells us that we must pad the shape of `a` with ones:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，规则 1 告诉我们，我们必须用 `1` 填充 `a` 的形状：
- en: '`M.shape` remains `(3, 2)`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 仍然是 `(3, 2)`'
- en: '`a.shape` becomes `(1, 3)`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 变为 `(1, 3)`'
- en: 'By rule 2, the first dimension of `a` is then stretched to match that of `M`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据规则 2，`a` 的第一个维度被拉伸以匹配 `M` 的维度：
- en: '`M.shape` remains `(3, 2)`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M.shape` 仍然是 `(3, 2)`'
- en: '`a.shape` becomes `(3, 3)`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a.shape` 变为 `(3, 3)`'
- en: 'Now we hit rule 3—the final shapes do not match, so these two arrays are incompatible,
    as we can observe by attempting this operation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们遇到了规则 3——最终的形状不匹配，所以这两个数组是不兼容的，我们可以通过尝试这个操作来观察：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note the potential confusion here: you could imagine making `a` and `M` compatible
    by, say, padding `a`’s shape with ones on the right rather than the left. But
    this is not how the broadcasting rules work! That sort of flexibility might be
    useful in some cases, but it would lead to potential areas of ambiguity. If right-side
    padding is what you’d like, you can do this explicitly by reshaping the array
    (we’ll use the `np.newaxis` keyword introduced in [Chapter 5](ch05.xhtml#section-0202-the-basics-of-numpy-arrays)
    for this):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里的潜在混淆：你可以想象通过在右侧而不是左侧用 `1` 填充 `a` 的形状来使 `a` 和 `M` 兼容。但这不是广播规则的工作方式！这种灵活性在某些情况下可能很有用，但它会导致潜在的歧义。如果你想要右侧填充，你可以通过显式地重新塑造数组来实现（我们将在[第
    5 章](ch05.xhtml#section-0202-the-basics-of-numpy-arrays)介绍 `np.newaxis` 关键字来实现这一点）：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'While we’ve been focusing on the `+` operator here, these broadcasting rules
    apply to *any* binary ufunc. For example, here is the `logaddexp(a, b)` function,
    which computes `log(exp(a) + exp(b))` with more precision than the naive approach:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在这里专注于 `+` 运算符，但这些广播规则适用于*任何*二元通用函数。例如，这是 `logaddexp(a, b)` 函数的示例，它计算 `log(exp(a)
    + exp(b))` 比朴素方法更精确：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For more information on the many available universal functions, refer to [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 欲知更多关于多个可用的通用函数的信息，请参阅[第 6 章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)。
- en: Broadcasting in Practice
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际广播应用
- en: Broadcasting operations form the core of many examples you’ll see throughout
    this book. We’ll now take a look at some instances of where they can be useful.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 广播操作是本书中许多示例的核心。现在让我们看看它们在哪些情况下可以派上用场。
- en: Centering an Array
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组居中
- en: 'In [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs), we saw
    that ufuncs allow a NumPy user to remove the need to explicitly write slow Python
    loops. Broadcasting extends this ability. One commonly seen example in data science
    is subtracting the row-wise mean from an array of data. Imagine we have an array
    of 10 observations, each of which consists of 3 values. Using the standard convention
    (see [Chapter 38](ch38.xhtml#section-0502-introducing-scikit-learn)), we’ll store
    this in a <math alttext="10 times 3"><mrow><mn>10</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)中，我们看到 ufunc 允许
    NumPy 用户避免显式编写缓慢的 Python 循环。广播扩展了这种能力。数据科学中经常见到的一个例子是从数据数组中减去逐行均值。假设我们有一个由 10
    个观测组成的数组，每个观测包含 3 个值。按照标准惯例（参见[第 38 章](ch38.xhtml#section-0502-introducing-scikit-learn)），我们将其存储在一个<math
    alttext="10 times 3"><mrow><mn>10</mn> <mo>×</mo> <mn>3</mn></mrow></math>数组中：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can compute the mean of each column using the `mean` aggregate across the
    first dimension:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用沿第一维度的 `mean` 聚合计算每列的均值：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And now we can center the `X` array by subtracting the mean (this is a broadcasting
    operation):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过减去均值来将 `X` 数组居中（这是一个广播操作）：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To double-check that we’ve done this correctly, we can check that the centered
    array has a mean near zero:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们做得正确，我们可以检查居中数组的平均值是否接近零：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To within machine precision, the mean is now zero.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 机器精度内，均值现在为零。
- en: Plotting a Two-Dimensional Function
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制二维函数
- en: 'One place that broadcasting often comes in handy is in displaying images based
    on two-dimensional functions. If we want to define a function <math alttext="z
    equals f left-parenthesis x comma y right-parenthesis"><mrow><mi>z</mi> <mo>=</mo>
    <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>,</mo> <mi>y</mi> <mo>)</mo></mrow></math>
    , broadcasting can be used to compute the function across the grid:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 广播经常派上用场的一个地方是基于二维函数显示图像。如果我们想定义一个函数<math alttext="z equals f left-parenthesis
    x comma y right-parenthesis"><mrow><mi>z</mi> <mo>=</mo> <mi>f</mi> <mo>(</mo>
    <mi>x</mi> <mo>,</mo> <mi>y</mi> <mo>)</mo></mrow></math>，可以使用广播来计算整个网格上的函数：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We’ll use Matplotlib to plot this two-dimensional array, shown in [Figure 8-2](#fig_0205-computation-on-arrays-broadcasting_files_in_output_52_0)
    (these tools will be discussed in full in [Chapter 28](ch28.xhtml#section-0404-density-and-contour-plots)):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Matplotlib 绘制这个二维数组，如[图 8-2](#fig_0205-computation-on-arrays-broadcasting_files_in_output_52_0)所示（这些工具将在[第 28 章](ch28.xhtml#section-0404-density-and-contour-plots)中全面讨论）：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![output 52 0](assets/output_52_0.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![output 52 0](assets/output_52_0.png)'
- en: Figure 8-2\. Visualization of a 2D array
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. 二维数组的可视化
- en: The result is a compelling visualization of the two-dimensional function.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是二维函数引人注目的可视化。
- en: ^([1](ch08.xhtml#idm45858801111664-marker)) Code to produce this plot can be
    found in the online [appendix](https://oreil.ly/gtOaU).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch08.xhtml#idm45858801111664-marker)) 生成此图的代码可在在线[附录](https://oreil.ly/gtOaU)中找到。
