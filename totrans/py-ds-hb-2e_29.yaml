- en: Chapter 25\. General Matplotlib Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the details of creating visualizations with Matplotlib,
    there are a few useful things you should know about using the package.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as we use the `np` shorthand for NumPy and the `pd` shorthand for Pandas,
    we will use some standard shorthands for Matplotlib imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `plt` interface is what we will use most often, as you shall see throughout
    this part of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `plt.style` directive to choose appropriate aesthetic styles
    for our figures. Here we will set the `classic` style, which ensures that the
    plots we create use the classic Matplotlib style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Throughout this chapter, we will adjust this style as needed. For more information
    on stylesheets, see [Chapter 34](ch34.xhtml#section-0411-settings-and-stylesheets).
  prefs: []
  type: TYPE_NORMAL
- en: show or No show? How to Display Your Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A visualization you can’t see won’t be of much use, but just how you view your
    Matplotlib plots depends on the context. The best use of Matplotlib differs depending
    on how you are using it; roughly, the three applicable contexts are using Matplotlib
    in a script, in an IPython terminal, or in a Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting from a Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using Matplotlib from within a script, the function `plt.show` is
    your friend. `plt.show` starts an event loop, looks for all currently active `Figure`
    objects, and opens one or more interactive windows that display your figure or
    figures.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, you may have a file called *myplot.py* containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then run this script from the command-line prompt, which will result
    in a window opening with your figure displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `plt.show` command does a lot under the hood, as it must interact with your
    system’s interactive graphical backend. The details of this operation can vary
    greatly from system to system and even installation to installation, but Matplotlib
    does its best to hide all these details from you.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to be aware of: the `plt.show` command should be used *only once*
    per Python session, and is most often seen at the very end of the script. Multiple
    `show` commands can lead to unpredictable backend-dependent behavior, and should
    mostly be avoided.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting from an IPython Shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Matplotlib also works seamlessly within an IPython shell (see [Part I](part01.xhtml#section-0100-ipython-beyond-normal-python)).
    IPython is built to work well with Matplotlib if you specify Matplotlib mode.
    To enable this mode, you can use the `%matplotlib` magic command after starting
    `ipython`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, any `plt` plot command will cause a figure window to open, and
    further commands can be run to update the plot. Some changes (such as modifying
    properties of lines that are already drawn) will not draw automatically: to force
    an update, use `plt.draw`. Using `plt.show` in IPython’s Matplotlib mode is not
    required.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting from a Jupyter Notebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jupyter notebook is a browser-based interactive data analysis tool that
    can combine narrative, code, graphics, HTML elements, and much more into a single
    executable document (see [Part I](part01.xhtml#section-0100-ipython-beyond-normal-python)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting interactively within a Jupyter notebook can be done with the `%matplotlib`
    command, and works in a similar way to the IPython shell. You also have the option
    of embedding graphics directly in the notebook, with two possible options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%matplotlib inline` will lead to *static* images of your plot embedded in
    the notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%matplotlib notebook` will lead to *interactive* plots embedded within the
    notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this book, we will generally stick with the default, with figures rendered
    as static images (see [Figure 25-1](#fig_0400-introduction-to-matplotlib_files_in_output_15_0)
    for the result of this basic plotting example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 15 0](assets/output_15_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-1\. Basic plotting example
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Saving Figures to File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One nice feature of Matplotlib is the ability to save figures in a wide variety
    of formats. Saving a figure can be done using the `savefig` command. For example,
    to save the previous figure as a PNG file, we can run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a file called *my_figure.png* in the current working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To confirm that it contains what we think it contains, let’s use the IPython
    `Image` object to display the contents of this file (see [Figure 25-2](#fig_0400-introduction-to-matplotlib_files_in_output_21_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 21 0](assets/output_21_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-2\. PNG rendering of the basic plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In `savefig`, the file format is inferred from the extension of the given filename.
    Depending on what backends you have installed, many different file formats are
    available. The list of supported file types can be found for your system by using
    the following method of the figure canvas object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that when saving your figure, it is not necessary to use `plt.show` or
    related commands discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Two Interfaces for the Price of One
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A potentially confusing feature of Matplotlib is its dual interfaces: a convenient
    MATLAB-style state-based interface, and a more powerful object-oriented interface.
    I’ll quickly highlight the differences between the two here.'
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB-style Interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Matplotlib was originally conceived as a Python alternative for MATLAB users,
    and much of its syntax reflects that fact. The MATLAB-style tools are contained
    in the `pyplot` (`plt`) interface. For example, the following code will probably
    look quite familiar to MATLAB users ([Figure 25-3](#fig_0400-introduction-to-matplotlib_files_in_output_27_0)
    shows the result).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![output 27 0](assets/output_27_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-3\. Subplots using the MATLAB-style interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It is important to recognize that this interface is *stateful*: it keeps track
    of the “current” figure and axes, which are where all `plt` commands are applied.
    You can get a reference to these using the `plt.gcf` (get current figure) and
    `plt.gca` (get current axes) routines.'
  prefs: []
  type: TYPE_NORMAL
- en: While this stateful interface is fast and convenient for simple plots, it is
    easy to run into problems. For example, once the second panel is created, how
    can we go back and add something to the first? This is possible within the MATLAB-style
    interface, but a bit clunky. Fortunately, there is a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Object-oriented interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The object-oriented interface is available for these more complicated situations,
    and for when you want more control over your figure. Rather than depending on
    some notion of an “active” figure or axes, in the object-oriented interface the
    plotting functions are *methods* of explicit `Figure` and `Axes` objects. To re-create
    the previous plot using this style of plotting, as shown in [Figure 25-4](#fig_0400-introduction-to-matplotlib_files_in_output_30_0),
    you might do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![output 30 0](assets/output_30_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 25-4\. Subplots using the object-oriented interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For simpler plots, the choice of which style to use is largely a matter of preference,
    but the object-oriented approach can become a necessity as plots become more complicated.
    Throughout the following chapters, we will switch between the MATLAB-style and
    object-oriented interfaces, depending on what is most convenient. In most cases,
    the difference is as small as switching `plt.plot` to `ax.plot`, but there are
    a few gotchas that I will highlight as they come up in the following chapters.
  prefs: []
  type: TYPE_NORMAL
