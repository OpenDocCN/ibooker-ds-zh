- en: 'Chapter 43\. In Depth: Support Vector Machines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Support vector machines (SVMs) are a particularly powerful and flexible class
    of supervised algorithms for both classification and regression. In this chapter,
    we will explore the intuition behind SVMs and their use in classification problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin with the standard imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Full-size, full-color figures are available in the [supplemental materials on
    GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Motivating Support Vector Machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of our discussion of Bayesian classification (see [Chapter 41](ch41.xhtml#section-0505-naive-bayes)),
    we learned about a simple kind of model that describes the distribution of each
    underlying class, and experimented with using it to probabilistically determine
    labels for new points. That was an example of *generative classification*; here
    we will consider instead *discriminative classification*. That is, rather than
    modeling each class, we will simply find a line or curve (in two dimensions) or
    manifold (in multiple dimensions) that divides the classes from each other.
  prefs: []
  type: TYPE_NORMAL
- en: As an example of this, consider the simple case of a classification task in
    which the two classes of points are well separated (see [Figure 43-1](#fig_0507-support-vector-machines_files_in_output_5_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![output 5 0](assets/output_5_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-1\. Simple data for classification
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A linear discriminative classifier would attempt to draw a straight line separating
    the two sets of data, and thereby create a model for classification. For two-dimensional
    data like that shown here, this is a task we could do by hand. But immediately
    we see a problem: there is more than one possible dividing line that can perfectly
    discriminate between the two classes!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can draw some of them as follows; [Figure 43-2](#fig_0507-support-vector-machines_files_in_output_7_0)
    shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![output 7 0](assets/output_7_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-2\. Three perfect linear discriminative classifiers for our data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These are three *very* different separators which, nevertheless, perfectly discriminate
    between these samples. Depending on which you choose, a new data point (e.g.,
    the one marked by the “X” in this plot) will be assigned a different label! Evidently
    our simple intuition of “drawing a line between classes” is not good enough, and
    we need to think a bit more deeply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Support Vector Machines: Maximizing the Margin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Support vector machines offer one way to improve on this. The intuition is
    this: rather than simply drawing a zero-width line between the classes, we can
    draw around each line a *margin* of some width, up to the nearest point. Here
    is an example of how this might look ([Figure 43-3](#fig_0507-support-vector-machines_files_in_output_10_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The line that maximizes this margin is the one we will choose as the optimal
    model.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 10 0](assets/output_10_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-3\. Visualization of “margins” within discriminative classifiers
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Fitting a Support Vector Machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see the result of an actual fit to this data: we will use Scikit-Learn’s
    support vector classifier (`SVC`) to train an SVM model on this data. For the
    time being, we will use a linear kernel and set the `C` parameter to a very large
    number (we’ll discuss the meaning of these in more depth momentarily):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To better visualize what’s happening here, let’s create a quick convenience
    function that will plot SVM decision boundaries for us ([Figure 43-4](#fig_0507-support-vector-machines_files_in_output_16_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 16 0](assets/output_16_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-4\. A support vector machine classifier fit to the data, with margins
    (dashed lines) and support vectors (circles) shown
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This is the dividing line that maximizes the margin between the two sets of
    points. Notice that a few of the training points just touch the margin: they are
    circled in [Figure 43-5](#fig_0507-support-vector-machines_files_in_output_20_0).
    These points are the pivotal elements of this fit; they are known as the *support
    vectors*, and give the algorithm its name. In Scikit-Learn, the identities of
    these points are stored in the `support_vectors_` attribute of the classifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: A key to this classifier’s success is that for the fit, only the positions of
    the support vectors matter; any points further from the margin that are on the
    correct side do not modify the fit. Technically, this is because these points
    do not contribute to the loss function used to fit the model, so their position
    and number do not matter so long as they do not cross the margin.
  prefs: []
  type: TYPE_NORMAL
- en: We can see this, for example, if we plot the model learned from the first 60
    points and first 120 points of this dataset ([Figure 43-5](#fig_0507-support-vector-machines_files_in_output_20_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![output 20 0](assets/output_20_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-5\. The influence of new training points on the SVM model
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the left panel, we see the model and the support vectors for 60 training
    points. In the right panel, we have doubled the number of training points, but
    the model has not changed: the three support vectors in the left panel are the
    same as the support vectors in the right panel. This insensitivity to the exact
    behavior of distant points is one of the strengths of the SVM model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are running this notebook live, you can use IPython’s interactive widgets
    to view this feature of the SVM model interactively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Beyond Linear Boundaries: Kernel SVM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where SVM can become quite powerful is when it is combined with *kernels*. We
    have seen a version of kernels before, in the basis function regressions of [Chapter 42](ch42.xhtml#section-0506-linear-regression).
    There we projected our data into a higher-dimensional space defined by polynomials
    and Gaussian basis functions, and thereby were able to fit for nonlinear relationships
    with a linear classifier.
  prefs: []
  type: TYPE_NORMAL
- en: In SVM models, we can use a version of the same idea. To motivate the need for
    kernels, let’s look at some data that is not linearly separable ([Figure 43-6](#fig_0507-support-vector-machines_files_in_output_25_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![output 25 0](assets/output_25_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-6\. A linear classifier performs poorly for nonlinear boundaries
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It is clear that no linear discrimination will *ever* be able to separate this
    data. But we can draw a lesson from the basis function regressions in [Chapter 42](ch42.xhtml#section-0506-linear-regression),
    and think about how we might project the data into a higher dimension such that
    a linear separator *would* be sufficient. For example, one simple projection we
    could use would be to compute a *radial basis function* (RBF) centered on the
    middle clump:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can visualize this extra data dimension using a three-dimensional plot, as
    seen in [Figure 43-7](#fig_0507-support-vector-machines_files_in_output_29_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![output 29 0](assets/output_29_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-7\. A third dimension added to the data allows for linear separation
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that with this additional dimension, the data becomes trivially linearly
    separable, by drawing a separating plane at, say, *r*=0.7.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case we had to choose and carefully tune our projection: if we had
    not centered our radial basis function in the right location, we would not have
    seen such clean, linearly separable results. In general, the need to make such
    a choice is a problem: we would like to somehow automatically find the best basis
    functions to use.'
  prefs: []
  type: TYPE_NORMAL
- en: One strategy to this end is to compute a basis function centered at *every*
    point in the dataset, and let the SVM algorithm sift through the results. This
    type of basis function transformation is known as a *kernel transformation*, as
    it is based on a similarity relationship (or kernel) between each pair of points.
  prefs: []
  type: TYPE_NORMAL
- en: A potential problem with this strategy—projecting <math alttext="upper N"><mi>N</mi></math>
    points into <math alttext="upper N"><mi>N</mi></math> dimensions—is that it might
    become very computationally intensive as <math alttext="upper N"><mi>N</mi></math>
    grows large. However, because of a neat little procedure known as the [*kernel
    trick*](https://oreil.ly/h7PBj), a fit on kernel-transformed data can be done
    implicitly—that is, without ever building the full <math alttext="upper N"><mi>N</mi></math>
    -dimensional representation of the kernel projection. This kernel trick is built
    into the SVM, and is one of the reasons the method is so powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Scikit-Learn, we can apply kernelized SVM simply by changing our linear
    kernel to an RBF kernel, using the `kernel` model hyperparameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let’s use our previously defined function to visualize the fit and identify
    the support vectors ([Figure 43-8](#fig_0507-support-vector-machines_files_in_output_33_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![output 33 0](assets/output_33_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-8\. Kernel SVM fit to the data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Using this kernelized support vector machine, we learn a suitable nonlinear
    decision boundary. This kernel transformation strategy is used often in machine
    learning to turn fast linear methods into fast nonlinear methods, especially for
    models in which the kernel trick can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tuning the SVM: Softening Margins'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our discussion thus far has centered around very clean datasets, in which a
    perfect decision boundary exists. But what if your data has some amount of overlap?
    For example, you may have data like this (see [Figure 43-9](#fig_0507-support-vector-machines_files_in_output_36_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![output 36 0](assets/output_36_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-9\. Data with some level of overlap
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To handle this case, the SVM implementation has a bit of a fudge factor that
    “softens” the margin: that is, it allows some of the points to creep into the
    margin if that allows a better fit. The hardness of the margin is controlled by
    a tuning parameter, most often known as `C`. For a very large `C`, the margin
    is hard, and points cannot lie in it. For a smaller `C`, the margin is softer
    and can grow to encompass some points.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The plot shown in [Figure 43-10](#fig_0507-support-vector-machines_files_in_output_38_0)
    gives a visual picture of how a changing `C` affects the final fit via the softening
    of the margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![output 38 0](assets/output_38_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-10\. The effect of the `C` parameter on the support vector fit
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The optimal value of `C` will depend on your dataset, and you should tune this
    parameter using cross-validation or a similar procedure (refer back to [Chapter 39](ch39.xhtml#section-0503-hyperparameters-and-model-validation)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Face Recognition'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an example of support vector machines in action, let’s take a look at the
    facial recognition problem. We will use the Labeled Faces in the Wild dataset,
    which consists of several thousand collated photos of various public figures.
    A fetcher for the dataset is built into Scikit-Learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let’s plot a few of these faces to see what we’re working with (see [Figure 43-11](#fig_0507-support-vector-machines_files_in_output_43_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![output 43 0](assets/output_43_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-11\. Examples from the Labeled Faces in the Wild dataset
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Each image contains 62 × 47, or around 3,000, pixels. We could proceed by simply
    using each pixel value as a feature, but often it is more effective to use some
    sort of preprocessor to extract more meaningful features; here we will use principal
    component analysis (see [Chapter 45](ch45.xhtml#section-0509-principal-component-analysis))
    to extract 150 fundamental components to feed into our support vector machine
    classifier. We can do this most straightforwardly by packaging the preprocessor
    and the classifier into a single pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For the sake of testing our classifier output, we will split the data into
    a training set and a testing set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can use grid search cross-validation to explore combinations of
    parameters. Here we will adjust `C` (which controls the margin hardness) and `gamma`
    (which controls the size of the radial basis function kernel), and determine the
    best model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The optimal values fall toward the middle of our grid; if they fell at the edges,
    we would want to expand the grid to make sure we have found the true optimum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now with this cross-validated model we can predict the labels for the test
    data, which the model has not yet seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take a look at a few of the test images along with their predicted values
    (see [Figure 43-12](#fig_0507-support-vector-machines_files_in_output_53_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![output 53 0](assets/output_53_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-12\. Labels predicted by our model
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Out of this small sample, our optimal estimator mislabeled only a single face
    (Bush’s face in the bottom row was mislabeled as Blair). We can get a better sense
    of our estimator’s performance using the classification report, which lists recovery
    statistics label by label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We might also display the confusion matrix between these classes (see [Figure 43-13](#fig_0507-support-vector-machines_files_in_output_57_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![output 57 0](assets/output_57_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 43-13\. Confusion matrix for the faces data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This helps us get a sense of which labels are likely to be confused by the estimator.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a real-world facial recognition task, in which the photos do not come pre-cropped
    into nice grids, the only difference in the facial classification scheme is the
    feature selection: you would need to use a more sophisticated algorithm to find
    the faces, and extract features that are independent of the pixellation. For this
    kind of application, one good option is to make use of [OpenCV](http://opencv.org),
    which, among other things, includes pretrained implementations of state-of-the-art
    feature extraction tools for images in general and faces in particular.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This has been a brief intuitive introduction to the principles behind support
    vector machines. These models are a powerful classification method for a number
    of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Their dependence on relatively few support vectors means that they are compact
    and take up very little memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the model is trained, the prediction phase is very fast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because they are affected only by points near the margin, they work well with
    high-dimensional data—even data with more dimensions than samples, which is challenging
    for other algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Their integration with kernel methods makes them very versatile, able to adapt
    to many types of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, SVMs have several disadvantages as well:'
  prefs: []
  type: TYPE_NORMAL
- en: The scaling with the number of samples <math alttext="upper N"><mi>N</mi></math>
    is <math alttext="script upper O left-bracket upper N cubed right-bracket"><mrow><mi>𝒪</mi>
    <mo>[</mo> <msup><mi>N</mi> <mn>3</mn></msup> <mo>]</mo></mrow></math> at worst,
    or <math alttext="script upper O left-bracket upper N squared right-bracket"><mrow><mi>𝒪</mi>
    <mo>[</mo> <msup><mi>N</mi> <mn>2</mn></msup> <mo>]</mo></mrow></math> for efficient
    implementations. For large numbers of training samples, this computational cost
    can be prohibitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The results are strongly dependent on a suitable choice for the softening parameter
    `C`. This must be carefully chosen via cross-validation, which can be expensive
    as datasets grow in size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The results do not have a direct probabilistic interpretation. This can be estimated
    via an internal cross-validation (see the `probability` parameter of `SVC`), but
    this extra estimation is costly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With those traits in mind, I generally only turn to SVMs once other simpler,
    faster, and less tuning-intensive methods have been shown to be insufficient for
    my needs. Nevertheless, if you have the CPU cycles to commit to training and cross-validating
    an SVM on your data, the method can lead to excellent results.
  prefs: []
  type: TYPE_NORMAL
