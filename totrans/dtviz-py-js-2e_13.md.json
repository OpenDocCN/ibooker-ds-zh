["```py\n{\n  \"category\": \"Physics\",\n  \"name\": \"Albert Einstein\",\n  \"gender\": \"male\",\n  \"place_of_birth\": \"Ulm ,  Baden-W\\u00fcrttemberg ,\n German Empire\",\n  \"date_of_death\": \"1955-04-18\",\n  ...\n}\n```", "```py\nimport pandas as pd\n\ndf = pd.read_json(open('data/nobel_winners_dirty.json'))\n```", "```py\ndf.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1052 entries, 0 to 1051\nData columns (total 12 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  -----\n 0   born_in         1052 non-null   object\n 1   category        1052 non-null   object\n 2   country         1052 non-null   object\n 3   date_of_birth   1044 non-null   object\n 4   date_of_death   1044 non-null   object\n 5   gender          1040 non-null   object\n 6   link            1052 non-null   object\n 7   name            1052 non-null   object\n 8   place_of_birth  1044 non-null   object\n 9   place_of_death  1044 non-null   object\n 10  text            1052 non-null   object\n 11  year            1052 non-null   int64\ndtypes: int64(1), object(11)\nmemory usage: 98.8+ KB\n```", "```py\ndf.describe()\nOut:\n              year\ncount  1052.000000\nmean   1968.729087\nstd      33.155829\nmin    1809.000000\n25%    1947.000000\n50%    1975.000000\n75%    1996.000000\nmax    2014.000000\n```", "```py\nIn [140]: df.describe(include=['object']) ![1](assets/1.png)\nOut[140]:\n       born_in  category date_of_birth date_of_death gender  \\ count     1052      1052          1044          1044   1040\nunique      40         7           853           563      2\ntop             Physio..    9 May 1947                 male\nfreq       910       250             4           362    983\n\n                              link             name  \\ count                         1052             1052\nunique                         893              998\ntop     http://eg/wiki/...                     Daniel Kahneman\nfreq                             4                2\n\n          country place_of_birth place_of_death  \\ count            1052           1044           1044\nunique             59            735            410\ntop     United States\nfreq              350             29            409\n...\n```", "```py\ndf.head()\nOut:\n                  born_in                category   date_of_bi..\n0                          Physiology or Medicine  8 October 1..\n1  Bosnia and Herzegovina              Literature  9 October 1..![1](assets/1.png)\n2  Bosnia and Herzegovina               Chemistry   July 23, 1..\n3                                           Peace             ..\n4                                           Peace    26 July 1..\n\n    date_of_death gender                                      ..\n0   24 March 2002   male   http://en.wikipedia.org/wiki/C%C3%A..\n1   13 March 1975   male            http://en.wikipedia.org/wi..\n2      1998-01-07   male       http://en.wikipedia.org/wiki/Vl..![2](assets/2.png)\n3             NaN   None  http://en.wikipedia.org/wiki/Institu..\n4  6 October 1912   male  http://en.wikipedia.org/wiki/Auguste..\n\n                              name country  \\ 0                   César Milstein   Argentina\n1                     Ivo Andric *               ![1](assets/1.png)\n2                Vladimir Prelog *\n3  Institut de Droit International     Belgium\n4                Auguste Beernaert     Belgium\n```", "```py\n# Our Nobel dataset's columns\ndf.columns\nOut: Index(['born_in', 'category', 'date_of_birth',\n...\n        'place_of_death', 'text', 'year'], dtype='object')\n```", "```py\n# set the name field as index\ndf = df.set_index('name') ![1](assets/1.png)\ndf.head(2)\nOut:\n                               born_in                category  \\ name ![2](assets/2.png)\nCésar Milstein                          Physiology or Medicine\nIvo Andric *    Bosnia and Herzegovina              Literature\n...\n\ndf.reset_index(inplace=True) ![3](assets/3.png)\n\ndf.head(2)\nOut:\n             name                 born_in                category  \\ 0  César Milstein                          Physiology or Medicine  ![4](assets/4.png)\n1    Ivo Andric *  Bosnia and Herzegovina              Literature\n```", "```py\nbi_col = df.born_in # or bi = df['born_in']\nbi_col\nOut:\n0\n1     Bosnia and Herzegovina\n2     Bosnia and Herzegovina\n3\n...\n1051\nName: born_in, Length: 1052, dtype: object\n\ntype(bi_col)\nOut: pandas.core.series.Series\n```", "```py\n# access the first row\ndf.iloc[0]\nOut:\nname                                 César Milstein\nborn_in\ncategory                             Physiology or Medicine\n...\n\n# set the index to 'name' and access by name-label\ndf.set_index('name', inplace=True)\ndf.loc['Albert Einstein']\nOut:\n                 born_in category      country  ...\nname\nAlbert Einstein           Physics  Switzerland  ...\nAlbert Einstein           Physics      Germany  ...\n...\n```", "```py\n# select the first 10 rows\ndf[0:10]\nOut:\n                  born_in                category   date_of_b..\n0                          Physiology or Medicine  8 October ..\n1  Bosnia and Herzegovina              Literature  9 October ..\n...\n9                                           Peace      1910-0..\n# select the last four rows\ndf[-4:]\nOut:\n     born_in                category      date_of_birth date_..\n1048                           Peace   November 1, 1878   May..\n1049          Physiology or Medicine         1887-04-10    19..\n1050                       Chemistry           1906-9-6     1..\n1051                           Peace  November 26, 1931      ..\n```", "```py\nmask = df.year > 2000 ![1](assets/1.png)\nmask\nOut:\n0     False\n1     False\n...\n13     True\n...\n1047     True\n1048    False\n...\nName: year, Length: 1052, dtype: bool\n```", "```py\nmask = df.year > 2000\nwinners_since_2000 = df[mask] ![1](assets/1.png)\nwinners_since_2000.count()\nOut:\n...\nyear              202 # number of winners since 2000\ndtype: int64\n\nwinners_since_2000.head()\nOut:\n...\n                                               text  year\n13                 François Englert , Physics, 2013  2013\n32      Christopher A. Pissarides , Economics, 2010  2010\n66                         Kofi Annan , Peace, 2001  2001\n87               Riccardo Giacconi *, Physics, 2002  2002\n88   Mario Capecchi *, Physiology or Medicine, 2007  2007\n```", "```py\nwinners_since_2000 = df[df.year > 2000]\n```", "```py\nIn [0]: df.born_in.describe()\nOut[0]:\ncount     1052\nunique      40\ntop\nfreq       910\nName: born_in, dtype: object\n```", "```py\nIn [1]: set(df.born_in.apply(type))\nOut[1]: {str}\n```", "```py\nimport numpy as np\n\nbi_col.replace('', np.nan, inplace=True)\nbi_col\nOut:\n0                        NaN ![1](assets/1.png)\n1     Bosnia and Herzegovina\n2     Bosnia and Herzegovina\n3                        NaN\n...\n\nbi_col.count()\nOut: 142 ![2](assets/2.png)\n```", "```py\ndf.replace('', np.nan, inplace=True)\n```", "```py\ndf.head()\nOut:\n...\n                              name country  \\\n0                   César Milstein   Argentina\n1                     Ivo Andric *\n2                Vladimir Prelog *\n3  Institut de Droit International     Belgium\n4                Auguste Beernaert     Belgium\n```", "```py\ndf[df.name.str.contains(r'\\*')]['name'] ![1](assets/1.png)\nOut:\n1              Ivo Andric *\n2         Vladimir Prelog *\n...\n1041       John Warcup Cornforth *\n1046      Elizabeth H. Blackburn *\nName: name, Length: 142, dtype: object ![2](assets/2.png)\n```", "```py\ndf.name = df.name.str.replace('*', '', regex=True) ![1](assets/1.png)\n# strip the whitespace from the names\ndf.name = df.name.str.strip()\n```", "```py\ndf[df.name.str.contains('\\*')]\nOut:\nEmpty DataFrame\n```", "```py\nnp.nan == np.nan\nOut: False\n```", "```py\ndf = df[df.born_in.isnull()] ![1](assets/1.png)\ndf.count()\nOut:\nborn_in             0 # all entries now empty\ncategory          910\n...\ndtype: int64\n```", "```py\ndf = df.drop('born_in', axis=1) ![1](assets/1.png)\n```", "```py\ndupes_by_name = df[df.duplicated('name')] ![1](assets/1.png)\ndupes_by_name.count()\nOut:\n...\nyear              46\ndtype: int64\n```", "```py\nall_dupes = df[df.duplicated('name')\\\n               | df.duplicated('name', keep='last')]\nall_dupes.count()\nOut:\n...\nyear              92\ndtype: int64\n```", "```py\nall_dupes = df[df.name.isin(dupes_by_name.name)] ![1](assets/1.png)\nall_dupes.count()\nOut:\n...\nyear              92\ndtype: int64\n```", "```py\nfor name, rows in df.groupby('name'): ![1](assets/1.png)\n    print('name: %s, number of rows: %d'%(name, len(rows)))\n\nname: A. Michael Spence, number of rows: 1\nname: Aage Bohr, number of rows: 1\nname: Aaron Ciechanover, number of rows: 1\n...\n```", "```py\npd.concat([g for _,g in df.groupby('name')\\ ![1](assets/1.png)\n                     if len(g) > 1])['name']\n\nOut:\n121           Aaron Klug\n131           Aaron Klug\n615      Albert Einstein\n844      Albert Einstein\n...\n489      Yoichiro Nambu\n773      Yoichiro Nambu\nName: name, Length: 92, dtype: object\n```", "```py\ndf2 = pd.DataFrame(\\\n     {'name':['zak', 'alice', 'bob', 'mike', 'bob', 'bob'],\\\n      'score':[4, 3, 5, 2, 3, 7]})\ndf2.sort_values(['name', 'score'],\\ ![1](assets/1.png)\n        ascending=[1,0]) ![2](assets/2.png)\n\nOut:\n    name  score\n1  alice      3\n5    bob      7\n2    bob      5\n4    bob      3\n3   mike      2\n0    zak      4\n```", "```py\nIn [306]: all_dupes.sort_values('name')\\\n  [['name', 'country', 'year']]\nOut[306]:\n                          name         country  year\n121                 Aaron Klug    South Africa  1982\n131                 Aaron Klug  United Kingdom  1982\n844            Albert Einstein         Germany  1921\n615            Albert Einstein     Switzerland  1921\n...\n910                Marie Curie          France  1903\n919                Marie Curie          France  1911\n706     Marie Skłodowska-Curie          Poland  1903\n709     Marie Skłodowska-Curie          Poland  1911\n...\n650              Ragnar Granit          Sweden  1967\n960              Ragnar Granit         Finland  1809\n...\n396              Sidney Altman   United States  1990\n995              Sidney Altman          Canada  1989\n...\n[92 rows x 3 columns]\n```", "```py\ndf.loc[(df.name == 'Marie Sk\\u0142odowska-Curie') &\\\n      (df.year == 1911), 'country'] = 'France'\n```", "```py\ndf.drop(df[(df.name == 'Sidney Altman') &\\\n (df.year == 1990)].index,\n    inplace=True)\n```", "```py\ndf = df[~((df.name == 'Sidney Altman') & (df.year == 1990))]\n```", "```py\ndef clean_data(df):\n    df = df.replace('', np.nan)\n    df = df[df.born_in.isnull()]\n    df = df.drop('born_in', axis=1)\n    df.drop(df[df.year == 1809].index, inplace=True)\n    df = df[~(df.name == 'Marie Curie')]\n    df.loc[(df.name == 'Marie Sk\\u0142odowska-Curie') &\\\n           (df.year == 1911), 'country'] = 'France'\n    df = df[~((df.name == 'Sidney Altman') &\\\n     (df.year == 1990))]\n    return df\n```", "```py\ndf = df.reindex(np.random.permutation(df.index)) ![1](assets/1.png)\ndf = df.drop_duplicates(['name', 'year'])        ![2](assets/2.png)\ndf = df.sort_index()                             ![3](assets/3.png)\ndf.count()\nOut:\n...\nyear              865\ndtype: int64\n```", "```py\nIn : df[df.duplicated('name') |\n             df.duplicated('name', keep='last')]\\ ![1](assets/1.png)\n             .sort_values(by='name')\\\n             [['name', 'country', 'year', 'category']]\nOut:\n                       name     country  year   category\n548        Frederick Sanger  United Kingdom  1958  Chemistry\n580        Frederick Sanger  United Kingdom  1980  Chemistry\n292            John Bardeen   United States  1956    Physics\n326            John Bardeen   United States  1972    Physics\n285        Linus C. Pauling   United States  1954  Chemistry\n309        Linus C. Pauling   United States  1962      Peace\n706  Marie Skłodowska-Curie          Poland  1903    Physics\n709  Marie Skłodowska-Curie          France  1911  Chemistry\n```", "```py\ndf.count()\nOut:\ncategory          864 ![1](assets/1.png)\ncountry           865\ndate_of_birth     857\ndate_of_death     566\ngender            857 ![2](assets/2.png)\nlink              865\nname              865\nplace_of_birth    831\nplace_of_death    524\ntext              865\nyear              865\ndtype: int64\n```", "```py\ndf[df.category.isnull()][['name', 'text']]\nOut:\n              name                            text\n922  Alexis Carrel  Alexis Carrel , Medicine, 1912\n```", "```py\n...\ndf.loc[df.name == 'Alexis Carrel', 'category'] =\\\n 'Physiology or Medicine'\n```", "```py\ndf[df.gender.isnull()]['name']\nOut:\n3                         Institut de Droit International\n156                               Friends Service Council\n267     American Friends Service Committee  (The Quakers)\n574                                 Amnesty International\n650                                         Ragnar Granit\n947                              Médecins Sans Frontières\n1000     Pugwash Conferences on Science and World Affairs\n1033                   International Atomic Energy Agency\nName: name, dtype: object\n```", "```py\n...\ndef clean_data(df):\n...\n    df.loc[df.name == 'Ragnar Granit', 'gender'] = 'male'\n    df = df[df.gender.notnull()] # remove genderless entries\n```", "```py\ndf.count()\nOut:\ncategory          858\ndate_of_birth     857 # missing field\n...\nyear              858\ndtype: int64\n```", "```py\ndf[df.date_of_birth.isnull()]['name']\nOut:\n782    Hiroshi Amano\nName: name, dtype: object\n```", "```py\n...\n    df.loc[df.name == 'Hiroshi Amano', 'date_of_birth'] =\\\n    '11 September 1960'\n```", "```py\ndf.count()\nOut:\ncategory          858\ncountry           858\ndate_of_birth     858\ndate_of_death     566\ngender            858\nlink              858\nname              858\nplace_of_birth    831\nplace_of_death    524\ntext              858\nyear              858\ndtype: int64\n```", "```py\ndf[['name', 'date_of_birth']]\nOut[14]:\n                       name      date_of_birth\n4         Auguste Beernaert       26 July 1829\n                                        ...\n8         Corneille Heymans      28 March 1892\n...                     ...                ...\n1047       Brian P. Schmidt  February 24, 1967\n1048  Carlos Saavedra Lamas   November 1, 1878\n1049       Bernardo Houssay         1887-04-10\n1050   Luis Federico Leloir           1906-9-6\n1051  Adolfo Pérez Esquivel  November 26, 1931\n\n[858 rows x 2 columns]\n```", "```py\npd.to_datetime(df.date_of_birth, errors='raise') ![1](assets/1.png)\nOut:\n4      1829-07-26\n5      1862-08-29\n         ...\n1050   1906-09-06\n1051   1931-11-26\nName: date_of_birth, Length: 858, dtype: datetime64[ns]\n```", "```py\nIn: df.date_of_birth = pd.to_datetime(df.date_of_birth, errors='coerce')\n```", "```py\nIn [143]: pd.to_datetime(df.date_of_death, errors='raise')\n--------------------------------------------------------------\nValueError                   Traceback (most recent call last)\n...\n    301     if arg is None:\n\nValueError: month must be in 1..12\n```", "```py\nfor i,row in df.iterrows():\n    try:\n        pd.to_datetime(row.date_of_death, errors='raise') ![1](assets/1.png)\n    except:\n        print(f\"{row.date_of_death.ljust(30)}({row['name']}, {i})\") ![2](assets/2.png)\n```", "```py\n1968-23-07              (Henry Hallett Dale, 150)\nMay 30, 2011 (aged 89)  (Rosalyn Yalow, 349)\nliving                  (David Trimble, 581)\nDiederik Korteweg       (Johannes Diderik van der Waals, 746)\nliving                  (Shirin Ebadi, 809)\nliving                  (Rigoberta Menchú, 833)\n1 February 1976, age 74 (Werner Karl Heisenberg, 858)\n```", "```py\nwith_death_dates = df[df.date_of_death.notnull()] ![1](assets/1.png)\nbad_dates = pd.isnull(pd.to_datetime(\\\n            with_death_dates.date_of_death, errors='coerce')) ![2](assets/2.png)\nwith_death_dates[bad_dates][['category', 'date_of_death',\\ 'name']]\n```", "```py\ndf.date_of_death = pd.to_datetime(df.date_of_death,\\\nerrors='coerce')\n```", "```py\ndf['award_age'] = df.year - pd.DatetimeIndex(df.date_of_birth)\\ .year ![1](assets/1.png)\n```", "```py\n# use +sort+ for older pandas\ndf.sort_values('award_age').iloc[:10]\\\n        [['name', 'award_age', 'category', 'year']]\nOut:\n                      name  award_age         category  year\n725        Malala Yousafzai       17.0            Peace  2014 ![1](assets/1.png)\n525  William Lawrence Bragg       25.0          Physics  1915\n626    Georges J. F. Köhler       30.0  Phys...Medicine  1976\n294           Tsung-Dao Lee       31.0          Physics  1957\n858  Werner Karl Heisenberg       31.0          Physics  1932\n247           Carl Anderson       31.0          Physics  1936\n146              Paul Dirac       31.0          Physics  1933\n877        Rudolf Mössbauer       32.0          Physics  1961\n226         Tawakkol Karman       32.0            Peace  2011\n804        Mairéad Corrigan       32.0            Peace  1976\n```", "```py\ndef clean_data(df):\n    df = df.replace('', np.nan)\n    df_born_in = df[df.born_in.notnull()] ![1](assets/1.png)\n    df = df[df.born_in.isnull()]\n    df = df.drop('born_in', axis=1)\n    df.drop(df[df.year == 1809].index, inplace=True)\n    df = df[~(df.name == 'Marie Curie')]\n    df.loc[(df.name == 'Marie Sk\\u0142odowska-Curie') &\\\n           (df.year == 1911), 'country'] = 'France'\n    df = df[~((df.name == 'Sidney Altman') & (df.year == 1990))]\n    df = df.reindex(np.random.permutation(df.index))\n    df = df.drop_duplicates(['name', 'year']) ![2](assets/2.png)\n    df = df.sort_index()\n    df.loc[df.name == 'Alexis Carrel', 'category'] =\\\n        'Physiology or Medicine'\n    df.loc[df.name == 'Ragnar Granit', 'gender'] = 'male'\n    df = df[df.gender.notnull()] # remove institutional prizes\n    df.loc[df.name == 'Hiroshi Amano', 'date_of_birth'] =\\\n    '11 September 1960'\n    df.date_of_birth = pd.to_datetime(df.date_of_birth) ![3](assets/3.png)\n    df.date_of_death = pd.to_datetime(df.date_of_death,\\\n    errors='coerce')\n    df['award_age'] = df.year - pd.DatetimeIndex(df.date_of_birth)\\\n    .year\n    return df, df_born_in ![4](assets/4.png)\n```", "```py\ndf = pd.read_json(open('data/nobel_winners_dirty.json'))\ndf_clean, df_born_in = clean_data(df)\n```", "```py\n# clean up name column: '* Aaron Klug' -> 'Aaron Klug'\ndf_born_in.name = dfbi.name.str.replace('*', '', regex=False) ![1](assets/1.png)\ndf_born_in.name = dfbi.name.str.strip()\ndf_born_in.drop_duplicates(subset=['name'], inplace=True)\ndf_born_in.set_index('name', inplace=True)\n```", "```py\nIn: df_born_in['Eugene Wigner']\nOut:\nborn_in                                                     Hungary\ncategory                                                    Physics\n...\nyear                                                           1963\nName: Eugene Wigner, dtype: object\n```", "```py\ndef get_born_in(name):\n    try:\n        born_in = df_born_in.loc[name]['born_in']\n        # We'll print out these rows as a sanity-check\n        print('name: %s, born in: %s'%(name, born_in))\n    except:\n        born_in = np.nan\n    return born_in\n```", "```py\nIn: df_wbi = df_clean.copy()\nIn: df_wbi['born_in'] = df_wbi['name'].apply(get_born_in)\nOut:\n...\nname: Christian de Duve, born in: United Kingdom\nname: Ilya Prigogine, born in: Russia\n...\nname: Niels Kaj Jerne, born in: United Kingdom\nname: Albert Schweitzer, born in: Germany\n...\n```", "```py\nIn: df_wbi.info()\nOut:\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 858 entries, 4 to 1051\nData columns (total 13 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  -----\n 0   category        858 non-null    object\n ...\n 12  born_in         102 non-null    object\ndtypes: datetime64[ns](2), int64(2), object(9)\nmemory usage: 93.8+ KB\n```", "```py\n# this won't work with duplicate names in our index\nIn: df_wbi['born_in'] = df_born_in.born_in\nOut:\n...\nValueError: cannot reindex from a duplicate axis\n```", "```py\n# Read the Scrapy bio-data into a DataFrame\ndf_winners_bios = pd.read_json(\\ open('data/scrapy_nwinners_minibio.json'))\n\ndf_clean_bios = pd.merge(df_wbi, df_winners_bios,\\ how='outer', on='link') ![1](assets/1.png)\n```", "```py\ndf_clean_bios.count()\nOut:\naward_age         1023\ncategory          1023\n...\nbio_image          978\nmini_bio          1086\n```", "```py\ndf_clean_bios = df_clean_bios[~df_clean_bios.name.isnull()]\\\n.drop_duplicates(subset=['link', 'year'])\n```", "```py\ndf_clean_bios.count()\naward_age         858\ncategory          858\n...\nborn_in           102\nbio_image         770\nmini_bio          857\ndtype: int64\n```", "```py\ndf_clean_bios[df_clean_bios.mini_bio.isnull()]\nOut:\n...\n                                            link        name  \\\n229  http://en.wikipedia.org/wiki/L%C3%AA_%C3...  Lê Ðức Thọ\n...\n```", "```py\ndf_clean_bios.drop('image_urls', axis=1, inplace=True)\n```", "```py\ndf_clean_bios.to_json('data/nobel_winners_cleaned.json',\\\n             orient='records', date_format='iso') ![1](assets/1.png)\n```", "```py\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine(\\\n     'sqlite:///data/nobel_winners_clean.db')\ndf_clean_bios.to_sql('winners', engine, if_exists='replace')\n```", "```py\ndf_read_sql = pd.read_sql('winners', engine)\ndf_read_sql.info()\nOut:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 858 entries, 0 to 857\nData columns (total 16 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  -----\n 0   index           858 non-null    int64\n 1   category        858 non-null    object\n 2   country         858 non-null    object\n 3   date_of_birth   858 non-null    datetime64[ns]\n [...]\n 14  bio_image       770 non-null    object\n 15  mini_bio        857 non-null    object\ndtypes: datetime64[ns](2), float64(2), int64(1), object(11)\nmemory usage: 107.4+ KB\n```"]