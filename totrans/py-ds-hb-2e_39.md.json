["```py\nIn [1]: from mpl_toolkits import mplot3d\n```", "```py\nIn [2]: %matplotlib inline\n        import numpy as np\n        import matplotlib.pyplot as plt\n```", "```py\nIn [3]: fig = plt.figure()\n        ax = plt.axes(projection='3d')\n```", "```py\nIn [4]: ax = plt.axes(projection='3d')\n\n        # Data for a three-dimensional line\n        zline = np.linspace(0, 15, 1000)\n        xline = np.sin(zline)\n        yline = np.cos(zline)\n        ax.plot3D(xline, yline, zline, 'gray')\n\n        # Data for three-dimensional scattered points\n        zdata = 15 * np.random.random(100)\n        xdata = np.sin(zdata) + 0.1 * np.random.randn(100)\n        ydata = np.cos(zdata) + 0.1 * np.random.randn(100)\n        ax.scatter3D(xdata, ydata, zdata, c=zdata, cmap='Greens');\n```", "```py\nIn [5]: def f(x, y):\n            return np.sin(np.sqrt(x ** 2 + y ** 2))\n\n        x = np.linspace(-6, 6, 30)\n        y = np.linspace(-6, 6, 30)\n\n        X, Y = np.meshgrid(x, y)\n        Z = f(X, Y)\n```", "```py\nIn [6]: fig = plt.figure()\n        ax = plt.axes(projection='3d')\n        ax.contour3D(X, Y, Z, 40, cmap='binary')\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_zlabel('z');\n```", "```py\nIn [7]: ax.view_init(60, 35)\n        fig\n```", "```py\nIn [8]: fig = plt.figure()\n        ax = plt.axes(projection='3d')\n        ax.plot_wireframe(X, Y, Z)\n        ax.set_title('wireframe');\n```", "```py\nIn [9]: ax = plt.axes(projection='3d')\n        ax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n                        cmap='viridis', edgecolor='none')\n        ax.set_title('surface');\n```", "```py\nIn [10]: r = np.linspace(0, 6, 20)\n         theta = np.linspace(-0.9 * np.pi, 0.8 * np.pi, 40)\n         r, theta = np.meshgrid(r, theta)\n\n         X = r * np.sin(theta)\n         Y = r * np.cos(theta)\n         Z = f(X, Y)\n\n         ax = plt.axes(projection='3d')\n         ax.plot_surface(X, Y, Z, rstride=1, cstride=1,\n                         cmap='viridis', edgecolor='none');\n```", "```py\nIn [11]: theta = 2 * np.pi * np.random.random(1000)\n         r = 6 * np.random.random(1000)\n         x = np.ravel(r * np.sin(theta))\n         y = np.ravel(r * np.cos(theta))\n         z = f(x, y)\n```", "```py\nIn [12]: ax = plt.axes(projection='3d')\n         ax.scatter(x, y, z, c=z, cmap='viridis', linewidth=0.5);\n```", "```py\nIn [13]: ax = plt.axes(projection='3d')\n         ax.plot_trisurf(x, y, z,\n                         cmap='viridis', edgecolor='none');\n```", "```py\nIn [14]: theta = np.linspace(0, 2 * np.pi, 30)\n         w = np.linspace(-0.25, 0.25, 8)\n         w, theta = np.meshgrid(w, theta)\n```", "```py\nIn [15]: phi = 0.5 * theta\n```", "```py\nIn [16]: # radius in x-y plane\n         r = 1 + w * np.cos(phi)\n\n         x = np.ravel(r * np.cos(theta))\n         y = np.ravel(r * np.sin(theta))\n         z = np.ravel(w * np.sin(phi))\n```", "```py\nIn [17]: # triangulate in the underlying parametrization\n         from matplotlib.tri import Triangulation\n         tri = Triangulation(np.ravel(w), np.ravel(theta))\n\n         ax = plt.axes(projection='3d')\n         ax.plot_trisurf(x, y, z, triangles=tri.triangles,\n                         cmap='Greys', linewidths=0.2);\n\n         ax.set_xlim(-1, 1); ax.set_ylim(-1, 1); ax.set_zlim(-1, 1)\n         ax.axis('off');\n```"]