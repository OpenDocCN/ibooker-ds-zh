- en: 'Chapter 13\. Capstone: Python for Data Analytics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of [Chapter 8](ch08.html#r-data-manipulation-visualization) you extended
    what you learned about R to explore and test relationships in the *mpg* dataset.
    We’ll do the same in this chapter, using Python. We’ve conducted the same work
    in Excel and R, so I’ll focus less on the whys of our analysis in favor of the
    hows of doing it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let’s call in all the necessary modules. Some of these are
    new: from `scipy`, we’ll import the `stats` submodule. To do this, we’ll use the
    `from` keyword to tell Python what module to look for, then the usual `import`
    keyword to choose a sub-module. As the name suggests, we’ll use the `stats` submodule
    of `scipy` to conduct our statistical analysis. We’ll also be using a new package
    called `sklearn`, or *scikit-learn*, to validate our model on a train/test split.
    This package has become a dominant resource for machine learning and also comes
    installed with Anaconda.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `usecols` argument of `read_csv()` we can specify which columns to
    read into the DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exploratory Data Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start with the descriptive statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Because *origin* is a categorical variable, by default it doesn’t show up as
    part of `describe()`. Let’s explore this variable instead with a frequency table.
    This can be done in `pandas` with the `crosstab()` function. First, we’ll specify
    what data to place on the index: *origin*. We’ll get a count for each level by
    setting the `columns` argument to `count`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To make a two-way frequency table, we can instead set `columns` to another
    categorical variable, such as `cylinders`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s retrieve descriptive statistics for *mpg* by each level of *origin*.
    I’ll do this by chaining together two methods, then subsetting the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also visualize the overall distribution of *mpg*, as in [Figure 13-1](#mpg-hist-seaborn):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Histogram of MPG](assets/aina_1301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-1\. Histogram of *mpg*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now let’s make a boxplot as in [Figure 13-2](#mpg-box-seaborn) comparing the
    distribution of *mpg* across each level of *origin*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Box plot](assets/aina_1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-2\. Boxplot of *mpg* by *origin*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, we can set the `col` argument of `displot()` to `origin` to
    create faceted histograms, such as in [Figure 13-3](#mpg-facet-seaborn):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Faceted histogram](assets/aina_1303.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-3\. Faceted histogram of *mpg* by *origin*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hypothesis Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s again test for a difference in mileage between American and European cars.
    For ease of analysis, we’ll split the observations in each group into their own
    DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Independent Samples T-test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now use the `ttest_ind()` function from `scipy.stats` to conduct the
    t-test. This function expects two `numpy` arrays as arguments; `pandas` Series
    also work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, the output here is rather scarce: while it does include the
    p-value, it doesn’t include the confidence interval. To run a t-test with more
    output, check out the `researchpy` module.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to analyzing our continuous variables. We’ll start with a correlation
    matrix. We can use the `corr()` method from `pandas`, including only the relevant
    variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s visualize the relationship between *weight* and *mpg* with a scatterplot
    as shown in [Figure 13-4](#mpg-weight-scatter-seaborn):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Scatter plot](assets/aina_1304.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-4\. Scatterplot of *mpg* by *weight*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Alternatively, we could produce scatterplots across all pairs of our dataset
    with the `pairplot()` function from `seaborn`. Histograms of each variable are
    included along the diagonal, as seen in [Figure 13-5](#seaborn-pairplot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Pairplot](assets/aina_1305.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-5\. Pairplot of *mpg*, *horsepower*, and *weight*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Linear Regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it’s time for a linear regression. To do this, we’ll use `linregress()`
    from `scipy`, which also looks for two `numpy` arrays or `pandas` Series. We’ll
    specify which variable is our independent and dependent variable with the `x`
    and `y` arguments, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Again, you’ll see that some of the output you may be used to is missing here.
    *Be careful:* the `rvalue` included is the *correlation coefficient*, not R-square.
    For a richer linear regression output, check out the `statsmodels` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, let’s overlay our regression line to a scatterplot. `seaborn`
    has a separate function to do just that: `regplot()`. As usual, we’ll specify
    our independent and dependent variables, and where to get the data. This results
    in [Figure 13-6](#mpg-scatter-reg-seaborn):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Fit scatter plot](assets/aina_1306.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13-6\. Scatterplot with fit regression line of *mpg* by *weight*
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Train/Test Split and Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the end of [Chapter 9](ch09.html#r-capstone) you learned how to apply a train/test
    split when building a linear regression model in R.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `train_test_split()` function to split our dataset into *four*
    DataFrames: not just by training and testing but also independent and dependent
    variables. We’ll pass in a DataFrame containing our independent variable first,
    then one containing the dependent variable. Using the `random_state` argument,
    we’ll seed the random number generator so the results remain consistent for this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the data is split 75/25 between training and testing subsets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s fit the model to the training data. First we’ll specify the linear
    model with `LinearRegression()`, then we’ll train the model with `regr.fit()`.
    To get the predicted values for the test dataset, we can use `predict()`. This
    results in a `numpy` array, not a `pandas` DataFrame, so the `head()` method won’t
    work to print the first few rows. We can, however, slice it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `coef_` attribute returns the coefficient of our test model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To get more information about the model, such as the coefficient p-values or
    R-squared, try fitting it with the `statsmodels` package.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we’ll evaluate the performance of the model on our test data, this
    time using the `metrics` submodule of `sklearn`. We’ll pass in our actual and
    predicted values to the `r2_score()` and `mean_squared_error()` functions, which
    will return the R-squared and RMSE, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The usual caveat applies to this chapter: we’ve just scratched the surface
    of what analysis is possible on this or any other dataset. But I hope you feel
    you’ve hit your stride on working with data in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take another look at the *ais* dataset, this time using Python. Read the Excel
    workbook in from the [book repository](https://oreil.ly/dsZDM) and complete the
    following. You should be pretty comfortable with this analysis by now.
  prefs: []
  type: TYPE_NORMAL
- en: Visualize the distribution of red blood cell count (*rcc*) by sex (*sex*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is there a significant difference in red blood cell count between the two groups
    of sex?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a correlation matrix of the relevant variables in this dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualize the relationship of height (*ht*) and weight (*wt*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regress *ht* on *wt*. Find the equation of the fit regression line. Is there
    a significant relationship?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Split your regression model into training and testing subsets. What is the R-squared
    and RMSE on your test model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
