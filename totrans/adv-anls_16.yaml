- en: 'Chapter 13\. Capstone: Python for Data Analytics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章\. 项目实战：Python 数据分析
- en: At the end of [Chapter 8](ch08.html#r-data-manipulation-visualization) you extended
    what you learned about R to explore and test relationships in the *mpg* dataset.
    We’ll do the same in this chapter, using Python. We’ve conducted the same work
    in Excel and R, so I’ll focus less on the whys of our analysis in favor of the
    hows of doing it in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 8 章](ch08.html#r-data-manipulation-visualization) 结尾，你扩展了对 R 的学习，以探索和测试
    *mpg* 数据集中的关系。在本章中，我们将使用 Python 进行相同的工作。我们在 Excel 和 R 中进行了相同的工作，所以我将更专注于如何在 Python
    中进行分析，而不是为什么要进行分析。
- en: 'To get started, let’s call in all the necessary modules. Some of these are
    new: from `scipy`, we’ll import the `stats` submodule. To do this, we’ll use the
    `from` keyword to tell Python what module to look for, then the usual `import`
    keyword to choose a sub-module. As the name suggests, we’ll use the `stats` submodule
    of `scipy` to conduct our statistical analysis. We’ll also be using a new package
    called `sklearn`, or *scikit-learn*, to validate our model on a train/test split.
    This package has become a dominant resource for machine learning and also comes
    installed with Anaconda.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请调用所有必要的模块。其中一些是新的：从 `scipy` 中，我们将导入 `stats` 子模块。为了告诉 Python 要查找哪个模块，我们将使用
    `from` 关键字，然后使用 `import` 关键字来选择一个子模块。正如其名，我们将使用 `scipy` 的 `stats` 子模块来进行统计分析。我们还将使用一个称为
    `sklearn` 或 *scikit-learn* 的新包，在训练/测试拆分上验证我们的模型。这个包已经成为机器学习的主要资源，并且与 Anaconda
    一起安装。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the `usecols` argument of `read_csv()` we can specify which columns to
    read into the DataFrame:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `read_csv()` 的 `usecols` 参数，我们可以指定读入 DataFrame 的列：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Exploratory Data Analysis
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索性数据分析
- en: 'Let’s start with the descriptive statistics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从描述统计开始：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Because *origin* is a categorical variable, by default it doesn’t show up as
    part of `describe()`. Let’s explore this variable instead with a frequency table.
    This can be done in `pandas` with the `crosstab()` function. First, we’ll specify
    what data to place on the index: *origin*. We’ll get a count for each level by
    setting the `columns` argument to `count`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 *origin* 是一个分类变量，默认情况下它不会显示为 `describe()` 的一部分。让我们改为用频率表探索这个变量。这可以在 `pandas`
    中用 `crosstab()` 函数来实现。首先，我们将指定将数据放在索引上的内容：*origin*。通过将 `columns` 参数设置为 `count`，我们将得到每个水平的计数：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To make a two-way frequency table, we can instead set `columns` to another
    categorical variable, such as `cylinders`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作双向频率表，我们可以将 `columns` 设置为另一个分类变量，如 `cylinders`：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let’s retrieve descriptive statistics for *mpg* by each level of *origin*.
    I’ll do this by chaining together two methods, then subsetting the results:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按 *origin* 水平检索 *mpg* 的描述统计信息。我将通过链接两种方法，然后子集化结果来完成这项工作：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also visualize the overall distribution of *mpg*, as in [Figure 13-1](#mpg-hist-seaborn):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以像 [图 13-1](#mpg-hist-seaborn) 那样可视化 *mpg* 的整体分布：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Histogram of MPG](assets/aina_1301.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![MPG 的直方图](assets/aina_1301.png)'
- en: Figure 13-1\. Histogram of *mpg*
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. *mpg* 的直方图
- en: 'Now let’s make a boxplot as in [Figure 13-2](#mpg-box-seaborn) comparing the
    distribution of *mpg* across each level of *origin*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们制作一个箱线图，如 [图 13-2](#mpg-box-seaborn)，比较每个 *origin* 水平上 *mpg* 的分布：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Box plot](assets/aina_1302.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![箱线图](assets/aina_1302.png)'
- en: Figure 13-2\. Boxplot of *mpg* by *origin*
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 按 *origin* 分组的 *mpg* 箱线图
- en: 'Alternatively, we can set the `col` argument of `displot()` to `origin` to
    create faceted histograms, such as in [Figure 13-3](#mpg-facet-seaborn):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以将 `displot()` 的 `col` 参数设置为 `origin` 来创建分面直方图，例如 [图 13-3](#mpg-facet-seaborn)：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Faceted histogram](assets/aina_1303.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![分面直方图](assets/aina_1303.png)'
- en: Figure 13-3\. Faceted histogram of *mpg* by *origin*
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-3\. 按 *origin* 分组的分面直方图
- en: Hypothesis Testing
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设检验
- en: Let’s again test for a difference in mileage between American and European cars.
    For ease of analysis, we’ll split the observations in each group into their own
    DataFrames.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次测试美国和欧洲汽车之间的里程差异。为了便于分析，我们将每个组中的观测分割成它们自己的数据框。
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Independent Samples T-test
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立样本 t 检验
- en: 'We can now use the `ttest_ind()` function from `scipy.stats` to conduct the
    t-test. This function expects two `numpy` arrays as arguments; `pandas` Series
    also work:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `scipy.stats` 中的 `ttest_ind()` 函数进行 t 检验。这个函数期望接收两个 `numpy` 数组作为参数；`pandas`
    的 Series 也可以使用：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Unfortunately, the output here is rather scarce: while it does include the
    p-value, it doesn’t include the confidence interval. To run a t-test with more
    output, check out the `researchpy` module.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这里的输出相当有限：虽然包括了p值，但未包括置信区间。要获得更多输出的t检验结果，请查看`researchpy`模块。
- en: 'Let’s move on to analyzing our continuous variables. We’ll start with a correlation
    matrix. We can use the `corr()` method from `pandas`, including only the relevant
    variables:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来分析我们的连续变量。我们将从相关矩阵开始。我们可以使用`pandas`中的`corr()`方法，只包括相关变量：
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, let’s visualize the relationship between *weight* and *mpg* with a scatterplot
    as shown in [Figure 13-4](#mpg-weight-scatter-seaborn):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用散点图可视化*weight*和*mpg*之间的关系，如[图 13-4](#mpg-weight-scatter-seaborn)所示：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Scatter plot](assets/aina_1304.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![散点图](assets/aina_1304.png)'
- en: Figure 13-4\. Scatterplot of *mpg* by *weight*
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-4\. *mpg*按*weight*的散点图
- en: 'Alternatively, we could produce scatterplots across all pairs of our dataset
    with the `pairplot()` function from `seaborn`. Histograms of each variable are
    included along the diagonal, as seen in [Figure 13-5](#seaborn-pairplot):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用`seaborn`的`pairplot()`函数在数据集的所有变量对上生成散点图。对角线上包括每个变量的直方图，如[图 13-5](#seaborn-pairplot)所示：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Pairplot](assets/aina_1305.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Pairplot](assets/aina_1305.png)'
- en: Figure 13-5\. Pairplot of *mpg*, *horsepower*, and *weight*
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-5\. *mpg*、*horsepower*和*weight*的Pairplot
- en: Linear Regression
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性回归
- en: 'Now it’s time for a linear regression. To do this, we’ll use `linregress()`
    from `scipy`, which also looks for two `numpy` arrays or `pandas` Series. We’ll
    specify which variable is our independent and dependent variable with the `x`
    and `y` arguments, respectively:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是进行线性回归的时候了。为此，我们将使用`scipy`中的`linregress()`函数，该函数同样适用于两个`numpy`数组或`pandas`
    Series。我们将使用`x`和`y`参数指定哪个变量是独立变量和依赖变量：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Again, you’ll see that some of the output you may be used to is missing here.
    *Be careful:* the `rvalue` included is the *correlation coefficient*, not R-square.
    For a richer linear regression output, check out the `statsmodels` module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，您会发现您习惯于看到的一些输出在这里是缺失的。*请注意：* 这里包含的`rvalue`是*相关系数*，而不是R平方。要获得更丰富的线性回归输出，请查看`statsmodels`模块。
- en: 'Last but not least, let’s overlay our regression line to a scatterplot. `seaborn`
    has a separate function to do just that: `regplot()`. As usual, we’ll specify
    our independent and dependent variables, and where to get the data. This results
    in [Figure 13-6](#mpg-scatter-reg-seaborn):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要，让我们在散点图上叠加回归线。`seaborn`有一个专门的函数来实现这一点：`regplot()`。与往常一样，我们将指定我们的独立和依赖变量，以及数据的来源。这将产生[图 13-6](#mpg-scatter-reg-seaborn)：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Fit scatter plot](assets/aina_1306.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![拟合散点图](assets/aina_1306.png)'
- en: Figure 13-6\. Scatterplot with fit regression line of *mpg* by *weight*
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-6\. *mpg*按*weight*的散点图与拟合回归线
- en: Train/Test Split and Validation
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练/测试拆分与验证
- en: At the end of [Chapter 9](ch09.html#r-capstone) you learned how to apply a train/test
    split when building a linear regression model in R.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](ch09.html#r-capstone)结束时，您学习了如何在构建R中的线性回归模型时应用训练/测试拆分。
- en: 'We will use the `train_test_split()` function to split our dataset into *four*
    DataFrames: not just by training and testing but also independent and dependent
    variables. We’ll pass in a DataFrame containing our independent variable first,
    then one containing the dependent variable. Using the `random_state` argument,
    we’ll seed the random number generator so the results remain consistent for this
    example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`train_test_split()`函数将数据集分为*四*个DataFrame：不仅包括训练和测试数据，还包括独立和依赖变量。我们将先传入包含独立变量的DataFrame，然后是包含依赖变量的DataFrame。使用`random_state`参数，我们会为随机数生成器设置种子，以确保本示例的结果保持一致：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, the data is split 75/25 between training and testing subsets:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据以75/25的比例分割为训练和测试子集。
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let’s fit the model to the training data. First we’ll specify the linear
    model with `LinearRegression()`, then we’ll train the model with `regr.fit()`.
    To get the predicted values for the test dataset, we can use `predict()`. This
    results in a `numpy` array, not a `pandas` DataFrame, so the `head()` method won’t
    work to print the first few rows. We can, however, slice it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将模型拟合到训练数据上。首先，我们将使用`LinearRegression()`指定线性模型，然后使用`regr.fit()`训练模型。要获取测试数据集的预测值，我们可以使用`predict()`方法。这将得到一个`numpy`数组，而不是`pandas`
    DataFrame，因此`head()`方法不能用来打印前几行。不过，我们可以对其进行切片操作：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `coef_` attribute returns the coefficient of our test model:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`coef_`属性返回了我们测试模型的系数：'
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To get more information about the model, such as the coefficient p-values or
    R-squared, try fitting it with the `statsmodels` package.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取关于模型的更多信息，如系数的p值或R平方，请尝试使用`statsmodels`包进行拟合。
- en: For now, we’ll evaluate the performance of the model on our test data, this
    time using the `metrics` submodule of `sklearn`. We’ll pass in our actual and
    predicted values to the `r2_score()` and `mean_squared_error()` functions, which
    will return the R-squared and RMSE, respectively.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将评估模型在测试数据上的表现，这次使用`sklearn`的`metrics`子模块。我们将实际值和预测值传递给`r2_score()`和`mean_squared_error()`函数，分别返回R平方和RMSE。
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'The usual caveat applies to this chapter: we’ve just scratched the surface
    of what analysis is possible on this or any other dataset. But I hope you feel
    you’ve hit your stride on working with data in Python.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章节的常规警告同样适用：我们只是触及了对这个或任何其他数据集可能进行的分析的表面。但我希望你感觉在使用Python处理数据方面已经步入佳境。
- en: Exercises
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Take another look at the *ais* dataset, this time using Python. Read the Excel
    workbook in from the [book repository](https://oreil.ly/dsZDM) and complete the
    following. You should be pretty comfortable with this analysis by now.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看*ais*数据集，这次使用Python。从[书籍仓库](https://oreil.ly/dsZDM)中读取Excel工作簿，并完成以下操作。现在你应该对这个分析已经非常熟悉了。
- en: Visualize the distribution of red blood cell count (*rcc*) by sex (*sex*).
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过性别（*sex*）可视化红细胞计数（*rcc*）的分布。
- en: Is there a significant difference in red blood cell count between the two groups
    of sex?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两组性别之间的红细胞计数是否存在显著差异？
- en: Produce a correlation matrix of the relevant variables in this dataset.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该数据集中生成相关变量的相关矩阵。
- en: Visualize the relationship of height (*ht*) and weight (*wt*).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化身高（*ht*）和体重（*wt*）之间的关系。
- en: Regress *ht* on *wt*. Find the equation of the fit regression line. Is there
    a significant relationship?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*wt*回归到*ht*上。找出拟合回归线的方程。是否存在显著关系？
- en: Split your regression model into training and testing subsets. What is the R-squared
    and RMSE on your test model?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将回归模型分割成训练集和测试集。测试模型的R平方和RMSE是多少？
