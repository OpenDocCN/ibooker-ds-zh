["```py\nimport reprlib\nr = reprlib.Repr()\nr.maxstring = 800\n\nurl1 = \"https://www.reuters.com/article/us-qualcomm-m-a-broadcom-5g/\\\n what-is-5g-and-who-are-the-major-players-idUSKCN1GR1IN\"\narticle_name1 = download_article(url1)\narticle1 = parse_article(article_name1)\nprint ('Article Published on', r.repr(article1['time']))\nprint (r.repr(article1['text']))\n\n```", "```py\nArticle Published on '2018-03-15T11:36:28+0000'\n'LONDON/SAN FRANCISCO (Reuters) - U.S. President Donald Trump has blocked\nmicrochip maker Broadcom Ltd’s (AVGO.O) $117 billion takeover of rival Qualcomm\n(QCOM.O) amid concerns that it would give China the upper hand in the next\ngeneration of mobile communications, or 5G. A 5G sign is seen at the Mobile\nWorld Congress in Barcelona, Spain February 28, 2018\\. REUTERS/Yves HermanBelow\nare some facts... 4G wireless and looks set to top the list of patent holders\nheading into the 5G cycle. Huawei, Nokia, Ericsson and others are also vying to\namass 5G patents, which has helped spur complex cross-licensing agreements like\nthe deal struck late last year Nokia and Huawei around handsets. Editing by Kim\nMiyoung in Singapore and Jason Neely in LondonOur Standards:The Thomson Reuters\nTrust Principles.'\n\n```", "```py\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk import tokenize\n\nsentences = tokenize.sent_tokenize(article1['text'])\ntfidfVectorizer = TfidfVectorizer()\nwords_tfidf = tfidfVectorizer.fit_transform(sentences)\n\n```", "```py\n# Parameter to specify number of summary sentences required\nnum_summary_sentence = 3\n\n# Sort the sentences in descending order by the sum of TF-IDF values\nsent_sum = words_tfidf.sum(axis=1)\nimportant_sent = np.argsort(sent_sum, axis=0)[::-1]\n\n# Print three most important sentences in the order they appear in the article\nfor i in range(0, len(sentences)):\n    if i in important_sent[:num_summary_sentence]:\n        print (sentences[i])\n\n```", "```py\nLONDON/SAN FRANCISCO (Reuters) - U.S. President Donald Trump has blocked\nmicrochip maker Broadcom Ltd’s (AVGO.O) $117 billion takeover of rival Qualcomm\n(QCOM.O) amid concerns that it would give China the upper hand in the next\ngeneration of mobile communications, or 5G.\n5G networks, now in the final testing stage, will rely on denser arrays of\nsmall antennas and the cloud to offer data speeds up to 50 or 100 times faster\nthan current 4G networks and serve as critical infrastructure for a range of\nindustries.\nThe concern is that a takeover by Singapore-based Broadcom could see the firm\ncut research and development spending by Qualcomm or hive off strategically\nimportant parts of the company to other buyers, including in China, U.S.\nofficials and analysts have said.\n\n```", "```py\nfrom sumy.parsers.plaintext import PlaintextParser\nfrom sumy.nlp.tokenizers import Tokenizer\nfrom sumy.nlp.stemmers import Stemmer\nfrom sumy.utils import get_stop_words\n\nfrom sumy.summarizers.lsa import LsaSummarizer\n\nLANGUAGE = \"english\"\nstemmer = Stemmer(LANGUAGE)\n\nparser = PlaintextParser.from_string(article1['text'], Tokenizer(LANGUAGE))\nsummarizer = LsaSummarizer(stemmer)\nsummarizer.stop_words = get_stop_words(LANGUAGE)\n\nfor sentence in summarizer(parser.document, num_summary_sentence):\n    print (str(sentence))\n\n```", "```py\nLONDON/SAN FRANCISCO (Reuters) - U.S. President Donald Trump has blocked\nmicrochip maker Broadcom Ltd’s (AVGO.O) $117 billion takeover of rival Qualcomm\n(QCOM.O) amid concerns that it would give China the upper hand in the next\ngeneration of mobile communications, or 5G.\nMoving to new networks promises to enable new mobile services and even whole\nnew business models, but could pose challenges for countries and industries\nunprepared to invest in the transition.\nThe concern is that a takeover by Singapore-based Broadcom could see the firm\ncut research and development spending by Qualcomm or hive off strategically\nimportant parts of the company to other buyers, including in China, U.S.\nofficials and analysts have said.\n\n```", "```py\nr.maxstring = 800\nurl2 = \"https://www.reuters.com/article/us-usa-economy-watchlist-graphic/\\\n predicting-the-next-u-s-recession-idUSKCN1V31JE\"\narticle_name2 = download_article(url2)\narticle2 = parse_article(article_name2)\nprint ('Article Published', r.repr(article1['time']))\nprint (r.repr(article2['text']))\n\n```", "```py\nArticle Published '2018-03-15T11:36:28+0000'\n'NEW YORK A protracted trade war between China and the United States, the\nworld’s largest economies, and a deteriorating global growth outlook has left\ninvestors apprehensive about the end to the longest expansion in American\nhistory. FILE PHOTO: Ships and shipping containers are pictured at the port of\nLong Beach in Long Beach, California, U.S., January 30, 2019\\.   REUTERS/Mike\nBlakeThe recent ...hton wrote in the June Cass Freight Index report.  12.\nMISERY INDEX The so-called Misery Index adds together the unemployment rate and\nthe inflation rate. It typically rises during recessions and sometimes prior to\ndownturns. It has slipped lower in 2019 and does not look very miserable.\nReporting by Saqib Iqbal Ahmed; Editing by Chizu NomiyamaOur Standards:The\nThomson Reuters Trust Principles.'\n\n```", "```py\nsummary_sentence = tfidf_summary(article2['text'], num_summary_sentence)\nfor sentence in summary_sentence:\n    print (sentence)\n\n```", "```py\nREUTERS/Mike BlakeThe recent rise in U.S.-China trade war tensions has brought\nforward the next U.S. recession, according to a majority of economists polled\nby Reuters who now expect the Federal Reserve to cut rates again in September\nand once more next year.\nOn Tuesday, U.S. stocks jumped sharply higher and safe-havens like the Japanese\nyen and Gold retreated after the U.S. Trade Representative said additional\ntariffs on some Chinese goods, including cell phones and laptops, will be\ndelayed to Dec. 15.\nISM said its index of national factory activity slipped to 51.2 last month, the\nlowest reading since August 2016, as U.S. manufacturing activity slowed to a\nnear three-year low in July and hiring at factories shifted into lower gear,\nsuggesting a further loss of momentum in economic growth early in the third\nquarter.\n\n```", "```py\nsummary_sentence = lsa_summary(article2['text'], num_summary_sentence)\nfor sentence in summary_sentence:\n    print (sentence)\n\n```", "```py\nNEW YORK A protracted trade war between China and the United States, the\nworld’s largest economies, and a deteriorating global growth outlook has left\ninvestors apprehensive about the end to the longest expansion in American\nhistory.\nREUTERS/Mike BlakeThe recent rise in U.S.-China trade war tensions has brought\nforward the next U.S. recession, according to a majority of economists polled\nby Reuters who now expect the Federal Reserve to cut rates again in September\nand once more next year.\nTrade tensions have pulled corporate confidence and global growth to multi-year\nlows and U.S. President Donald Trump’s announcement of more tariffs have raised\ndownside risks significantly, Morgan Stanley analysts said in a recent note.\n\n```", "```py\nfrom sumy.summarizers.text_rank import TextRankSummarizer\n\nparser = PlaintextParser.from_string(article2['text'], Tokenizer(LANGUAGE))\nsummarizer = TextRankSummarizer(stemmer)\nsummarizer.stop_words = get_stop_words(LANGUAGE)\n\nfor sentence in summarizer(parser.document, num_summary_sentence):\n    print (str(sentence))\n\n```", "```py\nREUTERS/Mike BlakeThe recent rise in U.S.-China trade war tensions has brought\nforward the next U.S. recession, according to a majority of economists polled\nby Reuters who now expect the Federal Reserve to cut rates again in September\nand once more next year.\nAs recession signals go, this so-called inversion in the yield curve has a\nsolid track record as a predictor of recessions.\nMarkets turned down before the 2001 recession and tumbled at the start of the\n2008 recession.\n\n```", "```py\nparser = PlaintextParser.from_string(article1['text'], Tokenizer(LANGUAGE))\nsummarizer = TextRankSummarizer(stemmer)\nsummarizer.stop_words = get_stop_words(LANGUAGE)\n\nfor sentence in summarizer(parser.document, num_summary_sentence):\n    print (str(sentence))\n\n```", "```py\nAcquiring Qualcomm would represent the jewel in the crown of Broadcom’s\nportfolio of communications chips, which supply wi-fi, power management, video\nand other features in smartphones alongside Qualcomm’s core baseband chips -\nradio modems that wirelessly connect phones to networks.\nQualcomm (QCOM.O) is the dominant player in smartphone communications chips,\nmaking half of all core baseband radio chips in smartphones.\nSlideshow (2 Images)The standards are set by a global body to ensure all phones\nwork across different mobile networks, and whoever’s essential patents end up\nmaking it into the standard stands to reap huge royalty licensing revenue\nstreams.\n\n```", "```py\np_wiki = wiki_wiki.page('Mongol_invasion_of_Europe')\nprint (r.repr(p_wiki.text))\n\n```", "```py\n'The Mongol invasion of Europe in the 13th century occurred from the 1220s into\nthe 1240s. In Eastern Europe, the Mongols destroyed Volga Bulgaria, Cumania,\nAlania, and the Kievan Rus\\' federation. In Central Europe, the Mongol armies\nlaunched a tw...tnotes\\nReferences\\nSverdrup, Carl (2010). \"Numbers in Mongol\nWarfare\". Journal of Medieval Military History. Boydell Press. 8: 109–17 [p.\n115]. ISBN 978-1-84383-596-7.\\n\\nFurther reading\\nExternal links\\nThe Islamic\nWorld to 1600: The Golden Horde'\n\n```", "```py\nr.maxstring = 200\n\nnum_summary_sentence = 10\n\nsummary_sentence = textrank_summary(p_wiki.text, num_summary_sentence)\n\nfor sentence in summary_sentence:\n    print (sentence)\n\n```", "```py\nnum_summary_sentence = 3\ngold_standard = article2['headline']\nsummary = \"\"\n\nsummary = ''.join(textrank_summary(article2['text'], num_summary_sentence))\nscorer = rouge_scorer.RougeScorer(['rouge1'], use_stemmer=True)\nscores = scorer.score(gold_standard, summary)\nprint_rouge_score(scores)\n\n```", "```py\nrouge1 Precision: 0.06 Recall: 0.83 fmeasure: 0.11\n\n```", "```py\nsummary = ''.join(lsa_summary(article2['text'], num_summary_sentence))\nscores = scorer.score(gold_standard, summary)\nprint_rouge_score(scores)\n\n```", "```py\nrouge1 Precision: 0.04 Recall: 0.83 fmeasure: 0.08\n\n```", "```py\nnum_summary_sentence = 10\ngold_standard = p_wiki.summary\n\nsummary = ''.join(textrank_summary(p_wiki.text, num_summary_sentence))\n\nscorer = rouge_scorer.RougeScorer(['rouge2','rougeL'], use_stemmer=True)\nscores = scorer.score(gold_standard, summary)\nprint_rouge_score(scores)\n\n```", "```py\nrouge2 Precision: 0.18 Recall: 0.46 fmeasure: 0.26\nrougeL Precision: 0.16 Recall: 0.40 fmeasure: 0.23\n\n```", "```py\nsummary = ''.join(lsa_summary(p_wiki.text, num_summary_sentence))\n\nscorer = rouge_scorer.RougeScorer(['rouge2','rougeL'], use_stemmer=True)\nscores = scorer.score(gold_standard, summary)\nprint_rouge_score(scores)\n\n```", "```py\nrouge2 Precision: 0.04 Recall: 0.08 fmeasure: 0.05\nrougeL Precision: 0.12 Recall: 0.25 fmeasure: 0.16\n\n```", "```py\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('travel_threads.csv', sep='|', dtype={'ThreadID': 'object'})\ndf[df['ThreadID']=='60763_5_3122150'].head(1).T\n\n```", "```py\n# Applying regex based cleaning function\ndf['text'] = df['text'].apply(regex_clean)\n# Extracting lemmas using spacy pipeline\ndf['lemmas'] = df['text'].apply(clean)\n\n```", "```py\nfrom sklearn.model_selection import GroupShuffleSplit\n\ngss = GroupShuffleSplit(n_splits=1, test_size=0.2)\ntrain_split, test_split = next(gss.split(df, groups=df['ThreadID']))\n\n```", "```py\ntrain_df = df.iloc[train_split]\ntest_df = df.iloc[test_split]\n\nprint ('Number of threads for Training ', train_df['ThreadID'].nunique())\nprint ('Number of threads for Testing ', test_df['ThreadID'].nunique())\n\n```", "```py\nNumber of threads for Training  559\nNumber of threads for Testing  140\n\n```", "```py\nimport textdistance\n\ncompression_factor = 0.3\n\ntrain_df['similarity'] = train_df.apply(\n    lambda x: textdistance.jaro_winkler(x.text, x.summary), axis=1)\ntrain_df[\"rank\"] = train_df.groupby(\"ThreadID\")[\"similarity\"].rank(\n    \"max\", ascending=False)\n\ntopN = lambda x: x <= np.ceil(compression_factor * x.max())\ntrain_df['summaryPost'] = train_df.groupby('ThreadID')['rank'].apply(topN)\n\n```", "```py\ntrain_df[['text','summaryPost']][train_df['ThreadID']=='60763_5_3122150'].head(3)\n\n```", "```py\ntrain_df.loc[train_df['text'].str.len() <= 20, 'summaryPost'] = False\n\n```", "```py\ntrain_df['titleSimilarity'] = train_df.apply(\n    lambda x: textdistance.jaro_winkler(x.text, x.Title), axis=1)\n\n```", "```py\n# Adding post length as a feature\ntrain_df['textLength'] = train_df['text'].str.len()\n\n```", "```py\nfeature_cols = ['titleSimilarity','textLength','postNum']\n\n```", "```py\ntrain_df['combined'] = [\n    ' '.join(map(str, l)) for l in train_df['lemmas'] if l is not '']\ntfidf = TfidfVectorizer(min_df=10, ngram_range=(1, 2), stop_words=\"english\")\ntfidf_result = tfidf.fit_transform(train_df['combined']).toarray()\n\ntfidf_df = pd.DataFrame(tfidf_result, columns=tfidf.get_feature_names())\ntfidf_df.columns = [\"word_\" + str(x) for x in tfidf_df.columns]\ntfidf_df.index = train_df.index\ntrain_df_tf = pd.concat([train_df[feature_cols], tfidf_df], axis=1)\n\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel1 = RandomForestClassifier()\nmodel1.fit(train_df_tf, train_df['summaryPost'])\n\n```", "```py\nRandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='auto',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=100,\n                       n_jobs=None, oob_score=False, random_state=20, verbose=0,\n                       warm_start=False)\n\n```", "```py\n# Function to calculate rouge_score for each thread\ndef calculate_rouge_score(x, column_name):\n    # Get the original summary - only first value since they are repeated\n    ref_summary = x['summary'].values[0]\n\n    # Join all posts that have been predicted as summary\n    predicted_summary = ''.join(x['text'][x[column_name]])\n\n    # Return the rouge score for each ThreadID\n    scorer = rouge_scorer.RougeScorer(['rouge1'], use_stemmer=True)\n    scores = scorer.score(ref_summary, predicted_summary)\n    return scores['rouge1'].fmeasure\n\n```", "```py\ntest_df['predictedSummaryPost'] = model1.predict(test_df_tf)\nprint('Mean ROUGE-1 Score for test threads',\n      test_df.groupby('ThreadID')[['summary','text','predictedSummaryPost']] \\\n      .apply(calculate_rouge_score, column_name='predictedSummaryPost').mean())\n\n```", "```py\nMean ROUGE-1 Score for test threads 0.3439714323225145\n\n```", "```py\nrandom.seed(2)\nrandom.sample(test_df['ThreadID'].unique().tolist(), 1)\n\n```", "```py\n['60974_588_2180141']\n\n```", "```py\nexample_df = test_df[test_df['ThreadID'] == '60974_588_2180141']\nprint('Total number of posts', example_df['postNum'].max())\nprint('Number of summary posts',\n      example_df[example_df['predictedSummaryPost']].count().values[0])\nprint('Title: ', example_df['Title'].values[0])\nexample_df[['postNum', 'text']][example_df['predictedSummaryPost']]\n\n```", "```py\nTotal number of posts 9\nNumber of summary posts 2\nTitle:  What's fun for kids?\n\n```"]