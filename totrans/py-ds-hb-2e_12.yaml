- en: Chapter 10\. Fancy Indexing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：Fancy索引
- en: The previous chapters discussed how to access and modify portions of arrays
    using simple indices (e.g., `arr[0]`), slices (e.g., `arr[:5]`), and Boolean masks
    (e.g., `arr[arr > 0]`). In this chapter, we’ll look at another style of array
    indexing, known as *fancy* or *vectorized* indexing, in which we pass arrays of
    indices in place of single scalars. This allows us to very quickly access and
    modify complicated subsets of an array’s values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的章节讨论了如何使用简单索引（例如 `arr[0]`）、切片（例如 `arr[:5]`）和布尔掩码（例如 `arr[arr > 0]`）来访问和修改数组的部分内容。在本章中，我们将看看另一种数组索引方式，称为*fancy*或*向量化*索引，在这种方式中，我们传递数组索引替代单个标量。这使得我们能够非常快速地访问和修改数组值的复杂子集。
- en: Exploring Fancy Indexing
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Fancy索引
- en: 'Fancy indexing is conceptually simple: it means passing an array of indices
    to access multiple array elements at once. For example, consider the following
    array:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Fancy索引在概念上很简单：它意味着传递一个索引数组以一次访问多个数组元素。例如，考虑以下数组：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Suppose we want to access three different elements. We could do it like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要访问三个不同的元素。我们可以这样做：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, we can pass a single list or array of indices to obtain the
    same result:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以传递一个单一的索引列表或数组来获取相同的结果：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When using arrays of indices, the shape of the result reflects the shape of
    the *index arrays* rather than the shape of the *array being indexed*:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用索引数组时，结果的形状反映了*索引数组的形状*而不是*被索引数组的形状*：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Fancy indexing also works in multiple dimensions. Consider the following array:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: fancy索引也适用于多维度。考虑以下数组：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Like with standard indexing, the first index refers to the row, and the second
    to the column:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就像标准索引一样，第一个索引指的是行，第二个指的是列：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that the first value in the result is `X[0, 2]`, the second is `X[1,
    1]`, and the third is `X[2, 3]`. The pairing of indices in fancy indexing follows
    all the broadcasting rules that were mentioned in [Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting).
    So, for example, if we combine a column vector and a row vector within the indices,
    we get a two-dimensional result:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意结果中的第一个值是 `X[0, 2]`，第二个是 `X[1, 1]`，第三个是 `X[2, 3]`。在fancy索引中索引的配对遵循所有广播规则，这些规则在[第八章](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)中已经提到。因此，例如，如果我们在索引中组合列向量和行向量，我们将得到一个二维结果：
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, each row value is matched with each column vector, exactly as we saw
    in broadcasting of arithmetic operations. For example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每行的值与每列向量匹配，正如我们在算术操作的广播中看到的一样。例如：
- en: '[PRE7]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is always important to remember with fancy indexing that the return value
    reflects the *broadcasted shape of the indices*, rather than the shape of the
    array being indexed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用fancy索引时，始终重要的是记住返回值反映了*广播后的索引形状*，而不是被索引数组的形状。
- en: Combined Indexing
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合索引
- en: 'For even more powerful operations, fancy indexing can be combined with the
    other indexing schemes we’ve seen. For example, given the array `X`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更强大的操作，可以将fancy索引与我们之前看到的其他索引方案结合使用。例如，给定数组 `X`：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can combine fancy and simple indices:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将fancy索引与简单索引结合使用：
- en: '[PRE9]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also combine fancy indexing with slicing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将fancy索引与切片结合使用：
- en: '[PRE10]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And we can combine fancy indexing with masking:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我们可以将fancy索引与掩码结合使用：
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All of these indexing options combined lead to a very flexible set of operations
    for efficiently accessing and modifying array values.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些索引选项的结合为有效访问和修改数组值提供了非常灵活的操作集。
- en: 'Example: Selecting Random Points'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：选择随机点
- en: 'One common use of fancy indexing is the selection of subsets of rows from a
    matrix. For example, we might have an <math alttext="upper N"><mi>N</mi></math>
    × <math alttext="upper D"><mi>D</mi></math> matrix representing <math alttext="upper
    N"><mi>N</mi></math> points in <math alttext="upper D"><mi>D</mi></math> dimensions,
    such as the following points drawn from a two-dimensional normal distribution:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: fancy索引的一个常见用途是从矩阵中选择行的子集。例如，我们可能有一个表示<math alttext="upper N"><mi>N</mi></math>
    × <math alttext="upper D"><mi>D</mi></math>维度的矩阵，如从二维正态分布中抽取的以下点：
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the plotting tools we will discuss in [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib),
    we can visualize these points as a scatter plot ([Figure 10-1](#fig_0207-fancy-indexing_files_in_output_31_0)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们将在[第四部分](part04.xhtml#section-0400-introduction-to-matplotlib)讨论的绘图工具，我们可以将这些点可视化为散点图（[Figure 10-1](#fig_0207-fancy-indexing_files_in_output_31_0)）。
- en: '[PRE13]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![output 31 0](assets/output_31_0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![output 31 0](assets/output_31_0.png)'
- en: Figure 10-1\. Normally distributed points
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1。正态分布的点
- en: 'Let’s use fancy indexing to select 20 random points. We’ll do this by first
    choosing 20 random indices with no repeats, and using these indices to select
    a portion of the original array:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用高级索引选择20个随机点。我们将首先选择20个随机索引，而不重复，然后使用这些索引来选择原始数组的一部分：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now to see which points were selected, let’s overplot large circles at the locations
    of the selected points (see [Figure 10-2](#fig_0207-fancy-indexing_files_in_output_36_0)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了查看选定的点，请在选定点的位置上添加大圆圈（请参阅[图10-2](#fig_0207-fancy-indexing_files_in_output_36_0)）。
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![output 36 0](assets/output_36_0.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![output 36 0](assets/output_36_0.png)'
- en: Figure 10-2\. Random selection among points
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-2。点之间的随机选择
- en: This sort of strategy is often used to quickly partition datasets, as is often
    needed in train/test splitting for validation of statistical models (see [Chapter 39](ch39.xhtml#section-0503-hyperparameters-and-model-validation)),
    and in sampling approaches to answering statistical questions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略通常用于快速分割数据集，就像在统计模型验证中经常需要的训练/测试拆分那样（见[第39章](ch39.xhtml#section-0503-hyperparameters-and-model-validation)），以及回答统计问题的抽样方法。
- en: Modifying Values with Fancy Indexing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级索引修改值
- en: 'Just as fancy indexing can be used to access parts of an array, it can also
    be used to modify parts of an array. For example, imagine we have an array of
    indices and we’d like to set the corresponding items in an array to some value:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如高级索引可用于访问数组的部分一样，它也可以用于修改数组的部分。例如，想象一下我们有一个索引数组，我们想将数组中的相应项目设置为某个值：
- en: '[PRE17]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can use any assignment-type operator for this. For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何赋值类型的运算符。例如：
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Notice, though, that repeated indices with these operations can cause some
    potentially unexpected results. Consider the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用这些操作的重复索引可能会导致一些可能意想不到的结果。请考虑以下情况：
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Where did the 4 go? This operation first assigns `x[0] = 4`, followed by `x[0]
    = 6`. The result, of course, is that `x[0]` contains the value 6.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 4去哪了？此操作首先将`x[0] = 4`赋值，然后是`x[0] = 6`。结果，当然是`x[0]`包含值6。
- en: 'Fair enough, but consider this operation:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 够公平了，但请考虑以下操作：
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You might expect that `x[3]` would contain the value 2 and `x[4]` would contain
    the value 3, as this is how many times each index is repeated. Why is this not
    the case? Conceptually, this is because `x[i] += 1` is meant as a shorthand of
    `x[i] = x[i] + 1`. `x[i] + 1` is evaluated, and then the result is assigned to
    the indices in `x`. With this in mind, it is not the augmentation that happens
    multiple times, but the assignment, which leads to the rather nonintuitive results.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能期望`x[3]`包含值2，`x[4]`包含值3，因为这是每个索引重复的次数。为什么不是这种情况？从概念上讲，这是因为`x[i] += 1`被理解为`x[i]
    = x[i] + 1`的简写形式。`x[i] + 1`被计算，然后结果被赋值给`x`中的索引。考虑到这一点，增加发生的次数不是多次，而是分配，这导致了相当非直观的结果。
- en: 'So what if you want the other behavior where the operation is repeated? For
    this, you can use the `at` method of ufuncs and do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果您想要重复操作的其他行为呢？对此，您可以使用ufuncs的`at`方法，并执行以下操作：
- en: '[PRE21]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `at` method does an in-place application of the given operator at the specified
    indices (here, `i`) with the specified value (here, 1). Another method that is
    similar in spirit is the `reduceat` method of ufuncs, which you can read about
    in the [NumPy documentation](https://oreil.ly/7ys9D).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`at`方法在指定的索引（这里是`i`）处以指定的值（这里是1）进行给定操作的就地应用。另一种在精神上类似的方法是ufuncs的`reduceat`方法，您可以在[NumPy文档](https://oreil.ly/7ys9D)中阅读有关它的信息。'
- en: 'Example: Binning Data'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例：分箱数据
- en: 'You could use these ideas to efficiently do custom binned computations on data.
    For example, imagine we have 100 values and would like to quickly find where they
    fall within an array of bins. We could compute this using `ufunc.at` like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用这些思想来有效地对数据进行自定义分组计算。例如，假设我们有100个值，并且想要快速找到它们在一个箱子数组中的位置。我们可以像这样使用`ufunc.at`来计算：
- en: '[PRE22]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The counts now reflect the number of points within each bin—in other words,
    a histogram (see [Figure 10-3](#fig_0207-fancy-indexing_files_in_output_52_0)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，计数反映了每个箱中的点数——换句话说，是一个直方图（请参阅[图10-3](#fig_0207-fancy-indexing_files_in_output_52_0)）。
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![output 52 0](assets/output_52_0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![output 52 0](assets/output_52_0.png)'
- en: Figure 10-3\. A histogram computed by hand
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-3。手动计算的直方图
- en: 'Of course, it would be inconvenient to have to do this each time you want to
    plot a histogram. This is why Matplotlib provides the `plt.hist` routine, which
    does the same in a single line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每次想要绘制直方图时都这样做是很不方便的。这就是为什么Matplotlib提供了`plt.hist`例程，它可以在一行代码中完成相同的操作：
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This function will create a nearly identical plot to the one just shown. To
    compute the binning, Matplotlib uses the `np.histogram` function, which does a
    very similar computation to what we did before. Let’s compare the two here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将创建一个几乎与刚刚显示的图表完全相同的图。为了计算分箱，Matplotlib 使用了`np.histogram`函数，这个函数与我们之前做过的计算非常相似。让我们在这里比较一下两者：
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Our own one-line algorithm is twice as fast as the optimized algorithm in NumPy!
    How can this be? If you dig into the `np.histogram` source code (you can do this
    in IPython by typing `np.histogram??`), you’ll see that it’s quite a bit more
    involved than the simple search-and-count that we’ve done; this is because NumPy’s
    algorithm is more flexible, and particularly is designed for better performance
    when the number of data points becomes large:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己的一行代码算法比NumPy中优化算法快两倍！这怎么可能呢？如果你深入查看`np.histogram`的源代码（你可以在IPython中键入`np.histogram??`来做到这一点），你会看到它比我们做的简单的搜索和计数要复杂得多；这是因为NumPy的算法更灵活，特别是在数据点数量变大时性能更好的设计：
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'What this comparison shows is that algorithmic efficiency is almost never a
    simple question. An algorithm efficient for large datasets will not always be
    the best choice for small datasets, and vice versa (see [Chapter 11](ch11.xhtml#section-0208-sorting)).
    But the advantage of coding this algorithm yourself is that with an understanding
    of these basic methods, the sky is the limit: you’re no longer constrained to
    built-in routines, but can create your own approaches to exploring the data. Key
    to efficiently using Python in data-intensive applications is not only knowing
    about general convenience routines like `np.histogram` and when they’re appropriate,
    but also knowing how to make use of lower-level functionality when you need more
    pointed behavior.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个比较显示的是算法效率几乎从来都不是一个简单的问题。一个对大数据集有效的算法并不总是小数据集的最佳选择，反之亦然（见[第11章](ch11.xhtml#section-0208-sorting)）。但是自己编写此算法的优势在于，掌握了这些基本方法之后，天空就是你的极限：你不再局限于内置程序，而是可以创造自己的方法来探索数据。在数据密集型应用中高效使用Python的关键不仅在于了解像`np.histogram`这样的通用方便函数及其适用时机，还在于知道如何在需要更具针对性行为时利用低级功能。
