["```py\n$ mkdir taxidata\n$ cd taxidata\n$ curl -O https://storage.googleapis.com/aas-data-sets/trip_data_1.csv.zip\n$ unzip trip_data_1.csv.zip\n$ head -n 5 trip_data_1.csv\n\n...\n\nmedallion,hack_license,vendor_id,rate_code,store_and_fwd_flag,...\n89D227B655E5C82AECF13C3F540D4CF4,BA96DE419E711691B9445D6A6307C170,CMT,1,...\n0BD7C8F5BA12B88E0B67BED28BEA73D8,9FD8F69F0804BDB5549F40E9DA1BE472,CMT,1,...\n0BD7C8F5BA12B88E0B67BED28BEA73D8,9FD8F69F0804BDB5549F40E9DA1BE472,CMT,1,...\nDFD2202EE08F7A8DC9A57B02ACB81FE2,51EE87E3205C985EF8431D850C786310,CMT,1,...\n```", "```py\n$ mkdir taxidata\n$ mv trip_data_1.csv taxidata/\n```", "```py\n$ pyspark\n```", "```py\ntaxi_raw = pyspark.read.option(\"header\", \"true\").csv(\"taxidata\")\ntaxi_raw.show(1, vertical=True)\n\n...\n\nRECORD 0----------------------------------\n medallion          | 89D227B655E5C82AE...\n hack_license       | BA96DE419E711691B...\n vendor_id          | CMT\n rate_code          | 1\n store_and_fwd_flag | N\n pickup_datetime    | 2013-01-01 15:11:48\n dropoff_datetime   | 2013-01-01 15:18:10\n passenger_count    | 4\n trip_time_in_secs  | 382\n trip_distance      | 1.0\n pickup_longitude   | -73.978165\n pickup_latitude    | 40.757977\n dropoff_longitude  | -73.989838\n dropoff_latitude   | 40.751171\nonly showing top 1 row\n\n...\n```", "```py\ntaxi_raw.printSchema()\n...\nroot\n |-- medallion: string (nullable = true)\n |-- hack_license: string (nullable = true)\n |-- vendor_id: string (nullable = true)\n |-- rate_code: integer (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- pickup_datetime: string (nullable = true)\n |-- dropoff_datetime: string (nullable = true)\n |-- passenger_count: integer (nullable = true)\n |-- trip_time_in_secs: integer (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- pickup_longitude: double (nullable = true)\n |-- pickup_latitude: double (nullable = true)\n |-- dropoff_longitude: double (nullable = true)\n |-- dropoff_latitude: double (nullable = true)\n ...\n```", "```py\nfrom pyspark.sql import functions as fun\n\ntaxi_raw = taxi_raw.withColumn('pickup_datetime',\n                                fun.to_timestamp(fun.col('pickup_datetime'),\n                                                \"yyyy-MM-dd HH:mm:ss\"))\ntaxi_raw = taxi_raw.withColumn('dropoff_datetime',\n                                fun.to_timestamp(fun.col('dropoff_datetime'),\n                                                \"yyyy-MM-dd HH:mm:ss\"))\n```", "```py\ntaxi_raw.printSchema()\n...\n\nroot\n |-- medallion: string (nullable = true)\n |-- hack_license: string (nullable = true)\n |-- vendor_id: string (nullable = true)\n |-- rate_code: integer (nullable = true)\n |-- store_and_fwd_flag: string (nullable = true)\n |-- pickup_datetime: timestamp (nullable = true)\n |-- dropoff_datetime: timestamp (nullable = true)\n |-- passenger_count: integer (nullable = true)\n |-- trip_time_in_secs: integer (nullable = true)\n |-- trip_distance: double (nullable = true)\n |-- pickup_longitude: double (nullable = true)\n |-- pickup_latitude: double (nullable = true)\n |-- dropoff_longitude: double (nullable = true)\n |-- dropoff_latitude: double (nullable = true)\n\n ...\n```", "```py\ntaxi_raw.sort(fun.col(\"pickup_datetime\").desc()).show(3, vertical=True)\n...\n\n-RECORD 0----------------------------------\n medallion          | EA00A64CBDB68C77D...\n hack_license       | 2045C77002FA0F2E0...\n vendor_id          | CMT\n rate_code          | 1\n store_and_fwd_flag | N\n pickup_datetime    | 2013-01-31 23:59:59\n dropoff_datetime   | 2013-02-01 00:08:39\n passenger_count    | 1\n trip_time_in_secs  | 520\n trip_distance      | 1.5\n pickup_longitude   | -73.970528\n pickup_latitude    | 40.75502\n dropoff_longitude  | -73.981201\n dropoff_latitude   | 40.769104\n-RECORD 1----------------------------------\n medallion          | E3F00BB3F4E710383...\n hack_license       | 10A2B96DE39865918...\n vendor_id          | CMT\n rate_code          | 1\n store_and_fwd_flag | N\n pickup_datetime    | 2013-01-31 23:59:59\n dropoff_datetime   | 2013-02-01 00:05:16\n passenger_count    | 1\n trip_time_in_secs  | 317\n trip_distance      | 1.0\n pickup_longitude   | -73.990685\n pickup_latitude    | 40.719158\n dropoff_longitude  | -74.003288\n dropoff_latitude   | 40.71521\n-RECORD 2----------------------------------\n medallion          | 83D8E776A05EEF731...\n hack_license       | E6D27C8729EF55D20...\n vendor_id          | CMT\n rate_code          | 1\n store_and_fwd_flag | N\n pickup_datetime    | 2013-01-31 23:59:58\n dropoff_datetime   | 2013-02-01 00:04:19\n passenger_count    | 1\n trip_time_in_secs  | 260\n trip_distance      | 0.8\n pickup_longitude   | -73.982452\n pickup_latitude    | 40.77277\n dropoff_longitude  | -73.989227\n dropoff_latitude   | 40.766754\nonly showing top 3 rows\n...\n```", "```py\ngeospatial_temporal_colnames = [\"pickup_longitude\", \"pickup_latitude\", \\\n                                \"dropoff_longitude\", \"dropoff_latitude\", \\\n                                \"pickup_datetime\", \"dropoff_datetime\"]\ntaxi_raw.select([fun.count(fun.when(fun.isnull(c), c)).\\\n                            alias(c) for c in geospatial_temporal_colnames]).\\\n                show()\n...\n\n+----------------+---------------+-----------------\n|pickup_longitude|pickup_latitude|dropoff_longitude\n+----------------+---------------+-----------------\n|               0|              0|               86\n+----------------+---------------+-----------------\n+----------------+---------------+----------------+\n|dropoff_latitude|pickup_datetime|dropoff_datetime|\n+----------------+---------------+----------------+\n|              86|              0|               0|\n+----------------+---------------+----------------+\n```", "```py\ntaxi_raw = taxi_raw.na.drop(subset=geospatial_temporal_colnames)\n```", "```py\nprint(\"Count of zero dropoff, pickup latitude and longitude records\")\ntaxi_raw.groupBy((fun.col(\"dropoff_longitude\") == 0) |\n  (fun.col(\"dropoff_latitude\") == 0) |\n  (fun.col(\"pickup_longitude\") == 0) |\n  (fun.col(\"pickup_latitude\") == 0)).\\ ![1](assets/1.png)\n    count().show()\n...\n\nCount of zero dropoff, pickoff latitude and longitude records\n+---------------+\n| ...  |   count|\n+------+--------+\n| true |  285909|\n| false|14490620|\n+---------------+\n```", "```py\n$ url=\"https://nycdatastables.s3.amazonaws.com/\\\n 2013-08-19T18:15:35.172Z/nyc-borough-boundaries-polygon.geojson\"\n$ curl -O $url\n$ mv nyc-borough-boundaries-polygon.geojson nyc-boroughs.geojson\n```", "```py\n$ head -n 7 data/trip_data_ch07/nyc-boroughs.geojson\n...\n{\n\"type\": \"FeatureCollection\",\n\n\"features\": [{ \"type\": \"Feature\", \"id\": 0, \"properties\": { \"boroughCode\": 5, ...\n,\n{ \"type\": \"Feature\", \"id\": 1, \"properties\": { \"boroughCode\": 5, ...\n```", "```py\npip3 install geopandas\n```", "```py\nimport geopandas as gdp\n\ngdf = gdp.read_file(\"./data/trip_data_ch07/nyc-boroughs.geojson\")\n```", "```py\ngdf = gdf.to_crs(3857)\n\ngdf['area'] = gdf.apply(lambda x: x['geometry'].area, axis=1)\ngdf.head(5)\n...\n\n    boroughCode  borough        @id     geometry     area\n0   5            Staten Island \thttp://nyc.pediacities.com/Resource/Borough/St...\n1   5            Staten Island \thttp://nyc.pediacities.com/Resource/Borough/St...\n2   5            Staten Island \thttp://nyc.pediacities.com/Resource/Borough/St...\n3   5            Staten Island \thttp://nyc.pediacities.com/Resource/Borough/St...\n4   4            Queens         http://nyc.pediacities.com/Resource/Borough/Qu...\n```", "```py\ngdf = gdf.sort_values(by=['boroughCode', 'area'], ascending=[True, False])\ngdf.head(5)\n...\n    boroughCode  borough    @id     geometry     area\n72  1            Manhattan  http://nyc.pediacities.com/Resource/Borough/Ma...\n71  1            Manhattan  http://nyc.pediacities.com/Resource/Borough/Ma...\n51  1            Manhattan  http://nyc.pediacities.com/Resource/Borough/Ma...\n69  1            Manhattan  http://nyc.pediacities.com/Resource/Borough/Ma...\n73  1            Manhattan  http://nyc.pediacities.com/Resource/Borough/Ma...\n```", "```py\nb_gdf = spark.sparkContext.broadcast(gdf)\n\ndef find_borough(latitude,longitude):\n    mgdf = b_gdf.value.apply(lambda x: x['borough'] if \\\n                              x['geometry'].\\\n                              intersects(gdp.\\\n                                        points_from_xy(\n                                            [longitude], \\\n                                            [latitude])[0]) \\\n                              else None, axis=1)\n    idx = mgdf.first_valid_index()\n    return mgdf.loc[idx] if idx is not None else None\n\nfind_borough_udf = fun.udf(find_borough, StringType())\n```", "```py\ndf_with_boroughs = taxi_raw.\\\n                    withColumn(\"dropoff_borough\", \\\n                              find_borough_udf(\n                                fun.col(\"dropoff_latitude\"),\\\n                                fun.col('dropoff_longitude')))\n\ndf_with_boroughs.groupBy(fun.col(\"dropoff_borough\")).count().show()\n...\n+-----------------------+--------+\n|     dropoff_borough   |   count|\n+-----------------------+--------+\n|                 Queens|  672192|\n|                   null| 7942421|\n|               Brooklyn|  715252|\n|          Staten Island|    3338|\n|              Manhattan|12979047|\n|                  Bronx|   67434|\n+-----------------------+--------+\n```", "```py\nfrom pyspark.sql import Window\n\nwindow_spec = Window.partitionBy(\"hack_license\").\\\n                      orderBy(fun.col(\"hack_license\"),\n                              fun.col(\"pickup_datetime\"))\n```", "```py\nwindow_spec.cache()\n```", "```py\ndf_ with_ borough_durations = df_with_boroughs.\\\n            withColumn(\"trip_time_difference\", \\\n            fun.col(\"pickup_datetime\") - fun.lag(fun.col(\"pickup_datetime\"),\n                                          1). \\\n            over(window_spec)).show(50, vertical=True)\n```", "```py\ndf_with_borough_durations.\n  selectExpr(\"floor(seconds / 3600) as hours\").\n  groupBy(\"hours\").\n  count().\n  sort(\"hours\").\n  show()\n...\n+-----+--------+\n|hours|   count|\n+-----+--------+\n|   -3|       2|\n|   -2|      16|\n|   -1|    4253|\n|    0|13359033|\n|    1|  347634|\n|    2|   76286|\n|    3|   24812|\n|    4|   10026|\n|    5|    4789|\n```", "```py\ndf_with_borough_durations.\n  where(\"seconds > 0 AND seconds < 60*60*4\").\n  groupBy(\"borough\").\n  agg(avg(\"seconds\"), stddev(\"seconds\")).\n  show()\n...\n+-------------+------------------+--------------------+\n|      borough|      avg(seconds)|stddev_samp(seconds)|\n+-------------+------------------+--------------------+\n|       Queens|2380.6603554494727|  2206.6572799118035|\n|           NA|  2006.53571169866|  1997.0891370324784|\n|     Brooklyn| 1365.394576250576|  1612.9921698951398|\n|Staten Island|         2723.5625|  2395.7745475546385|\n|    Manhattan| 631.8473780726746|   1042.919915477234|\n|        Bronx|1975.9209786770646|   1704.006452085683|\n+-------------+------------------+--------------------+\n```"]