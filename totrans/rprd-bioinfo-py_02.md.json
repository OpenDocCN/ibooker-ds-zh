["```py\n$ cd 01_dna\n```", "```py\n$ cp solution1_iter.py dna.py\n```", "```py\n$ ./dna.py\nusage: dna.py [-h] DNA\ndna.py: error: the following arguments are required: DNA\n```", "```py\n$ ./dna.py ACCGGGTTTT\n1 2 3 4\n```", "```py\n$ cat tests/inputs/input2.txt\nAGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n```", "```py\n$ ./dna.py tests/inputs/input2.txt\n20 12 17 21\n```", "```py\n$ pytest\n=========================== test session starts ===========================\n...\ncollected 4 items\n\ntests/dna_test.py ....                                              [100%]\n\n============================ 4 passed in 0.41s ============================\n```", "```py\n$ rm dna.py\n```", "```py\n$ new.py --purpose 'Tetranucleotide frequency' dna.py\nDone, see new script \"dna.py.\"\n```", "```py\n$ ./dna.py --help\nusage: dna.py [-h] [-a str] [-i int] [-f FILE] [-o] str\n\nTetranucleotide frequency ![1](assets/1.png)\n\npositional arguments:\n  str                   A positional argument ![2](assets/2.png)\n\noptional arguments:\n  -h, --help            show this help message and exit ![3](assets/3.png)\n  -a str, --arg str     A named string argument (default: ) ![4](assets/4.png)\n  -i int, --int int     A named integer argument (default: 0) ![5](assets/5.png)\n  -f FILE, --file FILE  A readable file (default: None) ![6](assets/6.png)\n  -o, --on              A boolean flag (default: False) ![7](assets/7.png)\n```", "```py\n$ ./dna.py -h\nusage: dna.py [-h] DNA\n\nTetranucleotide frequency\n\npositional arguments:\n  DNA         Input DNA sequence\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ ./dna.py AACC GGTT\nusage: dna.py [-h] DNA\ndna.py: error: unrecognized arguments: GGTT\n```", "```py\n#!/usr/bin/env python3 ![1](assets/1.png)\n\"\"\" Tetranucleotide frequency \"\"\" ![2](assets/2.png)\n\nimport argparse ![3](assets/3.png)\n\n# --------------------------------------------------\ndef get_args(): ![4](assets/4.png)\n    \"\"\" Get command-line arguments \"\"\" ![5](assets/5.png)\n\n    parser = argparse.ArgumentParser( ![6](assets/6.png)\n        description='Tetranucleotide frequency',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('dna', metavar='DNA', help='Input DNA sequence') ![7](assets/7.png)\n\n    return parser.parse_args() ![8](assets/8.png)\n\n# --------------------------------------------------\ndef main(): ![9](assets/9.png)\n    \"\"\" Make a jazz noise here \"\"\"\n\n    args = get_args() ![10](assets/10.png)\n    print(args.dna)   ![11](assets/11.png)\n\n# --------------------------------------------------\nif __name__ == '__main__': ![12](assets/12.png)\n    main()\n```", "```py\ndef main():\n    args = get_args()\n    print(args.dna / 2) ![1](assets/1.png)\n```", "```py\n$ ./dna.py ACGT\nTraceback (most recent call last):\n  File \"./dna.py\", line 30, in <module>\n    main()\n  File \"./dna.py\", line 25, in main\n    print(args.dna / 2)\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n```", "```py\n$ pylint dna.py\n\n-------------------------------------------------------------------\nYour code has been rated at 10.00/10 (previous run: 9.78/10, +0.22)\n```", "```py\n$ mypy dna.py\nSuccess: no issues found in 1 source file\n```", "```py\n>>> seqs = []\n```", "```py\n>>> seqs = list()\n```", "```py\n>>> type(seqs)\n<class 'list'>\n```", "```py\n>>> seqs.append('ACT')\n>>> seqs\n['ACT']\n```", "```py\n>>> seqs.extend(['GCA', 'TTT'])\n>>> seqs\n['ACT', 'GCA', 'TTT']\n```", "```py\n>>> seqs\n['ACT', 'GCA', 'TTT']\n```", "```py\n>>> print(seqs)\n['ACT', 'GCA', 'TTT']\n```", "```py\n>>> seqs[0] = 'TCA'\n```", "```py\n>>> seqs\n['TCA', 'GCA', 'TTT']\n```", "```py\n>>> seqs = 'TCA', 'GCA', 'TTT'\n>>> type(seqs)\n<class 'tuple'>\n```", "```py\n>>> seqs = ('TCA', 'GCA', 'TTT')\n>>> type(seqs)\n<class 'tuple'>\n```", "```py\n>>> seqs.append('GGT')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'tuple' object has no attribute 'append'\n```", "```py\n>>> seqs[0] = 'TCA'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n```", "```py\n>>> seq = ('CAM_0231669729', 'GTGTTTATTCAATGCTAG')\n```", "```py\n>>> from collections import namedtuple\n```", "```py\n>>> Sequence = namedtuple('Sequence', ['id', 'seq'])\n```", "```py\n>>> type(Sequence)\n<class 'type'>\n```", "```py\n>>> seq1 = Sequence('CAM_0231669729', 'GTGTTTATTCAATGCTAG')\n>>> type(seq1)\n<class '__main__.Sequence'>\n```", "```py\n>>> seq2 = Sequence(seq='GTGTTTATTCAATGCTAG', id='CAM_0231669729')\n>>> seq2\nSequence(id='CAM_0231669729', seq='GTGTTTATTCAATGCTAG')\n```", "```py\n>>> 'ID = ' + seq1[0]\n'ID = CAM_0231669729'\n>>> 'seq = ' + seq1[1]\n'seq = GTGTTTATTCAATGCTAG'\n```", "```py\n>>> 'ID = ' + seq1.id\n'ID = CAM_0231669729'\n>>> 'seq = ' + seq1.seq\n'seq = GTGTTTATTCAATGCTAG'\n```", "```py\n>>> seq1.id = 'XXX'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n```", "```py\n>>> from typing import NamedTuple\n>>> class Sequence(NamedTuple):\n...     id: str\n...     seq: str\n...\n```", "```py\n>>> type(Sequence)\n<class 'type'>\n```", "```py\n>>> seq3 = Sequence('CAM_0231669729', 'GTGTTTATTCAATGCTAG')\n>>> type(seq3)\n<class '__main__.Sequence'>\n```", "```py\n>>> seq3.id, seq3.seq\n('CAM_0231669729', 'GTGTTTATTCAATGCTAG')\n```", "```py\n>>> seq4 = Sequence(id='CAM_0231669729', seq=3.14)\n```", "```py\n>>> seq4\nSequence(id='CAM_0231669729', seq=3.14)\n>>> type(seq4.seq)\n<class 'float'>\n```", "```py\n#!/usr/bin/env python3\n\"\"\"Tetranucleotide frequency\"\"\"\n\nimport argparse\nfrom typing import NamedTuple ![1](assets/1.png)\n\nclass Args(NamedTuple): ![2](assets/2.png)\n    \"\"\" Command-line arguments \"\"\"\n    dna: str ![3](assets/3.png)\n\n# --------------------------------------------------\ndef get_args() -> Args: ![4](assets/4.png)\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Tetranucleotide frequency',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('dna', metavar='DNA', help='Input DNA sequence')\n\n    args = parser.parse_args() ![5](assets/5.png)\n\n    return Args(args.dna) ![6](assets/6.png)\n\n# --------------------------------------------------\ndef main() -> None: ![7](assets/7.png)\n    \"\"\" Make a jazz noise here \"\"\"\n\n    args = get_args()\n    print(args.dna / 2) ![8](assets/8.png)\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()\n```", "```py\n$ mypy dna.py\ndna.py:32: error: Unsupported operand types for / (\"str\" and \"int\")\nFound 1 error in 1 file (checked 1 source file)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(args.dna) ![1](assets/1.png)\n```", "```py\n$ ./dna.py ACGT\nACGT\n```", "```py\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Tetranucleotide frequency',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('dna', metavar='DNA', help='Input DNA sequence')\n\n    args = parser.parse_args()\n\n    if os.path.isfile(args.dna):  ![1](assets/1.png)\n        args.dna = open(args.dna).read().rstrip()   ![2](assets/2.png)\n\n    return Args(args.dna)\n```", "```py\n$ ./dna.py ACGT\nACGT\n```", "```py\n$ ./dna.py tests/inputs/input2.txt\nAGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC\n```", "```py\n\"\"\" Tests for dna.py \"\"\" ![1](assets/1.png)\n\nimport os ![2](assets/2.png)\nimport platform ![3](assets/3.png)\nfrom subprocess import getstatusoutput ![4](assets/4.png)\n\nPRG = './dna.py' ![5](assets/5.png)\nRUN = f'python {PRG}' if platform.system() == 'Windows' else PRG ![6](assets/6.png)\nTEST1 = ('./tests/inputs/input1.txt', '1 2 3 4') ![7](assets/7.png)\nTEST2 = ('./tests/inputs/input2.txt', '20 12 17 21')\nTEST3 = ('./tests/inputs/input3.txt', '196 231 237 246')\n```", "```py\ndef test_exists(): ![1](assets/1.png)\n    \"\"\" Program exists \"\"\"\n\n    assert os.path.exists(PRG) ![2](assets/2.png)\n```", "```py\ndef test_usage() -> None:\n    \"\"\" Prints usage \"\"\"\n\n    for arg in ['-h', '--help']: ![1](assets/1.png)\n        rv, out = getstatusoutput(f'{RUN} {arg}') ![2](assets/2.png)\n        assert rv == 0 ![3](assets/3.png)\n        assert out.lower().startswith('usage:') ![4](assets/4.png)\n```", "```py\ndef test_dies_no_args() -> None:\n    \"\"\" Dies with no arguments \"\"\"\n\n    rv, out = getstatusoutput(RUN) ![1](assets/1.png)\n    assert rv != 0 ![2](assets/2.png)\n    assert out.lower().startswith('usage:') ![3](assets/3.png)\n```", "```py\ndef test_arg():\n    \"\"\" Uses command-line arg \"\"\"\n\n    for file, expected in [TEST1, TEST2, TEST3]: ![1](assets/1.png)\n        dna = open(file).read() ![2](assets/2.png)\n        retval, out = getstatusoutput(f'{RUN} {dna}') ![3](assets/3.png)\n        assert retval == 0 ![4](assets/4.png)\n        assert out == expected ![5](assets/5.png)\n```", "```py\ndef test_file():\n    \"\"\" Uses file arg \"\"\"\n\n    for file, expected in [TEST1, TEST2, TEST3]:\n        retval, out = getstatusoutput(f'{RUN} {file}') ![1](assets/1.png)\n        assert retval == 0\n        assert out == expected\n```", "```py\n$ pytest -xv\n============================= test session starts ==============================\n...\n\ntests/dna_test.py::test_exists PASSED                                    [ 25%]\ntests/dna_test.py::test_usage PASSED                                     [ 50%]\ntests/dna_test.py::test_arg FAILED                                       [ 75%]\n\n=================================== FAILURES ===================================\n___________________________________ test_arg ___________________________________\n\n    def test_arg():\n        \"\"\" Uses command-line arg \"\"\"\n\n        for file, expected in [TEST1, TEST2, TEST3]:\n            dna = open(file).read()\n            retval, out = getstatusoutput(f'{RUN} {dna}')\n            assert retval == 0\n>           assert out == expected  ![1](assets/1.png)\nE           AssertionError: assert 'ACCGGGTTTT' == '1 2 3 4'  ![2](assets/2.png)\nE             - 1 2 3 4\nE             + ACCGGGTTTT\n\ntests/dna_test.py:36: AssertionError\n=========================== short test summary info ============================\nFAILED tests/dna_test.py::test_arg - AssertionError: assert 'ACCGGGTTTT' == '...\n!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!\n========================= 1 failed, 2 passed in 0.35s ==========================\n```", "```py\n$ ./dna.py A\n1 0 0 0\n```", "```py\n$ ./dna.py C\n0 1 0 0\n```", "```py\n>>> dna = 'ACGT'\n```", "```py\n>>> type(dna)\n<class 'str'>\n```", "```py\n>>> for base in dna: ![1](assets/1.png)\n...     print(base)  ![2](assets/2.png)\n...\nA\nC\nG\nT\n```", "```py\n>>> count_a = 0\n>>> count_c = 0\n>>> count_g = 0\n>>> count_t = 0\n```", "```py\n>>> count_a, count_c, count_g, count_t = 0, 0, 0, 0\n```", "```py\nfor base in dna:\n    if base == 'C': ![1](assets/1.png)\n        count_c = count_c + 1 ![2](assets/2.png)\n```", "```py\ndna = 'ACCGGGTTTT'\ncount_a, count_c, count_g, count_t = 0, 0, 0, 0\nfor base in dna:\n    if base == 'A':\n        count_a += 1\n    elif base == 'C':\n        count_c += 1\n    elif base == 'G':\n        count_g += 1\n    elif base == 'T':\n        count_t += 1\n```", "```py\n>>> count_a, count_c, count_g, count_t\n(1, 2, 3, 4)\n```", "```py\n>>> print(count_a, count_c, count_g, count_t)\n1 2 3 4\n```", "```py\n>>> print(count_a, count_c, count_g, count_t, sep='::')\n1::2::3::4\n```", "```py\n>>> print(count_a, count_c, count_g, count_t, end='\\n-30-\\n')\n1 2 3 4\n-30-\n```", "```py\n$ python3 -m pip install pytest-pylint pytest-flake8 pytest-mypy\n```", "```py\n$ python3 -m pip install -r requirements.txt\n```", "```py\n$ pytest -xv --pylint --flake8 --mypy tests/dna_test.py\n========================== test session starts ===========================\n...\ncollected 7 items\n\ntests/dna_test.py::FLAKE8 SKIPPED                                  [ 12%]\ntests/dna_test.py::mypy PASSED                                     [ 25%]\ntests/dna_test.py::test_exists PASSED                              [ 37%]\ntests/dna_test.py::test_usage PASSED                               [ 50%]\ntests/dna_test.py::test_dies_no_args PASSED                        [ 62%]\ntests/dna_test.py::test_arg PASSED                                 [ 75%]\ntests/dna_test.py::test_file PASSED                                [ 87%]\n::mypy PASSED                                                      [100%]\n================================== mypy ==================================\n\nSuccess: no issues found in 1 source file\n====================== 7 passed, 1 skipped in 0.58s ======================\n```", "```py\n$ cat Makefile\n.PHONY: test\n\ntest:\n\tpython3 -m pytest -xv --flake8 --pylint --pylint-rcfile=../pylintrc \\\n    --mypy dna.py tests/dna_test.py\n\nall:\n\t../bin/all_test.py dna.py\n```", "```py\ndef count(dna: str) -> Tuple[int, int, int, int]: ![1](assets/1.png)\n    \"\"\" Count bases in DNA \"\"\"\n\n    count_a, count_c, count_g, count_t = 0, 0, 0, 0 ![2](assets/2.png)\n    for base in dna:\n        if base == 'A':\n            count_a += 1\n        elif base == 'C':\n            count_c += 1\n        elif base == 'G':\n            count_g += 1\n        elif base == 'T':\n            count_t += 1\n\n    return (count_a, count_c, count_g, count_t) ![3](assets/3.png)\n```", "```py\ndef test_count() -> None: ![1](assets/1.png)\n    \"\"\" Test count \"\"\"\n\n    assert count('') == (0, 0, 0, 0) ![2](assets/2.png)\n    assert count('123XYZ') == (0, 0, 0, 0)\n    assert count('A') == (1, 0, 0, 0) ![3](assets/3.png)\n    assert count('C') == (0, 1, 0, 0)\n    assert count('G') == (0, 0, 1, 0)\n    assert count('T') == (0, 0, 0, 1)\n    assert count('ACCGGGTTTT') == (1, 2, 3, 4)\n```", "```py\n$ pytest -xv dna.py\n=========================== test session starts ===========================\n...\n\ndna.py::test_count PASSED                                           [100%]\n\n============================ 1 passed in 0.01s ============================\n```", "```py\n$ ./dna.py \"\"\n0 0 0 0\n```", "```py\n$ touch empty\n$ ./dna.py empty\n0 0 0 0\n```", "```py\n$ ./dna.py /dev/null\n0 0 0 0\n```", "```py\n$ pytest -v dna.py\n============================ test session starts =============================\n...\ncollected 1 item\n\ndna.py::test_count PASSED                                              [100%]\n\n============================= 1 passed in 0.01s ==============================\n```", "```py\ndef main() -> None:\n    args = get_args()\n    count_a, count_c, count_g, count_t = count(args.dna) ![1](assets/1.png)\n    print('{} {} {} {}'.format(count_a, count_c, count_g, count_t)) ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    counts = count(args.dna) ![1](assets/1.png)\n    print('{} {} {} {}'.format(*counts)) ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print('{} {} {} {}'.format(*count(args.dna))) ![1](assets/1.png)\n```", "```py\n>>> seq = 'ACCGGGTTTT'\n>>> seq.count('A')\n1\n>>> seq.count('C')\n2\n```", "```py\n>>> 'AAA'.count('T')\n0\n```", "```py\ndef count(dna: str) -> Tuple[int, int, int, int]: ![1](assets/1.png)\n    \"\"\" Count bases in DNA \"\"\"\n\n    return (dna.count('A'), dna.count('C'), dna.count('G'), dna.count('T')) ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    count_a, count_c, count_g, count_t = count(args.dna) ![1](assets/1.png)\n    print(f'{count_a} {count_c} {count_g} {count_t}') ![2](assets/2.png)\n```", "```py\n>>> seq = 'ACGT'\n>>> f'The sequence \"{seq}\" has {len(seq)} bases.'\n'The sequence \"ACGT\" has 4 bases.'\n```", "```py\ndef count(dna: str) -> Tuple[int, int, int, int]: ![1](assets/1.png)\n    \"\"\" Count bases in DNA \"\"\"\n\n    counts = {} ![2](assets/2.png)\n    for base in dna: ![3](assets/3.png)\n        if base not in counts: ![4](assets/4.png)\n            counts[base] = 0 ![5](assets/5.png)\n        counts[base] += 1 ![6](assets/6.png)\n\n    return (counts.get('A', 0), ![7](assets/7.png)\n            counts.get('C', 0),\n            counts.get('G', 0),\n            counts.get('T', 0))\n```", "```py\n>>> counts = {}\n```", "```py\n>>> counts = dict()\n```", "```py\n>>> type(counts)\n<class 'dict'>\n```", "```py\n>>> isinstance(counts, dict)\nTrue\n```", "```py\n>>> counts\n{'A': 1, 'C': 2, 'G': 3, 'T': 4}\n```", "```py\n>>> counts['G']\n3\n```", "```py\n>>> counts['N']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'N'\n```", "```py\n>>> 'N' in counts\nFalse\n>>> 'T' in counts\nTrue\n```", "```py\n>>> seq = 'ACCGGGTTTT'\n>>> counts = {}\n>>> for base in seq:\n...     if not base in counts:\n...         counts[base] = 0\n...     counts[base] += 1\n...\n>>> counts\n{'A': 1, 'C': 2, 'G': 3, 'T': 4}\n```", "```py\n>>> counts['A'], counts['C'], counts['G'], counts['T']\n(1, 2, 3, 4)\n```", "```py\n>>> counts.get('T')\n4\n>>> counts.get('N')\n```", "```py\n>>> counts.get('A', 0), counts.get('C', 0), counts.get('G', 0),\n    counts.get('T', 0)\n(1, 2, 3, 4)\n```", "```py\ndef count(dna: str) -> Dict[str, int]: ![1](assets/1.png)\n    \"\"\" Count bases in DNA \"\"\"\n\n    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0} ![2](assets/2.png)\n    for base in dna: ![3](assets/3.png)\n        if base in counts: ![4](assets/4.png)\n            counts[base] += 1 ![5](assets/5.png)\n\n    return counts ![6](assets/6.png)\n```", "```py\ndef test_count() -> None:\n    \"\"\" Test count \"\"\"\n\n    assert count('') == {'A': 0, 'C': 0, 'G': 0, 'T': 0} ![1](assets/1.png)\n    assert count('123XYZ') == {'A': 0, 'C': 0, 'G': 0, 'T': 0} ![2](assets/2.png)\n    assert count('A') == {'A': 1, 'C': 0, 'G': 0, 'T': 0}\n    assert count('C') == {'A': 0, 'C': 1, 'G': 0, 'T': 0}\n    assert count('G') == {'A': 0, 'C': 0, 'G': 1, 'T': 0}\n    assert count('T') == {'A': 0, 'C': 0, 'G': 0, 'T': 1}\n    assert count('ACCGGGTTTT') == {'A': 1, 'C': 2, 'G': 3, 'T': 4}\n```", "```py\n>>> counts1 = {'A': 1, 'C': 2, 'G': 3, 'T': 4}\n>>> counts2 = {'T': 4, 'G': 3, 'C': 2, 'A': 1}\n>>> counts1 == counts2\nTrue\n```", "```py\ndef main() -> None:\n    args = get_args()\n    counts = count(args.dna) ![1](assets/1.png)\n    print('{} {} {} {}'.format(counts['A'], counts['C'], counts['G'], ![2](assets/2.png)\n                               counts['T']))\n```", "```py\n>>> from collections import defaultdict\n```", "```py\n>>> counts = defaultdict(int)\n```", "```py\n>>> counts['A']\n0\n```", "```py\n>>> counts['C'] += 1\n>>> counts\ndefaultdict(<class 'int'>, {'A': 0, 'C': 1})\n```", "```py\ndef count(dna: str) -> Dict[str, int]:\n    \"\"\" Count bases in DNA \"\"\"\n\n    counts: Dict[str, int] = defaultdict(int) ![1](assets/1.png)\n\n    for base in dna:\n        counts[base] += 1 ![2](assets/2.png)\n\n    return counts\n```", "```py\ndef test_count() -> None:\n    \"\"\" Test count \"\"\"\n\n    assert count('') == {} ![1](assets/1.png)\n    assert count('123XYZ') == {'1': 1, '2': 1, '3': 1, 'X': 1, 'Y': 1, 'Z': 1} ![2](assets/2.png)\n    assert count('A') == {'A': 1} ![3](assets/3.png)\n    assert count('C') == {'C': 1}\n    assert count('G') == {'G': 1}\n    assert count('T') == {'T': 1}\n    assert count('ACCGGGTTTT') == {'A': 1, 'C': 2, 'G': 3, 'T': 4}\n```", "```py\ndef main() -> None:\n    args = get_args()\n    counts = count(args.dna) ![1](assets/1.png)\n    print(counts.get('A', 0), counts.get('C', 0), counts.get('G', 0), ![2](assets/2.png)\n          counts.get('T', 0))\n```", "```py\n>>> from collections import Counter\n>>> Counter('ACCGGGTTT')\nCounter({'G': 3, 'T': 3, 'C': 2, 'A': 1})\n```", "```py\ndef main() -> None:\n    args = get_args()\n    counts = Counter(args.dna) ![1](assets/1.png)\n    print(counts.get('A', 0), counts.get('C', 0), counts.get('G', 0), ![2](assets/2.png)\n          counts.get('T', 0))\n```"]