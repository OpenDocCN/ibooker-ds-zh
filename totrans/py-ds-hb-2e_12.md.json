["```py\nIn [1]: import numpy as np\n        rng = np.random.default_rng(seed=1701)\n\n        x = rng.integers(100, size=10)\n        print(x)\nOut[1]: [90 40  9 30 80 67 39 15 33 79]\n```", "```py\nIn [2]: [x[3], x[7], x[2]]\nOut[2]: [30, 15, 9]\n```", "```py\nIn [3]: ind = [3, 7, 4]\n        x[ind]\nOut[3]: array([30, 15, 80])\n```", "```py\nIn [4]: ind = np.array([[3, 7],\n                        [4, 5]])\n        x[ind]\nOut[4]: array([[30, 15],\n               [80, 67]])\n```", "```py\nIn [5]: X = np.arange(12).reshape((3, 4))\n        X\nOut[5]: array([[ 0,  1,  2,  3],\n               [ 4,  5,  6,  7],\n               [ 8,  9, 10, 11]])\n```", "```py\nIn [6]: row = np.array([0, 1, 2])\n        col = np.array([2, 1, 3])\n        X[row, col]\nOut[6]: array([ 2,  5, 11])\n```", "```py\nIn [7]: X[row[:, np.newaxis], col]\nOut[7]: array([[ 2,  1,  3],\n               [ 6,  5,  7],\n               [10,  9, 11]])\n```", "```py\nIn [8]: row[:, np.newaxis] * col\nOut[8]: array([[0, 0, 0],\n               [2, 1, 3],\n               [4, 2, 6]])\n```", "```py\nIn [9]: print(X)\nOut[9]: [[ 0  1  2  3]\n         [ 4  5  6  7]\n         [ 8  9 10 11]]\n```", "```py\nIn [10]: X[2, [2, 0, 1]]\nOut[10]: array([10,  8,  9])\n```", "```py\nIn [11]: X[1:, [2, 0, 1]]\nOut[11]: array([[ 6,  4,  5],\n                [10,  8,  9]])\n```", "```py\nIn [12]: mask = np.array([True, False, True, False])\n         X[row[:, np.newaxis], mask]\nOut[12]: array([[ 0,  2],\n                [ 4,  6],\n                [ 8, 10]])\n```", "```py\nIn [13]: mean = [0, 0]\n         cov = [[1, 2],\n                [2, 5]]\n         X = rng.multivariate_normal(mean, cov, 100)\n         X.shape\nOut[13]: (100, 2)\n```", "```py\nIn [14]: %matplotlib inline\n         import matplotlib.pyplot as plt\n         plt.style.use('seaborn-whitegrid')\n\n         plt.scatter(X[:, 0], X[:, 1]);\n```", "```py\nIn [15]: indices = np.random.choice(X.shape[0], 20, replace=False)\n         indices\nOut[15]: array([82, 84, 10, 55, 14, 33,  4, 16, 34, 92, 99, 64,  8, 76, 68, 18, 59,\n                80, 87, 90])\n```", "```py\nIn [16]: selection = X[indices]  # fancy indexing here\n         selection.shape\nOut[16]: (20, 2)\n```", "```py\nIn [17]: plt.scatter(X[:, 0], X[:, 1], alpha=0.3)\n         plt.scatter(selection[:, 0], selection[:, 1],\n                     facecolor='none', edgecolor='black', s=200);\n```", "```py\nIn [18]: x = np.arange(10)\n         i = np.array([2, 1, 8, 4])\n         x[i] = 99\n         print(x)\nOut[18]: [ 0 99 99  3 99  5  6  7 99  9]\n```", "```py\nIn [19]: x[i] -= 10\n         print(x)\nOut[19]: [ 0 89 89  3 89  5  6  7 89  9]\n```", "```py\nIn [20]: x = np.zeros(10)\n         x[[0, 0]] = [4, 6]\n         print(x)\nOut[20]: [6. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n```", "```py\nIn [21]: i = [2, 3, 3, 4, 4, 4]\n         x[i] += 1\n         x\nOut[21]: array([6., 0., 1., 1., 1., 0., 0., 0., 0., 0.])\n```", "```py\nIn [22]: x = np.zeros(10)\n         np.add.at(x, i, 1)\n         print(x)\nOut[22]: [0. 0. 1. 2. 3. 0. 0. 0. 0. 0.]\n```", "```py\nIn [23]: rng = np.random.default_rng(seed=1701)\n         x = rng.normal(size=100)\n\n         # compute a histogram by hand\n         bins = np.linspace(-5, 5, 20)\n         counts = np.zeros_like(bins)\n\n         # find the appropriate bin for each x\n         i = np.searchsorted(bins, x)\n\n         # add 1 to each of these bins\n         np.add.at(counts, i, 1)\n```", "```py\nIn [24]: # plot the results\n         plt.plot(bins, counts, drawstyle='steps');\n```", "```py\nplt.hist(x, bins, histtype='step');\n```", "```py\nIn [25]: print(f\"NumPy histogram ({len(x)} points):\")\n         %timeit counts, edges = np.histogram(x, bins)\n\n         print(f\"Custom histogram ({len(x)} points):\")\n         %timeit np.add.at(counts, np.searchsorted(bins, x), 1)\nOut[25]: NumPy histogram (100 points):\n         33.8 µs ± 311 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n         Custom histogram (100 points):\n         17.6 µs ± 113 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n```", "```py\nIn [26]: x = rng.normal(size=1000000)\n         print(f\"NumPy histogram ({len(x)} points):\")\n         %timeit counts, edges = np.histogram(x, bins)\n\n         print(f\"Custom histogram ({len(x)} points):\")\n         %timeit np.add.at(counts, np.searchsorted(bins, x), 1)\nOut[26]: NumPy histogram (1000000 points):\n         84.4 ms ± 2.82 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n         Custom histogram (1000000 points):\n         128 ms ± 2.04 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```"]