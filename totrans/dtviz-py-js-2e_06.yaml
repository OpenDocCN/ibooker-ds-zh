- en: Chapter 4\. Webdev 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 Webdev 101
- en: This chapter introduces the core web-development knowledge you will need to
    understand the web pages you scrape for data and to structure those you want to
    deliver as the skeleton of your JavaScripted visualizations. As you’ll see, a
    little knowledge goes a long way in modern webdev, particularly when your focus
    is building self-contained visualizations and not entire websites (see [“Single-Page
    Apps”](#spas) for more details).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了核心的网页开发知识，这些知识将帮助你理解你要抓取数据的网页，并结构化那些你想要作为JavaScript可视化骨架传递的网页。正如你将看到的，对现代网页开发来说，一点点知识就可以走很长的路，特别是当你的重点是构建独立的可视化而不是整个网站（详见[“单页面应用”](#spas)获取更多详情）。
- en: 'The usual caveats apply: this chapter is part reference, part tutorial. There
    will probably be stuff here you know already, so feel free to skip over it and
    get to the new material.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这章既是参考，又是教程。这里可能有您已经了解的内容，所以可以自由跳过，直接阅读新材料。
- en: The Big Picture
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大局观
- en: The humble web page, the basic building block of the World Wide Web (WWW)—that
    fraction of the internet consumed by humans—​is constructed from files of various
    types. Apart from the multimedia files (images, videos, sound, etc.), the key
    elements are textual, consisting of Hypertext Markup Language (HTML), Cascading
    Style Sheets (CSS), and JavaScript. These three, along with any necessary data
    files, are delivered using the Hypertext Transfer Protocol (HTTP) and used to
    build the page you see and interact with in your browser window, which is described
    by the Document Object Model (DOM), a hierarchical tree off which your content
    hangs. A basic understanding of how these elements interact is vital to building
    modern web visualizations, and the aim of this chapter is to get you quickly up
    to speed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 谦逊的网页，作为万维网（WWW）—人类使用的互联网的一部分—的基本构建块，由各种类型的文件构成。除了多媒体文件（图片、视频、声音等），关键元素是文本，由超文本标记语言（HTML）、层叠样式表（CSS）和JavaScript组成。这三者，连同任何必要的数据文件，使用超文本传输协议（HTTP）传递，并用于构建您在浏览器窗口中看到和交互的页面，这由文档对象模型（DOM）描述，一个您的内容悬挂的分层树。了解这些元素如何互动是构建现代Web可视化的重要基础，而本章的目的就是让您迅速掌握这些知识。
- en: Web development is a big field, and the aim here is not to turn you into a full-fledged
    web developer. I assume you want to limit the amount of webdev you have to do
    as much as possible, focusing only on that fraction necessary to build a modern
    visualization. In order to build the sort of visualizations showcased at [*d3js.org*](https://d3js.org),
    published in the *New York Times*, or incorporated in basic interactive data dashboards,
    you actually need surprisingly little webdev fu. The result of your labors should
    be easy to add to a larger website by someone dedicated to that job. In the case
    of small, personal websites, it’s easy enough to incorporate the visualization
    yourself.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Web开发是一个广阔的领域，这里的目标不是让您成为一个全面的Web开发人员。我假设您希望尽可能地减少必须进行的Web开发工作量，只专注于构建现代可视化所需的部分。为了构建像[*d3js.org*](https://d3js.org)展示的那种可视化效果，发表在*纽约时报*上，或者集成在基本交互式数据仪表板中，实际上您需要的Web开发技能相当有限。您的工作成果应该能够被专门负责此类工作的人轻松添加到更大的网站中。对于小型个人网站，将可视化内容整合进去也相当容易。
- en: Single-Page Apps
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页面应用
- en: '*Single-page applications* (SPAs) are web applications (or whole sites) that
    are dynamically assembled using JavaScript, often building upon a lightweight
    HTML backbone and CSS styles that can be applied dynamically using class and ID
    attributes. Many modern data visualizations fit this description, including the
    Nobel Prize visualization this book builds toward.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*单页面应用*（SPAs）是使用JavaScript动态组装的Web应用程序（或整个网站），通常基于轻量级HTML骨架和可以使用类和ID属性动态应用的CSS样式构建。许多现代数据可视化项目符合此描述，包括本书所构建的诺贝尔奖可视化项目。'
- en: Often self-contained, the SPA’s root folder can be easily incorporated in an
    existing website or stand alone, requiring only an HTTP server such as Apache
    or NGINX.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是自包含的，SPA的根目录可以轻松地整合到现有网站中或独立运行，只需一个像Apache或NGINX这样的HTTP服务器。
- en: Thinking of our data visualizations in terms of SPAs removes a lot of the cognitive
    overhead from the webdev aspect of JavaScript visualizations, allowing us to focus
    on programming challenges. The skills required to put the visualization on the
    web are still fairly basic and quickly amortized. Often it will be someone else’s
    job.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的数据可视化视为单页应用程序（SPA），可以减少 JavaScript 可视化的 Web 开发方面的认知负担，让我们专注于编程挑战。在网上发布可视化仍然需要的技能相当基础且很快就会摊销。通常这将是其他人的工作。
- en: Tooling Up
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具配置
- en: As you’ll see, the webdev needed to make modern data visualizations requires
    no more than a decent text editor, modern browser, and a terminal ([Figure 4-1](#webdev101_tools)).
    I’ll cover what I see as the minimal requirements for a webdev-ready editor and
    nonessential but nice-to-have features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将看到的，制作现代数据可视化所需的 Web 开发并不比一个体面的文本编辑器、现代浏览器和终端（[图 4-1](#webdev101_tools)）更多。我将介绍我认为适合
    Web 开发准备的最低要求编辑器以及非必需但不错的功能。
- en: 'My browser development tools of choice are [Chrome’s web-developer kit](https://oreil.ly/52Z3e),
    freely available on all platforms. It has a lot of tab-delineated functionality,
    the following of which I’ll cover in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择的浏览器开发工具是[Chrome 的 Web 开发者工具套件](https://oreil.ly/52Z3e)，在所有平台上都免费提供。它具有许多选项卡分隔的功能，其中我将在本章中介绍以下内容：
- en: The *Elements* tab, which allows you to explore the structure of a web page,
    its HTML content, CSS styles, and DOM presentation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*元素*选项卡，允许您探索 Web 页面的结构、其 HTML 内容、CSS 样式和 DOM 呈现'
- en: The *Sources* tab, where most of your JavaScript debugging will take place
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*资源*选项卡，大多数 JavaScript 调试将在这里进行'
- en: You’ll need a terminal for output, starting your local web server, and maybe
    sketching ideas with the IPython interpreter. These days I tend to use browser-based
    [Jupyter notebooks](https://jupyter.org) as my Python dataviz *sketchpad*—one
    of the key advantages being that the session persists in the form of a notebook
    (*.ipynb*) file, which you can use to restart the session at later dates. You
    also get to iteratively explore your data with embedded charts. We’ll be putting
    this to good use in [Part III](part03.xhtml#part_clean_explore).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要一个终端用于输出、启动本地 Web 服务器，也许还要用 IPython 解释器草拟一些想法。最近我倾向于使用基于浏览器的[Jupyter 笔记本](https://jupyter.org)作为我的
    Python 数据可视化“*草图本*”，其主要优势之一是会话以笔记本（*.ipynb* 文件）的形式持久化，你可以在以后的日期重新启动会话。你还可以通过内嵌的图表迭代地探索数据。我们将在[第三部分](part03.xhtml#part_clean_explore)中充分利用它。
- en: '![dpj2 0401](assets/dpj2_0401.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0401](assets/dpj2_0401.png)'
- en: Figure 4-1\. Primary webdev tools
  id: totrans-17
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 主要的 Web 开发工具
- en: Before dealing with what you do need, let’s deal with a few things you don’t
    need when setting out, laying a couple of myths to rest on the way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论你需要什么之前，让我们先来谈谈在开始时你不需要的一些事情，顺便打消一些迷思。
- en: The Myth of IDEs, Frameworks, and Tools
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IDE、框架和工具的神话
- en: There is a common assumption among the prospective JavaScripter that to program
    for the web requires a complex toolset, primarily an Intelligent Development Environment
    (IDE), as used by enterprise—​and other—​coders everywhere. This is potentially
    expensive and presents another learning curve. The good news is that you can create
    professional-level web dataviz with nothing more than a decent text editor. In
    fact, until you start dealing with modern JavaScript frameworks (and I would hold
    off on that while you get your webdev legs) an IDE doesn’t provide much advantage,
    while usually being less performant. More good news is that the free as in beer
    lightweight [Visual Studio Code IDE (VSCode)](https://code.visualstudio.com) has
    become the de facto standard for web development. If you already use VSCode or
    want a few more bells and whistles, it’s a good workhorse for following this book.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那些准备学习 JavaScript 的人普遍认为，在网络编程中需要复杂的工具集，主要是企业及其他编码人员广泛使用的智能开发环境（IDE）。这可能昂贵且具有陡峭的学习曲线。好消息是，你只需一个体面的文本编辑器，就可以创建专业水平的
    Web 数据可视化。事实上，直到你开始涉足现代 JavaScript 框架（我建议在你掌握 Web 开发技能之前先暂缓），IDE 并不会带来太多优势，而且通常性能较差。更令人振奋的消息是，免费且轻量级的[Visual
    Studio Code IDE (VSCode)](https://code.visualstudio.com) 已成为 Web 开发的事实标准。如果你已经在使用
    VSCode，或者想要一些额外的功能，它是跟随本书的一个良好工具。
- en: There is also a common myth that one cannot be productive in JavaScript without
    using a framework of some kind.^([1](ch04.xhtml#idm45607793744992)) At the moment,
    a number of these frameworks are vying for control of the JS ecosystem, most sponsored
    by the various huge companies that created them. These frameworks come and go
    at a dizzying rate, and my advice for anyone starting out in JavaScript is to
    ignore them entirely while you develop your core skills. Use small, targeted libraries,
    such as those in the jQuery ecosystem or Underscore’s functional programming extensions,
    and see how far you can get before needing a *my way or the highway* framework.
    Only lock yourself into a framework to meet a clear and present need, not because
    the current JS groupthink is raving about how great it is.^([2](ch04.xhtml#idm45607793740624))
    Another important consideration is that D3, the prime web dataviz library, doesn’t
    really play well with any of the bigger frameworks I know, particularly the ones
    that want control over the DOM. Making D3 framework-compliant is an advanced skill.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个普遍的神话，即在不使用任何框架的情况下，无法在JavaScript中提高生产力。^([1](ch04.xhtml#idm45607793744992))
    目前，许多这些框架正在争夺JS生态系统的控制权，其中大多数由创建它们的各种巨大公司赞助。这些框架来去匆匆，我的建议是，任何刚开始学习JavaScript的人都应该完全忽略它们，而是在发展核心技能的同时使用小型、定向的库，比如jQuery生态系统中的库或Underscore的函数式编程扩展，看看在需要*我行我素*框架之前你能走多远。只有在有明确现实需求的情况下，才锁定到框架中，而不是因为当前的JS集体思维正在疯狂地吹捧它有多么好。^([2](ch04.xhtml#idm45607793740624))
    另一个重要的考虑因素是，D3，主要的Web数据可视化库，实际上与我所知道的任何较大的框架都不太兼容，特别是那些想要控制DOM的框架。使D3符合框架的要求是一种高级技能。
- en: Another thing you’ll find if you hang around webdev forums, Reddit lists, and
    Stack Overflow is a huge range of tools constantly clamoring for attention. There
    are JS+CSS minifiers and watchers to automatically detect file changes and reload
    web pages during development, among others. While a few of these have their place,
    in my experience there are a lot of flaky tools that probably cost more time in
    hair-tearing than they gain in productivity. To reiterate, you can be very productive
    without these things and should only reach for one to scratch an urgent itch.
    Some are keepers, but very few are even remotely essential for data visualization
    work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您逗留在Webdev论坛、Reddit列表和Stack Overflow上，您会发现有大量工具不断争相吸引注意。其中包括JS+CSS缩小器和监视器，用于在开发过程中自动检测文件更改并重新加载网页等。虽然其中有一些是有用的，但根据我的经验，有很多工具可能比它们在生产力上节省的时间更花费时间。重申一下，您可以在没有这些工具的情况下非常高效地工作，只有在迫切需要解决问题时才应该使用其中之一。有些工具是值得保留的，但只有极少数对于数据可视化工作是必不可少的。
- en: A Text-Editing Workhorse
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个文本编辑工具
- en: 'First and foremost among your webdev tools is a text editor that you are comfortable
    with and which can, at the very least, do syntax highlighting for multiple languages—​in
    our case, HTML, CSS, JavaScript, and Python. You can get away with a plain, nonhighlighting
    editor, but in the long run it will prove to be a pain. Things like syntax highlighting,
    code linting, intelligent indentation, and the like remove a huge cognitive load
    from the process of programming, so much so that I see their absence as a limiting
    factor. These are my minimal requirements for a text editor:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的Webdev工具中，首要的是一个您感觉舒适且至少可以对多种语言进行语法高亮的文本编辑器，例如HTML、CSS、JavaScript和Python。您可以使用一个普通的、没有语法高亮的编辑器，但从长远来看，这将证明是一种痛苦。诸如语法高亮、代码检查、智能缩进等功能，可以极大地减轻编程过程中的认知负担，以至于我认为它们的缺失是一种限制因素。这些是我对文本编辑器的最低要求：
- en: Syntax highlighting for all languages you use
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对您使用的所有语言进行语法高亮显示
- en: Configurable indentation levels and types for languages (e.g., Python 4 soft
    tabs, JavaScript 2 soft tabs)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可配置的缩进级别和类型，适用于各种语言（例如，Python 4个软制表符，JavaScript 2个软制表符）
- en: Multiple windows/panes/tabs to allow easy navigation around your codebase
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多窗口/窗格/选项卡，以便轻松导航您的代码库周围
- en: A decent [code linter](https://oreil.ly/6BOEU) (see [Figure 4-2](#webdev101_linter))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个体面的[代码检查工具](https://oreil.ly/6BOEU)（见[图 4-2](#webdev101_linter)）
- en: If you are using a relatively advanced text editor, all the above should come
    as standard with the exception of code linting, which may require a bit of configuration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是相对高级的文本编辑器，则上述所有功能应该是标准配置，除了代码检查可能需要一些配置外。
- en: '![dpj2 0402](assets/dpj2_0402.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0402](assets/dpj2_0402.png)'
- en: Figure 4-2\. A running code linter analyzes the JavaScript continuously, highlighting
    syntax errors in red and adding an ! to the left of the offending line
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-2\. 运行的代码检查程序持续分析JavaScript，以红色突出显示语法错误，并在错误行左侧添加一个！
- en: Browser with Development Tools
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有开发工具的浏览器
- en: One of the reasons a full-fledged IDE is less vital in modern webdev is that
    the best place to do debugging is in the web browser itself, and such is the pace
    of change there that any IDE attempting to emulate that context will have its
    work cut out for it. On top of this, modern web browsers have evolved a powerful
    set of debugging and development tools. The best among these is [Chrome DevTools](https://oreil.ly/jBLc9),
    which offers a huge amount of functionality, from sophisticated (certainly to
    a Pythonista) debugging (parametric breakpoints, variable watches, etc.) to memory
    and processor optimization profiling, device emulation (want to know what your
    web page looks like on a smartphone or tablet?), and a whole lot more. Chrome
    DevTools is my debugger of choice and will be used in this book. Like everything
    covered, it’s free to use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web开发中完整的IDE不那么重要的一个原因是，最佳调试位置是在Web浏览器本身，而这种环境的变化速度如此之快，以至于任何试图模拟该上下文的IDE都将面临艰巨的任务。此外，现代Web浏览器已经发展出强大的一套调试和开发工具。其中最好的工具之一是[Chrome
    DevTools](https://oreil.ly/jBLc9)，提供了大量功能，从复杂的（对Pythonista来说肯定如此）调试（参数断点、变量监视等）到内存和处理器优化分析，设备仿真（想知道您的网页在智能手机或平板电脑上的显示效果？）等等。Chrome
    DevTools是我选择的调试器，并将在本书中使用。像本书涵盖的所有内容一样，它是免费使用的。
- en: Terminal or Command Prompt
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终端或命令提示符
- en: The terminal or command line is where you initiate the various servers and probably
    output useful logging information. It’s also where you’ll try out Python modules
    or run a Python interpreter (IPython being in many ways the best).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 终端或命令行是您启动各种服务器和可能输出有用日志信息的地方。它还是您尝试Python模块或运行Python解释器的地方（在许多方面，IPython是最好的）。
- en: Building a Web Page
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网页
- en: 'There are four elements to a typical web visualization:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 典型Web可视化有四个要素：
- en: An HTML skeleton, with placeholders for our programmatic visualization
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个HTML框架，其中包含我们的程序化可视化的占位符
- en: Cascading Style Sheets (CSS), which define the look and feel (e.g., border widths,
    colors, font sizes, placement of content blocks)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层叠样式表（CSS），定义外观和感觉（例如，边框宽度、颜色、字体大小、内容块的放置）
- en: JavaScript to build the visualization
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript用于构建可视化
- en: Data to be transformed
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要转换的数据
- en: The first three of these are just text files, created using our favorite editor
    and delivered to the browser by the web server (see [Chapter 12](ch12.xhtml#chapter_delivery_intro)).
    Let’s examine each in turn.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这三者中的前三个只是文本文件，使用我们最喜爱的编辑器创建，并由Web服务器传递到浏览器（见[第12章](ch12.xhtml#chapter_delivery_intro)）。让我们逐个来看。
- en: Serving Pages with HTTP
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTTP提供页面
- en: The delivery of the HTML, CSS, and JS files that are used to make a particular
    web page (and any related data files, multimedia, etc.) is negotiated between
    a server and browser using the Hypertext Transfer Protocol. HTTP provides a number
    of methods, the most commonly used being GET, which requests a web resource, retrieving
    data from the server if all goes well or throwing an error if it doesn’t. We’ll
    be using GET, along with Python’s requests module, to scrape some web page content
    in [Chapter 6](ch06.xhtml#chapter_heavy_scraping).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用于制作特定网页（及任何相关数据文件、多媒体等）的HTML、CSS和JS文件的传递是通过超文本传输协议在服务器和浏览器之间进行协商的。HTTP提供了许多方法，其中最常用的是GET，它请求一个Web资源，在一切顺利时从服务器检索数据，否则会抛出错误。我们将使用GET，以及Python的requests模块，在[第6章](ch06.xhtml#chapter_heavy_scraping)中抓取一些网页内容。
- en: 'To negotiate the browser-generated HTTP requests, you’ll need a server. In
    development, you can run a little server locally using Python’s built-in web server
    (one of the batteries included), part of the `http` module. You start the server
    at the command line, with an optional port number (default 8000), like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要协商由浏览器生成的HTTP请求，您将需要一个服务器。在开发中，您可以使用Python的内置Web服务器（内置电池之一），该服务器是`http`模块的一部分。您可以在命令行中启动服务器，并可以选择端口号（默认为8000），如下所示：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This server is now serving content locally on port 8080\. You can access the
    site it is serving by going to the URL *http://localhost:8080* in your browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务器现在在本地端口8080上提供内容。您可以通过在浏览器中输入URL *http://localhost:8080* 来访问它提供的网站。
- en: The `http.server` module is a nice thing to have and OK for demos and the like,
    but it lacks a lot of basic functionality. For this reason, as we’ll see in [Part IV](part04.xhtml#part_delivery),
    it’s better to master the use of a proper development (and production) server
    like Flask (this book’s server of choice).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.server` 模块是一个很好的演示工具，但对于许多基本功能来说仍然不足。因此，正如我们将在[第四部分](part04.xhtml#part_delivery)中看到的那样，最好掌握像
    Flask 这样的适当开发（和生产）服务器（本书的首选服务器）。'
- en: The DOM
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM
- en: The HTML files you send through HTTP are converted at the browser end into a
    Document Object Model, or DOM, which can in turn be adapted by JavaScript because
    this programmatic DOM is the basis of dataviz libraries like D3\. The DOM is a
    tree structure, represented by hierarchical nodes, the top node being the main
    web page or document.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 HTTP 发送的 HTML 文件在浏览器端转换为文档对象模型（DOM），JavaScript 可以通过这种编程 DOM 进行调整，因为这种 DOM
    是如 D3 等数据可视化库的基础。DOM 是一种树形结构，由层级节点表示，顶级节点为主网页或文档。
- en: Essentially, the HTML you write or generate with a template is converted by
    the browser into a tree hierarchy of nodes, each one representing an HTML element.
    The top node is called the *Document Object*, and all other nodes descend in a
    parent-child fashion. Programmatically manipulating the DOM is at the heart of
    such libraries as jQuery and the mighty D3, so it’s vital to have a good mental
    model of what’s going on. A great way to get the feel for the DOM is to use a
    web tool such as *Chrome DevTools* (my recommended toolset) to inspect branches
    of the tree.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，您编写或生成的 HTML 通过浏览器转换为节点的树层次结构，每个节点表示一个 HTML 元素。顶级节点称为*文档对象*，所有其他节点都以父子方式衍生。以编程方式操作
    DOM 是 jQuery 等库的核心，因此理解其运行原理至关重要。了解 DOM 的绝佳方法是使用诸如*Chrome DevTools*（我推荐的工具集）之类的
    Web 工具检查树的分支。
- en: Whatever you see rendered on the web page, the bookkeeping of the object’s state
    (displayed or hidden, matrix transform, etc.) is being done with the DOM. D3’s
    powerful innovation was to attach data directly to the DOM and use it to drive
    visual changes (Data-Driven Documents).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您在网页上看到什么，对象状态的记账（显示或隐藏，矩阵转换等）都是通过 DOM 完成的。D3 的强大创新在于直接将数据附加到 DOM，并使用它驱动视觉变化（数据驱动文档）。
- en: The HTML Skeleton
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 骨架
- en: A typical web visualization uses an HTML skeleton, and builds the visualization
    on top of it using JavaScript.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 Web 可视化使用 HTML 骨架，并使用 JavaScript 在其上构建可视化。
- en: HTML is the language used to describe the content of a web page. It was first
    proposed by physicist Tim Berners-Lee in 1980 while he was working at the CERN
    particle accelerator complex in Switzerland. It uses tags such as `<div>`, `<img>`,
    and `<h>` to structure the content of the page, while CSS is used to define the
    look and feel.^([3](ch04.xhtml#idm45607793670928)) The advent of HTML5 has reduced
    the boilerplate considerably, but the essence has remained essentially unchanged
    over those thirty years.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 是用于描述网页内容的语言。最初由物理学家 Tim Berners-Lee 在瑞士 CERN 粒子加速器复杂中工作时于 1980 年首次提出。它使用标签如
    `<div>`、`<img>` 和 `<h>` 来结构化页面内容，而 CSS 则用于定义外观和感觉。^([3](ch04.xhtml#idm45607793670928))
    HTML5 的出现大大减少了样板代码，但其本质在这三十年间基本保持不变。
- en: Fully specced HTML used to involve a lot of rather confusing header tags, but
    with HTML5 some thought was put into a more user-friendly minimalism. This is
    pretty much the minimal requirement for a starting template:^([4](ch04.xhtml#idm45607793668384))
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的 HTML 规范曾涉及许多相当令人困惑的头部标签，但 HTML5 考虑到了更用户友好的极简主义。这基本上是起始模板的最低要求：^([4](ch04.xhtml#idm45607793668384))
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'So we need only declare the document HTML, our character set 8-bit Unicode,
    and a `<body>` tag below which to add our page content. This is a big improvement
    on the bookkeeping required before and provides a very low threshold to entry
    as far as creating the documents that will be turned into web pages goes. Note
    the comment tag form: `<!-- comment -->`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只需声明文档 HTML、我们的字符集 8 位 Unicode，并在其下添加一个 `<body>` 标签，以添加我们的页面内容。这比以前所需的记账工作有了很大的改进，并为创建将成为网页的文档提供了一个非常低的入门门槛。请注意注释标签的形式：`<!--
    comment -->`。
- en: 'More realistically, we would probably want to add some CSS and JavaScript.
    You can add both directly to an HTML document by using the `<style>` and `<script>`
    tags like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 更实际地说，我们可能想要添加一些 CSS 和 JavaScript。您可以通过使用 `<style>` 和 `<script>` 标签直接将两者添加到
    HTML 文档中，如下所示：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This single-page HTML form is often used in examples such as the visualizations
    at [*d3js.org*](https://d3js.org). It’s convenient to have a single page to deal
    with when demonstrating code or keeping track of files, but generally I’d suggest
    separating the HTML, CSS, and JavaScript elements into separate files. The big
    win here, apart from easier navigation as the codebase gets larger, is that you
    can take full advantage of your editor’s specific language enhancements such as
    solid syntax highlighting and code linting (essentially syntax checking on the
    fly). While some editors and libraries claim to deal with embedded CSS and JavaScript,
    I haven’t found an adequate one.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种单页面 HTML 表单通常在示例中使用，比如在 [*d3js.org*](https://d3js.org) 上的可视化。在演示代码或跟踪文件时，使用单页面非常方便，但通常建议将
    HTML、CSS 和 JavaScript 元素分开存放。除了随着代码库变大更容易导航之外，这里的重要优势是可以充分利用编辑器的特定语言增强功能，如完整的语法突出显示和代码检查（实质上是即时语法检查）。尽管一些编辑器和库声称可以处理嵌入式
    CSS 和 JavaScript，但我还没有找到一个合适的。
- en: 'To use CSS and JavaScript files, we just include them in the HTML using `<link>`
    and `<script>` tags like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CSS 和 JavaScript 文件，只需在 HTML 中包含它们，使用 `<link>` 和 `<script>` 标签，就像这样：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Marking Up Content
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记内容
- en: Visualizations often use a small subset of the available HTML tags, usually
    building the page programmatically by attaching elements to the DOM tree.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化通常使用少量可用的 HTML 标签，通常通过将元素附加到 DOM 树来程序化构建页面。
- en: 'The most common tag is the `<div>`, marking a block of content. `<div>`s can
    contain other `<div>`s, allowing for a tree hierarchy, the branches of which are
    used during element selection and to propagate user interface (UI) events such
    as mouse clicks. Here’s a simple `<div>` hierarchy:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的标签是 `<div>`，标记了一个内容块。`<div>` 可以包含其他 `<div>`，允许树形层次结构，其分支用于元素选择和传播用户界面（UI）事件，如鼠标点击。这里是一个简单的
    `<div>` 层次结构：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note the use of `id` and `class` attributes. These are used when you’re selecting
    DOM elements and to apply CSS styles. IDs are unique identifiers; each element
    should have only one and there should be only one occurrence of any particular
    ID per page. The class can be applied to multiple elements, allowing bulk selection,
    and each element can have multiple classes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用 `id` 和 `class` 属性。这些在选择 DOM 元素和应用 CSS 样式时使用。ID 是唯一标识符；每个元素应该只有一个，每页只能有一个特定的
    ID 出现一次。类可以应用于多个元素，允许批量选择，每个元素可以有多个类。
- en: 'For textual content, the main tags are `<p>`, `<h*>`, and `<br>`. You’ll be
    using these a lot. This code produces [Figure 4-3](#webdev101_h2):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于文本内容，主要使用的标签是 `<p>`、`<h*>` 和 `<br>`。你将经常使用它们。此代码生成了图 4-3 [Figure 4-3](#webdev101_h2)：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![dpj2 0403](assets/dpj2_0403.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0403](assets/dpj2_0403.png)'
- en: Figure 4-3\. An h2 header and text
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 一个 h2 标题和文本
- en: Header tags are reverse-ordered by size from the largest `<h1>`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 标题标签按大小倒序排列，从最大的 `<h1>` 开始。
- en: '`<div>`, `<h*>`, and `<p>` are what is known as *block elements*. They normally
    begin and end with a new line. The other class of tag is *inline elements*, which
    display without line breaks. Images `<img>`, hyperlinks `<a>`, and table cells
    `<td>` are among these, which include the `<span>` tag for inline text:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div>`、`<h*>` 和 `<p>` 被称为*块元素*。它们通常以新行开始和结束。另一类标签是*内联元素*，它们在显示时不会有换行符。像 `<img>`
    图像、`<a>` 超链接和 `<td>` 表格单元格就属于这一类，还包括 `<span>` 标签用于内联文本：'
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO1-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO1-1)'
- en: Note that we don’t need a closing tag for images.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于图片，我们不需要闭合标签。
- en: '[![2](assets/2.png)](#co_webdev_101_CO1-2)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdev_101_CO1-2)'
- en: The span and link are continuous in the text.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中 span 和 link 是连续的。
- en: 'Other useful tags include lists, ordered `<ol>` and unordered `<ul>`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的标签包括有序 `<ol>` 和无序 `<ul>` 列表：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO2-1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO2-1)'
- en: Here we apply a CSS style directly (inline) on the `div` tag. See [“Positioning
    and Sizing Containers with Flex”](#sect_flexboxes) for an introduction to the
    `flex` display property.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们直接在 `div` 标签上应用 CSS 样式（内联）。查看 [“使用 Flex 定位和调整容器大小”](#sect_flexboxes) 来介绍
    `flex` 显示属性。
- en: '[Figure 4-4](#webdev101_lists) shows the rendered lists.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-4](#webdev101_lists) 显示了渲染后的列表。'
- en: '![dpj2 0404](assets/dpj2_0404.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0404](assets/dpj2_0404.png)'
- en: Figure 4-4\. HTML lists
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-4\. HTML 列表
- en: 'HTML also has a dedicated `<table>` tag, useful if you want to present raw
    data in your visualization. This HTML produces the header and row in [Figure 4-5](#webdev101_table):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 还有一个专用的 `<table>` 标签，如果你想在可视化中呈现原始数据很有用。这段 HTML 生成了图 4-5 的标题和行 [Figure 4-5](#webdev101_table)：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO3-1)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO3-1)'
- en: The header row
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表头行
- en: '[![2](assets/2.png)](#co_webdev_101_CO3-2)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdev_101_CO3-2)'
- en: The first row of data
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的第一行
- en: '![dpj2 0405](assets/dpj2_0405.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0405](assets/dpj2_0405.png)'
- en: Figure 4-5\. An HTML table
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-5\. 一个 HTML 表格
- en: When you are making web visualizations, the most often used of the previous
    tags are the textual tags, which provide instructions, information boxes, and
    so on. But the meat of our JavaScript efforts will probably be devoted to building
    DOM branches rooted on the Scalable Vector Graphics (SVG) `<svg>` and `<canvas>`
    tags. On most modern browsers, the `<canvas>` tag also supports a 3D *WebGL* context,
    allowing *OpenGL* visualizations to be embedded in the page.^([5](ch04.xhtml#idm45607792973152))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当您制作网络可视化时，前面标签最常用的是文本标签，它们提供说明、信息框等。但是我们的 JavaScript 工作的核心可能是构建基于可伸缩矢量图形（SVG）`<svg>`和`<canvas>`标签的
    DOM 分支。在大多数现代浏览器上，`<canvas>`标签还支持 3D *WebGL* 上下文，允许在页面中嵌入 *OpenGL* 可视化。^([5](ch04.xhtml#idm45607792973152))
- en: We’ll deal with SVG, the focus of this book and the format used by the mighty
    D3 library, in [“Scalable Vector Graphics”](#sect_svg). Now let’s look at how
    we add style to our content blocks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理本书的焦点 SVG，这是强大的 D3 库使用的格式，在[“可缩放矢量图形”](#sect_svg)中看看我们如何为我们的内容块添加样式。
- en: CSS
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS
- en: '*CSS*, short for Cascading Style Sheets, is a language for describing the look
    and feel of a web page. Though you can hardcode style attributes into your HTML,
    it’s generally considered bad practice.^([6](ch04.xhtml#idm45607792962112)) It’s
    much better to label your tag with an `id` or `class` and use that to apply styles
    in the stylesheet.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*CSS*，即层叠样式表，是一种描述网页外观和感觉的语言。虽然您可以将样式属性硬编码到 HTML 中，但通常认为这是不良实践。^([6](ch04.xhtml#idm45607792962112))
    最好的方法是为标签打上`id`或`class`，然后在样式表中使用它来应用样式。'
- en: The key word in CSS is *cascading*. CSS follows a precedence rule so that in
    the case of a clash, the latest style overrides earlier ones. This means the order
    of inclusion for sheets is important. Usually, you want your stylesheet to be
    loaded last so that you can override both the browser defaults and styles defined
    by any libraries you are using.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 中的关键字是*层叠*。CSS 遵循优先规则，因此在冲突的情况下，最新的样式会覆盖先前的样式。这意味着包含表的顺序很重要。通常情况下，您希望样式表加载最后，以便可以覆盖浏览器默认样式和任何使用的库定义的样式。
- en: '[Figure 4-6](#css) shows how CSS is used to apply styles to the HTML elements.
    First, you select the element using hashes (#) to indicate a unique ID and dots
    (.) to select members of a class. You then define one or more property/value pairs.
    Note that the `font-family` property can be a list of fallbacks, in order of preference.
    Here we want the browser default `font-family` of `serif` (capped strokes) to
    be replaced with the more modern `sans-serif`, with `Helvetica Neue` as our first
    choice.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-6](#css)展示了如何使用 CSS 对 HTML 元素应用样式。首先，使用井号（#）选择具有唯一 ID 的元素，使用点号（.）选择类的成员。然后定义一个或多个属性/值对。注意，`font-family`属性可以是一个优先级顺序列表。在这里，我们希望浏览器默认的`font-family`为`serif`（有衬线的），替换为更现代的`sans-serif`，首选为`Helvetica
    Neue`。'
- en: '![dpj2 0406](assets/dpj2_0406.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0406](assets/dpj2_0406.png)'
- en: Figure 4-6\. Styling the page with CSS
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-6\. 使用 CSS 为页面添加样式
- en: 'Understanding CSS precedence rules is key to successfully applying styles.
    In a nutshell, the order is:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 CSS 优先规则是成功应用样式的关键。简而言之，顺序是：
- en: '`!important` after CSS property trumps all.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CSS 属性后面添加`!important`会覆盖所有。
- en: The more specific the better (i.e., IDs override classes).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 越具体越好（例如，ID优先于类）。
- en: 'The order of declaration: last declaration wins, subject to *1* and *2*.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明的顺序：最后的声明优先，遵循*1*和*2*。
- en: 'So, for example, say we have a `<span>` of class `alert`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，例如，假设我们有一个具有`alert`类的`<span>`：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Putting the following in our *style.css* file will make the alert text red
    and bold:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 *style.css* 文件中添加以下内容将使警报文本变为红色和粗体：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we then add this to the *style.css*, the ID color black will override the
    class color red, while the class `font-weight` remains bold:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后将其添加到 *style.css* 中，ID 颜色黑色将覆盖类颜色红色，而类`font-weight`保持粗体：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To enforce the color red for alerts, we can use the `!important` directive:^([7](ch04.xhtml#idm45607792857568))
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制警报颜色为红色，我们可以使用`!important`指令：^([7](ch04.xhtml#idm45607792857568))
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we then add another stylesheet, *style2.css*, after *style.css*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 *style.css* 后添加另一个样式表 *style2.css*：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'with *style2.css* containing the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*style2.css* 包含以下内容：'
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: then the `font-weight` of the alert will be reverted to `normal` because the
    new class style was declared last.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后警报的`font-weight`将恢复为`normal`，因为新的类样式是最后声明的。
- en: JavaScript
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: JavaScript is the only browser-based programming language, with an interpreter
    included in all modern browsers. In order to do anything remotely advanced (and
    that includes all modern web visualizations), you should have a JavaScript grounding.
    [TypeScript](https://www.typescriptlang.org) is a superset of JavaScript that
    provides strong typing and is currently gaining a lot of traction. TypeScript
    compiles to and presupposes competence in JavaScript.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是唯一支持浏览器的编程语言，所有现代浏览器都包含了它的解释器。为了进行任何稍微高级的操作（包括所有现代网络可视化），您应该具备 JavaScript
    的基础。[TypeScript](https://www.typescriptlang.org) 是 JavaScript 的超集，提供强类型，并且目前正在获得很大的关注。TypeScript
    编译为 JavaScript，并假定您精通 JavaScript。
- en: 99% of all coded web visualization examples, the ones you should aim to be learning
    from, are in JavaScript, and voguish alternatives have a way of fading with time.
    In essence, good competence in (if not mastery of) JavaScript is a prerequisite
    for interesting web visualizations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 99% 的编码网络可视化示例，你应该学习的示例，都是用 JavaScript 编写的，而流行的替代方案往往会随着时间的推移而逐渐消失。基本上，对于有趣的网络可视化来说，精通（如果不是掌握）JavaScript
    是一个先决条件。
- en: The good news for Pythonistas is that JavaScript is actually quite a nice language
    once you’ve tamed a few of its more awkward quirks.^([8](ch04.xhtml#idm45607792772048))
    As I showed in [Chapter 2](ch02.xhtml#chapter_language_bridge), JavaScript and
    Python have a lot in common and it’s usually easy to translate from one to the
    other.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Python 爱好者来说，好消息是一旦你掌握了 JavaScript 的一些比较棘手的怪癖[^8]，JavaScript 其实是一种非常不错的语言。正如我在
    [第 2 章](ch02.xhtml#chapter_language_bridge) 中展示的，JavaScript 和 Python 有很多共同点，通常很容易从一种语言翻译到另一种语言。
- en: Data
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: The data needed to fuel your web visualization will be provided by the web server
    as static files (e.g., JSON or CSV files) or dynamically through some kind of
    web API (e.g., [RESTful APIs](https://oreil.ly/RwvhM)), usually retrieving the
    data server-side from a database. We’ll be covering all these forms in [Part IV](part04.xhtml#part_delivery).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 用于驱动您的网络可视化所需的数据将由 Web 服务器提供为静态文件（例如 JSON 或 CSV 文件）或通过某种 Web API 动态提供（例如，[RESTful
    APIs](https://oreil.ly/RwvhM)），通常从数据库服务器端检索数据。我们将在 [第 IV 部分](part04.xhtml#part_delivery)
    中涵盖所有这些形式。
- en: Although a lot of data used to be delivered in [XML form](https://oreil.ly/2IvEi),
    modern web visualization is predominantly about JSON and, to a lesser extent,
    CSV or TSV files.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管过去很多数据以 [XML 形式](https://oreil.ly/2IvEi) 提供，现代网络可视化主要是关于 JSON，并且在较小程度上也是 CSV
    或 TSV 文件。
- en: '[JSON](https://oreil.ly/kCBDk) (short for JavaScript Object Notation) is the
    de facto web visualization data standard and I recommend you learn to love it.
    It obviously plays very nicely with JavaScript, but its structure will also be
    familiar to Pythonistas. As we saw in [“JSON”](ch03.xhtml#read_write_json), reading
    and writing JSON data with Python is a snap. Here’s a little example of some JSON
    data:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[JSON](https://oreil.ly/kCBDk)（JavaScript 对象表示法的缩写）是事实上的网络可视化数据标准，我建议你学会喜欢它。显然，它与
    JavaScript 非常兼容，但它的结构也会对 Python 爱好者来说很熟悉。正如我们在 [“JSON”](ch03.xhtml#read_write_json)
    中看到的，用 Python 读取和写入 JSON 数据非常简单。这里有一个 JSON 数据的小例子：'
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Chrome DevTools
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome 开发者工具
- en: The arms race in JavaScript engines in recent years, which has produced huge
    increases in performance, has been matched by an increasingly sophisticated range
    of development tools built into the various browsers. Firefox’s Firebug led the
    pack for a while but [Chrome DevTools](https://oreil.ly/djHBp) have surpassed
    it, and are adding functionality all the time. There’s now a huge amount you can
    do with Chrome’s tabbed tools, but here I’ll introduce the two most useful tabs,
    the HTML+CSS-focused *Elements* and the JavaScript-focused *Sources*. Both of
    these work in complement to Chrome’s developer console, demonstrated in [“JavaScript”](ch02.xhtml#bridge_js_interact).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来 JavaScript 引擎的竞争，导致性能大幅提升，与此同时，各种浏览器内置的开发工具也变得越来越复杂。Firefox 的 Firebug 曾经领先一段时间，但是
    [Chrome 开发者工具](https://oreil.ly/djHBp) 已经超越它，并且不断增加功能。现在你可以用 Chrome 的选项卡工具做很多事情，但在这里我将介绍两个最有用的选项卡，即专注于
    HTML+CSS 的 *Elements* 和专注于 JavaScript 的 *Sources*。这两者与 Chrome 的开发者控制台相辅相成，如 [“JavaScript”](ch02.xhtml#bridge_js_interact)
    中所示。
- en: The Elements Tab
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素选项卡
- en: To access the Elements tab, select More Tools→Developer Tools from the righthand
    options menu or use the Ctrl-Shift-I keyboard shortcut (Cmd-Option-I in Mac).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问元素选项卡，请从右侧选项菜单中选择更多工具→开发者工具，或使用Ctrl-Shift-I键盘快捷键（Mac中为Cmd-Option-I）。
- en: '[Figure 4-7](#webdev101_elements) shows the Elements tab at work. You can select
    DOM elements on the page by using the lefthand magnifying glass and see their
    HTML branch in the left panel. The right panel allows you to see CSS styles applied
    to the element and look at any event listeners that are attached or DOM properties.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-7](#webdev101_elements)展示了元素选项卡的工作原理。您可以使用左侧的放大镜选择页面上的DOM元素，并在左侧面板中查看它们的HTML分支。右侧面板允许您查看应用于元素的CSS样式，并查看任何附加的事件监听器或DOM属性。'
- en: '![dpj2 0407](assets/dpj2_0407.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0407](assets/dpj2_0407.png)'
- en: Figure 4-7\. Chrome DevTools Elements tab
  id: totrans-135
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. Chrome开发者工具的元素选项卡
- en: One really cool feature of the Elements tab is that you can interactively change
    element styling for both CSS styles and attributes.^([9](ch04.xhtml#idm45607792668960))
    This is a great way to refine the look and feel of your data visualizations.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 元素选项卡的一个非常酷的功能是，您可以交互地更改元素的CSS样式和属性。([9](ch04.xhtml#idm45607792668960)) 这是精细调整数据可视化外观和感觉的好方法。
- en: Chrome’s Elements tab provides a great way to explore the structure of a page,
    finding out how the different elements are positioned. This is good way to get
    your head around positioning content blocks with the `position` and `float` properties.
    Seeing how the pros apply CSS styles is a really good way to up your game and
    learn some useful tricks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome的元素选项卡为探索页面结构提供了一个很好的方式，找出不同元素的定位方式。这是了解如何使用`position`和`float`属性定位内容块的好方法。看看专家如何应用CSS样式是提升您技能并学习一些有用技巧的好方式。
- en: The Sources Tab
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来源选项卡
- en: The Sources tab allows you to see any JavaScript included in the page. [Figure 4-8](#webdev101_sources)
    shows the tab at work. In the lefthand panel, you can select a script or an HTML
    file with embedded `<script>` tagged JavaScript. As shown, you can place a breakpoint
    in the code, load the page, and, on break, see the call stack and any scoped or
    global variables. These breakpoints are parametric, so you can set conditions
    for them to trigger, which is handy if you want to catch and step through a particular
    configuration. On break, you have the standard to step in, out, and over functions,
    and so on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 来源选项卡允许您查看页面中包含的任何JavaScript。[图 4-8](#webdev101_sources)展示了该选项卡的工作方式。在左侧面板中，您可以选择带有嵌入式`<script>`标签的脚本或HTML文件。如图所示，您可以在代码中设置断点，加载页面，然后在中断时查看调用堆栈和任何局部或全局变量。这些断点是参数化的，因此您可以设置它们触发的条件，这在想要捕捉和逐步执行特定配置时非常方便。在中断时，您可以标准地执行进入、退出和跳过函数等操作。
- en: '![dpj2 0408](assets/dpj2_0408.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0408](assets/dpj2_0408.png)'
- en: Figure 4-8\. Chrome DevTools Sources tab
  id: totrans-141
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-8\. Chrome开发者工具的来源选项卡
- en: The Sources tab is a fantastic resource and greatly reduces the need for console
    logging^([10](ch04.xhtml#idm45607792628480)) when trying to debug JavaScript.
    In fact, where JS debugging was once a major pain point, it is now almost a pleasure.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当试图调试JavaScript时，[来源](ch04.xhtml#idm45607792628480)选项卡是一个非常好的资源，大大减少了需要使用控制台日志的次数。事实上，JS调试曾经是一个主要的痛点，现在几乎成为一种乐趣。
- en: Other Tools
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他工具
- en: There’s a huge amount of functionality in those Chrome DevTools tabs, and they
    are being updated almost daily. You can do memory and CPU timelines and profiling,
    monitor your network downloads, and test out your pages for different form factors.
    But you’ll spend the large majority of your time as a data visualizer in the Elements
    and Sources tabs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome开发者工具中的这些选项卡功能非常丰富，并且几乎每天都在更新。您可以进行内存和CPU时间线和分析，监视您的网络下载，并为不同的形式因素测试您的页面。但作为数据可视化工作者，您将在元素和来源选项卡中花费大部分时间。
- en: A Basic Page with Placeholders
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有占位符的基本页面
- en: Now that we have covered the major elements of a web page, let’s put them together.
    Most web visualizations start off as HTML and CSS skeletons, with placeholder
    elements ready to be fleshed out with a little JavaScript plus data (see [“Single-Page
    Apps”](#spas)).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了网页的主要元素，让我们把它们结合起来。大多数Web可视化从HTML和CSS骨架开始，准备好用一点JavaScript加数据来完善它们（参见[“单页面应用程序”](#spas)）。
- en: 'We’ll first need our HTML skeleton, using the code in [Example 4-1](#skel_html).
    This consists of a tree of `<div>` content blocks defining three chart elements:
    a header, main, and sidebar section. We’ll save this file as *index.xhtml*.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要我们的HTML骨架，使用[示例 4-1](#skel_html)中的代码。这包括一个`<div>`内容块树，定义了三个图表元素：页眉、主要部分和侧边栏部分。我们将这个文件保存为*index.xhtml*。
- en: Example 4-1\. The file index.xhtml, our HTML skeleton
  id: totrans-148
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-1\. 文件index.xhtml，我们的HTML骨架
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have our HTML skeleton, we want to style it using some CSS. This
    will use the classes and IDs of our content blocks to adjust size, position, background
    color, etc. To apply our CSS, in [Example 4-1](#skel_html) we import a *style.css*
    file, shown in [Example 4-2](#skel_css).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了HTML骨架，我们想要使用一些CSS来进行样式化。这将使用我们内容块的类和ID来调整大小、位置、背景颜色等。要应用我们的CSS，在[示例 4-1](#skel_html)中我们引入了一个*style.css*文件，如[示例 4-2](#skel_css)所示。
- en: Example 4-2\. The style.css file, providing our CSS styling
  id: totrans-151
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-2\. style.css文件，提供我们的CSS样式
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO4-1)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO4-1)'
- en: This `dev` class is a handy way to see the border of any visual blocks, which
    is useful for visualization work.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`dev`类是查看任何可视块边框的便捷方法，对于可视化工作非常有用。
- en: '[![2](assets/2.png)](#co_webdev_101_CO4-2)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdev_101_CO4-2)'
- en: Makes `chart-components` the relative parent.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使`chart-components`成为相对父级。
- en: '[![3](assets/3.png)](#co_webdev_101_CO4-3)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_webdev_101_CO4-3)'
- en: Makes the `main` and `sidebar` positions relative to `chart-components`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使`main`和`sidebar`相对于`chart-components`定位。
- en: '[![4](assets/4.png)](#co_webdev_101_CO4-4)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_webdev_101_CO4-4)'
- en: Positions this block flush with the right wall of `chart-components`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将此块与`chart-components`的右墙对齐。
- en: We use absolute positioning of the main and sidebar chart elements ([Example 4-2](#skel_css)).
    There are various ways to position the content blocks with CSS, but absolute positioning
    gives you explicit control over their placement, which is a must if you want to
    get the look just right.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用绝对定位的主要和侧边栏图表元素（[示例 4-2](#skel_css)）。有各种各样的方法来使用CSS定位内容块，但绝对定位可以明确控制它们的位置，这是如果你想要达到完美外观必须做的。
- en: After specifying the size of the `chart-components` container, the `main` and
    `sidebar` child elements are sized and positioned using percentages of their parent.
    This means any changes to the size of `chart-components` will be reflected in
    its children.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定了`chart-components`容器的大小之后，`main`和`sidebar`子元素使用其父元素的百分比进行了大小调整和定位。这意味着对`chart-components`大小的任何更改都将反映在其子元素中。
- en: 'With our HTML and CSS defined, we can examine the skeleton by firing up Python’s
    single-line HTTP server in the project directory containing the *index.xhtml*
    and *style.css* files defined in Examples [4-1](#skel_html) and [4-2](#skel_css),
    like so:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们定义的HTML和CSS，我们可以通过在包含在示例[4-1](#skel_html)和[4-2](#skel_css)中定义的*index.xhtml*和*style.css*文件的项目目录中启动Python的单行HTTP服务器来检查骨架，如下所示：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Figure 4-9](#placeholder) shows the resulting page with the Elements tab open,
    displaying the page’s DOM tree.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-9](#placeholder)显示了打开元素选项卡的结果页面，显示了页面的DOM树。'
- en: The chart’s content blocks are now positioned and sized correctly, ready for
    JavaScript to add some engaging content.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在图表的内容块已经正确地定位和调整大小，准备使用JavaScript添加一些引人入胜的内容。
- en: '![dpj2 0409](assets/dpj2_0409.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0409](assets/dpj2_0409.png)'
- en: Figure 4-9\. Building a basic web page
  id: totrans-168
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-9\. 构建基本网页
- en: Positioning and Sizing Containers with Flex
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flex定位和调整大小的容器
- en: Historically positioning and sizing content (usually `<div>` containers) with
    CSS was somewhat of a dark art. It didn’t help that there were a lot of cross-browser
    incompatibilities and disagreements about what constituted padding or margins.
    But even allowing for that, the CSS properties used seemed pretty ad-hoc. Often
    achieving what seems to be a perfectly reasonable positioning or sizing ambition
    turned out to involve arcane CSS knowledge, hidden in the deep recesses of a Stack
    Overflow thread. One example being centering a `div` in the horizontal and vertical.^([11](ch04.xhtml#idm45607792243232))
    This has all changed with the advent of the CSS flex-box, which uses some powerful
    new CSS properties to provide almost all the sizing and positioning you’ll ever
    need.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，使用 CSS 定位和调整内容（通常为 `<div>` 容器）有点像黑魔法。并没有帮助的是，有许多跨浏览器的不兼容性和对什么构成填充或边距的争议。但即使考虑到这一点，所使用的
    CSS 属性似乎也相当随意。通常，实现看似完全合理的定位或大小野心的方法，结果涉及到深奥的 CSS 知识，隐藏在 Stack Overflow 帖子的深处。一个例子是将
    `div` 在水平和垂直方向上居中[^11]。这一切都随着 CSS flex-box 的出现而改变，它使用一些强大的新 CSS 属性几乎提供了您所需要的所有大小和定位。
- en: Flex-boxes aren’t quite one CSS property to rule them all—the absolute positioning
    demonstrated in the previous section still has its place, particularly with data
    visualizations—but they are a collection of very powerful properties which, more
    often than not, represent the simplest, and sometimes the only, way to achieve
    a particular placing/sizing mission. Effects that used to require CSS expertise
    are now well within the grasp of a relative newbie and the icing on the cake is
    that flex-boxes play really well with variable screen ratios—the power of the
    flex. With that in mind, let’s see what can be done with the basic set of flex
    properties.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Flex-boxes 并不完全是一种 CSS 属性来统治它们所有——前面章节展示的绝对定位仍然有其用处，特别是在数据可视化方面——但它们是一组非常强大的属性，往往是实现特定定位/大小任务的最简单、有时是唯一的方法。过去需要
    CSS 专业知识的效果现在已经非常容易掌握，而且 flex-boxes 与可变屏幕比例非常兼容——flex 的威力。考虑到这一点，让我们看看基本的 flex
    属性能做些什么。
- en: 'First, we’ll use a little HTML to create a container `div` with three child
    `div`s (boxes). The child boxes will be of class `box` with an ID to enable specific
    CSS to be applied:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用一些 HTML 创建一个带有三个子 `div`（框）的容器 `div`。子框将具有类 `box`，并带有一个 ID 以便应用特定的 CSS：
- en: '[PRE19]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The initial CSS gives the container a red border, width, and height (600x400).
    The boxes are 100 pixels wide and high (80 pixels plus 10 pixels padding) and
    have a green border. A novel CSS property is the container’s `display: flex`,
    which establishes a flex display context. The result of this can be seen in [Figure 4-10](#flex-boxes)
    (`display: flex`), which shows the boxes presented in a row rather than the default
    column, where each box occupies its own row:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '最初的 CSS 给容器一个红色边框、宽度和高度（600x400）。框的宽度和高度均为 100 像素（80 像素加上 10 像素的填充）并带有绿色边框。一个新颖的
    CSS 属性是容器的 `display: flex`，它建立了一个 flex 显示上下文。这样做的结果可以在 [图 4-10](#flex-boxes)（`display:
    flex`）中看到，显示的框以行而不是默认的列呈现，其中每个框占据自己的行：'
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![dpj2 0410](assets/dpj2_0410.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0410](assets/dpj2_0410.png)'
- en: Figure 4-10\. Positioning and sizing with flex-boxes
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-10\. 使用 flex-boxes 进行定位和调整大小
- en: 'Flex displays respond to children with the `flex` property by expanding their
    size to fit the available space. If we make the boxes flexible, they respond by
    expanding to fill the container row. [Figure 4-10](#flex-boxes) (flex-direction:
    row) shows the result. Note that the `flex` property overrides the boxes’ width
    property, allowing them to expand:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'Flex 显示根据子元素的 `flex` 属性响应地扩展其大小以适应可用空间。如果我们使框具有弹性，它们将响应性地扩展以填充容器行。[图 4-10](#flex-boxes)（flex-direction:
    row）显示了结果。请注意，`flex` 属性会覆盖框的宽度属性，使其能够扩展：'
- en: '[PRE21]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `flex-direction` property is `row` by default. By setting it to `column`,
    the boxes are placed in a column and the height property is overridden to allow
    them to expand to fit the container’s height. [Figure 4-10](#flex-boxes) (direction
    column) shows the result:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex-direction` 属性默认为 `row`。通过将其设置为 `column`，可以将框放置在列中，并覆盖高度属性，使其能够扩展以适应容器的高度。[图 4-10](#flex-boxes)（方向列）显示了结果：'
- en: '[PRE22]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Removing or commenting out the width and height properties from the boxes makes
    them fully flexible, able to expand in the horizontal and vertical, producing
    [Figure 4-10](#flex-boxes) (full flex):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从框中删除或注释掉宽度和高度属性会使它们完全灵活，能够在水平和垂直方向上扩展，生成 [图 4-10](#flex-boxes)（全灵活）：
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you want to reverse the order of the flex-boxes, there are a `row-reverse`
    and `column-reverse` `flex-direction`. [Figure 4-10](#flex-boxes) (column reverse)
    shows the result of reversing the columns:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想颠倒 `flex` 盒子的顺序，有 `row-reverse` 和 `column-reverse` 的 `flex-direction`。[图 4-10](#flex-boxes)
    (列逆序) 显示了颠倒列的结果：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The value of the boxes’ `flex` property represents a sizing weight. Initially
    all the boxes have a weight of one, which makes them of equal size. If we give
    the first box a weight of two, it will occupy half (2 / (1 + 1 + 2)) the available
    space in the row or column direction specified. [Figure 4-10](#flex-boxes) (#box1
    flex 2) shows the result of increasing `box1`’s flex value:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子的 `flex` 属性值表示一个大小权重。最初，所有的盒子都有一个权重为一，这使它们的大小相等。如果我们给第一个盒子一个权重为二，它将占据在指定的行或列方向上可用空间的一半（2
    / (1 + 1 + 2)）。[图 4-10](#flex-boxes) (#box1 flex 2) 显示了增加 `box1` 的 `flex` 值的结果：
- en: '[PRE25]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we return the 100-pixel height and width (including padding) constraints
    to the boxes and remove their `flex` property, we can demonstrate the power of
    flex display positioning. We’ll also need to remove the flex directive from `box1`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将盒子的高度和宽度限制（包括填充）返回到 100 像素，并移除它们的 `flex` 属性，我们可以展示 `flex` 布局定位的强大功能。我们还需要从
    `box1` 中删除 `flex` 指令：
- en: '[PRE26]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With fixed-size content, flex displays have a number of properties that allow
    precise placement of the content. This sort of manipulation used to involve all
    manner of tricky CSS hacks. First, let’s distribute the boxes evenly in their
    container, using row-based spacing. The magic property is `justify-content` with
    the value `space-between`; [Figure 4-10](#flex-boxes) (space between) shows the
    result:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于固定大小的内容，`flex` 布局具有许多属性，允许精确放置内容。这种操作以前通常涉及各种复杂的 CSS 技巧。首先，让我们在容器中均匀分布盒子，使用基于行的间距。魔法属性是
    `justify-content`，值为 `space-between`；[图 4-10](#flex-boxes) (间距之间) 显示了结果：
- en: '[PRE27]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'There is a `space-around` complement to `space-between`, which spaces the content
    by adding equal padding to left and right. [Figure 4-10](#flex-boxes) (space around)
    shows the result:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个与 `space-between` 对称的 `space-around`，它通过在左右两侧添加相等的内边距来排列内容。[图 4-10](#flex-boxes)
    (四周留白) 显示了结果：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'By combining the `justify-content` and `align-items` properties, we can achieve
    the holy grail of CSS positioning, centering the content in the vertical and the
    horizontal. We’ll add a gap of 20 pixels between the boxes using the flex display’s
    `gap` property:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合 `justify-content` 和 `align-items` 属性，我们可以实现 CSS 定位的圣杯，将内容垂直和水平居中。我们使用 `flex`
    布局的 `gap` 属性在盒子之间增加了 20 像素的间距：
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[Figure 4-10](#flex-boxes) (centered with `gap`) shows our content sitting
    squarely in the middle of its container.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-10](#flex-boxes) （使用 `gap` 居中）显示我们的内容完全位于其容器的中间。'
- en: Another great thing about the flex display is that it is fully recursive. `div`s
    can both *have* a display flex property and *be* flex content. This makes achieving
    complex content layouts a breeze. Let’s see a little demonstration of nested flex-boxes,
    to make the point clear.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`flex` 布局的另一个很棒的特性是它是完全递归的。`div` 既可以 *拥有* `flex` 属性，也可以 *成为* `flex` 内容。这使得实现复杂的内容布局变得轻而易举。让我们来看一个嵌套的
    flex 盒子的小演示，以便清晰地表达这一点。'
- en: 'We’ll first use some HTML to build a nested tree of boxes (including the main
    container box). We’ll give each box and container an ID and class:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用一些 HTML 来构建盒子的嵌套树（包括主容器盒子）。我们给每个盒子和容器都分配一个 ID 和类：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The following CSS gives the main container a height of 800 pixels (it will fill
    the available width by default), a flex display, and a flex-direction of column,
    making it stack its flex content.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 CSS 给主容器设置了 800 像素的高度（默认情况下它会填充可用宽度），一个 `flex` 布局，并且一个 `flex-direction` 的列，使其堆叠其
    `flex` 内容。
- en: There are three containers to be stacked, which are both flexible and provide
    a flex display for their content. The boxes have a red border and are fully flexible
    (no width or height specified). By default all boxes have a flex weight of one.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个要堆叠的容器，它们既灵活又为其内容提供了 `flex` 布局。这些盒子有一个红色边框，并且完全灵活（没有指定宽度或高度）。默认情况下，所有盒子的
    `flex` 权重都为一。
- en: 'The middle container has a fixed width box (width 66%) and uses `justify-content:
    center` to center it.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '中间容器有一个固定宽度的盒子（宽度为 66%），并使用 `justify-content: center` 将其居中。'
- en: 'The bottom container has a flex value of 2, making it twice the height of its
    siblings. It has two boxes of equal weight, one of which (box 5) contains two
    boxes that are stacked (`flex-direction: column`). The fairly complex layout (see
    [Figure 4-11](#flex-boxes-nested)) is achieved with impressively little CSS and
    is easily adapted by changing a few flex display properties:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '底部容器的flex值为2，使其高度是其兄弟元素的两倍。它有两个等重的盒子，其中一个（盒子5）包含两个堆叠的盒子（`flex-direction: column`）。这种相当复杂的布局（参见[图4-11](#flex-boxes-nested)）只需非常少量的CSS即可实现，并且通过更改几个flex显示属性可以轻松适应：'
- en: '[PRE31]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![dpj2 0411](assets/dpj2_0411.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0411](assets/dpj2_0411.png)'
- en: Figure 4-11\. Nested flex-boxes
  id: totrans-206
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-11\. 嵌套的flex-boxes
- en: Flex-boxes provide a very powerful sizing and positioning context for your HTML
    content that responds to container size and can be easily adapted. If you want
    your content in a column rather than a row, then a single property change makes
    it so. For more precise positioning and sizing control there is the [CSS grid
    layout](https://oreil.ly/lVilF), but I would recommend focusing your initial energies
    on the flex display—it represents the best return on your learning investment
    in CSS right now. For further examples, see the [CSS-Tricks article](https://oreil.ly/JJgbG)
    on flex-boxes and [this handy cheat sheet](https://flexboxsheet.com).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Flex-boxes 提供了一个非常强大的大小和定位上下文，适应HTML内容的容器大小，并且可以轻松地适应。如果您希望内容在列而不是行中显示，只需更改一个属性即可。对于更精确的定位和大小控制，可以使用[CSS网格布局](https://oreil.ly/lVilF)，但我建议您首先集中精力学习flex布局——它目前代表了CSS学习投入的最佳回报。有关更多示例，请参阅[CSS-Tricks文章](https://oreil.ly/JJgbG)关于flex-boxes和[这个便捷的速查表](https://flexboxsheet.com)。
- en: Filling the Placeholders with Content
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充占位符与内容
- en: 'With our content blocks defined in HTML and positioned with CSS, a modern data
    visualization uses JavaScript to construct its interactive charts, menus, tables,
    and the like. There are many ways to create visual content (aside from image or
    multimedia tags) in your modern browser, the main ones being:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中定义了内容块并用CSS定位后，现代数据可视化使用JavaScript构建其交互式图表，菜单，表格等。在现代浏览器中，除了图像或多媒体标签之外，还有许多创建视觉内容的方式，主要包括：
- en: Scalable Vector Graphics (SVG) using special HTML tags
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可伸缩矢量图形（SVG）使用特殊的HTML标签
- en: Drawing to a 2D `canvas` context
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制到2D `canvas`上下文
- en: Drawing to a 3D `canvas` WebGL context, allowing a subset of OpenGL commands
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制到3D `canvas` WebGL上下文，允许使用OpenGL命令的子集
- en: Using modern CSS to create animations, graphic primitives, and more
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用现代CSS创建动画，图形基元等
- en: Because SVG is the language of choice for D3, in many ways the biggest JavaScript
    dataviz library, many of the cool web data visualizations you have seen, such
    as those by the *New York Times*, are built using it. Broadly speaking, unless
    you anticipate having lots (>1,000) of moving elements in your visualization or
    need to use a specific `canvas`-based library, SVG is probably the way to go.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SVG是D3的首选语言，D3是目前最大的JavaScript数据可视化库，许多您见过的酷炫网络数据可视化，例如*纽约时报*的那些，都是使用它构建的。总体来说，除非您预期在可视化中有大量（>1000）的移动元素或需要使用特定的基于`canvas`的库，否则SVG可能是更好的选择。
- en: By using vectors instead of pixels to express its primitives, SVG will generally
    produce cleaner graphics that respond smoothly to scaling operations. It’s also
    much better at handling text, a crucial consideration for many visualizations.
    Another key advantage of SVG is that user interaction (e.g., mouse hovering or
    clicking) is native to the browser, being part of the standard DOM event handling.^([12](ch04.xhtml#idm45607791382032))
    A final point in its favor is that because the graphic components are built on
    the DOM, you can inspect and adapt them using your browser’s development tools
    (see [“Chrome DevTools”](#chrome_tab)). This can make debugging and refining your
    visualizations much easier than trying to find errors in the `canvas`’s relatively
    black box.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用向量而不是像素来表达其基元，SVG通常会生成更清晰的图形，对缩放操作响应平滑。它在处理文本方面也要好得多，这对许多可视化是一个关键考虑因素。SVG的另一个关键优势是用户交互（例如，鼠标悬停或点击）是浏览器的本地功能，是标准DOM事件处理的一部分。^([12](ch04.xhtml#idm45607791382032))
    它的另一个优点是，由于图形组件建立在DOM上，您可以使用浏览器的开发工具检查和调整它们（参见[“Chrome DevTools”](#chrome_tab)）。这比试图在相对黑盒的`canvas`中找到错误要容易得多。
- en: '`canvas` graphics contexts come into their own when you need to move beyond
    simple graphic primitives like circles and lines, such as when incorporating images
    like PNGs and JPGs. `canvas` is usually considerably more performant than SVG,
    so anything with lots of moving elements^([13](ch04.xhtml#idm45607791376208))
    is better off rendered to a canvas. If you want to be really ambitious or move
    beyond 2D graphics, you can even unleash the awesome power of modern graphics
    cards by using a special form of `canvas` context, the OpenGL-based WebGL context.
    Just bear in mind that what would be simple user interaction with SVG (e.g., clicking
    on a visual element) often has to be derived from mouse coordinates manually,
    which adds a tricky layer of complexity.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要超越简单的图形基元（如圆圈和线条），例如在包含 PNG 和 JPG 图像时，`canvas` 绘图环境就发挥了自己的作用。相对于 SVG，`canvas`
    通常具有更高的性能，因此任何具有大量移动元素的情况^([13](ch04.xhtml#idm45607791376208)) 最好使用 `canvas` 进行渲染。如果您想要真正雄心勃勃，或者超越二维图形，甚至可以通过使用特殊形式的
    `canvas` 上下文，即基于 OpenGL 的 WebGL 上下文，释放现代图形卡的强大能力。但请记住，与 SVG 的简单用户交互（例如点击可视元素）通常必须从鼠标坐标手动派生，这增加了一个棘手的复杂层次。
- en: The Nobel Prize data visualization realized at the end of this book’s toolchain
    is built primarily with D3, so SVG graphics are the focus of this book. Being
    comfortable with SVG is fundamental to modern web-based dataviz, so let’s explore
    a little primer.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书工具链的最后实现的诺贝尔奖数据可视化主要使用了 D3，因此 SVG 图形是本书的重点。熟悉 SVG 对于现代基于网络的数据可视化是基础，因此让我们探索一些基础知识。
- en: Scalable Vector Graphics
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可缩放矢量图形
- en: All SVG creations start with an `<svg>` root tag. All graphical elements, such
    as circles and lines, and groups thereof, are defined on this branch of the DOM
    tree. [Example 4-3](#webdev_svg_tag) shows a little SVG context we’ll use in upcoming
    demonstrations, a light-gray rectangle with ID `chart`. We also include the D3
    library, loaded from [*d3js.org*](https://d3js.org) and a *script.js* JavaScript
    file in the project folder.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 SVG 创建都从 `<svg>` 根标签开始。所有的图形元素，如圆圈和线条，以及它们的组，都定义在 DOM 树的这个分支上。[示例 4-3](#webdev_svg_tag)
    展示了我们将在接下来的演示中使用的一个小型 SVG 上下文，一个带有 ID `chart` 的浅灰色矩形。我们还包括了从 [*d3js.org*](https://d3js.org)
    载入的 D3 库以及项目文件夹中的 *script.js* JavaScript 文件。
- en: Example 4-3\. A basic SVG context
  id: totrans-220
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-3\. 一个基本的 SVG 上下文
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now that we’ve got our little SVG canvas in place, let’s start doing some drawing.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将我们的小型 SVG 画布放置好了，让我们开始做一些绘画。
- en: The <g> Element
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <g> 元素
- en: We can group shapes within our `<svg>` element by using the group `<g>` element.
    As we’ll see in [“Working with Groups”](#sect_groups), shapes contained in a group
    can be manipulated together, including changing their position, scale, or opacity.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `<g>` 元素在我们的 `<svg>` 元素中对形状进行分组。正如我们将在[“使用群组”](#sect_groups)中看到的那样，包含在组中的形状可以一起操作，包括更改它们的位置、比例或不透明度。
- en: Circles
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 圆圈
- en: Creating SVG visualizations, from the humblest little static bar chart to full-fledged
    interactive, geographic masterpieces, involves putting together elements from
    a fairly small set of graphical primitives such as lines, circles, and the very
    powerful paths. Each of these elements will have its own DOM tag, which will update
    as it changes.^([14](ch04.xhtml#idm45607791323968)) For example, its *x* and *y*
    attributes will change to reflect any translations within its `<svg>` or group
    (`<g>`) context.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 SVG 可视化，从最简单的静态条形图到完整的交互式地理杰作，都涉及从一组相当小的图形基元（如线条、圆圈和非常强大的路径）中组合元素。每个元素都将有其自己的
    DOM 标签，在其更改时更新。^([14](ch04.xhtml#idm45607791323968)) 例如，其 *x* 和 *y* 属性将根据 `<svg>`
    或组（`<g>`）上下文中的任何平移而更改。
- en: 'Let’s add a circle to our `<svg>` context to demonstrate:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的 `<svg>` 上下文中添加一个圆圈来演示：
- en: '[PRE33]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With a little CSS to provide the circle’s fill color:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一点 CSS 为圆圈提供填充颜色：
- en: '[PRE34]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This produces [Figure 4-12](#svg_circle). Note that the *y* coordinate is measured
    from the top of the `<svg>` `'#chart'` container, a common graphic convention.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这生成了[图 4-12](#svg_circle)。请注意，*y* 坐标是从 `<svg>` `'#chart'` 容器顶部测量的，这是一种常见的图形约定。
- en: '![dpj2 0412](assets/dpj2_0412.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0412](assets/dpj2_0412.png)'
- en: Figure 4-12\. An SVG circle
  id: totrans-233
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-12\. 一个 SVG 圆圈
- en: Now let’s see how we go about applying styles to SVG elements.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何向 SVG 元素应用样式。
- en: Applying CSS Styles
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用 CSS 样式
- en: 'The circle in [Figure 4-12](#svg_circle) is fill-colored light blue using CSS
    styling rules:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CSS 样式规则填充浅蓝色的[图 4-12](#svg_circle)中的圆圈：
- en: '[PRE35]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In modern browsers, you can set most visual SVG styles using CSS, including
    `fill`, `stroke`, `stroke-width`, and `opacity`. So if we wanted a thick, semitransparent
    green line (with ID `total`) we could use the following CSS:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代浏览器中，您可以使用 CSS 设置大多数视觉 SVG 样式，包括 `fill`、`stroke`、`stroke-width` 和 `opacity`。所以，如果我们想要一条粗的、半透明的绿色线（带有
    ID `total`），我们可以使用以下 CSS：
- en: '[PRE36]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can also set the styles as attributes of the tags, though CSS is generally
    preferable:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以将样式设置为标签的属性，尽管通常更喜欢使用 CSS：
- en: '[PRE37]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Tip
  id: totrans-242
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Which SVG features can be set by CSS and which can’t is a source of some confusion
    and plenty of gotchas. The SVG spec distinguishes between element [properties](https://oreil.ly/K0enr)
    and attributes, the former being more likely to be found among the valid CSS styles.
    You can investigate the valid CSS properties using Chrome’s Elements tab and its
    autocomplete. Also, be prepared for some surprises. For example, SVG text is colored
    by the `fill`, not `color`, property.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些 SVG 特性可以通过 CSS 设置，哪些不能，这是一些混淆和许多陷阱的来源。SVG 规范区分元素的 [属性](https://oreil.ly/K0enr)
    和属性，前者更可能出现在有效的 CSS 样式中。您可以使用 Chrome 的元素选项卡和自动完成来调查有效的 CSS 属性。另外，要做好一些准备，例如，SVG
    文本的颜色由 `fill` 属性而不是 `color` 属性确定。
- en: 'For `fill` and `stroke`, there are various color conventions you can use:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `fill` 和 `stroke`，您可以使用各种颜色约定：
- en: Named HTML colors, such as lightblue
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名的 HTML 颜色，如 lightblue
- en: 'Using HTML hex codes (#RRGGBB); for example, white is #FFFFFF'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用 HTML 十六进制代码（#RRGGBB）；例如，白色是 #FFFFFF'
- en: RGB values; for example, red = rgb(255, 0, 0)
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RGB 值；例如，红色 = rgb(255, 0, 0)
- en: RGBA values, where A is an alpha channel (0–1); for example, half-transparent
    blue is rgba(0, 0, 255, 0.5)
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RGBA 值，其中 A 是 alpha 通道（0–1）；例如，半透明蓝色是 rgba(0, 0, 255, 0.5)
- en: In addition to adjusting the color’s alpha channel with RGBA, you can fade the
    SVG elements using their `opacity` property. Opacity is used a lot in D3 animations.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 RGBA 调整颜色的 alpha 通道外，您还可以使用 SVG 元素的 `opacity` 属性淡化 SVG 元素。在 D3 动画中经常使用不透明度。
- en: Stroke width is measured in pixels by default but can use points.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，描边宽度以像素为单位，但可以使用点。
- en: Lines, Rectangles, and Polygons
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线条、矩形和多边形
- en: We’ll add a few more elements to our chart to produce [Figure 4-13](#svg_axes).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向我们的图表添加一些更多的元素，以生成 [图 4-13](#svg_axes)。
- en: '![dpj2 0413](assets/dpj2_0413.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0413](assets/dpj2_0413.png)'
- en: Figure 4-13\. Adding a few elements to our dummy chart
  id: totrans-254
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-13\. 向虚拟图表添加一些元素
- en: 'First, we’ll add a couple of simple axis lines to our chart, using the `<line>`
    tag. Line positions are defined by a start coordinate (x1, y1) and an end one
    (x2, y2):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用 `<line>` 标签向我们的图表添加几条简单的轴线。线的位置由起始坐标（x1，y1）和结束坐标（x2，y2）定义：
- en: '[PRE38]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We’ll also add a dummy legend box in the top-right corner using an SVG rectangle.
    Rectangles are defined by *x* and *y* coordinates relative to their parent container,
    and a width and height:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 SVG 矩形在右上角添加一个虚拟图例框。矩形由相对于其父容器的 *x* 和 *y* 坐标以及宽度和高度定义：
- en: '[PRE39]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can create irregular polygons using the `<polygon>` tag, which takes a
    list of coordinate pairs. Let’s make a triangle marker in the bottom right of
    our chart:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `<polygon>` 标签创建不规则多边形，它接受一系列坐标对。让我们在图表的右下角制作一个三角形标记：
- en: '[PRE40]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We’ll style the elements with a little CSS:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些 CSS 样式化元素：
- en: '[PRE41]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now that we’ve got a few graphical primitives in place, let’s see how we add
    some text to our dummy chart.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一些图形原语，让我们看看如何向虚拟图表添加一些文本。
- en: Text
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本
- en: One of the key strengths of SVG over the rasterized `canvas` context is how
    it handles text. Vector-based text tends to look a lot clearer than its pixelated
    counterparts and benefits from smooth scaling too. You can also adjust stroke
    and fill properties, just like any SVG element.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 相对于栅格化的 `canvas` 上下文的一个关键优势之一是它如何处理文本。基于矢量的文本往往看起来比其像素化的对应物更清晰，并且也受益于平滑缩放。您还可以调整描边和填充属性，就像任何
    SVG 元素一样。
- en: 'Let’s add a bit of text to our dummy chart: a title and labeled y-axis (see
    [Figure 4-14](#svg_text)).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向虚拟图表添加一些文本：一个标题和带标签的 y 轴（参见 [图 4-14](#svg_text)）。
- en: '![dpj2 0414](assets/dpj2_0414.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0414](assets/dpj2_0414.png)'
- en: Figure 4-14\. Some SVG text
  id: totrans-268
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-14\. 一些 SVG 文本
- en: We place text using *x* and *y* coordinates. One important property is the `text-anchor`,
    which stipulates where the text is placed relative to its x position. The options
    are `start`, `middle`, and `end`; `start` is the default.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 *x* 和 *y* 坐标放置文本。一个重要的属性是 `text-anchor`，它规定了文本相对于其 x 位置的放置位置。选项有 `start`、`middle`
    和 `end`；`start` 是默认值。
- en: 'We can use the `text-anchor` property to center our chart title. We set the
    *x* coordinates at half the chart width and then set the `text-anchor` to `middle`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`text-anchor`属性来使我们的图表标题居中。我们将*x*坐标设置为图表宽度的一半，然后将`text-anchor`设置为`middle`：
- en: '[PRE42]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: As with all SVG primitives, we can apply scaling and rotation transforms to
    our text. To label our y-axis, we’ll need to rotate the text to the vertical ([Example 4-4](#svg_text_rotate)).
    By convention, rotations are clockwise by degree, so we’ll want a counterclockwise,
    –90 degree rotation. By default rotations are around the (0,0) point of the element’s
    container (`<svg>` or group `<g>`). We want to rotate our text around its own
    position, so first translate the rotation point using the extra arguments to the
    `rotate` function. We also want to first set the `text-anchor` to the end of the
    `y axis label` string to rotate about its endpoint.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有SVG基元一样，我们可以对文本应用缩放和旋转变换。为了标记我们的y轴，我们需要将文本旋转为垂直方向（[示例 4-4](#svg_text_rotate)）。按照惯例，旋转是顺时针的度数，所以我们希望逆时针旋转，-90度旋转。默认情况下，旋转是围绕元素容器(`<svg>`或组`<g>`)的(0,0)点进行的。我们希望围绕其自身位置旋转文本，因此首先使用`rotate`函数的额外参数来转换旋转点。我们还希望首先将`text-anchor`设置为`y轴标签`字符串的末端，以围绕其端点旋转。
- en: Example 4-4\. Rotating text
  id: totrans-273
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-4\. 旋转文本
- en: '[PRE43]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In [Example 4-4](#svg_text_rotate), we make use of the text’s `dy` attribute,
    which, along with `dx`, can be used to make fine adjustments to the text’s position.
    In this case, we want to lower it so that when rotated counterclockwise it will
    be to the right of the y-axis.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 4-4](#svg_text_rotate)中，我们利用文本的`dy`属性，与`dx`一起可以微调文本的位置。在这种情况下，我们希望将其降低，这样在逆时针旋转时它将位于y轴的右侧。
- en: 'SVG text elements can also be styled with CSS. Here we set the `font-family`
    of the chart to `sans-serif` and the `font-size` to `16px`, using the `title`
    ID to make that a little bigger:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: SVG文本元素也可以使用CSS进行样式设置。在这里，我们将图表的`font-family`设置为`sans-serif`，`font-size`设置为`16px`，使用`title`
    ID使其稍大：
- en: '[PRE44]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note that the `text` elements inherit `font-family` and `font-size` from the
    chart’s CSS; you don’t have to specify a `text` element.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`text`元素继承自图表的CSS中的`font-family`和`font-size`；您不必为`text`元素指定。
- en: Paths
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径
- en: Paths are the most complicated and powerful SVG element, enabling the creation
    of multiline, multicurve component paths that can be closed and filled, creating
    pretty much any shape you want. A simple example is adding a little chart line
    to our dummy chart to produce [Figure 4-15](#svg_path).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是最复杂和强大的SVG元素，可以创建多行、多曲线组件路径，可以闭合和填充，从而创建几乎任何形状。一个简单的例子是在我们的虚拟图表中添加一条小图表线，生成[图 4-15](#svg_path)。
- en: '![dpj2 0415](assets/dpj2_0415.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0415](assets/dpj2_0415.png)'
- en: Figure 4-15\. A red line path from the chart axis
  id: totrans-282
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-15\. 来自图表轴的红线路径
- en: 'The red path in [Figure 4-15](#svg_path) is produced by the following SVG:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 4-15](#svg_path)中的红色路径是由以下SVG生成的：'
- en: '[PRE45]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The `path`’s `d` attribute specifies the series of operations needed to make
    the red line. Let’s break it down:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`path`的`d`属性指定了制作红线所需的一系列操作。让我们详细分解一下：'
- en: '“M20 130”: move to coordinate (20, 130)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“M20 130”: 移动到坐标 (20, 130)'
- en: '“L60 70”: draw a line to (60, 70)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“L60 70”: 画一条线到 (60, 70)'
- en: '“L110 100”: draw a line to (110, 100)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“L110 100”: 画一条线到 (110, 100)'
- en: '“L160 45”: draw a line to (160, 45)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“L160 45”: 画一条线到 (160, 45)'
- en: You can imagine `d` as a set of instructions to a pen to move to a point, with
    `M` raising the pen from the canvas.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`d`想象成一组指示笔移动到点的指令，其中`M`从画布上抬起笔。
- en: 'A little CSS styling is needed. Note that the `fill` is set to `none`; otherwise,
    to create a fill area, the path would be closed, drawing a line from its end to
    beginning points, and any enclosed areas filled in with the default color black:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一些CSS样式。请注意，`fill`设置为`none`；否则，为了创建填充区域，路径将闭合，并从其结束点到起始点绘制一条线，并用默认颜色黑色填充任何封闭区域：
- en: '[PRE46]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'As well as the `moveto ''M''` and `lineto ''L''`, the path has a number of
    other commands to draw arcs, Bézier curves, and the like. SVG arcs and curves
    are commonly used in dataviz work, with many of D3’s libraries making use of them.^([15](ch04.xhtml#idm45607790535824))
    [Figure 4-16](#svg_arc) shows some SVG elliptical arcs created by the following
    code:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`moveto 'M'`和`lineto 'L'`，路径还有许多其他命令来绘制弧线、贝塞尔曲线等。SVG弧线和曲线在数据可视化工作中经常使用，D3的许多库都在使用它们。^([15](ch04.xhtml#idm45607790535824))
    [图 4-16](#svg_arc)展示了以下代码创建的一些SVG椭圆弧：
- en: '[PRE47]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO5-1)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO5-1)'
- en: Having moved to position (40, 40), draw an elliptical arc with x-radius 30,
    y-radius 40, and endpoint (80, 80).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到位置 (40, 40) 后，绘制一个 x 半径为 30，y 半径为 40，终点为 (80, 80) 的椭圆弧。
- en: '[![2](assets/2.png)](#co_webdev_101_CO5-2)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_webdev_101_CO5-2)'
- en: The first flag (0) sets the x axis rotation, in this case the conventional zero.
    See [the Mozilla developer site](https://oreil.ly/KGCDZ) for a visual demonstration.
    The last two flags (0, 1) are `large-arc-flag`, specifying which arc of the ellipse
    to use, and `sweep-flag`, which specifies which of the two possible ellipses defined
    by start and endpoints to use.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个标志 (0) 设置了 x 轴的旋转，在本例中为传统的零度。参见 [Mozilla 开发者网站](https://oreil.ly/KGCDZ) 进行视觉演示。最后两个标志
    (0, 1) 是 `large-arc-flag`，指定要使用椭圆的哪个弧，以及 `sweep-flag`，指定由起点和终点定义的两个可能椭圆中的哪一个。
- en: '![dpj2 0416](assets/dpj2_0416.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0416](assets/dpj2_0416.png)'
- en: Figure 4-16\. Some SVG elliptical arcs
  id: totrans-300
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-16\. 一些 SVG 椭圆弧
- en: 'The key flags used in the elliptical arc (`large-arc-flag` and `sweep-flag`)
    are, like most things geometric, better demonstrated than described. [Figure 4-17](#svg_arc_flags)
    shows the effect of changing the flags for the same relative beginning and endpoints,
    like so:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 椭圆弧中使用的关键标志（`large-arc-flag` 和 `sweep-flag`），像大多数几何事物一样，最好是演示而不是描述。[图 4-17](#svg_arc_flags)
    展示了在相同的相对起始点和端点情况下改变标志的效果，如下所示：
- en: '[PRE48]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![dpj2 0417](assets/dpj2_0417.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0417](assets/dpj2_0417.png)'
- en: Figure 4-17\. Changing the elliptic-arc flags
  id: totrans-304
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-17\. 改变椭圆弧标志
- en: As well as lines and arcs, the `path` element offers a number of Bézier curves,
    including quadratic, cubic, and compounds of the two. With a little work, these
    can create any line path you want. There’s a nice run-through [on SitePoint](https://oreil.ly/PRdVF)
    with good illustrations.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直线和弧线外，`path` 元素还提供了多种贝塞尔曲线，包括二次、三次以及二者的复合曲线。通过一些工作，这些曲线可以创建任何你想要的线路路径。在 [SitePoint](https://oreil.ly/PRdVF)
    上有一个很好的运行过程，配有良好的插图。
- en: For the definitive list of `path` elements and their arguments, go [to the World
    Wide Web Consortium (W3C) source](https://oreil.ly/s7YSY). And for a nice round-up,
    see [Jakob Jenkov’s introduction](https://oreil.ly/fdERF).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解 `path` 元素及其参数的完整列表，请访问 [World Wide Web Consortium (W3C) 源](https://oreil.ly/s7YSY)。另外，可以参考
    [Jakob Jenkov 的介绍](https://oreil.ly/fdERF) 进行详细了解。
- en: Scaling and Rotating
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放和旋转
- en: As befits their vector nature, all SVG elements can be transformed by geometric
    operations. The most commonly used are `rotate`, `translate`, and `scale`, but
    you can also apply skewing using `skewX` and `skewY` or use the powerful, multipurpose
    *matrix* transform.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 作为其向量性质的体现，所有的 SVG 元素都可以通过几何操作进行变换。最常用的是 `rotate`、`translate` 和 `scale`，但你也可以使用
    `skewX` 和 `skewY` 进行倾斜，或者使用功能强大的多用途 *matrix* 变换。
- en: 'Let’s demonstrate the most popular transforms, using a set of identical rectangles.
    The transformed rectangles in [Figure 4-18](#svg_transform) are achieved like
    so:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示最流行的变换，使用一组相同的矩形。通过如下方式实现 [图 4-18](#svg_transform) 中的变换矩形：
- en: '[PRE49]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![dpj2 0418](assets/dpj2_0418.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0418](assets/dpj2_0418.png)'
- en: 'Figure 4-18\. Some SVG transforms: rotate(45), scale(0.5), scale(0.5), then
    rotate(45)'
  id: totrans-312
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-18\. 一些 SVG 变换：rotate(45)，scale(0.5)，scale(0.5)，然后 rotate(45)
- en: Note
  id: totrans-313
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The order in which transforms are applied is important. A rotation of 45 degrees
    clockwise followed by a translation along the x-axis will see the element moved
    southeasterly, whereas the reverse operation moves it to the left and then rotates
    it.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 变换的应用顺序很重要。顺时针旋转 45 度，然后沿 x 轴平移将使元素向东南移动，而反向操作则将其向左移动，然后旋转。
- en: Working with Groups
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用组
- en: 'Often when you are constructing a visualization, it’s helpful to group the
    visual elements. A couple of particular uses are:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建可视化时，通常将视觉元素分组是很有帮助的。一些特定的用途包括：
- en: When you require local coordinate schemes (e.g., if you have a text label for
    an icon and you want to specify its position relative to the icon, not the whole
    `<svg>` canvas).
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要局部坐标方案时（例如，如果你有一个图标的文本标签，想要指定其相对于图标而不是整个 `<svg>` 画布的位置）。
- en: If you want to apply a scaling and/or rotation transformation to a subset of
    the visual elements.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要对部分视觉元素应用缩放和/或旋转变换。
- en: SVG has a group `<g>` tag for this, which you can think of as a mini canvas
    within the `<svg>` canvas. Groups can contain groups, allowing for very flexible
    geometric mappings.^([16](ch04.xhtml#idm45607790321024))
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 使用 `<g>` 标签来进行分组，你可以将其视为 `<svg>` 画布中的小型画布。组可以包含组，从而允许非常灵活的几何映射。^([16](ch04.xhtml#idm45607790321024))
- en: '[Example 4-5](#svg_group_code) groups shapes in the center of the canvas, producing
    [Figure 4-19](#svg_group). Note that the position of `circle`, `rect`, and `path`
    elements is relative to the translated group.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 4-5](#svg_group_code)将形状分组在画布的中心，生成[图 4-19](#svg_group)。注意`circle`、`rect`和`path`元素的位置是相对于被转换的组而言的。'
- en: Example 4-5\. Grouping SVG shapes
  id: totrans-321
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 4-5\. 对 SVG 形状进行分组
- en: '[PRE50]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![dpj2 0419](assets/dpj2_0419.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0419](assets/dpj2_0419.png)'
- en: Figure 4-19\. Grouping shapes with SVG `` <g>` `` tag
  id: totrans-324
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-19\. 使用 SVG `<g>` 标签对形状进行分组
- en: 'If we now apply a transform to the group, all shapes within it will be affected.
    [Figure 4-20](#svg_group_transform) shows the result of scaling [Figure 4-19](#svg_group)
    by a factor of 0.75 and then rotating it 90 degrees, which we achieve by adapting
    the transform attribute, like so:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在对组应用一个变换，组内的所有形状都将受到影响。[图 4-20](#svg_group_transform)展示了通过将[图 4-19](#svg_group)按0.75倍缩放并旋转90度来实现的结果，我们通过调整
    transform 属性来实现这一点，如下所示：
- en: '[PRE51]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![dpj2 0420](assets/dpj2_0420.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0420](assets/dpj2_0420.png)'
- en: Figure 4-20\. Transforming an SVG group
  id: totrans-328
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-20\. 对 SVG 组进行变换
- en: Layering and Transparency
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层叠和透明度
- en: The order in which the SVG elements are added to the DOM tree is important,
    with later elements taking precedence, layering over others. In [Figure 4-19](#svg_group),
    for example, the triangle path obscures the red circle and blue rectangle and
    is in turn obscured by the yellow circle.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DOM 树中添加 SVG 元素的顺序很重要，后面的元素会覆盖前面的元素。例如，在[图 4-19](#svg_group)中，三角形路径遮盖了红色圆形和蓝色矩形，同时被黄色圆形遮盖。
- en: Manipulating the DOM ordering is an important part of JavaScripted dataviz (e.g.,
    D3’s `insert` method allows you to place an SVG element before an existing one).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 控制 DOM 的排序是 JavaScript 数据可视化的重要部分（例如，D3 的 `insert` 方法允许您在现有元素之前放置一个 SVG 元素）。
- en: 'Element transparency can be manipulated using the alpha channel of `rgba(R,G,B,A)`
    colors or the more convenient `opacity` property. Both can be set using CSS. For
    overlaid elements, opacity is cumulative, as demonstrated by the color triangle
    in [Figure 4-21](#svg_transparency), produced by the following SVG:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `rgba(R,G,B,A)` 颜色的 alpha 通道或更方便的 `opacity` 属性来控制元素的透明度。两者都可以使用 CSS 来设置。对于重叠的元素，透明度是累积的，正如在[图 4-21](#svg_transparency)中的颜色三角形所示，该三角形是通过以下
    SVG 生成的：
- en: '[PRE52]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The SVG elements demonstrated here were handcoded in HTML, but in data visualization
    work they are almost always added programmatically. Thus the basic D3 workflow
    is to add SVG elements to a visualization, using data files to specify their attributes
    and properties.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示的 SVG 元素是在 HTML 中手工编码的，但在数据可视化工作中，它们几乎总是以编程方式添加的。因此，基本的 D3 工作流程是向可视化中添加
    SVG 元素，使用数据文件来指定它们的属性和属性。
- en: '![dpj2 0421](assets/dpj2_0421.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0421](assets/dpj2_0421.png)'
- en: Figure 4-21\. Manipulating opacity with SVG
  id: totrans-336
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-21\. 使用 SVG 调整不透明度
- en: JavaScripted SVG
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScripted SVG
- en: The fact that SVG graphics are described by DOM tags has a number of advantages
    over a black box such as the `<canvas>` context. For example, it allows nonprogrammers
    to create or adapt graphics and is a boon for debugging.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 图形由 DOM 标签描述的事实相比 `<canvas>` 上的黑盒有许多优势。例如，它允许非程序员创建或调整图形，并且有助于调试。
- en: In web dataviz, pretty much all your SVG elements will be created with JavaScript,
    through a library such as D3\. You can inspect the results of this scripting using
    the browser’s Elements tab (see [“Chrome DevTools”](#chrome_tab)), which is a
    great way to refine and debug your work (e.g., nailing an annoying visual glitch).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 在 web 数据可视化中，几乎所有的 SVG 元素都是通过 JavaScript 创建的，例如使用 D3 这样的库。您可以使用浏览器的元素选项卡检查这些脚本的结果（参见[“Chrome
    DevTools”](#chrome_tab)），这是精细调整和调试工作的好方法（例如解决令人烦恼的视觉故障）。
- en: As a little taster for things to come, let’s use D3 to scatter a few red circles
    on an SVG canvas. The dimensions of the canvas and circles are contained in a
    `data` object sent to a `chartCircles` function.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示即将发生的事情，让我们使用 D3 在 SVG 画布上散布一些红色圆圈。画布和圆圈的尺寸包含在发送给 `chartCircles` 函数的 `data`
    对象中。
- en: 'We use a little HTML placeholder for the `<svg>` element:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个小的 HTML 占位符来表示`<svg>`元素：
- en: '[PRE53]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'With our placeholder SVG `chart` element in place, a little D3 in the *script.js*
    file is used to turn some data into the scattered circles (see [Figure 4-22](#webdev101_d3_circles)):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 放置了我们的占位符 SVG `chart` 元素后，*script.js* 文件中的少量 D3 代码被用来将一些数据转换为散点圆圈（参见[图 4-22](#webdev101_d3_circles)）：
- en: '[PRE54]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[![1](assets/1.png)](#co_webdev_101_CO6-1)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_webdev_101_CO6-1)'
- en: This is the modern shorthand arrow-based anonymous function, equivalent to the
    long form on the previous line. D3 makes use of a lot of these for accessing the
    properties of bound data objects, so this new syntax is a big win.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这是现代箭头匿名函数的简写形式，等同于上一行的长形式。D3大量使用这种方法来访问绑定数据对象的属性，因此这种新的语法是一大进步。
- en: '![dpj2 0422](assets/dpj2_0422.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0422](assets/dpj2_0422.png)'
- en: Figure 4-22\. D3-generated circles
  id: totrans-348
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-22\. D3生成的圆圈
- en: We’ll see exactly how D3 works its magic in [Chapter 17](ch17.xhtml#chapter_d3_intro).
    For now, let’s summarize what we’ve learned in this chapter.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第17章](ch17.xhtml#chapter_d3_intro)中详细了解D3的奥秘。现在，让我们总结一下本章学到的内容。
- en: Summary
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided a basic set of modern web-development skills for the budding
    data visualizer. It showed how the various elements of a web page (HTML, CSS stylesheets,
    JavaScript, and media files) are delivered by HTTP and, on being received by the
    browser, combined to become the web page the user sees. We saw how content blocks
    are described, using HTML tags such as `div` and `p`, and then styled and positioned
    using CSS. We also covered Chrome’s Elements and Sources tabs, which are the key
    browser development tools. Finally we had a little primer in SVG, the language
    in which most modern web data visualizations are expressed. These skills will
    be extended when our toolchain reaches its D3 visualization and new ones will
    be introduced in context.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为初学数据可视化者提供了一组基本的现代Web开发技能。它展示了Web页面的各种元素（HTML、CSS样式表、JavaScript和媒体文件）是如何通过HTTP传送的，并且在被浏览器接收后，如何组合成用户看到的网页。我们看到了如何描述内容块，使用HTML标签如`div`和`p`，然后使用CSS进行样式化和定位。我们还介绍了Chrome的Elements和Sources标签，这是关键的浏览器开发工具。最后，我们简要介绍了SVG，这是大多数现代Web数据可视化表达的语言。这些技能将在我们的工具链达到其D3可视化时进行扩展，并且将在上下文中引入新的技能。
- en: ^([1](ch04.xhtml#idm45607793744992-marker)) There are some interesting alternatives
    to full-blown frameworks currently generating a buzz, such as [Alpine.js and htmx](https://oreil.ly/daXEB),
    which play well with Python web servers like Django and [Flask](https://oreil.ly/3zlEU).
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](ch04.xhtml#idm45607793744992-marker)) 目前有一些备受关注的替代方案，与Python Web服务器（如Django和[Flask](https://oreil.ly/3zlEU)）兼容良好，例如[Alpine.js和htmx](https://oreil.ly/daXEB)。 '
- en: ^([2](ch04.xhtml#idm45607793740624-marker)) I bear the scars so you don’t have
    to.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.xhtml#idm45607793740624-marker)) 我承受了伤痕，这样你就不必了。
- en: ^([3](ch04.xhtml#idm45607793670928-marker)) You can code style in HTML tags
    using the `style` attribute, but it’s generally bad practice. It’s better to use
    classes and ids defined in CSS.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch04.xhtml#idm45607793670928-marker)) 你可以使用`style`属性在HTML标签中编写样式，但这通常是一种不良实践。最好使用在CSS中定义的类和ID。
- en: ^([4](ch04.xhtml#idm45607793668384-marker)) As demonstrated [by Mike Bostock](https://oreil.ly/MgWtS),
    with a hat-tip to Paul Irish.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch04.xhtml#idm45607793668384-marker)) 正如迈克·博斯托克所演示的，向保罗·爱尔兰致敬。
- en: ^([5](ch04.xhtml#idm45607792973152-marker)) OpenGL (Open Graphics Language)
    and its web counterpart WebGL are cross-platform APIs for rendering 2D and 3D
    vector graphics (see the [Wikipedia page](https://oreil.ly/eytfV) for details).
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch04.xhtml#idm45607792973152-marker)) OpenGL（Open Graphics Language）及其网络对应物WebGL是跨平台的API，用于渲染2D和3D矢量图形（详情请参阅[Wikipedia页面](https://oreil.ly/eytfV)）。
- en: ^([6](ch04.xhtml#idm45607792962112-marker)) This is not the same as programmatically
    setting styles, which is a hugely powerful technique that allows styles to adapt
    to user interaction.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch04.xhtml#idm45607792962112-marker)) 这与以编程方式设置样式不同，后者是一种非常强大的技术，允许样式根据用户交互进行调整。
- en: ^([7](ch04.xhtml#idm45607792857568-marker)) This is generally considered bad
    practice and is usually an indication of poorly structured CSS. Use with extreme
    caution, as it can make life very difficult for code developers.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch04.xhtml#idm45607792857568-marker)) 这通常被认为是一种不良实践，通常是CSS结构混乱的指示。请极度谨慎使用，因为它可能会让代码开发人员的生活变得非常困难。
- en: '^([8](ch04.xhtml#idm45607792772048-marker)) These are succinctly discussed
    in Douglas Crockford’s famously short *JavaScript: The Good Parts* (O’Reilly).'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '^([8](ch04.xhtml#idm45607792772048-marker)) 这些在道格拉斯·克罗克福德著名简短的*JavaScript:
    The Good Parts*（O''Reilly）中简要讨论。'
- en: ^([9](ch04.xhtml#idm45607792668960-marker)) Being able to play with attributes
    is particularly useful when trying to get Scalable Vector Graphics (SVG) to work.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch04.xhtml#idm45607792668960-marker)) 当尝试使可缩放矢量图形（SVG）工作时，能够玩弄属性尤其有用。
- en: ^([10](ch04.xhtml#idm45607792628480-marker)) Logging is a great way of tracking
    data flow through your app. I recommend you adopt a consistent approach here.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch04.xhtml#idm45607792628480-marker)) 记录日志是跟踪应用程序数据流的好方法。我建议您在这里采用一致的方法。
- en: ^([11](ch04.xhtml#idm45607792243232-marker)) Here’s [a thread showing the many
    and varied solutions to the problem](https://oreil.ly/casbD), none of which could
    be called elegant.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch04.xhtml#idm45607792243232-marker)) 这里有[一个展示问题多样解决方案的讨论串](https://oreil.ly/casbD)，没有一个可以称得上优雅。
- en: ^([12](ch04.xhtml#idm45607791382032-marker)) With a `canvas` graphic context,
    you generally have to contrive your own event handling.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: ^([12](ch04.xhtml#idm45607791382032-marker)) 使用`canvas`图形上下文，通常需要自己设计事件处理。
- en: ^([13](ch04.xhtml#idm45607791376208-marker)) This number changes with time and
    the browser in question, but as a rough rule of thumb, SVG often starts to strain
    in the low thousands.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: ^([13](ch04.xhtml#idm45607791376208-marker)) 这个数字随时间和所用的浏览器而变化，但作为一个粗略的经验法则，SVG在低千个元素时通常开始吃力。
- en: ^([14](ch04.xhtml#idm45607791323968-marker)) You should be able to use your
    browser’s development tools to see the tag attributes updating in real time.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: ^([14](ch04.xhtml#idm45607791323968-marker)) 您应该能够使用浏览器的开发工具实时查看标签属性的更新。
- en: ^([15](ch04.xhtml#idm45607790535824-marker)) [Mike Bostock’s chord diagram](https://oreil.ly/ujCxf)
    is a nice example, and uses D3’s `chord` function.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: ^([15](ch04.xhtml#idm45607790535824-marker)) [迈克·博斯托克的弦图](https://oreil.ly/ujCxf)是一个很好的例子，使用了D3的`chord`函数。
- en: ^([16](ch04.xhtml#idm45607790321024-marker)) For example, a body group can contain
    an arm group, which can contain a hand group, which can contain finger elements.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: ^([16](ch04.xhtml#idm45607790321024-marker)) 例如，一个身体组可以包含一个手臂组，手臂组可以包含一个手组，手组可以包含手指元素。
