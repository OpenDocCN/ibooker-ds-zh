["```py\n# Number of pets each person owns\nsample = [1, 3, 2, 5, 7, 0, 2, 3]\n\nmean = sum(sample) / len(sample)\n\nprint(mean) # prints 2.875\n```", "```py\n# Three exams of .20 weight each and final exam of .40 weight\nsample = [90, 80, 63, 87]\nweights = [.20, .20, .20, .40]\n\nweighted_mean = sum(s * w for s,w in zip(sample, weights)) / sum(weights)\n\nprint(weighted_mean) # prints 81.4\n```", "```py\n# Three exams of .20 weight each and final exam of .40 weight\nsample = [90, 80, 63, 87]\nweights = [1.0, 1.0, 1.0, 2.0]\n\nweighted_mean = sum(s * w for s,w in zip(sample, weights)) / sum(weights)\n\nprint(weighted_mean) # prints 81.4\n```", "```py\n0, 1, 5, *7*, 9, 10, 14\n```", "```py\n# Number of pets each person owns\nsample = [0, 1, 5, 7, 9, 10, 14]\n\ndef median(values):\n    ordered = sorted(values)\n    print(ordered)\n    n = len(ordered)\n    mid = int(n / 2) - 1 if n % 2 == 0 else int(n/2)\n\n    if n % 2 == 0:\n        return (ordered[mid] + ordered[mid+1]) / 2.0\n    else:\n        return ordered[mid]\n\nprint(median(sample)) # prints 7\n```", "```py\n# Number of pets each person owns\nfrom collections import defaultdict\n\nsample = [1, 3, 2, 5, 7, 0, 2, 3]\n\ndef mode(values):\n    counts = defaultdict(lambda: 0)\n\n    for s in values:\n        counts[s] += 1\n\n    max_count = max(counts.values())\n    modes = [v for v in set(values) if counts[v] == max_count]\n    return modes\n\nprint(mode(sample)) # [2, 3]\n```", "```py\n# Number of pets each person owns\ndata = [0, 1, 5, 7, 9, 10, 14]\n\ndef variance(values):\n    mean = sum(values) / len(values)\n    _variance = sum((v - mean) ** 2 for v in values) / len(values)\n    return _variance\n\nprint(variance(data))  # prints 21.387755102040813\n```", "```py\nfrom math import sqrt\n\n# Number of pets each person owns\ndata = [0, 1, 5, 7, 9, 10, 14]\n\ndef variance(values):\n    mean = sum(values) / len(values)\n    _variance = sum((v - mean) ** 2 for v in values) / len(values)\n    return _variance\n\ndef std_dev(values):\n    return sqrt(variance(values))\n\nprint(std_dev(data))  # prints 4.624689730353898\n```", "```py\nfrom math import sqrt\n\n# Number of pets each person owns\ndata = [0, 1, 5, 7, 9, 10, 14]\n\ndef variance(values, is_sample: bool = False):\n    mean = sum(values) / len(values)\n    _variance = sum((v - mean) ** 2 for v in values) /\n      (len(values) - (1 if is_sample else 0))\n\n    return _variance\n\ndef std_dev(values, is_sample: bool = False):\n    return sqrt(variance(values, is_sample))\n\nprint(\"VARIANCE = {}\".format(variance(data, is_sample=True))) # 24.95238095238095\nprint(\"STD DEV = {}\".format(std_dev(data, is_sample=True))) # 4.99523582550223\n```", "```py\n# normal distribution, returns likelihood\ndef normal_pdf(x: float, mean: float, std_dev: float) -> float:\n    return (1.0 / (2.0 * math.pi * std_dev ** 2) ** 0.5) *\n        math.exp(-1.0 * ((x - mean) ** 2 / (2.0 * std_dev ** 2)))\n```", "```py\nfrom scipy.stats import norm\n\nmean = 64.43\nstd_dev = 2.99\n\nx = norm.cdf(64.43, mean, std_dev)\n\nprint(x) # prints 0.5\n```", "```py\nfrom scipy.stats import norm\n\nmean = 64.43\nstd_dev = 2.99\n\nx = norm.cdf(66, mean, std_dev) - norm.cdf(62, mean, std_dev)\n\nprint(x) # prints 0.4920450147062894\n```", "```py\nfrom scipy.stats import norm\n\nx = norm.ppf(.95, loc=64.43, scale=2.99)\nprint(x) # 69.3481123445849\n```", "```py\nimport random\nfrom scipy.stats import norm\n\nfor i in range(0,1000):\n    random_p = random.uniform(0.0, 1.0)\n    random_weight = norm.ppf(random_p,  loc=64.43, scale=2.99)\n    print(random_weight)\n```", "```py\ndef z_score(x, mean, std):\n    return (x - mean) / std\n\ndef z_to_x(z, mean, std):\n    return (z * std) + mean\n\nmean = 140000\nstd_dev = 3000\nx = 150000\n\n# Convert to Z-score and then back to X\nz = z_score(x, mean, std_dev)\nback_to_x = z_to_x(z, mean, std_dev)\n\nprint(\"Z-Score: {}\".format(z))  # Z-Score: 3.333\nprint(\"Back to X: {}\".format(back_to_x))  # Back to X: 150000.0\n```", "```py\n# Samples of the uniform distribution will average out to a normal distribution.\nimport random\nimport plotly.express as px\n\nsample_size = 31\nsample_count = 1000\n\n# Central limit theorem, 1000 samples each with 31\n# random numbers between 0.0 and 1.0\nx_values = [(sum([random.uniform(0.0, 1.0) for i in range(sample_size)]) / \\\n    sample_size)\n            for _ in range(sample_count)]\n\ny_values = [1 for _ in range(sample_count)]\n\npx.histogram(x=x_values, y = y_values, nbins=20).show()\n```", "```py\nfrom scipy.stats import norm\n\ndef critical_z_value(p):\n    norm_dist = norm(loc=0.0, scale=1.0)\n    left_tail_area = (1.0 - p) / 2.0\n    upper_area = 1.0 - ((1.0 - p) / 2.0)\n    return norm_dist.ppf(left_tail_area), norm_dist.ppf(upper_area)\n\nprint(critical_z_value(p=.95))\n# (-1.959963984540054, 1.959963984540054)\n```", "```py\nfrom math import sqrt\nfrom scipy.stats import norm\n\ndef critical_z_value(p):\n    norm_dist = norm(loc=0.0, scale=1.0)\n    left_tail_area = (1.0 - p) / 2.0\n    upper_area = 1.0 - ((1.0 - p) / 2.0)\n    return norm_dist.ppf(left_tail_area), norm_dist.ppf(upper_area)\n\ndef confidence_interval(p, sample_mean, sample_std, n):\n    # Sample size must be greater than 30\n\n    lower, upper = critical_z_value(p)\n    lower_ci = lower * (sample_std / sqrt(n))\n    upper_ci = upper * (sample_std / sqrt(n))\n\n    return sample_mean + lower_ci, sample_mean + upper_ci\n\nprint(confidence_interval(p=.95, sample_mean=64.408, sample_std=2.05, n=31))\n# (63.68635915701992, 65.12964084298008)\n```", "```py\nfrom scipy.stats import norm\n\n# Cold has 18 day mean recovery, 1.5 std dev\nmean = 18\nstd_dev = 1.5\n\n# 95% probability recovery time takes between 15 and 21 days.\nx = norm.cdf(21, mean, std_dev) - norm.cdf(15, mean, std_dev)\n\nprint(x) # 0.9544997361036416\n```", "```py\nfrom scipy.stats import norm\n\n# Cold has 18 day mean recovery, 1.5 std dev\nmean = 18\nstd_dev = 1.5\n\n# What x-value has 5% of area behind it?\nx = norm.ppf(.05, mean, std_dev)\n\nprint(x) # 15.53271955957279\n```", "```py\nfrom scipy.stats import norm\n\n# Cold has 18 day mean recovery, 1.5 std dev\nmean = 18\nstd_dev = 1.5\n\n# Probability of 16 or less days\np_value = norm.cdf(16, mean, std_dev)\n\nprint(p_value) # 0.09121121972586788\n```", "```py\nfrom scipy.stats import norm\n\n# Cold has 18 day mean recovery, 1.5 std dev\nmean = 18\nstd_dev = 1.5\n\n# What x-value has 2.5% of area behind it?\nx1 = norm.ppf(.025, mean, std_dev)\n\n# What x-value has 97.5% of area behind it\nx2 = norm.ppf(.975, mean, std_dev)\n\nprint(x1) # 15.060054023189918\nprint(x2) # 20.93994597681008\n```", "```py\nfrom scipy.stats import norm\n\n# Cold has 18 day mean recovery, 1.5 std dev\nmean = 18\nstd_dev = 1.5\n\n# Probability of 16 or less days\np1 = norm.cdf(16, mean, std_dev)\n\n# Probability of 20 or more days\np2 = 1.0 -  norm.cdf(20, mean, std_dev)\n\n# P-value of both tails\np_value = p1 + p2\n\nprint(p_value) # 0.18242243945173575\n```", "```py\nfrom scipy.stats import t\n\n# get critical value range for 95% confidence\n# with a sample size of 25\n\nn = 25\nlower = t.ppf(.025, df=n-1)\nupper = t.ppf(.975, df=n-1)\n\nprint(lower, upper)\n-2.063898561628021 2.0638985616280205\n```"]