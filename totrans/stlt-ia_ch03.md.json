["```py\nimport streamlit as st\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\n\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Task:\n    name: str\n    is_done: bool = False\n```", "```py\ntask_list = [Task(\"Buy milk\"), Task(\"Walk the dog\")]\n```", "```py\nfrom task import Task\n```", "```py\nfor task in task_list:\n    st.checkbox(task.name, task.is_done)\n```", "```py\nimport streamlit as st\nfrom task import Task\n\ntask_list = [Task(\"Buy milk\"), Task(\"Walk the dog\")]\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nfor task in task_list:\n    st.checkbox(task.name, task.is_done)\n\n```", "```py\nfor task in task_list:\n    task_col, delete_col = st.columns([0.8, 0.2])\n    task_col.checkbox(task.name, task.is_done)\n    if delete_col.button(\"Delete\"):\n        pass\n```", "```py\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    task_col.checkbox(task.name, task.is_done)\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        pass\n```", "```py\nfor idx in range(len(task_list)):\n    task = task_list[idx]\n    ...\n\n```", "```py\ntask_col.checkbox(task.name, task.is_done, key=f\"task_{idx}\")\n```", "```py\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n```", "```py\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n```", "```py\ndef delete_task(idx: int):\n    del task_list[idx]\n```", "```py\ntask_list = []\n```", "```py\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n```", "```py\nimport streamlit as st\nfrom task import Task\n\ntask_list = []\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    task_col.checkbox(task.name, task.is_done, key=f\"task_{idx}\")\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        pass\n\n```", "```py\nst.info(f\"task_list: {task_list}\")\n```", "```py\nLocal URL: http://localhost:8502\n```", "```py\nimport streamlit as st\nfrom task import Task\n\ntask_list = []\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nst.info(f\"task_list: {task_list}\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    task_col.checkbox(task.name, task.is_done, key=f\"task_{idx}\")\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        pass\n```", "```py\nif st.button(\"Add task\", type=\"primary\")\n```", "```py\nimport streamlit as st\n\nif \"number\" not in st.session_state:\n    st.session_state.number = 0\n\nif st.button(\"Increment\"):\n    st.session_state.number += 1\n\nst.info(f\"Number: {st.session_state.number}\")\n\n```", "```py\nif \"task_list\" not in st.session_state:\n    st.session_state.task_list = []\n```", "```py\ntask_list = st.session_state.task_list\n```", "```py\nimport streamlit as st\nfrom task import Task\n\nif \"task_list\" not in st.session_state:\n    st.session_state.task_list = []\ntask_list = st.session_state.task_list\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nst.info(f\"task_list: {task_list}\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    task_col.checkbox(task.name, task.is_done, key=f\"task_{idx}\")\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        pass\n```", "```py\nif delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n    pass\n```", "```py\nif delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n    delete_task(idx)\n```", "```py\nst.rerun()\n```", "```py\nif delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n    delete_task(idx)\n    st.rerun()\n```", "```py\ntask_col.checkbox(task.name, task.is_done, key=f\"task_{idx}\")\n```", "```py\n~~Text to be struck through~~\n```", "```py\nlabel = f\"~~{task.name}~~\" if task.is_done else task.name\n```", "```py\ntask_col.checkbox(label, task.is_done, key=f\"task_{idx}\")\n```", "```py\nimport streamlit as st\nfrom task import Task\n\nif \"task_list\" not in st.session_state:\n    st.session_state.task_list = []\ntask_list = st.session_state.task_list\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nst.info(f\"task_list: {task_list}\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    label = f\"~~{task.name}~~\" if task.is_done else task.name #A\n if task_col.checkbox(label, task.is_done, key=f\"task_{idx}\"):\n mark_done(task) #B\n else:\n mark_not_done(task) #C\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        delete_task(idx)\n        st.rerun()\n```", "```py\nif task_col.checkbox(label, task.is_done, key=f\"task_{idx}\"):\n    mark_done(task)\n    st.rerun()\nelse:\n    mark_not_done(task)\n    st.rerun()\n```", "```py\nif task_col.checkbox(label, task.is_done, key=f\"task_{idx}\"):\n    mark_done(task)\n    st.rerun()\nelse:\n    mark_not_done(task)\n    st.rerun()\n```", "```py\nchecked = task_col.checkbox(label, task.is_done, key=f\"task_{idx}\")    #A\nif checked and not task.is_done:    #B\n    mark_done(task)\n    st.rerun()\nelif not checked and task.is_done:    #C\n    mark_not_done(task)\n    st.rerun()\n```", "```py\ntotal_tasks = len(task_list)\ncompleted_tasks = sum(1 for task in task_list if task.is_done)\nmetric_display = f\"{completed_tasks}/{total_tasks} done\"\nst.metric(\"Task completion\", metric_display, delta=None)\n```", "```py\nimport streamlit as st\nfrom task import Task\n\nif \"task_list\" not in st.session_state:\n    st.session_state.task_list = []\ntask_list = st.session_state.task_list\n\ndef add_task(task_name: str):\n    task_list.append(Task(task_name))\n\ndef delete_task(idx: int):\n    del task_list[idx]\n\ndef mark_done(task: Task):\n    task.is_done = True\n\ndef mark_not_done(task: Task):\n    task.is_done = False\n\nwith st.sidebar:\n    task = st.text_input(\"Enter a task\")\n    if st.button(\"Add task\", type=\"primary\"):\n        add_task(task)\n\ntotal_tasks = len(task_list)\ncompleted_tasks = sum(1 for task in task_list if task.is_done)\nmetric_display = f\"{completed_tasks}/{total_tasks} done\"\nst.metric(\"Task completion\", metric_display, delta=None)\n\nst.header(\"Today's to-dos:\", divider=\"gray\")\nfor idx, task in enumerate(task_list):\n    task_col, delete_col = st.columns([0.8, 0.2])\n    label = f\"~~{task.name}~~\" if task.is_done else task.name\n    checked = task_col.checkbox(label, task.is_done, key=f\"task_{idx}\")\n    if checked and not task.is_done:\n        mark_done(task)\n        st.rerun()\n    elif not checked and task.is_done:\n        mark_not_done(task)\n        st.rerun()\n    if delete_col.button(\"Delete\", key=f\"delete_{idx}\"):\n        delete_task(idx)\n        st.rerun()\n\n```"]