["```py\nIn [1]: import matplotlib.pyplot as plt\n        plt.style.use('classic')\n        import numpy as np\n\n        %matplotlib inline\n```", "```py\nIn [2]: ax = plt.axes(xscale='log', yscale='log')\n        ax.set(xlim=(1, 1E3), ylim=(1, 1E3))\n        ax.grid(True);\n```", "```py\nIn [3]: print(ax.xaxis.get_major_locator())\n        print(ax.xaxis.get_minor_locator())\nOut[3]: <matplotlib.ticker.LogLocator object at 0x1129b9370>\n        <matplotlib.ticker.LogLocator object at 0x1129aaf70>\n```", "```py\nIn [4]: print(ax.xaxis.get_major_formatter())\n        print(ax.xaxis.get_minor_formatter())\nOut[4]: <matplotlib.ticker.LogFormatterSciNotation object at 0x1129aaa00>\n        <matplotlib.ticker.LogFormatterSciNotation object at 0x1129aac10>\n```", "```py\nIn [5]: ax = plt.axes()\n        rng = np.random.default_rng(1701)\n        ax.plot(rng.random(50))\n        ax.grid()\n\n        ax.yaxis.set_major_locator(plt.NullLocator())\n        ax.xaxis.set_major_formatter(plt.NullFormatter())\n```", "```py\nIn [6]: fig, ax = plt.subplots(5, 5, figsize=(5, 5))\n        fig.subplots_adjust(hspace=0, wspace=0)\n\n        # Get some face data from Scikit-Learn\n        from sklearn.datasets import fetch_olivetti_faces\n        faces = fetch_olivetti_faces().images\n\n        for i in range(5):\n            for j in range(5):\n                ax[i, j].xaxis.set_major_locator(plt.NullLocator())\n                ax[i, j].yaxis.set_major_locator(plt.NullLocator())\n                ax[i, j].imshow(faces[10 * i + j], cmap='binary_r')\n```", "```py\nIn [7]: fig, ax = plt.subplots(4, 4, sharex=True, sharey=True)\n```", "```py\nIn [8]: # For every axis, set the x and y major locator\n        for axi in ax.flat:\n            axi.xaxis.set_major_locator(plt.MaxNLocator(3))\n            axi.yaxis.set_major_locator(plt.MaxNLocator(3))\n        fig\n```", "```py\nIn [9]: # Plot a sine and cosine curve\n        fig, ax = plt.subplots()\n        x = np.linspace(0, 3 * np.pi, 1000)\n        ax.plot(x, np.sin(x), lw=3, label='Sine')\n        ax.plot(x, np.cos(x), lw=3, label='Cosine')\n\n        # Set up grid, legend, and limits\n        ax.grid(True)\n        ax.legend(frameon=False)\n        ax.axis('equal')\n        ax.set_xlim(0, 3 * np.pi);\n```", "```py\nIn [10]: ax.xaxis.set_major_locator(plt.MultipleLocator(np.pi / 2))\n         ax.xaxis.set_minor_locator(plt.MultipleLocator(np.pi / 4))\n         fig\n```", "```py\nIn [11]: def format_func(value, tick_number):\n             # find number of multiples of pi/2\n             N = int(np.round(2 * value / np.pi))\n             if N == 0:\n                 return \"0\"\n             elif N == 1:\n                 return r\"$\\pi/2$\"\n             elif N == 2:\n                 return r\"$\\pi$\"\n             elif N % 2 > 0:\n                 return rf\"${N}\\pi/2$\"\n             else:\n                 return rf\"${N // 2}\\pi$\"\n\n         ax.xaxis.set_major_formatter(plt.FuncFormatter(format_func))\n         fig\n```"]