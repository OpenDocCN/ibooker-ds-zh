- en: Appendix A. Documenting Commands and Creating Workflows with make
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 使用 make 记录命令和创建工作流
- en: The `make` program was created in 1976 to help build executable programs from
    source code files. Though it was originally developed to assist with programming
    in the C language, it is not limited to that language or even to the task of compiling
    code. According to the manual, one “can use it to describe any task where some
    files must be updated automatically from others whenever the others change.” The
    `make` program has evolved far beyond its role as a build tool to become a workflow
    system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`make` 程序是在 1976 年创建的，用于从源代码文件构建可执行程序。尽管最初是为了帮助使用 C 语言编程而开发的，但它不限于该语言，甚至不限于编译代码的任务。根据手册，人们可以使用它来描述任何需要在其他文件更改时自动更新一些文件的任务。“make”
    程序已经远远超出了其作为构建工具的角色，成为一个工作流系统。'
- en: Makefiles Are Recipes
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Makefiles 就像食谱一样
- en: When you run the `make` command, it looks for a file called *Makefile* (or *makefile*)
    in the current working directory. This file contains recipes that describe discrete
    actions that combine to create some output. Think of how a recipe for a lemon
    meringue pie has steps that need to be completed in a particular order and combination.
    For instance, I need to separately create the crust, filling, and meringue and
    then put them together and bake them before I can enjoy a tasty treat. I can visualize
    this with something called a *string diagram*, as illustrated in [Figure A-1](#fig_a1.1).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `make` 命令时，它会在当前工作目录中寻找名为 *Makefile*（或 *makefile*）的文件。该文件包含描述组合在一起创建某些输出的离散操作的食谱。想象一下柠檬蛋白饼的配方有需要按特定顺序和组合完成的步骤。例如，我需要分别制作馅饼皮、填料和蛋白霜，然后将它们组合在一起烘烤，才能享受美味。我可以用一种称为
    *串图* 的东西来可视化这一过程，如 [图 A-1](#fig_a1.1) 所示。
- en: '![mpfb aa01](assets/mpfb_aa01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb aa01](assets/mpfb_aa01.png)'
- en: Figure A-1\. A string diagram describing how to make a pie, adapted from Brendan
    Fong and David Spivak, An Invitation to Applied Category Theory (Seven Sketches
    in Compositionality), Cambridge University Press, 2019
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-1\. 描述如何制作馅饼的串图，改编自 Brendan Fong 和 David Spivak 的《应用范畴论邀请（组合性的七个素描）》，剑桥大学出版社，2019
    年。
- en: It’s not important if you make the pie crust the day before and keep it chilled,
    and the same might hold true for the filling, but it’s certainly true that the
    crust needs to go into the dish first, followed by the filling and finally the
    meringue. An actual recipe might refer to generic recipes for crust and meringue
    elsewhere and list only the steps for the lemon filling and baking instructions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提前一天做好馅饼皮并冷藏，以及填料同样也适用，但是确实需要先把皮放入盘中，然后是填料，最后是蛋白霜。实际的食谱可能会引用其他地方的通用配方来制作馅饼皮和蛋白霜，并且只列出制作柠檬馅料和烘烤说明的步骤。
- en: 'I can write a *Makefile* to mock up these ideas. I’ll use shell scripts to
    pretend I’m assembling the various ingredients into some output files like *crust.txt*
    and *filling.txt*. In the *app01_makefiles/pie* directory, I’ve written a *combine.sh*
    script that expects a filename and a list of “ingredients” to put into the file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以编写一个 *Makefile* 来模拟这些想法。我将使用 shell 脚本来假装我正在将各种成分组合到像 *crust.txt* 和 *filling.txt*
    这样的输出文件中。在 *app01_makefiles/pie* 目录中，我编写了一个 *combine.sh* 脚本，它期望一个文件名和一个要放入文件中的“成分”列表：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I can pretend to make the crust like this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以像这样假装制作馅饼皮：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is now a *crust.txt* file with the following contents:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个名为 *crust.txt* 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It’s common but not necessary for a recipe in a *Makefile* to create an output
    file. Note in this example that the `clean` target removes files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Makefile* 中，一个食谱通常但不必要创建一个输出文件。请注意，在这个例子中，`clean` 目标移除文件：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-1)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-1)'
- en: This defines a target called `all`. The first target will be the one that is
    run when no target is specified. Convention holds that the `all` target will run
    *all* the targets necessary to accomplish some default goal, like building a piece
    of software. Here I want to create the *pie.txt* file from the component files
    and “cook” it. The name `all` is not as important as the fact that it is defined
    first. The target name is followed by a colon and then any dependencies that must
    be satisfied before running this target.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了一个名为 `all` 的目标。当未指定目标时，将运行第一个目标。惯例是 `all` 目标将运行*所有*必要的目标以完成某个默认目标，比如构建软件。这里我想从组件文件中创建
    *pie.txt* 文件并“烘烤”它。`all` 的名字并不重要，重要的是它被首先定义。目标名称后跟一个冒号，然后是运行此目标之前必须满足的任何依赖项。
- en: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-2)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-2)'
- en: The `all` target has two commands to run. Each command is indented with a Tab
    character.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`all`目标有两个要运行的命令。每个命令都用制表符缩进。'
- en: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-3)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-3)'
- en: This is the `filling.txt` target. The goal of this target is to create the file
    called *filling.txt*. It’s common but not necessary to use the output filename
    as the target name. This target has just one command, which is to combine the
    ingredients for the filling.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `filling.txt` 目标。此目标的目标是创建名为 *filling.txt* 的文件。通常但不必要的是使用输出文件名作为目标名。此目标只有一个命令，即将填料的成分组合在一起。
- en: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-4)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-4)'
- en: This is the `meringue.txt` target, and it combines the egg whites and sugar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `meringue.txt` 目标，它结合了蛋清和糖。
- en: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-5)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-5)'
- en: This is the `crust.txt` target that combines flour, butter, and water.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `crust.txt` 目标，它结合了面粉、黄油和水。
- en: '[![6](assets/6.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-6)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_documenting_commands_and_creating_workflows_with_make_CO1-6)'
- en: It’s common to have a `clean` target to remove any files that were created in
    the normal course of building.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会有一个 `clean` 目标，用于删除在正常构建过程中创建的任何文件。
- en: As you can see in the preceding example, the target has a name followed by a
    colon. Any dependent actions can be listed after the colon in the order you wish
    them to be run. The actions for a target must be indented with a Tab character,
    as shown in Figure A-2, and you are allowed to define as many commands as you
    like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的例子所示，目标有一个名称，后面跟着冒号。任何依赖动作都可以按你希望的顺序在冒号后列出。目标的动作必须用制表符缩进，如图 A-2 所示，你可以定义任意多个命令。
- en: '![mpfb aa02](assets/mpfb_aa02.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb aa02](assets/mpfb_aa02.png)'
- en: Figure A-2\. A Makefile target is terminated by a colon and optionally followed
    by dependencies; all the target’s actions must be indented with a single tab character
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-2。一个 Makefile 目标以冒号结尾，可选择跟随依赖项；所有目标的动作必须用单个制表符缩进。
- en: Running a Specific Target
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行特定目标
- en: Each action in a *Makefile* is called a *target*, *rule*, or *recipe*. The order
    of the targets is not important beyond the first target being the default. Targets,
    like the functions in Python programs, can reference other targets defined earlier
    or later in the file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*Makefile* 中的每个动作称为 *目标*、*规则* 或 *配方*。目标的顺序除了第一个目标作为默认目标外并不重要。目标可以像 Python 程序中的函数一样引用早先或晚于它定义的其他目标。'
- en: 'To run a specific target, I run **`make target`** to have `make` run the commands
    for a given recipe:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行特定目标，我运行**`make target`**来让 `make` 运行给定配方的命令：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now there is a file called *filling.txt*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一个名为 *filling.txt* 的文件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If I try to run this target again, I’ll be told there’s nothing to do because
    the file already exists:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我尝试再次运行此目标，将告知无需执行任何操作，因为文件已存在：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One of the reasons for the existence of `make` is precisely not to do extra
    work to create files unless some underlying source has changed. In the course
    of building software or running a pipeline, it may not be necessary to generate
    some output unless the inputs have changed, such as the source code being modified.
    To force `make` to run the *filling.txt* target, I can either remove that file
    or run **`make clean`** to remove any of the files that have been created:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`make` 存在的原因之一正是为了不必要地创建文件，除非某些底层源代码已更改。在构建软件或运行流水线的过程中，可能不必生成某些输出，除非输入已更改，例如修改了源代码。要强制
    `make` 运行*filling.txt*目标，我可以删除该文件，或者运行**`make clean`**以删除已创建的任何文件：'
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running with No Target
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行没有目标
- en: If you run the `make` command with no arguments, it will automatically run the
    first target. This is the main reason to place the `all` target (or something
    like it) first. Be careful not to put something destructive like a `clean` target
    first, as you might end up accidentally running it and removing valuable data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不带任何参数运行 `make` 命令，它会自动运行第一个目标。这是将 `all` 目标（或类似的目标）放在第一位的主要原因。但要小心，不要将像 `clean`
    这样有破坏性的目标放在第一位，否则可能会意外运行它并删除有价值的数据。
- en: 'Here’s the output when I run `make` with the preceding *Makefile*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行带有前述 *Makefile* 的 `make` 时，输出如下：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-1)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-1)'
- en: I run `make` with no arguments. It looks for the first target in a file called
    *Makefile* in the current working directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我不带任何参数运行 `make`。它会在当前工作目录中的名为 *Makefile* 的文件中查找第一个目标。
- en: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-2)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-2)'
- en: The *crust.txt* recipe is run first. Because I didn’t specify a target, `make`
    runs the `all` target which is defined first, and this target lists *crust.txt*
    as the first dependency.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*crust.txt* 配方首先运行。因为我没有指定目标，`make` 运行了第一个定义的 `all` 目标，而这个目标列出了*crust.txt*作为第一个依赖项。'
- en: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-3)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-3)'
- en: Next, the *filling.txt* target is run.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来运行 *filling.txt* 目标。
- en: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-4)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-4)'
- en: This is followed by the *meringue.txt*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是*meringue.txt*。
- en: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-5)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-5)'
- en: Next I assemble *pie.txt*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我组装*pie.txt*。
- en: '[![6](assets/6.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-6)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_documenting_commands_and_creating_workflows_with_make_CO2-6)'
- en: And then I “cook” the pie at 375 degrees for 45 minutes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我在 375 度下烤 pie 45 分钟。
- en: 'If I run `make` again, I’ll see that the intermediate steps to produce the
    *crust.txt*, *filling.txt*, and *meringue.txt* files are skipped because they
    already exist:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我再次运行 `make`，我会看到跳过产生 *crust.txt*、*filling.txt* 和 *meringue.txt* 文件的中间步骤，因为它们已经存在：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If I want to force them to be recreated I can run `make clean && make`, where
    the `&&` is a logical *and* that will only run the second command if the first
    command succeeds:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想强制重新创建它们，可以运行`make clean && make`，其中 `&&` 是逻辑*与*，仅在第一个命令成功运行后才运行第二个命令：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Makefiles Create DAGs
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Makefile 创建 DAGs
- en: Each target can specify other targets as prerequisites or dependencies that
    must be completed first. These actions create a graph structure with a starting
    point and paths through targets to finally create some output file(s). The path
    described for any target should be a *directed* (from a start to a stop) *acyclic*
    (having no cycles or infinite loops) *graph*, or DAG, as shown in Figure A-3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每个目标都可以指定其他目标作为必须先完成的前提条件或依赖关系。这些操作创建了一个图结构，有一个起点和穿过目标的路径，最终创建一些输出文件。任何目标描述的路径应该是一个*有向*（从开始到结束）*无环*（没有循环或无限循环）*图*，或称为
    DAG，如图 A-3 所示。
- en: '![mpfb aa03](assets/mpfb_aa03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb aa03](assets/mpfb_aa03.png)'
- en: Figure A-3\. The targets may join together to describe a directed acyclic graph
    of actions to produce some result
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-3\. 这些目标可以组合在一起，描述一个有向无环图的操作，以产生某个结果
- en: Many analysis pipelines are just that—a graph of some input, like a FASTA sequence
    file, and some transformations (trimming, filtering, comparisons) into some output,
    like BLAST hits, gene predictions, or functional annotations. You would be surprised
    at just how far `make` can be abused to document your work and even create fully
    functional analysis pipelines.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 许多分析管道就是这样——一个输入的图，如 FASTA 序列文件，以及一些转换（修剪，过滤，比较），最终输出 BLAST 命中，基因预测或功能注释等结果。你会惊讶地发现
    `make` 可以被滥用来记录你的工作甚至创建完全功能的分析管道。
- en: Using make to Compile a C Program
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 make 编译一个 C 程序
- en: 'I believe it helps to use `make` for its intended purpose at least once in
    your life to understand why it exists. I’ll take a moment to write and compile
    a “Hello, World” example in the C language. In the *app01_makefiles/c-hello* directory,
    you will find a simple C program that will print “Hello, World!” Here is the *hello.c*
    source code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信至少在生活中使用一次 `make` 来理解它存在的原因是有帮助的。我会花点时间编写并编译一个用 C 语言编写的“Hello, World”示例。在
    *app01_makefiles/c-hello* 目录中，你会找到一个简单的 C 程序，它将打印“Hello, World！”下面是 *hello.c*
    的源代码：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-1)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-1)'
- en: Like in `bash`, the `#` character introduces comments in the C language, but
    this is a special comment that allows external modules of code to be used. Here,
    I want to use the `printf` (print-format) function, so I need to `include` the
    standard I/O (input/output) module, called `stdio`. I only need to include the
    “header” file, `stdio.h`, to get at the function definitions in that module. This
    is a standard module, and the C compiler will look in various locations for any
    included files to find it. There may be times when you are unable to compile C
    (or C++ programs) from source code because some header file cannot be found. For
    example, the `gzip` library is often used to de/compress data, but it is not always
    installed in a library form that other programs may `include` in this way. Therefore,
    you will have to download and install the `libgz` program, being sure to install
    the headers into the proper `include` directories. Note that package managers
    like `apt-get` and `yum` often have `-dev` or `-devel` packages that you have
    to install to get these headers; that is, you’ll need to install both `libgz`
    and `libgz-dev` or whatnot.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 `bash` 中一样，`#` 字符引入了 C 语言中的注释，但这是一个特殊的注释，允许使用外部代码模块。在这里，我想使用 `printf`（打印格式）函数，所以我需要
    `include` 标准输入/输出（input/output）模块，称为 `stdio`。我只需要包含“头”文件 `stdio.h`，以获取该模块中的函数定义。这是一个标准模块，C
    编译器将在各种位置查找任何包含的文件以找到它。有时由于找不到某个头文件，你可能无法从源代码编译 C（或 C++）程序。例如，gzip 库通常用于解压/压缩数据，但它并不总是以其他程序可以
    `include` 的库形式安装。因此，你需要下载并安装 `libgz` 程序，确保将头文件安装到正确的 `include` 目录中。请注意，像 `apt-get`
    和 `yum` 这样的软件包管理器通常有 `-dev` 或 `-devel` 包，你必须安装这些包来获取这些头文件；也就是说，你需要安装 `libgz` 和
    `libgz-dev` 或类似的包。
- en: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-2)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-2)'
- en: This is the start of a function declaration in C. The function name (`main`)
    is preceded by its return type (`int`). The parameters to the function are listed
    inside the parentheses after its name. In this case there are none, so the parentheses
    are empty. The opening curly brace (`{`) shows the start of the code that belongs
    to the function. Note that C will automatically execute the `main()` function,
    and every C program must have a `main()` function where the program starts.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 C 中函数声明的开始。函数名（`main`）前面是它的返回类型（`int`）。函数的参数列在名称后的括号内。在这种情况下没有参数，所以括号为空。开头的大括号（`{`）表示函数代码的开始。请注意，C
    将自动执行 `main()` 函数，并且每个 C 程序必须有一个 `main()` 函数，这是程序的起点。
- en: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-3)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-3)'
- en: The `printf()` function will print the given string to the command line. This
    function is defined in the `stdio` library, which is why I need to `#include`
    the header file above.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf()` 函数将给定的字符串打印到命令行。此函数定义在 `stdio` 库中，这就是为什么我需要 `#include` 上面的头文件。'
- en: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-4)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-4)'
- en: '`return` will exit the function and return the value `0`. Since this is the
    return value for the `main()` function, this will be the exit value for the entire
    program. The value `0` indicates that the program ran normally—think “zero errors.”
    Any non-zero value would indicate a failure.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`将退出函数并返回值`0`。因为这是`main()`函数的返回值，这将是整个程序的退出值。值`0`表示程序正常运行—即“零错误”。任何非零值都表示失败。'
- en: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-5)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO3-5)'
- en: The closing curly brace (`}`) is the mate for the one on line 2 and marks the
    end of the `main()` function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结束花括号（`}`）是第2行的配对符号，并标记了`main()`函数的结束。
- en: 'To turn that into an executable program you will need to have a C compiler
    on your machine. For instance, I can use `gcc`, the GNU C compiler:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为可执行程序，您需要在计算机上安装C编译器。例如，我可以使用GNU C编译器`gcc`：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'That will create a file called *a.out*, which is an executable file. On my
    Macintosh, this is what `file` will report:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为*a.out*的文件，这是一个可执行文件。在我的Macintosh上，`file`会报告如下：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And I can execute that:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以执行它：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I don’t like the name *a.out*, though, so I can use the `-o` option to name
    the output file *hello*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢*a.out*这个名称，所以我可以使用`-o`选项来命名输出文件为*hello*：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run the resulting *hello* executable. You should see the same output.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行生成的*hello*可执行文件。您应该看到相同的输出。
- en: 'Rather than typing `gcc -o hello hello.c` every time I modify *hello.c*, I
    can put that in a *Makefile*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是每次修改*hello.c*时都要输入`gcc -o hello hello.c`，我可以将其放入*Makefile*中：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And now I can run **`make hello`** or just **`make`** if this is the first
    target:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以运行**`make hello`**或者如果这是第一个目标，只需运行**`make`**：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If I run **`make`** again, nothing happens because the *hello.c* file hasn’t
    changed:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我再次运行**`make`**，因为*hello.c*文件没有改变，所以什么都不会发生：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What happens if I alter the *hello.c* code to print “Hola” instead of “Hello,”
    and then try running `make` again?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我将*hello.c*代码更改为打印“Hola”而不是“Hello”，然后再次运行`make`会发生什么？
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'I can force `make` to run the targets using the `-B` option:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以通过使用`-B`选项强制`make`运行目标：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And now the new program has been compiled:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在新程序已经编译完成：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is a trivial example, and you may be wondering how this saves time. A real-world
    project in C or any language would likely have multiple *.c* files with headers
    (*.h* files) describing their functions so that they could be used by other *.c*
    files. The C compiler would need to turn each *.c* file into a *.o* (*out*) file
    and then link them together into a single executable. Imagine you have dozens
    of *.c* files, and you change one line of code in one file. Do you want to type
    dozens of commands to recompile and link all your code? Of course not. You would
    build a tool to automate those actions for you.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的示例，您可能想知道这如何节省时间。在C或任何语言的实际项目中，可能会有多个*.c*文件，以及描述它们函数的头文件（*.h*文件），以便其他*.c*文件可以使用它们。C编译器需要将每个*.c*文件转换为*.o*（*.out*）文件，然后将它们链接在一起成为单个可执行文件。想象一下，您有数十个*.c*文件，并且更改一个文件中的一行代码。您想要手动输入数十个命令重新编译和链接所有代码吗？当然不。您会构建一个工具来自动化这些操作。
- en: 'I can add targets to the *Makefile* that don’t generate new files. It’s common
    to have a `clean` target that will clean up files and directories that I no longer
    need. Here I can create a `clean` target to remove the *hello* executable:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以向*Makefile*添加不生成新文件的目标。通常会有一个`clean`目标，用于清理不再需要的文件和目录。这里我可以创建一个`clean`目标来删除*hello*可执行文件：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If I want to be sure that the executable is always removed before running the
    `hello` target, I can add it as a dependency:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我希望在运行`hello`目标之前始终删除可执行文件，我可以将其作为依赖项添加：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It’s good to document for `make` that this is a *phony* target because the
    result of the target is not a newly created file. I use the `.PHONY:` target and
    list all the phonies. Here is the complete *Makefile* now:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`make`来说，很好地记录这是一个*phony*目标，因为目标的结果不是一个新创建的文件。我使用`.PHONY:`目标并列出所有虚假目标。现在完整的*Makefile*如下：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you run **`make`** in the *c-hello* directory with the preceding *Makefile*,
    you should see this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在*c-hello*目录中运行**`make`**与前述的*Makefile*，您应该看到这样的输出：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And there should now be a *hello* executable in your directory that you can
    run:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的目录中应该有一个*hello*可执行文件可以运行：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notice that the `clean` target can be listed as a dependency to the `hello`
    target even *before* the target itself is mentioned. `make` will read the entire
    file and then use the dependencies to resolve the graph. If you were to put `foo`
    as an additional dependency to `hello` and then run **`make`** again, you would
    see this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`clean`目标可以在甚至在目标本身被提到之前就列为`hello`目标的依赖项。`make`会读取整个文件，然后使用依赖关系来解析图形。如果你将`foo`作为`hello`的附加依赖项并再次运行**`make`**，你会看到这样的情况：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: A *Makefile* allows me to write independent groups of actions that are ordered
    by their dependencies. They are like *functions* in a higher-level language. I
    have essentially written a program whose output is another program.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*Makefile*允许我编写独立的动作组，这些动作按它们的依赖顺序排列。它们就像高级语言中的*函数*。我基本上写了一个输出为另一个程序的程序。'
- en: I’d encourage you to run **`cat hello`** to view the contents of the *hello*
    file. It’s mostly binary information that will look like gibberish, but you will
    probably be able to make out some plain English, too. You can also use **`strings
    hello`** to extract just the strings of text.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你运行**`cat hello`**来查看*hello*文件的内容。它主要是一些看起来像乱码的二进制信息，但你可能也能看到一些明文。你也可以使用**`strings
    hello`**来提取文本字符串。
- en: Using make for a Shortcut
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用make作为快捷方式
- en: 'Let’s look at how I can abuse a *Makefile* to create shortcuts for commands.
    In the *app01_makefiles/hello* directory, you will find the following *Makefile*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何滥用*Makefile*来为命令创建快捷方式。在*app01_makefiles/hello*目录中，你会找到以下*Makefile*：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-1)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-1)'
- en: Since the `hello` target doesn’t produce a file, I list it as a phony target.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`hello`目标不生成文件，我将其列为伪目标。
- en: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-2)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-2)'
- en: This is the `hello` target. The name of the target should be composed only of
    letters and numbers, should have no spaces before it, and is followed by a colon
    (`:`).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`hello`目标。目标的名称应该只由字母和数字组成，在其前面不应有空格，并在冒号（`:`）之后。
- en: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-3)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO4-3)'
- en: The command(s) to run for the `hello` target are listed on lines that are indented
    with a tab character.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在以制表符缩进的行上列出了`hello`目标要运行的命令（们）。
- en: 'I can execute this with **`make`**:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以用**`make`**来执行这个：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: I often use a *Makefile* to remember how to invoke a command with various arguments.
    That is, I might write an analysis pipeline and then document how to run the program
    on various datasets with all their parameters. In this way, I’m documenting my
    work in a way that I can immediately reproduce by running the target.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常使用*Makefile*来记住如何使用各种参数调用命令。也就是说，我可能会编写一个分析流水线，然后记录如何在各种数据集上运行程序及其所有参数。通过这种方式，我可以立即通过运行目标来复现我的工作。
- en: Defining Variables
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义变量
- en: 'Here is an example of a *Makefile* I wrote to document how I used the Centrifuge
    program for making taxonomic assignments to short reads:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我写的一个*Makefile*的示例，用来记录我如何使用Centrifuge程序对短读取进行分类分配：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-1)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-1)'
- en: Here I define the variable `INDEX_DIR` and assign a value. Note that there must
    be spaces on either side of the `=`. I prefer ALL_CAPS for my variable names,
    but this is my personal preference.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我定义了变量`INDEX_DIR`并赋了一个值。注意`=`两边必须有空格。我个人偏好使用全大写来命名我的变量，但这是我的个人喜好。
- en: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-2)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-2)'
- en: Run the `clean_paired` target prior to running this target. This ensures that
    there is no leftover output from a previous run.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此目标之前，请先运行`clean_paired`目标。这确保没有上一次运行留下的输出。
- en: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-3)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-3)'
- en: This action is long, so I used backslashes (`\`) as on the command line to indicate
    that the command continues to the next line.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个操作很长，所以我使用反斜杠（`\`）像在命令行上一样表示命令延续到下一行。
- en: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-4)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-4)'
- en: To have `make` *deference* or use the value of the `$HOME` environment variable,
    use the syntax `$(HOME)`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要使`make`*解除引用*或使用`$HOME`环境变量的值，请使用语法`$(HOME)`。
- en: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-5)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_documenting_commands_and_creating_workflows_with_make_CO5-5)'
- en: '`$(INDEX_DIR)` refers to the variable defined at the top.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(INDEX_DIR)`是指顶部定义的变量。'
- en: Writing a Workflow
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写工作流程
- en: 'In the *app01_makefiles/yeast* directory is an example of how to write a workflow
    as `make` targets. The goal is to download the yeast genome and characterize various
    gene types as “Dubious,” “Uncharacterized,” “Verified,” and so on. This is accomplished
    with a collection of command-line tools such as `wget`, `grep`, and `awk`, combined
    with a custom shell script called *download.sh*, all pieced together and run in
    order by `make`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在*app01_makefiles/yeast*目录中有一个示例，展示了如何将工作流程写成`make`目标。目标是下载酵母基因组并将各种基因类型（如“可疑”，“未分类”，“已验证”等）进行特征化。这通过一系列命令行工具（如`wget`，`grep`和`awk`）以及名为*download.sh*的自定义Shell脚本组合在一起，并按顺序由`make`运行：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: I won’t bother commenting on all the commands. Mostly I want to demonstrate
    how far I can abuse a *Makefile* to create a workflow. Not only have I documented
    all the steps, but they are *runnable* with nothing more than the command **`make`**.
    Absent using `make`, I’d have to write a shell script to accomplish this or, more
    likely, move to a more powerful language like Python. The resulting program written
    in either language would probably be longer, buggier, and more difficult to understand.
    Sometimes, all you need is a *Makefile* and some shell commands.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算评论所有命令。我主要想演示我可以滥用*Makefile*创建工作流程的程度。我不仅记录了所有步骤，而且使用**`make`**命令就可以*运行*它们。如果不使用`make`，我将不得不编写一个Shell脚本来完成这个任务，或者更可能切换到像Python这样的更强大的语言。用任一语言编写的结果程序可能会更长，更多错误，更难理解。有时候，你只需要一个*Makefile*和一些Shell命令。
- en: Other Workflow Managers
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工作流程管理器
- en: 'As you bump up against the limitations of `make`, you may choose to move to
    a workflow manager. There are many to choose from. For example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当您遇到`make`的限制时，您可以选择切换到工作流程管理器。有许多选择。例如：
- en: Snakemake extends the basic concepts of `make` with Python.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snakemake通过Python扩展了`make`的基本概念。
- en: The Common Workflow Language (CWL) defines workflows and parameters in a configuration
    file (in YAML), and you use tools like `cwltool` or `cwl-runner` (both implemented
    in Python) to execute the workflow with another configuration file that describes
    the arguments.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用工作流程语言（CWL）在配置文件（YAML格式）中定义工作流程和参数，您可以使用`cwltool`或`cwl-runner`（均采用Python实现）等工具执行另一个配置文件描述的工作流程。
- en: The Workflow Description Language (WDL) takes a similar approach to describe
    workflows and arguments and can be run with the Cromwell engine.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流描述语言（WDL）采用类似的方法来描述工作流和参数，并且可以使用Cromwell引擎运行。
- en: Pegasus allows you to use Python code to describe a workflow that then is written
    to an XML file, which is the input for the engine that will run your code.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pegasus允许您使用Python代码来描述一个工作流，然后将其写入XML文件，这是引擎的输入，用于运行您的代码。
- en: Nextflow is similar in that you use a full programming language called Groovy
    (a subset of Java) to write a workflow that can be run by the Nextflow engine.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nextflow类似，您可以使用名为Groovy（Java的子集）的完整编程语言编写可以由Nextflow引擎运行的工作流。
- en: All of these systems follow the same basic ideas as `make`, so understanding
    how `make` works and how to write the pieces of your workflow and how they interact
    is the basis for any larger analysis workflow you may create.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些系统都遵循与`make`相同的基本思想，因此理解`make`的工作原理以及如何编写工作流程的各个部分以及它们之间的交互是您可能创建的任何更大分析工作流程的基础。
- en: Further Reading
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are some other resources you can use to learn about `make`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些其他资源可以帮助您学习`make`：
- en: The [GNU Make Manual](https://oreil.ly/D9daZ)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GNU Make手册](https://oreil.ly/D9daZ)'
- en: '*The GNU Make Book* by John Graham-Cumming (No Starch Press, 2015)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GNU Make手册* 由John Graham-Cumming（No Starch Press，2015）'
- en: '[*Managing Projects with GNU Make*](https://oreil.ly/D8Oyk) by Robert Mecklenburg
    (O’Reilly, 2004)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*使用GNU Make管理项目*](https://oreil.ly/D8Oyk) 由Robert Mecklenburg（O''Reilly，2004）'
