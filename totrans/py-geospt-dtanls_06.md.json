["```py\nmamba install -c conda-forge geospatial\n```", "```py\nconda create --name myenv\n```", "```py\n#conda create --name myenv python=x.x\nconda create --name esriENV python=3.9\n```", "```py\nconda activate esriENV\n#conda config --set channel_priority strict\n```", "```py\nconda install -c esri arcgis\n```", "```py\nconda install -c conda-forge notebook\nconda install -c conda-forge nb_conda_kernels\nconda install -c conda-forge jupyter_contrib_nbextensions\n conda install -c conda-forge bokeh\n```", "```py\nConda activate esriENV\n```", "```py\njupyter notebook\n```", "```py\nfrom arcgis.gis import GIS\n\ngis = GIS()\n```", "```py\nfrom arcgis.gis import GIS\n```", "```py\n   gis = GIS(username=\"someuser\", password=\"secret1234\")\n```", "```py\ngis = GIS(api_key=\"Request YOUR KEY AND INSERT IT HERE\",\n              referer=\"https\")\n```", "```py\ngis = GIS(username=\"datalchemy\", password=\"xxx\")\ngis\n```", "```py\nimport arcgis\nimport getpass\nusername = input (\"Username:\")\npassword = getpass.getpass (\"Password:\")\n\ngis = arcgis.gis.GIS(\"https://datalchemy.maps.arcgis.com\", username, password)\n```", "```py\nmap1 =gis.map(\"Chicago,Illinois\")\nmap1\n```", "```py\ngis?\n```", "```py\ngis = GIS.\n```", "```py\nfrom IPython.display import display\n\nitems = gis.content.search(\"Landsat 9 Views\", item_type=\"Imagery Layer\", \nmax_items=2)\nfor item in items:\n    display(item)\n```", "```py\nimg_svc_url = 'https://server6.tplgis.org/arcgis6/rest/services/\nheat_severity_2019/ImageServer'\n```", "```py\n[<Item title:\"Urban Heat Island Severity for U.S. cities - 2019\" type:\nImagery Layer owner:TPL_GIS_Support>,\n <Item title:\"Multispectral Landsat\" type:Imagery Layer owner:esri>]\n```", "```py\nfrom arcgis.raster import ImageryLayer\nlandsat_urbanheat = ImageryLayer(img_svc_url)\nlandsat_urbanheat.properties.name\n```", "```py\n‘Heat_severity_2019’\n```", "```py\nmap = gis.map('Chicago', zoomlevel=13)\nmap\n\nmap.add_layer(landsat_urbanheat)\n```", "```py\nimg_svc_url ='*https://landsat2.arcgis.com/arcgis/rest/services/Landsat/MS/\n\tImageServe*'\nfrom arcgis.raster import ImageryLayer\nlandsat_ms = ImageryLayer(img_svc_url)\nlandsat_ms.properties.name\n```", "```py\n'Landsat/MS'\n```", "```py\nlandsat_ms.properties['description']\n```", "```py\nMultispectral Landsat image service covering the landmass of the World. This \nservice includes scenes from Landsat 8 and Global Land Survey (GLS) data from \nepochs 1990, 2000, 2005 and 2010 at 30 meter resolution as well as GLS 1975 \nat 60 meter resolution. GLS datasets are created by the United States \nGeological Survey (USGS) and the National Aeronautics and Space Administration \n(NASA) using Landsat images. This service can be used for mapping and change \ndetection of urban growth, change of natural resources and comparing Landsat \n8 imagery with GLS data.  Using on-the-fly processing, the raw DN values are \ntransformed to scaled (0 - 10000) apparent reflectance values and then \ndifferent service based renderings for band combinations and indices are applied. \nThe band names are in line with Landsat 8 bands; GLS data band names are mapped \nalong the same lines.\n```", "```py\nfrom arcgis.gis import GIS\nfrom arcgis.geocoding import geocode\nfrom arcgis.raster.functions import *\nfrom arcgis import geometry\nimport ipywidgets as widgets\n\nimport pandas as pd\n```", "```py\nlandsat_item = gis.content.search(\"Landsat Multispectral tags:'Landsat on AWS',\n'landsat 9', 'Multispectral', 'Multitemporal', 'imagery', 'temporal', 'MS'\", \n'Imagery Layer', outside_org=**True**)[0]\nlandsat = landsat_item.layers[0]\ndf = **None**\n```", "```py\nlandsat_item\n```", "```py\nfrom IPython.display import HTML\nHTML(landsat_item.description)\n```", "```py\npd.DataFrame(landsat.key_properties()['BandProperties'])\n```", "```py\nlandsat = landsat_item.layers[0]\nlandsat\n\nm = gis.map('los angeles')\nm\n```", "```py\nm.add_layer(landsat)\n```", "```py\nfor rasterfunc in landsat.properties.rasterFunctionInfos:\n    print(rasterfunc.name)\n```", "```py\nAgriculture with DRA\nBathymetric with DRA\nColor Infrared with DRA\nGeology with DRA\nNatural Color with DRA\nShort-wave Infrared with DRA\nAgriculture\nBathymetric\nColor Infrared\nGeology\nNatural Color\nShort-wave Infrared\nNDVI Colorized\nNormalized Difference Moisture Index Colorized\nNDVI Raw\nNBR Raw\nNone\n```", "```py\nFrom arcgis.raster.functions import apply\nColor_infrared = apply (landsat, 'Color Infrared with DRA')\n```", "```py\nm = gis.map('los angeles')\nm.add_layer(color_infrared)\nm\n```", "```py\nndvi_colorized = apply(landsat, 'NDVI Colorized')\nndvi_colorized\n```", "```py\nget_samples(geometry, geometry_type=None, sample_distance=None, sample_count=None, \nmosaic_rule=None, pixel_size=None, return_first_value_only=None, \ninterpolation=None, out_fields=None, slice_id=None)\n```", "```py\nimport arcgis\ng = arcgis.geometry.Geometry(area['extent'])\n```", "```py\nsamples = landsat.get_samples(g, sample_count=50,\n                                 out_fields='AcquisitionDate,OBJECTID,GroupName,\n                                 Category,SunAzimuth,SunElevation,CloudCover')\n```", "```py\nsamples[10]\n```", "```py\n{'location': {'x': -13150297.20625444,\n  'y': 4059732.8562727477,\n  'spatialReference': {'wkid': 102100, 'latestWkid': 3857}},\n 'locationId': 10,\n 'value': '1158 991 843 769 2850 1675 1030 44 21824 22410 22691',\n 'rasterId': 3508198,\n 'resolution': 30,\n 'attributes': {'AcquisitionDate': 1647023302000,\n  'OBJECTID': 3508198,\n  'GroupName': 'LC09_L1TP_041036_20220311_20220311_02_T1_MTL',\n  'Category': 1,\n  'SunAzimuth': 144.81874084,\n  'SunElevation': 45.83943939,\n  'CloudCover': 0.0024},\n 'values': [1158.0,\n  991.0,\n  843.0,\n  769.0,\n  2850.0,\n  1675.0,\n  1030.0,\n  44.0,\n  21824.0,\n  22410.0,\n  22691.0]}\n```", "```py\nimport datetime\nvalue = samples[0]['attributes']['AcquisitionDate']\ndatetime.datetime.fromtimestamp(value /1000).strftime(\"Acquisition Date: %d %b, \n\t%Y\")\n```", "```py\n'Acquisition Date: 11 Mar, 2022'\n```", "```py\nm = gis.map('los angeles')\nm\n\nm.add_layer(landsat)\n```", "```py\nfrom bokeh.models import Range1d\nfrom bokeh.plotting import figure, show, output_notebook\nfrom IPython.display import clear_output\noutput_notebook()\n\ndef get_samples(mw, g):\n    clear_output()\n    m.draw(g)\n    samples = landsat.get_samples(g, pixel_size=30)\n    values = samples[0]['value']\n    vals = [float(int(s)/100000) for s in values.split(' ')]\n\n    x = ['1','2', '3', '4', '5', '6', '7', '8','9','10','11']\n    y = vals\n    p = figure(title=\"Spectral Profile\", x_axis_label='Spectral Bands', \n\ty_axis_label='Data Values', width=600, height=300)\n    p.line(x, y, legend_label=\"Selected Point\", line_color=\"red\", line_width=2)\n    p.circle(x, y, line_color=\"red\", fill_color=\"white\", size=8)\n    p.y_range=Range1d(0, 1.0)\n\n    show(p)\n\nprint('Click anywhere on the map to plot the spectral profile for that location.')\nm.on_click(get_samples)\n```", "```py\nfrom arcgis.raster.functions import stretch, extract_band\nnaturalcolor = stretch(extract_band(landsat, [3,2,1]), \n                    stretch_type='percentclip', min_percent=0.1, max_percent=0.1, \n\t\t\t\t\tgamma=[1, 1, 1], dra=True)\n\nnaturalcolor\n```", "```py\nmap = gis.map(\"los angeles\")\nmap.basemap = \"satellite\"\nmap.zoom = 10\nmap\n```", "```py\nlandsat_item = gis.content.search(\"Landsat Multispectral tags:'Landsat on AWS',\n'landsat 9', 'Multispectral', 'Multitemporal', 'imagery', 'temporal', 'MS'\", \n'Imagery Layer', outside_org=**True**)[0]\nprint(landsat_item)\n<Item title:\"Multispectral Landsat\" type:Imagery Layer owner:esri>\n```", "```py\nmap.add_layer(landsat_item)\n```", "```py\nmap.time_slider\n```", "```py\nfrom datetime import datetime\nmap.time_slider = True\nmap.set_time_extent(start_time=datetime(2021, 12, 12), end_time=datetime(2022, 4, \n12), interval=10, unit='days')\n```", "```py\nfrom arcgis.geometry import Point\n\npt = Point({\"x\" : 34.092809, \"y\" : -118.328661, \n            \"spatialReference\" : {\"wkid\" : 3309}})\n```", "```py\nmap.draw(pt)\nmap.draw('polyline')\nmap.draw('polygon')\n```", "```py\nselected = landsat.filter_by(where=\"(Category = 1) AND (CloudCover <=0.10) AND \n\t(WRS_Row = 36)\", \n                   geometry=arcgis.geometry.filters.intersects(area['extent']))\n```", "```py\nfs = selected.query(out_fields=\"AcquisitionDate, GroupName, Best, CloudCover, \n\tWRS_Row, Month, Name\", \n              return_geometry=True,\n              return_distinct_values=False,\n              order_by_fields=\"AcquisitionDate\")\n```", "```py\ndf = fs.sdf\ndf.head()\n```", "```py\ndf = fs.sdf\ndf.tail()\n```", "```py\ndf.shape\n```", "```py\ndf['Time'] = pd.to_datetime(df['AcquisitionDate'], unit='ms')\ndf['Time'].head(10)\n```", "```py\n0   1977-05-30\n1   1979-06-08\n2   1989-06-28\n3   1990-05-07\n4   2000-04-24\n5   2000-05-01\n6   2005-05-15\n7   2005-05-24\n8   2009-04-16\n9   2009-05-11\nName: Time, dtype: datetime64[ns]\n```", "```py\nm3 = gis.map('los angeles', 7)\ndisplay(m3)\nm3.add_layer(selected.last())\n```", "```py\nm3 = gis.map('los angeles', 7)\ndisplay(m3)\nm3.add_layer(selected.first())\n```", "```py\nold = landsat.filter_by('OBJECTID=3106827')\n\nnew = landsat.filter_by('OBJECTID=3558253')\n\nfrom arcgis.raster.functions import *\n```", "```py\ndiff = stretch(composite_band([ndvi(old, '5 4'),\n                               ndvi(new, '5 4'),\n                               ndvi(old, '5 4')]), \n                               stretch_type='stddev',  num_stddev=2.5, min=0, \n                               max=255, dra=True, astype='u8')\ndiff\n```", "```py\nthreshold_val = 0.1\nmasked = colormap(remap(ndvi_diff, \n                        input_ranges=[threshold_val, 1], \n                        output_values=[1], \n                        no_data_ranges=[-1, threshold_val], astype='u8'), \n                  colormap=[[1, 124, 252, 0]], astype='u8')\n\nImage(masked.export_image(bbox=area['extent'], size=[1200,450], f='image'))\n```", "```py\nm = gis.map('los angeles')\nm\n```", "```py\nm.add_layer(diff)\nm.add_layer(masked)\n```"]