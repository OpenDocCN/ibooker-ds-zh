- en: Part III. Data Manipulation with Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分. 使用 Pandas 进行数据操作
- en: In [Part II](part02.xhtml#section-0200-introduction-to-numpy), we dove into
    detail on NumPy and its `ndarray` object, which enables efficient storage and
    manipulation of dense typed arrays in Python. Here we’ll build on this knowledge
    by looking in depth at the data structures provided by the Pandas library. Pandas
    is a newer package built on top of NumPy that provides an efficient implementation
    of a `DataFrame`. `DataFrame`s are essentially multidimensional arrays with attached
    row and column labels, often with heterogeneous types and/or missing data. As
    well as offering a convenient storage interface for labeled data, Pandas implements
    a number of powerful data operations familiar to users of both database frameworks
    and spreadsheet programs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第二部分](part02.xhtml#section-0200-introduction-to-numpy) 中，我们详细介绍了 NumPy 及其
    `ndarray` 对象，该对象使得在 Python 中高效存储和操作密集类型数组成为可能。在这里，我们将通过深入研究 Pandas 库提供的数据结构来构建这些知识。Pandas
    是一个建立在 NumPy 之上的较新的包，提供了 `DataFrame` 的高效实现。`DataFrame` 本质上是带有附加行和列标签的多维数组，通常具有异构类型和/或缺失数据。除了为标记数据提供方便的存储接口外，Pandas
    还实现了许多强大的数据操作，这些操作对数据库框架和电子表格程序的用户来说都很熟悉。
- en: As we’ve seen, NumPy’s `ndarray` data structure provides essential features
    for the type of clean, well-organized data typically seen in numerical computing
    tasks. While it serves this purpose very well, its limitations become clear when
    we need more flexibility (e.g., attaching labels to data, working with missing
    data, etc.) and when attempting operations that do not map well to element-wise
    broadcasting (e.g., groupings, pivots, etc.), each of which is an important piece
    of analyzing the less structured data available in many forms in the world around
    us. Pandas, and in particular its `Series` and `DataFrame` objects, builds on
    the NumPy array structure and provides efficient access to these sorts of “data
    munging” tasks that occupy much of a data scientist’s time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，NumPy 的 `ndarray` 数据结构为在数值计算任务中通常看到的整洁、良好组织的数据类型提供了基本功能。虽然它非常适合这个目的，但当我们需要更多的灵活性时（例如，将标签附加到数据、处理缺失数据等）以及当尝试的操作无法很好地映射到逐元素广播时（例如，分组、数据透视等），其中每个操作都是分析周围许多形式的不太结构化数据中的重要组成部分时，其局限性变得明显。Pandas，特别是其
    `Series` 和 `DataFrame` 对象，基于 NumPy 数组结构，并提供了有效的访问这些“数据清洗”任务的方法，这些任务占据了数据科学家大部分时间。
- en: In this part of the book, we will focus on the mechanics of using `Series`,
    `DataFrame`, and related structures effectively. We will use examples drawn from
    real datasets where appropriate, but these examples are not necessarily the focus.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分中，我们将重点介绍如何有效地使用 `Series`、`DataFrame` 和相关结构的机制。我们将在适当的情况下使用从真实数据集中提取的示例，但这些示例并不一定是重点。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Installing Pandas on your system requires NumPy, and if you’re building the
    library from source, you will need the appropriate tools to compile the C and
    Cython sources on which Pandas is built. Details on the installation process can
    be found in the [Pandas documentation](http://pandas.pydata.org). If you followed
    the advice outlined in the [Preface](preface01.xhtml#section-0000-preface) and
    used the Anaconda stack, you already have Pandas installed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上安装 Pandas 需要 NumPy，如果您正在从源代码构建库，则需要适当的工具来编译 Pandas 构建的 C 和 Cython 源代码。有关安装过程的详细信息可以在
    [Pandas 文档](http://pandas.pydata.org) 中找到。如果您遵循了 [前言](preface01.xhtml#section-0000-preface)
    中概述的建议并使用了 Anaconda 栈，您已经安装了 Pandas。
- en: 'Once Pandas is installed, you can import it and check the version; here is
    the version used by this book:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Pandas，你就可以导入它并检查版本；以下是本书使用的版本：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Just as we generally import NumPy under the alias `np`, we will import Pandas
    under the alias `pd`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们通常将 NumPy 导入为别名 `np` 一样，我们将 Pandas 导入为别名 `pd`：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This import convention will be used throughout the remainder of this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分将使用此导入约定。
