- en: Part III. Data Manipulation with Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Part II](part02.xhtml#section-0200-introduction-to-numpy), we dove into
    detail on NumPy and its `ndarray` object, which enables efficient storage and
    manipulation of dense typed arrays in Python. Here we’ll build on this knowledge
    by looking in depth at the data structures provided by the Pandas library. Pandas
    is a newer package built on top of NumPy that provides an efficient implementation
    of a `DataFrame`. `DataFrame`s are essentially multidimensional arrays with attached
    row and column labels, often with heterogeneous types and/or missing data. As
    well as offering a convenient storage interface for labeled data, Pandas implements
    a number of powerful data operations familiar to users of both database frameworks
    and spreadsheet programs.
  prefs: []
  type: TYPE_NORMAL
- en: As we’ve seen, NumPy’s `ndarray` data structure provides essential features
    for the type of clean, well-organized data typically seen in numerical computing
    tasks. While it serves this purpose very well, its limitations become clear when
    we need more flexibility (e.g., attaching labels to data, working with missing
    data, etc.) and when attempting operations that do not map well to element-wise
    broadcasting (e.g., groupings, pivots, etc.), each of which is an important piece
    of analyzing the less structured data available in many forms in the world around
    us. Pandas, and in particular its `Series` and `DataFrame` objects, builds on
    the NumPy array structure and provides efficient access to these sorts of “data
    munging” tasks that occupy much of a data scientist’s time.
  prefs: []
  type: TYPE_NORMAL
- en: In this part of the book, we will focus on the mechanics of using `Series`,
    `DataFrame`, and related structures effectively. We will use examples drawn from
    real datasets where appropriate, but these examples are not necessarily the focus.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Installing Pandas on your system requires NumPy, and if you’re building the
    library from source, you will need the appropriate tools to compile the C and
    Cython sources on which Pandas is built. Details on the installation process can
    be found in the [Pandas documentation](http://pandas.pydata.org). If you followed
    the advice outlined in the [Preface](preface01.xhtml#section-0000-preface) and
    used the Anaconda stack, you already have Pandas installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Pandas is installed, you can import it and check the version; here is
    the version used by this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as we generally import NumPy under the alias `np`, we will import Pandas
    under the alias `pd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This import convention will be used throughout the remainder of this book.
  prefs: []
  type: TYPE_NORMAL
