["```py\nggplot(session_times, aes(x=Page, y=Time)) +\n  geom_boxplot()\n```", "```py\nax = session_times.boxplot(by='Page', column='Time')\nax.set_xlabel('')\nax.set_ylabel('Time (in seconds)')\nplt.suptitle('')\n```", "```py\nmean_a <- mean(session_times[session_times['Page'] == 'Page A', 'Time'])\nmean_b <- mean(session_times[session_times['Page'] == 'Page B', 'Time'])\nmean_b - mean_a\n[1] 35.66667\n```", "```py\nmean_a = session_times[session_times.Page == 'Page A'].Time.mean()\nmean_b = session_times[session_times.Page == 'Page B'].Time.mean()\nmean_b - mean_a\n```", "```py\nperm_fun <- function(x, nA, nB)\n{\n  n <- nA + nB\n  idx_b <- sample(1:n, nB)\n  idx_a <- setdiff(1:n, idx_b)\n  mean_diff <- mean(x[idx_b]) - mean(x[idx_a])\n  return(mean_diff)\n}\n```", "```py\ndef perm_fun(x, nA, nB):\n    n = nA + nB\n    idx_B = set(random.sample(range(n), nB))\n    idx_A = set(range(n)) - idx_B\n    return x.loc[idx_B].mean() - x.loc[idx_A].mean()\n```", "```py\nperm_diffs <- rep(0, 1000)\nfor (i in 1:1000) {\n  perm_diffs[i] = perm_fun(session_times[, 'Time'], 21, 15)\n}\nhist(perm_diffs, xlab='Session time differences (in seconds)')\nabline(v=mean_b - mean_a)\n```", "```py\nperm_diffs = [perm_fun(session_times.Time, nA, nB) for _ in range(1000)]\n\nfig, ax = plt.subplots(figsize=(5, 5))\nax.hist(perm_diffs, bins=11, rwidth=0.9)\nax.axvline(x = mean_b - mean_a, color='black', lw=2)\nax.text(50, 190, 'Observed\\ndifference', bbox={'facecolor':'white'})\nax.set_xlabel('Session time differences (in seconds)')\nax.set_ylabel('Frequency')\n```", "```py\nmean(perm_diffs > (mean_b - mean_a))\n---\n0.126\n```", "```py\nnp.mean(perm_diffs > mean_b - mean_a)\n---\n0.121\n```", "```py\nobs_pct_diff <- 100 * (200 / 23739 - 182 / 22588)\nconversion <- c(rep(0, 45945), rep(1, 382))\nperm_diffs <- rep(0, 1000)\nfor (i in 1:1000) {\n  perm_diffs[i] = 100 * perm_fun(conversion, 23739, 22588)\n}\nhist(perm_diffs, xlab='Conversion rate (percent)', main='')\nabline(v=obs_pct_diff)\n```", "```py\nobs_pct_diff = 100 * (200 / 23739 - 182 / 22588)\nprint(f'Observed difference: {obs_pct_diff:.4f}%')\nconversion = [0] * 45945\nconversion.extend([1] * 382)\nconversion = pd.Series(conversion)\n\nperm_diffs = [100 * perm_fun(conversion, 23739, 22588)\n              for _ in range(1000)]\n\nfig, ax = plt.subplots(figsize=(5, 5))\nax.hist(perm_diffs, bins=11, rwidth=0.9)\nax.axvline(x=obs_pct_diff, color='black', lw=2)\nax.text(0.06, 200, 'Observed\\ndifference', bbox={'facecolor':'white'})\nax.set_xlabel('Conversion rate (percent)')\nax.set_ylabel('Frequency')\n```", "```py\nmean(perm_diffs > obs_pct_diff)\n[1] 0.308\n```", "```py\nnp.mean([diff > obs_pct_diff for diff in perm_diffs])\n```", "```py\n> prop.test(x=c(200, 182), n=c(23739, 22588), alternative='greater')\n\n\t2-sample test for equality of proportions with continuity correction\n\ndata:  c(200, 182) out of c(23739, 22588)\nX-squared = 0.14893, df = 1, p-value = 0.3498\nalternative hypothesis: greater\n95 percent confidence interval:\n -0.001057439  1.000000000\nsample estimates:\n     prop 1      prop 2\n0.008424955 0.008057376\n```", "```py\nsurvivors = np.array([[200, 23739 - 200], [182, 22588 - 182]])\nchi2, p_value, df, _ = stats.chi2_contingency(survivors)\n\nprint(f'p-value for single sided test: {p_value / 2:.4f}')\n```", "```py\n> t.test(Time ~ Page, data=session_times, alternative='less')\n\n\tWelch Two Sample t-test\n\ndata:  Time by Page\nt = -1.0983, df = 27.693, p-value = 0.1408\nalternative hypothesis: true difference in means is less than 0\n95 percent confidence interval:\n     -Inf 19.59674\nsample estimates:\nmean in group Page A mean in group Page B\n            126.3333             162.0000\n```", "```py\nres = stats.ttest_ind(session_times[session_times.Page == 'Page A'].Time,\n                      session_times[session_times.Page == 'Page B'].Time,\n                      equal_var=False)\nprint(f'p-value for single sided test: {res.pvalue / 2:.4f}')\n```", "```py\n> library(lmPerm)\n> summary(aovp(Time ~ Page, data=four_sessions))\n[1] \"Settings:  unique SS \"\nComponent 1 :\n            Df R Sum Sq R Mean Sq Iter Pr(Prob)\nPage         3    831.4    277.13 3104  0.09278 .\nResiduals   16   1618.4    101.15\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```", "```py\nobserved_variance = four_sessions.groupby('Page').mean().var()[0]\nprint('Observed means:', four_sessions.groupby('Page').mean().values.ravel())\nprint('Variance:', observed_variance)\n\ndef perm_test(df):\n    df = df.copy()\n    df['Time'] = np.random.permutation(df['Time'].values)\n    return df.groupby('Page').mean().var()[0]\n\nperm_variance = [perm_test(four_sessions) for _ in range(3000)]\nprint('Pr(Prob)', np.mean([var > observed_variance for var in perm_variance]))\n```", "```py\n> summary(aov(Time ~ Page, data=four_sessions))\n            Df Sum Sq Mean Sq F value Pr(>F)\nPage         3  831.4   277.1    2.74 0.0776 .\nResiduals   16 1618.4   101.2\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n```", "```py\nmodel = smf.ols('Time ~ Page', data=four_sessions).fit()\n\naov_table = sm.stats.anova_lm(model)\naov_table\n```", "```py\n> chisq.test(clicks, simulate.p.value=TRUE)\n\n\tPearson's Chi-squared test with simulated p-value (based on 2000 replicates)\n\ndata:  clicks\nX-squared = 1.6659, df = NA, p-value = 0.4853\n```", "```py\nbox = [1] * 34\nbox.extend([0] * 2966)\nrandom.shuffle(box)\n\ndef chi2(observed, expected):\n    pearson_residuals = []\n    for row, expect in zip(observed, expected):\n        pearson_residuals.append([(observe - expect) ** 2 / expect\n                                  for observe in row])\n    # return sum of squares\n    return np.sum(pearson_residuals)\n\nexpected_clicks = 34 / 3\nexpected_noclicks = 1000 - expected_clicks\nexpected = [34 / 3, 1000 - 34 / 3]\nchi2observed = chi2(clicks.values, expected)\n\ndef perm_fun(box):\n    sample_clicks = [sum(random.sample(box, 1000)),\n                     sum(random.sample(box, 1000)),\n                     sum(random.sample(box, 1000))]\n    sample_noclicks = [1000 - n for n in sample_clicks]\n    return chi2([sample_clicks, sample_noclicks], expected)\n\nperm_chi2 = [perm_fun(box) for _ in range(2000)]\n\nresampled_p_value = sum(perm_chi2 > chi2observed) / len(perm_chi2)\nprint(f'Observed chi2: {chi2observed:.4f}')\nprint(f'Resampled p-value: {resampled_p_value:.4f}')\n```", "```py\n> chisq.test(clicks, simulate.p.value=FALSE)\n\n\tPearson's Chi-squared test\n\ndata:  clicks\nX-squared = 1.6659, df = 2, p-value = 0.4348\n```", "```py\nchisq, pvalue, df, expected = stats.chi2_contingency(clicks)\nprint(f'Observed chi2: {chi2observed:.4f}')\nprint(f'p-value: {pvalue:.4f}')\n```", "```py\n> fisher.test(clicks)\n\n\tFisher's Exact Test for Count Data\n\ndata:  clicks\np-value = 0.4824\nalternative hypothesis: two.sided\n```", "```py\neffect_size = ES.h(p1=0.0121, p2=0.011)\npwr.2p.test(h=effect_size, sig.level=0.05, power=0.8, alternative='greater’)\n--\n     Difference of proportion power calculation for binomial distribution\n                                                       (arcsine transformation)\n\n              h = 0.01029785\n              n = 116601.7\n      sig.level = 0.05\n          power = 0.8\n    alternative = greater\n\nNOTE: same sample sizes\n```", "```py\neffect_size = sm.stats.proportion_effectsize(0.0121, 0.011)\nanalysis = sm.stats.TTestIndPower()\nresult = analysis.solve_power(effect_size=effect_size,\n                              alpha=0.05, power=0.8, alternative='larger')\nprint('Sample Size: %.3f' % result)\n--\nSample Size: 116602.393\n```"]