["```py\nIn [1]: data = [\n            {'price': 850000, 'rooms': 4, 'neighborhood': 'Queen Anne'},\n            {'price': 700000, 'rooms': 3, 'neighborhood': 'Fremont'},\n            {'price': 650000, 'rooms': 3, 'neighborhood': 'Wallingford'},\n            {'price': 600000, 'rooms': 2, 'neighborhood': 'Fremont'}\n        ]\n```", "```py\nIn [2]: {'Queen Anne': 1, 'Fremont': 2, 'Wallingford': 3};\n```", "```py\nIn [3]: from sklearn.feature_extraction import DictVectorizer\n        vec = DictVectorizer(sparse=False, dtype=int)\n        vec.fit_transform(data)\nOut[3]: array([[     0,      1,      0, 850000,      4],\n               [     1,      0,      0, 700000,      3],\n               [     0,      0,      1, 650000,      3],\n               [     1,      0,      0, 600000,      2]])\n```", "```py\nIn [4]: vec.get_feature_names_out()\nOut[4]: array(['neighborhood=Fremont', 'neighborhood=Queen Anne',\n               'neighborhood=Wallingford', 'price', 'rooms'], dtype=object)\n```", "```py\nIn [5]: vec = DictVectorizer(sparse=True, dtype=int)\n        vec.fit_transform(data)\nOut[5]: <4x5 sparse matrix of type '<class 'numpy.int64'>'\n                with 12 stored elements in Compressed Sparse Row format>\n```", "```py\nIn [6]: sample = ['problem of evil',\n                  'evil queen',\n                  'horizon problem']\n```", "```py\nIn [7]: from sklearn.feature_extraction.text import CountVectorizer\n\n        vec = CountVectorizer()\n        X = vec.fit_transform(sample)\n        X\nOut[7]: <3x5 sparse matrix of type '<class 'numpy.int64'>'\n                with 7 stored elements in Compressed Sparse Row format>\n```", "```py\nIn [8]: import pandas as pd\n        pd.DataFrame(X.toarray(), columns=vec.get_feature_names_out())\nOut[8]:    evil  horizon  of  problem  queen\n        0     1        0   1        1      0\n        1     1        0   0        0      1\n        2     0        1   0        1      0\n```", "```py\nIn [9]: from sklearn.feature_extraction.text import TfidfVectorizer\n        vec = TfidfVectorizer()\n        X = vec.fit_transform(sample)\n        pd.DataFrame(X.toarray(), columns=vec.get_feature_names_out())\nOut[9]:        evil   horizon        of   problem     queen\n        0  0.517856  0.000000  0.680919  0.517856  0.000000\n        1  0.605349  0.000000  0.000000  0.000000  0.795961\n        2  0.000000  0.795961  0.000000  0.605349  0.000000\n```", "```py\nIn [10]: %matplotlib inline\n         import numpy as np\n         import matplotlib.pyplot as plt\n\n         x = np.array([1, 2, 3, 4, 5])\n         y = np.array([4, 2, 1, 3, 7])\n         plt.scatter(x, y);\n```", "```py\nIn [11]: from sklearn.linear_model import LinearRegression\n         X = x[:, np.newaxis]\n         model = LinearRegression().fit(X, y)\n         yfit = model.predict(X)\n         plt.scatter(x, y)\n         plt.plot(x, yfit);\n```", "```py\nIn [12]: from sklearn.preprocessing import PolynomialFeatures\n         poly = PolynomialFeatures(degree=3, include_bias=False)\n         X2 = poly.fit_transform(X)\n         print(X2)\nOut[12]: [[  1.   1.   1.]\n          [  2.   4.   8.]\n          [  3.   9.  27.]\n          [  4.  16.  64.]\n          [  5.  25. 125.]]\n```", "```py\nIn [13]: model = LinearRegression().fit(X2, y)\n         yfit = model.predict(X2)\n         plt.scatter(x, y)\n         plt.plot(x, yfit);\n```", "```py\nIn [14]: from numpy import nan\n         X = np.array([[ nan, 0,   3  ],\n                       [ 3,   7,   9  ],\n                       [ 3,   5,   2  ],\n                       [ 4,   nan, 6  ],\n                       [ 8,   8,   1  ]])\n         y = np.array([14, 16, -1,  8, -5])\n```", "```py\nIn [15]: from sklearn.impute import SimpleImputer\n         imp = SimpleImputer(strategy='mean')\n         X2 = imp.fit_transform(X)\n         X2\nOut[15]: array([[4.5, 0. , 3. ],\n                [3. , 7. , 9. ],\n                [3. , 5. , 2. ],\n                [4. , 5. , 6. ],\n                [8. , 8. , 1. ]])\n```", "```py\nIn [16]: model = LinearRegression().fit(X2, y)\n         model.predict(X2)\nOut[16]: array([13.14869292, 14.3784627 , -1.15539732, 10.96606197, -5.33782027])\n```", "```py\nIn [17]: from sklearn.pipeline import make_pipeline\n\n         model = make_pipeline(SimpleImputer(strategy='mean'),\n                               PolynomialFeatures(degree=2),\n                               LinearRegression())\n```", "```py\nIn [18]: model.fit(X, y)  # X with missing values, from above\n         print(y)\n         print(model.predict(X))\nOut[18]: [14 16 -1  8 -5]\n         [14. 16. -1.  8. -5.]\n```"]