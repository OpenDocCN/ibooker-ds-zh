- en: Chapter 1\. Development Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the downloads and software installations needed to use this
    book, and sketches out a recommended development environment. As you’ll see, this
    isn’t as onerous as it might once have been. I’ll cover Python and JavaScript
    dependencies separately and give a brief overview of cross-language IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: The Accompanying Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There’s a GitHub repository for the bulk of the code covered in this book,
    including the full Nobel Prize visualization. To get hold of it, just perform
    a [git clone](https://git-scm.com/docs/git-clone) to a suitable local directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This should create a local *dataviz-with-python-and-js-v2* directory with the
    key source code covered by the book.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The bulk of the libraries covered in the book are Python-based, but what might
    have been a challenging attempt to provide comprehensive installation instructions
    for the various operating systems and their quirks is made much easier by the
    existence of [Anaconda](https://www.anaconda.com), a Python platform that bundles
    together most of the popular analytics libraries in a convenient package. The
    book assumes you are using Python 3, which was released in 2008 and is now firmly
    established.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing some of the bigger Python libraries used to be a challenge all in
    itself, particularly those such as NumPy that depend on complex low-level C and
    Fortran packages. That’s a great deal easier now and most will happily install
    using Python’s `easy_install` with a `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But some big number-crunching libraries are still tricky to install. Dependency
    management and versioning (you might need to use different versions of Python
    on the same machine) can make things trickier still, and this is where Anaconda
    comes into its own. It does all the dependency checking and binary installs so
    you don’t have to. It’s also a very convenient resource for a book like this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get your free Anaconda install, just navigate your browser to the [Anaconda
    site](https://oreil.ly/4FkCT), choose the version for your operating system (ideally
    at least Python 3.5), and follow the instructions. Windows and OS X get a graphical
    installer (just download and double-click), whereas Linux requires you to run
    a little bash script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the latest installing instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[For Windows](https://oreil.ly/KErTO)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For macOS](https://oreil.ly/5cVfC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[For Linux](https://oreil.ly/tIQT5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I recommend sticking to defaults when installing Anaconda.
  prefs: []
  type: TYPE_NORMAL
- en: The official check guide can be found at the [Anaconda site](https://oreil.ly/tL7c9).
    Windows and macOS users can use the Anaconda’s Navigator GUI or, along with Linux
    users, use the Conda command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Extra Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anaconda contains almost all the Python libraries covered in this book (see
    [the Anaconda documentation](https://oreil.ly/c2vRS) for the full list of Anaconda
    library packages). Where we need a non-Anaconda library, we can use [`pip`](https://oreil.ly/b0Eni)
    (short for Pip Installs Python), the de facto standard for installing Python libraries.
    Using `pip` to install is as easy as can be. Just call `pip install` followed
    by the name of the package from the command line and it should be installed or,
    with any luck, give a sensible error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Virtual Environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Virtual environments](https://oreil.ly/x7Uq5) provide a way of creating a
    sandboxed development environment with a particular Python version and/or set
    of third-party libraries. Using these virtual environments avoids polluting your
    global Python with these installs and gives you a lot more flexibility (you can
    play with different package versions or change your Python version if need be).
    The use of virtual environments is becoming a best practice in Python development,
    and I strongly suggest that you follow it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anaconda comes with a `conda` system command that makes creating and using
    virtual environments easy. Let’s create a special one for this book, based on
    the full Anaconda package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As the final message says, to use this virtual environment you need only `source
    activate` it (for Windows machines, you can leave out the `source`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that you get a helpful cue at the command line to let you know which virtual
    environment you’re using.
  prefs: []
  type: TYPE_NORMAL
- en: The `conda` command can do a lot more than just facilitate virtual environments,
    combining the functionality of Python’s `pip` installer and `virtualenv` command,
    among other things. You can get a full rundown [in the Anaconda documentation](https://oreil.ly/KN0ZL).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re confident with standard Python virtual environments, these have been
    made a lot easier to work with by their incorporation in Python’s Standard Library.
    To create a virtual environment from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a `python-js-viz` directory containing the various elements of
    the virtual environment. This includes some activation scripts. To activate the
    virtual environment with macOS or Linux, run the activate script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows machines, run the *.bat* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then use `pip` to install Python libraries to the virtual environment,
    avoiding polluting your global Python distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To install all the libraries required by this book, you can use the *requirements.txt*
    file in the book’s [GitHub repo](https://github.com/Kyrand/dataviz-with-python-and-js-ed-2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can find information on the virtual environment [in the Python documentation](https://oreil.ly/dhCvZ).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The good news is that you don’t need much JavaScript software at all. The only
    must-have is the Chrome/Chromium web browser, which is used in this book. It offers
    the most powerful set of developer tools of any current browser and is cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: To download Chrome, just go to [the home page](https://oreil.ly/jNTUl) and download
    the version for your operating system. This should be automatically detected.
  prefs: []
  type: TYPE_NORMAL
- en: All the JavaScript libraries used in this book can be found in the accompanying
    [GitHub repo](https://github.com/Kyrand/dataviz-with-python-and-js-ed-2), but
    there are generally two ways to deliver them to the browser. You can use a content
    delivery network (CDN), which efficiently caches a copy of the library retrieved
    from the delivery network. Alternatively, you can use a local copy of the library
    served to the browser. Both of these methods use the `script` tag in an HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: Content Delivery Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With CDNs, rather than having the libraries installed on your local machine,
    the JavaScript is retrieved by the browser over the web, from the closest available
    server. This should make things very fast—faster than if you served the content
    yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a library via CDN, you use the usual `<script>` tag, typically placed
    at the bottom of your HTML page. For example, the following call adds a current
    version of D3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Installing Libraries Locally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to install JavaScript libraries locally, because, for example, you
    anticipate doing some offline development work or can’t guarantee an internet
    connection, there are a number of fairly simple ways to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can just download the separate libraries and put them in your local server’s
    static folder. This is a typical folder structure. Third-party libraries go in
    the *static/libs* directory off root, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you organize things this way, to use D3 in your scripts now requires a local
    file reference with the `<script>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recommended database for small to medium-sized dataviz projects is the brilliant,
    serverless, file-based, SQL-based [SQLite](https://www.sqlite.org). This database
    is used throughout the dataviz toolchain demonstrated in the book and is the only
    database you really need.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book also covers basic Python interactions with [MongoDB](https://www.mongodb.org),
    the most popular nonrelational, or [NoSQL database](https://oreil.ly/uvX4e):'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite
  prefs: []
  type: TYPE_NORMAL
- en: SQLite should come as standard with macOS and Linux machines. For Windows, follow
    [this guide](https://oreil.ly/Ck6qR).
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  prefs: []
  type: TYPE_NORMAL
- en: You can find installation instructions for the various operating systems [in
    the MongoDB documentation](https://oreil.ly/JIt8R).
  prefs: []
  type: TYPE_NORMAL
- en: Note that we’ll be using Python’s [SQLAlchemy](https://www.sqlalchemy.org) SQL
    library either directly or through libraries that build on it. This means we can
    convert any SQLite examples to another SQL backend (e.g., [MySQL](https://www.mysql.com)
    or [PostgreSQL](https://www.postgresql.org)) by changing a configuration line
    or two.
  prefs: []
  type: TYPE_NORMAL
- en: Getting MongoDB Up and Running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB can be a little trickier to install than some databases. As mentioned,
    you can follow this book perfectly well without going through the hassle of installing
    the server-based MongoDB, but if you want to try it out or find yourself needing
    to use it at work, here are some installation notes:'
  prefs: []
  type: TYPE_NORMAL
- en: For OS X users, check out [the official docs](https://oreil.ly/zTEH5) for MongoDB
    installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: This [Windows-specific guide](https://oreil.ly/OI5gB) from the official docs
    should get your MongoDB server up and running. You will probably need to use administrator
    privileges to create the necessary data directories and so on.
  prefs: []
  type: TYPE_NORMAL
- en: More often than not these days, you’ll be installing MongoDB to a Linux-based
    server, most commonly an Ubuntu variant, which uses the [deb](https://oreil.ly/rRQrG)
    file format to deliver its packages. The [official MongoDB docs](https://oreil.ly/SrRzJ)
    do a good job covering an Ubuntu install.
  prefs: []
  type: TYPE_NORMAL
- en: 'MongoDB uses a *data* directory to store to and, depending how you install
    it, you may need to create this yourself. On OS X and Linux boxes, the default
    is a *data* directory off the root directory, which you can create using `mkdir`
    as a superuser (`sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll then want to set ownership to yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With Windows, installing the [MongoDB Community Edition](https://oreil.ly/3Vtft),
    you can create the necessary *data* directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The MongoDB server will often be started by default on Linux boxes; otherwise,
    on Linux and OS X the following command will start a server instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows Community Edition, the following, run from a command prompt, will
    start a server instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Easy MongoDB with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'MongoDB can be tricky to install. For example, current Ubuntu variants (> version
    22.04) have [incompatible SSL libs](https://oreil.ly/ShOjF). If you have [Docker
    installed](https://oreil.ly/ZF5Uf), a working development DB on the default port
    27017 is only a single command away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This nicely side-steps local library incompatibilities and the like.
  prefs: []
  type: TYPE_NORMAL
- en: Integrated Development Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I explain in [“The Myth of IDEs, Frameworks, and Tools”](ch04.xhtml#myth_ides),
    you don’t need an IDE to program in Python or JavaScript. The development tools
    provided by modern browsers, Chrome in particular, mean you only really need a
    good code editor to have pretty much the optimal setup.
  prefs: []
  type: TYPE_NORMAL
- en: One caveat here is that these days intermediate to advanced JavaScript tends
    to involve frameworks like React, Vue, and Svelte that do benefit from the bells
    and whistles provided by a decent IDE, particularly handling multiformat files
    (where HTML, CSS, and JS are all embedded together). The good news is that the
    freely available [Visual Studio Code](https://code.visualstudio.com) (VSCode)
    has become the de facto standard for modern web development. It’s got plug-ins
    for pretty much everything and a very large and active community, so questions
    tend to be answered and bugs hunted down fast.
  prefs: []
  type: TYPE_NORMAL
- en: For Python, I have tried a few dedicated IDEs but they’ve never stuck. The main
    itch I was trying to scratch was finding a decent debugging system. Setting breakpoints
    in Python with a text editor isn’t particularly elegant, and using the command-line
    debugger `pdb` feels a little too old school sometimes. Nevertheless, Python does
    have a pretty good logging system included, which takes the edge off its rather
    clunky default debugging. VSCode is pretty good for Python programming, but there
    are some Python-specific IDEs that are arguably a little smoother.
  prefs: []
  type: TYPE_NORMAL
- en: 'In no particular order, here are a few that I’ve tried and not disliked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PyCharm](https://www.jetbrains.com/pycharm)'
  prefs: []
  type: TYPE_NORMAL
- en: This option offers solid code assistance and good debugging and would probably
    top a favorite IDE poll of seasoned Pythonistas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PyDev](https://pydev.org)'
  prefs: []
  type: TYPE_NORMAL
- en: If you like Eclipse and can tolerate its rather large footprint, this might
    well be for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[Wing Python IDE](https://www.wingware.com)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a solid bet, with a great debugger and incremental improvements over
    a decade-and-a-half’s worth of development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With free, packaged Python distributions such as Anaconda, and the inclusion
    of sophisticated JavaScript development tools in freely available web browsers,
    the necessary Python and JavaScript elements of your development environment are
    a couple of clicks away. Add a favorite editor and a database of choice,^([1](ch01.xhtml#idm45607814876176))
    and you are pretty much good to go. There are additional libraries, such as *node.js*,
    that can be useful but don’t count as essential. Now that we’ve established our
    programming environment, the next chapters will teach the preliminaries needed
    to start our journey of data transformation along the toolchain, starting with
    a language bridge between Python and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch01.xhtml#idm45607814876176-marker)) SQLite is great for development
    purposes and doesn’t need a server running on your machine.
  prefs: []
  type: TYPE_NORMAL
