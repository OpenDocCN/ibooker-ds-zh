["```py\n>>> 'GATGGAACTTGACTACGTAAATT'.replace('T', 'U')\n'GAUGGAACUUGACUACGUAAAUU'\n```", "```py\n$ cd 02_rna\n$ cp solution1_str_replace.py rna.py\n```", "```py\n$ ./rna.py -h\nusage: rna.py [-h] [-o DIR] FILE [FILE ...] ![1](assets/1.png)\n\nTranscribe DNA into RNA\n\npositional arguments: ![2](assets/2.png)\n  FILE                  Input DNA file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o DIR, --out_dir DIR\n                        Output directory (default: out) ![3](assets/3.png)\n```", "```py\n$ cat tests/inputs/input1.txt\nGATGGAACTTGACTACGTAAATT\n```", "```py\n$ ./rna.py tests/inputs/input1.txt\nDone, wrote 1 sequence in 1 file to directory \"out\".\n```", "```py\n$ ls out/\ninput1.txt\n```", "```py\n$ cat out/input1.txt\nGAUGGAACUUGACUACGUAAAUU\n```", "```py\n$ ./rna.py --out_dir rna tests/inputs/*\nDone, wrote 5 sequences in 3 files to directory \"rna\".\n```", "```py\n$ wc -l rna/*\n       1 rna/input1.txt\n       2 rna/input2.txt\n       2 rna/input3.txt\n       5 total\n```", "```py\n$ new.py --force -p \"Transcribe DNA to RNA\" rna.py\nDone, see new script \"rna.py\".\n```", "```py\nparser.add_argument('-o', ![1](assets/1.png)\n                    '--out_dir', ![2](assets/2.png)\n                    help='Output directory', ![3](assets/3.png)\n                    metavar='DIR', ![4](assets/4.png)\n                    type=str, ![5](assets/5.png)\n                    default='out') ![6](assets/6.png)\n```", "```py\nparser.add_argument('file', ![1](assets/1.png)\n                    help='Input DNA file(s)', ![2](assets/2.png)\n                    metavar='FILE', ![3](assets/3.png)\n                    nargs='+', ![4](assets/4.png)\n                    type=argparse.FileType('rt')) ![5](assets/5.png)\n```", "```py\n$ ./rna.py blargh\nusage: rna.py [-h] [-o DIR] FILE [FILE ...]\nrna.py: error: argument FILE: can't open 'blargh': [Errno 2]\nNo such file or directory: 'blargh'\n```", "```py\nfrom typing import NamedTuple, List, TextIO ![1](assets/1.png)\n\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    files: List[TextIO] ![2](assets/2.png)\n    out_dir: str ![3](assets/3.png)\n```", "```py\nreturn Args(args.file, args.out_dir)\n```", "```py\nreturn Args(files=args.file, out_dir=args.out_dir)\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    if not os.path.isdir(args.out_dir): ![1](assets/1.png)\n        os.makedirs(args.out_dir) ![2](assets/2.png)\n\n    num_files, num_seqs = 0, 0 ![3](assets/3.png)\n    for fh in args.files: ![4](assets/4.png)\n        # open an output file in the output directory ![5](assets/5.png)\n        # for each line/sequence from the input file:\n            # write the transcribed sequence to the output file\n            # update the number of sequences processed\n        # update the number of files processed\n\n    print('Done.') ![6](assets/6.png)\n```", "```py\nfor fh in args.files:\n```", "```py\nfor i in range(10):\n```", "```py\nfor x in xs:\n```", "```py\n>>> import os\n>>> os.path.dirname('./tests/inputs/input1.txt')\n'./tests/inputs'\n>>> os.path.basename('./tests/inputs/input1.txt')\n'input1.txt'\n```", "```py\nfor fh in args.files:\n    out_file = os.path.join(args.out_dir, os.path.basename(fh.name))\n    print(fh.name, '->', out_file)\n```", "```py\n$ ./rna.py tests/inputs/*\ntests/inputs/input1.txt -> out/input1.txt\ntests/inputs/input2.txt -> out/input2.txt\ntests/inputs/input3.txt -> out/input3.txt\n```", "```py\nfor fh in args.files:\n    out_file = os.path.join(args.out_dir, os.path.basename(fh.name))\n    out_fh = open(out_file, 'wt') ![1](assets/1.png)\n```", "```py\nfor fh in args.files:\n    for dna in fh:\n```", "```py\n$ cat tests/inputs/input2.txt\nTTAGCCCAGACTAGGACTTT\nAACTAGTCAAAGTACACC\n```", "```py\n>>> fh = open('./tests/inputs/input2.txt')\n>>> for dna in fh:\n...     print(dna.rstrip()) ![1](assets/1.png)\n...\nTTAGCCCAGACTAGGACTTT\nAACTAGTCAAAGTACACC\n```", "```py\n>>> fh = open('./tests/inputs/input2.txt')\n>>> for dna in fh:\n...     print(dna, end='') ![1](assets/1.png)\n...\nTTAGCCCAGACTAGGACTTT\nAACTAGTCAAAGTACACC\n```", "```py\n>>> dna = 'ACTG'\n>>> dna.replace('T', 'U')\n'ACUG'\n```", "```py\n>>> dna = 'ACTG'\n>>> if 'T' in dna:\n...     dna[dna.index('T')] = 'U'\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nTypeError: 'str' object does not support item assignment\n```", "```py\n>>> dna.replace('T', 'U')\n'ACUG'\n>>> dna\n'ACTG'\n```", "```py\nprint(...)\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout. ![1](assets/1.png)\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n```", "```py\n$ ./rna.py tests/inputs/input1.txt\nDone, wrote 1 sequence in 1 file to directory \"out\".\n```", "```py\n$ ./rna.py --out_dir rna tests/inputs/input[12].txt ![1](assets/1.png)\nDone, wrote 3 sequences in 2 files to directory \"rna\".\n```", "```py\n$ pytest -xv\n======================= test session starts ========================\n...\n\ntests/rna_test.py::test_exists PASSED                        [ 14%] ![1](assets/1.png)\ntests/rna_test.py::test_usage PASSED                         [ 28%] ![2](assets/2.png)\ntests/rna_test.py::test_no_args PASSED                       [ 42%] ![3](assets/3.png)\ntests/rna_test.py::test_bad_file PASSED                      [ 57%] ![4](assets/4.png)\ntests/rna_test.py::test_good_input1 PASSED                   [ 71%] ![5](assets/5.png)\ntests/rna_test.py::test_good_input2 PASSED                   [ 85%]\ntests/rna_test.py::test_good_multiple_inputs PASSED          [100%]\n\n======================== 7 passed in 0.37s =========================\n```", "```py\ndef test_bad_file():\n    \"\"\" Die on missing input \"\"\"\n\n    bad = random_filename() ![1](assets/1.png)\n    retval, out = getstatusoutput(f'{RUN} {bad}') ![2](assets/2.png)\n    assert retval != 0 ![3](assets/3.png)\n    assert re.match('usage:', out, re.IGNORECASE) ![4](assets/4.png)\n    assert re.search(f\"No such file or directory: '{bad}'\", out) ![5](assets/5.png)\n```", "```py\n$ ./rna.py dKej82\nusage: rna.py [-h] [-o DIR] FILE [FILE ...]\nrna.py: error: argument FILE: can't open 'dKej82':\n[Errno 2] No such file or directory: 'dKej82'\n```", "```py\ndef test_good_input1():\n    \"\"\" Runs on good input \"\"\"\n\n    out_dir = 'out' ![1](assets/1.png)\n    try: ![2](assets/2.png)\n        if os.path.isdir(out_dir): ![3](assets/3.png)\n            shutil.rmtree(out_dir) ![4](assets/4.png)\n\n        retval, out = getstatusoutput(f'{RUN} {INPUT1}') ![5](assets/5.png)\n        assert retval == 0\n        assert out == 'Done, wrote 1 sequence in 1 file to directory \"out\".'\n        assert os.path.isdir(out_dir) ![6](assets/6.png)\n        out_file = os.path.join(out_dir, 'input1.txt')\n        assert os.path.isfile(out_file) ![7](assets/7.png)\n        assert open(out_file).read().rstrip() == 'GAUGGAACUUGACUACGUAAAUU' ![8](assets/8.png)\n\n    finally: ![9](assets/9.png)\n        if os.path.isdir(out_dir): ![10](assets/10.png)\n            shutil.rmtree(out_dir)\n```", "```py\n#!/usr/bin/env python3\n\"\"\" Transcribe DNA into RNA \"\"\"\n\nimport argparse\nimport os\nfrom typing import NamedTuple, List, TextIO\n\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    files: List[TextIO]\n    out_dir: str\n\n# --------------------------------------------------\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Transcribe DNA into RNA',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        help='Input DNA file',\n                        metavar='FILE',\n                        type=argparse.FileType('rt'),\n                        nargs='+')\n\n    parser.add_argument('-o',\n                        '--out_dir',\n                        help='Output directory',\n                        metavar='DIR',\n                        type=str,\n                        default='out')\n\n    args = parser.parse_args()\n\n    return Args(args.file, args.out_dir)\n\n# --------------------------------------------------\ndef main() -> None:\n    \"\"\" Make a jazz noise here \"\"\"\n\n    args = get_args()\n\n    if not os.path.isdir(args.out_dir):\n        os.makedirs(args.out_dir)\n\n    num_files, num_seqs = 0, 0 ![1](assets/1.png)\n    for fh in args.files: ![2](assets/2.png)\n        num_files += 1 ![3](assets/3.png)\n        out_file = os.path.join(args.out_dir, os.path.basename(fh.name))\n        out_fh = open(out_file, 'wt') ![4](assets/4.png)\n\n        for dna in fh: ![5](assets/5.png)\n            num_seqs += 1 ![6](assets/6.png)\n            out_fh.write(dna.replace('T', 'U')) ![7](assets/7.png)\n\n        out_fh.close() ![8](assets/8.png)\n\n    print(f'Done, wrote {num_seqs} sequence{\"\" if num_seqs == 1 else \"s\"} '\n          f'in {num_files} file{\"\" if num_files == 1 else \"s\"} '\n          f'to directory \"{args.out_dir}\".') ![9](assets/9.png)\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()\n```", "```py\n>>> import re\n```", "```py\n>>> re.search('T', 'ACGT') ![1](assets/1.png)\n<re.Match object; span=(3, 4), match='T'> ![2](assets/2.png)\n```", "```py\n>>> 'ACGT'[3:4]\n'T'\n```", "```py\n>>> re.sub('T', 'U', 'ACGT') ![1](assets/1.png)\n'ACGU' ![2](assets/2.png)\n```", "```py\nfor dna in fh:\n    num_seqs += 1\n    print(re.sub('T', 'U', dna.rstrip()), file=out_fh) ![1](assets/1.png)\n```", "```py\n$ for py in ./solution*\n> do echo $py && time $py ./tests/inputs/input3.txt\n> done\n./solution1_str_replace.py\nDone, wrote 2 sequences in 1 file to directory \"out\".\n\nreal\t0m1.539s\nuser\t0m0.046s\nsys\t    0m0.036s\n./solution2_re_sub.py\nDone, wrote 2 sequences in 1 file to directory \"out\".\n\nreal\t0m0.179s\nuser\t0m0.035s\nsys\t    0m0.013s\n```", "```py\n$ ./genseq.py --help\nusage: genseq.py [-h] [-l int] [-n int] [-o FILE]\n\nGenerate long sequence\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l int, --len int     Sequence length (default: 1000000)\n  -n int, --num int     Number of sequences (default: 100)\n  -o FILE, --outfile FILE\n                        Output file (default: seq.txt)\n```", "```py\n$ for py in ./solution*; do echo $py && time $py seq.txt; done\n./solution1_str_replace.py\nDone, wrote 100 sequences in 1 file to directory \"out\".\n\nreal\t0m0.456s\nuser\t0m0.372s\nsys\t0m0.064s\n./solution2_re_sub.py\nDone, wrote 100 sequences in 1 file to directory \"out\".\n\nreal\t0m3.100s\nuser\t0m2.700s\nsys\t0m0.385s\n```"]