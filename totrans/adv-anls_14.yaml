- en: Chapter 11\. Data Structures in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. Python中的数据结构
- en: 'In [Chapter 10](ch10.html#first-steps-python), you learned about simple Python
    object types like strings, integers, and Booleans. Now let’s look at grouping
    multiple values together in what’s called a *collection*. Python by default comes
    with several collection object types. We’ll start this chapter with the *list*.
    We can put values into a list by separating each entry with commas and placing
    the results inside square brackets:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.html#first-steps-python)中，您学习了简单的Python对象类型，如字符串、整数和布尔值。现在让我们来看看如何将多个值组合在一起，称为*集合*。Python默认提供了几种集合对象类型。我们将从*列表*开始这一章节。我们可以通过用逗号分隔每个条目并将结果放在方括号内来将值放入列表中：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This object contains all integers, but itself is *not* an integer data type:
    it is a *list*.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象包含所有整数，但本身不是整数数据类型：它是一个*列表*。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In fact, we can include all different sorts of data inside a list…even other
    lists.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以在列表中包含各种不同类型的数据……甚至其他列表。
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you’re seeing, lists are quite versatile for storing data. But right now,
    we’re really interested in working with something that could function like an
    Excel range or R vector, and then move into tabular data. Does a simple list fit
    the bill? Let’s give it a whirl by trying to multiply `my_list` by two.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，列表非常适合存储数据。但是现在，我们真正感兴趣的是能够像Excel范围或R向量一样工作的东西，然后进入表格数据。一个简单的列表是否符合要求？让我们试试把`my_list`乘以二。
- en: '[PRE3]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is probably *not* what you are looking for: Python took you literally
    and, well, doubled your *list*, rather than the *numbers inside* your list. There
    are ways to get what we want here on our own: if you’ve worked with loops before,
    you could set one up here to multiply each element by two. If you’ve not worked
    with loops, that’s fine too: the better option is to import a module that makes
    it easier to perform computations in Python. For that, we’ll use `numpy`, which
    is included with Anaconda.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能*不*是您要找的内容：Python字面上接受了您的请求，并且，嗯，将*列表*加倍，而不是*列表内部的*数字。有办法在这里自己获取我们想要的结果：如果您之前使用过循环，您可以在这里设置一个循环来将每个元素乘以二。如果您以前没有使用过循环，也没关系：更好的选择是导入一个模块，使在Python中执行计算变得更容易。为此，我们将使用包含在Anaconda中的`numpy`。
- en: NumPy arrays
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy数组
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As its name suggests, `numpy` is a module for numerical computing in Python
    and has been foundational to Python’s popularity as an analytics tool. To learn
    more about `numpy`, visit the Help section of Jupyter’s menu bar and select “NumPy
    reference.” We’ll focus for right now on the `numpy` *array*. This is a collection
    of data with all items of the same type and that can store data in up to any number,
    or *n* dimensions. We’ll focus on a *one-dimensional* array and convert our first
    one from a list using the `array()` function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`numpy`是Python中用于数值计算的模块，并且已经成为Python作为分析工具流行的基础。要了解更多关于`numpy`的信息，请访问Jupyter菜单栏的帮助部分并选择“NumPy参考”。现在我们将专注于`numpy`
    *数组*。这是一个包含所有相同类型项目并且可以在任意数量，或*n*维度中存储数据的集合。我们将专注于一个*一维*数组，并使用`array()`函数从列表中转换我们的第一个数组：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At first glance a `numpy` array looks a *lot* like a list; after all, we even
    created this one *from* a list. But we can see that it really is a different data
    type:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，`numpy`数组看起来*很像*一个列表；毕竟，我们甚至是从一个列表*中*创建了它。但我们可以看到它实际上是一个不同的数据类型：
- en: '[PRE6]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Specifically, it’s an `ndarray`, or *n*-dimensional array. Because it’s a different
    data structure, it may behave differently with operations. For example, what happens
    when we multiply a `numpy` array?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，它是一个`ndarray`，或者*n*维数组。因为它是一个不同的数据结构，所以在操作时它可能会表现出不同的行为。例如，当我们将一个`numpy`数组与另一个数组相乘时会发生什么？
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In many ways this behavior should remind you of an Excel range or an R vector.
    And indeed, like R vectors, `numpy` arrays will *coerce* data to be of the same
    type:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，此行为应该让您想起Excel范围或R向量。事实上，就像R向量一样，`numpy`数组将会*强制*数据成为相同类型：
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you’re seeing, `numpy` is a lifesaver for working with data in Python. Plan
    to import it *a lot*…which means typing it a lot. Fortunately, you can lighten
    the load with *aliasing*. We’ll use the `as` keyword to give `numpy` its conventional
    alias, `np`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`numpy`对于在Python中处理数据非常有用。计划*经常*导入它……这意味着经常输入它。幸运的是，您可以通过*别名*减轻负担。我们将使用`as`关键字为`numpy`指定其常用别名`np`：
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This gives the module a temporary, more manageable name. Now, each time we want
    to call in code from `numpy` during our Python session, we can refer to its alias.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这为模块提供了一个临时且更易管理的名称。现在，在我们的Python会话期间，每次我们想要调用`numpy`中的代码时，我们可以引用其别名。
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that aliases are *temporary* to your Python session. If you restart
    your kernel or start a new notebook, the alias won’t work anymore.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，别名对于您的Python会话是*临时*的。如果重新启动内核或启动新笔记本，则别名将不再有效。
- en: Indexing and Subsetting NumPy Arrays
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引和子集选择NumPy数组
- en: 'Let’s take a moment to explore how to pull individual items from a `numpy`
    array, which we can do by affixing its index number in square brackets directly
    next to the object name:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来探索如何从`numpy`数组中提取单个项，我们可以通过在对象名称旁边直接加上方括号及其索引号来完成：
- en: '[PRE11]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For example, we just pulled the second element from our array…*or did we?* Let’s
    revisit `my_array`; what is *really* showing in the second position?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们刚刚从数组中提取了第二个元素……*或者我们是这样做的吗？* 让我们重新审视`my_array`；第二个位置*真的*显示了什么？
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It appears that `1` is in the second position, and `5` is actually in the *third*.
    What explains this discrepancy? As it turns out, it’s because Python counts things
    differently than you and I usually do.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来`1`位于第二个位置，而`5`实际上在*第三*个位置。是什么解释了这种差异？事实证明，这是因为Python计数方式与我们通常的计数方式不同。
- en: 'As a warm-up to this strange concept, imagine being so excited to get your
    hands on a new dataset that you download it several times. That hastiness leaves
    you with a series of files named like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对这种奇怪概念的预热，想象一下，您因为兴奋地获取新数据集而多次下载它。匆忙行事会让您得到一系列文件，命名如下：
- en: '*dataset.csv*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dataset.csv*'
- en: '*dataset (1).csv*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dataset (1).csv*'
- en: '*dataset (2).csv*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dataset (2).csv*'
- en: '*dataset (3).csv*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*dataset (3).csv*'
- en: 'As humans, we tend to start counting things at one. But computers often start
    counting at *zero*. Multiple file downloads is one example: our second file is
    actually named `dataset (1)`, not `dataset (2)`. This is called *zero-based indexing*,
    and it happens *all over* in Python.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为人类，我们倾向于从一开始计算事物。但计算机通常从*零*开始计数。多个文件下载就是一个例子：我们的第二个文件实际上命名为`dataset (1)`，而不是`dataset
    (2)`。这称为*零起始索引*，在Python中*到处都有*。
- en: This is all to say that, to Python, indexing something with the number `1` returns
    the value in the *second* position, indexing with `2` returns the third, and so
    on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是说，对于Python来说，用数字`1`索引的内容返回的是*第二*位置的值，用`2`索引的是第三个，依此类推。
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It’s also possible to subset a selection of consecutive values, called *slicing*
    in Python. Let’s try finding the second through fourth elements. We already got
    the zero-based kicker out of the way; how hard could this be?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，还可以对一系列连续的值进行子集选择，称为Python中的*切片*。让我们尝试找出第二到第四个元素。我们已经了解了零起始索引的要点；这有多难呢？
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*But wait, there’s more.* In addition to being zero-indexed, slicing is *exclusive*
    of the ending element. That means we need to “add 1” to the second number to get
    our intended range:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*但等等，还有更多。* 除了零起始索引外，切片*不包括*结束元素。这意味着我们需要“加1”到第二个数字以获得我们想要的范围：'
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There’s much more you can do with slicing in Python, such as starting at the
    *end* of an object or selecting all elements from the start to a given position.
    For now, the important thing to remember is that *Python uses zero-based indexing*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，您可以进行更多的切片操作，例如从对象的*末尾*开始或选择从开头到指定位置的所有元素。现在，记住的重要事情是*Python使用零起始索引*。
- en: Two-dimensional `numpy` arrays can serve as a tabular Python data structure,
    but all elements must be of the same data type. This is rarely the case when we’re
    analyzing data in a business context, so to meet this requirement we’ll move to
    `pandas`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 二维`numpy`数组可以作为Python的表格数据结构，但所有元素必须是相同的数据类型。在业务环境中分析数据时，这很少发生，因此我们将转向`pandas`以满足此要求。
- en: Introducing Pandas DataFrames
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Pandas DataFrames
- en: 'Named after the *panel data* of econometrics, `pandas` is especially helpful
    for manipulating and analyzing tabular data. Like `numpy`, it comes installed
    with Anaconda. The typical alias is `pd`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据计量经济学中*面板数据*的命名，`pandas`在操作和分析表格数据方面特别有帮助。像`numpy`一样，它与Anaconda一起安装。典型的别名是`pd`：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `pandas` module leverages `numpy` in its code base, and you will see some
    similarities between the two. `pandas` includes, among others, a one-dimensional
    data structure called a *Series*. But its most widely used structure is the two-dimensional
    *DataFrame* (sound familiar?). It’s possible to create a DataFrame from other
    data types, including `numpy` arrays, using the `DataFrame` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`模块在其代码库中利用了`numpy`，您将看到两者之间的一些相似之处。`pandas`包括一个称为*Series*的一维数据结构。但它最广泛使用的结构是二维*DataFrame*（听起来熟悉吗？）。使用`DataFrame`函数可以从其他数据类型（包括`numpy`数组）创建DataFrame：'
- en: '[PRE17]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'DataFrames generally include named *labels* for each column. There will also
    be an *index* running down the rows, which by default starts at (you guessed it)
    0\. This is a pretty small dataset to explore, so let’s find something else. Unfortunately,
    Python does not include any DataFrames out of the gate, but we can find some with
    the `seaborn` package. `seaborn` also comes installed with Anaconda and is often
    aliased as `sns`. The `get_dataset_names()` function will return a list of DataFrames
    available to use:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame通常包括每列的命名*标签*。行下方还将有一个*索引*，默认情况下从0开始。这是一个相当小的数据集要探索，所以让我们找点别的。不幸的是，Python不会自带任何DataFrame，但我们可以使用`seaborn`包找到一些。`seaborn`也随Anaconda一起安装，并经常被别名为`sns`。`get_dataset_names()`函数将返回可用于使用的DataFrame列表：
- en: '[PRE18]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Does *iris* sound familiar? We can load it into our Python session with the
    `load_dataset()` function, and print the first five rows with the `head()` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*鸢尾花*听起来熟悉吗？我们可以使用`load_dataset()`函数将其加载到我们的Python会话中，并使用`head()`方法打印前五行。'
- en: '[PRE19]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Importing Data in Python
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的数据导入
- en: 'As with R, it’s most common to read in data from external files, and we’ll
    need to deal with directories to do so. The Python Standard Library includes the
    `os` module for working with file paths and directories:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与R一样，最常见的是从外部文件中读取数据，我们需要处理目录来做到这一点。Python标准库包含了用于处理文件路径和目录的`os`模块：
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For this next part, have your notebook saved in the main folder of the book
    repository. By default, Python sets the current working directory to wherever
    your active file is located, so we don’t have to worry about changing the directory
    as we did in R. You can still check and change it with the `getcwd()` and `chdir()`
    functions from `os`, respectively.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的部分，请将您的笔记本保存在书籍存储库的主文件夹中。默认情况下，Python将当前工作目录设置为您的活动文件所在的位置，因此我们不必像在R中那样担心更改目录。您仍然可以使用`os`的`getcwd()`和`chdir()`函数分别检查和更改它。
- en: 'Python follows the same general rules about relative and absolute file paths
    as R. Let’s see if we can locate *test-file.csv* in the repository using the `isfile()`
    function, which is in the `path` submodule of `os`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Python遵循与R相同的相对和绝对文件路径的一般规则。让我们看看是否可以使用`os`的`path`子模块中的`isfile()`函数在存储库中定位*test-file.csv*：
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now we’d like to locate that file as contained in the *test-folder* subfolder.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要找到该文件，它包含在*test-folder*子文件夹中。
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, try putting a copy of this file in the folder one up from your current
    location. You should be able to locate it with this code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，尝试将此文件的副本放在当前位置上一级的文件夹中。您应该能够使用此代码找到它：
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Like with R, you’ll most commonly read data in from an external source to operate
    on it in Python, and this source can be nearly anything imaginable. `pandas` includes
    functions to read data from, among others, both *.xlsx* and *.csv* files into
    DataFrames. To demonstrate, we’ll read in our reliable *star.xlsx* and *districts.csv*
    datasets from the book repository. The `read_excel()` function is used to read
    Excel workbooks:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与R一样，您通常会从外部来源读取数据以在Python中进行操作，而这个来源几乎可以是任何想得到的东西。`pandas`包含从*.xlsx*和*.csv*文件等文件中读取数据到DataFrame的功能。为了演示，我们将从书籍存储库中读取我们可靠的*star.xlsx*和*districts.csv*数据集。使用`read_excel()`函数来读取Excel工作簿：
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly, we can use `pandas` to read in *.csv* files with the `read_csv()`
    function:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以使用`pandas`中的`read_csv()`函数来读取*.csv*文件：
- en: '[PRE25]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you’d like to read in other Excel file types or specific ranges and worksheets,
    for example, check the `pandas` documentation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要读取其他Excel文件类型或特定范围和工作表，例如，请查看`pandas`文档。
- en: Exploring a DataFrame
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索DataFrame
- en: 'Let’s continue to size up the *star* DataFrame. The `info()` method will tell
    us some important things, such as its dimensions and types of columns:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续评估*star* DataFrame。`info()`方法会告诉我们一些重要的信息，比如它的维度和列的类型：
- en: '[PRE26]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can retrieve descriptive statistics with the `describe()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`describe()`方法检索描述性统计信息：
- en: '[PRE27]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: By default, `pandas` only includes descriptive statistics of numeric variables.
    We can override this with `include = 'all'`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`pandas`仅包括数值变量的描述统计信息。我们可以使用`include='all'`来覆盖这个设置。
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`NaN` is a special `pandas` value to indicate missing or unavailable data,
    such as the standard deviation of a categorical variable.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN`是一个特殊的`pandas`值，表示缺失或不可用的数据，例如分类变量的标准差。'
- en: Indexing and Subsetting DataFrames
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame的索引和子集
- en: Let’s return to the small *roster* DataFrame, accessing various elements by
    their row and column position. To index a DataFrame we can use the `iloc`, or
    *integer location*, method. The square bracket notation will look familiar to
    you, but this time we need to index by both row *and* column (again, both starting
    at zero). Let’s demonstrate on the *roster* DataFrame we created earlier.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到小型 *roster* DataFrame，通过它们的行和列位置访问各种元素。要对 DataFrame 进行索引，我们可以使用 `iloc`
    方法，或称为 *integer location*。方括号表示法对您来说可能已经很熟悉了，但这次我们需要通过行 *和* 列来进行索引（再次从零开始）。让我们在前面创建的
    *roster* DataFrame 上演示一下。
- en: '[PRE29]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It’s possible to employ slicing here as well to capture multiple rows and columns:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处也可以使用切片来捕获多行和列：
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To index an entire column by name, we can use the related `loc` method. We’ll
    leave a blank slice in the first index position to capture all rows, then name
    the column of interest:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要按名称索引整个列，我们可以使用相关的 `loc` 方法。我们将在第一个索引位置留一个空切片以捕获所有行，然后命名感兴趣的列：
- en: '[PRE31]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Writing DataFrames
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入 DataFrame
- en: '`pandas` also includes functions to write DataFrames to both *.csv* files and
    *.xlsx* workbooks with the `write_csv()` and `write_xlsx()` methods, respectively:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 还包括函数，可以分别使用 `write_csv()` 和 `write_xlsx()` 方法将 DataFrame 写入到 *.csv*
    文件和 *.xlsx* 工作簿中：'
- en: '[PRE32]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In a short time, you were able to progress all the way from single-element objects,
    to lists, to `numpy` arrays, then finally to `pandas` DataFrames. I hope you were
    able to see the evolution and linkage between these data structures while appreciating
    the added benefits of the packages introduced. The following chapters on Python
    will rely heavily on `pandas`, but you’ve seen here that `pandas` itself relies
    on `numpy` and the basic rules of Python, such as zero-based indexing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在短时间内，您能够从单元素对象进展到列表、`numpy` 数组，最终到 `pandas` DataFrames。希望您能看到这些数据结构之间的演变和联系，并欣赏到所介绍包的附加优势。接下来的
    Python 章节将大量依赖于 `pandas`，但您已经看到 `pandas` 本身依赖于 `numpy` 和 Python 的基本规则，例如从零开始的索引。
- en: Exercises
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'In this chapter, you learned how to work with a few different data structures
    and collection types in Python. The following exercises provide additional practice
    and insight on these topics:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何在 Python 中使用几种不同的数据结构和集合类型。以下练习提供了关于这些主题的额外实践和见解：
- en: Slice the following array so that you are left with the third through fifth
    elements.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对以下数组进行切片，以便保留第三到第五个元素。
- en: '[PRE33]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Load the `tips` DataFrame from `seaborn`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `seaborn` 加载 `tips` DataFrame。
- en: Print some information about this DataFrame, such as the number of observations
    and each column’s type.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印有关此 DataFrame 的一些信息，例如观测数和每列的类型。
- en: Print the descriptive statistics for this DataFrame.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印此 DataFrame 的描述统计信息。
- en: The [book repository](https://oreil.ly/RKmg0) includes an *ais.xlsx* file in
    the *ais* subfolder of the *datasets* folder. Read it into Python as a DataFrame.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 书籍存储库（[https://oreil.ly/RKmg0](https://oreil.ly/RKmg0)）包含了 *datasets* 文件夹中 *ais*
    子文件夹中的 *ais.xlsx* 文件。将其读取为 Python 的 DataFrame。
- en: Print the first few rows of this DataFrame.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印此 DataFrame 的前几行。
- en: Write just the *sport* column of this DataFrame back to Excel as *sport.xlsx*.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅将此 DataFrame 的 *sport* 列写回 Excel 为 *sport.xlsx*。
