- en: 2 Getting started with Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Streamlit development workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and running your first Streamlit app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Welcome to Chapter 2\. This is where the rubber hits the road! By the end of
    this chapter, you'll be interacting with your first very own Streamlit app!
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is not just about teaching you Streamlit though; it''s also about
    making sure you''re productive with Streamlit and well-placed to develop apps
    in the real world. So before we jump into writing code, we''ll take some time
    to set up your development environment. Specifically, we''ll talk about three
    things you''ll want to consider while doing so: version control with Git, code
    editing tools, and virtual environments.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll then examine the workflow you'll follow while coding with Streamlit so
    you know what to expect as you build apps throughout this book. With that out
    of the way, I'll walk you step-by-step through actually creating your first app,
    a password checker.
  prefs: []
  type: TYPE_NORMAL
- en: Excited yet? Let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Getting Streamlit up and running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First things first! Before you can build any apps, you need Streamlit installed
    and ready to go. This involves two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the right version of Python (3.8 and above), and `pip` (a tool that
    ships with Python and can install Python packages easily)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use `pip` to install Streamlit (spoiler alert: type `pip install streamlit`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a detailed installation guide, see Appendix A of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Setting up your development environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tools you use and the way you set up the environment you code your apps
    in are largely a matter of preference. However, over time, these matters can have
    an outsized impact on your productivity as a developer, so it's worth your time
    to consider them.
  prefs: []
  type: TYPE_NORMAL
- en: In this section I'll briefly discuss a few important aspects of your development
    environment, namely version control, your editing tool, and virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: If you're an experienced Python developer and already have a setup you're comfortable
    with, go ahead and skip to the section on installing Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.1 Version control with Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've never written code in a professional setting, there's a chance you
    may not have used a version control system like Git before, or don't fully understand
    what it's for.
  prefs: []
  type: TYPE_NORMAL
- en: '*Version control* is a structured way to track, manage, document, and experiment
    with making changes to your programs. Think of it as a time machine for your code.'
  prefs: []
  type: TYPE_NORMAL
- en: Git is far and away the most popular version control system that exists today,
    so in this book, we'll use the terms *Git* and *version control* interchangeably.
  prefs: []
  type: TYPE_NORMAL
- en: In the course of working on your apps, there will be occasions when you change
    your mind and decide to design something differently. In those situations, Git
    allows you to “go back in time” to how your code *used* to be and apply the changes
    from that point.
  prefs: []
  type: TYPE_NORMAL
- en: You can also experiment with different versions of your code while testing out
    multiple design options and switch between them easily with Git. Perhaps my favorite
    aspect of Git is that it lets you document changes to your code, giving you a
    place to explain your thought process on why you decided to make things a certain
    way. Trust me—you'll thank yourself six months later while you're reading through
    your own code and trying to decipher it.
  prefs: []
  type: TYPE_NORMAL
- en: All of these situations are extremely common when you're working on a large
    project, or collaborating with others. Even if that *doesn't* currently apply
    to you, I highly recommend learning and incorporating Git into your development
    workflow because the benefits it offers are too numerous to ignore.
  prefs: []
  type: TYPE_NORMAL
- en: If I've sold you on the benefits of version control, check out the section called
    “A whirlwind intro to Git” in Chapter 5 for a quick look at the basics. It's designed
    to be a standalone section, so if you like, you can go to it right now and come
    back when you're done. If you're (understandably) impatient to get started with
    Streamlit, read on.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.2 Code editors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit apps, like all Python scripts, are just text files, so all you *really*
    need to write code is a simple text editor (like Notepad in Windows).
  prefs: []
  type: TYPE_NORMAL
- en: However, using an advanced code editor or an *Integrated Development Environment*
    (IDE) makes you so much more productive—giving you features like syntax highlighting,
    easy debugging tools, and code navigation—that it's hard not to recommend using
    one.
  prefs: []
  type: TYPE_NORMAL
- en: There are many, many tools that will fit the bill, but I'd like to mention two
    of the most popular ones here.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: PyCharm is a versatile IDE tailor-made for Python, developed by the company
    JetBrains. It offers comprehensive support for Python out of the box, such as
    code completion, error detection, quick-fix suggestions and more.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm is an excellent choice if you're seeking advanced functionality straight
    from installation without having to tinker around too much. The Pro edition costs
    money, but PyCharm has a Community Edition you can get for free at [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download)
    (make sure you scroll down to where it says “Community Edition”).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 The project editor window in PyCharm Community Edition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Visual Studio Code (VS Code for short) is an immensely popular code editor maintained
    by Microsoft. It supports a multitude of languages.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code offers some essential functionality such as syntax highlighting right
    away, but its true strength lies in its ecosystem of plugins that can extend its
    capabilities. Indeed, with the right set of plugins, you can make VS Code do essentially
    everything PyCharm Professional (the paid version) can do.
  prefs: []
  type: TYPE_NORMAL
- en: Since VS Code is completely free, it's an attractive proposition for learners
    who don't mind spending some time to set everything up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Since both of these (and many others, such as Sublime Text and Notepad++)
    are viable code editing tools, I won''t assume that you''re using any particular
    one. As long as you have a terminal you can type commands into and a program that
    can edit text files, you''re good to go as far as this book is concerned.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.2.3 Virtual environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most useful real-world Python projects you work on will require you to rely
    on a variety of libraries. These libraries change all the time, releasing new
    versions that add and remove features or modify existing ones.
  prefs: []
  type: TYPE_NORMAL
- en: As you gain experience and create more complex applications, you'll often find
    that updating a library for one project causes another to break or leads to unpredictable
    bugs and conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments are a way out of this dilemma. A virtual environment consists
    of an isolated instance of Python and a set of libraries and dependencies. Each
    project you start should live in its own virtual environment. That way, you can
    modify the dependencies of any project without affecting any others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you''re just starting out and haven''t run into dependency management
    problems, it''s a great idea to get familiar with virtual environments. There
    are several virtual environment-related libraries and tools available with varying
    levels of sophistication: you may come across `venv`, `pipenv`, `pyenv`, `poetry`
    and others.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll discuss virtual environments in more detail in Chapter 13 while exploring
    how to distribute your code.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Running Streamlit for the first time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where the fun begins! In this section, we'll run a Streamlit app for
    the first time, and get a first-hand look at the kind of things you can devise
    with Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already done so, go to Appendix A and make sure you have Streamlit
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: If you have, open up a terminal window and let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: The app we'll be running is the *hello* app that comes pre-built with Streamlit.
    To see it in action, type `streamlit hello` in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: This should display some output on the terminal that you can ignore for now,
    and after a few seconds, opens your web browser to display the actual app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *hello* app shows off Streamlit''s capabilities by demoing a variety of
    features: animation, graph plotting, maps, and tables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.2 shows one such demo: an animation built from a mathematical visualization.
    You can navigate to other demos using the sidebar on the left.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 Animation Demo from streamlit hello
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Figure 2.3 shows a more practical demo related to Pandas dataframes. We'll become
    intimately familiar with these later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 DataFrame Demo from streamlit hello
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: I hope looking at these examples inspires you!
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar also has a “Show code” checkbox which, as you might imagine, displays
    the source code for each app below the app itself. In each instance, you'll find
    that the code isn't terribly verbose.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you don't have to understand how all of this is done right now, but
    hopefully you'll gain some appreciation for what Streamlit makes possible.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 The Streamlit development workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing Streamlit apps - or any kind of programming, really - is an iterative
    process where you write some code, test if it works, and repeat. If you've never
    written graphical applications before, you may be curious about what this process
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 describes the development workflow you'll soon get used to.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 The Streamlit development workflow
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let''s walk through the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Write your Python code:** Create a first draft of your app in a Python file
    in your code editor. This can be as basic or as fleshed-out as you like. Some
    people like to run the app right from the outset as they begin to shape it and
    visualize every change as they go, so their first draft may just be an empty app
    with a title.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I myself find this distracting since it's tempting to spend time fine-tuning
    the appearance of the app if I see it early on. Instead, I prefer to code up a
    roughly complete version of the app before I run it for the first time. This is
    entirely a matter of preference though.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save your file:** This should be self-explanatory. Save your Python file
    as you would normally, with a `.py` extension.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Run your app using** `streamlit run <filename>`**:** Run this in your terminal
    and replace `<filename>` with the path to your file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This opens a browser window with your app, as you saw when you ran the *hello*
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test your app in the browser:** Interact with your app. Play around with
    it by entering values, clicking buttons etc., and seeing if the output matches
    what you''d expect.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Make code changes as needed:** Based on your testing, go back to your Python
    code and edit it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save your changes:** Again, self-explanatory.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch back to your browser window: Remember, you don''t need to re-run `streamlit
    run <filename>` to see your changes in the app.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You have two options here:** If you want Streamlit to re-run your app with
    your changes automatically, you can click “Always rerun” in your app. Otherwise,
    you can still click “Rerun” each time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 4-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be going through these steps a *lot* throughout this book, and it'll
    soon become second nature. But enough theory, let's put this in action!
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Building your first app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll craft our very first app! To do this, I'll first introduce
    the concept behind the app and outline the flow of logic.
  prefs: []
  type: TYPE_NORMAL
- en: I'll then walk you through the code for the complete app, explaining each part
    of it step-by-step. Finally, we'll run the app and make changes to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word of advice before we dive in: Your learning experience will be richer
    if you take an active role in it, tinkering and experimenting as you go. Be curious
    and don''t be afraid to make changes outside of those suggested in the text! You''ll
    often find that the parts of the material that stick in your mind the best are
    the ones where you took the initiative to explore and understand on your own.'
  prefs: []
  type: TYPE_NORMAL
- en: With that said, it's time to get our hands dirty!
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.1 A password checker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You've probably visited one of those websites that have a huge list of conditions
    that your password needs to fulfill, like containing at least one lowercase letter,
    one special character, an even number of underscores, the names of up to two dwarves
    from Snow White, and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: The app we'll create is one that lets the user enter a password they're considering,
    and shows them which conditions pass and which ones fail.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.2 Logic flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Figure 2.5 lays out the flow of our app's logic.
  prefs: []
  type: TYPE_NORMAL
- en: It begins when the user enters a password in an input text box and initiates
    the checking process by clicking a button.
  prefs: []
  type: TYPE_NORMAL
- en: Internally, the app maintains a list of conditions (technically a dictionary,
    in the code) to be checked in its memory. We loop through this list, categorizing
    each condition as either “PASS” or “FAIL” depending on whether the entered password
    meets it, and generate a fresh list (or dictionary) of results.
  prefs: []
  type: TYPE_NORMAL
- en: Following this, we iterate through the results, presenting the outcomes on the
    screen. Each condition is represented by a box, displayed in green if it passed
    or red if it failed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 The flow of logic in our password checker app
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 2.5.3 Going through the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By now, you hopefully have a clear understanding of the logic we want to implement,
    so let's jump right in and start building!
  prefs: []
  type: TYPE_NORMAL
- en: To get started, go to this book's GitHub page, copy the code in Listing 2.1
    into a new file, and save it.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 2.1 The code for our password checker app
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go through it part by part:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first line imports Streamlit itself (you''ll need this in every app) and
    notes that we''ll use `st` to refer to it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can technically use whatever you like here, but the convention of `st` is
    so widely used that you'll frequently hear people referring to Streamlit elements
    as `st.<whatever>`
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following block to define the conditions that we want to check for:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We do this by creating a Python dictionary, where the keys are the conditions
    themselves, and the values are the corresponding functions that we'll use to check
    that condition.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the functions are *lambdas* or anonymous in-line functions. A
    lambda is a cool way to define a short one-line function in Python without having
    to go to the trouble of giving it a name. Each function accepts one parameter—the
    password, `pw`—and returns a Boolean value of true if the corresponding condition
    is met, and false otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The first lambda function simply checks if the length of the password is more
    than 8 characters. In each of the others, we loop through the characters in `pw`
    and apply a test (e.g., `char.isupper()`, `char.islower()` etc.) to each.
  prefs: []
  type: TYPE_NORMAL
- en: 'To evaluate the password for all of the conditions defined above this is the
    function we''ll run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It returns a new Python dictionary where the keys are the conditions and the
    values are the results of running the lambda function corresponding to each condition
    that we defined above.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax we've used here is called a *dictionary comprehension* in Python,
    and it's short-hand to create a new dictionary from some input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is our first actual Streamlit element. It''s a simple one called `title`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It does what you'd expect it to, which is to display the passed text as a title,
    in nice large type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following line to show a password input box to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Streamlit's implementation of this also offers a toggle to show/hide the entered
    text. When the user enters some text, it's saved in the `password_input` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '`st.button` is one of the simplest Streamlit elements and one you''ll be working
    with frequently. Unsurprisingly, here it displays a button with the text “Check
    password:”'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that this goes in an `if` clause. Whatever code is nested within the
    `if` (see below) is evaluated when the button is clicked. There are some interesting
    nuances to this that we'll dive into in Chapter 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the button is clicked, our app checks if `password_input` has a non-empty
    value, i.e., if the user has actually entered a password. If they have, it calls
    `get_password_properties` on it to evaluate the conditions we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It then loops through the returned dictionary, where each key is a condition
    and the corresponding value is a boolean indicating if the condition passed.
  prefs: []
  type: TYPE_NORMAL
- en: If the condition passes, we use another Streamlit element, `st.success` to indicate
    this, and if it didn't, we use `st.error` to show that it failed.
  prefs: []
  type: TYPE_NORMAL
- en: '`st.success` and `st.error` are both just containers for text with some semantic
    styles applied (i.e., mostly a green box for `st.success` and a red one for `st.error`)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This `else` corresponds to the if `password_input` from earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we’re using yet another Streamlit element, the general `st.write`, to
    ask the user to enter a password.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.4 Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run the app, in your terminal, navigate to the directory where you saved
    your file, and type in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, if you saved your code under the file name `password_checker.py`,
    you would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you saw when you ran `streamlit hello` earlier, this displays some output
    in your terminal window and opens your web browser where you can see the app.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to enter various input passwords and play around with the app! If
    everything has gone according to plan, you should see something similar to figure
    2.6 when you click “Check password.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 Our password checker app
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Don't close this page because we're shortly going to see what happens when you
    make changes to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before that, let''s turn our attention to the terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the part where it says `Local URL: http://localhost:8503`.'
  prefs: []
  type: TYPE_NORMAL
- en: This is Streamlit's way of telling you that there's a Streamlit *server* running
    on your computer (that's what `localhost` means) on port 8503\. The port in the
    output you see might be something different, like 8501; this is totally fine.
  prefs: []
  type: TYPE_NORMAL
- en: We'll explore how this works in more detail in Chapter 3, but for now, all you
    need to take away from this is that you can also access your app by going to the
    “Local URL” specified in the output.
  prefs: []
  type: TYPE_NORMAL
- en: If there are other computers on your network, the `Network URL` is what those
    other machines can use to access your app.
  prefs: []
  type: TYPE_NORMAL
- en: Don't close the terminal window or cancel out of it just yet!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'In some cases, you may find that either your browser window does not open automatically
    when you enter `streamlit run`, or the browser window opens but the page is blank.
    If this is true for you, here are some things to try:'
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, manually type in the address listed against "Local URL" in
    the terminal output, e.g., `http://localhost:8503`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you're running the most up-to-date version of your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:8503` in a different browser. I've found that
    Google Chrome tends to have the least issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.5.5 Making changes to the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we know our app works, let's try making changes to it. For instance,
    let's say we want to add a check that the entered password contains at least one
    numeral.
  prefs: []
  type: TYPE_NORMAL
- en: 'You would do this by adding a new condition to our `conditions` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 2.2 Adding a new condition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Our button doesn''t sound excited enough, so let''s also add an exclamation
    point to the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once you've saved your file, head back to your browser window where you have
    the app open. On the upper right-hand corner you should see a message informing
    you that the source file has changed (see figure 1.5) and options to “Rerun” or
    “Always rerun.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 Streamlit displays a message on your app when the source changes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is because Streamlit monitors your app file to see if any changes have
    been made to it. Click “Rerun" to re-run your app with the latest code.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that our button now says “Check password!” with the exclamation point,
    and if you enter a password and click it, you'll see the new numeral test we added.
    This updated view is shown in figure 2.8.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 The password checker app with our newly added changes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You could also choose “Always rerun,” which means Streamlit will automatically
    update your app every time you change your code. This makes for a smoother development
    experience where you edit your code and immediately switch to your browser to
    see what effect it had.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to disable this behavior (it can sometimes be hard to spot what's
    changed on a page when you have it on), you can click the hamburger menu on the
    top right, go to “Settings” and uncheck “Run on save.”
  prefs: []
  type: TYPE_NORMAL
- en: 2.5.6 Killing and restarting the server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout all of this, recall that you've kept your terminal window (where
    you typed `streamlit run …`) open. This window is where the Streamlit server that
    "serves'' your app is running.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're done playing with the app, you probably want to shut the server
    down so it's not consuming resources.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, head to the terminal window now and either close it or press “Ctrl+C.”
  prefs: []
  type: TYPE_NORMAL
- en: If you now go back to your open browser window, you'll find that you can't interact
    with your app any more. The button's disabled, it says “CONNECTING" at the top
    right, and a connection error shows up as seen in figure 2.9.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/02__image009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 When you shut down the Streamlit server, the frontend app can't run
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can bring your app back to life by running `streamlit run <filename>` again,
    which restarts your server and re-establishes the connection between the frontend
    and the newly restarted server.
  prefs: []
  type: TYPE_NORMAL
- en: This will open a new browser window with a *different* instance of your app.
    You'll find that the old window is also now alive because it's able to re-establish
    the connection to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit requires Python 3.8 or above to run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git is a form of version control, which helps you track and manage changes to
    your code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced code editors like VS Code and IDEs like PyCharm make you more productive
    through syntax highlighting, debugging tools, code navigation, autocomplete and
    more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual environments allow you to isolate the libraries and dependencies of
    each project you work on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You run Streamlit apps using `streamlit run <file_name>`, which opens a web
    browser window with your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can make Streamlit always re-run your app whenever the source code changes
    for a seamless development experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
