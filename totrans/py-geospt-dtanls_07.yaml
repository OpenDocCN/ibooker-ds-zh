- en: Chapter 7\. GeoPandas and Spatial Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps are beautiful. The stories they tell can be so captivating that it’s easy
    to unintentionally disregard the geospatial statistics within them. But geospatial
    maps are not simply static images. There is information embedded in them, such
    as attributes associated with a specific feature in a GIS layer or pixel densities
    observed in raster images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python has a variety of packages for working with geospatial data. If you are
    familiar with Python, you likely know [pandas](https://oreil.ly/j6YBd), a data
    analysis tool built specifically for Python. Pandas allows us to read a wide variety
    of data types into a dataframe: a set of tables containing rows (which denote
    records) and columns (denoting attributes). [GeoPandas](https://oreil.ly/pb8lC)
    is an extension of pandas that lets you manipulate geometric and geospatial data
    using what it calls a *GeoDataFrame:* a geospatial dataframe in which each row
    is a spatial feature, such as a point, line, or polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you how to analyze your data and create maps using GeoPandas
    and GeoDataFrames, as well as some other important packages, such as [matplotlib](https://matplotlib.org)
    to visualize data and Census Data API. You will also learn how to access geospatial
    files and delve deeper into demographic data by creating and comparing demographic
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install GeoPandas, you’ll use `conda` and `conda-forge` in your terminal.
    As in previous chapters, I’ll also show you how to create an environment for all
    the files you’ll need to work with the data in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing GeoPandas can be a little tricky. Think of it as a moody teenager.
    It often wants to go first (importing) and likes the latest trends (pay attention
    to versioning of dependencies). It also prefers a catchy nickname: typically,
    GeoPandas is called `gpd`, but from time to time, the code will write out `geopandas`
    instead. Pay attention and adjust your variables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up your environment, start with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can add your Python version here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can start installing files into the `geop_env`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can add any packages you would like to access to your `geop_env`. If
    you would like a collection of packages for geospatial analysis, I suggest downloading
    the geospatial package, but for now you can add packages individually if you prefer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: GeoPandas simplifies working with geospatial data in Python. Let’s explore the
    expanded operations that enable you to perform spatial operations on geometric
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Working with GeoJSON files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GeoPandas lets you work with GeoJSON files. You may have heard of JSON, a common
    data exchange format. GeoJSON is a data exchange format based on JSON that’s specifically
    designed to represent geographic data structures and their nonspatial attributes.
    Working with GeoJSON files makes it fairly simple to identify coordinates and
    locations for your maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-1](#zooming_in_on_parisapostrophes_onest_ar) shows a map from [*geojson.io*](https://oreil.ly/JmXP4).
    Geojson.io is an open source tool that simplifies creating, viewing, and sharing
    your maps. You can perform a variety of functions on the internet without downloading
    any data to your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zooming in on Paris’s 1st Arrondissement and selecting boundaries to create
    a GeoJSON file](assets/pgda_0701.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. Zooming in on Paris’s 1st Arrondissement and selecting boundaries
    to create a GeoJSON file
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Click on the link [*geojson.io*](https://geojson.io) and zoom into a country.
    I chose France because, well, it’s France. An easy way to locate coordinates for
    a specific location is to select the region you are interested in and drag the
    polygon around the area. The tools for selecting a polygon are visible on the
    right edge of the mapping dashboard. Try locating Paris, France, on the map. Find
    the Tuileries Garden and draw a polygon around it. Once you save the polygon,
    you can view formatting options and style properties by clicking within the boundary.
  prefs: []
  type: TYPE_NORMAL
- en: The Meta tab in the top menu (shown in [Figure 7-1](#zooming_in_on_parisapostrophes_onest_ar))
    allows you to generate a *bounding box (bbox)*, which contains the coordinates
    and set of points you are interested in mapping. It defines the spatial location
    of an object of interest and its coordinates. You can also load a string in the
    well-known text (WKT) markup language for vector geometry objects.
  prefs: []
  type: TYPE_NORMAL
- en: The buttons in the lower left corner, visible in [Figure 7-2](#map_viewer_options),
    let you toggle between Mapbox (vector tiles), Satellite (raster data), and OSM
    (OpenStreetMap, which you learned about in [Chapter 5](ch05.xhtml#openstreetmap_accessing_geospatial_data)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Map viewer options](assets/pgda_0702.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-2\. Map viewer options
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you want to save this file, you can do so in several different formats, including
    *.csv*, *.txt*, and a shapefile. Then you can import it to QGIS, ArcGIS, or a
    platform of your choice for additional exploration and analysis. Spreadsheet data
    is stored as *.csv* or *.txt* and often contains location information, such as
    coordinate data for longitude and latitude, addresses, or zip codes. Shapefiles
    are Esri vector files that capture location, shape, and related files about locations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GeoDataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A GeoDataFrame is much the same as a pandas dataframe but with an extra column
    of geometric data. Many types of vector data describe discrete data with a fixed
    location while continuous data is often represented by raster data (although both
    can be either).
  prefs: []
  type: TYPE_NORMAL
- en: 'GeoPandas makes a few dataset examples available for exploration. You are going
    to access an example from NYC Boroughs, abbreviated as `nybb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'These files represent the positions of cities, the contours of different countries,
    and the boundaries of New York City’s boroughs. To access them, you will need
    to include the name of the dataset as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can open this in a Jupyter Notebook from your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with the notebook open, you can create a dataframe. First, import the
    packages you’ll need into your environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you’ll need to retrieve the dataset and call for the active geometry
    column (in this instance, “geometry”) by creating a dataframe called `world.geometry.name`.
    When you call `head()`, the top five rows and the columns in the dataset will
    be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Make note of the index assignments in the first column. You will be able to
    isolate a single borough by referring to it by its index location. `BoroCode`
    and `BoroName` are additional identifiers you can specify, but you may notice
    the simplicity of calling by index in the code snippets that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now working with a GeoDataFrame. You can use it to generate the plot
    in [Figure 7-3](#locations_of_new_york_city_boroughs_in) by running the following
    code in your Jupyter Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Locations of New York City boroughs in a GeoDataFrame](assets/pgda_0703.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-3\. Locations of New York City boroughs in a GeoDataFrame
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can change the size of the figure using the `figsize` argument. In the example
    in [Figure 7-3](#locations_of_new_york_city_boroughs_in), an alpha value of less
    than 1 adjusts the transparency. Edge color can be customized as well. You can
    find details in the [matplotlib documentation](https://oreil.ly/jy6fs).
  prefs: []
  type: TYPE_NORMAL
- en: 'I prefer maps without the visible axes in most instances. To remove the frames,
    simply add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will next explore the data by interactive map, so the area coordinates are
    not necessary. That will generate the image in [Figure 7-4](#locations_of_new_york_city_boroughs_wit).
  prefs: []
  type: TYPE_NORMAL
- en: '![Locations of New York City boroughs without the axis frame](assets/pgda_0704.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-4\. Locations of New York City boroughs without the axis frame
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can request a single borough by calling out a row number. Staten Island
    is in row 0 of the GeoDataFrame you generated a few pages ago. You can access
    a location by its index number using the callable function [`DataFrame.loc`](https://oreil.ly/vSEXO).
    I think of `loc` as an abbreviation for “label of column” since it requires an
    input label, such as “index” or “geometry.” The abbreviation `iloc` is for integer
    location index/integer of column. Substitute the name of the dataframe you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This outputs the image of Staten Island shown in [Figure 7-5](#calling_a_single_borough_using_the_dotl).
  prefs: []
  type: TYPE_NORMAL
- en: '![Calling a single borough using the .loc function](assets/pgda_0705.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-5\. Calling a single borough using the `.loc` function
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can see the boundaries of Staten Island borough in [Figure 7-5](#calling_a_single_borough_using_the_dotl),
    but it would be helpful to have more information now that you know how to access
    the GeoDataFrame. You can also find the area of a borough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To view a borough’s boundary, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the interactive map ([Figure 7-6](#interactive_map_of_the_new_york_city_bo)),
    you can retrieve information by hovering over the borough. The reference distance
    is 0 because Staten Island’s index number is 0\. Clicking on any of the other
    boroughs will tell you the distance from Staten Island. The `gdf.explore` function
    generates an interactive map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Interactive map of the New York City boroughs](assets/pgda_0706.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-6\. Interactive map of the New York City boroughs
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding geospatial capabilities like geometry to pandas dataframes is only the
    beginning. Census data is a treasure trove of open source data, and knowing how
    to use GeoPandas will help you expand your ability to access and ask questions
    of this important dataset. Let’s look at some more census data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with US Census Data: Los Angeles Population Density Map'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you’ll calculate population density by census tract across
    the county of Los Angeles, California.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Be careful when working with Python census packages. If a developer loses interest
    in maintaining them or is overwhelmed with other tasks, your maps and graphics
    will no longer function. I learned that the hard way while writing this chapter.
    The good news is that it reminded me of the fail-safe basics that will always
    be reliable.
  prefs: []
  type: TYPE_NORMAL
- en: If you need a high-quality map of a census data question for professional services
    or research, you can build one in an open source platform like QGIS or by using
    proprietary software like ArcGIS. This example will walk you through the basics.
    When you understand how the Census API is structured and are able to write code
    outside of a fancy Python package, access to one of the most powerful publicly
    available datasets is at your fingertips.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is locating the data on [*census.gov*](https://oreil.ly/k6wuo).
    Data from the 2020 decennial census is becoming available for analysis depending
    on your area of interest. I rely on [Census Reporter](https://oreil.ly/TnwCF)
    for identifying and downloading datasets. Most repositories have the ACS data
    (often called the “long-form census”), which is collected each year from a proportion
    of the nation and bundled yearly or in five-year vintages. The API fetches the
    last five-year ACS vintage by default. This is an easy-to-navigate first stop
    to holistically understand the type of data captured.
  prefs: []
  type: TYPE_NORMAL
- en: Census Reporter has ready-to-use neighborhood data for many metropolitan areas,
    and that is the data you will see in these examples.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more advanced users, [IPUMS](https://www.ipums.org) (formerly the Integrated
    Public Use Microdata Series, now known by its acronym) offers global harmonized
    datasets from census and survey data with supporting documentation. You can use
    this to integrate ACS and decennial census data with merged data from other sources.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Tract and Population Data Through the Census API and FTP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accessing the Census API, through the FTP site or directly, is the foundation
    for being able to work outside the Census GUI. This will help you address bigger
    questions, with data ready for analysis in notebooks or QGIS.
  prefs: []
  type: TYPE_NORMAL
- en: FTP sites provide quick and easy access to large files that can be challenging
    to navigate. If you are working in a MacOS environment, you may need to adjust
    a few settings, but I prefer the reliability and lack of clutter of accessing
    census data through FTP.
  prefs: []
  type: TYPE_NORMAL
- en: Select System Preferences >> Sharing and check Remote Login. Select which users
    to allow access.
  prefs: []
  type: TYPE_NORMAL
- en: Next, navigate to your Finder window and select Go. In the dropdown menu, you
    will see a Connect to Server option ([Figure 7-7](#connecting_to_the_us_census_bureau_ftp)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the US Census Bureau FTP site](assets/pgda_0707.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-7\. Connecting to the US Census Bureau FTP site
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The [FTP site](ftp://ftp2.census.gov/geo/tiger/) is accessible through the link.
    You will be able to scroll through the available files. You can also gain access
    through the [server site](https://oreil.ly/OlwXw). The [summary files](https://oreil.ly/bsd2s)
    are where most of the files of interest are located.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to explore decennial population data from the US census. The geographical
    data included here is from the 2019 ACS one-year survey. The census tables for
    population are from the 2010 census.^([1](ch07.xhtml#ch01fn10)) [Google Colab](https://oreil.ly/ytceM)
    works well for this exercise because the file structure is readily available,
    and once your session is over, the files are removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to download the following packages not already included in Colab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'I learned an important lesson when working with census data: always know the
    version of your packages, in case there are dependencies (or conflicts!). This
    is a helpful practice to add to your notebooks. Use the following code to display
    versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can request census tract information from the FTP server. You are looking
    for shapefiles for the census tracts. These are *.zip* files; note that the files
    you need may be bundled into a larger file. Download the [topologically integrated
    geographic encoding and referencing (TIGER) files](https://oreil.ly/THPPT) for
    California: FIPS 06\. (Federal Information Processing Standards Publications,
    or FIPS, files designate state and county equivalents.) TIGER shapefiles contain
     geographic information but not demographics, so we will add that information
    shortly. The link identifies the US Census Bureau FTP site and denotes geographic
    files from 2019 at the tract level in California:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you identify the file in the FTP, to retrieve it, you need the `!wget`
    call. The wget utility retrieves FTP files from web servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The quotations on the *.zip* file path are not needed for the `!wget` call,
    and the file will unzip into your Colab notebook. You can watch the progress right
    in the notebook as it unzips to 100%. Your output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 7-8](#google_colab_file_structure) shows the files after they are unzipped
    into the folder hierarchy. Navigate to county-level data, using the same steps
    you used to locate the state tracts for California.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Colab file structure](assets/pgda_0708.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-8\. Google Colab file structure
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now that the files are unzipped, we can retrieve the FTP files from the web
    servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can plot the California tracts (`ca_tracts`) using GeoPandas, reading
    the file from your Colab window. Each file has three dots next to the filename.
    Right-click on the dots and select Copy Path to copy the link to your files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The output is shown in [Figure 7-9](#california_census_tracts).
  prefs: []
  type: TYPE_NORMAL
- en: '![California census tracts](assets/pgda_0709.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-9\. California census tracts
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s take a moment to figure out what the table IDs mean, to help you find
    the right data.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Data from the Census API in Your Browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, you’ll need to open the [US Census Bureau website](https://oreil.ly/A3Bwq).
    In the search window, enter `**DP03**`, the table ID for census data ([Figure 7-10](#census_api_data)).
    The ID might seem random, but actually it provides important information. Right
    away, you can tell from the results that the DP indicates a data profile table.
    The [table IDs](https://oreil.ly/Fhioi) describe this table as containing “broad
    social, economic, housing, and demographic information.” The following number
    in the ID, 03, also refers to selected economic characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: '![Census API: data](assets/pgda_0710.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-10\. Census API: data'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Select Enter to see a list of available tables. [Figure 7-11](#data_profile_tables_available_from_the)
    shows the different years and types of ACS surveys available from this search.
    These are called *data profiles*, and we will touch on them again a little later.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data profile tables available from the US Census Bureau](assets/pgda_0711.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-11\. Data profile tables available from the US Census Bureau
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The [Available APIs page on *census.gov*](https://oreil.ly/tJM7C) ([Figure 7-12](#available_apis_and_other_us_census_bure))
    is an important resource that contains publicly available datasets on a wide variety
    of topics. From here, select American Community Survey (ACS).
  prefs: []
  type: TYPE_NORMAL
- en: '![Available APIs and other US Census Bureau datasets](assets/pgda_0712.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-12\. Available APIs and other US Census Bureau datasets
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Under American Community Survey (ACS), select 1-Year Estimates and scroll down
    to 2019\. Scroll down the list of tables until you see the data profiles. Grab
    the first link and paste it into your browser. You are going to edit this link
    and generate a *.csv* file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While you’re on the Available APIs page, you can request a key for running US
    Census Bureau service requests. You won’t need one for this exercise, but I recommend
    requesting one and saving it in a reliable location. Look around at the other
    datasets listed and familiarize yourself with the scope of publicly available
    data. Another useful US Census Bureau resource is the Developer Forum, an active
    community that accepts requests for datasets and consultancy.
  prefs: []
  type: TYPE_NORMAL
- en: Using Data Profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the data profile section, you have the example call that you will edit and
    other details about the data profile tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Call:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*api.census.gov/data/2019/acs/acs1/profile?get=group(DP02)&for=us:1&key=YOUR_KEY_GOES_HERE*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2019 ACS Data Profiles Variables [ [html](https://oreil.ly/G0PZ0) | [xml](https://oreil.ly/Iw9CJ)
    | [json](https://oreil.ly/ruuB4) ]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ACS Technical Documentation](https://oreil.ly/ynqzy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examples and Supported Geography](https://oreil.ly/z8LI5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click the link to gather more information. Your first edits will include substituting
    your table of interest, `DP03`, and removing the placeholder `&key=YOUR_KEY_GOES_HERE`
    from the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '*api.census.gov/data/2019/acs/acs1/profile?get=group(DP03)&for=us:1*'
  prefs: []
  type: TYPE_NORMAL
- en: Then paste the URL into your browser and hit Enter. You will now want to customize
    the geography portion of your URL to include all metropolitan areas. Select Examples
    and Supported Geography from the previous page and scroll down to the metropolitan
    area in the geography hierarchy shown in [Figure 7-13](#geography_hierarchy).
  prefs: []
  type: TYPE_NORMAL
- en: '![Geography hierarchy](assets/pgda_0713.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-13\. Geography hierarchy
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Noticing the * (wildcard option), copy the URL, being sure to delete the `YOUR_KEY_GOES_HERE`
    section once again. The other option will give you data for a single metropolitan
    area: the Akron, Ohio, metro area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are familiar with the URLs and data tables, it takes just a few quick
    edits to get a usable file with the demographic or economic data of interest.
    Modify the URL as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '*https://api.census.gov/data/2019/acs/acs1/profile?get=NAME,DP03_0001E&for=metropolitan%20statistical%20area/micropolitan%20statistical%20area:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now paste it into your browser and hit Enter. The file saves in JSON format
    on my Mac. Instead of saving it as a *.csv* file, which would force you to edit
    it in Microsoft Excel, run the following lines of code to convert it from *.json*
    to *.csv*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will output a formatted *.csv* file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete our project creating population densities, you will return to the
    URL for the 2010 census.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by looking at the reference URL from the 2010 census:'
  prefs: []
  type: TYPE_NORMAL
- en: '*https://api.census.gov/data/2010/dec/sf1?get=LSAD_NAME,P001001&for=tract:*&in=state:06*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you are familiar with Census API calls, you can break the link down
    in Python to calculate the densities and customize the tables. The total population
    in the URL call for the census tracts in California includes table `P001001`;
    `sf1` refers to the decennial census:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you’ve made your request, let’s look at the column names for your
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember the `index` function. You only need the first row (`r`) of data to
    read the headings. You can also create new names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Follow along in the notebook. The following code will select by attributes for
    all Los Angeles County census tracts, remove any nulls, and create a new `geoid`
    column. Run the code and verify that the `geoid` column has indeed been added.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to select attributes from Los Angeles county:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create the new dataframe that includes our new geoid column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'There are 2,346 records in the dataframe. You can also do a quick count of
    records with a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To join the tract-level and county-level files, you will need to select an
    attribute for the join. To refresh your mind as to the choices, check the column
    headings with code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The join will combine column headings `GEOID` and `geoid` from the two datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Double-check the coordinate reference system to make sure they match on both
    the geography file and the census data. ALAND is the area, in square meters. Now
    you can add the block groups to your map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Population density measures how many people reside within a given area, and
    it is normally calculated in square kilometers. You can convert the study area
    to square kilometers right in the code cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, select where you want the center of the map to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can view the map and the legend (generated automatically) showing population
    density within Los Angeles County by running the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The output, your completed map, is shown in [Figure 7-14](#los_angeles_county_population_tracts_by).
  prefs: []
  type: TYPE_NORMAL
- en: '![Los Angeles County population tracts by density](assets/pgda_0714.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-14\. Los Angeles County population tracts by density
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Importing TIGER files from the Census API FTP site guarantees a single source
    of location accuracy at a variety of geographies. Here you’ve looked at census
    tract levels, but a simple edit to a URL call allows you to change to the level
    of counties, congressional districts, or municipalities, for example. Although
    these file types do not include demographic or economic information, you learned
    how to discover data resources and view them in the notebook. The ability to save
    JSON files in *.csv* format also means that you can upload them to a GUI, like
    QGIS, for further exploration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GeoPandas is a powerful open source Python project that lets users integrate
    geographic data with pandas objects and perform spatial operations. It quietly
    works beneath the surface in geospatial calculations. In this chapter, you have
    read and written files, selected data, made maps and plots, tackled interactive
    mapping and geometric manipulations, and explored a few useful packages to include
    in your future geospatial analyses.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch07.xhtml#ch01fn10-marker)) The final data for the 2020 census was not
    yet available as of this writing. When it becomes available, you will only need
    to replace the link in the code cells with an updated link, and you will have
    the updated information.
  prefs: []
  type: TYPE_NORMAL
