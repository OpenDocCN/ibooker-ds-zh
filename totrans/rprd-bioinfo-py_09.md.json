["```py\n$ cd 08_subs/\n$ cp solution1_str_find.py subs.py\n$ ./subs.py -h\nusage: subs.py [-h] seq subseq\n\nFind subsequences\n\npositional arguments:\n  seq         Sequence\n  subseq      subsequence\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ ./subs.py GATATATGCATATACTT ATAT\n2 4 10\n```", "```py\n$ new.py -fp 'Find subsequences' subs.py\nDone, see new script \"subs.py\".\n```", "```py\nclass Args(NamedTuple): ![1](assets/1.png)\n    \"\"\" Command-line arguments \"\"\"\n    seq: str\n    subseq: str\n\ndef get_args() -> Args: ![2](assets/2.png)\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Find subsequences',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('seq', metavar='seq', help='Sequence')\n\n    parser.add_argument('subseq', metavar='subseq', help='subsequence')\n\n    args = parser.parse_args()\n\n    return Args(args.seq, args.subseq) ![3](assets/3.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(f'sequence = {args.seq}')\n    print(f'subsequence = {args.subseq}')\n```", "```py\n$ ./subs.py GATATATGCATATACTT ATAT\nsequence = GATATATGCATATACTT\nsubsequence = ATAT\n```", "```py\n>>> seq = 'GATATATGCATATACTT'\n>>> subseq = 'ATAT'\n```", "```py\n>>> subseq in seq\nTrue\n```", "```py\n>>> seq.find(subseq)\n1\n```", "```py\n>>> help(str.find)\nfind(...)\n    S.find(sub[, start[, end]]) -> int\n\n    Return the lowest index in S where substring sub is found,\n    such that sub is contained within S[start:end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n```", "```py\n>>> seq.find(subseq, 2)\n3\n```", "```py\n>>> seq.find(subseq, 4)\n9\n```", "```py\n>>> seq.find(subseq, 10)\n-1\n```", "```py\n>>> if subseq in seq:\n...     seq.index(subseq)\n...\n1\n```", "```py\n>>> if subseq in seq[2:]:\n...     seq.index(subseq[2:])\n...\n1\n```", "```py\n>>> if subseq in seq[2:]:\n...     seq.index(subseq, 2)\n...\n3\n```", "```py\n>>> import re\n>>> re.findall(subseq, seq)\n['ATAT', 'ATAT']\n```", "```py\n>>> list(re.finditer(subseq, seq))\n[<re.Match object; span=(1, 5), match='ATAT'>,\n <re.Match object; span=(9, 13), match='ATAT'>]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    last = 0 ![1](assets/1.png)\n    found = [] ![2](assets/2.png)\n    while True: ![3](assets/3.png)\n        pos = args.seq.find(args.subseq, last) ![4](assets/4.png)\n        if pos == -1: ![5](assets/5.png)\n            break\n        found.append(pos + 1) ![6](assets/6.png)\n        last = pos + 1 ![7](assets/7.png)\n\n    print(*found) ![8](assets/8.png)\n```", "```py\n>>> last = 0\n```", "```py\n>>> seq = 'GATATATGCATATACTT'\n>>> subseq = 'ATAT'\n>>> pos = seq.find(subseq, last)\n>>> pos\n1\n```", "```py\n>>> last = pos + 1\n>>> pos = seq.find(subseq, last)\n>>> pos\n3\n```", "```py\n>>> last = pos + 1\n>>> pos = seq.find(subseq, last)\n>>> pos\n9\n```", "```py\n>>> last = pos + 1\n>>> pos = seq.find(subseq, last)\n>>> pos\n-1\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seq, subseq = args.seq, args.subseq ![1](assets/1.png)\n    found = []\n    last = 0\n    while subseq in seq[last:]: ![2](assets/2.png)\n        last = seq.index(subseq, last) + 1 ![3](assets/3.png)\n        found.append(last) ![4](assets/4.png)\n\n    print(' '.join(map(str, found))) ![5](assets/5.png)\n```", "```py\n>>> last = 0\n>>> if subseq in seq[last:]:\n...     last = seq.index(subseq, last) + 1\n...\n>>> last\n2\n```", "```py\n>>> last = 0\n>>> found = []\n>>> while subseq in seq[last:]:\n...     last = seq.index(subseq, last) + 1\n...     found.append(last)\n...\n>>> found\n[2, 4, 10]\n```", "```py\n>>> ' '.join(found)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: sequence item 0: expected str instance, int found\n```", "```py\n>>> ' '.join([str(n) for n in found])\n'2 4 10'\n```", "```py\n>>> ' '.join(map(lambda n: str(n), found))\n'2 4 10'\n```", "```py\n>>> ' '.join(map(str, found))\n'2 4 10'\n```", "```py\n>>> r = range(len(seq) - len(subseq))\n>>> [n for n in r]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```", "```py\n>>> [seq.find(subseq, n) for n in r]\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9, -1, -1, -1]\n```", "```py\n>>> list(filter(lambda n: n >= 0, [seq.find(subseq, n) for n in r]))\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9]\n```", "```py\n>>> list(filter(lambda n: 0 <= n, [seq.find(subseq, n) for n in r]))\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9]\n```", "```py\n>>> from functools import partial\n>>> import operator\n>>> ok = partial(operator.le, 0)\n>>> list(filter(ok, [seq.find(subseq, n) for n in r]))\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9]\n```", "```py\n>>> list(filter(ok, map(lambda n: seq.find(subseq, n), r)))\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9]\n```", "```py\n>>> find = partial(seq.find, subseq)\n>>> list(filter(ok, map(find, r)))\n[1, 1, 3, 3, 9, 9, 9, 9, 9, 9]\n```", "```py\n>>> set(filter(ok, map(find, r)))\n{1, 3, 9}\n```", "```py\n>>> add1 = partial(operator.add, 1)\n>>> list(map(add1, set(filter(ok, map(find, r)))))\n[2, 4, 10]\n```", "```py\n>>> sorted(map(add1, set(filter(ok, map(find, r)))))\n[2, 4, 10]\n```", "```py\n>>> print(sorted(map(add1, set(filter(ok, map(find, r))))))\n[2, 4, 10]\n```", "```py\n>>> print(*sorted(map(add1, set(filter(ok, map(find, r))))))\n2 4 10\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seq, subseq = args.seq, args.subseq ![1](assets/1.png)\n    r = list(range(len(seq) - len(subseq))) ![2](assets/2.png)\n    ok = partial(operator.le, 0) ![3](assets/3.png)\n    find = partial(seq.find, subseq) ![4](assets/4.png)\n    add1 = partial(operator.add, 1) ![5](assets/5.png)\n    print(*sorted(map(add1, set(filter(ok, map(find, r)))))) ![6](assets/6.png)\n```", "```py\n>>> seq = 'GATATATGCATATACTT'\n>>> subseq = 'ATAT'\n>>> k = len(subseq)\n>>> k\n4\n```", "```py\n>>> kmers = [seq[i:i + k] for i in range(len(seq) - k + 1)]\n>>> kmers\n['GATA', 'ATAT', 'TATA', 'ATAT', 'TATG', 'ATGC', 'TGCA', 'GCAT', 'CATA',\n 'ATAT', 'TATA', 'ATAC', 'TACT', 'ACTT']\n```", "```py\n>>> list(filter(lambda s: s == subseq, kmers))\n['ATAT', 'ATAT', 'ATAT']\n```", "```py\n>>> kmers = list(enumerate([seq[i:i + k] for i in range(len(seq) - k + 1)]))\n>>> kmers[:4]\n[(0, 'GATA'), (1, 'ATAT'), (2, 'TATA'), (3, 'ATAT')]\n```", "```py\n>>> list(filter(lambda t: t[1] == subseq, kmers))\n[(1, 'ATAT'), (3, 'ATAT'), (9, 'ATAT')]\n```", "```py\n>>> list(map(lambda t: t[0] if t[1] == subseq else None, kmers))\n[None, 1, None, 3, None, None, None, None, None, 9, None, None, None, None]\n```", "```py\n>>> from itertools import starmap\n>>> list(starmap(lambda i, kmer: i + 1 if kmer == subseq else None, kmers))\n[None, 2, None, 4, None, None, None, None, None, 10, None, None, None, None]\n```", "```py\n>>> f = lambda i, kmer: i + 1 if kmer == subseq else None\n>>> list(filter(None, starmap(f, kmers)))\n[2, 4, 10]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seq, subseq = args.seq, args.subseq\n    k = len(subseq) ![1](assets/1.png)\n    kmers = [seq[i:i + k] for i in range(len(seq) - k + 1)] ![2](assets/2.png)\n    found = [i + 1 for i, kmer in enumerate(kmers) if kmer == subseq] ![3](assets/3.png)\n    print(*found) ![4](assets/4.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seq, subseq = args.seq, args.subseq\n    k = len(subseq)\n    kmers = enumerate(seq[i:i + k] for i in range(len(seq) - k + 1)) ![1](assets/1.png)\n    found: Iterator[int] = filter( ![2](assets/2.png)\n        None, starmap(lambda i, kmer: i + 1 if kmer == subseq else None, kmers))\n    print(*found) ![3](assets/3.png)\n```", "```py\n>>> import re\n>>> list(re.finditer(subseq, seq))\n[<re.Match object; span=(1, 5), match='ATAT'>,\n <re.Match object; span=(9, 13), match='ATAT'>]\n```", "```py\n>>> list(re.finditer('(?=(ATAT))', 'GATATATGCATATACTT'))\n[<re.Match object; span=(1, 1), match=''>,\n <re.Match object; span=(3, 3), match=''>,\n <re.Match object; span=(9, 9), match=''>]\n```", "```py\n>>> [match.start() + 1 for match in re.finditer(f'(?=({subseq}))', seq)]\n[2, 4, 10]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seq, subseq = args.seq, args.subseq\n    print(*[m.start() + 1 for m in re.finditer(f'(?=({subseq}))', seq)])\n```", "```py\n$ hyperfine -m 1000 -L prg ./solution1_str_find.py,./solution2_str_index.py,\\\n./solution3_functional.py,./solution4_kmers_functional.py,\\\n./solution4_kmers_imperative.py,./solution5_re.py \\\n'{prg} GATATATGCATATACTT ATAT' --prepare 'rm -rf __pycache__'\n...\nSummary\n  './solution2_str_index.py GATATATGCATATACTT ATAT' ran\n    1.01 ± 0.11 times faster than\n        './solution4_kmers_imperative.py GATATATGCATATACTT ATAT'\n    1.02 ± 0.14 times faster than\n        './solution5_re.py GATATATGCATATACTT ATAT'\n    1.02 ± 0.14 times faster than\n        './solution3_functional.py GATATATGCATATACTT ATAT'\n    1.03 ± 0.13 times faster than\n        './solution4_kmers_functional.py GATATATGCATATACTT ATAT'\n    1.09 ± 0.18 times faster than\n        './solution1_str_find.py GATATATGCATATACTT ATAT'\n```"]