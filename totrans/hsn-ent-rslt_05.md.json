["```py\nurl = \"https://en.wikipedia.org/wiki/\n       List_of_MPs_elected_in_the_2019_United_Kingdom_general_election\"\n\nwebsite_page = requests.get(url).textsoup = \n    BeautifulSoup(website_page,'html.parser')\ntables = soup.find_all('table')\n\nfor table in tables:\n   if 'Member returned' in table.text:\n      headers = [header.text.strip() for header in table.find_all('th')]\n      headers = headers[:5]\n      dfrows = []\n      table_rows = table.find_all('tr')\n      for row in table_rows:\n         td = row.find_all('td')\n         dfrow = [row.text for row in td if row.text!='\\n']\n         tdlink = row.find_all(\"td\", {\"data-sort-value\" : True})\n         for element in tdlink:\n             for link in element.select(\"a[title]\"):\n                 urltail = link['href']\n                 url = f'https://en.wikipedia.org{urltail}' \n      dfrow.append(url)\n      dfrows.append(dfrow)\n   headers.append('Wikilink')\ndf_w = pd.DataFrame()\n```", "```py\ndef get_bday(url):\n   wiki_page = requests.get(url).text\n   soup = BeautifulSoup(wiki_page,'html.parser')\n   bday = ''\n   bdayelement = soup.select_one(\"span[class='bday']\")\n   if bdayelement is not None:\n      bday = bdayelement.text\n      return(bday)\n\ndf_w['Birthday'] = df_w.apply(lambda x: get_bday(x.Wikilink), axis=1)\n```", "```py\nurl = \"http://download.companieshouse.gov.uk/en_pscdata.html\"\n\n>df_psctotal = pd.DataFrame()\nwith requests.Session() as req:\n   r = req.get(url)\n   soup = BeautifulSoup(r.content, 'html.parser')\n   snapshots = [f\"{url[:38]}{item['href']}\" for item in soup.select(\n      \"a[href*='psc-snapshot']\")]\n   for snapshot in snapshots:\n      print(snapshot)\n      response = requests.get(snapshot).content zipsnapshot =\n         zipfile.ZipFile(io.BytesIO(response))\n      tempfile = zipsnapshot.extract(zipsnapshot.namelist()[0])\n      df_psc = pd.json_normalize(pd.Series(open(tempfile,\n         encoding=\"utf8\").readlines()).apply(json.loads))\n\n      must_cols =  ['company_number',\n                    'data.name_elements.surname',\n                    'data.name_elements.middle_name',\n                    'data.name_elements.forename',\n                    'data.date_of_birth.month',\n                    'data.date_of_birth.year',\n                    'data.name_elements.title',\n                    'data.nationality']  \n       all_cols =list(set(df_psc.columns).union(must_cols))\n\n>      df_psc=df_psc.reindex(columns=sorted(all_cols))\n      df_psc = df_psc.dropna(subset=['company_number',\n                    'data.name_elements.surname',\n                    'data.name_elements.forename',\n                    'data.date_of_birth.month',\n                    'data.date_of_birth.year'])\n      df_psc = df_psc[must_cols]\n      df_psctotal = pd.concat([df_psctotal, df_psc],\n         ignore_index=True)\n```", "```py\ndf_w = df_w.dropna()\ndf_w['Year'] =\n   pd.to_datetime(df_w['Birthday']).dt.year.astype('int64')\ndf_w['Month'] =\n   pd.to_datetime(df_w['Birthday']).dt.month.astype('int64')\n\ndf_w = df_w.rename(columns={ 'Member returned' : 'Fullname'})\ndf_w['Fullname'] = df_w['Fullname'].str.rstrip(\"\\n\")\ndf_w['Fullname'] = df_w['Fullname'].str.lstrip(\"\\n\")\ndf_w['Firstname'] = df_w['Fullname'].str.split().str[0]\ndf_w['Lastname'] = df_w['Fullname'].astype(str).apply(lambda x:\n   ' '.join(x.split()[1:]))\n\ndf_w['unique_id'] = df_w.index\ndf_w[\"company_number\"] = np.nan\n\ndf_w=df_w[['Firstname','Lastname','Month','Year','unique_id',\n   'company_number']]\n```", "```py\ndf_psc = df_psc.dropna(subset=['data.date_of_birth.year',\n                                'data.date_of_birth.month'])\n\ndf_psc['Year'] = df_psc['data.date_of_birth.year'].astype('int64')\ndf_psc['Month'] = df_psc['data.date_of_birth.month'].astype('int64')\ndf_psc['Firstname']=df_psc['data.name_elements.forename']\ndf_psc['Lastname']=df_psc['data.name_elements.surname']\ndf_psc['unique_id'] = df_psc.index\n\ndf_psc = df_psc[['Lastname','Firstname','company_number',\n   'Year','Month','unique_id']]\n```", "```py\ndf_mp = df_w.merge(df_psc, on=['Year','Month'],\n    suffixes=('_w','_psc'))\n\nlen(df_mp)\n11135080\n```", "```py\ndf_result = df_w.merge(df_psc, on= ['Lastname','Firstname','Year','Month'], \n    suffixes=('_w', '_psc'))\n\ndf_result\n```", "```py\nfrom splink.duckdb.linker import DuckDBLinker\nfrom splink.duckdb import comparison_library as cl\nsettings = {\n   \"link_type\": \"link_only\",\n   \"blocking_rules_to_generate_predictions\":\n      [\"l.Year = r.Year and l.Month = r.Month\"],\n   \"comparisons\": [\n      cl.jaro_winkler_at_thresholds(\"Firstname\", [0.9]),\n      cl.jaro_winkler_at_thresholds(\"Lastname\", [0.9]),\n      cl.exact_match(\"Month\"),\n      cl.exact_match(\"Year\", term_frequency_adjustments=True),\n      ],\n    \"additional_columns_to_retain\": [\"company_number\"]\n}\n```", "```py\nlinker = DuckDBLinker([df_w, df_psc], settings,\n   input_table_aliases = [\"df_w\", \"df_psc\"])\nlinker.profile_columns([\"Firstname\",\"Lastname\",\"Month\",\"Year\"],\n   top_n=10, bottom_n=5)\n```", "```py\nterm_frequency_adjustments=True\n```", "```py\nlinker.estimate_u_using_random_sampling(max_pairs=1e7)\n```", "```py\nlinker.estimate_parameters_using_expectation_maximisation\n   (\"l.Lastname = r.Lastname and l.Month = r.Month\",\n      fix_u_probabilities=False)\nlinker.estimate_parameters_using_expectation_maximisation\n   (\"l.Firstname = r.Firstname and l.Year = r.Year\",\n      fix_u_probabilities=False)\n```", "```py\nlinker.match_weights_chart()\n```", "```py\nlinker.m_u_parameters_chart()\n```", "```py\nresults = linker.predict(threshold_match_probability=0.99)\npres = results.as_pandas_dataframe()\n```", "```py\npres = pres.rename(columns={\"Firstname_l\": \"Firstname_psc\",\n                             \"Lastname_l\": \"Lastname_psc\",\n                             \"Firstname_r\":\"Firstname_w\",\n                             \"Lastname_r\":\"Lastname_w\",\n                             \"company_number_l\":\"company_number\"})\npres = pres[['match_weight','match_probability',\n             'Firstname_psc','Firstname_w',\n             'Lastname_psc','Lastname_w','company_number']]\n```", "```py\npres[(pres['Lastname_psc']!=pres['Lastname_w']) |\n      (pres['Firstname_psc']!=pres['Firstname_w'])]\n```"]