["```py\nimport nbviz from './nbviz_core.mjs'\n\nlet chartHolder = d3.select('#nobel-time');\n\nlet margin = {top:20, right:20, bottom:30, left:40};\nlet boundingRect = chartHolder.node()\n  .getBoundingClientRect();\nlet width = boundingRect.width - margin.left\n- margin.right,\nheight = boundingRect.height - margin.top - margin.bottom;\n\nlet svg = chartHolder.append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top\n        + margin.bottom)\n        .append('g')\n          .attr(\"transform\",\n                  \"translate(\" + margin.left + \",\"\n                  + margin.top + \")\");\n    // ...\n})\n```", "```py\nlet xScale = d3.scaleBand()\n  .range([0, width])\n  .padding(0.1) ![1](assets/1.png)\n  .domain(d3.range(1901, 2015))\n\nlet yScale = d3.scaleBand()\n  .range([height, 0]).domain(d3.range(15)) ![2](assets/2.png)\n```", "```py\nlet xAxis = d3.axisBottom()\n    .scale(xScale)\n    .tickValues(\n      xScale.domain().filter(function (d, i) {\n        return !(d % 10) ![1](assets/1.png)\n      })\n    )\n```", "```py\nsvg.append(\"g\") // group to hold the axis\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis) ![1](assets/1.png)\n    .selectAll(\"text\") ![2](assets/2.png)\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-65)\");\n```", "```py\nlet catLabels = chartHolder.select('svg').append('g')\n        .attr('transform', \"translate(10, 10)\")\n        .attr('class', 'labels')\n        .selectAll('label').data(nbviz.CATEGORIES) ![1](assets/1.png)\n        .join('g')\n        .attr('transform', function(d, i) {\n            return \"translate(0,\" + i * 10 + \")\"; ![2](assets/2.png)\n        });\n```", "```py\ncatLabels.append('circle')\n    .attr('fill', (nbviz.categoryFill)) ![1](assets/1.png)\n    .attr('r', xScale.bandwidth()/2); ![2](assets/2.png)\n\ncatLabels.append('text')\n    .text(d => d)\n    .attr('dy', '0.4em')\n    .attr('x', 10);\n```", "```py\n// nbviz_core.js nbviz.CATEGORIES = [\n    \"Physiology or Medicine\", \"Peace\", \"Physics\",\n    \"Literature\", \"Chemistry\", \"Economics\"];\n\nnbviz.categoryFill = function(category){\n    var i = nbviz.CATEGORIES.indexOf(category);\n    return d3.schemeCategory10[i]; ![1](assets/1.png)\n};\n```", "```py\n[\n {\"year\":1901,\"name\":\"Wilhelm Conrad R\\\\u00f6ntgen\",...},\n {\"year\":1901,\"name\":\"Jacobus Henricus van \\'t Hoff\",...},\n {\"year\":1901,\"name\":\"Sully Prudhomme\",...},\n {\"year\":1901,\"name\":\"Fr\\\\u00e9d\\\\u00e9ric Passy\",...},\n {\"year\":1901,\"name\":\"Henry Dunant\",...},\n {\"year\":1901,\"name\":\"Emil Adolf von Behring\",...},\n {\"year\":1902,\"name\":\"Theodor Mommsen\",...},\n {\"year\":1902,\"name\":\"Hermann Emil Fischer\",...},\n ...\n];\n```", "```py\n[\n {\"key\":\"1901\",\n  \"values\":[\n   {\"year\":1901,\"name\":\"Wilhelm Conrad R\\\\u00f6ntgen\",...},\n   {\"year\":1901,\"name\":\"Jacobus Henricus van \\'t Hoff\",...},\n   {\"year\":1901,\"name\":\"Sully Prudhomme\",...},\n   {\"year\":1901,\"name\":\"Fr\\\\u00e9d\\\\u00e9ric Passy\",...},\n   {\"year\":1901,\"name\":\"Henry Dunant\",...},\n   {\"year\":1901,\"name\":\"Emil Adolf von Behring\",...}\n  ]\n },\n {\"key\":\"1902\",\n  \"values\":[\n   {\"year\":1902,\"name\":\"Theodor Mommsen\",...},\n   {\"year\":1902,\"name\":\"Hermann Emil Fischer\",...},\n   ...\n  ]\n },\n ...\n];\n```", "```py\n let nestDataByYear = function (entries) {\n    let yearGroups = d3.group(entries, d => d.year) ![1](assets/1.png)\n\t// ...\n  }\n```", "```py\n[ // yearGroups\n  {1913: [{year: 1913, ...}, {year: 1913, ...}, ...]},\n  {1921: [{year: 1921, ...}, {year: 1921, ...}, ...]},\n  ...\n]\n```", "```py\nlet keyValues = Array.from(yearGroups, [key, values] => {key, values})\n```", "```py\nnbviz.nestDataByYear = function (entries) {\n  let yearGroups = d3.group(entries, (d) => d.year);\n  let keyValues = Array.from(yearGroups, ([key, values]) => {\n    let year = key;\n    let prizes = values;\n    prizes = prizes.sort(\n      (p1, p2) => (p1.category > p2.category ? 1 : -1)); ![1](assets/1.png)\n    return { key: year, values: prizes };\n  });\n  return keyValues;\n};\n```", "```py\nnbviz.updateTimeChart = function (data) {\n\n  let years = svg.selectAll('.year').data(data, d => d.key) ![1](assets/1.png)\n\n  years\n    .join('g') ![2](assets/2.png)\n    .classed('year', true)\n    .attr('name', d => d.key)\n    .attr('transform', function (year) {\n      return 'translate(' + xScale(+year.key) + ',0)'\n    })\n    //... }\n```", "```py\nlet winners = svg\n      .selectAll('.year')\n      .selectAll('circle') ![1](assets/1.png)\n      .data(\n        d => d.values, ![2](assets/2.png)\n        d => d.name    ![3](assets/3.png)\n      );\n```", "```py\nwinners\n    .join((enter) => {\n      return enter.append('circle') ![1](assets/1.png)\n               .attr('cy', height)\n    })\n    .attr('fill', function (d) {\n      return nbviz.categoryFill(d.category) ![2](assets/2.png)\n    })\n    .attr('cx', xScale.bandwidth() / 2) ![3](assets/3.png)\n    .attr('r', xScale.bandwidth() / 2)\n    .attr(\"cy\", (d, i) => yScale(i));\n```", "```py\nwinners\n   .join((enter) => {\n     return enter.append('circle').attr('cy', height) ![1](assets/1.png)\n   })\n   .attr('fill', function (d) {\n     return nbviz.categoryFill(d.category)\n   })\n   .attr('cx', xScale.bandwidth() / 2)\n   .attr('r', xScale.bandwidth() / 2)\n   .transition() ![2](assets/2.png)\n   .duration(2000)\n   .attr(\"cy\", (d, i) => yScale(i));\n```", "```py\nnbviz.callbacks.push(() => { ![1](assets/1.png)\n  let data = nbviz.nestDataByYear(nbviz.countryDim\\\n              .top(Infinity))\n  updateTimeChart(data)\n})\n```"]