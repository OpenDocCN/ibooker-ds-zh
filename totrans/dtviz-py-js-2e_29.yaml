- en: Appendix A. D3’s enter/exit Pattern
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. D3 的进入/退出模式
- en: As shown in [“Updating the DOM with Data”](ch17.xhtml#d3bar_update), D3 now
    has a more user-friendly `join` method to replace the old implementation of data-joining
    using patterns based around the `enter`, `exit`, and `remove` methods. The `join`
    method is a great addition to D3, but there are thousands of examples online using
    the old data-joining patterns. In order to use/convert these it helps to know
    a little bit more about what’s going on under the hood when D3 joins data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [“使用数据更新 DOM”](ch17.xhtml#d3bar_update) 所示，D3 现在有了一个更用户友好的 `join` 方法，来替代基于
    `enter`、`exit` 和 `remove` 方法的旧数据连接实现模式。`join` 方法是 D3 的一个很好的补充，但在线上有成千上万的使用旧数据连接模式的示例。为了使用/转换这些示例，了解
    D3 连接数据时底层发生的事情会有所帮助。
- en: 'In order to demonstrate D3’s data joining, let’s look under the hood when D3
    joins data. Let’s start with our bar-less chart, with SVG canvas and chart group
    in place:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 D3 的数据连接，让我们深入了解当 D3 连接数据时的底层原理。让我们从我们没有条形图的图表开始，SVG 画布和图表组都已准备好：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In order to join data with D3, we first need some data in the right form. Generally
    that will be an array of objects, like our bar chart’s `nobelData`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 D3 连接数据，我们首先需要以正确的形式准备一些数据。通常这将是一个对象数组，就像我们条形图的 `nobelData`：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A D3 data-join is made in two stages. First, we add the data to be joined using
    the `data` method then we perform the join using the `join` method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: D3 数据连接分为两个阶段。首先，我们使用 `data` 方法添加要连接的数据，然后使用 `join` 方法执行连接。
- en: To add our Nobel data to a group of bars, we do the following. First, we select
    a container for our bars, in this case our SVG group of class `chart`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的诺贝尔数据添加到一组条形图中，我们需要做以下操作。首先，选择一个容器来放置我们的条形图，这里是我们的 `chart` 类 SVG 组。
- en: 'Then we define the container, in this case a CSS selector of class `bar`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义容器，这里是一个类为 `bar` 的 CSS 选择器：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now come to a slightly counterintuitive aspect of D3’s `data` method. Our
    first `select` returned the `chart` group in our `nobel-bar` SVG canvas, but the
    second `selectAll` returned all elements with class `bars`, of which there are
    none. If there are no bars, what exactly are we binding the data to? The answer
    is that behind the scenes, D3 is keeping the books and that the `bars` object
    returned by `data` knows which DOM elements have been bound to the `nobelData`
    and, just as crucially, which haven’t. We’ll now see how to make use of this fact
    using the fundamental `enter` method.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下 D3 的 `data` 方法稍微反直觉的一面。我们的第一个 `select` 返回了我们 `nobel-bar` SVG 画布中的 `chart`
    组，但第二个 `selectAll` 返回了所有类为 `bars` 的元素，但实际上并没有。如果没有条形图，我们到底将数据绑定到什么？答案是，在幕后，D3
    会记录哪些 DOM 元素已绑定到 `nobelData`，以及哪些没有。接下来，我们将看看如何利用这一点，使用基本的 `enter` 方法。
- en: The enter Method
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入方法
- en: D3’s [`enter` method](https://oreil.ly/veBF9) (and its sibling, `exit`) is both
    the basis for D3’s superb power and expressiveness and also the root of much confusion.
    Although, as mentioned, the newish `join` method simplifies things, it’s worth
    coming to grips with `enter` if you really want your D3 skills to grow. Let’s
    introduce it now, with a very simple and slow demonstration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的 [`enter` 方法](https://oreil.ly/veBF9)（以及其姊妹 `exit`）既是 D3 强大功能和表现力的基础，也是许多混淆的根源。尽管如前所述，新的
    `join` 方法简化了事务，但如果您真的希望提高 D3 技能，了解 `enter` 方法也是值得的。现在让我们通过一个非常简单和缓慢的演示来介绍它。
- en: 'We’ll start with a canonically simple little demonstration, adding a bar rectangle
    for each member of our Nobel Prize data. We’ll use the first six Nobel Prize–winning
    countries as our bound data:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个经典简单的小示例开始，为我们的诺贝尔奖数据的每个成员添加一个条形矩形。我们将使用前六个诺贝尔奖获奖国家作为我们的绑定数据：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With our dataset in hand, let’s first use D3 to grab the chart group, saving
    it to an `svg` variable. We’ll use that to make a selection of all elements of
    class `bar` (none at the moment):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有了我们的数据集，让我们先使用 D3 抓取图表组，并将其保存到一个 `svg` 变量中。我们将用它来选择目前不存在的 `bar` 类元素：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now although the `bars` selection is empty, behind the scenes D3 has kept a
    record of the data we’ve just bound to it. At this point, we can use that fact
    and the `enter` method to create a few bars with our data. Calling `enter` on
    our `bars` selection returns a subselection of all the data (`nobelData`, in this
    case) that was not bound to a bar. Since there were no bars in the original selection
    (our chart being empty), all the data is unbound, so `enter` returns an enter
    election (essentially placeholder nodes for all the unbound data) of size six:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`bars`选择为空，但在幕后，D3已经记录了我们刚刚绑定到它的数据。此时，我们可以利用这一事实和`enter`方法来使用我们的数据创建一些条形图。在我们的`bars`选择上调用`enter`返回了所有未绑定到条形图的数据的子选择（在本例中为`nobelData`），因为原始选择中没有条形图（我们的图表为空），所有数据都是未绑定的，因此`enter`返回一个大小为六的输入选择（基本上是所有未绑定数据的占位符节点）：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can use the placeholder nodes in `bars` to create some DOM elements—in our
    case, a few bars. We won’t bother with trying to put them the right way up (the
    y-axis being down from the top of the screen by convention), but we will use the
    data values and indices to set the position and height of the bars:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`bars`中的占位符节点创建一些DOM元素——在我们的情况下，一些条形图。我们不会费心试图将它们放置正确（根据惯例，y轴从屏幕顶部向下），但我们会使用数据值和索引来设置条形图的位置和高度：
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_d3__8217_s_enter_exit_pattern_CO1-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_d3__8217_s_enter_exit_pattern_CO1-1)'
- en: 'If you provide a callback function to D3’s setter methods (`attr`, `style`,
    etc.), then the first and second arguments provided are the value of the individual
    data object (e.g., `d == {key: ''United States'', value: 200}`) and its index
    (`i`).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您向D3的设置器方法（`attr`、`style`等）提供回调函数，则提供的第一个和第二个参数是个体数据对象的值（例如，`d == {key: ''United
    States'', value: 200}`）和它的索引（`i`）。'
- en: Using the callback functions to set height and the x position (allowing a padding
    of 2 px) of the bars and calling `append` on our six node selection produces [Figure A-1](#d3bar_enter_full).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用回调函数设置条形图的高度和x位置（允许2像素的填充），并在我们的六个节点选择上调用`append`将产生[图 A-1](#d3bar_enter_full)。
- en: '![dpj2 aa01](assets/dpj2_aa01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 aa01](assets/dpj2_aa01.png)'
- en: Figure A-1\. Producing some bars with D3’s `enter` method
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-1\. 使用D3的`enter`方法生成一些条形图
- en: I’d encourage you generally to use Chrome’s (or equivalent) Elements tab to
    investigate the HTML your D3 is producing. Investigating our mini–bar chart with
    Elements shows [Figure A-2](#d3bar_enter_elements).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励您通常使用Chrome（或等效）的元素选项卡来调查您的D3生成的HTML。使用元素选项卡查看我们的小型条形图显示[图 A-2](#d3bar_enter_elements)。
- en: '![dpj2 aa02](assets/dpj2_aa02.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 aa02](assets/dpj2_aa02.png)'
- en: Figure A-2\. Using the Elements tab to see the HTML generated by `enter` and
    `append`
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-2\. 使用元素选项卡查看`enter`和`append`生成的HTML
- en: So we’ve seen what happens when we call `enter` on an empty selection. But what
    happens when we already have a few bars, which we would have in an interactive
    chart with a user-driven, changing dataset?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经看到在空选择上调用`enter`时会发生什么。但是，在具有用户驱动的变化数据集的交互式图表中，当我们已经有一些条形图时会发生什么？
- en: 'Let’s add a couple of `bar` class rectangles to our starting HTML:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的起始HTML中添加一些`bar`类矩形：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we now perform the same data binding and entering as before, on calling
    `data` on our selection, the two placeholder rectangles bind to the first two
    members of our `nobelData` array (i.e., `[{key: ''United States'', value: 200},
    {key: ''United Kingdom'', value:80}]`). This means that `enter`, which returns
    only unbound data placeholders, now returns only four placeholders, associated
    with the last four elements of the `nobelData` array:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们现在执行与之前相同的数据绑定和输入，在我们的选择上调用`data`，两个占位矩形绑定到我们`nobelData`数组的前两个成员（即`[{key:
    ''United States'', value: 200}, {key: ''United Kingdom'', value:80}]`）。这意味着`enter`现在仅返回四个占位符，与`nobelData`数组的最后四个元素关联：'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we now call `append` on the entered `bars`, as before, we get the result
    shown in [Figure A-3](#d3bar_enter_part), showing the last four bars (note that
    they preserve their index `i`, used to set their x positions) rendered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在在输入的`bars`上调用`append`，我们将得到[图 A-3](#d3bar_enter_part)中显示的结果，显示最后四个条形图（请注意它们保留了它们的索引`i`，用于设置它们的x位置）。
- en: '![dpj2 aa03](assets/dpj2_aa03.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 aa03](assets/dpj2_aa03.png)'
- en: Figure A-3\. Calling `enter` and `append` with existing bars
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-3\. 在现有条形图上调用`enter`和`append`
- en: '[Figure A-4](#d3bar_enter_elements_part) shows the HTML generated for the last
    four bars. As we’ll see, the data from the first two elements is now bound to
    the two dummy nodes we added to the initial bar group. We just haven’t used it
    yet to adjust those rectangles’ attributes. Updating old bars with new data is
    the one of the key elements of the update pattern we’ll see shortly.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 A-4](#d3bar_enter_elements_part) 显示了最后四个条形图生成的 HTML。正如我们将看到的，前两个元素的数据现在绑定到我们添加到初始条形图组的两个虚拟节点上。我们只是还没有使用它来调整那些矩形的属性。使用新数据更新旧条形图是我们即将看到的更新模式的关键元素之一。'
- en: '![dpj2 aa04](assets/dpj2_aa04.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 aa04](assets/dpj2_aa04.png)'
- en: Figure A-4\. Using the Elements tab to see the HTML generated by `enter` and
    `append` on a partial selection
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-4\. 使用元素标签查看由`enter`和`append`在部分选择上生成的 HTML
- en: To emphasize, coming to grips with `enter` and `exit` (and `remove`) is vital
    to healthy progress with D3\. Play around a bit, inspect the HTML you’re producing,
    enter a bit of data, and generally get a bit messy, learning the ins and outs.
    Let’s have a little look at accessing the bound data before moving on to the D3’s
    nexus, the update pattern.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 强调一下，理解`enter`和`exit`（以及`remove`）对于与 D3 健康进展至关重要。多玩一下，检查你生成的 HTML，输入一些数据，并且通常变得有些混乱，学习其方方面面。在进入
    D3 的核心——更新模式——之前，让我们先看一看访问绑定数据。
- en: Accessing the Bound Data
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问绑定的数据
- en: A good way to see what’s happening to the DOM is to use your browser’s HTML
    inspector and console to track D3’s changes. In [Figure A-1](#d3bar_enter_full),
    we use Chrome’s console to look at the `rect` element representing the first bar
    in [Figure A-3](#d3bar_enter_part), before data has been bound and after the `nobelData`
    has been bound to the bars using the `data` method. As you can see, D3 has added
    a `__data__` object to the `rect` element with which to store its bound data—in
    this case, the first member of our `nobelData` list. The `__data__` object is
    used by D3’s internal bookkeeping and, fundamentally, the data in it is made available
    to functions supplied to update methods such as `attr`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 DOM 变化的好方法是使用浏览器的 HTML 检查器和控制台跟踪 D3 的变化。在 [图 A-1](#d3bar_enter_full) 中，我们使用
    Chrome 的控制台查看代表第一个条形图的`rect`元素，在数据绑定之前和使用`data`方法将`nobelData`绑定到条形图之后。正如你所看到的，D3
    已经向`rect`元素添加了一个`__data__`对象，用于存储其绑定的数据——在本例中是我们`nobelData`列表的第一个成员。`__data__`对象由
    D3 的内部管理使用，其数据基本上是供给更新方法如`attr`的函数使用的。
- en: 'Let’s look at a little example of using the data in an element’s `__data__`
    object to set its `name` attribute. The `name` attribute can be useful for making
    specific D3 selections. For example, if the user selects a particular country,
    we can now use D3 to get all its named components and adjust their style if needed.
    We’ll use the bar with bound data in [Figure A-5](#d3bar_console_db) and set the
    name using the `key` property of its bound data:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用元素的`__data__`对象中数据的小例子，设置其`name`属性。`name`属性对于制作特定的 D3 选择非常有用。例如，如果用户选择了特定的国家，现在我们可以使用
    D3 获取其所有命名组件，并根据需要调整它们的样式。我们将使用在 [图 A-5](#d3bar_console_db) 中绑定数据的条形图，并使用其绑定数据的`key`属性设置名称：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_d3__8217_s_enter_exit_pattern_CO2-1)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_d3__8217_s_enter_exit_pattern_CO2-1)'
- en: All D3 setter methods can take a function as their second argument. This function
    receives the data (`d`) bound to the selected element and its position in the
    data array (`i`).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 D3 的设置方法都可以将函数作为它们的第二个参数。这个函数接收绑定到选定元素的数据（`d`）及其在数据数组中的位置（`i`）。
- en: '[![2](assets/2.png)](#co_d3__8217_s_enter_exit_pattern_CO2-2)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_d3__8217_s_enter_exit_pattern_CO2-2)'
- en: We use a regular expression (regex) to replace all spaces in the key with underscores
    (e.g., United States → United_States).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用正则表达式（regex）将键中的所有空格替换为下划线（例如，美国 → 美国_）。
- en: '[![3](assets/3.png)](#co_d3__8217_s_enter_exit_pattern_CO2-3)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_d3__8217_s_enter_exit_pattern_CO2-3)'
- en: This will set the bar’s `name` attribute to `'bar__United_States'`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把条形图的`name`属性设置为`'bar__美国'`。
- en: All the setter methods listed in [Figure 17-3](ch17.xhtml#d3bar_selects) (`attr`,
    `style`, `text`, etc.) can take a function as a second argument, which will receive
    data bound to the element and the element’s array index. The return of this function
    is used to set the value of the property. As we’ll see, interactive visualizations’
    changes to the visualized dataset will be reflected when we bind the new data
    and then use these functional setters to adapt attributes, styles, and properties
    accordingly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-3](ch17.xhtml#d3bar_selects) 中列出的所有设置方法（`attr`、`style`、`text` 等）都可以接受一个函数作为第二个参数，该函数将接收绑定到元素的数据以及元素的数组索引。该函数的返回值用于设置属性的值。正如我们将看到的那样，在绑定新数据并使用这些函数式设置器来适应属性、样式和属性时，交互式可视化将反映出对可视化数据集的更改。'
- en: '![dpj2 aa05](assets/dpj2_aa05.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 aa05](assets/dpj2_aa05.png)'
- en: Figure A-5\. Using the Chrome console to show the addition of a `__data__` object
    after data binding using D3’s `data` method
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-5\. 使用 Chrome 控制台展示使用 D3 的 `data` 方法绑定数据后添加 `__data__` 对象
