["```py\n{\n  \"type\": \"FeatureCollection\", ![1](assets/1.png)\n  \"features\": [ ![2](assets/2.png)\n    {\n      \"type\": \"Feature\",\n      \"id\": \"AFG\",\n      \"properties\": {\n        \"name\": \"Afghanistan\"\n      },\n      \"geometry\": { ![3](assets/3.png)\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              61.210817, ![4](assets/4.png)\n              35.650072\n            ],\n            [\n              62.230651,\n              35.270664\n            ],\n            ...\n          ]\n        ]\n      }\n    },\n    ...\n    {\n      \"type\": \"Feature\",\n      \"id\": \"ZWE\",\n      \"properties\": {\n        \"name\": \"Zimbabwe\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [...] ] ]\n      }\n    }\n  ]\n}\n```", "```py\n{\n   \"type\": \"Topology\",   ![1](assets/1.png)\n   \"objects\":{           ![2](assets/2.png)\n      \"countries\":{\n        \"type\": \"GeometryCollection\",\n        \"geometries\": [{\n        \"_id\":24, \"arcs\":[[6,7,8],[10,11,12]], ... ![3](assets/3.png)\n      ...}]},\n      \"land\":{...},\n   },\n   \"arcs\":[[[67002,72360],[284,-219],[209..]], /*<-- arc*/ number 0 ![4](assets/4.png)\n           [[70827,73379],[50,-165]], ...      /*<-- arc number 1*/\n        ]\n   \"transform\":{        ![5](assets/5.png)\n      \"scale\":[\n         0.003600036...,\n         0.001736468...,\n       ],\n       \"translate\":[\n          -180,\n          -90\n       ]\n   }\n}\n```", "```py\n$ npm install -g topojson\n```", "```py\n$ geo2topo -o topo_output.json geo_input.json\n```", "```py\n$ geo2topo geo_input.json > topo_output.json\n```", "```py\n// nbviz_main.mjs import { initMap } from './nbviz_map.mjs'\n\nPromise.all([\n   d3.json('static/data/world-110m.json'), ![1](assets/1.png)\n   d3.csv('static/data/world-country-names-nobel.csv'),\n   // ...\n ]).then(ready)\n\nfunction ready([worldMap, countryNames, countryData, winnersData]) {\n    // ...\n    nbviz.initMap(worldMap, countryNames)\n}\n// nbviz_map.mjs export let initMap = function(world, names) {\n    // EXTRACT OUR REQUIRED FEATURES FROM THE TOPOJSON\n    let land = topojson.feature(world, world.objects.land),\n        countries = topojson.feature(world, world.objects.countries)\n                      .features, ![2](assets/2.png)\n        borders = topojson.mesh(world, world.objects.countries,\n                    function(a, b) { return a !== b; }); ![3](assets/3.png)\n    // ... }\n```", "```py\nlet projection = d3.geoEquirectangular()\n// ...\n```", "```py\nlet projection = d3.geoEquirectangular()\n    .scale(193 * (height/480)) ![1](assets/1.png)\n    .center([15,15]) ![2](assets/2.png)\n    .translate([width / 2, height / 2])\n    .precision(.1);\n```", "```py\nvar projection = d3.geoEquirectangular()\n// ...\n\nvar path = d3.geoPath()\n             .projection(projection);\n```", "```py\n// BOUNDRY MARKS svg.insert(\"path\", \".graticule\") ![1](assets/1.png)\n    .datum(borders)\n    .attr(\"class\", \"boundary\")\n    .attr(\"d\", path);\n```", "```py\nvar graticule = d3.geo.graticule()\n                  .step([20, 20]); ![1](assets/1.png)\n\nsvg.append(\"path\")\n    .datum(graticule) ![2](assets/2.png)\n    .attr(\"class\", \"graticule\")\n    .attr(\"d\", path); ![3](assets/3.png)\n```", "```py\n// DIMENSIONS AND SVG let mapContainer = d3.select('#nobel-map');\nlet boundingRect = mapContainer.node().getBoundingClientRect();\nlet width = boundingRect.width\n    height = boundingRect.height;\nlet svg = mapContainer.append('svg');\n// OUR CHOSEN PROJECTION let projection = d3.geo.equirectangular()\n    .scale(193 * (height/480))\n    .center([15,15])\n    .translate([width / 2, height / 2])\n    .precision(.1);\n// CREATE PATH WITH PROJECTION let path = d3.geoPath().projection(projection);\n// ADD GRATICULE var graticule = d3.geoGraticule().step([20, 20]);\nsvg.append(\"path\").datum(graticule)\n    .attr(\"class\", \"graticule\")\n    .attr(\"d\", path);\n// A RADIUS SCALE FOR OUR CENTROID INDICATORS var radiusScale = d3.scaleSqrt()\n    .range([nbviz.MIN_CENTROID_RADIUS, nbviz.MAX_CENTROID_RADIUS]);\n// OBJECT TO MAP COUNTRY NAME TO GEOJSON OBJECT var cnameToCountry = {};\n// INITIAL MAP CREATION, USING DOWNLOADED MAP DATA export let initMap = function(world, names) { ![1](assets/1.png)\n    // EXTRACT OUR REQUIRED FEATURES FROM THE TOPOJSON\n    var land = topojson.feature(world, world.objects.land),\n        countries = topojson.feature(world, world.objects.countries)\n                      .features,\n        borders = topojson.mesh(world, world.objects.countries,\n                    function(a, b) { return a !== b; });\n    // CREATE OBJECT MAPPING COUNTRY NAMES TO GEOJSON SHAPES\n    var idToCountry = {};\n    countries.forEach(function(c) {\n        idToCountry[c.id] = c;\n    });\n\n    names.forEach(function(n) {\n        cnameToCountry[n.name] = idToCountry[n.id]; ![2](assets/2.png)\n    });\n    // MAIN WORLD MAP\n    svg.insert(\"path\", \".graticule\") ![3](assets/3.png)\n        .datum(land)                 ![4](assets/4.png)\n        .attr(\"class\", \"land\")\n        .attr(\"d\", path)\n    ;\n    // COUNTRY PATHS\n    svg.insert(\"g\", \".graticule\")\n        .attr(\"class\", 'countries');\n    // COUNTRIES VALUE-INDICATORS\n    svg.insert(\"g\")\n        .attr(\"class\", \"centroids\");\n    // BOUNDARY LINES\n    svg.insert(\"path\", \".graticule\")\n        .datum(borders)\n        .attr(\"class\", \"boundary\")\n        .attr(\"d\", path);\n\n};\n```", "```py\n/* NOBEL-MAP STYLES */\n#nobel-map {\n    background: azure;\n}\n\n.graticule {\n    fill: none;\n    stroke: #777;\n    stroke-width: .5px;\n    stroke-opacity: .5;\n}\n\n.land {\n    fill: #ddd;\n}\n\n.boundary {\n    fill: none;\n    stroke: #fff;\n    stroke-width: .5px;\n}\n```", "```py\nlet updateMap = function(countryData) { //...\n                }\n```", "```py\n[\n  {\n   code: \"USA\",\n   key: \"United States\",\n   population: 319259000,\n   value: 336 ![1](assets/1.png)\n  },\n  // ... 56 more countries ]\n```", "```py\nlet mapData = countryData\n    .filter(d => d.value > 0) ![1](assets/1.png)\n    .map(function(d) {\n      return {\n        geo: cnameToCountry[d.key], ![2](assets/2.png)\n        name: d.key,\n        number: d.value\n      }\n    });\n```", "```py\nvar sc = d3.scaleSqrt().domain([0, 100]).range([0, 5]);\nsc(50) // returns 3.5353..., the square root of 12.5\n```", "```py\nvar radiusScale = d3.scaleSqrt()\n    .range([nbviz.MIN_CENTROID_RADIUS,\n    nbviz.MAX_CENTROID_RADIUS]);\n```", "```py\nvar maxWinners = d3.max(mapData.map(d => d.number))\n// DOMAIN OF VALUE-INDICATOR SCALE\nradiusScale.domain([0, maxWinners]);\n```", "```py\nlet countries = svg\n   .select('.countries').selectAll('.country')\n   .data(mapData, d => d.name)\n// Use a data-join to make selected countries visible // and fade them in over TRANS_DURATION milliseconds\n countries\n   .join(\n     (enter) => {\n       return enter\n         .append('path') ![1](assets/1.png)\n\t\t .attr('d', function (d) {\n\t\t     return path(d.geo)\n         })\n         .attr('class', 'country')\n         .attr('name', d => d.name)\n         .on('mouseenter', function (event, d) { ![2](assets/2.png)\n           d3.select(this).classed('active', true)\n         })\n         .on('mouseout', function (d) {\n           d3.select(this).classed('active', false)\n         })\n     },\n     (update) => update,\n     (exit) => { ![3](assets/3.png)\n       return exit\n         .classed('visible', false)\n         .transition()\n         .duration(nbviz.TRANS_DURATION)\n         .style('opacity', 0)\n     }\n   )\n   .classed('visible', true)\n   .transition() ![4](assets/4.png)\n   .duration(nbviz.TRANS_DURATION)\n   .style('opacity', 1)\n```", "```py\n.country{\n    fill: rgb(175, 195, 186); /* light green */\n}\n\n.country.active{\n    fill: rgb(155, 175, 166); /* dark green */\n}\n```", "```py\n// Given the GeoJSON of country (country.geo)\n// calculate x, y coords of center\nvar center = path.centroid(country.geo);\n// center = [x, y]\n```", "```py\nvar getCentroid = function(d) {\n    var latlng = nbviz.data.countryData[d.name].latlng; ![1](assets/1.png)\n    return projection([latlng[1], latlng[0]]); ![2](assets/2.png)\n};\n```", "```py\nlet updateMap = function(countryData) {\n//...\n  // BIND MAP DATA WITH NAME KEY\n  let centroids = svg\n     .select('.centroids').selectAll('.centroid')\n     .data(mapData, d => d.name) ![1](assets/1.png)\n  // JOIN DATA TO CIRCLE INDICATORS\n  centroids\n    .join(\n      (enter) => {\n        return enter\n          .append(\"circle\")\n          .attr(\"class\", \"centroid\")\n          .attr(\"name\", (d) => d.name)\n          .attr(\"cx\", (d) => getCentroid(d)[0]) ![2](assets/2.png)\n          .attr(\"cy\", (d) => getCentroid(d)[1])\n      },\n      (update) => update,\n      (exit) => exit.style(\"opacity\", 0)\n    )\n    .classed(\"active\",\n      (d) => d.name === nbviz.activeCountry)\n    .transition()\n    .duration(nbviz.TRANS_DURATION) ![3](assets/3.png)\n    .style(\"opacity\", 1)\n    .attr(\"r\", (d) => radiusScale(+d.number))\n};\n```", "```py\n.centroid{\n    fill: red;\n    fill-opacity: 0.3;\n    pointer-events: none; ![1](assets/1.png)\n}\n\n.centroid.active {\n    fill: goldenrod;\n    fill-opacity: 0.6;\n}\n```", "```py\n    // ENTER AND APPEND ANY NEW COUNTRIES\n    countries.join((enter) => {\n      return enter.append('path')\n      // ...\n        .on('mouseenter', function(d) {\n            d3.select(this).classed('active', true);\n        })\n        .on('mouseout', function(d) {\n            d3.select(this).classed('active', false);\n        })\n      })\n    ;\n```", "```py\n<!-- index.xhtml  -->\n      <!-- ...  -->\n        <div id=\"nobel-map\">\n          <div id=\"map-tooltip\">\n            <h2></h2>\n            <p></p>\n          </div>\n      <!-- ...  -->\n```", "```py\n/* css/style.css */\n/* MAP TOOLTIP */\n#map-tooltip {\n    position: absolute;\n    pointer-events: none; ![1](assets/1.png)\n    color: #eee;\n    font-size: 12px;\n    opacity: 0.7; /* a little transparent */\n    background: #222;\n    border: 2px solid #555;\n    border-color: goldenrod;\n    padding: 10px;\n    left: -999px; ![2](assets/2.png)\n}\n\n#map-tooltip h2 {\n    text-align: center;\n    padding: 0px;\n    margin: 0px;\n}\n```", "```py\n// ... countries.join(\n    (enter) => {\n    .append('path')\n    .attr('class', 'country')\n    .on('mouseenter', function(event) {\n\n        var country = d3.select(this);\n        // don't do anything if the country is not visible\n        if(!country.classed('visible')){ return; }\n\n        // get the country data object\n        var cData = country.datum();\n        // if only one prize, use singular 'prize'\n        var prize_string = (cData.number === 1)?\n            ' prize in ': ' prizes in ';\n        // set the header and text of the tooltip\n        tooltip.select('h2').text(cData.name);\n        tooltip.select('p').text(cData.number\n            + prize_string + nbviz.activeCategory);\n        // set the border color according to selected\n        // prize category\n        var borderColor =\n          (nbviz.activeCategory === nbviz.ALL_CATS)?\n            'goldenrod':\n            nbviz.categoryFill(nbviz.activeCategory);\n        tooltip.style('border-color', borderColor);\n\n        var mouseCoords = d3.pointer(event); ![1](assets/1.png)\n        var w = parseInt(tooltip.style('width')), ![2](assets/2.png)\n            h = parseInt(tooltip.style('height'));\n        tooltip.style('top', (mouseCoords[1] - h) + 'px'); ![3](assets/3.png)\n        tooltip.style('left', (mouseCoords[0] - w/2) + 'px');\n\n        d3.select(this).classed('active', true);\n    })\n    .on('mouseout', function (d) {\n      tooltip.style('left', '-9999px') ![4](assets/4.png)\n      d3.select(this).classed('active', false)\n    })\n  }, // ... )\n```", "```py\ncountries.join(\n    (enter) => {\n    .append('path')\n    .attr('class', 'country')\n    .on('mouseenter', function(event) {\n    // ...\n    })\n    .on('mouseout', function (d) {\n      tooltip.style('left', '-9999px') ![1](assets/1.png)\n      d3.select(this).classed('active', false)\n    })\n  }, // ... )\n```", "```py\nnbviz.callbacks.push(() => { ![1](assets/1.png)\n  let data = nbviz.getCountryData()\n  updateMap(data)\n})\n```"]