- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chief ambition of this book is to describe a data visualization (dataviz)
    toolchain that, in the era of the internet, is starting to predominate. The guiding
    principle of this toolchain is that whatever insightful nuggets you have managed
    to mine from your data deserve a home on the web browser. Being on the web means
    you can easily choose to distribute your dataviz to a select few (using authentication
    or restricting to a local network) or the whole world. This is the big idea of
    the internet and one that dataviz is embracing at a rapid pace. And that means
    that the future of dataviz involves JavaScript, the only first-class language
    of the web browser. But JavaScript does not yet have the data-processing stack
    needed to refine raw data, which means data visualization is inevitably a multilanguage
    affair. I hope this book provides support for my belief that Python is the natural
    complementary language to JavaScript’s monopoly of browser visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Although this book is a big one (that fact is felt most keenly by the author
    right now), it has had to be very selective, leaving out a lot of really cool
    Python and JavaScript dataviz tools and focusing on the ones that provide the
    best building blocks. The number of helpful libraries I couldn’t cover reflects
    the enormous vitality of the Python and JavaScript data science ecosystems. Even
    while the book was being written, brilliant new Python and JavaScript libraries
    were being introduced, and the pace continues.
  prefs: []
  type: TYPE_NORMAL
- en: All data visualization is essentially transformative, and showing the journey
    from one reflection of a dataset (HTML tables and lists) to a more modern, engaging,
    interactive, and, fundamentally, browser-based one provides a good way to introduce
    key data visualization tools in a working context. The challenge is to transform
    a basic Wikipedia list of Nobel Prize winners into a modern, interactive, browser-based
    visualization. Thus, the same dataset is presented in a more accessible, engaging
    form.
  prefs: []
  type: TYPE_NORMAL
- en: The journey from unprocessed data to a fairly rich, user-driven visualization
    informs the choice of best-of-breed tools. First, we need to get our dataset.
    Often this is provided by a colleague or client, but to increase the challenge
    and learn some pretty vital dataviz skills along the way, we learn how to *scrape*
    the dataset from the web (Wikipedia’s Nobel Prize pages) using Python’s powerful
    Scrapy library. This unprocessed dataset then needs to be refined and explored,
    and there isn’t a much better ecosystem for this than Python’s pandas. Along with
    Matplotlib in support and driven by a Jupyter notebook, pandas is becoming the
    gold standard for this kind of forensic data work. With clean data stored (to
    SQL with SQLAlchemy and SQLLite) and explored, the cherry-picked data stories
    can be visualized. I cover the use of Matplotlib and Plotly to embed static and
    dynamic charts from Python to a web page. But for something more ambitious, the
    supreme dataviz library for the web is the JavaScript-based D3\. We cover the
    essentials of D3 while using them to produce our showpiece Nobel data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: This book is a collection of tools forming a chain, with the creation of the
    Nobel visualization providing a guiding narrative. You should be able to dip into
    relevant chapters when and if the need arises; the different parts of the book
    are self-contained so you can quickly review what you’ve learned when required.
  prefs: []
  type: TYPE_NORMAL
- en: This book is divided into five parts. The first part introduces a basic Python
    and JavaScript dataviz toolkit, while the next four show how to retrieve raw data,
    clean it, explore it, and finally transform it into a modern web visualization.
    Let’s summarize the key lessons of each part now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part I: Basic Toolkit'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our basic toolkit consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: A language-learning bridge between Python and JavaScript. This is designed to
    smooth the transition between the two languages, highlighting their many similarities
    and setting the scene for the bilingual process of modern dataviz. With the advent
    of the latest JavaScript,^([1](preface01.xhtml#idm45607823284352)) Python and
    JavaScript have even more in common, making switching between them that much less
    stressful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to read from and write to the key data formats (e.g., JSON and CSV)
    and databases (both SQL and NoSQL) with ease is one of Python’s great strengths.
    We see how easy it is to pass data around in Python, translating formats and changing
    databases as we go. This fluid movement of data is the main lubricant of any dataviz
    toolchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We cover the basic web development (webdev) skills needed to start producing
    modern, interactive, browser-based dataviz. By focusing on the concept of the
    [single-page application](https://oreil.ly/yqv6C) rather than building whole websites,
    we minimize conventional webdev and place the emphasis on programming your visual
    creations in JavaScript. An introduction to Scalable Vector Graphics (SVG), the
    chief building block of D3 visualizations, sets the scene for the creation of
    our Nobel Prize visualization in [Part V](part05.xhtml#part_viz).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part II: Getting Your Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this part of the book, we look at how to get data from the web using Python,
    assuming a nice, clean data file hasn’t been provided to the data visualizer:'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re lucky, a clean file in an easily usable data format (i.e., JSON or
    CSV) is at an open URL, a simple HTTP request away. Alternatively, there may be
    a dedicated web API for your dataset, with any luck a RESTful one. As an example,
    we look at using the Twitter API (via Python’s Tweepy library). We also see how
    to use Google spreadsheets, a widely used data-sharing resource in dataviz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things get more involved when the data of interest is present on the web in
    human-readable form, often in HTML tables, lists, or hierarchical content blocks.
    In this case, you have to resort to *scraping*, getting the raw HTML content and
    then using a parser to make its embedded content available. We see how to use
    Python’s lightweight Beautiful Soup scraping library and the much more featureful
    and heavyweight Scrapy, the biggest star in the Python scraping firmament.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part III: Cleaning and Exploring Data with pandas'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this part, we turn the big guns of pandas, Python’s powerful programmatic
    spreadsheet, onto the problem of cleaning and then exploring datasets. We first
    see how pandas is part of Python’s NumPy ecosystem, which leverages the power
    of very fast, powerful low-level array processing libraries, while making them
    accessible. The focus is on using pandas to clean and then explore our Nobel Prize
    dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: Most data, even that which comes from official web APIs, is dirty. And making
    it clean and usable will occupy far more of your time as a data visualizer than
    you probably anticipated. Taking the Nobel dataset as an example, we progressively
    clean it, searching for dodgy dates, anomalous datatypes, missing fields, and
    all the common grime that needs cleaning before you can start to explore and then
    transform your data into a visualization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With our clean (as we can make it) Nobel Prize dataset in hand, we see how easy
    it is to use pandas and Matplotlib to interactively explore data, easily creating
    inline charts, slicing the data every which way, and generally getting a feel
    for it, while looking for those interesting nuggets you want to deliver with visualization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part IV: Delivering the Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this part, we see how easy it is to create a minimal data API using Flask,
    to deliver data both statically and dynamically to the web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we see how to use Flask to serve static files and then how to roll your
    own basic data API, serving data from a local database. Flask’s minimalism allows
    you to create a very thin data-serving layer between the fruits of your Python
    data processing and their eventual visualization on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The glory of open source software is that you can often find robust, easy-to-use
    libraries that solve your problem better than you could. In the second chapter
    of this part, we see how easy it is to use best-of-breed Python (Flask) libraries
    to craft a robust, flexible RESTful API, ready to serve your data online. We also
    cover the easy online deployment of this data server using Heroku, a favorite
    of Pythonistas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part V: Visualizing Your Data with D3 and Plotly'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first chapter of this part, we see how to take the fruits of your pandas-driven
    exploration, in the form of charts or maps, and put them on the web, where they
    belong. Matplotlib can produce publication-standard static charts while Plotly
    brings user controls and dynamic charts to the table. We see how to take a Plotly
    chart directly from a Jupyter notebook and put it in a web page.
  prefs: []
  type: TYPE_NORMAL
- en: The part of the book that covers D3 is some of the most challenging, but you
    may well end up being employed to construct the kind of multielement visualizations
    it produces. One of the joys of D3 is the [huge number of examples](https://oreil.ly/AIWkI)
    that can easily be found online, but most of them demonstrate a single technique
    and there are few showing how to orchestrate multiple visual elements. In these
    D3 chapters, we see how to synchronize the update of a timeline (featuring all
    the Nobel Prizes), a map, a bar chart, and a list as the user filters the Nobel
    Prize dataset or changes the prize-winning metric (absolute or per capita).
  prefs: []
  type: TYPE_NORMAL
- en: Mastery of the core themes demonstrated in these chapters should allow you to
    let loose your imagination and learn by doing. I’d recommend choosing some data
    close to your heart and designing a D3 creation around it.
  prefs: []
  type: TYPE_NORMAL
- en: The Second Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was a little reluctant when O’Reilly offered me the opportunity of writing
    a second edition of this book. The first edition ended up larger than anticipated,
    and updating and augmenting it was potentially a lot of work. However, after reviewing
    the status of the libraries covered and changes to the Python and JavaScript dataviz
    ecosystem, it was clear that most of the libraries used (e.g., Scrapy, NumPy,
    pandas) were still solid choices and needed fairly small updates.
  prefs: []
  type: TYPE_NORMAL
- en: D3 was the library that had changed the most, but these changes had made D3
    both easier to use and easier to teach. JavaScript modules were also solidly in
    place, making the code cleaner and more familiar to a Pythonista.
  prefs: []
  type: TYPE_NORMAL
- en: A few Python libraries no longer seemed like solid choices and a couple had
    been deprecated. The first edition dealt fairly extensively with MongoDB, a NoSQL
    database. I now think that good old-fashioned SQL is a better fit for dataviz
    work and that the minimal file-based, serverless SQLite represents a dataviz sweet
    spot if a database is required.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than replace the deprecated RESTful data server with another Python library,
    I thought it would be particularly instructive to build a simple one from scratch,
    demonstrating the use of some brilliant Python libraries, such as marshmallow,
    which are useful in many dataviz scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: With the time available for updating the book, I made the decision to use the
    first book’s dataset for demonstrating exploration and analysis with Matplotlib
    and pandas, focusing on updating all the libraries to their current (as of mid-2022)
    versions. This allowed time to be spent on new material, chief of which is a chapter
    dedicated to Python’s Plotly library, which allows you to easily transfer exploratory
    work from a Jupyter notebook to a web presentation with user interactions. A particular
    strength of this approach is the availability of Mapbox maps, a rich mapping ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main thrust of the second edition was:'
  prefs: []
  type: TYPE_NORMAL
- en: To bring all the libraries up to date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To remove and/or replace libraries that hadn’t stood the test of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To add some new material suggested by changes in the fast-developing world of
    Python and JavaScript dataviz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The metaphor of the dataviz toolchain still holds good, I think, and the transformative
    pipeline, from raw, unprocessed web data through exploratory dataviz-driven analysis
    to polished web visualization, remains a good way to learn the key tools of the
    job.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, datatypes, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/Kyrand/dataviz-with-python-and-js-ed-2*](https://github.com/Kyrand/dataviz-with-python-and-js-ed-2).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing a CD-ROM
    of examples from O’Reilly books does require permission. Answering a question
    by citing this book and quoting example code does not require permission. Incorporating
    a significant amount of example code from this book into your product’s documentation
    does require permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but do not require, attribution. An attribution usually includes
    the title, author, publisher, and ISBN. For example: “*Data Visualization with
    Python and JavaScript*, second edition, by Kyran Dale (O’Reilly). Copyright 2023
    Kyran Dale Limited, 978-1-098-11187-8.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](https://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/dvpj_2e*](https://oreil.ly/dvpj_2e).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*https://oreilly.com*](https://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on LinkedIn: [*https://linkedin.com/company/oreilly-media*](https://linkedin.com/company/oreilly-media)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*https://twitter.com/oreillymedia*](https://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*https://www.youtube.com/oreillymedia*](https://www.youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Thanks first to Meghan Blanchette, who set the ball rolling and steered that
    ball through its first very rough chapters. Dawn Schanafelt then took the helm
    and did the bulk of the very necessary editing. Kristen Brown did a brilliant
    job taking the book through production, aided by Gillian McGarvey’s impressively
    tenacious copyediting. Working with such talented, dedicated professionals has
    been an honor and a privilege—and an education: the book would have been so much
    easier to write if I’d known then what I know now. Isn’t that always the way?'
  prefs: []
  type: TYPE_NORMAL
- en: Many thanks to Amy Zielinski for making the author look better than he deserves.
  prefs: []
  type: TYPE_NORMAL
- en: The book benefited from some very helpful feedback. So many thanks to Christophe
    Viau, Tom Parslow, Peter Cook, Ian Macinnes, and Ian Ozsvald.
  prefs: []
  type: TYPE_NORMAL
- en: I’d also like to thank the valiant bug hunters who answered my appeal during
    this book’s early release. At time of writing, these are Douglas Kelley, Pavel
    Suk, Brigham Hausman, Marco Hemken, Noble Kennamer, Manfredi Biasutti, Matthew
    Maldonado, and Geert Bauwens.
  prefs: []
  type: TYPE_NORMAL
- en: Second Edition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Primary thanks must go to Shira Evans for shepherding the book from conception
    to realization. Gregory Hyman did a great job keeping me abreast of early releases
    and providing feedback. Once again, I was lucky to have Kristen Brown bring the
    book through production.
  prefs: []
  type: TYPE_NORMAL
- en: I’d also like to thank my tech reviewers Jordan Goldmeier, Drew Winstel, and
    Jess Males for great advice.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](preface01.xhtml#idm45607823284352-marker)) There are many versions of
    JavaScript based on [ECMAScript](https://oreil.ly/0uwuN), but the most significant
    version, which provides the bulk of new functionality, is [ECMAScript 6](https://oreil.ly/owrsZ).
  prefs: []
  type: TYPE_NORMAL
