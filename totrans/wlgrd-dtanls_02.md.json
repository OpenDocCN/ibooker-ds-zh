["```py\nimport pandas as pd\nimport numpy as np        #1\n\nsales = pd.read_csv(\"./data/purchases.csv\")      #2\nprint(sales.shape)            #3\n```", "```py\nsales.isnull().sum()     #1\n```", "```py\nsales[\"is_guest\"] = sales[\"customer_id\"].isnull()\n```", "```py\nsales[sales[\"is_guest\"] & sales[\"customer_id\"].notnull()]\nsales[(sales[\"is_guest\"] == False) & sales[\"customer_id\"].isnull()]\n```", "```py\nsales[\"is_guest\"].value_counts(normalize=True)\n```", "```py\nguest_columns = [\"guest_first_name\", \"guest_surname\",\n↪ \"guest_postcode\"]\nunique_guests = sales[guest_columns].drop_duplicates()    #1\nprint(len(unique_guests))\nunique_customers = sales[\"customer_id\"].unique()           #2\ncust_total = len(unique_customers) + len(unique_guests)\nprint(len(unique_guests) / (cust_total-1))                 #3\n```", "```py\nguest_columns = [\"guest_first_name\", \"guest_surname\",\n↪ \"guest_postcode\", \"is_guest\"]\nguests = sales.loc[sales[\"is_guest\"], guest_columns]\nguests = guests.drop_duplicates()     #1\nguests.head()\n```", "```py\nnon_guests = (\n  pd.DataFrame(            #1\n    sales.loc[sales[\"customer_id\"].notnull(), \"customer_id\"]\n      .unique()                    #2\n      .astype(int),\n    columns=[\"customer_id\"]\n  )\n)\nnon_guests.head()\n```", "```py\nsales_customers = pd.concat([non_guests,guests], axis=0, ignore_index=True)\n```", "```py\nnew_col_names = [\"customer_id\", \"first_name\", \"surname\",\n↪ \"postcode\", \"is_guest\"]\nsales_customers = sales_customers.set_axis(new_col_names, axis=1)\n```", "```py\nsales_customers[\"is_guest\"] = sales_customers[\"is_guest\"].fillna(False)\n```", "```py\nsales_customers[\"in_purchase_data\"] = True\n```", "```py\nfor col in [\"first_name\", \"surname\"]:\n    sales_customers[col] = sales_customers[col].str.lower().str.strip()\n\nsales_customers[\"postcode\"] = sales_customers[\"postcode\"].str.strip()\n```", "```py\ncrm = pd.read_csv(\"./data/crm_export.csv\")\nprint(crm.shape)\ncrm.head()\n```", "```py\ncrm.isnull().sum()\n```", "```py\ncrm.groupby(\"customer_id\").size().loc[lambda x: x > 1]\n```", "```py\nprint(len(crm))\nprint(len(crm.drop(columns=\"customer_id\").drop_duplicates()))\n```", "```py\nsales_and_crm_customers = sales_customers.merge(crm,\n↪ on=\"customer_id\", how=\"left\", suffixes=(\"_sales\", \"_crm\"))\nprint(len(sales_and_crm_customers))\nsales_and_crm_customers.isnull().sum()\n```", "```py\nmerged_customers_filter = (\n  (sales_and_crm_customers[\"customer_id\"].notnull())\n    & ((sales_and_crm_customers[\"first_name_crm\"].notnull())\n      | (sales_and_crm_customers[\"surname_crm\"].notnull()))\n)\n```", "```py\nsales_and_crm_customers.loc[merged_customers_filter, \"in_crm_data\"] = True\nsales_and_crm_customers.loc[~merged_customers_filter, \"in_crm_data\"] = False\nsales_and_crm_customers[\"in_crm_data\"].value_counts()\n```", "```py\nsales_and_crm_customers.loc[merged_customers_filter, [\"first_name_sales\",\n↪ \"surname_sales\", \"postcode_sales\"]] = (\n    sales_and_crm_customers.loc[merged_customers_filter, [\"first_name_crm\",\n↪ \"surname_crm\", \"postcode_crm\"]]\n    .values\n)\n```", "```py\nsales_and_crm_customers = (\n    sales_and_crm_customers\n    .drop(columns=[\"first_name_crm\", \"surname_crm\", \"postcode_crm\"])\n    .rename(columns={\n        \"first_name_sales\": \"first_name\",\n        \"surname_sales\": \"surname\",\n        \"postcode_sales\": \"postcode\"\n    })\n)\nsales_and_crm_customers.head()\n```", "```py\ncrm_ids_to_add = list(set(crm[\"customer_id\"].unique())\n↪ - set(sales_and_crm_customers[\"customer_id\"].unique()))\nprint(len(crm_ids_to_add))\n```", "```py\nsales_and_crm_customers = (\n    pd.concat([sales_and_crm_customers,\n↪ crm[crm[\"customer_id\"].isin(crm_ids_to_add)]],\n              axis=0,\n             ignore_index=True)\n)\n```", "```py\nsales_and_crm_customers[\"is_guest\"]\n↪ = sales_and_crm_customers[\"is_guest\"].fillna(False)\nsales_and_crm_customers[\"in_purchase_data\"]\n↪ = sales_and_crm_customers[\"in_purchase_data\"].fillna(False)\nsales_and_crm_customers[\"in_crm_data\"]\n↪ = sales_and_crm_customers[\"in_crm_data\"].fillna(True)\n\nsales_and_crm_customers.isnull().sum()\n```", "```py\ncustomers = pd.read_csv(\"./data/customer_database.csv\")\nprint(customers.shape)\ncustomers.head()\n```", "```py\ncustomers.isnull().sum()\n```", "```py\nfor col in [\"first_name\", \"surname\"]:\n    customers[col] = customers[col].str.lower().str.strip()\n\ncustomers[\"postcode\"] = customers[\"postcode\"].str.strip()\n```", "```py\ncustomers.groupby(\"customer_id\").size().loc[lambda x: x>1]\n```", "```py\nprint(\"{} rows\".format(len(customers)))\nunique_customers = customers.drop(columns=\"customer_id\").drop_duplicates()\nprint(\"{} unique combinations of customers\".format(len(unique_customers)))\n```", "```py\nall_customers = sales_and_crm_customers.merge(customers,\n↪ on=\"customer_id\", how=\"left\", suffixes=(\"_sales\", \"_customers\"))\nall_customers.head()\n```", "```py\nmerged_customers_filter = (\n    (all_customers[\"customer_id\"].notnull())\n    & ((all_customers[\"first_name_customers\"].notnull())\n       | (all_customers[\"surname_customers\"].notnull()))\n)\nall_customers.loc[merged_customers_filter, \"in_customer_data\"] = True\nall_customers.loc[~merged_customers_filter, \"in_customer_data\"] = False\nall_customers[\"in_customer_data\"].value_counts()\n```", "```py\nupdate_filter = (                              #1\n    (all_customers[\"in_customer_data\"])\n    & (all_customers[\"first_name_sales\"].isnull())\n    & (all_customers[\"surname_sales\"].isnull())\n)\n\nall_customers.loc[update_filter, [\"first_name_sales\",\n↪ \"surname_sales\", \"postcode_sales\", \"age_sales\"]] = (\n    all_customers.loc[update_filter, [\"first_name_customers\",\n↪ \"surname_customers\", \"postcode_customers\", \"age_customers\"]].values\n)                                                            #2\n\nall_customers = (                                              #3\n    all_customers\n    .drop(columns=[\"first_name_customers\", \"surname_customers\", \"age_customers\", \"postcode_customers\"])\n    .rename(columns={\n        \"first_name_sales\": \"first_name\",\n        \"surname_sales\": \"surname\",\n        \"age_sales\": \"age\",\n        \"postcode_sales\": \"postcode\"\n    })\n)\n```", "```py\ncustomer_ids_to_add = list(set(customers[\"customer_id\"].unique())\n↪ - set(all_customers[\"customer_id\"].unique()))\nprint(len(customer_ids_to_add))\n```", "```py\nall_customers = (\n    pd.concat([all_customers,\n↪ customers[customers[\"customer_id\"].isin(customer_ids_to_add)]],\n              axis=0,\n              ignore_index=True)\n)\n```", "```py\nall_customers[\"is_guest\"] = all_customers[\"is_guest\"].fillna(False)\nall_customers[\"in_purchase_data\"]\n↪ = all_customers[\"in_purchase_data\"].fillna(False)\nall_customers[\"in_crm_data\"]\n↪ = all_customers[\"in_crm_data\"].fillna(False)\nall_customers[\"in_customer_data\"] \n↪ = all_customers[\"in_customer_data\"].fillna(True)\n```", "```py\nall_customers.head()\n```", "```py\nidentified_customers = (\n    all_customers[(all_customers[\"customer_id\"].notnull())\n                  & (all_customers[\"in_purchase_data\"])\n                  & ((all_customers[\"in_crm_data\"])\n                     | (all_customers[\"in_customer_data\"]))]\n)\n\nguests = all_customers[all_customers[\"is_guest\"]]\n\ncustomer_ids_not_found = (\n    all_customers[(all_customers[\"customer_id\"].notnull())\n                  & (all_customers[\"first_name\"].isnull())\n                  & (all_customers[\"surname\"].isnull())]\n)\ncustomer_data_only = (\n    all_customers[((all_customers[\"in_crm_data\"])\n                   | (all_customers[\"in_customer_data\"])\n                  )\n                  & (all_customers[\"in_purchase_data\"] == False)]\n)\n\nprint(len(all_customers), len(identified_customers))\nprint(len(guests), len(customer_ids_not_found), len(customer_data_only))\n```", "```py\nprint(len(all_customers))                    #1\nall_customers = all_customers.drop_duplicates()\nprint(len(all_customers))           #2\n```", "```py\nall_customers[\"customer_id\"].agg([\"min\", \"max\"])\n```", "```py\nall_guests = all_customers[all_customers[\"is_guest\"]].copy()\nnew_ids = np.arange(-1, -(len(all_guests) + 1), -1)                    #1\nall_customers.loc[all_customers[\"is_guest\"], \"customer_id\"] = new_ids\n```", "```py\ncolumns_to_consider = [\"first_name\", \"surname\", \"postcode\"]\n\nduplicates = all_customers[all_customers.duplicated(\n↪ subset=columns_to_consider, keep=False)]\n```", "```py\nduplicate_dict = duplicates.groupby(columns_to_consider)['customer_id']\n↪ .apply(list).to_dict()\n```", "```py\nall_customers['other_customer_ids'] = all_customers.apply(\n↪ lambda x: duplicate_dict.get((x['first_name'],\n↪ x['surname'], x['postcode'])), axis=1)\n```", "```py\ndef remove_own_record(row):\n    ids = list(row[\"other_customer_ids\"])\n    ids.remove(row[\"customer_id\"])\n    return ids\n\nall_customers.loc[all_customers[\"other_customer_ids\"].notnull(),\n↪ \"duplicate_customer_ids\"] = ( all_customers[all_customers[\"other_customer_ids\"].notnull()]\n↪ .apply(remove_own_record, axis=1)\n)\n```", "```py\nall_customers[\"rank\"]\n↪ = all_customers.groupby(columns_to_consider).cumcount()+1\n```", "```py\nall_customers.loc[all_customers[\"rank\"] == 1, \"is_main\"] = True\nall_customers[\"is_main\"] = all_customers[\"is_main\"].fillna(False)\nall_customers = all_customers.drop(columns=\"rank\")\n```", "```py\nprint(f\"Total customers in DB: {len(all_customers)}\")\nprint(f\"Of which {len(all_customers[all_customers['is_main']])}\n↪ are unique/main records\")\n```", "```py\nimport recordlinkage\n```", "```py\nindexer = recordlinkage.Index()     #1\nindexer.block('postcode')                #2\ncandidate_links\n↪ = indexer.index(all_customers.set_index(\"customer_id\"))      #3\n```", "```py\ncompare = recordlinkage.Compare()              #1\ncompare.string('first_name', 'first_name', method='damerau_levenshtein',\n↪ threshold=0.85, label=\"first_name\")                                #2\ncompare.string('surname', 'surname', method='damerau_levenshtein',\n↪ threshold=0.85, label=\"surname\")\ncompare.exact('postcode', 'postcode', label=\"postcode\")     #3\n```", "```py\ncompare_vectors = compare.compute(candidate_links,\n↪ all_customers.set_index(\"customer_id\"))\n```", "```py\nmatches = compare_vectors[compare_vectors.sum(axis=1) == 3]\n```", "```py\nmatch_df = pd.DataFrame(            #1\n    data=matches.index.tolist(),\n    columns=[\"customer_id_1\", \"customer_id_2\"]\n)\nmatched = all_customers.merge(match_df, left_on=\"customer_id\",\n↪ right_on=\"customer_id_1\", how=\"left\", suffixes=(\"_customers\", \"_matches\")) #2\nmatched = matched.merge(match_df, left_on=\"customer_id\",\n↪ right_on=\"customer_id_2\", how=\"left\", suffixes=(\"_customers\", \"_matches\")) #3\n```", "```py\ndef merge_duplicates(group):\n    duplicate_list = []\n    if np.isnan(group[\"customer_id_1_matches\"].values[0]) == False:\n        duplicate_list.extend(group[\"customer_id_1_matches\"].tolist())\n    if np.isnan(group[\"customer_id_2_customers\"].values[0]) == False:\n        duplicate_list.extend(group[\"customer_id_2_customers\"].tolist())\n    if len(duplicate_list) > 0:\n        return sorted(list(set([int(x) for x in duplicate_list])))\n    return np.nan\n\nlinkages = (\n    matched\n    .groupby(\"customer_id\")\n    .apply(merge_duplicates)\n    .reset_index(name=\"linked_duplicates\")\n)\n```", "```py\nall_customers = all_customers.merge(linkages, on=\"customer_id\", how=\"left\")\n```", "```py\n(\n    all_customers[(all_customers[\"duplicate_customer_ids\"].notnull())\n               & (all_customers[\"linked_duplicates\"].notnull())\n               & (all_customers[\"duplicate_customer_ids\"]\n↪ != all_customers[\"linked_duplicates\"])]\n)\n```"]