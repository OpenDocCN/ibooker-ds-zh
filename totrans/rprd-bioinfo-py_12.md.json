["```py\n$ cd 11_mprt\n$ cp solution1_regex.py mprt.py\n```", "```py\n$ ./mprt.py -h\nusage: mprt.py [-h] [-d DIR] FILE\n\nFind locations of N-glycosylation motif\n\npositional arguments:\n  FILE                  Input text file of UniProt IDs ![1](assets/1.png)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DIR, --download_dir DIR ![2](assets/2.png)\n                        Directory for downloads (default: fasta)\n```", "```py\n$ cat tests/inputs/1.txt\nA2Z669\nB5ZC00\nP07204_TRBM_HUMAN\nP20840_SAG1_YEAST\n```", "```py\n$ ./mprt.py tests/inputs/1.txt\nB5ZC00\n85 118 142 306 395\nP07204_TRBM_HUMAN\n47 115 116 382 409\nP20840_SAG1_YEAST\n79 109 135 248 306 348 364 402 485 501 614\n```", "```py\n$ head -2 fasta/*\n==> fasta/A2Z669.fasta <==\n>sp|A2Z669|CSPLT_ORYSI CASP-like protein 5A2 OS=Oryza sativa subsp.\n indica OX=39946 GN=OsI_33147 PE=3 SV=1\nMRASRPVVHPVEAPPPAALAVAAAAVAVEAGVGAGGGAAAHGGENAQPRGVRMKDPPGAP\n\n==> fasta/B5ZC00.fasta <==\n>sp|B5ZC00|SYG_UREU1 Glycine--tRNA ligase OS=Ureaplasma urealyticum\n serovar 10 (strain ATCC 33699 / Western) OX=565575 GN=glyQS PE=3 SV=1\nMKNKFKTQEELVNHLKTVGFVFANSEIYNGLANAWDYGPLGVLLKNNLKNLWWKEFVTKQ\n\n==> fasta/P07204_TRBM_HUMAN.fasta <==\n>sp|P07204|TRBM_HUMAN Thrombomodulin OS=Homo sapiens OX=9606 GN=THBD PE=1 SV=2\nMLGVLVLGALALAGLGFPAPAEPQPGGSQCVEHDCFALYPGPATFLNASQICDGLRGHLM\n\n==> fasta/P20840_SAG1_YEAST.fasta <==\n>sp|P20840|SAG1_YEAST Alpha-agglutinin OS=Saccharomyces cerevisiae\n (strain ATCC 204508 / S288c) OX=559292 GN=SAG1 PE=1 SV=2\nMFTFLKIILWLFSLALASAININDITFSNLEITPLTANKQPDQGWTATFDFSIADASSIR\n```", "```py\n$ new.py -fp 'Find locations of N-glycosylation motif' mprt.py\nDone, see new script \"mprt.py\".\n```", "```py\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    file: TextIO ![1](assets/1.png)\n    download_dir: str ![2](assets/2.png)\n\ndef get_args() -> Args:\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Find location of N-glycosylation motif',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        help='Input text file of UniProt IDs',\n                        metavar='FILE',\n                        type=argparse.FileType('rt')) ![3](assets/3.png)\n\n    parser.add_argument('-d',\n                        '--download_dir',\n                        help='Directory for downloads',\n                        metavar='DIR',\n                        type=str,\n                        default='fasta') ![4](assets/4.png)\n\n    args = parser.parse_args()\n\n    return Args(args.file, args.download_dir)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for prot_id in map(str.rstrip, args.file):\n        print(prot_id)\n```", "```py\n$ ./mprt.py tests/inputs/1.txt\nA2Z669\nB5ZC00\nP07204_TRBM_HUMAN\nP20840_SAG1_YEAST\n```", "```py\ndef main() -> None:\n    args = get_args()\n    for prot_id in map(str.rstrip, args.file):\n        print(f'http://www.uniprot.org/uniprot/{prot_id}')\n```", "```py\n$ ./mprt.py tests/inputs/1.txt\nhttp://www.uniprot.org/uniprot/A2Z669\nhttp://www.uniprot.org/uniprot/B5ZC00\nhttp://www.uniprot.org/uniprot/P07204_TRBM_HUMAN\nhttp://www.uniprot.org/uniprot/P20840_SAG1_YEAST\n```", "```py\n$ curl https://www.uniprot.org/uniprot/A2Z669.fasta\n>sp|A2Z669|CSPLT_ORYSI CASP-like protein 5A2 OS=Oryza sativa subsp.\n indica OX=39946 GN=OsI_33147 PE=3 SV=1\nMRASRPVVHPVEAPPPAALAVAAAAVAVEAGVGAGGGAAAHGGENAQPRGVRMKDPPGAP\nGTPGGLGLRLVQAFFAAAALAVMASTDDFPSVSAFCYLVAAAILQCLWSLSLAVVDIYAL\nLVKRSLRNPQAVCIFTIGDGITGTLTLGAACASAGITVLIGNDLNICANNHCASFETATA\nMAFISWFALAPSCVLNFWSMASR\n```", "```py\n$ curl https://www.uniprot.org/uniprot/A2Z669.fasta > A2Z669.fasta\n```", "```py\n$ curl -o A2Z669.fasta https://www.uniprot.org/uniprot/A2Z669.fasta\n```", "```py\n$ wget https://www.uniprot.org/uniprot/A2Z669.fasta\n```", "```py\n$ cat A2Z669.fasta\n>sp|A2Z669|CSPLT_ORYSI CASP-like protein 5A2 OS=Oryza sativa subsp.\n indica OX=39946 GN=OsI_33147 PE=3 SV=1\nMRASRPVVHPVEAPPPAALAVAAAAVAVEAGVGAGGGAAAHGGENAQPRGVRMKDPPGAP\nGTPGGLGLRLVQAFFAAAALAVMASTDDFPSVSAFCYLVAAAILQCLWSLSLAVVDIYAL\nLVKRSLRNPQAVCIFTIGDGITGTLTLGAACASAGITVLIGNDLNICANNHCASFETATA\nMAFISWFALAPSCVLNFWSMASR\n```", "```py\n#!/usr/bin/env bash ![1](assets/1.png)\n\nif [[ $# -ne 1 ]]; then ![2](assets/2.png)\n    printf \"usage: %s FILE\\n\" $(basename \"$0\") ![3](assets/3.png)\n    exit 1 ![4](assets/4.png)\nfi\n\nOUT_DIR=\"fasta\" ![5](assets/5.png)\n[[ ! -d \"$OUT_DIR\" ]] && mkdir -p \"$OUT_DIR\" ![6](assets/6.png)\n\nwhile read -r PROT_ID; do ![7](assets/7.png)\n    echo \"$PROT_ID\"   ![8](assets/8.png)\n    URL=\"https://www.uniprot.org/uniprot/${PROT_ID}\" ![9](assets/9.png)\n    OUT_FILE=\"$OUT_DIR/${PROT_ID}.fasta\" ![10](assets/10.png)\n    wget -q -o \"$OUT_FILE\" \"$URL\" ![11](assets/11.png)\ndone < $1 ![12](assets/12.png)\n\necho \"Done, see output in \\\"$OUT_DIR\\\".\" ![13](assets/13.png)\n```", "```py\n$ ./fetch_fasta.sh tests/inputs/1.txt\nA2Z669\nB5ZC00\nP07204_TRBM_HUMAN\nP20840_SAG1_YEAST\nDone, see output in \"fasta\".\n```", "```py\nfasta:\n\t./fetch_fasta.sh tests/inputs/1.txt\n```", "```py\ndef fetch_fasta(fh: TextIO, fasta_dir: str) -> List[str]: ![1](assets/1.png)\n    \"\"\" Fetch the FASTA files into the download directory \"\"\"\n\n    return [] ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    files = fetch_fasta(args.file, args.download_dir)\n    print('\\n'.join(files))\n```", "```py\ndef fetch_fasta(fh: TextIO, fasta_dir: str) -> List[str]:\n    \"\"\" Fetch the FASTA files into the download directory \"\"\"\n\n    if not os.path.isdir(fasta_dir): ![1](assets/1.png)\n        os.makedirs(fasta_dir) ![2](assets/2.png)\n\n    files = [] ![3](assets/3.png)\n    for prot_id in map(str.rstrip, fh): ![4](assets/4.png)\n        fasta = os.path.join(fasta_dir, prot_id + '.fasta') ![5](assets/5.png)\n        if not os.path.isfile(fasta): ![6](assets/6.png)\n            url = f'http://www.uniprot.org/uniprot/{prot_id}.fasta' ![7](assets/7.png)\n            response = requests.get(url) ![8](assets/8.png)\n            if response.status_code == 200: ![9](assets/9.png)\n                print(response.text, file=open(fasta, 'wt')) ![10](assets/10.png)\n            else:\n                print(f'Error fetching \"{url}\": \"{response.status_code}\"',\n                      file=sys.stderr) ![11](assets/11.png)\n                continue ![12](assets/12.png)\n\n        files.append(fasta) ![13](assets/13.png)\n\n    return files ![14](assets/14.png)\n```", "```py\n$ ./mprt.py tests/inputs/1.txt\nfasta/A2Z669.fasta\nfasta/B5ZC00.fasta\nfasta/P07204_TRBM_HUMAN.fasta\nfasta/P20840_SAG1_YEAST.fasta\n```", "```py\n>>> import re\n>>> regex = re.compile('N[^P][ST][^P]')\n```", "```py\n>>> seq = 'NNTSYS'\n>>> regex.findall(seq)\n['NNTS']\n```", "```py\n>>> regex = re.compile('(?=(N[^P][ST][^P]))')\n>>> regex.findall(seq)\n['NNTS', 'NTSY']\n```", "```py\n>>> [match.start() + 1 for match in regex.finditer(seq)]\n[1, 2]\n```", "```py\ndef main():\n    args = get_args()\n    files = fetch_fasta(args.file, args.download_dir) ![1](assets/1.png)\n    regex = re.compile('(?=(N[^P][ST][^P]))') ![2](assets/2.png)\n\n    for file in files: ![3](assets/3.png)\n        prot_id, _ = os.path.splitext(os.path.basename(file)) ![4](assets/4.png)\n        recs = SeqIO.parse(file, 'fasta') ![5](assets/5.png)\n        if rec := next(recs): ![6](assets/6.png)\n            if matches := list(regex.finditer(str(rec.seq))): ![7](assets/7.png)\n                print(prot_id) ![8](assets/8.png)\n                print(*[match.start() + 1 for match in matches]) ![9](assets/9.png)\n```", "```py\n>>> import os\n>>> basename = os.path.basename('fasta/B5ZC00.fasta')\n>>> basename\n'B5ZC00.fasta'\n```", "```py\n>>> os.path.splitext(basename)\n('B5ZC00', '.fasta')\n```", "```py\n>>> os.path.splitext(basename)[0]\n'B5ZC00'\n```", "```py\ndef find_motif(text: str) -> List[int]: ![1](assets/1.png)\n    \"\"\" Find a pattern in some text \"\"\"\n\n    return [] ![2](assets/2.png)\n```", "```py\ndef test_find_motif() -> None:\n    \"\"\" Test find_pattern \"\"\"\n\n    assert find_motif('') == [] ![1](assets/1.png)\n    assert find_motif('NPTX') == [] ![2](assets/2.png)\n    assert find_motif('NXTP') == [] ![3](assets/3.png)\n    assert find_motif('NXSX') == [0] ![4](assets/4.png)\n    assert find_motif('ANXTX') == [1] ![5](assets/5.png)\n    assert find_motif('NNTSYS') == [0, 1] ![6](assets/6.png)\n    assert find_motif('XNNTSYS') == [1, 2] ![7](assets/7.png)\n    assert find_motif('XNNTSYSXNNTSYS') == [1, 2, 8, 9] ![8](assets/8.png)\n```", "```py\ndef find_kmers(seq: str, k: int) -> List[str]:\n    \"\"\" Find k-mers in string \"\"\"\n\n    n = len(seq) - k + 1\n    return [] if n < 1 else [seq[i:i + k] for i in range(n)]\n```", "```py\n>>> from solution2_manual import find_kmers\n>>> seq = 'NNTSYS'\n>>> find_kmers(seq, 4)\n['NNTS', 'NTSY', 'TSYS']\n```", "```py\n>>> list(enumerate(find_kmers(seq, 4)))\n[(0, 'NNTS'), (1, 'NTSY'), (2, 'TSYS')]\n```", "```py\n>>> for i, kmer in enumerate(find_kmers(seq, 4)):\n...     print(i, kmer)\n...\n0 NNTS\n1 NTSY\n2 TSYS\n```", "```py\n>>> kmer = 'NNTS'\n>>> kmer[0] == 'N' and kmer[1] != 'P' and kmer[2] in 'ST' and kmer[3] != 'P'\nTrue\n```", "```py\n>>> for i, kmer in enumerate(find_kmers(seq, 4)):\n...   kmer[0] == 'N' and kmer[1] != 'P' and kmer[2] in 'ST' and kmer[3] != 'P'\n...\nTrue\nTrue\nFalse\n```", "```py\ndef is_match(seq: str) -> bool:\n    \"\"\" Find the N-glycosylation \"\"\"\n\n    return len(seq) == 4 and (seq[0] == 'N' and seq[1] != 'P'\n                              and seq[2] in 'ST' and seq[3] != 'P')\n```", "```py\ndef test_is_match() -> None:\n    \"\"\" Test is_match \"\"\"\n\n    assert not is_match('') ![1](assets/1.png)\n    assert is_match('NASA') ![2](assets/2.png)\n    assert is_match('NATA')\n    assert not is_match('NATAN') ![3](assets/3.png)\n    assert not is_match('NPTA') ![4](assets/4.png)\n    assert not is_match('NASP') ![5](assets/5.png)\n```", "```py\n>>> for i, kmer in enumerate(find_kmers(seq, 4)):\n...     print(i, kmer, is_match(kmer))\n...\n0 NNTS True\n1 NTSY True\n2 TSYS False\n```", "```py\n>>> kmers = list(enumerate(find_kmers(seq, 4)))\n>>> [i for i, kmer in kmers if is_match(kmer)]\n[0, 1]\n```", "```py\n>>> from iteration_utilities import starfilter\n>>> list(starfilter(lambda i, s: is_match(s), kmers))\n[(0, 'NNTS'), (1, 'NTSY')]\n```", "```py\n>>> matches = starfilter(lambda i, s: is_match(s), kmers)\n>>> list(map(lambda t: t[0], matches))\n[0, 1]\n```", "```py\ndef fst(t: Tuple[Any, Any]) -> Any:\n    return t[0]\n\ndef snd(t: Tuple[Any, Any]) -> Any:\n    return t[1]\n```", "```py\n>>> list(map(fst, filter(lambda t: is_match(snd(t)), kmers)))\n[0, 1]\n```", "```py\n>>> from itertools import starmap\n>>> list(filter(None, starmap(lambda i, s: i if is_match(s) else None, kmers)))\n[1]\n```", "```py\n>>> list(filter(None, [1, 0, 2]))\n[1, 2]\n```", "```py\ndef find_motif(text: str) -> List[int]:\n    \"\"\" Find a pattern in some text \"\"\"\n\n    kmers = list(enumerate(find_kmers(text, 4))) ![1](assets/1.png)\n    return [i for i, kmer in kmers if is_match(kmer)] ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    files = fetch_fasta(args.file, args.download_dir)\n\n    for file in files:\n        prot_id, _ = os.path.splitext(os.path.basename(file))\n        recs = SeqIO.parse(file, 'fasta')\n        if rec := next(recs):\n            if matches := find_motif(str(rec.seq)): ![1](assets/1.png)\n                pos = map(lambda p: p + 1, matches) ![2](assets/2.png)\n                print('\\n'.join([prot_id, ' '.join(map(str, pos))])) ![3](assets/3.png)\n```"]