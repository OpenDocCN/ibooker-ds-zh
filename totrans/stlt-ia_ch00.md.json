["```py\nimport streamlit as st\n\ntab1, tab2, tab3 = st.tabs([\"Mission\", \"About us\", \"Careers\"])\nwith tab1:\n    st.header(\"Our Mission\")\n    st.write(\"Our mission is to teach people to make web apps in Python.\")\n\nwith tab2:\n    st.header(\"About Us\")\n    st.write(\"We are a group of Python enthusiasts.\")\n\nwith tab3:\n    st.header(\"Careers\")\n    st.write(\"We are hiring! Apply today!\")\n\n```", "```py\ntab1, tab2, tab3 = st.tabs([\"Mission\", \"About us\", \"Careers\"])\n```", "```py\n import streamlit as st\nimport random\n\nst.title(\"Die Roll Simulator\")\nnum_rolls = st.slider('Number of die rolls', min_value=10, max_value=100)\nif st.button('Plot Graph'):\n    die_rolls = [random.randint(1, 6) for _ in range(num_rolls)]\n    st.line_chart(data=die_rolls)\n\n```", "```py\nimport os\nimport streamlit as st\nfrom openai import OpenAI\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-...\" # Replace with your own API key\nopenai = OpenAI()\n\nhuman_message = lambda m: {\"role\": \"user\", \"content\": m}\nai_message = lambda m: {\"role\": \"assistant\", \"content\": m}\n\ndef talk_to_ai(question, history):\n    return openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=history + [human_message(question)],\n    ).choices[0].message.content\n\nst.session_state.history = st.session_state.get(\"history\", [])\nhistory = st.session_state.history\n\nfor message in history:\n    st.chat_message(message[\"role\"]).markdown(message[\"content\"])\n\nif prompt := st.chat_input(\"Chat with me!\"):\n    st.chat_message(\"human\").markdown(prompt)\n    response = talk_to_ai(prompt, history)\n    history.extend([human_message(prompt), ai_message(response)])\n    st.chat_message(\"ai\").markdown(response)\n\n```"]