- en: Chapter 29\. Customizing Plot Legends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plot legends give meaning to a visualization, assigning meaning to the various
    plot elements. We previously saw how to create a simple legend; here we’ll take
    a look at customizing the placement and aesthetics of the legend in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest legend can be created with the `plt.legend` command, which automatically
    creates a legend for any labeled plot elements (see [Figure 29-1](#fig_0406-customizing-legends_files_in_output_4_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![output 4 0](assets/output_4_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-1\. A default plot legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: But there are many ways we might want to customize such a legend. For example,
    we can specify the location and turn on the frame (see [Figure 29-2](#fig_0406-customizing-legends_files_in_output_6_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![output 6 0](assets/output_6_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-2\. A customized plot legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can use the `ncol` command to specify the number of columns in the legend,
    as shown in [Figure 29-3](#fig_0406-customizing-legends_files_in_output_8_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![output 8 0](assets/output_8_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-3\. A two-column plot legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: And we can use a rounded box (`fancybox`) or add a shadow, change the transparency
    (alpha value) of the frame, or change the padding around the text (see [Figure 29-4](#fig_0406-customizing-legends_files_in_output_10_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For more information on available legend options, see the `plt.legend` docstring.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 10 0](assets/output_10_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-4\. A fancybox plot legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Choosing Elements for the Legend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already seen, by default the legend includes all labeled elements
    from the plot. If this is not what is desired, we can fine-tune which elements
    and labels appear in the legend by using the objects returned by `plot` commands.
    `plt.plot` is able to create multiple lines at once, and returns a list of created
    line instances. Passing any of these to `plt.legend` will tell it which to identify,
    along with the labels we’d like to specify (see [Figure 29-5](#fig_0406-customizing-legends_files_in_output_13_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 13 0](assets/output_13_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-5\. Customization of legend elements^([1](ch29.xhtml#idm45858758410736))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I generally find in practice that it is clearer to use the first method, applying
    labels to the plot elements you’d like to show on the legend (see [Figure 29-6](#fig_0406-customizing-legends_files_in_output_15_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the legend ignores all elements without a `label` attribute set.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 15 0](assets/output_15_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-6\. Alternative method of customizing legend elements^([2](ch29.xhtml#idm45858758305392))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Legend for Size of Points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes the legend defaults are not sufficient for the given visualization.
    For example, perhaps you’re using the size of points to mark certain features
    of the data, and want to create a legend reflecting this. Here is an example where
    we’ll use the size of points to indicate populations of California cities. We’d
    like a legend that specifies the scale of the sizes of the points, and we’ll accomplish
    this by plotting some labeled data with no entries (see [Figure 29-7](#fig_0406-customizing-legends_files_in_output_19_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 19 0](assets/output_19_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-7\. Location, geographic size, and population of California cities
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The legend will always reference some object that is on the plot, so if we’d
    like to display a particular shape we need to plot it. In this case, the objects
    we want (gray circles) are not on the plot, so we fake them by plotting empty
    lists. Recall that the legend only lists plot elements that have a label specified.
  prefs: []
  type: TYPE_NORMAL
- en: By plotting empty lists, we create labeled plot objects that are picked up by
    the legend, and now our legend tells us some useful information. This strategy
    can be useful for creating more sophisticated visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Legends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes when designing a plot you’d like to add multiple legends to the same
    axes. Unfortunately, Matplotlib does not make this easy: via the standard `legend`
    interface, it is only possible to create a single legend for the entire plot.
    If you try to create a second legend using `plt.legend` or `ax.legend`, it will
    simply override the first one. We can work around this by creating a new legend
    artist from scratch (`Artist` is the base class Matplotlib uses for visual attributes),
    and then using the lower-level `ax.add_artist` method to manually add the second
    artist to the plot (see [Figure 29-8](#fig_0406-customizing-legends_files_in_output_22_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a peek into the low-level artist objects that comprise any Matplotlib
    plot. If you examine the source code of `ax.legend` (recall that you can do this
    with within the Jupyter notebook using `ax.legend??`) you’ll see that the function
    simply consists of some logic to create a suitable `Legend` artist, which is then
    saved in the `legend_` attribute and added to the figure when the plot is drawn.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 22 0](assets/output_22_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 29-8\. A split plot legend
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: ^([1](ch29.xhtml#idm45858758410736-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch29.xhtml#idm45858758305392-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
