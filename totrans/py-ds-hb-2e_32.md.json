["```py\nIn [1]: %matplotlib inline\n        import matplotlib.pyplot as plt\n        plt.style.use('seaborn-white')\n        import numpy as np\n```", "```py\nIn [2]: def f(x, y):\n            return np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n```", "```py\nIn [3]: x = np.linspace(0, 5, 50)\n        y = np.linspace(0, 5, 40)\n\n        X, Y = np.meshgrid(x, y)\n        Z = f(X, Y)\n```", "```py\nIn [4]: plt.contour(X, Y, Z, colors='black');\n```", "```py\nIn [5]: plt.contour(X, Y, Z, 20, cmap='RdGy');\n```", "```py\nplt.cm.<TAB>\n```", "```py\nIn [6]: plt.contourf(X, Y, Z, 20, cmap='RdGy')\n        plt.colorbar();\n```", "```py\nIn [7]: plt.imshow(Z, extent=[0, 5, 0, 5], origin='lower', cmap='RdGy',\n                   interpolation='gaussian', aspect='equal')\n        plt.colorbar();\n```", "```py\nIn [8]: contours = plt.contour(X, Y, Z, 3, colors='black')\n        plt.clabel(contours, inline=True, fontsize=8)\n\n        plt.imshow(Z, extent=[0, 5, 0, 5], origin='lower',\n                   cmap='RdGy', alpha=0.5)\n        plt.colorbar();\n```", "```py\nIn [1]: %matplotlib inline\n        import numpy as np\n        import matplotlib.pyplot as plt\n        plt.style.use('seaborn-white')\n\n        rng = np.random.default_rng(1701)\n        data = rng.normal(size=1000)\n```", "```py\nIn [2]: plt.hist(data);\n```", "```py\nIn [3]: plt.hist(data, bins=30, density=True, alpha=0.5,\n                 histtype='stepfilled', color='steelblue',\n                 edgecolor='none');\n```", "```py\nIn [4]: x1 = rng.normal(0, 0.8, 1000)\n        x2 = rng.normal(-2, 1, 1000)\n        x3 = rng.normal(3, 2, 1000)\n\n        kwargs = dict(histtype='stepfilled', alpha=0.3, density=True, bins=40)\n\n        plt.hist(x1, **kwargs)\n        plt.hist(x2, **kwargs)\n        plt.hist(x3, **kwargs);\n```", "```py\nIn [5]: counts, bin_edges = np.histogram(data, bins=5)\n        print(counts)\nOut[5]: [ 23 241 491 224  21]\n```", "```py\nIn [6]: mean = [0, 0]\n        cov = [[1, 1], [1, 2]]\n        x, y = rng.multivariate_normal(mean, cov, 10000).T\n```", "```py\nIn [7]: plt.hist2d(x, y, bins=30)\n        cb = plt.colorbar()\n        cb.set_label('counts in bin')\n```", "```py\nIn [8]: counts, xedges, yedges = np.histogram2d(x, y, bins=30)\n        print(counts.shape)\nOut[8]: (30, 30)\n```", "```py\nIn [9]: plt.hexbin(x, y, gridsize=30)\n        cb = plt.colorbar(label='count in bin')\n```", "```py\nIn [10]: from scipy.stats import gaussian_kde\n\n         # fit an array of size [Ndim, Nsamples]\n         data = np.vstack([x, y])\n         kde = gaussian_kde(data)\n\n         # evaluate on a regular grid\n         xgrid = np.linspace(-3.5, 3.5, 40)\n         ygrid = np.linspace(-6, 6, 40)\n         Xgrid, Ygrid = np.meshgrid(xgrid, ygrid)\n         Z = kde.evaluate(np.vstack([Xgrid.ravel(), Ygrid.ravel()]))\n\n         # Plot the result as an image\n         plt.imshow(Z.reshape(Xgrid.shape),\n                    origin='lower', aspect='auto',\n                    extent=[-3.5, 3.5, -6, 6])\n         cb = plt.colorbar()\n         cb.set_label(\"density\")\n```"]