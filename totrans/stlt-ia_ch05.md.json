["```py\npip install pandas\n```", "```py\n>>> import pandas as pd\n>>> df = pd.read_csv('sales_data.csv')\n\n```", "```py\n>>> df = pd.read_csv('sales_data.csv')\n```", "```py\n>>> type(df)\n<class 'pandas.core.frame.DataFrame'>\n```", "```py\n>>> df.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1035000 entries, 0 to 1034999\nData columns (total 10 columns):\n #   Column        Non-Null Count    Dtype\n---  ------        --------------    -----\n 0   date          1035000 non-null  object\n 1   product_name  1035000 non-null  object\n 2   segment       1035000 non-null  object\n 3   category      1035000 non-null  object\n 4   gender        1035000 non-null  object\n 5   age_group     1035000 non-null  object\n 6   state         1035000 non-null  object\n 7   sales         1035000 non-null  float64\n 8   gross_margin  1035000 non-null  float64\n 9   transactions  1035000 non-null  float64\ndtypes: float64(3), object(7)\nmemory usage: 79.0+ MB\n\n```", "```py\npd.read_csv('sales_data.csv', dtype_backend='pyarrow')\n```", "```py\n>>> only_some_cols = df[['date', 'product_name', 'segment', 'state']]\n```", "```py\n>>> only_some_cols.head()\n         date product_name        segment state\n0  2019-01-01    InkStream  Fountain pens    CA\n1  2019-01-01    InkStream  Fountain pens    TX\n2  2019-01-01    InkStream  Fountain pens    FL\n3  2019-01-01    InkStream  Fountain pens    UT\n4  2019-01-01    InkStream  Fountain pens    RI\n```", "```py\nimport pandas as pd\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent\nSALES_DATA_PATH = BASE_DIR / \"sales_data.csv\"\n\ndef load_data():\n  return pd.read_csv(SALES_DATA_PATH)\n\n```", "```py\nBASE_DIR = Path(__file__).resolve().parent\nSALES_DATA_PATH = BASE_DIR / \"sales_data.csv\"\n```", "```py\nimport streamlit as st\nfrom data_loader import load_data\n\ndata = load_data()\nst.write(data.head(5))\n\n```", "```py\n@st.cache_data\ndef load_data():\n  return pd.read_csv(SALES_DATA_PATH)\n```", "```py\nimport streamlit as st\n```", "```py\n@st.cache_data(ttl=\"1d\")\n```", "```py\n@st.cache_data(show_spinner=\"Reading sales data...\", ttl=\"1d\")\ndef load_data():\n  return pd.read_csv(SALES_DATA_PATH)\n```", "```py\ndef get_unique_values(df, column):\n  return list(df[column].unique())\n\n```", "```py\nimport streamlit as st\nfrom data_wrangling import get_unique_values\n\nfilter_dims = [\"age_group\", \"gender\", \"category\", \"segment\",\n               \"product_name\", \"state\"]\n\ndef filter_panel(df):\n  with st.expander(\"Filters\"):\n    filter_cols = st.columns(len(filter_dims))\n    for idx, dim in enumerate(filter_dims):\n      with filter_cols[idx]:\n        unique_vals = get_unique_values(df, dim)\n        st.multiselect(dim, unique_vals)\n```", "```py\nwith filter_cols[idx]:\n    unique_vals = get_unique_values(df, dim)\n    st.multiselect(dim, unique_vals)\n```", "```py\n...\nfrom filter_panel import filter_panel\n\ndata = load_data()\nfilter_panel(data)\nst.write(data.head(5))\n\n```", "```py\nst.set_page_config(layout='wide')\n```", "```py\n...\nfrom data_loader import load_data   #A\n\n...\ndef clean_column_names(df):\n  df.columns = df.columns.str.replace('_', ' ').str.capitalize()\n  return df\n\n@st.cache_data(show_spinner=\"Reading sales data...\", ttl=\"1d\")    #B\ndef prep_data():\n  return clean_column_names(load_data())\n```", "```py\nfilter_dims = [\"Age group\", \"Gender\", \"Category\", \"Segment\",\n               \"Product name\", \"State\"]\n```", "```py\ndef filter_panel(df):\n  filters = {}\n  with st.expander(\"Filters\"):\n    filter_cols = st.columns(len(filter_dims))\n    for idx, dim in enumerate(filter_dims):\n      with filter_cols[idx]:\n        unique_vals = get_unique_values(df, dim)\n        filters[dim] = st.multiselect(dim, unique_vals)\n  return filters\n\n```", "```py\ndef apply_filters(df, filters):\n  for col, values in filters.items():\n    if values:\n      df = df[df[col].isin(values)]\n  return df\n\n```", "```py\ndf = df[df[col].isin(values)]\n\n```", "```py\n...\nfrom data_wrangling import apply_filters, prep_data\n...\n\ndata = prep_data()\nfilters = filter_panel(data)    #A\n\nmain_df = apply_filters(data, filters)\nst.write(main_df.head(5))\n```", "```py\ndate = st.date_input(\"Select a date\", value=datetime.date.today())\n```", "```py\nrange = st.date_input(\"Select a date range\", value=(datetime.date(2023, 1, 1),\ndatetime.date(2023, 12, 31)))\n\n```", "```py\nimport streamlit as st\nfrom datetime import date, timedelta\n\n# Hardcode this to the last date in dataset to ensure reproducibility\nLATEST_DATE = date.fromisoformat(\"2024-08-31\")\nTHIRTY_DAYS_AGO = LATEST_DATE - timedelta(days=30)\n\ndef date_range_panel():\n  start = st.date_input(\"Start date\", value=THIRTY_DAYS_AGO)\n  end = st.date_input(\"End date\", value=LATEST_DATE)\n  return start, end\n\n```", "```py\nimport pandas as pd\nimport streamlit as st\n...\n\n@st.cache_data(show_spinner=\"Reading sales data...\", ttl=\"1d\")\ndef prep_data() -> pd.DataFrame:\n  df = clean_column_names(load_data())\n  df['Day'] = pd.to_datetime(df['Date'])\n  return df\n\ndef get_data_within_date_range(df, start, end):\n  if start is not None and end is not None:\n    dt_start, dt_end = pd.to_datetime(start), pd.to_datetime(end)\n    return df[(df['Day'] >= dt_start) & (df['Day'] <= dt_end)]\n  return df\n\ndef get_filtered_data_within_date_range(df, start, end, filters):\n  df_within_range = get_data_within_date_range(df.copy(), start, end)\n  return apply_filters(df_within_range, filters)\n\n```", "```py\ndt_start, dt_end = pd.to_datetime(start), pd.to_datetime(end)\n\n```", "```py\nreturn df[(df['Day'] >= dt_start) & (df['Day'] <= dt_end)]\n\n```", "```py\nimport streamlit as st\nfrom data_wrangling import get_filtered_data_within_date_range, prep_data\nfrom filter_panel import filter_panel\nfrom date_range_panel import date_range_panel\n\nst.set_page_config(layout='wide')\n\nwith st.sidebar:\n start, end = date_range_panel()\n\ndata = prep_data()\nfilters = filter_panel(data)\n\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\nst.write(main_df.head(5))\n\n```", "```py\n| Date       | Product      | State |  Sales | Gross Margin | Transactions |\n|------------|--------------|-------|--------|--------------|--------------|\n| 2024-01-01 | Fountain Pen | CA    |    500 |          200 |           10 |\n| 2024-01-01 | Notebook     | TX    |    300 |          120 |            5 |\n| 2024-01-01 | Pencil       | NY    |    200 |           80 |            8 |\n\n```", "```py\nfrom dataclasses import dataclass\n@dataclass\nclass Metric:\n  title: str\n  func: callable\n  type: str\n```", "```py\nfrom metric import Metric\n\ndef margin_percent(df):\n  total_sales = df[\"Sales\"].sum()\n  return df[\"Gross margin\"].sum() / total_sales if total_sales > 0 else 0\n\ndef average_transaction_value(df):\n  total_sales = df[\"Sales\"].sum()\n  return total_sales / df[\"Transactions\"].sum() if total_sales > 0 else 0\n\nmetrics = {\n  \"Total sales\": Metric(\n    title=\"Total sales\",\n    func=lambda df: df[\"Sales\"].sum(),\n    type=\"dollars\"\n  ),\n  \"Gross margin\": Metric(\n    title=\"Gross margin\",\n    func=lambda df: df[\"Gross margin\"].sum(),\n    type=\"dollars\"\n  ),\n  \"Margin %\": Metric(\n    title=\"Margin %\",\n    func=margin_percent,\n    type=\"percent\"\n  ),\n  \"ATV\": Metric(\n    title=\"Average transaction value\",\n    func=average_transaction_value,\n    type=\"dollars\"\n  )\n}\n\ndisplay_metrics = [\"Total sales\", \"Gross margin\", \"Margin %\", \"ATV\"]\n\n```", "```py\nmetrics = {\n  \"Total sales\": Metric(\n    title=\"Total sales\",\n    func=lambda df: df[\"Sales\"].sum(),\n    type=\"dollars\"\n  ),\n  ...\n```", "```py\ndf[\"Sales\"].sum()\n\n```", "```py\ndef margin_percent(df):\n  total_sales = df[\"Sales\"].sum()\n  return df[\"Gross margin\"].sum() / total_sales if total_sales > 0 else 0\n```", "```py\ndisplay_metrics = [\"Total sales\", \"Gross margin\", \"Margin %\", \"ATV\"]\n```", "```py\nimport humanize\n\ndef format_metric(value, metric_type):\n  if metric_type == \"dollars\":\n    return f'${humanize.metric(value)}'\n  elif metric_type == \"percent\":\n    return f'{round(value * 100, 1)}%'\n  return f'{value}'\n\n```", "```py\nimport streamlit as st\nfrom metric_config import metrics, display_metrics\nfrom formatting import format_metric\n\ndef get_metric(df, metric):\n  return metric.func(df)\n\ndef metric_bar(main_df):\n  with st.container(border=True):\n    metric_cols = st.columns(len(display_metrics))\n    for idx, metric_name in enumerate(display_metrics):\n      metric = metrics[metric_name]\n      with metric_cols[idx]:\n        value = get_metric(main_df, metric)\n        formatted_value = format_metric(value, metric.type)\n        c1, c2, c3 = st.columns([1, 3, 1])\n        with c2:\n          st.metric(metric.title, formatted_value)\n\n```", "```py\nwith st.container(border=True):\n```", "```py\ndef get_metric(df, metric):\n  return metric.func(df)\n```", "```py\nc1, c2, c3 = st.columns([1, 3, 1])\n    with c2:\n        st.metric(metric.title, formatted_value)\n```", "```py\n...\nfrom metric_bar import metric_bar\n\n...\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\nif main_df.empty:\n st.warning(\"No data to display\")\nelse:\n metric_bar(main_df)\n```", "```py\n+------------+-------+\n|   Date     | Sales |\n+------------+-------+\n| 2024-01-01 |  120  |\n| 2024-01-02 |  135  |\n| 2024-01-03 |  142  |\n| 2024-01-04 |  130  |\n| 2024-01-05 |  155  |\n+------------+-------+\n```", "```py\n+------------+-------+--------+-----------+------------+\n|    Day     | State | Gender | Product   |   Sales    |\n+------------+-------+--------+-----------+------------+\n| 2024-08-01 |   CA  |   M    | RoyalQuill|   1500     |\n| 2024-08-01 |   CA  |   M    | GripLink  |   1300     |\n| 2024-08-02 |   CA  |   M    | RoyalQuill|   1600     |\n| 2024-08-02 |   CA  |   M    | GripLink  |   1200     |\n+------------+-------+--------+-----------+------------+\n\n```", "```py\n+------------+--------+\n|    Day     | Sales  |\n+------------+--------+\n| 2024-08-01 |  2800  |\n| 2024-08-02 |  2800  |\n+------------+--------+\n\n```", "```py\ngrouped = df.groupby('Day')\ndata = grouped.apply(lambda df: df['Sales'].sum(), include_groups=False).reset_index()\n\n```", "```py\n+------------+------------------------------------------------------+\n|    Day     |                  Grouped Rows                        |\n+------------+------------------------------------------------------+\n| 2024-08-01 | (2024-08-01, CA, M, RoyalQuill, 1500)                |\n|            | (2024-08-01, CA, M, GripLink, 1300)                  |\n| 2024-08-02 | (2024-08-02, CA, M, RoyalQuill, 1600)                |\n|            | (2024-08-02, CA, M, GripLink, 1200)                  |\n+------------+------------------------------------------------------+\n```", "```py\nLet's add such a function to the bottom of data_wrangling.py:\ndef get_metric_time_series(df, metric):\n  grouped = df.groupby('Day')\n  data = grouped.apply(metric.func, include_groups=False).reset_index()\n  data.columns = ['Day', 'Value']\n  return data\n\n```", "```py\nimport plotly.graph_objs as go\nfrom data_wrangling import get_metric_time_series\n\ndef get_time_series_chart(df, metric):\n  data = get_metric_time_series(df, metric)\n  fig = go.Figure()\n  fig.add_trace(\n    go.Scatter(x=data['Day'], y=data['Value'], mode='lines+markers')\n  )\n\n  fig.update_layout(\n    title=f\"{metric.title}\",\n    xaxis_title='Day',\n    yaxis_title=metric.title\n  )\n  return fig\n\n```", "```py\nfig.add_trace(\n  go.Scatter(x=data['Day'], y=data['Value'], mode='lines+markers')\n)\n```", "```py\nfig.update_layout(\n    title=f\"{metric.title}\",\n    xaxis_title='Day',\n    yaxis_title=metric.title\n  )\n```", "```py\nimport plotly.graph_objs as go\nimport streamlit as st\nfrom data_wrangling import get_metric_time_series\nfrom metric_config import metrics, display_metrics\n\n...\ndef time_series_chart(df):\n  with st.container(border=True):\n    chart_tabs = st.tabs(display_metrics)\n    for idx, met in enumerate(display_metrics):\n      with chart_tabs[idx]:\n        chart = get_time_series_chart(df, metrics[met])\n        st.plotly_chart(chart, use_container_width=True)\n\n```", "```py\nst.plotly_chart(chart, use_container_width=True)\n```", "```py\n...\nfrom time_series_chart import time_series_chart\n\n...\nif main_df.empty:\n  st.warning(\"No data to display\")\nelse:\n  metric_bar(main_df)\n  time_series_chart(main_df)\n```", "```py\npie_chart_display_metrics = [\"Total sales\", \"Gross margin\"]\n```", "```py\n+------------+-------+--------+-----------+------------+\n|    Day     | State | Gender | Product   |   Sales    |\n+------------+-------+--------+-----------+------------+\n| 2024-08-01 |   CA  |   M    | RoyalQuill|   1500     |\n| 2024-08-01 |   CA  |   M    | GripLink  |   1300     |\n| 2024-08-02 |   CA  |   M    | RoyalQuill|   1600     |\n| 2024-08-02 |   CA  |   M    | GripLink  |   1200     |\n+------------+-------+--------+-----------+------------+\n\n```", "```py\n+-----------+-------------+\n|  Product  |    Sales    |\n+-----------+-------------+\n| RoyalQuill|     3100    |\n| GripLink  |     2500    |\n+-----------+-------------+\n```", "```py\n...\n\ndef get_metric_time_series(df, metric):\n  grouped = df.groupby('Day')\n  data = grouped.apply(metric.func, include_groups=False).reset_index()\n  data.columns = ['Day', 'Value']\n  return data\n\ndef get_metric_grouped_by_dimension(df, metric, dimension):\n grouped = df.groupby(dimension)\n data = grouped.apply(metric.func, include_groups=False).reset_index()\n data.columns = [dimension, 'Value']\n return data\n```", "```py\nimport plotly.graph_objects as go\nfrom data_wrangling import get_metric_grouped_by_dimension\n\ndef get_pie_chart(df, metric, dimension):\n  data = get_metric_grouped_by_dimension(df, metric, dimension)\n  fig = go.Figure()\n  fig.add_trace(\n    go.Pie(labels=data[dimension], values=data['Value'], hole=0.4)\n  )\n  return fig\n```", "```py\nimport plotly.graph_objects as go\nimport streamlit as st\nfrom data_wrangling import get_metric_grouped_by_dimension\nfrom metric_config import metrics, pie_chart_display_metrics\n\n...\ndef pie_chart(df):\n  with st.container(border=True):\n    split_dimension = st.selectbox(\n      \"Group by\",\n      [\"Age group\", \"Gender\", \"State\", \"Category\",\n       \"Segment\", \"Product name\"]\n    )\n    metric_tabs = st.tabs(pie_chart_display_metrics)\n    for idx, met in enumerate(pie_chart_display_metrics):\n      with metric_tabs[idx]:\n        chart = get_pie_chart(df, metrics[met], split_dimension)\n        st.plotly_chart(chart, use_container_width=True)\n\n```", "```py\n...\nfrom pie_chart import pie_chart\n\n...\nif main_df.empty:\n  st.warning(\"No data to display\")\nelse:\n  metric_bar(main_df)\n  time_series_col, pie_chart_col = st.columns(2)\n with time_series_col:\n time_series_chart(main_df)\n with pie_chart_col:\n pie_chart(main_df)\n\n```"]