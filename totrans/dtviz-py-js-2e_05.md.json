["```py\nfile = open('data.txt')\n```", "```py\nnobel_winners = [\n {'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n {'category': 'Physics',\n  'name': 'Paul Dirac',\n  'nationality': 'British',\n  'gender': 'male',\n  'year': 1933},\n {'category': 'Chemistry',\n  'name': 'Marie Curie',\n  'nationality': 'Polish',\n  'gender': 'female',\n  'year': 1911}\n]\n```", "```py\nf = open('data/nobel_winners.csv', 'w')\n```", "```py\ncols = nobel_winners[0].keys() ![1](assets/1.png)\ncols = sorted(cols) ![2](assets/2.png)\n\nwith open('data/nobel_winners.csv', 'w') as f: ![3](assets/3.png)\n    f.write(','.join(cols) + '\\n') ![4](assets/4.png)\n\n    for o in nobel_winners:\n        row = [str(o[col]) for col in cols] ![5](assets/5.png)\n        f.write(','.join(row) + '\\n')\n```", "```py\nwith open('data/nobel_winners.csv') as f:\n    for line in f.readlines():\n        print(line)\n\nOut:\ncategory,name,nationality,gender,year\nPhysics,Albert Einstein,Swiss,male,1921\nPhysics,Paul Dirac,British,male,1933\nChemistry,Marie Curie,Polish,female,1911\n```", "```py\nnobel_winners = [\n {'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\nimport csv\n\nwith open('data/nobel_winners.csv', 'w') as f:\n    fieldnames = nobel_winners[0].keys() ![1](assets/1.png)\n    fieldnames = sorted(fieldnames) ![2](assets/2.png)\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader() ![3](assets/3.png)\n    for w in nobel_winners:\n        writer.writerow(w)\n```", "```py\nwith open('data/nobel_winners.csv') as f:\n    reader = csv.reader(f)\n    for row in reader: ![1](assets/1.png)\n        print(row)\n\nOut:\n['category', 'name', 'nationality', 'gender', 'year']\n['Physics', 'Albert Einstein', 'Swiss', 'male', '1921']\n['Physics', 'Paul Dirac', 'British', 'male', '1933']\n['Chemistry', 'Marie Curie', 'Polish', 'female', '1911']\n```", "```py\nimport csv\n\nwith open('data/nobel_winners.csv') as f:\n    reader = csv.DictReader(f)\n    nobel_winners = list(reader) ![1](assets/1.png)\n\nnobel_winners\n\nOut:\n[OrderedDict([('category', 'Physics'),\n              ('name', 'Albert Einstein'),\n              ('nationality', 'Swiss'),\n              ('gender', 'male'),\n              ('year', '1921')]),\n OrderedDict([('category', 'Physics'),\n              ('name', 'Paul Dirac'),\n              ('nationality', 'British'),\n              ... ])]\n```", "```py\nfor w in nobel_winners:\n    w['year'] = int(w['year'])\n```", "```py\nfrom datetime import datetime\n\ndt = datetime.strptime('1947', '%Y')\ndt\n# datetime.datetime(1947, 1, 1, 0, 0)\n```", "```py\nnobel_winners = [\n {'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\nimport json\n\nwith open('data/nobel_winners.json', 'w') as f:\n     json.dump(nobel_winners, f)\n\nopen('data/nobel_winners.json').read()\n```", "```py\nOut: '[{\"category\": \"Physics\", \"name\": \"Albert Einstein\",\n\"gender\": \"male\", \"year\": 1921,\n\"nationality\": \"Swiss\"}, {\"category\": \"Physics\",\n\"nationality\": \"British\", \"year\": 1933, \"name\": \"Paul Dirac\",\n\"gender\": \"male\"}, {\"category\": \"Chemistry\", \"nationality\":\n\"Polish\", \"year\": 1911, \"name\": \"Marie Curie\", \"gender\":\n\"female\"}]'\n```", "```py\nimport json\n\nwith open('data/nobel_winners.json') as f:\n    nobel_winners = json.load(f)\n\nnobel_winners\nOut:\n[{'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921}, ![1](assets/1.png)\n... }]\n```", "```py\nfrom datetime import datetime\n\njson.dumps(datetime.now())\nOut:\n...\nTypeError: datetime.datetime(2021, 9, 13, 10, 25, 52, 586792)\nis not JSON serializable\n```", "```py\nimport datetime\nimport json\n\nclass JSONDateTimeEncoder(json.JSONEncoder): ![1](assets/1.png)\n    def default(self, obj):\n        if isinstance(obj, (datetime.date, datetime.datetime)): ![2](assets/2.png)\n            return obj.isoformat()\n        else:\n            return json.JSONEncoder.default(self, obj)\n\ndef dumps(obj):\n    return json.dumps(obj, cls=JSONDateTimeEncoder) ![3](assets/3.png)\n```", "```py\nnow_str = dumps({'time': datetime.datetime.now()})\nnow_str\nOut:\n'{\"time\": \"2021-11-16T16:41:14.650802\"}'\n```", "```py\nIn [0]: from datetime import datetime\n\nIn [1]: time_str = '2021/01/01 12:32:11'\n\nIn [2]: dt = datetime.strptime(time_str, '%Y/%m/%d %H:%M:%S') ![1](assets/1.png)\n\nIn [3]: dt\nOut[2]: datetime.datetime(2021, 1, 1, 12, 32, 11)\n```", "```py\ndt = datetime.strptime('1/2/2021 12:32:11', '%Y/%m/%d %H:%M:%S')\n-----------------------------------------------------------\nValueError                Traceback (most recent call last)\n<ipython-input-111-af657749a9fe> in <module>()\n----> 1 dt = datetime.strptime('1/2/2021 12:32:11',\\\n    '%Y/%m/%d %H:%M:%S')\n...\nValueError: time data '1/2/2021 12:32:11' does not match\n            format '%Y/%m/%d %H:%M:%S'\n```", "```py\ndata = [\n    {'id': 0, 'date': '2020/02/23 12:59:05'},\n    {'id': 1, 'date': '2021/11/02 02:32:00'},\n    {'id': 2, 'date': '2021/23/12 09:22:30'},\n]\n\nfor d in data:\n     try:\n         d['date'] = datetime.strptime(d['date'],\\\n           '%Y/%m/%d %H:%M:%S')\n     except ValueError:\n         print('Oops! - invalid date for ' + repr(d))\n# Out:\n# Oops! - invalid date for {'id': 2, 'date': '2021/23/12 09:22:30'}\n```", "```py\nnobel_winners = [\n {'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\ndialect+driver://username:password@host:port/database\n```", "```py\nengine = create_engine(\n           'mysql://kyran:mypsswd@localhost/nobel_winners')\n```", "```py\nfrom sqlalchemy import create_engine\n\nengine = create_engine(\n            'sqlite:///data/nobel_winners.db', echo=True)\n```", "```py\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n```", "```py\nfrom sqlalchemy import Column, Integer, String, Enum\n// ...\n\nclass Winner(Base):\n    __tablename__ = 'winners'\n    id = Column(Integer, primary_key=True)\n    category = Column(String)\n    name = Column(String)\n    nationality = Column(String)\n    year = Column(Integer)\n    gender = Column(Enum('male', 'female'))\n    def __repr__(self):\n        return \"<Winner(name='%s', category='%s', year='%s')>\"\\\n%(self.name, self.category, self.year)\n```", "```py\nBase.metadata.create_all(engine)\n\n2021-11-16 17:58:34,700 INFO sqlalchemy.engine.Engine BEGIN (implicit)\n...\nCREATE TABLE winners (\n\tid INTEGER NOT NULL,\n\tcategory VARCHAR,\n\tname VARCHAR,\n\tnationality VARCHAR,\n\tyear INTEGER,\n\tgender VARCHAR(6),\n\tPRIMARY KEY (id)\n)...\n2021-11-16 17:58:34,742 INFO sqlalchemy.engine.Engine COMMIT\n```", "```py\nfrom sqlalchemy.orm import sessionmaker\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n```", "```py\nalbert = Winner(**nobel_winners[0]) ![1](assets/1.png)\nsession.add(albert)\nsession.new ![2](assets/2.png)\nOut:\nIdentitySet([<Winner(name='Albert Einstein', category='Physics',\n             year='1921')>])\n```", "```py\nsession.expunge(albert) ![1](assets/1.png)\nsession.new\nOut:\nIdentitySet([])\n```", "```py\nwinner_rows = [Winner(**w) for w in nobel_winners]\nsession.add_all(winner_rows)\nsession.commit()\nOut:\nINFO:sqlalchemy.engine.base.Engine:BEGIN (implicit)\n...\nINFO:sqlalchemy.engine.base.Engine:INSERT INTO winners (name,\ncategory, year, nationality, gender) VALUES (?, ?, ?, ?, ?)\nINFO:sqlalchemy.engine.base.Engine:('Albert Einstein',\n'Physics', 1921, 'Swiss', 'male')\n...\nINFO:sqlalchemy.engine.base.Engine:COMMIT\n```", "```py\nsession.query(Winner).count()\nOut:\n3\n```", "```py\nresult = session.query(Winner).filter_by(nationality='Swiss') ![1](assets/1.png)\nlist(result)\nOut:\n[<Winner(name='Albert Einstein', category='Physics',\\\n  year='1921')>]\n```", "```py\nresult = session.query(Winner).filter(\\\n             Winner.category == 'Physics', \\\n             Winner.nationality != 'Swiss')\nlist(result)\nOut:\n[<Winner(name='Paul Dirac', category='Physics', year='1933')>]\n```", "```py\nsession.query(Winner).get(3)\nOut:\n<Winner(name='Marie Curie', category='Chemistry', year='1911')>\n```", "```py\nres = session.query(Winner).order_by('year')\nlist(res)\nOut:\n[<Winner(name='Marie Curie', category='Chemistry',\\\nyear='1911')>,\n <Winner(name='Albert Einstein', category='Physics',\\\nyear='1921')>,\n <Winner(name='Paul Dirac', category='Physics', year='1933')>]\n```", "```py\ndef inst_to_dict(inst, delete_id=True):\n    dat = {}\n    for column in inst.__table__.columns: ![1](assets/1.png)\n        dat[column.name] = getattr(inst, column.name)\n    if delete_id:\n        dat.pop('id') ![2](assets/2.png)\n    return dat\n```", "```py\nwinner_rows = session.query(Winner)\nnobel_winners = [inst_to_dict(w) for w in winner_rows]\nnobel_winners\nOut:\n[{'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\nmarie = session.query(Winner).get(3) ![1](assets/1.png)\nmarie.nationality = 'French'\nsession.dirty ![2](assets/2.png)\nOut:\nIdentitySet([<Winner(name='Marie Curie', category='Chemistry',\nyear='1911')>])\n```", "```py\nsession.commit()\nOut:\nINFO:sqlalchemy.engine.base.Engine:UPDATE winners SET\nnationality=? WHERE winners.id = ?\nINFO:sqlalchemy.engine.base.Engine:('French', 3)\n...\n\nsession.dirty\nOut:\nIdentitySet([])\n\nsession.query(Winner).get(3).nationality\nOut:\n'French'\n```", "```py\nsession.query(Winner).filter_by(name='Albert Einstein').delete()\nOut:\nINFO:sqlalchemy.engine.base.Engine:DELETE FROM winners WHERE\nwinners.name = ?\nINFO:sqlalchemy.engine.base.Engine:('Albert Einstein',)\n1\n\nlist(session.query(Winner))\nOut:\n[<Winner(name='Paul Dirac', category='Physics', year='1933')>,\n <Winner(name='Marie Curie', category='Chemistry',\\\n year='1911')>]\n```", "```py\nWinner.__table__.drop(engine)\n```", "```py\nimport dataset\n\ndb = dataset.connect('sqlite:///data/nobel_winners.db')\n```", "```py\nwtable = db['winners']\nwinners = wtable.find()\nwinners = list(winners)\nwinners\n#Out:\n#[OrderedDict([(u'id', 1), ('name', 'Albert Einstein'),\n# ('category', 'Physics'), ('year', 1921), ('nationality',\n# 'Swiss'), ('gender', 'male')]), OrderedDict([('id', 2),\n# ('name', 'Paul Dirac'), ('category', 'Physics'),\n# ('year', 1933), ('nationality', 'British'), ('gender',\n# 'male')]), OrderedDict([('id', 3), ('name', 'Marie\n# Curie'), ('category', 'Chemistry'), ('year', 1911),\n# ('nationality', 'Polish'), ('gender', 'female')])]\n```", "```py\nwtable = db['winners']\nwtable.drop()\n\nwtable = db['winners']\nwtable.find()\n#Out:\n#[]\n```", "```py\nwith db as tx: ![1](assets/1.png)\n     tx['winners'].insert_many(nobel_winners)\n```", "```py\nlist(db['winners'].find())\nOut:\n[OrderedDict([('id', 1), ('name', 'Albert Einstein'),\n('category', 'Physics'), ('year', 1921), ('nationality',\n'Swiss'), ('gender', 'male')]),\n...\n]\n```", "```py\nnobel_winners = [\n {'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\nfrom pymongo import MongoClient\n\nclient = MongoClient() ![1](assets/1.png)\ndb = client.nobel_prize ![2](assets/2.png)\ncoll = db.winners ![3](assets/3.png)\n```", "```py\nfrom pymongo import MongoClient\n\ndef get_mongo_database(db_name, host='localhost',\\\n                       port=27017, username=None, password=None):\n    \"\"\" Get named database from MongoDB with/out authentication \"\"\"\n    # make Mongo connection with/out authentication\n    if username and password:\n        mongo_uri = 'mongodb://%s:%s@%s/%s'%\\ ![1](assets/1.png)\n        (username, password, host, db_name)\n        conn = MongoClient(mongo_uri)\n    else:\n        conn = MongoClient(host, port)\n\n    return conn[db_name]\n```", "```py\ndb = get_mongo_database(DB_NOBEL_PRIZE)\ncoll = db[COLL_WINNERS]\n```", "```py\ncoll.insert_many(nobel_winners)\ncoll.find()\nOut:\n[{'_id': ObjectId('61940b7dc454e79ffb14cd25'),\n  'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'year': 1921,\n  'gender': 'male'},\n {'_id': ObjectId('61940b7dc454e79ffb14cd26'), ... }\n ...]\n```", "```py\nimport bson\noid = bson.ObjectId()\noid.generation_time\nOut: datetime.datetime(2015, 11, 4, 15, 43, 23...\n```", "```py\nres = coll.find({'category':'Chemistry'})\nlist(res)\nOut:\n[{'_id': ObjectId('55f8326f26a7112e547879d6'),\n  'category': 'Chemistry',\n  'name': 'Marie Curie',\n  'nationality': 'Polish',\n  'gender': 'female',\n  'year': 1911}]\n```", "```py\nres = coll.find({'year': {'$gt': 1930}})\nlist(res)\nOut:\n[{'_id': ObjectId('55f8326f26a7112e547879d5'),\n  'category': 'Physics',\n  'name': 'Paul Dirac',\n  'nationality': 'British',\n  'gender': 'male',\n  'year': 1933}]\n```", "```py\nres = coll.find({'$or':[{'year': {'$gt': 1930}},\\\n{'gender':'female'}]})\nlist(res)\nOut:\n[{'_id': ObjectId('55f8326f26a7112e547879d5'),\n  'category': 'Physics',\n  'name': 'Paul Dirac',\n  'nationality': 'British',\n  'gender': 'male',\n  'year': 1933},\n {'_id': ObjectId('55f8326f26a7112e547879d6'),\n  'category': 'Chemistry',\n  'name': 'Marie Curie',\n  'nationality': 'Polish',\n  'gender': 'female',\n  'year': 1911}]\n```", "```py\ndef mongo_coll_to_dicts(dbname='test', collname='test',\\\n                        query={}, del_id=True, **kw): ![1](assets/1.png)\n\n    db = get_mongo_database(dbname, **kw)\n    res = list(db[collname].find(query))\n\n    if del_id:\n        for r in res:\n            r.pop('_id')\n\n    return res\n```", "```py\nmongo_coll_to_dicts(DB_NOBEL_PRIZE, COLL_WINNERS)\nOut:\n[{'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'gender': 'male',\n  'year': 1921},\n  ...\n]\n```", "```py\nfrom datetime import datetime\n\nd = datetime.now()\nd.isoformat()\nOut:\n'2021-11-16T22:55:48.738105'\n```", "```py\n// JavaScript\nd = new Date('2021-11-16T22:55:48.738105')\n> Tue Nov 16 2021 22:55:48 GMT+0000 (Greenwich Mean Time)\n```", "```py\n// JavaScript\nd.toISOString()\n> '2021-11-16T22:55:48.738Z'\n```", "```py\nfrom dateutil import parser\n\nd = parser.parse('2021-11-16T22:55:48.738Z')\nd\nOut:\ndatetime.datetime(2021, 11, 16, 22, 55, 48, 738000,\\\ntzinfo=tzutc())\n```"]