["```py\nIn [1]: import numpy as np\n        rng = np.random.default_rng(seed=1701)\n\n        def compute_reciprocals(values):\n            output = np.empty(len(values))\n            for i in range(len(values)):\n                output[i] = 1.0 / values[i]\n            return output\n\n        values = rng.integers(1, 10, size=5)\n        compute_reciprocals(values)\nOut[1]: array([0.11111111, 0.25      , 1.        , 0.33333333, 0.125     ])\n```", "```py\nIn [2]: big_array = rng.integers(1, 100, size=1000000)\n        %timeit compute_reciprocals(big_array)\nOut[2]: 2.61 s ± 192 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn [3]: print(compute_reciprocals(values))\n        print(1.0 / values)\nOut[3]: [0.11111111 0.25       1.         0.33333333 0.125     ]\n        [0.11111111 0.25       1.         0.33333333 0.125     ]\n```", "```py\nIn [4]: %timeit (1.0 / big_array)\nOut[4]: 2.54 ms ± 383 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```", "```py\nIn [5]: np.arange(5) / np.arange(1, 6)\nOut[5]: array([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])\n```", "```py\nIn [6]: x = np.arange(9).reshape((3, 3))\n        2 ** x\nOut[6]: array([[  1,   2,   4],\n               [  8,  16,  32],\n               [ 64, 128, 256]])\n```", "```py\nIn [7]: x = np.arange(4)\n        print(\"x      =\", x)\n        print(\"x + 5  =\", x + 5)\n        print(\"x - 5  =\", x - 5)\n        print(\"x * 2  =\", x * 2)\n        print(\"x / 2  =\", x / 2)\n        print(\"x // 2 =\", x // 2)  # floor division\nOut[7]: x      = [0 1 2 3]\n        x + 5  = [5 6 7 8]\n        x - 5  = [-5 -4 -3 -2]\n        x * 2  = [0 2 4 6]\n        x / 2  = [0.  0.5 1.  1.5]\n        x // 2 = [0 0 1 1]\n```", "```py\nIn [8]: print(\"-x     = \", -x)\n        print(\"x ** 2 = \", x ** 2)\n        print(\"x % 2  = \", x % 2)\nOut[8]: -x     =  [ 0 -1 -2 -3]\n        x ** 2 =  [0 1 4 9]\n        x % 2  =  [0 1 0 1]\n```", "```py\nIn [9]: -(0.5*x + 1) ** 2\nOut[9]: array([-1.  , -2.25, -4.  , -6.25])\n```", "```py\nIn [10]: np.add(x, 2)\nOut[10]: array([2, 3, 4, 5])\n```", "```py\nIn [11]: x = np.array([-2, -1, 0, 1, 2])\n         abs(x)\nOut[11]: array([2, 1, 0, 1, 2])\n```", "```py\nIn [12]: np.absolute(x)\nOut[12]: array([2, 1, 0, 1, 2])\n```", "```py\nIn [13]: np.abs(x)\nOut[13]: array([2, 1, 0, 1, 2])\n```", "```py\nIn [14]: x = np.array([3 - 4j, 4 - 3j, 2 + 0j, 0 + 1j])\n         np.abs(x)\nOut[14]: array([5., 5., 2., 1.])\n```", "```py\nIn [15]: theta = np.linspace(0, np.pi, 3)\n```", "```py\nIn [16]: print(\"theta      = \", theta)\n         print(\"sin(theta) = \", np.sin(theta))\n         print(\"cos(theta) = \", np.cos(theta))\n         print(\"tan(theta) = \", np.tan(theta))\nOut[16]: theta      =  [0.         1.57079633 3.14159265]\n         sin(theta) =  [0.0000000e+00 1.0000000e+00 1.2246468e-16]\n         cos(theta) =  [ 1.000000e+00  6.123234e-17 -1.000000e+00]\n         tan(theta) =  [ 0.00000000e+00  1.63312394e+16 -1.22464680e-16]\n```", "```py\nIn [17]: x = [-1, 0, 1]\n         print(\"x         = \", x)\n         print(\"arcsin(x) = \", np.arcsin(x))\n         print(\"arccos(x) = \", np.arccos(x))\n         print(\"arctan(x) = \", np.arctan(x))\nOut[17]: x         =  [-1, 0, 1]\n         arcsin(x) =  [-1.57079633  0.          1.57079633]\n         arccos(x) =  [3.14159265 1.57079633 0.        ]\n         arctan(x) =  [-0.78539816  0.          0.78539816]\n```", "```py\nIn [18]: x = [1, 2, 3]\n         print(\"x   =\", x)\n         print(\"e^x =\", np.exp(x))\n         print(\"2^x =\", np.exp2(x))\n         print(\"3^x =\", np.power(3., x))\nOut[18]: x   = [1, 2, 3]\n         e^x = [ 2.71828183  7.3890561  20.08553692]\n         2^x = [2. 4. 8.]\n         3^x = [ 3.  9. 27.]\n```", "```py\nIn [19]: x = [1, 2, 4, 10]\n         print(\"x        =\", x)\n         print(\"ln(x)    =\", np.log(x))\n         print(\"log2(x)  =\", np.log2(x))\n         print(\"log10(x) =\", np.log10(x))\nOut[19]: x        = [1, 2, 4, 10]\n         ln(x)    = [0.         0.69314718 1.38629436 2.30258509]\n         log2(x)  = [0.         1.         2.         3.32192809]\n         log10(x) = [0.         0.30103    0.60205999 1.        ]\n```", "```py\nIn [20]: x = [0, 0.001, 0.01, 0.1]\n         print(\"exp(x) - 1 =\", np.expm1(x))\n         print(\"log(1 + x) =\", np.log1p(x))\nOut[20]: exp(x) - 1 = [0.         0.0010005  0.01005017 0.10517092]\n         log(1 + x) = [0.         0.0009995  0.00995033 0.09531018]\n```", "```py\nIn [21]: from scipy import special\n```", "```py\nIn [22]: # Gamma functions (generalized factorials) and related functions\n         x = [1, 5, 10]\n         print(\"gamma(x)     =\", special.gamma(x))\n         print(\"ln|gamma(x)| =\", special.gammaln(x))\n         print(\"beta(x, 2)   =\", special.beta(x, 2))\nOut[22]: gamma(x)     = [1.0000e+00 2.4000e+01 3.6288e+05]\n         ln|gamma(x)| = [ 0.          3.17805383 12.80182748]\n         beta(x, 2)   = [0.5        0.03333333 0.00909091]\n```", "```py\nIn [23]: # Error function (integral of Gaussian),\n         # its complement, and its inverse\n         x = np.array([0, 0.3, 0.7, 1.0])\n         print(\"erf(x)  =\", special.erf(x))\n         print(\"erfc(x) =\", special.erfc(x))\n         print(\"erfinv(x) =\", special.erfinv(x))\nOut[23]: erf(x)  = [0.         0.32862676 0.67780119 0.84270079]\n         erfc(x) = [1.         0.67137324 0.32219881 0.15729921]\n         erfinv(x) = [0.         0.27246271 0.73286908        inf]\n```", "```py\nIn [24]: x = np.arange(5)\n         y = np.empty(5)\n         np.multiply(x, 10, out=y)\n         print(y)\nOut[24]: [ 0. 10. 20. 30. 40.]\n```", "```py\nIn [25]: y = np.zeros(10)\n         np.power(2, x, out=y[::2])\n         print(y)\nOut[25]: [ 1.  0.  2.  0.  4.  0.  8.  0. 16.  0.]\n```", "```py\nIn [26]: x = np.arange(1, 6)\n         np.add.reduce(x)\nOut[26]: 15\n```", "```py\nIn [27]: np.multiply.reduce(x)\nOut[27]: 120\n```", "```py\nIn [28]: np.add.accumulate(x)\nOut[28]: array([ 1,  3,  6, 10, 15])\n```", "```py\nIn [29]: np.multiply.accumulate(x)\nOut[29]: array([  1,   2,   6,  24, 120])\n```", "```py\nIn [30]: x = np.arange(1, 6)\n         np.multiply.outer(x, x)\nOut[30]: array([[ 1,  2,  3,  4,  5],\n                [ 2,  4,  6,  8, 10],\n                [ 3,  6,  9, 12, 15],\n                [ 4,  8, 12, 16, 20],\n                [ 5, 10, 15, 20, 25]])\n```"]