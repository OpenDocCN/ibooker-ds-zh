["```py\nconda create --name geop_env python = 3.X \n```", "```py\nMacBook-Pro-8:~ USERNAME$ conda activate geop_env\n```", "```py\nconda install -c conda-forge geopandas\n```", "```py\nconda install -c conda-forge geospatial\n```", "```py\ngeopandas.datasets.available = ['naturalearth_cities', 'naturalearth_lowres',\n'nybb']\n```", "```py\ngeopandas.datasets.get_path(\"nybb\")\n```", "```py\n(geop_env) MacBook-Pro-8:~ USERNAME$ jupyter notebook\n```", "```py\n%matplotlib inline\n\nimport requests\nimport pandas as pd\nimport geopandas as gpd\n\nfrom scipy.spatial.distance import cdist\n```", "```py\nboros_world = gpd.read_file(gpd.datasets.get_path('nybb'))\nprint(f\"{type(boros_world)}, {boros_world.geometry.name}\")\nprint(boros_world.head())\nprint(boros_world.geometry.geom_type.value_counts())\n```", "```py\n<class 'geopandas.geodataframe.GeoDataFrame'>, geometry\n BoroCode  BoroName  Shape_Leng Shape_Area \\\n0   5   Staten Island 330470.010332 1.623820e+09 \n1   4   Queens 896344.047763 3.045213e+09 \n2   3   Brooklyn 741080.523166 1.937479e+09 \n3   1   Manhattan 359299.096471 6.364715e+08 \n4   2   Bronx 464392.991824 1.186925e+09 \n\n           geometry \n0 MULTIPOLYGON (((970217.022 145643.332, 970227.... \n1 MULTIPOLYGON (((1029606.077 156073.814, 102957... \n2 MULTIPOLYGON (((1021176.479 151374.797, 102100... \n3 MULTIPOLYGON (((981219.056 188655.316, 980940.... \n4 MULTIPOLYGON (((1012821.806 229228.265, 101278... \nMultiPolygon 5\ndtype: int64\n```", "```py\nboros = gpd.read_file(gpd.datasets.get_path('nybb'))\nax = boros.plot(figsize=(10, 10), alpha=0.5, edgecolor='k')\n```", "```py\nax.set_axis_off()\n```", "```py\nboros.loc[0,'geometry']\n```", "```py\ngdf = gdf.set_index(\"BoroName\")\ngdf[\"area\"] = gdf.area\ngdf[\"area\"]\n```", "```py\nBoroName\nStaten Island   1.623822e+09\nQueens          3.045214e+09\nBrooklyn        1.937478e+09\nManhattan       6.364712e+08\nBronx           1.186926e+09\nName: area, dtype: float64\n```", "```py\ngdf['boundary'] = gdf.boundary\ngdf['boundary']\n```", "```py\nBoroName\nStaten Island   MULTILINESTRING ((970217.022 145643.332, 97022...\nQueens          MULTILINESTRING ((1029606.077 156073.814, 1029...\nBrooklyn        MULTILINESTRING ((1021176.479 151374.797, 1021...\nManhattan       MULTILINESTRING ((981219.056 188655.316, 98094...\nBronx           MULTILINESTRING ((1012821.806 229228.265, 1012...\nName: boundary, dtype: geometry\n```", "```py\ngdf.explore(\"area\", legend=True)\n```", "```py\n!pip install geopandas #install separately to avoid errors\n\nimport requests # accessing from the CensusAPI **import** sys # checking python version **import** pandas **as** pd # working with dataframes **import** geopandas **as** gpd # creating maps **import** folium **as** fm # creating HTML map complete with OSM basemap\n```", "```py\n# Display package versions\nprint(\"Python Version\", sys.version)\nprint(\"requests version:\", requests.__version__)\nprint(\"pandas version:\", pd.__version__)\nprint(\"geopandas version:\", gpd.__version__)\nprint(\"folium version:\", fm.__version__)\n```", "```py\n'ftp://ftp2.census.gov/geo/tiger/TIGER2019/TRACT/tl_2019_06_tract.zip'\n```", "```py\n!wget ftp://ftp2.census.gov/geo/tiger/TIGER2019/TRACT/tl_2019_06_tract.zip\n```", "```py\n--2022-08-22 15:52:00--  ftp://ftp2.census.gov/geo/tiger/TIGER2019/TRACT/\ntl_2019_06_tract.zip\n           => 'tl_2019_06_tract.zip'\nResolving ftp2.census.gov (ftp2.census.gov)... 148.129.75.35, 2610:20:2010:a09:\n1000:0:9481:4b23\nConnecting to ftp2.census.gov (ftp2.census.gov)|148.129.75.35|:21... connected.\nLogging in as anonymous ... Logged in!\n==> SYST ... done.    ==> PWD ... done.\n==> TYPE I ... done.  ==> CWD (1) /geo/tiger/TIGER2019/TRACT ... done.\n==> SIZE tl_2019_06_tract.zip ... 29388806\n==> PASV ... done.    ==> RETR tl_2019_06_tract.zip ... done.\nLength: 29388806 (28M) (unauthoritative)\n\ntl_2019_06_tract.zi 100%[===================>]  28.03M   262KB/s    in 69s     \n\n2022-08-22 15:53:10 (416 KB/s) - 'tl_2019_06_tract.zip' saved [29388806]\n```", "```py\n'ftp://ftp2.census.gov/geo/tiger/TIGER2019/COUNTY/tl_2019_us_county.zip'\n!wget ftp://ftp2.census.gov/geo/tiger/TIGER2019/COUNTY/tl_2019_us_county.zip\n```", "```py\nca_tracts = gpd.read_file('/content/tl_2019_06_tract.shp')\nca_tracts.plot()\n```", "```py\ndf = pd.read_json(‘link to json file’)\n\ndf.to_csv()\ndf\n```", "```py\n# The built out request for the URL  https://api.census.gov/data/2010/dec/\nsf1?get=LSAD_NAME,P001001&for=tract:*&in=state:06 HOST = \"https://api.census.gov/data\" year = \"2010\" dataset = \"dec/sf1\" base_url = \"/\".join([HOST, year, dataset])\npredicates = {}\nget_vars = [\"LSAD_NAME\", \"P001001\"]\npredicates[\"get\"] = \",\".join(get_vars)\npredicates[\"for\"] = \"tract:*\" predicates[\"in\"] = \"state:06\" r = requests.get(base_url, params=predicates)\n```", "```py\nprint(r.json()[0])\n['LSAD_NAME', 'P001001', 'state', 'county', 'tract']\n```", "```py\n# Create user friendly column names tract_name = [\"tract_name\", \"tract_pop\", \"state_fips\", \"county_fips\", \n\"tract_fips\"]\n# Reading the json into pandas df tractdf = pd.DataFrame(columns=tract_name, data=r.json()[1:])\n# Changing data types to integer tractdf[\"tract_pop\"] = tractdf[\"tract_pop\"].astype(int)\n\ntractdf.head()\n```", "```py\nonecounty_tractdf = tractdf.loc[tractdf['county_fips'] == \n'037'].copy()Onecounty_tractdf\n```", "```py\nonecounty_tractdf['tract_fips'] = onecounty_tractdf['tract_fips'].str.ljust(6,'0')\nonecounty_tractdf['geoid'] = onecounty_tractdf['state_fips'] + \nonecounty_tractdf['county_fips'] + onecounty_tractdf['tract_fips']\nonecounty_tractdf\n```", "```py\nonecounty_tractdf.count()\n```", "```py\nca_tracts.info\n```", "```py\nattr_joined = pd.merge(ca_tracts, onecounty_tractdf, left_on='GEOID', \nright_on='geoid')\n# Check that all 2345 Census Tracts joined\nattr_joined.count()\n```", "```py\nmap = fm.Map(location=[center_y, center_x], zoom_start=10)\n\n# Add Study Area Block Groups to Map\nfm.Choropleth(\n   geo_data = ca_prj,\n   data=ca_prj,\n   columns=['tract_pop','ALAND'],\n   key_on= 'feature.properties.tract_pop',\n   fill_color='YlGnBu',\n   name = 'Population Density',\n   legend_name='Population Density'\n).add_to(map)\nmap\n```", "```py\n# Create a new column for Census Tract area in square Kilometers ca_prj['AreaLandKM2'] = (ca_prj['ALAND'] * .000001)\n\nca_prj[['geoid','TRACTCE','ALAND','AWATER','AreaLandKM2']].head()\n\nca_prj['ppl_perKM2']=(ca_prj['tract_pop']/ca_prj['AreaLandKM2'])\nca_prj[['geoid','TRACTCE','tract_pop','AreaLandKM2','ppl_perKM2']].head(16)\n```", "```py\ncenter_x = (ca_prj.bounds.minx.mean() + ca_prj.bounds.maxx.mean())/2\ncenter_y = (ca_prj.bounds.miny.mean() + ca_prj.bounds.maxy.mean())/2\nprint(f'The center of the data file is located at {center_x} {center_y}')\n```", "```py\nmap = fm.Map(location=[center_y, center_x], zoom_start=10)\n\n# Add Study Area Block Groups to Map\nfm.Choropleth(\n   geo_data = ca_prj,\n   data=ca_prj,\n   columns=['TRACTCE','ppl_perKM2'],\n   key_on= 'feature.properties.TRACTCE',\n   fill_color='YlGnBu',\n   name = 'Population Density',\n   legend_name='Population Density'\n).add_to(map)\nmap\n```"]