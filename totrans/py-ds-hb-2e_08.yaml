- en: 'Chapter 6\. Computation on NumPy Arrays: Universal Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章：NumPy 数组上的计算：通用函数
- en: 'Up until now, we have been discussing some of the basic nuts and bolts of NumPy.
    In the next few chapters, we will dive into the reasons that NumPy is so important
    in the Python data science world: namely, because it provides an easy and flexible
    interface to optimize computation with arrays of data.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 NumPy 的一些基本要点。在接下来的几章中，我们将深入探讨 NumPy 在 Python 数据科学世界中如此重要的原因：因为它提供了一个简单灵活的接口来优化数据数组的计算。
- en: Computation on NumPy arrays can be very fast, or it can be very slow. The key
    to making it fast is to use vectorized operations, generally implemented through
    NumPy’s *universal functions* (ufuncs). This chapter motivates the need for NumPy’s
    ufuncs, which can be used to make repeated calculations on array elements much
    more efficient. It then introduces many of the most common and useful arithmetic
    ufuncs available in the NumPy package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组上的计算可能非常快，也可能非常慢。使其快速的关键在于使用向量化操作，通常通过 NumPy 的*通用函数*（ufuncs）实现。本章阐述了使用
    NumPy ufuncs 的必要性，它可以使对数组元素的重复计算更加高效。然后介绍了 NumPy 包中许多常见和有用的算术 ufuncs。
- en: The Slowness of Loops
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环的缓慢性
- en: 'Python’s default implementation (known as CPython) does some operations very
    slowly. This is partly due to the dynamic, interpreted nature of the language;
    types are flexible, so sequences of operations cannot be compiled down to efficient
    machine code as in languages like C and Fortran. Recently there have been various
    attempts to address this weakness: well-known examples are the [PyPy project](http://pypy.org),
    a just-in-time compiled implementation of Python; the [Cython project](http://cython.org),
    which converts Python code to compilable C code; and the [Numba project](http://numba.pydata.org),
    which converts snippets of Python code to fast LLVM bytecode. Each of these has
    its strengths and weaknesses, but it is safe to say that none of the three approaches
    has yet surpassed the reach and popularity of the standard CPython engine.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的默认实现（称为 CPython）有时会非常慢地执行某些操作。这在一定程度上是由于语言的动态解释性质造成的；类型灵活，因此无法像 C 和
    Fortran 语言那样将操作序列编译成高效的机器码。近年来，有各种尝试来解决这一弱点：著名的例子有 [PyPy 项目](http://pypy.org)，一个即时编译的
    Python 实现；[Cython 项目](http://cython.org)，它将 Python 代码转换为可编译的 C 代码；以及 [Numba 项目](http://numba.pydata.org)，它将
    Python 代码片段转换为快速的 LLVM 字节码。每种方法都有其优势和劣势，但可以肯定的是，这三种方法都还没有超越标准 CPython 引擎的普及度和影响力。
- en: 'The relative sluggishness of Python generally manifests itself in situations
    where many small operations are being repeated; for instance, looping over arrays
    to operate on each element. For example, imagine we have an array of values and
    we’d like to compute the reciprocal of each. A straightforward approach might
    look like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的相对缓慢通常在需要重复执行许多小操作的情况下显现出来；例如，循环遍历数组以对每个元素进行操作。例如，假设我们有一个值数组，并且想要计算每个值的倒数。一个直接的方法可能如下所示：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This implementation probably feels fairly natural to someone from, say, a C
    or Java background. But if we measure the execution time of this code for a large
    input, we see that this operation is very slow—perhaps surprisingly so! We’ll
    benchmark this with IPython’s `%timeit` magic (discussed in [“Profiling and Timing
    Code”](ch03.xhtml#section-0107-timing-and-profiling)):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现对于来自 C 或 Java 背景的人来说可能感觉相当自然。但是如果我们测量这段代码在大输入下的执行时间，我们会发现这个操作非常慢——也许出乎意料地慢！我们将使用
    IPython 的 `%timeit` 魔术命令（在[“分析和计时代码”](ch03.xhtml#section-0107-timing-and-profiling)中讨论）进行基准测试：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It takes several seconds to compute these million operations and to store the
    result! When even cell phones have processing speeds measured in gigaflops (i.e.,
    billions of numerical operations per second), this seems almost absurdly slow.
    It turns out that the bottleneck here is not the operations themselves, but the
    type checking and function dispatches that CPython must do at each cycle of the
    loop. Each time the reciprocal is computed, Python first examines the object’s
    type and does a dynamic lookup of the correct function to use for that type. If
    we were working in compiled code instead, this type specification would be known
    before the code executed and the result could be computed much more efficiently.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 计算这些百万次操作并存储结果需要几秒钟！即使是手机的处理速度也以亿次数的每秒运算来衡量，这看起来几乎是荒谬地慢。事实证明，这里的瓶颈不是操作本身，而是CPython在每个循环周期中必须进行的类型检查和函数调度。每次计算倒数时，Python首先检查对象的类型，并动态查找正确的函数来使用该类型。如果我们在编译代码中工作，这种类型规范将在代码执行之前已知，并且结果可以更有效地计算。
- en: Introducing Ufuncs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Ufuncs
- en: For many types of operations, NumPy provides a convenient interface into just
    this kind of statically typed, compiled routine. This is known as a *vectorized*
    operation. For simple operations like the element-wise division here, vectorization
    is as simple as using Python arithmetic operators directly on the array object.
    This vectorized approach is designed to push the loop into the compiled layer
    that underlies NumPy, leading to much faster execution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多类型的操作，NumPy提供了一个便利的接口，用于这种静态类型化的、编译的例程。这被称为*向量化*操作。对于像这里的逐元素除法这样的简单操作，向量化操作只需直接在数组对象上使用Python算术运算符即可。这种向量化方法旨在将循环推入NumPy底层的编译层，从而实现更快的执行。
- en: 'Compare the results of the following two operations:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 比较以下两个操作的结果：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Looking at the execution time for our big array, we see that it completes orders
    of magnitude faster than the Python loop:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们大数组的执行时间，我们看到它完成的速度比Python循环快了几个数量级：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Vectorized operations in NumPy are implemented via ufuncs, whose main purpose
    is to quickly execute repeated operations on values in NumPy arrays. Ufuncs are
    extremely flexible—before we saw an operation between a scalar and an array, but
    we can also operate between two arrays:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy中的向量化操作是通过ufuncs实现的，其主要目的是在NumPy数组中快速执行重复操作。Ufuncs非常灵活——我们之前看到了标量和数组之间的操作，但我们也可以在两个数组之间进行操作：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And ufunc operations are not limited to one-dimensional arrays. They can act
    on multidimensional arrays as well:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 并且ufunc操作不仅限于一维数组。它们也可以作用于多维数组：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Computations using vectorization through ufuncs are nearly always more efficient
    than their counterparts implemented using Python loops, especially as the arrays
    grow in size. Any time you see such a loop in a NumPy script, you should consider
    whether it can be replaced with a vectorized expression.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ufunc的向量化计算几乎总是比使用Python循环实现的对应计算更有效率，特别是数组增长时。在NumPy脚本中看到这样的循环时，您应该考虑是否可以用向量化表达式替代它。
- en: Exploring NumPy’s Ufuncs
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索NumPy的Ufuncs
- en: 'Ufuncs exist in two flavors: *unary ufuncs*, which operate on a single input,
    and *binary ufuncs*, which operate on two inputs. We’ll see examples of both these
    types of functions here.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ufuncs有两种类型：*一元ufuncs*，作用于单个输入，和*二元ufuncs*，作用于两个输入。我们将在这里看到这两种类型的函数示例。
- en: Array Arithmetic
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组算术
- en: 'NumPy’s ufuncs feel very natural to use because they make use of Python’s native
    arithmetic operators. The standard addition, subtraction, multiplication, and
    division can all be used:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的ufunc使用起来非常自然，因为它们利用了Python的本机算术运算符。可以使用标准的加法、减法、乘法和除法：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There is also a unary ufunc for negation, a `**` operator for exponentiation,
    and a `%` operator for modulus:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个一元ufunc用于求反，一个`**`运算符用于指数运算，一个`%`运算符用于求模：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition, these can be strung together however you wish, and the standard
    order of operations is respected:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些操作可以随意组合在一起，而且遵循标准的操作顺序：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All of these arithmetic operations are simply convenient wrappers around specific
    ufuncs built into NumPy. For example, the `+` operator is a wrapper for the `add`
    ufunc:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些算术操作都只是围绕着NumPy中特定ufunc的方便包装。例如，`+`运算符是`add` ufunc的一个包装器。
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[Table 6-1](#table-6-1) lists the arithmetic operators implemented in NumPy.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 6-1](#table-6-1) 列出了NumPy中实现的算术运算符。'
- en: Table 6-1\. Arithmetic operators implemented in NumPy
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表6-1\. NumPy中实现的算术运算符
- en: '| Operator | Equivalent ufunc | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 等效ufunc | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `+` | `np.add` | Addition (e.g., `1 + 1 = 2`) |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `+` | `np.add` | 加法（例如，`1 + 1 = 2`）|'
- en: '| `-` | `np.subtract` | Subtraction (e.g., `3 - 2 = 1`) |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `-` | `np.subtract` | 减法（例如，`3 - 2 = 1`）|'
- en: '| `-` | `np.negative` | Unary negation (e.g., `-2`) |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `-` | `np.negative` | 一元取反（例如，`-2`）|'
- en: '| `*` | `np.multiply` | Multiplication (e.g., `2 * 3 = 6`) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `*` | `np.multiply` | 乘法（例如，`2 * 3 = 6`）|'
- en: '| `/` | `np.divide` | Division (e.g., `3 / 2 = 1.5`) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `/` | `np.divide` | 除法（例如，`3 / 2 = 1.5`）|'
- en: '| `//` | `np.floor_divide` | Floor division (e.g., `3 // 2 = 1`) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `//` | `np.floor_divide` | 地板除法（例如，`3 // 2 = 1`）|'
- en: '| `**` | `np.power` | Exponentiation (e.g., `2 ** 3 = 8`) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `**` | `np.power` | 指数运算（例如，`2 ** 3 = 8`）|'
- en: '| `%` | `np.mod` | Modulus/remainder (e.g., `9 % 4 = 1`) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `%` | `np.mod` | 取模/取余数（例如，`9 % 4 = 1`）|'
- en: Additionally, there are Boolean/bitwise operators; we will explore these in
    [Chapter 9](ch09.xhtml#section-0206-boolean-arrays-and-masks).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有布尔/位运算符；我们将在[第9章](ch09.xhtml#section-0206-boolean-arrays-and-masks)中探索这些。
- en: Absolute Value
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对值
- en: 'Just as NumPy understands Python’s built-in arithmetic operators, it also understands
    Python’s built-in absolute value function:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 就像NumPy理解Python内置的算术运算符一样，它也理解Python内置的绝对值函数：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The corresponding NumPy ufunc is `np.absolute`, which is also available under
    the alias `np.abs`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的NumPy ufunc是`np.absolute`，也可以用别名`np.abs`调用：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This ufunc can also handle complex data, in which case it returns the magnitude:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个ufunc也可以处理复杂数据，此时它返回幅度：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Trigonometric Functions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三角函数
- en: 'NumPy provides a large number of useful ufuncs, and some of the most useful
    for the data scientist are the trigonometric functions. We’ll start by defining
    an array of angles:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy提供了大量有用的ufunc，对于数据科学家来说，其中一些最有用的是三角函数。我们将从定义一组角度开始：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can compute some trigonometric functions on these values:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在这些值上计算一些三角函数了：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The values are computed to within machine precision, which is why values that
    should be zero do not always hit exactly zero. Inverse trigonometric functions
    are also available:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值计算精度达到了机器精度，这就是为什么应该是零的值并不总是确切为零。反三角函数也是可用的：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Exponents and Logarithms
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指数和对数
- en: 'Other common operations available in NumPy ufuncs are the exponentials:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy的ufunc中还有其他常见的操作，如指数函数：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The inverse of the exponentials, the logarithms, are also available. The basic
    `np.log` gives the natural logarithm; if you prefer to compute the base-2 logarithm
    or the base-10 logarithm, these are available as well:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 逆指数函数，对数函数也是可用的。基本的`np.log`给出自然对数；如果你偏好计算以2为底或以10为底的对数，这些也是可用的：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are also some specialized versions that are useful for maintaining precision
    with very small input:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些专门用于保持极小输入精度的版本：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When `x` is very small, these functions give more precise values than if the
    raw `np.log` or `np.exp` were to be used.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当`x`非常小时，这些函数比使用原始的`np.log`或`np.exp`给出更精确的值。
- en: Specialized Ufuncs
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专用的Ufuncs
- en: NumPy has many more ufuncs available, including for hyperbolic trigonometry,
    bitwise arithmetic, comparison operations, conversions from radians to degrees,
    rounding and remainders, and much more. A look through the NumPy documentation
    reveals a lot of interesting functionality.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy还有许多其他的ufunc可用，包括双曲三角函数，位运算，比较操作，弧度转角度的转换，取整和余数等等。查阅NumPy文档会发现许多有趣的功能。
- en: 'Another excellent source for more specialized ufuncs is the submodule `scipy.special`.
    If you want to compute some obscure mathematical function on your data, chances
    are it is implemented in `scipy.special`. There are far too many functions to
    list them all, but the following snippet shows a couple that might come up in
    a statistics context:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个更专业的ufunc来源是子模块`scipy.special`。如果你想在数据上计算一些不常见的数学函数，很可能它已经在`scipy.special`中实现了。这里有太多函数无法一一列出，但以下代码片段展示了在统计上可能会遇到的一些函数：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are many, many more ufuncs available in both NumPy and `scipy.special`.
    Because the documentation of these packages is available online, a web search
    along the lines of “gamma function python” will generally find the relevant information.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和`scipy.special`中还有许多其他的ufunc可用。由于这些包的文档可以在线获取，因此通过类似“gamma function python”的网络搜索通常可以找到相关信息。
- en: Advanced Ufunc Features
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级Ufunc功能
- en: Many NumPy users make use of ufuncs without ever learning their full set of
    features. I’ll outline a few specialized features of ufuncs here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 许多NumPy用户在不完全了解它们的全部特性的情况下就使用了ufuncs。我在这里概述一些ufunc的专门特性。
- en: Specifying Output
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定输出
- en: 'For large calculations, it is sometimes useful to be able to specify the array
    where the result of the calculation will be stored. For all ufuncs, this can be
    done using the `out` argument of the function:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型计算，有时指定计算结果存储的数组是很有用的。对于所有ufunc，这可以通过函数的`out`参数来完成：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This can even be used with array views. For example, we can write the results
    of a computation to every other element of a specified array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这甚至可以与数组视图一起使用。例如，我们可以将计算结果写入指定数组的每隔一个元素：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we had instead written `y[::2] = 2 ** x`, this would have resulted in the
    creation of a temporary array to hold the results of `2 ** x`, followed by a second
    operation copying those values into the `y` array. This doesn’t make much of a
    difference for such a small computation, but for very large arrays the memory
    savings from careful use of the `out` argument can be significant.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改为写成`y[::2] = 2 ** x`，这将导致创建一个临时数组来保存`2 ** x`的结果，然后进行第二个操作将这些值复制到`y`数组中。对于这样一个小的计算来说，这并不会有太大的区别，但是对于非常大的数组来说，通过谨慎使用`out`参数可以节省内存。
- en: Aggregations
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聚合
- en: For binary ufuncs, aggregations can be computed directly from the object. For
    example, if we’d like to *reduce* an array with a particular operation, we can
    use the `reduce` method of any ufunc. A reduce repeatedly applies a given operation
    to the elements of an array until only a single result remains.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二元ufunc，聚合可以直接从对象中计算。例如，如果我们想要使用特定操作*减少*一个数组，我们可以使用任何ufunc的`reduce`方法。reduce会重复地将给定操作应用于数组的元素，直到只剩下一个单一的结果。
- en: 'For example, calling `reduce` on the `add` ufunc returns the sum of all elements
    in the array:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对`add` ufunc调用`reduce`将返回数组中所有元素的总和：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Similarly, calling `reduce` on the `multiply` ufunc results in the product
    of all array elements:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对`multiply` ufunc调用`reduce`将得到数组所有元素的乘积：
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If we’d like to store all the intermediate results of the computation, we can
    instead use `accumulate`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要存储计算的所有中间结果，我们可以使用`accumulate`：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that for these particular cases, there are dedicated NumPy functions to
    compute the results (`np.sum`, `np.prod`, `np.cumsum`, `np.cumprod`), which we’ll
    explore in [Chapter 7](ch07.xhtml#section-0204-computation-on-arrays-aggregates).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于这些特定情况，有专门的NumPy函数来计算结果（`np.sum`，`np.prod`，`np.cumsum`，`np.cumprod`），我们将在[第7章](ch07.xhtml#section-0204-computation-on-arrays-aggregates)中探讨。
- en: Outer Products
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外积
- en: 'Finally, any ufunc can compute the output of all pairs of two different inputs
    using the `outer` method. This allows you, in one line, to do things like create
    a multiplication table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，任何ufunc都可以使用`outer`方法计算两个不同输入的所有对的输出。这使您可以在一行中执行诸如创建乘法表之类的操作：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `ufunc.at` and `ufunc.reduceat` methods are useful as well, and we will
    explore them in [Chapter 10](ch10.xhtml#section-0207-fancy-indexing).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`ufunc.at`和`ufunc.reduceat`方法同样也是非常有用的，我们将在[第10章](ch10.xhtml#section-0207-fancy-indexing)中探讨它们。'
- en: We will also encounter the ability of ufuncs to operate between arrays of different
    shapes and sizes, a set of operations known as *broadcasting*. This subject is
    important enough that we will devote a whole chapter to it (see [Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将遇到ufunc能够在不同形状和大小的数组之间执行操作的能力，这一组操作被称为*广播*。这个主题非常重要，我们将专门为其设立一整章（参见[第8章](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)）。
- en: 'Ufuncs: Learning More'
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ufuncs：了解更多
- en: More information on universal functions (including the full list of available
    functions) can be found on the [NumPy](http://www.numpy.org) and [SciPy](http://www.scipy.org)
    documentation websites.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关通用函数的信息（包括可用函数的完整列表）可以在[NumPy](http://www.numpy.org)和[SciPy](http://www.scipy.org)文档网站上找到。
- en: Recall that you can also access information directly from within IPython by
    importing the packages and using IPython’s tab completion and help (`?`) functionality,
    as described in [Chapter 1](ch01.xhtml#section-0101-help-and-documentation).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请回忆，您还可以通过在IPython中导入包并使用IPython的tab补全和帮助（`?`）功能来直接访问信息，如[第1章](ch01.xhtml#section-0101-help-and-documentation)中所述。
