- en: 'Chapter 6\. Computation on NumPy Arrays: Universal Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until now, we have been discussing some of the basic nuts and bolts of NumPy.
    In the next few chapters, we will dive into the reasons that NumPy is so important
    in the Python data science world: namely, because it provides an easy and flexible
    interface to optimize computation with arrays of data.'
  prefs: []
  type: TYPE_NORMAL
- en: Computation on NumPy arrays can be very fast, or it can be very slow. The key
    to making it fast is to use vectorized operations, generally implemented through
    NumPy’s *universal functions* (ufuncs). This chapter motivates the need for NumPy’s
    ufuncs, which can be used to make repeated calculations on array elements much
    more efficient. It then introduces many of the most common and useful arithmetic
    ufuncs available in the NumPy package.
  prefs: []
  type: TYPE_NORMAL
- en: The Slowness of Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python’s default implementation (known as CPython) does some operations very
    slowly. This is partly due to the dynamic, interpreted nature of the language;
    types are flexible, so sequences of operations cannot be compiled down to efficient
    machine code as in languages like C and Fortran. Recently there have been various
    attempts to address this weakness: well-known examples are the [PyPy project](http://pypy.org),
    a just-in-time compiled implementation of Python; the [Cython project](http://cython.org),
    which converts Python code to compilable C code; and the [Numba project](http://numba.pydata.org),
    which converts snippets of Python code to fast LLVM bytecode. Each of these has
    its strengths and weaknesses, but it is safe to say that none of the three approaches
    has yet surpassed the reach and popularity of the standard CPython engine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The relative sluggishness of Python generally manifests itself in situations
    where many small operations are being repeated; for instance, looping over arrays
    to operate on each element. For example, imagine we have an array of values and
    we’d like to compute the reciprocal of each. A straightforward approach might
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This implementation probably feels fairly natural to someone from, say, a C
    or Java background. But if we measure the execution time of this code for a large
    input, we see that this operation is very slow—perhaps surprisingly so! We’ll
    benchmark this with IPython’s `%timeit` magic (discussed in [“Profiling and Timing
    Code”](ch03.xhtml#section-0107-timing-and-profiling)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It takes several seconds to compute these million operations and to store the
    result! When even cell phones have processing speeds measured in gigaflops (i.e.,
    billions of numerical operations per second), this seems almost absurdly slow.
    It turns out that the bottleneck here is not the operations themselves, but the
    type checking and function dispatches that CPython must do at each cycle of the
    loop. Each time the reciprocal is computed, Python first examines the object’s
    type and does a dynamic lookup of the correct function to use for that type. If
    we were working in compiled code instead, this type specification would be known
    before the code executed and the result could be computed much more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Ufuncs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For many types of operations, NumPy provides a convenient interface into just
    this kind of statically typed, compiled routine. This is known as a *vectorized*
    operation. For simple operations like the element-wise division here, vectorization
    is as simple as using Python arithmetic operators directly on the array object.
    This vectorized approach is designed to push the loop into the compiled layer
    that underlies NumPy, leading to much faster execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare the results of the following two operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the execution time for our big array, we see that it completes orders
    of magnitude faster than the Python loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Vectorized operations in NumPy are implemented via ufuncs, whose main purpose
    is to quickly execute repeated operations on values in NumPy arrays. Ufuncs are
    extremely flexible—before we saw an operation between a scalar and an array, but
    we can also operate between two arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And ufunc operations are not limited to one-dimensional arrays. They can act
    on multidimensional arrays as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Computations using vectorization through ufuncs are nearly always more efficient
    than their counterparts implemented using Python loops, especially as the arrays
    grow in size. Any time you see such a loop in a NumPy script, you should consider
    whether it can be replaced with a vectorized expression.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring NumPy’s Ufuncs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ufuncs exist in two flavors: *unary ufuncs*, which operate on a single input,
    and *binary ufuncs*, which operate on two inputs. We’ll see examples of both these
    types of functions here.'
  prefs: []
  type: TYPE_NORMAL
- en: Array Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy’s ufuncs feel very natural to use because they make use of Python’s native
    arithmetic operators. The standard addition, subtraction, multiplication, and
    division can all be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also a unary ufunc for negation, a `**` operator for exponentiation,
    and a `%` operator for modulus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, these can be strung together however you wish, and the standard
    order of operations is respected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'All of these arithmetic operations are simply convenient wrappers around specific
    ufuncs built into NumPy. For example, the `+` operator is a wrapper for the `add`
    ufunc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[Table 6-1](#table-6-1) lists the arithmetic operators implemented in NumPy.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Arithmetic operators implemented in NumPy
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Equivalent ufunc | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | `np.add` | Addition (e.g., `1 + 1 = 2`) |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | `np.subtract` | Subtraction (e.g., `3 - 2 = 1`) |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | `np.negative` | Unary negation (e.g., `-2`) |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | `np.multiply` | Multiplication (e.g., `2 * 3 = 6`) |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | `np.divide` | Division (e.g., `3 / 2 = 1.5`) |'
  prefs: []
  type: TYPE_TB
- en: '| `//` | `np.floor_divide` | Floor division (e.g., `3 // 2 = 1`) |'
  prefs: []
  type: TYPE_TB
- en: '| `**` | `np.power` | Exponentiation (e.g., `2 ** 3 = 8`) |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | `np.mod` | Modulus/remainder (e.g., `9 % 4 = 1`) |'
  prefs: []
  type: TYPE_TB
- en: Additionally, there are Boolean/bitwise operators; we will explore these in
    [Chapter 9](ch09.xhtml#section-0206-boolean-arrays-and-masks).
  prefs: []
  type: TYPE_NORMAL
- en: Absolute Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as NumPy understands Python’s built-in arithmetic operators, it also understands
    Python’s built-in absolute value function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding NumPy ufunc is `np.absolute`, which is also available under
    the alias `np.abs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This ufunc can also handle complex data, in which case it returns the magnitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Trigonometric Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NumPy provides a large number of useful ufuncs, and some of the most useful
    for the data scientist are the trigonometric functions. We’ll start by defining
    an array of angles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can compute some trigonometric functions on these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The values are computed to within machine precision, which is why values that
    should be zero do not always hit exactly zero. Inverse trigonometric functions
    are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Exponents and Logarithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other common operations available in NumPy ufuncs are the exponentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The inverse of the exponentials, the logarithms, are also available. The basic
    `np.log` gives the natural logarithm; if you prefer to compute the base-2 logarithm
    or the base-10 logarithm, these are available as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also some specialized versions that are useful for maintaining precision
    with very small input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When `x` is very small, these functions give more precise values than if the
    raw `np.log` or `np.exp` were to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Specialized Ufuncs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy has many more ufuncs available, including for hyperbolic trigonometry,
    bitwise arithmetic, comparison operations, conversions from radians to degrees,
    rounding and remainders, and much more. A look through the NumPy documentation
    reveals a lot of interesting functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another excellent source for more specialized ufuncs is the submodule `scipy.special`.
    If you want to compute some obscure mathematical function on your data, chances
    are it is implemented in `scipy.special`. There are far too many functions to
    list them all, but the following snippet shows a couple that might come up in
    a statistics context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There are many, many more ufuncs available in both NumPy and `scipy.special`.
    Because the documentation of these packages is available online, a web search
    along the lines of “gamma function python” will generally find the relevant information.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Ufunc Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many NumPy users make use of ufuncs without ever learning their full set of
    features. I’ll outline a few specialized features of ufuncs here.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For large calculations, it is sometimes useful to be able to specify the array
    where the result of the calculation will be stored. For all ufuncs, this can be
    done using the `out` argument of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This can even be used with array views. For example, we can write the results
    of a computation to every other element of a specified array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If we had instead written `y[::2] = 2 ** x`, this would have resulted in the
    creation of a temporary array to hold the results of `2 ** x`, followed by a second
    operation copying those values into the `y` array. This doesn’t make much of a
    difference for such a small computation, but for very large arrays the memory
    savings from careful use of the `out` argument can be significant.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For binary ufuncs, aggregations can be computed directly from the object. For
    example, if we’d like to *reduce* an array with a particular operation, we can
    use the `reduce` method of any ufunc. A reduce repeatedly applies a given operation
    to the elements of an array until only a single result remains.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, calling `reduce` on the `add` ufunc returns the sum of all elements
    in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, calling `reduce` on the `multiply` ufunc results in the product
    of all array elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If we’d like to store all the intermediate results of the computation, we can
    instead use `accumulate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that for these particular cases, there are dedicated NumPy functions to
    compute the results (`np.sum`, `np.prod`, `np.cumsum`, `np.cumprod`), which we’ll
    explore in [Chapter 7](ch07.xhtml#section-0204-computation-on-arrays-aggregates).
  prefs: []
  type: TYPE_NORMAL
- en: Outer Products
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, any ufunc can compute the output of all pairs of two different inputs
    using the `outer` method. This allows you, in one line, to do things like create
    a multiplication table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `ufunc.at` and `ufunc.reduceat` methods are useful as well, and we will
    explore them in [Chapter 10](ch10.xhtml#section-0207-fancy-indexing).
  prefs: []
  type: TYPE_NORMAL
- en: We will also encounter the ability of ufuncs to operate between arrays of different
    shapes and sizes, a set of operations known as *broadcasting*. This subject is
    important enough that we will devote a whole chapter to it (see [Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Ufuncs: Learning More'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More information on universal functions (including the full list of available
    functions) can be found on the [NumPy](http://www.numpy.org) and [SciPy](http://www.scipy.org)
    documentation websites.
  prefs: []
  type: TYPE_NORMAL
- en: Recall that you can also access information directly from within IPython by
    importing the packages and using IPython’s tab completion and help (`?`) functionality,
    as described in [Chapter 1](ch01.xhtml#section-0101-help-and-documentation).
  prefs: []
  type: TYPE_NORMAL
