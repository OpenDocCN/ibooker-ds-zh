- en: Chapter 1\. Getting Started in IPython and Jupyter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章\. 在 IPython 和 Jupyter 中开始
- en: 'In writing Python code for data science, I generally go between three modes
    of working: I use the IPython shell for trying out short sequences of commands,
    the Jupyter Notebook for longer interactive analysis and for sharing content with
    others, and interactive development environments (IDEs) like Emacs or VSCode for
    creating reusable Python packages. This chapter focuses on the first two modes:
    the IPython shell and the Jupyter Notebook. Use of an IDE for software development
    is an important third tool in the data scientist’s repertoire, but we will not
    directly address that here.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写数据科学的 Python 代码时，我通常会在三种工作模式之间切换：我使用 IPython shell 尝试短命令序列，使用 Jupyter Notebook
    进行更长时间的交互分析和与他人共享内容，并使用诸如 Emacs 或 VSCode 的交互式开发环境（IDE）创建可重复使用的 Python 包。本章重点介绍前两种模式：IPython
    shell 和 Jupyter Notebook。虽然软件开发中使用 IDE 是数据科学家工具箱中的重要第三工具，但我们在此不会直接讨论它。
- en: Launching the IPython Shell
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 IPython Shell
- en: 'The text in this part, like most of this book, is not designed to be absorbed
    passively. I recommend that as you read through it, you follow along and experiment
    with the tools and syntax we cover: the muscle memory you build through doing
    this will be far more useful than the simple act of reading about it. Start by
    launching the IPython interpreter by typing **`ipython`** on the command line;
    alternatively, if you’ve installed a distribution like Anaconda or EPD, there
    may be a launcher specific to your system.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此书大部分的文本，包括本部分，都不是设计用于被被动吸收的。我建议您在阅读时跟随并尝试所涵盖的工具和语法：通过这样做建立的肌肉记忆将比仅仅阅读要有用得多。首先通过在命令行上键入
    **`ipython`** 来启动 IPython 解释器；或者，如果您安装了像 Anaconda 或 EPD 这样的发行版，可能会有一个特定于您系统的启动器。
- en: 'Once you do this, you should see a prompt like the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此操作，您应该看到如下提示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With that, you’re ready to follow along.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了，现在可以跟着进行。
- en: Launching the Jupyter Notebook
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 Jupyter Notebook
- en: The Jupyter Notebook is a browser-based graphical interface to the IPython shell,
    and builds on it a rich set of dynamic display capabilities. As well as executing
    Python/IPython statements, notebooks allow the user to include formatted text,
    static and dynamic visualizations, mathematical equations, JavaScript widgets,
    and much more. Furthermore, these documents can be saved in a way that lets other
    people open them and execute the code on their own systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 是一个基于浏览器的图形界面，用于 IPython shell，并在此基础上提供了丰富的动态显示功能。除了执行 Python/IPython
    语句外，笔记本还允许用户包括格式化文本、静态和动态可视化、数学方程、JavaScript 小部件等。此外，这些文档可以以一种方式保存，让其他人能够打开它们并在自己的系统上执行代码。
- en: 'Though you’ll view and edit Jupyter notebooks through your web browser window,
    they must connect to a running Python process in order to execute code. You can
    start this process (known as a “kernel”) by running the following command in your
    system shell:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您将通过 Web 浏览器窗口查看和编辑 Jupyter 笔记本，但它们必须连接到正在运行的 Python 进程以执行代码。您可以通过在系统 shell
    中运行以下命令来启动此进程（称为“内核”）：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command launches a local web server that will be visible to your browser.
    It immediately spits out a log showing what it is doing; that log will look something
    like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令启动一个本地 Web 服务器，该服务器将对您的浏览器可见。它立即输出一个显示其正在执行的日志；该日志看起来会像这样：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Upon issuing the command, your default browser should automatically open and
    navigate to the listed local URL; the exact address will depend on your system.
    If the browser does not open automatically, you can open a window and manually
    open this address (*http://localhost:8888/lab/* in this example).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，默认浏览器应自动打开并导航到列出的本地 URL；确切的地址将取决于您的系统。如果浏览器未自动打开，您可以手动打开一个窗口并输入此地址（*http://localhost:8888/lab/*
    作为示例）。
- en: Help and Documentation in IPython
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPython 中的帮助和文档
- en: 'If you read no other section in this chapter, read this one: I find the tools
    discussed here to be the most transformative contributions of IPython to my daily
    workflow.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本章中不阅读其他部分，请阅读此部分：我发现在我的日常工作流程中，讨论的工具是 IPython 最具变革性的贡献。
- en: 'When a technologically minded person is asked to help a friend, family member,
    or colleague with a computer problem, most of the time it’s less a matter of knowing
    the answer than of knowing how to quickly find an unknown answer. In data science
    it’s the same: searchable web resources such as online documentation, mailing
    list threads, and Stack Overflow answers contain a wealth of information, even
    (especially?) about topics you’ve found yourself searching on before. Being an
    effective practitioner of data science is less about memorizing the tool or command
    you should use for every possible situation, and more about learning to effectively
    find the information you don’t know, whether through a web search engine or another
    means.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当技术上熟悉的人被要求帮助朋友、家人或同事解决计算机问题时，大多数时候这不是知道答案的问题，而是知道如何快速找到未知答案的问题。在数据科学中也是如此：可搜索的网络资源，如在线文档、邮件列表线程和
    Stack Overflow 答案，包含了丰富的信息，甚至（尤其是？）关于您之前搜索过的主题。成为数据科学的有效从业者，不仅仅是记住每种可能情况下应该使用的工具或命令，更重要的是学会如何有效地查找您不知道的信息，无论是通过网络搜索引擎还是其他方式。
- en: 'One of the most useful functions of IPython/Jupyter is to shorten the gap between
    the user and the type of documentation and search that will help them do their
    work effectively. While web searches still play a role in answering complicated
    questions, an amazing amount of information can be found through IPython alone.
    Some examples of the questions IPython can help answer in a few keystrokes include:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IPython/Jupyter 最有用的功能之一是缩小用户与文档之间的差距，帮助用户有效地完成工作。尽管网络搜索在回答复杂问题方面仍然发挥着作用，但仅通过
    IPython 就能找到大量信息。IPython 可以在几个按键中帮助回答的问题的一些示例包括：
- en: How do I call this function? What arguments and options does it have?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何调用这个函数？它有哪些参数和选项？
- en: What does the source code of this Python object look like?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 对象的源代码是什么样子的？
- en: What is in this package I imported?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我导入的这个包里面有什么？
- en: What attributes or methods does this object have?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个对象有哪些属性或方法？
- en: Here we’ll discuss the tools provided in the IPython shell and Jupyter Notebook
    to quickly access this information, namely the `?` character to explore documentation,
    the `??` characters to explore source code, and the Tab key for autocompletion.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython shell 和 Jupyter Notebook 中提供的工具可以快速访问这些信息，主要包括使用 `?` 字符查看文档、使用 `??`
    字符查看源代码，以及使用 Tab 键进行自动完成。
- en: Accessing Documentation with ?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `?` 访问文档
- en: 'The Python language and its data science ecosystem are built with the user
    in mind, and one big part of that is access to documentation. Every Python object
    contains a reference to a string, known as a *docstring*, which in most cases
    will contain a concise summary of the object and how to use it. Python has a built-in
    `help` function that can access this information and print the results. For example,
    to see the documentation of the built-in `len` function, you can do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言及其数据科学生态系统是为用户设计的，其中一个重要部分是访问文档。每个 Python 对象都包含对称为 *docstring* 的字符串的引用，大多数情况下将包含对象的简明摘要及其使用方法。Python
    有一个内置的 `help` 函数，可以访问这些信息并打印结果。例如，要查看内置 `len` 函数的文档，请执行以下操作：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Depending on your interpreter, this information may be displayed as inline text
    or in a separate pop-up window.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的解释器不同，此信息可能会显示为内联文本或在单独的弹出窗口中。
- en: 'Because finding help on an object is so common and useful, IPython and Jupyter
    introduce the `?` character as a shorthand for accessing this documentation and
    other relevant information:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为查找对象帮助是如此常见和有用，IPython 和 Jupyter 引入了 `?` 字符作为访问此文档和其他相关信息的简写：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This notation works for just about anything, including object methods:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此表示法适用于几乎任何内容，包括对象方法：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'or even objects themselves, with the documentation from their type:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 或者甚至是对象本身，具有其类型的文档：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Importantly, this will even work for functions or other objects you create
    yourself! Here we’ll define a small function with a docstring:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，即使是您自己创建的函数或其他对象，这也同样适用！在这里，我们将定义一个带有文档字符串的小函数：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that to create a docstring for our function, we simply placed a string
    literal in the first line. Because docstrings are usually multiple lines, by convention
    we used Python’s triple-quote notation for multiline strings.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为我们的函数创建文档字符串时，我们只需将字符串字面值放在第一行。由于文档字符串通常是多行的，按照惯例，我们使用了 Python 的三引号符号来表示多行字符串。
- en: 'Now we’ll use the `?` to find this docstring:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用 `?` 来找到这个文档字符串：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This quick access to documentation via docstrings is one reason you should get
    in the habit of always adding such inline documentation to the code you write.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过docstrings快速访问文档是你应该养成的习惯之一，这是你应该始终将这样的内联文档添加到你编写的代码中的原因之一。
- en: Accessing Source Code with ??
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ?? 访问源代码
- en: 'Because the Python language is so easily readable, another level of insight
    can usually be gained by reading the source code of the object you’re curious
    about. IPython and Jupyter provide a shortcut to the source code with the double
    question mark (`??`):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Python语言非常易读，通过阅读你感兴趣的对象的源代码通常可以获得更深入的见解。IPython和Jupyter通过双问号 (`??`) 提供了直接查看源代码的快捷方式：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For simple functions like this, the double question mark can give quick insight
    into the under-the-hood details.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的简单函数，双问号可以快速了解其底层细节。
- en: 'If you play with this much, you’ll notice that sometimes the `??` suffix doesn’t
    display any source code: this is generally because the object in question is not
    implemented in Python, but in C or some other compiled extension language. If
    this is the case, the `??` suffix gives the same output as the `?` suffix. You’ll
    find this particularly with many of Python’s built-in objects and types, including
    the `len` function from earlier:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常使用这个功能，你会注意到有时 `??` 后缀不会显示任何源代码：这通常是因为所讨论的对象不是用Python实现的，而是用C或其他编译扩展语言实现的。如果是这种情况，`??`
    后缀会给出与 `?` 后缀相同的输出。你会在许多Python内置对象和类型中特别发现这种情况，包括前面提到的 `len` 函数：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using `?` and/or `??` is a powerful and quick way of finding information about
    what any Python function or module does.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `?` 和/或 `??` 是查找任何Python函数或模块功能的强大快速方式。
- en: Exploring Modules with Tab Completion
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Tab补全探索模块
- en: Another useful interface is the use of the Tab key for autocompletion and exploration
    of the contents of objects, modules, and namespaces. In the examples that follow,
    I’ll use `<TAB>` to indicate when the Tab key should be pressed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的界面是使用Tab键自动完成和探索对象、模块和命名空间的内容。在接下来的示例中，我将使用 `<TAB>` 来指示何时按Tab键。
- en: Tab completion of object contents
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对象内容的Tab补全
- en: 'Every Python object has various attributes and methods associated with it.
    Like the `help` function mentioned earlier, Python has a built-in `dir` function
    that returns a list of these, but the tab-completion interface is much easier
    to use in practice. To see a list of all available attributes of an object, you
    can type the name of the object followed by a period (`.`) character and the Tab
    key:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Python对象都有与之关联的各种属性和方法。与前面提到的 `help` 函数类似，Python有一个内置的 `dir` 函数，返回这些属性和方法的列表，但实际使用中，Tab补全接口更容易使用。要查看对象的所有可用属性列表，可以输入对象名称，后跟句点
    (`.`) 字符和Tab键：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To narrow down the list, you can type the first character or several characters
    of the name, and the Tab key will find the matching attributes and methods:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要缩小列表，可以输入名称的第一个或几个字符，然后按Tab键查找匹配的属性和方法：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If there is only a single option, pressing the Tab key will complete the line
    for you. For example, the following will instantly be replaced with `L.count`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个选项，按Tab键将为您完成该行。例如，以下内容将立即替换为 `L.count`：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Though Python has no strictly enforced distinction between public/external
    attributes and private/internal attributes, by convention a preceding underscore
    is used to denote the latter. For clarity, these private methods and special methods
    are omitted from the list by default, but it’s possible to list them by explicitly
    typing the underscore:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Python没有严格强制区分公共/外部属性和私有/内部属性的区别，按照惯例，前置下划线用于表示后者。为了清晰起见，默认情况下省略了这些私有方法和特殊方法，但可以通过显式输入下划线来列出它们：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For brevity, I’ve only shown the first few columns of the output. Most of these
    are Python’s special double-underscore methods (often nicknamed “dunder” methods).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为简洁起见，我只显示了输出的前几列。大多数都是Python的特殊双下划线方法（通常被昵称为“dunder”方法）。
- en: Tab completion when importing
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入时的Tab补全
- en: 'Tab completion is also useful when importing objects from packages. Here we’ll
    use it to find all possible imports in the `itertools` package that start with
    `co`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在从包中导入对象时，Tab补全也非常有用。在这里，我们将用它来查找以 `co` 开头的 `itertools` 包中的所有可能导入：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Similarly, you can use tab-completion to see which imports are available on
    your system (this will change depending on which third-party scripts and modules
    are visible to your Python session):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用tab补全来查看系统上可用的导入（这将根据哪些第三方脚本和模块对您的Python会话可见而变化）：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Beyond tab completion: Wildcard matching'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超出tab补全：通配符匹配
- en: Tab completion is useful if you know the first few characters of the name of
    the object or attribute you’re looking for, but is little help if you’d like to
    match characters in the middle or at the end of the name. For this use case, IPython
    and Jupyter provide a means of wildcard matching for names using the `*` character.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道对象或属性名称的前几个字符，tab补全是有用的，但如果您想要匹配名称中间或末尾的字符，则帮助不大。对于这种用例，IPython和Jupyter提供了使用`*`字符进行名称通配符匹配的方法。
- en: 'For example, we can use this to list every object in the namespace whose name
    ends with `Warning`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用这个来列出命名空间中名称以`Warning`结尾的每个对象：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice that the `*` character matches any string, including the empty string.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`*` 字符匹配任何字符串，包括空字符串。
- en: 'Similarly, suppose we are looking for a string method that contains the word
    `find` somewhere in its name. We can search for it this way:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，假设我们正在寻找一个字符串方法，其中包含单词`find`在其名称中的某处。我们可以这样搜索：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I find this type of flexible wildcard search can be useful for finding a particular
    command when getting to know a new package or reacquainting myself with a familiar
    one.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现这种灵活的通配符搜索可以帮助我在了解新包或重新熟悉熟悉的包时找到特定的命令很有用。
- en: Keyboard Shortcuts in the IPython Shell
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPython Shell中的键盘快捷键
- en: 'If you spend any amount of time on a computer, you’ve probably found a use
    for keyboard shortcuts in your workflow. Most familiar perhaps are Cmd-c and Cmd-v
    (or Ctrl-c and Ctrl-v), used for copying and pasting in a wide variety of programs
    and systems. Power users tend to go even further: popular text editors like Emacs,
    Vim, and others provide users an incredible range of operations through intricate
    combinations of keystrokes.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在计算机上花费了任何时间，您可能已经发现在工作流程中使用键盘快捷键的用途。最熟悉的可能是Cmd-c和Cmd-v（或Ctrl-c和Ctrl-v），用于在各种程序和系统中复制和粘贴。高级用户往往会走得更远：流行的文本编辑器如Emacs、Vim和其他编辑器通过复杂的按键组合为用户提供了一系列不可思议的操作。
- en: The IPython shell doesn’t go this far, but does provide a number of keyboard
    shortcuts for fast navigation while typing commands. While some of these shortcuts
    do work in the browser-based notebooks, this section is primarily about shortcuts
    in the IPython shell.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IPython shell不会走这么远，但在输入命令时提供了许多快速导航的键盘快捷键。虽然其中一些快捷键确实在基于浏览器的笔记本中起作用，但本节主要讨论IPython
    shell中的快捷键。
- en: 'Once you get accustomed to these, they can be very useful for quickly performing
    certain commands without moving your hands from the “home” keyboard position.
    If you’re an Emacs user or if you have experience with Linux-style shells, the
    following will be very familiar. I’ll group these shortcuts into a few categories:
    *navigation shortcuts*, *text entry shortcuts*, *command history shortcuts*, and
    *miscellaneous shortcuts*.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您习惯了这些，它们可以非常有用，可以快速执行某些命令，而无需将手从“home”键盘位置移开。如果您是Emacs用户或者有Linux风格shell的使用经验，则以下内容将非常熟悉。我将这些快捷键分为几个类别：*导航快捷键*、*文本输入快捷键*、*命令历史快捷键*和*其他快捷键*。
- en: Navigation Shortcuts
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航快捷键
- en: 'While the use of the left and right arrow keys to move backward and forward
    in the line is quite obvious, there are other options that don’t require moving
    your hands from the “home” keyboard position:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用左右箭头键在行内向前向后移动是很明显的，但还有其他选项不需要移动手从键盘的“home”位置：
- en: '| Keystroke | Action |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 按键 | 动作 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ctrl-a | Move cursor to beginning of line |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-a | 将光标移动到行首 |'
- en: '| Ctrl-e | Move cursor to end of the line |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-e | 将光标移动到行尾 |'
- en: '| Ctrl-b or the left arrow key | Move cursor back one character |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-b或左箭头键 | 将光标向后移动一个字符 |'
- en: '| Ctrl-f or the right arrow key | Move cursor forward one character |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-f或右箭头键 | 将光标向前移动一个字符 |'
- en: Text Entry Shortcuts
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本输入快捷键
- en: While everyone is familiar with using the Backspace key to delete the previous
    character, reaching for the key often requires some minor finger gymnastics, and
    it only deletes a single character at a time. In IPython there are several shortcuts
    for removing some portion of the text you’re typing; the most immediately useful
    of these are the commands to delete entire lines of text. You’ll know these have
    become second-nature if you find yourself using a combination of Ctrl-b and Ctrl-d
    instead of reaching for Backspace to delete the previous character!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个人都习惯使用退格键删除前一个字符，但经常需要稍微扭动手指才能按到该键，而且它一次只能删除一个字符。在IPython中，有几个快捷键可用于删除您正在输入的文本的某些部分；其中最有用的是删除整行文本的命令。如果你发现自己使用Ctrl-b和Ctrl-d的组合来删除前一个字符，而不是按退格键，那么你将会知道这些快捷键已经变得本能了！
- en: '| Keystroke | Action |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 按键 | 动作 |'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Backspace key | Delete previous character in line |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 退格键 | 删除行内前一个字符 |'
- en: '| Ctrl-d | Delete next character in line |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-d | 删除行内下一个字符 |'
- en: '| Ctrl-k | Cut text from cursor to end of line |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-k | 从光标处剪切文本到行尾 |'
- en: '| Ctrl-u | Cut text from beginning of line to cursor |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-u | 从行首剪切文本到光标处 |'
- en: '| Ctrl-y | Yank (i.e., paste) text that was previously cut |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-y | 拷贝（即粘贴）之前被剪切的文本 |'
- en: '| Ctrl-t | Transpose (i.e., switch) previous two characters |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-t | 转置（即交换）前两个字符 |'
- en: Command History Shortcuts
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令历史快捷键
- en: 'Perhaps the most impactful shortcuts discussed here are the ones IPython provides
    for navigating the command history. This command history goes beyond your current
    IPython session: your entire command history is stored in a SQLite database in
    your IPython profile directory.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或许在这里讨论的最有影响力的快捷键是IPython提供的用于导航命令历史记录的快捷键。此命令历史记录超出了您当前的IPython会话：您的整个命令历史记录存储在IPython配置文件目录中的SQLite数据库中。
- en: 'The most straightforward way to access previous commands is by using the up
    and down arrow keys to step through the history, but other options exist as well:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 访问先前的命令最简单的方法是使用上箭头和下箭头键来浏览历史记录，但还有其他选项：
- en: '| Keystroke | Action |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 按键 | 动作 |'
- en: '| --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ctrl-p (or the up arrow key) | Access previous command in history |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-p（或向上箭头键） | 访问历史记录中的上一个命令 |'
- en: '| Ctrl-n (or the down arrow key) | Access next command in history |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-n（或向下箭头键） | 访问历史记录中的下一个命令 |'
- en: '| Ctrl-r | Reverse-search through command history |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-r | 通过命令历史记录进行逆向搜索 |'
- en: 'The reverse-search option can be particularly useful. Recall that earlier we
    defined a function called `square`. Let’s reverse-search our Python history from
    a new IPython shell and find this definition again. When you press Ctrl-r in the
    IPython terminal, you’ll see the following prompt:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向搜索选项可能特别有用。回想一下，早些时候我们定义了一个名为 `square` 的函数。让我们从一个新的IPython shell中反向搜索我们的Python历史记录，并再次找到这个定义。当您在IPython终端中按Ctrl-r时，您将看到以下提示：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you start typing characters at this prompt, IPython will autofill the most
    recent command, if any, that matches those characters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在此提示符下开始键入字符，IPython将自动填充最近的命令（如果有），与这些字符匹配的：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At any point, you can add more characters to refine the search, or press Ctrl-r
    again to search further for another command that matches the query. If you followed
    along earlier, pressing Ctrl-r twice more gives:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，您都可以添加更多字符以完善搜索，或者再次按Ctrl-r以进一步搜索与查询匹配的另一个命令。如果您之前跟随操作，再按两次Ctrl-r会得到以下结果：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once you have found the command you’re looking for, press Return and the search
    will end. You can then use the retrieved command and carry on with your session:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 找到您要查找的命令后，按回车键搜索将结束。然后，您可以使用检索到的命令并继续会话：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that you can use Ctrl-p/Ctrl-n or the up/down arrow keys to search through
    your history in a similar way, but only by matching characters at the beginning
    of the line. That is, if you type **`def`** and then press Ctrl-p, it will find
    the most recent command (if any) in your history that begins with the characters
    `def`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以使用Ctrl-p/Ctrl-n或上/下箭头键以类似的方式搜索历史记录，但只能通过匹配行开头的字符来搜索。也就是说，如果您键入 **`def`**
    然后按Ctrl-p，它将找到您历史记录中以字符 `def` 开头的最近的命令（如果有的话）。
- en: Miscellaneous Shortcuts
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项快捷键
- en: 'Finally, there are a few miscellaneous shortcuts that don’t fit into any of
    the preceding categories, but are nevertheless useful to know:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一些杂项快捷键不属于前面提到的任何类别，但仍然值得知道：
- en: '| Keystroke | Action |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 按键 | 动作 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Ctrl-l | Clear terminal screen |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-l | 清除终端屏幕 |'
- en: '| Ctrl-c | Interrupt current Python command |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-c | 中断当前 Python 命令 |'
- en: '| Ctrl-d | Exit IPython session |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| Ctrl-d | 退出 IPython 会话 |'
- en: The Ctrl-c shortcut in particular can be useful when you inadvertently start
    a very long-running job.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是 Ctrl-c 快捷键在你不小心启动了一个运行时间非常长的任务时非常有用。
- en: While some of the shortcuts discussed here may seem a bit obscure at first,
    they quickly become automatic with practice. Once you develop that muscle memory,
    I suspect you will even find yourself wishing they were available in other contexts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里讨论的一些快捷键起初可能显得有点晦涩，但是通过实践，它们很快就会变得自动化。一旦你培养了那种肌肉记忆，我相信你甚至会希望它们在其他情境中也能用到。
