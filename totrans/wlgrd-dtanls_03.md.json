["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnovember = pd.read_csv(\"./data/november.csv.gz\")\ndecember = pd.read_csv(\"./data/december.csv.gz\")\n\nevents = pd.concat([november, december], axis=0, ignore_index=True)\nprint(events.shape)\n```", "```py\nevents.isnull().sum()\n```", "```py\nevents[\"event_time\"] = pd.to_datetime(events[\"event_time\"],\n↪ format=\"%Y-%m-%d %H:%M:%S %Z\")\nevents[\"event_time\"].agg([\"min\", \"max\"])\n```", "```py\n(\n    events\n    .assign(month=events[\"event_time\"].dt.month,\n            day=events[\"event_time\"].dt.day)      #1\n    .groupby(\"month\")\n    [\"day\"]\n    .nunique()     #2\n)\n```", "```py\nfig, axis = plt.subplots(figsize=(10, 6))\n\n(\n    events\n    .assign(month=events[\"event_time\"].dt.month,\n            day=events[\"event_time\"].dt.day)\n    .groupby([\"month\", \"day\"])\n    .size()\n    .plot\n    .bar(ax=axis)\n)\n\nlabels = (\n    pd.date_range(                   #1\n        events[\"event_time\"].dt.date.min(),\n        events[\"event_time\"].dt.date.max(),\n        freq=\"D\")\n    .strftime(\"%b %d\")     #2\n)\n\naxis.set(title=\"Number of events per calendar day\",\n         xlabel=\"Number of rows\",\n         ylabel=\"Calendar day\",\n         xticklabels=labels)\n\nplt.show()\n```", "```py\nevents[\"event_type\"].value_counts(dropna=False)\n```", "```py\nfig, axis = plt.subplots()\n\n(\n    events[\"price\"]\n    .hist(bins=25, ax=axis)\n)\n\naxis.ticklabel_format(useOffset=False, style='plain') #1\n\naxis.set(title=\"Distribution of product price\",\n         xlabel=\"Product price ($)\",\n         ylabel=\"Frequency\")\n\nplt.show()\n```", "```py\nevents[\"brand\"].value_counts().head(10)\n```", "```py\n(\n    events\n    .groupby(\"product_id\")\n    [\"category_code\"]\n    .nunique()                     #1\n    .loc[lambda x: x > 1]          #2\n    .sort_values(ascending=False)\n)\n```", "```py\nevents[\"category_code\"].value_counts().head(10)\n```", "```py\n(\n    events\n    .loc[events[\"category_code\"] == \"construction.tools.light\", \"brand\"]\n    .value_counts()\n    .head(10)\n)\n```", "```py\ndupe_product_ids = (\n    events\n    .groupby(\"product_id\")\n    [\"category_code\"]\n    .nunique()\n    .loc[lambda x: x > 1]\n    .index\n    .values\n)\n\ndupe_product_ids[:10]\n```", "```py\n(\n    events.loc[events[\"product_id\"] == 1001588,\n               \"category_code\"]\n    .value_counts()\n)\n```", "```py\ndef get_correct_category_code(product_id_rows):\n    categories = product_id_rows[\"category_code\"].value_counts() #1\n\n    if \"construction.tools.light\" in categories.index: #2\n        return categories.index.drop(\"construction.tools.light\").values[0]\n    else:\n        return categories.index[0] #3\n\ncorrected_categories = (\n    events[events[\"product_id\"].isin(dupe_product_ids)]\n    .groupby(\"product_id\")\n    .apply(get_correct_category_code)\n    .reset_index(name=\"corrected_category\")\n)\n\ncorrected_categories.head()\n```", "```py\nevents = events.merge(corrected_categories, on=\"product_id\", how=\"left\")\nevents.loc[events[\"corrected_category\"].notnull(), \"category_code\"] = \\\n↪ events.loc[events[\"corrected_category\"].notnull(), \"corrected_category\"]\n\nevents[\"category_code\"].value_counts()\n```", "```py\nevents[\"category\"] = events[\"category_code\"].str.split(\".\").str[0]\n\nevents = events.rename(columns={\"category_code\": \"subcategory\"})\n\nevents[\"category\"].value_counts()\n```", "```py\nduplicated_brands = (\n    events\n    .assign(brand = events[\"brand\"].fillna(\"No brand\"))   #1\n    .groupby(\"product_id\")\n    [\"brand\"]\n    .nunique()\n    .loc[lambda x: x > 1]\n    .index\n)\n\nprint(len(duplicated_brands))\n\nduplicated_brands[:10]\n```", "```py\ndef get_correct_brand(product_id_rows):\n    brand_counts = product_id_rows[\"brand\"].value_counts(dropna=False) #1\n\n    if isinstance(brand_counts.index[0], str):\n        return brand_counts.index[0] #2\n\n    if len(brand_counts) == 1:\n        return np.nan #3\n\n    return brand_counts.index[1] #4\n\ncorrected_brands = (\n    events[events[\"product_id\"].isin(duplicated_brands)]\n    .groupby(\"product_id\")\n    .apply(get_correct_brand)\n    .reset_index(name=\"corrected_brand\")\n)\n\ncorrected_brands.head()\n```", "```py\nevents = events.merge(corrected_brands, on=\"product_id\", how=\"left\")\nevents.loc[events[\"corrected_brand\"].notnull(), \"brand\"] = \\\n    events.loc[events[\"corrected_brand\"].notnull(), \"corrected_brand\"]\n\nassert (\n    len(events[[\"product_id\", \"category\", \"subcategory\", \"brand\"]]\n        .drop_duplicates())\n    ==\n    events[\"product_id\"].nunique()\n)\n```", "```py\ndef get_product_name(row):\n    brand = \"\"\n\n    if isinstance(row[\"brand\"], str):  #1\n        brand = row[\"brand\"]\n\n    return f\"{str(row['product_id'])} - {brand} {row['subcategory']}\" \n\nevents[\"product_name\"] = events.apply(get_product_name, axis=1)\n\nevents.head()\n```", "```py\nevents.to_parquet(\"./data/events.parquet.gz\", compression=\"gzip\")\n```", "```py\npurchases = events[events[\"event_type\"] == \"purchase\"].copy()\ncarts = events[events[\"event_type\"] == \"cart\"].copy()\n```", "```py\npurchases\n    .assign(\n        november_count=np.where(purchases[\"event_time\"].dt.month==11,\n↪ 1, 0),\n        november_revenue=np.where(purchases[\"event_time\"].dt.month==11, \n↪ purchases[\"price\"], 0),\n        november_user_id=np.where(purchases[\"event_time\"].dt.month==11, \n↪ purchases[\"user_id\"], np.nan),\n        december_count=np.where(purchases[\"event_time\"].dt.month==12,\n↪ 1, 0),\n        december_revenue=np.where(purchases[\"event_time\"].dt.month==12, \n↪ purchases[\"price\"], 0),\n        december_user_id=np.where(purchases[\"event_time\"].dt.month==12, \n↪ purchases[\"user_id\"], np.nan))\n```", "```py\n.groupby([\"product_id\", \"product_name\"])\n    .agg(november_volume=('november_count', 'sum'),\n         november_revenue=('november_revenue', 'sum'),\n         november_users=('november_user_id', 'nunique'),\n         december_volume=('december_count', 'sum'),\n         december_revenue=('december_revenue', 'sum'),\n         december_users=('december_user_id', 'nunique')\n    )\n```", "```py\npurchases_league_table = (\n    purchases\n    .assign(\n        november_count=np.where(purchases[\"event_time\"].dt.month==11,\n↪ 1, 0),\n        november_revenue=np.where(purchases[\"event_time\"].dt.month==11, \n↪ purchases[\"price\"], 0),\n        november_user_id=np.where(purchases[\"event_time\"].dt.month==11, \n↪ purchases[\"user_id\"], np.nan),\n        december_count=np.where(purchases[\"event_time\"].dt.month==12, \n↪ 1, 0),\n        december_revenue=np.where(purchases[\"event_time\"].dt.month==12, \n↪ purchases[\"price\"], 0),\n        december_user_id=np.where(purchases[\"event_time\"].dt.month==12, \n↪ purchases[\"user_id\"], np.nan))\n    .groupby([\"product_id\", \"product_name\"])\n    .agg(november_volume=('november_count', 'sum'),\n         november_revenue=('november_revenue', 'sum'),\n         november_users=('november_user_id', 'nunique'),\n         december_volume=('december_count', 'sum'),\n         december_revenue=('december_revenue', 'sum'),\n         december_users=('december_user_id', 'nunique')\n    )\n    .assign(\n        volume_diff=lambda x:\n            x[\"december_volume\"] - x[\"november_volume\"],\n        revenue_diff=lambda x:\n            x[\"december_revenue\"] - x[\"november_revenue\"],\n        users_diff=lambda x:\n            x[\"december_users\"] - x[\"november_users\"])\n    .reset_index()\n)\n\npurchases_league_table.head()\n```", "```py\nconversion_table = (\n    pd.pivot_table(\n        data=events.assign(month=events[\"event_time\"].dt.month),\n        index=[\"product_id\", \"product_name\"],\n        columns=[\"month\", \"event_type\"],\n        values=\"user_session\",\n        aggfunc=\"count\"\n    )\n    .fillna(0)\n    .set_axis(labels=[\"november_cart\", \"november_sold\",\n↪ \"december_cart\", \"december_sold\"],\n              axis=1)\n    .reset_index()\n    .assign(november_conversion\n↪ = lambda x: x[\"november_sold\"] / x[\"november_cart\"],\n            december_conversion\n↪ = lambda x: x[\"december_sold\"] / x[\"december_cart\"])\n)\n\nconversion_table.head()\n```", "```py\nleague_table = purchases_league_table.merge(conversion_table,\n↪ on=[\"product_id\", \"product_name\"], how=\"left\")\nassert len(league_table) == purchases[\"product_id\"].nunique()\nleague_table.dtypes\n```", "```py\nfig, axis = plt.subplots()\n\nleague_table[\"volume_diff\"].hist(bins=100, ax=axis)\n\naxis.set(title=\"Distribution of month-on-month change in volume\",\n         xlabel=\"Change in volume from November to December\",\n         ylabel=\"Frequency\")\n```", "```py\nfig, axis = plt.subplots()\n\nleague_table.loc[league_table[\"volume_diff\"].between(-100,100),\n↪ \"volume_diff\"].hist(bins=100, ax=axis)\n\naxis.set(title=\"Distribution of month-on-month change in volume\",\n         xlabel=\"Change in volume from November to December\",\n         ylabel=\"Frequency\")\n```", "```py\nleague_table[\"volume_diff_pct\"] = (\n    100 * (league_table[\"volume_diff\"] / league_table[\"november_volume\"])\n)\n\nfig, axis = plt.subplots()\n\n(\n    league_table[\"volume_diff_pct\"]\n    .replace([np.inf, -np.inf], np.nan)\n    .dropna()\n    .loc[lambda x: x.between(-101,501)]\n    .hist(bins=50, ax=axis)\n)\n\naxis.set(\n    title=\"Distribution of month-on-month percentage change in volume\",\n    xlabel=\"% difference between sales in November and December\",\n    ylabel=\"Frequency\"\n)\n```", "```py\nproduct_catalog = (\n    events[[\"product_id\", \"product_name\", \"category_id\", \"subcategory\",\n↪ \"brand\", \"category\"]]\n    .drop_duplicates(subset=[\"product_id\", \"product_name\", \"subcategory\",\n↪ \"brand\", \"category\"])\n)\n\nassert len(product_catalog) == events[\"product_id\"].nunique()\n\nprint(product_catalog.shape)\nproduct_catalog.head()\n```", "```py\nDEC_VS_NOV_PCT_CUTOFF = 200\nNOV_VOLUME_CUTOFF = 10\nONLY_DEC_VOLUME_CUTOFF = 100\n\ndecember_high_performers = (\n    pd.concat(\n    [\n        league_table[(np.isinf(league_table[\"volume_diff_pct\"]) == False)\n            & (league_table[\"november_volume\"] > NOV_VOLUME_CUTOFF)\n            & (league_table[\"volume_diff_pct\"] > DEC_VS_NOV_PCT_CUTOFF)],\n        league_table[(np.isinf(league_table[\"volume_diff_pct\"]))\n            & (league_table[\"december_volume\"] > ONLY_DEC_VOLUME_CUTOFF)]\n    ],\n    axis=0,\n    ignore_index=True)\n    .merge(product_catalog.drop(columns=\"product_name\"), on=\"product_id\")\n)\n\nprint(december_high_performers.shape)\n```", "```py\nfrom IPython.display import display\n\nfor col in [\"category\", \"subcategory\", \"brand\"]:\n    print(col)\n    display(december_high_performers[col].value_counts())\n```", "```py\ndecember_high_performers[[\"category\", \"subcategory\", \"brand\"]]\n↪ .value_counts().head(10)\n```", "```py\nfig, axis = plt.subplots()\n\n(\n    league_table[(np.isinf(league_table[\"december_conversion\"]) == False)\n↪ & (np.isnan(league_table[\"december_conversion\"]) == False)]\n    [\"december_conversion\"]\n    .mul(100)\n    .hist(bins=50, ax=axis)\n)\n\naxis.set(\n    title=\"Distribution of December conversion\",\n    xlabel=\"Conversion (%)\",\n    ylabel=\"Frequency\"\n)\n```", "```py\n(\n    league_table[(np.isinf(league_table[\"december_conversion\"]) == False)\n                 & (np.isnan(league_table[\"december_conversion\"]) == False)\n                 & (league_table[\"december_conversion\"] > 0.99)]\n    .sort_values(\"december_conversion\", ascending=False)\n    .head(20)\n)\nevents[(events[\"product_id\"] == 9200694)\n↪ & (events[\"event_time\"].dt.month == 12)]\n```", "```py\nMIN_USERS = 5\nMIN_PURCHASES = 10\nCONVERSION_LOWER_LIMIT = 0.7\n\nbest_december_converters = (\n    league_table[(np.isinf(league_table[\"december_conversion\"]) == False)\n             & (np.isnan(league_table[\"december_conversion\"]) == False)\n             & (league_table[\"december_conversion\"]\n↪ .between(CONVERSION_LOWER_LIMIT, 1))\n             & (league_table[\"december_users\"] > MIN_USERS)\n             & (league_table[\"december_sold\"] > MIN_PURCHASES)]\n    .sort_values(\"december_conversion\", ascending=False)\n    .merge(product_catalog.drop(columns=[\"product_name\"]),\n↪ on=[\"product_id\"])\n)\n\nprint(best_december_converters.shape)\n```", "```py\nbest_december_converters[\"category\"].value_counts()\n```", "```py\nbest_december_converters.loc[best_december_converters[\"category\"]\n↪ .isin([\"furniture\", \"construction\"]), \"subcategory\"].value_counts()\n```"]