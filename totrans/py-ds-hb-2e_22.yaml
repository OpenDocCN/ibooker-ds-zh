- en: 'Chapter 19\. Combining Datasets: merge and join'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第19章. 合并数据集：merge和join
- en: One important feature offered by Pandas is its high-performance, in-memory join
    and merge operations, which you may be familiar with if you have ever worked with
    databases. The main interface for this is the `pd.merge` function, and we’ll see
    a few examples of how this can work in practice.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas提供的一个重要功能是其高性能、内存中的连接和合并操作，如果你曾经使用过数据库，可能对此有所了解。主要接口是`pd.merge`函数，我们将看到几个示例，说明其实际操作方式。
- en: 'For convenience, we will again define the `display` function from the previous
    chapter after the usual imports:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，在通常的导入之后，我们再次定义从上一章中定义的`display`函数：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Relational Algebra
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系代数
- en: The behavior implemented in `pd.merge` is a subset of what is known as *relational
    algebra*, which is a formal set of rules for manipulating relational data that
    forms the conceptual foundation of operations available in most databases. The
    strength of the relational algebra approach is that it proposes several fundamental
    operations, which become the building blocks of more complicated operations on
    any dataset. With this lexicon of fundamental operations implemented efficiently
    in a database or other program, a wide range of fairly complicated composite operations
    can be performed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.merge`中实现的行为是所谓的*关系代数*的一个子集，这是一组操作关系数据的正式规则，形成了大多数数据库中可用操作的概念基础。关系代数方法的优势在于它提出了几个基本操作，这些操作成为任何数据集上更复杂操作的基础。通过在数据库或其他程序中高效实现这些基本操作的词汇，可以执行广泛范围的相当复杂的组合操作。'
- en: Pandas implements several of these fundamental building blocks in the `pd.merge`
    function and the related `join` method of `Series` and `DataFrame` objects. As
    you will see, these let you efficiently link data from different sources.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas在`pd.merge`函数和`Series`和`DataFrame`对象的相关`join`方法中实现了几个这些基本构建块。正如你将看到的，这些功能让你能够有效地链接来自不同来源的数据。
- en: Categories of Joins
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并的类别
- en: 'The `pd.merge` function implements a number of types of joins: *one-to-one*,
    *many-to-one*, and *many-to-many*. All three types of joins are accessed via an
    identical call to the `pd.merge` interface; the type of join performed depends
    on the form of the input data. We’ll start with some simple examples of the three
    types of merges, and discuss detailed options a bit later.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.merge`函数实现了几种类型的连接：*一对一*、*多对一*和*多对多*。通过对`pd.merge`接口进行相同的调用来访问这三种连接类型；所执行的连接类型取决于输入数据的形式。我们将从三种合并类型的简单示例开始，并稍后讨论详细的选项。'
- en: One-to-One Joins
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对一连接
- en: 'Perhaps the simplest type of merge is the one-to-one join, which is in many
    ways similar to the column-wise concatenation you saw in [Chapter 18](ch18.xhtml#section-0306-concat-and-append).
    As a concrete example, consider the following two `DataFrame` objects, which contain
    information on several employees in a company:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最简单的合并类型是一对一连接，这在许多方面类似于你在[第18章](ch18.xhtml#section-0306-concat-and-append)中看到的逐列串联。作为具体示例，请考虑以下两个包含公司几名员工信息的`DataFrame`对象：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To combine this information into a single `DataFrame`, we can use the `pd.merge`
    function:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些信息合并到一个`DataFrame`中，我们可以使用`pd.merge`函数：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `pd.merge` function recognizes that each `DataFrame` has an `employee`
    column, and automatically joins using this column as a key. The result of the
    merge is a new `DataFrame` that combines the information from the two inputs.
    Notice that the order of entries in each column is not necessarily maintained:
    in this case, the order of the `employee` column differs between `df1` and `df2`,
    and the `pd.merge` function correctly accounts for this. Additionally, keep in
    mind that the merge in general discards the index, except in the special case
    of merges by index (see the `left_index` and `right_index` keywords, discussed
    momentarily).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.merge`函数会识别每个`DataFrame`都有一个`employee`列，并自动使用该列作为键进行连接。合并的结果是一个新的`DataFrame`，它合并了两个输入的信息。请注意，每列中的条目顺序不一定保持一致：在这种情况下，`df1`和`df2`中的`employee`列顺序不同，`pd.merge`函数能够正确处理这一点。此外，请记住，一般情况下合并会丢弃索引，除非是通过索引进行合并（参见`left_index`和`right_index`关键字，稍后讨论）。'
- en: Many-to-One Joins
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对一连接
- en: 'Many-to-one joins are joins in which one of the two key columns contains duplicate
    entries. For the many-to-one case, the resulting `DataFrame` will preserve those
    duplicate entries as appropriate. Consider the following example of a many-to-one
    join:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The resulting `DataFrame` has an additional column with the “supervisor” information,
    where the information is repeated in one or more locations as required by the
    inputs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Many-to-Many Joins
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many-to-many joins may be a bit confusing conceptually, but are nevertheless
    well defined. If the key column in both the left and right arrays contains duplicates,
    then the result is a many-to-many merge. This will be perhaps most clear with
    a concrete example. Consider the following, where we have a `DataFrame` showing
    one or more skills associated with a particular group.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'By performing a many-to-many join, we can recover the skills associated with
    any individual person:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These three types of joins can be used with other Pandas tools to implement
    a wide array of functionality. But in practice, datasets are rarely as clean as
    the one we’re working with here. In the following section we’ll consider some
    of the options provided by `pd.merge` that enable you to tune how the join operations
    work.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Specification of the Merge Key
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve already seen the default behavior of `pd.merge`: it looks for one or
    more matching column names between the two inputs, and uses this as the key. However,
    often the column names will not match so nicely, and `pd.merge` provides a variety
    of options for handling this.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The on Keyword
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most simply, you can explicitly specify the name of the key column using the
    `on` keyword, which takes a column name or a list of column names:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This option works only if both the left and right `DataFrame`s have the specified
    column name.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The left_on and right_on Keywords
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times you may wish to merge two datasets with different column names; for
    example, we may have a dataset in which the employee name is labeled as “name”
    rather than “employee”. In this case, we can use the `left_on` and `right_on`
    keywords to specify the two column names:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result has a redundant column that we can drop if desired—for example,
    by using the `DataFrame.drop()` method:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The left_index and right_index Keywords
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, rather than merging on a column, you would instead like to merge
    on an index. For example, your data might look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can use the index as the key for merging by specifying the `left_index`
    and/or `right_index` flags in `pd.merge()`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For convenience, Pandas includes the `DataFrame.join()` method, which performs
    an index-based merge without extra keywords:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you’d like to mix indices and columns, you can combine `left_index` with
    `right_on` or `left_on` with `right_index` to get the desired behavior:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All of these options also work with multiple indices and/or multiple columns;
    the interface for this behavior is very intuitive. For more information on this,
    see the [“Merge, Join, and Concatenate” section](https://oreil.ly/ffyAp) of the
    Pandas documentation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项也适用于多个索引和/或多个列；这种行为的界面非常直观。有关更多信息，请参阅[Pandas文档中的“Merge, Join, and Concatenate”部分](https://oreil.ly/ffyAp)。
- en: Specifying Set Arithmetic for Joins
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定连接的集合算术
- en: 'In all the preceding examples we have glossed over one important consideration
    in performing a join: the type of set arithmetic used in the join. This comes
    up when a value appears in one key column but not the other. Consider this example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的示例中，我们忽略了在执行连接时的一个重要考虑因素：连接中使用的集合算术类型。当一个值出现在一个键列中而不出现在另一个键列中时，就会出现这种情况。考虑这个例子：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here we have merged two datasets that have only a single “name” entry in common:
    Mary. By default, the result contains the *intersection* of the two sets of inputs;
    this is what is known as an *inner join*. We can specify this explicitly using
    the `how` keyword, which defaults to `"inner"`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经合并了两个仅具有一个共同“name”条目的数据集：Mary。默认情况下，结果包含输入集合的*交集*；这称为*内连接*。我们可以使用`how`关键字显式指定为`"inner"`：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Other options for the `how` keyword are `''outer''`, `''left''`, and `''right''`.
    An *outer join* returns a join over the union of the input columns and fills in
    missing values with NAs:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`how`关键字的其他选项包括`''outer''`、`''left''`和`''right''`。*外连接*返回输入列的并集并用NA填充缺失值：'
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The *left join* and *right join* return joins over the left entries and right
    entries, respectively. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*左连接*和*右连接*分别返回左输入和右输入的连接。例如：'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output rows now correspond to the entries in the left input. Using `how='right'`
    works in a similar manner.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输出行对应于左输入中的条目。使用`how='right'`的方式也类似工作。
- en: All of these options can be applied straightforwardly to any of the preceding
    join types.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选项都可以直接应用于之前的任何连接类型。
- en: 'Overlapping Column Names: The suffixes Keyword'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重叠的列名：后缀关键字
- en: 'Last, you may end up in a case where your two input `DataFrame`s have conflicting
    column names. Consider this example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可能会遇到两个输入`DataFrame`具有冲突列名的情况。考虑这个例子：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Because the output would have two conflicting column names, the `merge` function
    automatically appends the suffixes `_x` and `_y` to make the output columns unique.
    If these defaults are inappropriate, it is possible to specify a custom suffix
    using the `suffixes` keyword:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因为输出将具有两个冲突的列名，`merge`函数会自动附加后缀`_x`和`_y`以使输出列唯一。如果这些默认值不合适，可以使用`suffixes`关键字指定自定义后缀：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These suffixes work in any of the possible join patterns, and also work if there
    are multiple overlapping columns.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些后缀适用于可能的任何连接模式，并且在多个重叠列的情况下也适用。
- en: In [Chapter 20](ch20.xhtml#section-0308-aggregation-and-grouping), we’ll dive
    a bit deeper into relational algebra. For further discussion, see [“Merge, Join,
    Concatenate and Compare”](https://oreil.ly/l8zZ1) in the Pandas documentation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第20章](ch20.xhtml#section-0308-aggregation-and-grouping)中，我们将深入探讨关系代数。有关更多讨论，请参阅Pandas文档中的[“Merge,
    Join, Concatenate and Compare”](https://oreil.ly/l8zZ1)部分。
- en: 'Example: US States Data'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：美国各州数据
- en: 'Merge and join operations come up most often when combining data from different
    sources. Here we will consider an example of some [data about US states and their
    populations](https://oreil.ly/aq6Xb):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并数据来自不同来源时，合并和连接操作经常出现。在这里，我们将考虑一些关于[美国各州及其人口数据](https://oreil.ly/aq6Xb)的数据示例：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s take a look at the three datasets, using the Pandas `read_csv` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Pandas的`read_csv`函数查看这三个数据集：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Given this information, say we want to compute a relatively straightforward
    result: rank US states and territories by their 2010 population density. We clearly
    have the data here to find this result, but we’ll have to combine the datasets
    to do so.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些信息，假设我们想要计算一个相对简单的结果：按照2010年人口密度对美国各州和领地进行排名。显然，我们在这里有数据来找到这个结果，但我们需要合并数据集来实现这一点。
- en: 'We’ll start with a many-to-one merge that will give us the full state names
    within the population `DataFrame`. We want to merge based on the `state/region`
    column of `pop` and the `abbreviation` column of `abbrevs`. We’ll use `how=''outer''`
    to make sure no data is thrown away due to mismatched labels:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个多对一的合并开始，这将使我们在人口`DataFrame`中得到完整的州名。我们要基于`pop`的`state/region`列和`abbrevs`的`abbreviation`列进行合并。我们将使用`how='outer'`以确保由于标签不匹配而丢失数据：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let’s double-check whether there were any mismatches here, which we can do
    by looking for rows with nulls:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次仔细检查是否存在任何不匹配，可以通过查找具有空值的行来完成：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Some of the `population` values are null; let’s figure out which these are!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一些`population`值为null；让我们找出它们是哪些！
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It appears that all the null population values are from Puerto Rico prior to
    the year 2000; this is likely due to this data not being available in the original
    source.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所有空值人口数据似乎来自于2000年之前的波多黎各；这很可能是因为原始来源中没有这些数据。
- en: 'More importantly, we see that some of the new `state` entries are also null,
    which means that there was no corresponding entry in the `abbrevs` key! Let’s
    figure out which regions lack this match:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我们看到一些新的`state`条目也为空，这意味着在`abbrevs`键中没有相应的条目！让我们找出哪些地区缺少这种匹配：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can quickly infer the issue: our population data includes entries for Puerto
    Rico (PR) and the United States as a whole (USA), while these entries do not appear
    in the state abbreviation key. We can fix these quickly by filling in appropriate
    entries:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以快速推断问题所在：我们的人口数据包括了波多黎各（PR）和整个美国（USA）的条目，而这些条目在州缩写键中并未出现。我们可以通过填写适当的条目来快速修复这些问题：
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'No more nulls in the `state` column: we’re all set!'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`列中不再有空值：我们已经准备就绪！'
- en: 'Now we can merge the result with the area data using a similar procedure. Examining
    our results, we will want to join on the `state` column in both:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用类似的过程将结果与区域数据合并。检查我们的结果时，我们将希望在`state`列上进行连接：
- en: '[PRE25]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Again, let’s check for nulls to see if there were any mismatches:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，让我们检查是否存在空值以查看是否存在任何不匹配：
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'There are nulls in the `area` column; we can take a look to see which regions
    were ignored here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`area`列中有空值；我们可以查看这里被忽略的地区是哪些：'
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We see that our `areas` `DataFrame` does not contain the area of the United
    States as a whole. We could insert the appropriate value (using the sum of all
    state areas, for instance), but in this case we’ll just drop the null values because
    the population density of the entire United States is not relevant to our current
    discussion:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现我们的`areas` `DataFrame`中并不包含整个美国的面积。我们可以插入适当的值（例如使用所有州面积的总和），但在这种情况下，我们将仅删除空值，因为整个美国的人口密度与我们当前的讨论无关：
- en: '[PRE28]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we have all the data we need. To answer the question of interest, let’s
    first select the portion of the data corresponding with the year 2010, and the
    total population. We’ll use the `query` function to do this quickly (this requires
    the NumExpr package to be installed; see [Chapter 24](ch24.xhtml#section-0312-performance-eval-and-query)):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有需要的数据。为了回答我们感兴趣的问题，让我们首先选择与2010年对应的数据部分和总人口。我们将使用`query`函数来快速完成这一点（这需要安装NumExpr包，请参阅[第24章](ch24.xhtml#section-0312-performance-eval-and-query)）：
- en: '[PRE29]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now let’s compute the population density and display it in order. We’ll start
    by re-indexing our data on the state, and then compute the result:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算人口密度并按顺序显示结果。我们将首先根据州重新索引我们的数据，然后计算结果：
- en: '[PRE30]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The result is a ranking of US states, plus Washington, DC, and Puerto Rico,
    in order of their 2010 population density, in residents per square mile. We can
    see that by far the densest region in this dataset is Washington, DC (i.e., the
    District of Columbia); among states, the densest is New Jersey.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是美国各州，以及华盛顿特区和波多黎各，按照其2010年人口密度（每平方英里居民数）的排名。我们可以看到，数据集中迄今为止最密集的地区是华盛顿特区（即哥伦比亚特区）；在各州中，密度最大的是新泽西州。
- en: 'We can also check the end of the list:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查列表的末尾：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We see that the least dense state, by far, is Alaska, averaging slightly over
    one resident per square mile.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到迄今为止最稀疏的州是阿拉斯加，平均每平方英里略高于一名居民。
- en: This type of data merging is a common task when trying to answer questions using
    real-world data sources. I hope that this example has given you an idea of some
    of the ways you can combine the tools we’ve covered in order to gain insight from
    your data!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试使用真实数据源回答问题时，这种数据合并是一项常见任务。希望这个例子给您提供了一些想法，展示了如何结合我们涵盖的工具来从数据中获取洞察！
