- en: 'Chapter 19\. Combining Datasets: merge and join'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One important feature offered by Pandas is its high-performance, in-memory join
    and merge operations, which you may be familiar with if you have ever worked with
    databases. The main interface for this is the `pd.merge` function, and we’ll see
    a few examples of how this can work in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'For convenience, we will again define the `display` function from the previous
    chapter after the usual imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Relational Algebra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The behavior implemented in `pd.merge` is a subset of what is known as *relational
    algebra*, which is a formal set of rules for manipulating relational data that
    forms the conceptual foundation of operations available in most databases. The
    strength of the relational algebra approach is that it proposes several fundamental
    operations, which become the building blocks of more complicated operations on
    any dataset. With this lexicon of fundamental operations implemented efficiently
    in a database or other program, a wide range of fairly complicated composite operations
    can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas implements several of these fundamental building blocks in the `pd.merge`
    function and the related `join` method of `Series` and `DataFrame` objects. As
    you will see, these let you efficiently link data from different sources.
  prefs: []
  type: TYPE_NORMAL
- en: Categories of Joins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pd.merge` function implements a number of types of joins: *one-to-one*,
    *many-to-one*, and *many-to-many*. All three types of joins are accessed via an
    identical call to the `pd.merge` interface; the type of join performed depends
    on the form of the input data. We’ll start with some simple examples of the three
    types of merges, and discuss detailed options a bit later.'
  prefs: []
  type: TYPE_NORMAL
- en: One-to-One Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perhaps the simplest type of merge is the one-to-one join, which is in many
    ways similar to the column-wise concatenation you saw in [Chapter 18](ch18.xhtml#section-0306-concat-and-append).
    As a concrete example, consider the following two `DataFrame` objects, which contain
    information on several employees in a company:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To combine this information into a single `DataFrame`, we can use the `pd.merge`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pd.merge` function recognizes that each `DataFrame` has an `employee`
    column, and automatically joins using this column as a key. The result of the
    merge is a new `DataFrame` that combines the information from the two inputs.
    Notice that the order of entries in each column is not necessarily maintained:
    in this case, the order of the `employee` column differs between `df1` and `df2`,
    and the `pd.merge` function correctly accounts for this. Additionally, keep in
    mind that the merge in general discards the index, except in the special case
    of merges by index (see the `left_index` and `right_index` keywords, discussed
    momentarily).'
  prefs: []
  type: TYPE_NORMAL
- en: Many-to-One Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many-to-one joins are joins in which one of the two key columns contains duplicate
    entries. For the many-to-one case, the resulting `DataFrame` will preserve those
    duplicate entries as appropriate. Consider the following example of a many-to-one
    join:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The resulting `DataFrame` has an additional column with the “supervisor” information,
    where the information is repeated in one or more locations as required by the
    inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Many-to-Many Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many-to-many joins may be a bit confusing conceptually, but are nevertheless
    well defined. If the key column in both the left and right arrays contains duplicates,
    then the result is a many-to-many merge. This will be perhaps most clear with
    a concrete example. Consider the following, where we have a `DataFrame` showing
    one or more skills associated with a particular group.
  prefs: []
  type: TYPE_NORMAL
- en: 'By performing a many-to-many join, we can recover the skills associated with
    any individual person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These three types of joins can be used with other Pandas tools to implement
    a wide array of functionality. But in practice, datasets are rarely as clean as
    the one we’re working with here. In the following section we’ll consider some
    of the options provided by `pd.merge` that enable you to tune how the join operations
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Specification of the Merge Key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve already seen the default behavior of `pd.merge`: it looks for one or
    more matching column names between the two inputs, and uses this as the key. However,
    often the column names will not match so nicely, and `pd.merge` provides a variety
    of options for handling this.'
  prefs: []
  type: TYPE_NORMAL
- en: The on Keyword
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most simply, you can explicitly specify the name of the key column using the
    `on` keyword, which takes a column name or a list of column names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This option works only if both the left and right `DataFrame`s have the specified
    column name.
  prefs: []
  type: TYPE_NORMAL
- en: The left_on and right_on Keywords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times you may wish to merge two datasets with different column names; for
    example, we may have a dataset in which the employee name is labeled as “name”
    rather than “employee”. In this case, we can use the `left_on` and `right_on`
    keywords to specify the two column names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result has a redundant column that we can drop if desired—for example,
    by using the `DataFrame.drop()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The left_index and right_index Keywords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, rather than merging on a column, you would instead like to merge
    on an index. For example, your data might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the index as the key for merging by specifying the `left_index`
    and/or `right_index` flags in `pd.merge()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For convenience, Pandas includes the `DataFrame.join()` method, which performs
    an index-based merge without extra keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’d like to mix indices and columns, you can combine `left_index` with
    `right_on` or `left_on` with `right_index` to get the desired behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: All of these options also work with multiple indices and/or multiple columns;
    the interface for this behavior is very intuitive. For more information on this,
    see the [“Merge, Join, and Concatenate” section](https://oreil.ly/ffyAp) of the
    Pandas documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying Set Arithmetic for Joins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In all the preceding examples we have glossed over one important consideration
    in performing a join: the type of set arithmetic used in the join. This comes
    up when a value appears in one key column but not the other. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have merged two datasets that have only a single “name” entry in common:
    Mary. By default, the result contains the *intersection* of the two sets of inputs;
    this is what is known as an *inner join*. We can specify this explicitly using
    the `how` keyword, which defaults to `"inner"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Other options for the `how` keyword are `''outer''`, `''left''`, and `''right''`.
    An *outer join* returns a join over the union of the input columns and fills in
    missing values with NAs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The *left join* and *right join* return joins over the left entries and right
    entries, respectively. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The output rows now correspond to the entries in the left input. Using `how='right'`
    works in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: All of these options can be applied straightforwardly to any of the preceding
    join types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overlapping Column Names: The suffixes Keyword'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Last, you may end up in a case where your two input `DataFrame`s have conflicting
    column names. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the output would have two conflicting column names, the `merge` function
    automatically appends the suffixes `_x` and `_y` to make the output columns unique.
    If these defaults are inappropriate, it is possible to specify a custom suffix
    using the `suffixes` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: These suffixes work in any of the possible join patterns, and also work if there
    are multiple overlapping columns.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 20](ch20.xhtml#section-0308-aggregation-and-grouping), we’ll dive
    a bit deeper into relational algebra. For further discussion, see [“Merge, Join,
    Concatenate and Compare”](https://oreil.ly/l8zZ1) in the Pandas documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: US States Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Merge and join operations come up most often when combining data from different
    sources. Here we will consider an example of some [data about US states and their
    populations](https://oreil.ly/aq6Xb):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at the three datasets, using the Pandas `read_csv` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Given this information, say we want to compute a relatively straightforward
    result: rank US states and territories by their 2010 population density. We clearly
    have the data here to find this result, but we’ll have to combine the datasets
    to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll start with a many-to-one merge that will give us the full state names
    within the population `DataFrame`. We want to merge based on the `state/region`
    column of `pop` and the `abbreviation` column of `abbrevs`. We’ll use `how=''outer''`
    to make sure no data is thrown away due to mismatched labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s double-check whether there were any mismatches here, which we can do
    by looking for rows with nulls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Some of the `population` values are null; let’s figure out which these are!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It appears that all the null population values are from Puerto Rico prior to
    the year 2000; this is likely due to this data not being available in the original
    source.
  prefs: []
  type: TYPE_NORMAL
- en: 'More importantly, we see that some of the new `state` entries are also null,
    which means that there was no corresponding entry in the `abbrevs` key! Let’s
    figure out which regions lack this match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can quickly infer the issue: our population data includes entries for Puerto
    Rico (PR) and the United States as a whole (USA), while these entries do not appear
    in the state abbreviation key. We can fix these quickly by filling in appropriate
    entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'No more nulls in the `state` column: we’re all set!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can merge the result with the area data using a similar procedure. Examining
    our results, we will want to join on the `state` column in both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, let’s check for nulls to see if there were any mismatches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'There are nulls in the `area` column; we can take a look to see which regions
    were ignored here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that our `areas` `DataFrame` does not contain the area of the United
    States as a whole. We could insert the appropriate value (using the sum of all
    state areas, for instance), but in this case we’ll just drop the null values because
    the population density of the entire United States is not relevant to our current
    discussion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have all the data we need. To answer the question of interest, let’s
    first select the portion of the data corresponding with the year 2010, and the
    total population. We’ll use the `query` function to do this quickly (this requires
    the NumExpr package to be installed; see [Chapter 24](ch24.xhtml#section-0312-performance-eval-and-query)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s compute the population density and display it in order. We’ll start
    by re-indexing our data on the state, and then compute the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The result is a ranking of US states, plus Washington, DC, and Puerto Rico,
    in order of their 2010 population density, in residents per square mile. We can
    see that by far the densest region in this dataset is Washington, DC (i.e., the
    District of Columbia); among states, the densest is New Jersey.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also check the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We see that the least dense state, by far, is Alaska, averaging slightly over
    one resident per square mile.
  prefs: []
  type: TYPE_NORMAL
- en: This type of data merging is a common task when trying to answer questions using
    real-world data sources. I hope that this example has given you an idea of some
    of the ways you can combine the tools we’ve covered in order to gain insight from
    your data!
  prefs: []
  type: TYPE_NORMAL
