["```py\nfrom typing import List\nfrom collections import Counter\n\ndef tokenize(document: str) -> List[str]:\n    \"\"\"Just split on whitespace\"\"\"\n    return document.split()\n\ndef word_count_old(documents: List[str]):\n    \"\"\"Word count not using MapReduce\"\"\"\n    return Counter(word\n        for document in documents\n        for word in tokenize(document))\n```", "```py\nfrom typing import Iterator, Tuple\n\ndef wc_mapper(document: str) -> Iterator[Tuple[str, int]]:\n    \"\"\"For each word in the document, emit (word, 1)\"\"\"\n    for word in tokenize(document):\n        yield (word, 1)\n```", "```py\nfrom typing import Iterable\n\ndef wc_reducer(word: str,\n               counts: Iterable[int]) -> Iterator[Tuple[str, int]]:\n    \"\"\"Sum up the counts for a word\"\"\"\n    yield (word, sum(counts))\n```", "```py\nfrom collections import defaultdict\n\ndef word_count(documents: List[str]) -> List[Tuple[str, int]]:\n    \"\"\"Count the words in the input documents using MapReduce\"\"\"\n\n    collector = defaultdict(list)  # To store grouped values\n\n    for document in documents:\n        for word, count in wc_mapper(document):\n            collector[word].append(count)\n\n    return [output\n            for word, counts in collector.items()\n            for output in wc_reducer(word, counts)]\n```", "```py\n{\"data\" : [1, 1],\n \"science\" : [1, 1],\n \"big\" : [1],\n \"fiction\" : [1]}\n```", "```py\n[(\"data\", 2), (\"science\", 2), (\"big\", 1), (\"fiction\", 1)]\n```", "```py\nfrom typing import Callable, Iterable, Any, Tuple\n\n# A key/value pair is just a 2-tuple\nKV = Tuple[Any, Any]\n\n# A Mapper is a function that returns an Iterable of key/value pairs\nMapper = Callable[..., Iterable[KV]]\n\n# A Reducer is a function that takes a key and an iterable of values\n# and returns a key/value pair\nReducer = Callable[[Any, Iterable], KV]\n```", "```py\ndef map_reduce(inputs: Iterable,\n               mapper: Mapper,\n               reducer: Reducer) -> List[KV]:\n    \"\"\"Run MapReduce on the inputs using mapper and reducer\"\"\"\n    collector = defaultdict(list)\n\n    for input in inputs:\n        for key, value in mapper(input):\n            collector[key].append(value)\n\n    return [output\n            for key, values in collector.items()\n            for output in reducer(key, values)]\n```", "```py\nword_counts = map_reduce(documents, wc_mapper, wc_reducer)\n```", "```py\ndef values_reducer(values_fn: Callable) -> Reducer:\n    \"\"\"Return a reducer that just applies values_fn to its values\"\"\"\n    def reduce(key, values: Iterable) -> KV:\n        return (key, values_fn(values))\n\n    return reduce\n```", "```py\nsum_reducer = values_reducer(sum)\nmax_reducer = values_reducer(max)\nmin_reducer = values_reducer(min)\ncount_distinct_reducer = values_reducer(lambda values: len(set(values)))\n\nassert sum_reducer(\"key\", [1, 2, 3, 3]) == (\"key\", 9)\nassert min_reducer(\"key\", [1, 2, 3, 3]) == (\"key\", 1)\nassert max_reducer(\"key\", [1, 2, 3, 3]) == (\"key\", 3)\nassert count_distinct_reducer(\"key\", [1, 2, 3, 3]) == (\"key\", 3)\n```", "```py\nstatus_updates = [\n    {\"id\": 2,\n     \"username\" : \"joelgrus\",\n     \"text\" : \"Should I write a second edition of my data science book?\",\n     \"created_at\" : datetime.datetime(2018, 2, 21, 11, 47, 0),\n     \"liked_by\" : [\"data_guy\", \"data_gal\", \"mike\"] },\n     # ...\n]\n```", "```py\ndef data_science_day_mapper(status_update: dict) -> Iterable:\n    \"\"\"Yields (day_of_week, 1) if status_update contains \"data science\" \"\"\"\n    if \"data science\" in status_update[\"text\"].lower():\n        day_of_week = status_update[\"created_at\"].weekday()\n        yield (day_of_week, 1)\n\ndata_science_days = map_reduce(status_updates,\n                               data_science_day_mapper,\n                               sum_reducer)\n```", "```py\ndef words_per_user_mapper(status_update: dict):\n    user = status_update[\"username\"]\n    for word in tokenize(status_update[\"text\"]):\n        yield (user, (word, 1))\n\ndef most_popular_word_reducer(user: str,\n                              words_and_counts: Iterable[KV]):\n    \"\"\"\n Given a sequence of (word, count) pairs,\n return the word with the highest total count\n \"\"\"\n    word_counts = Counter()\n    for word, count in words_and_counts:\n        word_counts[word] += count\n\n    word, count = word_counts.most_common(1)[0]\n\n    yield (user, (word, count))\n\nuser_words = map_reduce(status_updates,\n                        words_per_user_mapper,\n                        most_popular_word_reducer)\n```", "```py\ndef liker_mapper(status_update: dict):\n    user = status_update[\"username\"]\n    for liker in status_update[\"liked_by\"]:\n        yield (user, liker)\n\ndistinct_likers_per_user = map_reduce(status_updates,\n                                      liker_mapper,\n                                      count_distinct_reducer)\n```", "```py\nC[i][j] = sum(A[i][x] * B[x][j] for x in range(m))\n```", "```py\nfrom typing import NamedTuple\n\nclass Entry(NamedTuple):\n    name: str\n    i: int\n    j: int\n    value: float\n```", "```py\ndef matrix_multiply_mapper(num_rows_a: int, num_cols_b: int) -> Mapper:\n    # C[x][y] = A[x][0] * B[0][y] + ... + A[x][m] * B[m][y]\n    #\n    # so an element A[i][j] goes into every C[i][y] with coef B[j][y]\n    # and an element B[i][j] goes into every C[x][j] with coef A[x][i]\n    def mapper(entry: Entry):\n        if entry.name == \"A\":\n            for y in range(num_cols_b):\n                key = (entry.i, y)              # which element of C\n                value = (entry.j, entry.value)  # which entry in the sum\n                yield (key, value)\n        else:\n            for x in range(num_rows_a):\n                key = (x, entry.j)              # which element of C\n                value = (entry.i, entry.value)  # which entry in the sum\n                yield (key, value)\n\n    return mapper\n```", "```py\ndef matrix_multiply_reducer(key: Tuple[int, int],\n                            indexed_values: Iterable[Tuple[int, int]]):\n    results_by_index = defaultdict(list)\n\n    for index, value in indexed_values:\n        results_by_index[index].append(value)\n\n    # Multiply the values for positions with two values\n    # (one from A, and one from B) and sum them up.\n    sumproduct = sum(values[0] * values[1]\n                     for values in results_by_index.values()\n                     if len(values) == 2)\n\n    if sumproduct != 0.0:\n        yield (key, sumproduct)\n```", "```py\nA = [[3, 2, 0],\n     [0, 0, 0]]\n\nB = [[4, -1, 0],\n     [10, 0, 0],\n     [0, 0, 0]]\n```", "```py\nentries = [Entry(\"A\", 0, 0, 3), Entry(\"A\", 0, 1,  2), Entry(\"B\", 0, 0, 4),\n           Entry(\"B\", 0, 1, -1), Entry(\"B\", 1, 0, 10)]\n\nmapper = matrix_multiply_mapper(num_rows_a=2, num_cols_b=3)\nreducer = matrix_multiply_reducer\n\n# Product should be [[32, -3, 0], [0, 0, 0]].\n# So it should have two entries.\nassert (set(map_reduce(entries, mapper, reducer)) ==\n        {((0, 1), -3), ((0, 0), 32)})\n```"]