- en: Chapter 6\. First Steps with R for Excel Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html#foundations-of-eda) you learned how to conduct exploratory
    data analysis in Excel. You may recall from that chapter that John Tukey is credited
    with popularizing the practice of EDA. Tukey’s approach to data inspired the development
    of several statistical programming languages, including S at the legendary Bell
    Laboratories. In turn, S inspired R. Developed in the early 1990s by Ross Ihaka
    and Robert Gentleman, the name is a play both on its derivation from S and its
    cofounders’ first names. R is open source and maintained by the R Foundation for
    Statistical Computing. Because it was built primarily for statistical computation
    and graphics, it’s most popular among researchers, statisticians, and data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: R was developed specifically with statistical analysis in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, navigate to the [R Project’s website](https://r-project.org).
    Click the link at the top of the page to download R. You will be asked to choose
    a mirror from the Comprehensive R Archive Network (CRAN). This is a network of
    servers that distributes R source code, packages, and documentation. Choose a
    mirror near you to download R for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with RStudio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve now installed R, but we will make one more download to optimize our coding
    experience. In [Chapter 5](ch05.html#data-analytics-stack), you learned that when
    software is open source, anyone is free to build on, distribute, or contribute
    to it. For example, vendors are welcome to offer an *integrated development environment*
    (IDE) to interact with the code. The RStudio IDE combines tools for code editing,
    graphics, documentation, and more under a single interface. This has become the
    predominant IDE for R programming in its decade or so on the market, with users
    building everything from interactive dashboards (Shiny) to research reports (R
    Markdown) with its suite of products.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be wondering, *if RStudio is so great, why did we bother installing
    R?* These are in fact two distinct downloads: we downloaded R for the *code base*,
    and RStudio for an *IDE to work with the code*. This decoupling of applications
    may be unfamiliar to you as an Excel user, but it’s quite common in the open source
    software world.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: RStudio is a platform to *work with* R code, not the code base itself. First,
    download R from CRAN; then download RStudio.
  prefs: []
  type: TYPE_NORMAL
- en: To download RStudio, head to the [download page](https://oreil.ly/rfP1X) of
    its website. You will see that RStudio is offered on a tiered pricing system;
    select the free RStudio Desktop. (RStudio is an excellent example of how to build
    a solid business on top of open source software.) You’ll come to love RStudio,
    but it can be quite overwhelming at first with its many panes and features. To
    overcome this initial discomfort, we’ll take a guided tour.
  prefs: []
  type: TYPE_NORMAL
- en: First, head to the home menu and select File → New File → R Script. You should
    now see something like [Figure 6-1](#blank-slate-r). There are lots of bells and
    whistles here; the idea of an IDE is to have all the tools needed for code development
    in one place. We’ll cover the features in each of the four panes that you should
    know to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Located in the lower left-hand corner of RStudio, the *console* is where commands
    are submitted to R to execute. Here you will see the `>` sign followed by a blinking
    cursor. You can type operations here and then press Enter to execute. Let’s start
    with something very basic, like finding 1 + 1, as in [Figure 6-2](#rstudio-1-plus-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Blank slate in R](assets/aina_0601.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-1\. The RStudio IDE
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Entering 1+1 into the RStudio console](assets/aina_0602.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-2\. Coding in RStudio, starting with 1 + 1
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You may have noticed that a `[1]` appears before your result of `2`. To understand
    what this means, type and execute `1:50` in the console. The `:` operator in R
    will produce all numbers in increments of 1 between a given range, akin to the
    fill handle in Excel. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These bracketed labels indicate the numeric position of the first value for
    each line in the output.
  prefs: []
  type: TYPE_NORMAL
- en: While you can continue to work from here, it’s often a good idea to first write
    your commands in a *script*, and then send them to the console. This way you can
    save a long-term record of the code you ran. The script editor is found in the
    pane immediately above the console. Enter a couple of lines of simple arithmetic
    there, as in [Figure 6-3](#rstudio-script).
  prefs: []
  type: TYPE_NORMAL
- en: '![RStudio script editor](assets/aina_0603.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-3\. Working with the script editor in RStudio
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Place your cursor in line 1, then hover over the icons at the top of the script
    editor until you find one that says “Run the current line or selection.” Click
    that icon and two things will happen. First, the active line of code will be executed
    in the console. The cursor will also drop to the next line in the script editor.
    You can send multiple lines to the console at once by selecting them and clicking
    that icon. The keyboard shortcut for this operation is Ctrl + Enter for Windows,
    Cmd + Return for Mac. As an Excel user, you’re probably a keyboard shortcut enthusiast;
    RStudio has an abundance of them, which can be viewed by selecting Tools → Keyboard
    Shortcuts Help.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s save our script. From the menu head to File → Save. Name the file *ch-6*.
    The file extension for R scripts is *.r*. The process of opening, saving, and
    closing R scripts may remind you of working with documents in a word processor;
    after all, they are both written records.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll now head to the lower-right pane. You will see five tabs here: Files,
    Plots, Packages, Help, Viewer. R provides plenty of help documentation, which
    can be viewed in this pane. For example, we can learn more about an R function
    with the `?` operator. As an Excel user, you know all about functions such as
    `VLOOKUP()` or `SUMIF()`. Some R functions are quite similar to those of Excel;
    let’s learn, for example, about R’s square-root function, `sqrt()`. Enter the
    following code into a new line of your script and run it using either the menu
    icon or the keyboard shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A document titled “Miscellaneous Mathematical Functions” will appear in your
    Help window. This contains important information about the `sqrt()` function,
    the arguments it takes, and more. It also includes this example of the function
    in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Don’t worry about making sense of this code right now; just copy and paste the
    selection into your script, highlighting the complete selection, and run it. A
    plot will now appear as in [Figure 6-4](#first-r-plot). I’ve resized my RStudio
    panes to make the plot larger. You will learn how to build R plots in [Chapter 8](ch08.html#r-data-manipulation-visualization).
  prefs: []
  type: TYPE_NORMAL
- en: '![Your first R plot](assets/aina_0604.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-4\. Your first R plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, look to your upper-right pane: Environment, History, Connections. The
    Environment tab lists something called `xx` next to what looks to be some set
    of integers. What is this? As it turns out, *you* created this with the code I
    told you to run blindly from the `sqrt()` documentation. In fact, much of what
    we do in R will focus around what is shown here: an *object*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you likely noticed, there are several panes, icons, and menu options we
    overlooked in this tour of RStudio. It’s such a feature-rich IDE: don’t be afraid
    to explore, experiment, and search-engine your way to learning more. But for now,
    you know enough about getting around in RStudio to begin learning R programming
    proper. You’ve already seen that R can be used as a fancy calculator. [Table 6-1](#r-arithmetic)
    lists some common arithmetic operators in R.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-1\. Common arithmetic operators in R
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division |'
  prefs: []
  type: TYPE_TB
- en: '| `^` | Exponent |'
  prefs: []
  type: TYPE_TB
- en: '| `%%` | Modulo |'
  prefs: []
  type: TYPE_TB
- en: '| `%/%` | Floor division |'
  prefs: []
  type: TYPE_TB
- en: 'You may be less familiar with the last two operators in [Table 6-1](#r-arithmetic):
    the *modulo* returns the remainder of a division, and *floor division* rounds
    the division’s result down to the nearest integer.'
  prefs: []
  type: TYPE_NORMAL
- en: Like Excel, R follows the order of operations in arithmetic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'What’s the deal with the lines containing the hash (`#`) and text? Those are
    *cell comments* used to provide verbal instructions and reminders about the code.
    Comments help other users—and ourselves at a later date—understand and remember
    what the code is used for. R does not execute cell comments: this part of the
    script is for the programmer, not the computer. Though comments can be placed
    to the right of code, it’s preferred to place them above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You don’t need to use comments to explain *everything* about what your code
    is doing, but do explain your reasoning and assumptions. Think of it as, well,
    a commentary. I will continue to use comments in this book’s examples where relevant
    and helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Get into the habit of including comments to document your objectives, assumptions,
    and reasoning for writing the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, functions are a large part of working in R, just as
    in Excel, and often look quite similar. For example, we can take the absolute
    value of –100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: However, there are some quite important differences for working with functions
    in R, as these errors indicate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In Excel, you can enter the `ABS()` function as lowercase `abs()` or proper
    case `Abs()` without a problem. In R, however, the `abs()` function *must* be
    lowercase. This is because R is *case-sensitive*. This is a major difference between
    Excel and R, and one that is sure to trip you up sooner or later.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'R is a case-sensitive language: the `SQRT()` function is not the same as `sqrt()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like in Excel, some R functions, like `sqrt()`, are meant to work with numbers;
    others, like `toupper()`, work with characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at another case where R behaves similarly to Excel, with one exception
    that will have huge implications: comparison operators. This is when we compare
    some relationship between two values, such as whether one is greater than the
    other.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: R will return a `TRUE` or `FALSE` as a result of any comparison operator, just
    as would Excel. [Table 6-2](#comparison-operators-in-r) lists R’s comparison operators.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-2\. Comparison operators in R
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | Greater than |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | Less than |'
  prefs: []
  type: TYPE_TB
- en: '| `>=` | Greater than or equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `<=` | Less than or equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `!=` | Not equal to |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | Equal to |'
  prefs: []
  type: TYPE_TB
- en: Most of these probably look familiar to you, except…did you catch that last
    one? That’s correct, you do not check whether two values are equal to one another
    in R with one equal sign, but with *two*. This is because a single equal sign
    in R is used to *assign objects*.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not quite sure what the big deal is yet, bear with me for another
    example. Let’s assign the absolute value of –100 to an object; we’ll call it `my_first_object`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can think of an object as a shoebox that we are putting a piece of information
    into. By using the `=` operator, we’ve stored the result of `abs(-100)` in a shoebox
    called `my_first_object`. We can open this shoebox by *printing* it. In R, you
    can simply do this by running the object’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to assign objects in R is with the `<-` operator. In fact, this
    is usually preferred to `=` in part to avoid the confusion between it and `==`.
    Try assigning another object using this operator, then printing it. The keyboard
    shortcut is Alt+- (Alt+minus) on Windows, and Option-- (Option-minus) on Mac.
    You can get creative with your functions and operations, like I did:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Object names in R must start with a letter or dot and should contain only letters,
    numbers, underscores, and periods. There are also a few off-limit keywords. That
    leaves a lot of margin for “creative” object naming. But good object names are
    indicative of the data they store, similar to how the label on a shoebox signals
    what kind of shoe is inside.
  prefs: []
  type: TYPE_NORMAL
- en: Objects can contain different types or *modes* of data, just as you might have
    different categories of shoeboxes. [Table 6-3](#data-types-r) lists some common
    data types.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6-3\. Common data types in R
  prefs: []
  type: TYPE_NORMAL
- en: '| Data type | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Character | `''R''`, `''Mount''`, `''Hello, world''` |'
  prefs: []
  type: TYPE_TB
- en: '| Numeric | `6.2`, `4.13`, `3` |'
  prefs: []
  type: TYPE_TB
- en: '| Integer | `3L`, `-1L`, `12L` |'
  prefs: []
  type: TYPE_TB
- en: '| Logical | `TRUE`, `FALSE`, `T`, `F` |'
  prefs: []
  type: TYPE_TB
- en: Let’s create some objects of different modes. First, character data is often
    enclosed in single quotations for legibility, but double quotes also work and
    can be particularly helpful if you want to include a single quote as part of the
    input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbers can be represented as decimals or whole numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'However, whole numbers can also be stored as a distinct integer data type.
    The `L` included in the input stands for *literal*; this term comes from computer
    science and is used to refer to notations for fixed values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`T` and `F` will by default evaluate as logical data to `TRUE` and `FALSE`,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `str()` function to learn about the *structure* of an object,
    such as its type and the information contained inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once assigned, we are free to use these objects in additional operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even use objects as input in assigning other objects, or reassign them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: “So what?” you may be asking. “I work with a lot of data, so how is assigning
    each number to its own object going to help me?” Fortunately, you’ll see in [Chapter 7](ch07.html#data-structures-in-r)
    that it’s possible to combine multiple values into one object, much as you might
    do with ranges and worksheets in Excel. But before that, let’s change gears for
    a moment to learn about packages.
  prefs: []
  type: TYPE_NORMAL
- en: Packages in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine if you weren’t able to download applications on your smartphone. You
    could make phone calls, browse the internet, and jot notes to yourself—still pretty
    handy. But the real power of a smartphone comes from its applications, or apps.
    R ships much like a “factory-default” smartphone: it’s still quite useful, and
    you could accomplish nearly anything necessary with it if you were forced to.
    But it’s often more efficient to do the R equivalent of installing an app: *installing
    a package*.'
  prefs: []
  type: TYPE_NORMAL
- en: The factory-default version of R is called “base R.” Packages, the “apps” of
    R, are shareable units of code that include functions, datasets, documentation,
    and more. These packages are built on top of base R to improve functionality and
    add new features.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, you downloaded base R from CRAN. This network also hosts over 10,000
    packages that have been contributed by R’s vast user base and vetted by CRAN volunteers.
    This is your “app store” for R, and to repurpose the famous slogan, “There’s a
    package for that.” While it’s possible to download packages elsewhere, it’s best
    as a beginner to stick with what’s hosted on CRAN. To install a package from CRAN,
    you can run `install.packages()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll be using packages in this book to help us with tasks like data manipulation
    and visualization. In particular, we’ll be using the `tidyverse`, which is actually
    a *collection* of packages designed to be used together. To install this collection,
    run the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ve just installed a number of helpful packages; one of which, `dplyr` (usually
    pronounced *d-plier*), includes a function `arrange()`. Try opening the documentation
    for this function and you’ll receive an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand why R can’t find this `tidyverse` function, go back to the smartphone
    analogy: even though you’ve installed an app, you still need to open it to use
    it. Same with R: we’ve installed the package with `install.packages()`, but now
    we need to call it into our session with `library()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The packages of `tidyverse` are now available for the rest of your R session;
    you can now run the example without error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Packages are *installed* once, but *called* for each session.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading R, RStudio, and R Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RStudio, R packages, and R itself are constantly improving, so it’s a good idea
    to occasionally check for updates. To update RStudio, navigate to the menu and
    select Help → Check for Updates. If you’re due for an update, RStudio will guide
    you through the steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update all packages from CRAN, you can run this function and follow the
    prompted steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can also update packages from the RStudio menu by going to Tools → Check
    for Package Updates. An Update Packages menu will appear; select all of the packages
    that you wish to update. You can also install packages via the Tools menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upgrading R itself is unfortunately more involved. If you are on a Windows
    computer, you can use the `updateR()` function from the package `installr` and
    follow its instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For Mac, return to the [CRAN website](https://cran.r-project.org) to install
    the latest version of R.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to work with objects and packages in R and
    got the hang of working with RStudio. You’ve learned a lot; I think it’s time
    for a break. Go ahead and save your R script and close out of RStudio by selecting
    File → Quit Session. When you do so, you’ll be asked: “Save workspace image to
    ~/.RData?” As a rule, *don’t save your workspace image*. If you do, a copy of
    all saved objects will be saved so that they’ll be available for your next session.
    While this *sounds* like a good idea, it can get cumbersome to store these objects
    and keep track of *why* you stored them in the first place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, rely on the R script itself to regenerate these objects in your next
    session. After all, the advantage of a programming language is that it’s reproducible:
    no need to drag objects around with us if we can create them on demand.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Err on the side of *not* saving your workspace image; you should be able to
    re-create any objects from a previous session using your script.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent RStudio from preserving your workspace between sessions, head to
    the home menu and go to Tools → Global Options. Under the General menu, change
    the two settings under Workspace as shown in [Figure 6-5](#rstudio-workspace-options).
  prefs: []
  type: TYPE_NORMAL
- en: '![RStudio workspace settings](assets/aina_0605.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6-5\. Customized workspace options in RStudio
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following exercises provide additional practice and insight on working
    with objects, packages, and RStudio:'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to being a workhorse of a tool, RStudio provides endless appearance
    customizations. From the menu, select Tools → Global Options → Appearance and
    customize your editor’s font and theme. For example, you may decide to use a “dark
    mode” theme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using a script in RStudio, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the sum of 1 and 4 as `a`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the square root of `a` as `b`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign `b` minus 1 as `d`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of data is stored in `d`?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is `d` greater than 2?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the `psych` package from CRAN, and load it into your session. Use comments
    to explain the differences between installing and loading a package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Along with these exercises, I encourage you to begin using R immediately in
    your day-to-day work. For now, this may just involve using the application as
    a fancy calculator. But even this will help you get comfortable with using R and
    RStudio.
  prefs: []
  type: TYPE_NORMAL
