["```py\nfrom typing import Tuple\nimport math\n\ndef normal_approximation_to_binomial(n: int, p: float) -> Tuple[float, float]:\n    \"\"\"Returns mu and sigma corresponding to a Binomial(n, p)\"\"\"\n    mu = p * n\n    sigma = math.sqrt(p * (1 - p) * n)\n    return mu, sigma\n```", "```py\nfrom scratch.probability import normal_cdf\n\n# The normal cdf _is_ the probability the variable is below a threshold\nnormal_probability_below = normal_cdf\n\n# It's above the threshold if it's not below the threshold\ndef normal_probability_above(lo: float,\n                             mu: float = 0,\n                             sigma: float = 1) -> float:\n    \"\"\"The probability that an N(mu, sigma) is greater than lo.\"\"\"\n    return 1 - normal_cdf(lo, mu, sigma)\n\n# It's between if it's less than hi, but not less than lo\ndef normal_probability_between(lo: float,\n                               hi: float,\n                               mu: float = 0,\n                               sigma: float = 1) -> float:\n    \"\"\"The probability that an N(mu, sigma) is between lo and hi.\"\"\"\n    return normal_cdf(hi, mu, sigma) - normal_cdf(lo, mu, sigma)\n\n# It's outside if it's not between\ndef normal_probability_outside(lo: float,\n                               hi: float,\n                               mu: float = 0,\n                               sigma: float = 1) -> float:\n    \"\"\"The probability that an N(mu, sigma) is not between lo and hi.\"\"\"\n    return 1 - normal_probability_between(lo, hi, mu, sigma)\n```", "```py\nfrom scratch.probability import inverse_normal_cdf\n\ndef normal_upper_bound(probability: float,\n                       mu: float = 0,\n                       sigma: float = 1) -> float:\n    \"\"\"Returns the z for which P(Z <= z) = probability\"\"\"\n    return inverse_normal_cdf(probability, mu, sigma)\n\ndef normal_lower_bound(probability: float,\n                       mu: float = 0,\n                       sigma: float = 1) -> float:\n    \"\"\"Returns the z for which P(Z >= z) = probability\"\"\"\n    return inverse_normal_cdf(1 - probability, mu, sigma)\n\ndef normal_two_sided_bounds(probability: float,\n                            mu: float = 0,\n                            sigma: float = 1) -> Tuple[float, float]:\n    \"\"\"\n Returns the symmetric (about the mean) bounds\n that contain the specified probability\n \"\"\"\n    tail_probability = (1 - probability) / 2\n\n    # upper bound should have tail_probability above it\n    upper_bound = normal_lower_bound(tail_probability, mu, sigma)\n\n    # lower bound should have tail_probability below it\n    lower_bound = normal_upper_bound(tail_probability, mu, sigma)\n\n    return lower_bound, upper_bound\n```", "```py\nmu_0, sigma_0 = normal_approximation_to_binomial(1000, 0.5)\n```", "```py\n# (469, 531)\nlower_bound, upper_bound = normal_two_sided_bounds(0.95, mu_0, sigma_0)\n```", "```py\n# 95% bounds based on assumption p is 0.5\nlo, hi = normal_two_sided_bounds(0.95, mu_0, sigma_0)\n\n# actual mu and sigma based on p = 0.55\nmu_1, sigma_1 = normal_approximation_to_binomial(1000, 0.55)\n\n# a type 2 error means we fail to reject the null hypothesis,\n# which will happen when X is still in our original interval\ntype_2_probability = normal_probability_between(lo, hi, mu_1, sigma_1)\npower = 1 - type_2_probability      # 0.887\n```", "```py\nhi = normal_upper_bound(0.95, mu_0, sigma_0)\n# is 526 (< 531, since we need more probability in the upper tail)\n\ntype_2_probability = normal_probability_below(hi, mu_1, sigma_1)\npower = 1 - type_2_probability      # 0.936\n```", "```py\ndef two_sided_p_value(x: float, mu: float = 0, sigma: float = 1) -> float:\n    \"\"\"\n How likely are we to see a value at least as extreme as x (in either\n direction) if our values are from an N(mu, sigma)?\n \"\"\"\n    if x >= mu:\n        # x is greater than the mean, so the tail is everything greater than x\n        return 2 * normal_probability_above(x, mu, sigma)\n    else:\n        # x is less than the mean, so the tail is everything less than x\n        return 2 * normal_probability_below(x, mu, sigma)\n```", "```py\ntwo_sided_p_value(529.5, mu_0, sigma_0)   # 0.062\n```", "```py\nimport random\n\nextreme_value_count = 0\nfor _ in range(1000):\n    num_heads = sum(1 if random.random() < 0.5 else 0    # Count # of heads\n                    for _ in range(1000))                # in 1000 flips,\n    if num_heads >= 530 or num_heads <= 470:             # and count how often\n        extreme_value_count += 1                         # the # is 'extreme'\n\n# p-value was 0.062 => ~62 extreme values out of 1000\nassert 59 < extreme_value_count < 65, f\"{extreme_value_count}\"\n```", "```py\ntwo_sided_p_value(531.5, mu_0, sigma_0)   # 0.0463\n```", "```py\nupper_p_value = normal_probability_above\nlower_p_value = normal_probability_below\n```", "```py\nupper_p_value(524.5, mu_0, sigma_0) # 0.061\n```", "```py\nupper_p_value(526.5, mu_0, sigma_0) # 0.047\n```", "```py\nmath.sqrt(p * (1 - p) / 1000)\n```", "```py\np_hat = 525 / 1000\nmu = p_hat\nsigma = math.sqrt(p_hat * (1 - p_hat) / 1000)   # 0.0158\n```", "```py\nnormal_two_sided_bounds(0.95, mu, sigma)        # [0.4940, 0.5560]\n```", "```py\np_hat = 540 / 1000\nmu = p_hat\nsigma = math.sqrt(p_hat * (1 - p_hat) / 1000) # 0.0158\nnormal_two_sided_bounds(0.95, mu, sigma) # [0.5091, 0.5709]\n```", "```py\nfrom typing import List\n\ndef run_experiment() -> List[bool]:\n    \"\"\"Flips a fair coin 1000 times, True = heads, False = tails\"\"\"\n    return [random.random() < 0.5 for _ in range(1000)]\n\ndef reject_fairness(experiment: List[bool]) -> bool:\n    \"\"\"Using the 5% significance levels\"\"\"\n    num_heads = len([flip for flip in experiment if flip])\n    return num_heads < 469 or num_heads > 531\n\nrandom.seed(0)\nexperiments = [run_experiment() for _ in range(1000)]\nnum_rejections = len([experiment\n                      for experiment in experiments\n                      if reject_fairness(experiment)])\n\nassert num_rejections == 46\n```", "```py\ndef estimated_parameters(N: int, n: int) -> Tuple[float, float]:\n    p = n / N\n    sigma = math.sqrt(p * (1 - p) / N)\n    return p, sigma\n```", "```py\ndef a_b_test_statistic(N_A: int, n_A: int, N_B: int, n_B: int) -> float:\n    p_A, sigma_A = estimated_parameters(N_A, n_A)\n    p_B, sigma_B = estimated_parameters(N_B, n_B)\n    return (p_B - p_A) / math.sqrt(sigma_A ** 2 + sigma_B ** 2)\n```", "```py\nz = a_b_test_statistic(1000, 200, 1000, 180)    # -1.14\n```", "```py\ntwo_sided_p_value(z)                            # 0.254\n```", "```py\nz = a_b_test_statistic(1000, 200, 1000, 150)    # -2.94\ntwo_sided_p_value(z)                            # 0.003\n```", "```py\ndef B(alpha: float, beta: float) -> float:\n    \"\"\"A normalizing constant so that the total probability is 1\"\"\"\n    return math.gamma(alpha) * math.gamma(beta) / math.gamma(alpha + beta)\n\ndef beta_pdf(x: float, alpha: float, beta: float) -> float:\n    if x <= 0 or x >= 1:          # no weight outside of [0, 1]\n        return 0\n    return x ** (alpha - 1) * (1 - x) ** (beta - 1) / B(alpha, beta)\n```", "```py\nalpha / (alpha + beta)\n```"]