- en: 'Chapter 7\. Aggregations: min, max, and Everything in Between'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A first step in exploring any dataset is often to compute various summary statistics.
    Perhaps the most common summary statistics are the mean and standard deviation,
    which allow you to summarize the “typical” values in a dataset, but other aggregations
    are useful as well (the sum, product, median, minimum and maximum, quantiles,
    etc.).
  prefs: []
  type: TYPE_NORMAL
- en: NumPy has fast built-in aggregation functions for working on arrays; we’ll discuss
    and try out some of them here.
  prefs: []
  type: TYPE_NORMAL
- en: Summing the Values in an Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a quick example, consider computing the sum of all values in an array. Python
    itself can do this using the built-in `sum` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is quite similar to that of NumPy’s `sum` function, and the result
    is the same in the simplest case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because it executes the operation in compiled code, NumPy’s version
    of the operation is computed much more quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Be careful, though: the `sum` function and the `np.sum` function are not identical,
    which can sometimes lead to confusion! In particular, their optional arguments
    have different meanings (`sum(x, 1)` initializes the sum at `1`, while `np.sum(x,
    1)` sums along axis `1`), and `np.sum` is aware of multiple array dimensions,
    as we will see in the following section.'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum and Maximum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly, Python has built-in `min` and `max` functions, used to find the
    minimum value and maximum value of any given array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy’s corresponding functions have similar syntax, and again operate much
    more quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For `min`, `max`, `sum`, and several other NumPy aggregates, a shorter syntax
    is to use methods of the array object itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Whenever possible, make sure that you are using the NumPy version of these aggregates
    when operating on NumPy arrays!
  prefs: []
  type: TYPE_NORMAL
- en: Multidimensional Aggregates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One common type of aggregation operation is an aggregate along a row or column.
    Say you have some data stored in a two-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy aggregations will apply across all elements of a multidimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Aggregation functions take an additional argument specifying the *axis* along
    which the aggregate is computed. For example, we can find the minimum value within
    each column by specifying `axis=0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The function returns four values, corresponding to the four columns of numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can find the maximum value within each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The way the axis is specified here can be confusing to users coming from other
    languages. The `axis` keyword specifies the dimension of the array that will be
    *collapsed*, rather than the dimension that will be returned. So, specifying `axis=0`
    means that axis 0 will be collapsed: for two-dimensional arrays, values within
    each column will be aggregated.'
  prefs: []
  type: TYPE_NORMAL
- en: Other Aggregation Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy provides several other aggregation functions with a similar API, and additionally
    most have a `NaN`-safe counterpart that computes the result while ignoring missing
    values, which are marked by the special IEEE floating-point `NaN` value (see [Chapter 16](ch16.xhtml#section-0304-missing-values)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 7-1](#table-7-1) provides a list of useful aggregation functions available
    in NumPy.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7-1\. Aggregation functions available in NumPy
  prefs: []
  type: TYPE_NORMAL
- en: '| Function name | NaN-safe version | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `np.sum` | `np.nansum` | Compute sum of elements |'
  prefs: []
  type: TYPE_TB
- en: '| `np.prod` | `np.nanprod` | Compute product of elements |'
  prefs: []
  type: TYPE_TB
- en: '| `np.mean` | `np.nanmean` | Compute mean of elements |'
  prefs: []
  type: TYPE_TB
- en: '| `np.std` | `np.nanstd` | Compute standard deviation |'
  prefs: []
  type: TYPE_TB
- en: '| `np.var` | `np.nanvar` | Compute variance |'
  prefs: []
  type: TYPE_TB
- en: '| `np.min` | `np.nanmin` | Find minimum value |'
  prefs: []
  type: TYPE_TB
- en: '| `np.max` | `np.nanmax` | Find maximum value |'
  prefs: []
  type: TYPE_TB
- en: '| `np.argmin` | `np.nanargmin` | Find index of minimum value |'
  prefs: []
  type: TYPE_TB
- en: '| `np.argmax` | `np.nanargmax` | Find index of maximum value |'
  prefs: []
  type: TYPE_TB
- en: '| `np.median` | `np.nanmedian` | Compute median of elements |'
  prefs: []
  type: TYPE_TB
- en: '| `np.percentile` | `np.nanpercentile` | Compute rank-based statistics of elements
    |'
  prefs: []
  type: TYPE_TB
- en: '| `np.any` | N/A | Evaluate whether any elements are true |'
  prefs: []
  type: TYPE_TB
- en: '| `np.all` | N/A | Evaluate whether all elements are true |'
  prefs: []
  type: TYPE_TB
- en: You will see these aggregates often throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: What Is the Average Height of US Presidents?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aggregates available in NumPy can act as summary statistics for a set of values.
    As a small example, let’s consider the heights of all US presidents. This data
    is available in the file *president_heights.csv*, which is a comma-separated list
    of labels and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use the Pandas package, which we’ll explore more fully in [Part III](part03.xhtml#section-0300-introduction-to-pandas),
    to read the file and extract this information (note that the heights are measured
    in centimeters):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this data array, we can compute a variety of summary statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in each case, the aggregation operation reduced the entire array
    to a single summarizing value, which gives us information about the distribution
    of values. We may also wish to compute quantiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We see that the median height of US presidents is 182 cm, or just shy of six
    feet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, sometimes it’s more useful to see a visual representation of this
    data, which we can accomplish using tools in Matplotlib (we’ll discuss Matplotlib
    more fully in [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib)).
    For example, this code generates [Figure 7-1](#fig_0204-computation-on-arrays-aggregates_files_in_output_39_0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![output 39 0](assets/output_39_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1\. Histogram of presidential heights
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
