- en: Chapter 33\. Customizing Ticks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 33 章\. 自定义刻度
- en: Matplotlib’s default tick locators and formatters are designed to be generally
    sufficient in many common situations, but are in no way optimal for every plot.
    This chapter will give several examples of adjusting the tick locations and formatting
    for the particular plot type you’re interested in.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的默认刻度定位器和格式化程序通常在许多常见情况下是足够的，但并不是每种图表类型都是最佳选择。本章将给出几个示例，调整特定图表类型的刻度位置和格式化。
- en: 'Before we go into examples, however, let’s talk a bit more about the object
    hierarchy of Matplotlib plots. Matplotlib aims to have a Python object representing
    everything that appears on the plot: for example, recall that the `Figure` is
    the bounding box within which plot elements appear. Each Matplotlib object can
    also act as a container of subobjects: for example, each `Figure` can contain
    one or more `Axes` objects, each of which in turn contains other objects representing
    plot contents.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们进入示例之前，让我们再多谈一些 Matplotlib 图表的对象层次结构。Matplotlib 的目标是让每个出现在图表上的东西都有一个 Python
    对象来表示：例如，回想一下`Figure`是包围所有图表元素的边界框。每个 Matplotlib 对象也可以作为子对象的容器：例如，每个`Figure`可以包含一个或多个`Axes`对象，每个`Axes`对象又包含表示图表内容的其他对象。
- en: The tickmarks are no exception. Each axes has attributes `xaxis` and `yaxis`,
    which in turn have attributes that contain all the properties of the lines, ticks,
    and labels that make up the axes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 刻度标记也不例外。每个轴都有属性`xaxis`和`yaxis`，这些属性又包含组成轴的线条、刻度和标签的所有属性。
- en: Major and Minor Ticks
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主要和次要刻度
- en: Within each axes, there is the concept of a *major* tickmark, and a *minor*
    tickmark. As the names imply, major ticks are usually bigger or more pronounced,
    while minor ticks are usually smaller. By default, Matplotlib rarely makes use
    of minor ticks, but one place you can see them is within logarithmic plots (see
    [Figure 33-1](#fig_0410-customizing-ticks_files_in_output_4_0)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个轴上，有一个*主要*刻度和一个*次要*刻度的概念。顾名思义，主要刻度通常较大或更显著，而次要刻度通常较小。默认情况下，Matplotlib 很少使用次要刻度，但你可以在对数图中看到它们的一种情况（见[图 33-1](#fig_0410-customizing-ticks_files_in_output_4_0)）。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![output 4 0](assets/output_4_0.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![output 4 0](assets/output_4_0.png)'
- en: Figure 33-1\. Example of logarithmic scales and labels
  id: totrans-9
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-1\. 对数刻度和标签的示例
- en: In this chart each major tick shows a large tickmark, label, and gridline, while
    each minor tick shows a smaller tickmark with no label or gridline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这张图表中，每个主要刻度显示一个大的刻度标记、标签和网格线，而每个次要刻度显示一个更小的刻度标记，没有标签或网格线。
- en: 'These tick properties—locations and labels, that is—can be customized by setting
    the `formatter` and `locator` objects of each axis. Let’s examine these for the
    x-axis of the just-shown plot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些刻度属性——即位置和标签——可以通过设置每个轴的`formatter`和`locator`对象来自定义。让我们来看看刚刚显示的图表的 x 轴：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We see that both major and minor tick labels have their locations specified
    by a `LogLocator` (which makes sense for a logarithmic plot). Minor ticks, though,
    have their labels formatted by a `NullFormatter`: this says that no labels will
    be shown.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到主要和次要刻度标签的位置都由`LogLocator`指定（这对于对数图是有意义的）。然而，次要刻度的标签由`NullFormatter`格式化：这表示不会显示任何标签。
- en: We’ll now look at a few examples of setting these locators and formatters for
    various plots.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看几个例子，设置这些定位器和格式化程序用于不同的图表。
- en: Hiding Ticks or Labels
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏刻度或标签
- en: Perhaps the most common tick/label formatting operation is the act of hiding
    ticks or labels. This can be done using `plt.NullLocator` and `plt.NullFormatter`,
    as shown here (see [Figure 33-2](#fig_0410-customizing-ticks_files_in_output_10_0)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或许最常见的刻度/标签格式化操作是隐藏刻度或标签。可以使用`plt.NullLocator`和`plt.NullFormatter`来完成，如此处所示（见[图 33-2](#fig_0410-customizing-ticks_files_in_output_10_0)）。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![output 10 0](assets/output_10_0.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![output 10 0](assets/output_10_0.png)'
- en: Figure 33-2\. Plot with hidden tick labels (x-axis) and hidden ticks (y-axis)
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-2\. 隐藏刻度标签（x 轴）和隐藏刻度（y 轴）的图表
- en: 'We’ve removed the labels (but kept the ticks/gridlines) from the x-axis, and
    removed the ticks (and thus the labels and gridlines as well) from the y-axis.
    Having no ticks at all can be useful in many situations—for example, when you
    want to show a grid of images. For instance, consider [Figure 33-3](#fig_0410-customizing-ticks_files_in_output_12_0),
    which includes images of different faces, an example often used in supervised
    machine learning problems (see, for example, [Chapter 43](ch43.xhtml#section-0507-support-vector-machines)):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已删除了 x 轴的标签（但保留了刻度/网格线），并从 y 轴删除了刻度（因此也删除了标签和网格线）。在许多情况下没有刻度可能很有用，例如当您想展示一组图像网格时。例如，考虑包含不同人脸图像的
    [图 33-3](#fig_0410-customizing-ticks_files_in_output_12_0)，这是监督机器学习问题中经常使用的示例（例如，参见
    [第 43 章](ch43.xhtml#section-0507-support-vector-machines)）：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![output 12 0](assets/output_12_0.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![output 12 0](assets/output_12_0.png)'
- en: Figure 33-3\. Hiding ticks within image plots
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-3\. 在图像绘制中隐藏刻度
- en: Each image is shown in its own axes, and we’ve set the tick locators to null
    because the tick values (pixel numbers in this case) do not convey relevant information
    for this particular visualization.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图像显示在自己的轴上，并且我们将刻度定位器设置为 null，因为刻度值（在这种情况下是像素数）不传达有关此特定可视化的相关信息。
- en: Reducing or Increasing the Number of Ticks
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少或增加刻度的数量
- en: One common problem with the default settings is that smaller subplots can end
    up with crowded labels. We can see this in the plot grid shown here (see [Figure 33-4](#fig_0410-customizing-ticks_files_in_output_15_0)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置的一个常见问题是较小的子图可能会有拥挤的标签。我们可以在这里显示的图网格中看到这一点（见[图 33-4](#fig_0410-customizing-ticks_files_in_output_15_0)）。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 15 0](assets/output_15_0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![output 15 0](assets/output_15_0.png)'
- en: Figure 33-4\. A default plot with crowded ticks
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-4\. 具有拥挤刻度的默认图
- en: Particularly for the x-axis ticks, the numbers nearly overlap, making them quite
    difficult to decipher. One way to adjust this is with `plt.MaxNLocator`, which
    allows us to specify the maximum number of ticks that will be displayed. Given
    this maximum number, Matplotlib will use internal logic to choose the particular
    tick locations (see [Figure 33-5](#fig_0410-customizing-ticks_files_in_output_17_0)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于 x 轴的刻度，数字几乎重叠在一起，使它们很难辨认。调整的一种方法是使用 `plt.MaxNLocator`，它允许我们指定将显示的最大刻度数。在给定这个最大数目后，Matplotlib
    将使用内部逻辑选择特定的刻度位置（见[图 33-5](#fig_0410-customizing-ticks_files_in_output_17_0)）。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 17 0](assets/output_17_0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![output 17 0](assets/output_17_0.png)'
- en: Figure 33-5\. Customizing the number of ticks
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-5\. 自定义刻度数目
- en: This makes things much cleaner. If you want even more control over the locations
    of regularly spaced ticks, you might also use `plt.MultipleLocator`, which we’ll
    discuss in the following section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会使事情更加清晰。如果您希望更加精确地控制定期间隔刻度的位置，还可以使用 `plt.MultipleLocator`，我们将在以下部分讨论。
- en: Fancy Tick Formats
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特别的刻度格式
- en: 'Matplotlib’s default tick formatting can leave a lot to be desired: it works
    well as a broad default, but sometimes you’d like to do something different. Consider
    this plot of a sine and a cosine curve (see [Figure 33-6](#fig_0410-customizing-ticks_files_in_output_20_0)).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的默认刻度格式可能不尽如人意：它作为一个广泛的默认选项效果不错，但有时你可能想做些不同的事情。考虑这个正弦和余弦曲线的图（见[图 33-6](#fig_0410-customizing-ticks_files_in_output_20_0)）。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 20 0](assets/output_20_0.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![output 20 0](assets/output_20_0.png)'
- en: Figure 33-6\. A default plot with integer ticks
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-6\. 具有整数刻度的默认图
- en: Note
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Full-color figures are available in the [supplemental materials on GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 全彩色图像在 [GitHub 的补充材料](https://oreil.ly/PDSH_GitHub) 上可用。
- en: There are a couple of changes we might like to make here. First, it’s more natural
    for this data to space the ticks and gridlines in multiples of <math alttext="pi"><mi>π</mi></math>
    . We can do this by setting a `MultipleLocator`, which locates ticks at a multiple
    of the number we provide. For good measure, we’ll add both major and minor ticks
    in multiples of <math alttext="pi slash 2"><mrow><mi>π</mi> <mo>/</mo> <mn>2</mn></mrow></math>
    and <math alttext="pi slash 4"><mrow><mi>π</mi> <mo>/</mo> <mn>4</mn></mrow></math>
    (see [Figure 33-7](#fig_0410-customizing-ticks_files_in_output_22_0)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能有一些我们想做的改变。首先，对于这些数据来说，在 π 的倍数间隔刻度和网格线更自然。我们可以通过设置 `MultipleLocator` 来实现这一点，它将刻度定位在我们提供的数字的倍数上。为了保险起见，我们将添加
    π/2 和 π/4 的主要和次要刻度（见[图 33-7](#fig_0410-customizing-ticks_files_in_output_22_0)）。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 22 0](assets/output_22_0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![output 22 0](assets/output_22_0.png)'
- en: Figure 33-7\. Ticks at multiples of π/2 and π/4
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-7\. π/2 和 π/4 的倍数处的刻度
- en: 'But now these tick labels look a little bit silly: we can see that they are
    multiples of <math alttext="pi"><mi>π</mi></math> , but the decimal representation
    does not immediately convey this. To fix this, we can change the tick formatter.
    There’s no built-in formatter for what we want to do, so we’ll instead use `plt.FuncFormatter`,
    which accepts a user-defined function giving fine-grained control over the tick
    outputs (see [Figure 33-8](#fig_0410-customizing-ticks_files_in_output_24_0)).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在这些刻度标签看起来有点傻：我们可以看到它们是<math alttext="pi"><mi>π</mi></math>的倍数，但小数表示并不能立即传达这一点。为了解决这个问题，我们可以改变刻度的格式化方式。我们想要做的没有内置的格式化程序，所以我们将使用`plt.FuncFormatter`，它接受一个用户定义的函数，可以对刻度输出进行细粒度的控制（见[图 33-8](#fig_0410-customizing-ticks_files_in_output_24_0)）。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is much better! Notice that we’ve made use of Matplotlib’s LaTeX support,
    specified by enclosing the string within dollar signs. This is very convenient
    for display of mathematical symbols and formulae: in this case, `"$\pi$"` is rendered
    as the Greek character <math alttext="pi"><mi>π</mi></math> .'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这好多了！请注意，我们已经利用了Matplotlib的LaTeX支持，通过在字符串中加入美元符号来指定。这对于显示数学符号和公式非常方便：在这种情况下，`"$\pi$"`被渲染为希腊字母<math
    alttext="pi"><mi>π</mi></math> 。
- en: '![output 24 0](assets/output_24_0.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![output 24 0](assets/output_24_0.png)'
- en: Figure 33-8\. Ticks with custom labels
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 33-8\. 自定义标签的刻度
- en: Summary of Formatters and Locators
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述格式化程序和定位器
- en: We’ve seen a couple of the available formatters and locators; I’ll conclude
    this chapter by listing all of the built-in locator options ([Table 33-1](#table-33-1))
    and formatter options ([Table 33-2](#table-33-2)). For more information on of
    these, refer to the docstrings or to the Matplotlib documentation. Each of the
    following is available in the `plt` namespace.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了一些可用的格式化程序和定位器；我将通过列出所有内置定位器选项（[表 33-1](#table-33-1)）和格式化程序选项（[表 33-2](#table-33-2)）来结束本章。有关更多信息，请参阅docstrings或Matplotlib文档。以下每个都在`plt`命名空间中可用。
- en: Table 33-1\. Matplotlib locator options
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表 33-1\. Matplotlib定位器选项
- en: '| Locator class | Description |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 定位器类 | 描述 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `NullLocator` | No ticks |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `NullLocator` | 没有刻度 |'
- en: '| `FixedLocator` | Tick locations are fixed |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `FixedLocator` | 刻度位置固定 |'
- en: '| `IndexLocator` | Locator for index plots (e.g., where `x = range(len(y)))`
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `IndexLocator` | 用于索引图的定位器（例如，当`x = range(len(y)))`时 |'
- en: '| `LinearLocator` | Evenly spaced ticks from min to max |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `LinearLocator` | 从最小到最大均匀间隔的刻度 |'
- en: '| `LogLocator` | Logarithmically spaced ticks from min to max |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `LogLocator` | 对数间隔的刻度，从最小到最大 |'
- en: '| `MultipleLocator` | Ticks and range are a multiple of base |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `MultipleLocator` | 刻度和范围是基数的倍数 |'
- en: '| `MaxNLocator` | Finds up to a max number of ticks at nice locations |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `MaxNLocator` | 在良好位置找到最大数量的刻度 |'
- en: '| `AutoLocator` | (Default) `MaxNLocator` with simple defaults |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `AutoLocator` | （默认）带有简单默认值的`MaxNLocator` |'
- en: '| `AutoMinorLocator` | Locator for minor ticks |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `AutoMinorLocator` | 次要刻度的定位器 |'
- en: Table 33-2\. Matplotlib formatter options
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 表 33-2\. Matplotlib格式化程序选项
- en: '| Formatter class | Description |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 格式化程序类 | 描述 |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `NullFormatter` | No labels on the ticks |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `NullFormatter` | 刻度上没有标签 |'
- en: '| `IndexFormatter` | Set the strings from a list of labels |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `IndexFormatter` | 从标签列表中设置字符串 |'
- en: '| `FixedFormatter` | Set the strings manually for the labels |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `FixedFormatter` | 手动设置标签的字符串 |'
- en: '| `FuncFormatter` | User-defined function sets the labels |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `FuncFormatter` | 用户定义的函数设置标签 |'
- en: '| `FormatStrFormatter` | Use a format string for each value |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `FormatStrFormatter` | 使用每个值的格式字符串 |'
- en: '| `ScalarFormatter` | Default formatter for scalar values |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `ScalarFormatter` | 标量值的默认格式化程序 |'
- en: '| `LogFormatter` | Default formatter for log axes |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `LogFormatter` | 对数轴的默认格式化程序 |'
- en: We’ll see further examples of these throughout the remainder of the book.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的其余部分看到更多这些示例。
