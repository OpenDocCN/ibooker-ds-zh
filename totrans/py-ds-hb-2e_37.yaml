- en: Chapter 33\. Customizing Ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib’s default tick locators and formatters are designed to be generally
    sufficient in many common situations, but are in no way optimal for every plot.
    This chapter will give several examples of adjusting the tick locations and formatting
    for the particular plot type you’re interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go into examples, however, let’s talk a bit more about the object
    hierarchy of Matplotlib plots. Matplotlib aims to have a Python object representing
    everything that appears on the plot: for example, recall that the `Figure` is
    the bounding box within which plot elements appear. Each Matplotlib object can
    also act as a container of subobjects: for example, each `Figure` can contain
    one or more `Axes` objects, each of which in turn contains other objects representing
    plot contents.'
  prefs: []
  type: TYPE_NORMAL
- en: The tickmarks are no exception. Each axes has attributes `xaxis` and `yaxis`,
    which in turn have attributes that contain all the properties of the lines, ticks,
    and labels that make up the axes.
  prefs: []
  type: TYPE_NORMAL
- en: Major and Minor Ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within each axes, there is the concept of a *major* tickmark, and a *minor*
    tickmark. As the names imply, major ticks are usually bigger or more pronounced,
    while minor ticks are usually smaller. By default, Matplotlib rarely makes use
    of minor ticks, but one place you can see them is within logarithmic plots (see
    [Figure 33-1](#fig_0410-customizing-ticks_files_in_output_4_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![output 4 0](assets/output_4_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-1\. Example of logarithmic scales and labels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this chart each major tick shows a large tickmark, label, and gridline, while
    each minor tick shows a smaller tickmark with no label or gridline.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tick properties—locations and labels, that is—can be customized by setting
    the `formatter` and `locator` objects of each axis. Let’s examine these for the
    x-axis of the just-shown plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that both major and minor tick labels have their locations specified
    by a `LogLocator` (which makes sense for a logarithmic plot). Minor ticks, though,
    have their labels formatted by a `NullFormatter`: this says that no labels will
    be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll now look at a few examples of setting these locators and formatters for
    various plots.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding Ticks or Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps the most common tick/label formatting operation is the act of hiding
    ticks or labels. This can be done using `plt.NullLocator` and `plt.NullFormatter`,
    as shown here (see [Figure 33-2](#fig_0410-customizing-ticks_files_in_output_10_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![output 10 0](assets/output_10_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-2\. Plot with hidden tick labels (x-axis) and hidden ticks (y-axis)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We’ve removed the labels (but kept the ticks/gridlines) from the x-axis, and
    removed the ticks (and thus the labels and gridlines as well) from the y-axis.
    Having no ticks at all can be useful in many situations—for example, when you
    want to show a grid of images. For instance, consider [Figure 33-3](#fig_0410-customizing-ticks_files_in_output_12_0),
    which includes images of different faces, an example often used in supervised
    machine learning problems (see, for example, [Chapter 43](ch43.xhtml#section-0507-support-vector-machines)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 12 0](assets/output_12_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-3\. Hiding ticks within image plots
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Each image is shown in its own axes, and we’ve set the tick locators to null
    because the tick values (pixel numbers in this case) do not convey relevant information
    for this particular visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing or Increasing the Number of Ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One common problem with the default settings is that smaller subplots can end
    up with crowded labels. We can see this in the plot grid shown here (see [Figure 33-4](#fig_0410-customizing-ticks_files_in_output_15_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 15 0](assets/output_15_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-4\. A default plot with crowded ticks
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Particularly for the x-axis ticks, the numbers nearly overlap, making them quite
    difficult to decipher. One way to adjust this is with `plt.MaxNLocator`, which
    allows us to specify the maximum number of ticks that will be displayed. Given
    this maximum number, Matplotlib will use internal logic to choose the particular
    tick locations (see [Figure 33-5](#fig_0410-customizing-ticks_files_in_output_17_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![output 17 0](assets/output_17_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-5\. Customizing the number of ticks
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This makes things much cleaner. If you want even more control over the locations
    of regularly spaced ticks, you might also use `plt.MultipleLocator`, which we’ll
    discuss in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Fancy Tick Formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib’s default tick formatting can leave a lot to be desired: it works
    well as a broad default, but sometimes you’d like to do something different. Consider
    this plot of a sine and a cosine curve (see [Figure 33-6](#fig_0410-customizing-ticks_files_in_output_20_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![output 20 0](assets/output_20_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-6\. A default plot with integer ticks
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Full-color figures are available in the [supplemental materials on GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of changes we might like to make here. First, it’s more natural
    for this data to space the ticks and gridlines in multiples of <math alttext="pi"><mi>π</mi></math>
    . We can do this by setting a `MultipleLocator`, which locates ticks at a multiple
    of the number we provide. For good measure, we’ll add both major and minor ticks
    in multiples of <math alttext="pi slash 2"><mrow><mi>π</mi> <mo>/</mo> <mn>2</mn></mrow></math>
    and <math alttext="pi slash 4"><mrow><mi>π</mi> <mo>/</mo> <mn>4</mn></mrow></math>
    (see [Figure 33-7](#fig_0410-customizing-ticks_files_in_output_22_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 22 0](assets/output_22_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-7\. Ticks at multiples of π/2 and π/4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'But now these tick labels look a little bit silly: we can see that they are
    multiples of <math alttext="pi"><mi>π</mi></math> , but the decimal representation
    does not immediately convey this. To fix this, we can change the tick formatter.
    There’s no built-in formatter for what we want to do, so we’ll instead use `plt.FuncFormatter`,
    which accepts a user-defined function giving fine-grained control over the tick
    outputs (see [Figure 33-8](#fig_0410-customizing-ticks_files_in_output_24_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is much better! Notice that we’ve made use of Matplotlib’s LaTeX support,
    specified by enclosing the string within dollar signs. This is very convenient
    for display of mathematical symbols and formulae: in this case, `"$\pi$"` is rendered
    as the Greek character <math alttext="pi"><mi>π</mi></math> .'
  prefs: []
  type: TYPE_NORMAL
- en: '![output 24 0](assets/output_24_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 33-8\. Ticks with custom labels
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Summary of Formatters and Locators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen a couple of the available formatters and locators; I’ll conclude
    this chapter by listing all of the built-in locator options ([Table 33-1](#table-33-1))
    and formatter options ([Table 33-2](#table-33-2)). For more information on of
    these, refer to the docstrings or to the Matplotlib documentation. Each of the
    following is available in the `plt` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Table 33-1\. Matplotlib locator options
  prefs: []
  type: TYPE_NORMAL
- en: '| Locator class | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `NullLocator` | No ticks |'
  prefs: []
  type: TYPE_TB
- en: '| `FixedLocator` | Tick locations are fixed |'
  prefs: []
  type: TYPE_TB
- en: '| `IndexLocator` | Locator for index plots (e.g., where `x = range(len(y)))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `LinearLocator` | Evenly spaced ticks from min to max |'
  prefs: []
  type: TYPE_TB
- en: '| `LogLocator` | Logarithmically spaced ticks from min to max |'
  prefs: []
  type: TYPE_TB
- en: '| `MultipleLocator` | Ticks and range are a multiple of base |'
  prefs: []
  type: TYPE_TB
- en: '| `MaxNLocator` | Finds up to a max number of ticks at nice locations |'
  prefs: []
  type: TYPE_TB
- en: '| `AutoLocator` | (Default) `MaxNLocator` with simple defaults |'
  prefs: []
  type: TYPE_TB
- en: '| `AutoMinorLocator` | Locator for minor ticks |'
  prefs: []
  type: TYPE_TB
- en: Table 33-2\. Matplotlib formatter options
  prefs: []
  type: TYPE_NORMAL
- en: '| Formatter class | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `NullFormatter` | No labels on the ticks |'
  prefs: []
  type: TYPE_TB
- en: '| `IndexFormatter` | Set the strings from a list of labels |'
  prefs: []
  type: TYPE_TB
- en: '| `FixedFormatter` | Set the strings manually for the labels |'
  prefs: []
  type: TYPE_TB
- en: '| `FuncFormatter` | User-defined function sets the labels |'
  prefs: []
  type: TYPE_TB
- en: '| `FormatStrFormatter` | Use a format string for each value |'
  prefs: []
  type: TYPE_TB
- en: '| `ScalarFormatter` | Default formatter for scalar values |'
  prefs: []
  type: TYPE_TB
- en: '| `LogFormatter` | Default formatter for log axes |'
  prefs: []
  type: TYPE_TB
- en: We’ll see further examples of these throughout the remainder of the book.
  prefs: []
  type: TYPE_NORMAL
