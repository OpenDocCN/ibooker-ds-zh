- en: Chapter 30\. Customizing Colorbars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第30章 定制色条
- en: 'Plot legends identify discrete labels of discrete points. For continuous labels
    based on the color of points, lines, or regions, a labeled colorbar can be a great
    tool. In Matplotlib, a colorbar is drawn as a separate axes that can provide a
    key for the meaning of colors in a plot. Because the book is printed in black
    and white, this chapter has an accompanying [online supplement](https://oreil.ly/PDSH_GitHub)
    where you can view the figures in full color. We’ll start by setting up the notebook
    for plotting and importing the functions we will use:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图图例识别离散点的离散标签。对于基于点、线或区域颜色的连续标签，带标签的色条是一个很好的工具。在Matplotlib中，色条被绘制为一个独立的轴，可以为绘图中颜色的含义提供关键。由于本书以黑白印刷，本章配有一个[在线补充](https://oreil.ly/PDSH_GitHub)，您可以在其中查看全彩色的图表。我们将从设置用于绘图的笔记本和导入我们将使用的函数开始：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we have seen several times already, the simplest colorbar can be created
    with the `plt.colorbar` function (see [Figure 30-1](#fig_0407-customizing-colorbars_files_in_output_5_0)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经看到的几次，最简单的色条可以使用`plt.colorbar`函数创建（参见[图 30-1](#fig_0407-customizing-colorbars_files_in_output_5_0)）。
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Full-color figures are available in the [supplemental materials on GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 全彩色图可以在[GitHub上的补充材料](https://oreil.ly/PDSH_GitHub)中找到。
- en: We’ll now discuss a few ideas for customizing these colorbars and using them
    effectively in various situations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论几个关于定制这些色条并在各种情况下有效使用它们的想法。
- en: '![output 5 0](assets/output_5_0.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![output 5 0](assets/output_5_0.png)'
- en: Figure 30-1\. A simple colorbar legend
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-1\. 一个简单的色条图例
- en: Customizing Colorbars
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义色条
- en: The colormap can be specified using the `cmap` argument to the plotting function
    that is creating the visualization (see [Figure 30-2](#fig_0407-customizing-colorbars_files_in_output_8_0)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`cmap`参数来指定色图，该参数用于创建可视化的绘图函数（参见[图 30-2](#fig_0407-customizing-colorbars_files_in_output_8_0)）。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 8 0](assets/output_8_0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![output 8 0](assets/output_8_0.png)'
- en: Figure 30-2\. A blue-scale colormap
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-2\. 一个蓝色调色板
- en: 'The names of available colormaps are in the `plt.cm` namespace; using IPython’s
    tab completion feature will give you a full list of built-in possibilities:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可用色图的名称在`plt.cm`命名空间中；使用IPython的制表完成功能将为您提供内置可能性的完整列表：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'But being *able* to choose a colormap is just the first step: more important
    is how to *decide* among the possibilities! The choice turns out to be much more
    subtle than you might initially expect.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是*能够*选择色图只是第一步：更重要的是如何*决定*选择哪种！选择实际上比您最初期望的要微妙得多。
- en: Choosing the Colormap
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择色图
- en: A full treatment of color choice within visualizations is beyond the scope of
    this book, but for entertaining reading on this subject and others, see the article
    [“Ten Simple Rules for Better Figures”](https://oreil.ly/g4GLV) by Nicholas Rougier,
    Michael Droettboom, and Philip Bourne. Matplotlib’s online documentation also
    has an [interesting discussion](https://oreil.ly/Ll1ir) of colormap choice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化中选择颜色的全面处理超出了本书的范围，但是对于这个主题和其他主题的有趣阅读，请参阅Nicholas Rougier、Michael Droettboom和Philip
    Bourne的文章[“Ten Simple Rules for Better Figures”](https://oreil.ly/g4GLV)。Matplotlib的在线文档还有一个有趣的关于色图选择的讨论（https://oreil.ly/Ll1ir）。
- en: 'Broadly, you should be aware of three different categories of colormaps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，您应该了解三种不同类型的色图：
- en: '*Sequential colormaps*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*连续色图*'
- en: These are made up of one continuous sequence of colors (e.g., `binary` or `viridis`).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些由一系列连续的颜色组成（例如，`binary`或`viridis`）。
- en: '*Divergent colormaps*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*发散色图*'
- en: These usually contain two distinct colors, which show positive and negative
    deviations from a mean (e.g., `RdBu` or `PuOr`).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通常包含两种不同的颜色，显示与平均值的正负偏差（例如，`RdBu`或`PuOr`）。
- en: '*Qualitative colormaps*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*   *定性色图*'
- en: These mix colors with no particular sequence (e.g., `rainbow` or `jet`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些颜色混合没有特定的顺序（例如，`rainbow`或`jet`）。
- en: The `jet` colormap, which was the default in Matplotlib prior to version 2.0,
    is an example of a qualitative colormap. Its status as the default was quite unfortunate,
    because qualitative maps are often a poor choice for representing quantitative
    data. Among the problems is the fact that qualitative maps usually do not display
    any uniform progression in brightness as the scale increases.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`jet`色图是Matplotlib在2.0版本之前的默认色图的一个示例。它作为默认的状态非常不幸，因为定性色图通常不适合表示定量数据。其中一个问题是，定性色图通常不显示随着比例增加而亮度均匀递增的特性。'
- en: We can see this by converting the `jet` colorbar into black and white (see [Figure 30-3](#fig_0407-customizing-colorbars_files_in_output_12_0)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `jet` 色彩条转换为黑白图像，我们可以看到这一点（见 [图 30-3](#fig_0407-customizing-colorbars_files_in_output_12_0)）。
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 12 0](assets/output_12_0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![output 12 0](assets/output_12_0.png)'
- en: Figure 30-3\. The `jet` colormap and its uneven luminance scale
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-3\. `jet` 色彩映射及其不均匀的亮度比例
- en: Notice the bright stripes in the grayscale image. Even in full color, this uneven
    brightness means that the eye will be drawn to certain portions of the color range,
    which will potentially emphasize unimportant parts of the dataset. It’s better
    to use a colormap such as `viridis` (the default as of Matplotlib 2.0), which
    is specifically constructed to have an even brightness variation across the range;
    thus, it not only plays well with our color perception, but also will translate
    well to grayscale printing (see [Figure 30-4](#fig_0407-customizing-colorbars_files_in_output_14_0)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意灰度图像中的明亮条纹。即使是全彩色，这种不均匀的亮度也意味着眼睛会被色彩范围的某些部分所吸引，这可能会强调数据集中不重要的部分。最好使用像`viridis`（Matplotlib
    2.0 的默认色彩映射）这样的色彩映射，它专门设计成在整个范围内具有均匀的亮度变化；因此，它不仅与我们的色彩感知相配，而且在灰度打印时也能很好地转化（参见
    [图 30-4](#fig_0407-customizing-colorbars_files_in_output_14_0)）。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 14 0](assets/output_14_0.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![output 14 0](assets/output_14_0.png)'
- en: Figure 30-4\. The viridis colormap and its even luminance scale
  id: totrans-37
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-4\. `viridis` 色彩映射及其均匀的亮度比例
- en: For other situations, such as showing positive and negative deviations from
    some mean, dual-color colorbars such as `RdBu` (*Red–Blue*) are helpful. However,
    as you can see in [Figure 30-5](#fig_0407-customizing-colorbars_files_in_output_16_0),
    it’s important to note that the positive/negative information will be lost upon
    translation to grayscale!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他情况，如显示与某个均值的正负偏差，双色彩色条如`RdBu`（红-蓝）很有帮助。但是，正如您在 [图 30-5](#fig_0407-customizing-colorbars_files_in_output_16_0)
    中所看到的，重要的是注意正/负信息在转换为灰度时会丢失！
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 16 0](assets/output_16_0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![output 16 0](assets/output_16_0.png)'
- en: Figure 30-5\. The `RdBu` colormap and its luminance
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-5\. `RdBu` 色彩映射及其亮度
- en: We’ll see examples of using some of these colormaps as we continue.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的示例中，我们将看到如何使用其中一些色彩映射。
- en: There are a large number of colormaps available in Matplotlib; to see a list
    of them, you can use IPython to explore the `plt.cm` submodule. For a more principled
    approach to colors in Python, you can refer to the tools and documentation within
    the Seaborn library (see [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 提供了大量的色彩映射选项；要查看它们的列表，可以使用 IPython 来探索 `plt.cm` 子模块。对于Python中更加原则性的颜色处理方法，可以参考
    Seaborn 库中的工具和文档（见 [第 36 章](ch36.xhtml#section-0414-visualization-with-seaborn)）。
- en: Color Limits and Extensions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 色彩限制和扩展
- en: 'Matplotlib allows for a large range of colorbar customization. The colorbar
    itself is simply an instance of `plt.Axes`, so all of the axes and tick formatting
    tricks we’ve seen so far are applicable. The colorbar has some interesting flexibility:
    for example, we can narrow the color limits and indicate the out-of-bounds values
    with a triangular arrow at the top and bottom by setting the `extend` property.
    This might come in handy, for example, if displaying an image that is subject
    to noise (see [Figure 30-6](#fig_0407-customizing-colorbars_files_in_output_19_0)).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 允许大范围的颜色条定制。颜色条本身只是 `plt.Axes` 的一个实例，因此我们之前看到的所有坐标轴和刻度格式化技巧都适用。颜色条具有一些有趣的灵活性：例如，我们可以缩小颜色限制，并通过设置
    `extend` 属性在顶部和底部指示超出范围的值以三角箭头表示。例如，在显示受噪声影响的图像时（见 [图 30-6](#fig_0407-customizing-colorbars_files_in_output_19_0)），这可能会很有用。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 19 0](assets/output_19_0.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![output 19 0](assets/output_19_0.png)'
- en: Figure 30-6\. Specifying colormap extensions^([1](ch30.xhtml#idm45858757122240))
  id: totrans-48
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 30-6\. 指定色彩映射扩展^([1](ch30.xhtml#idm45858757122240))
- en: Notice that in the left panel, the default color limits respond to the noisy
    pixels, and the range of the noise completely washes out the pattern we are interested
    in. In the right panel, we manually set the color limits and add extensions to
    indicate values that are above or below those limits. The result is a much more
    useful visualization of our data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意左侧面板中，默认的颜色限制对噪声像素做出了响应，并且噪声范围完全淹没了我们感兴趣的模式。在右侧面板中，我们手动设置了颜色限制，并添加了扩展以指示超出这些限制的值。结果是我们数据的可视化更加有用。
- en: Discrete Colorbars
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散色彩条
- en: Colormaps are by default continuous, but sometimes you’d like to represent discrete
    values. The easiest way to do this is to use the `plt.cm.get_cmap` function and
    pass the name of a suitable colormap along with the number of desired bins (see
    [Figure 30-7](#fig_0407-customizing-colorbars_files_in_output_22_0)).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 色图默认是连续的，但有时您想要表示离散值。这样做的最简单方法是使用`plt.cm.get_cmap`函数，传递一个合适的色图名称和所需的箱数（见[图30-7](#fig_0407-customizing-colorbars_files_in_output_22_0)）。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![output 22 0](assets/output_22_0.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![output 22 0](assets/output_22_0.png)'
- en: Figure 30-7\. A discretized colormap
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图30-7\. 一个离散的色图
- en: The discrete version of a colormap can be used just like any other colormap.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 色图的离散版本可以像任何其他色图一样使用。
- en: 'Example: Handwritten Digits'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子：手写数字
- en: As an example of where this can be applied, let’s look at an interesting visualization
    of some handwritten digits from the digits dataset, included in Scikit-Learn;
    it consists of nearly 2,000 <math alttext="8 times 8"><mrow><mn>8</mn> <mo>×</mo>
    <mn>8</mn></mrow></math> thumbnails showing various handwritten digits.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以应用的一个例子是，让我们看一看Scikit-Learn中包含的手写数字数据集的一个有趣的可视化；它包括近2000个<math alttext="8
    times 8"><mrow><mn>8</mn> <mo>×</mo> <mn>8</mn></mrow></math>缩略图，显示各种手写数字。
- en: For now, let’s start by downloading the digits dataset and visualizing several
    of the example images with `plt.imshow` (see [Figure 30-8](#fig_0407-customizing-colorbars_files_in_output_25_0)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从下载手写数字数据集和用`plt.imshow`可视化几个示例图像开始（见[图30-8](#fig_0407-customizing-colorbars_files_in_output_25_0)）。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![output 25 0](assets/output_25_0.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![output 25 0](assets/output_25_0.png)'
- en: Figure 30-8\. Sample of handwritten digits data
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图30-8\. 手写数字数据的样本
- en: 'Because each digit is defined by the hue of its 64 pixels, we can consider
    each digit to be a point lying in 64-dimensional space: each dimension represents
    the brightness of one pixel. Visualizing such high-dimensional data can be difficult,
    but one way to approach this task is to use a *dimensionality reduction* technique
    such as manifold learning to reduce the dimensionality of the data while maintaining
    the relationships of interest. Dimensionality reduction is an example of unsupervised
    machine learning, and we will discuss it in more detail in [Chapter 37](ch37.xhtml#section-0501-what-is-machine-learning).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个数字由其64个像素的色调定义，我们可以将每个数字视为位于64维空间中的一个点：每个维度表示一个像素的亮度。可视化这样高维数据可能会很困难，但处理这个任务的一种方法是使用流形学习等*降维*技术来减少数据的维度，同时保持感兴趣的关系。降维是无监督机器学习的一个例子，我们将在[第37章](ch37.xhtml#section-0501-what-is-machine-learning)中更详细地讨论它。
- en: 'Deferring the discussion of these details, let’s take a look at a two-dimensional
    manifold learning projection of the digits data (see [Chapter 46](ch46.xhtml#section-0510-manifold-learning)
    for details):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 推迟讨论这些细节，让我们来看一看手写数字数据的二维流形学习投影（详情见[第46章](ch46.xhtml#section-0510-manifold-learning)）：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We’ll use our discrete colormap to view the results, setting the `ticks` and
    `clim` to improve the aesthetics of the resulting colorbar (see [Figure 30-9](#fig_0407-customizing-colorbars_files_in_output_29_0)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们的离散色图来查看结果，设置`ticks`和`clim`以改善结果色条的美观度（见[图30-9](#fig_0407-customizing-colorbars_files_in_output_29_0)）。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![output 29 0](assets/output_29_0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![output 29 0](assets/output_29_0.png)'
- en: Figure 30-9\. Manifold embedding of handwritten digit pixels
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图30-9\. 手写数字像素的流形嵌入
- en: 'The projection also gives us some insights on the relationships within the
    dataset: for example, the ranges of 2 and 3 nearly overlap in this projection,
    indicating that some handwritten 2s and 3s are difficult to distinguish, and may
    be more likely to be confused by an automated classification algorithm. Other
    values, like 0 and 1, are more distantly separated, and may be less likely to
    be confused.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 投影还向我们展示了数据集内部的一些关系：例如，在这个投影中，2和3的范围几乎重叠，表明一些手写的2和3很难区分，可能更容易被自动分类算法混淆。而像0和1这样的值则分开得更远，可能更不容易混淆。
- en: We’ll return to manifold learning and digit classification in [Part V](part05.xhtml#section-0500-machine-learning).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第五部分](part05.xhtml#section-0500-machine-learning)回到流形学习和数字分类。
- en: ^([1](ch30.xhtml#idm45858757122240-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch30.xhtml#idm45858757122240-marker)) 本图的完整版本可以在[GitHub](https://oreil.ly/PDSH_GitHub)上找到。
