["```py\nMy name is Susan.          // English\n```", "```py\nJe m'appelle Susan.        // French\n```", "```py\n # a number is just digits\n 25\n\n # a string is anything surrounded by matching quotation marks\n \"Hello World\"\n\n # a list is surrounded by square brackets, with commas between items\n # note that in Python, the first item in a list is considered to be\n # in position `0`, the next in position `1`, and so on\n [\"this\",\"is\",1,\"list\"]\n\n # a dict is a set of key:value pairs, separated by commas and surrounded\n # by curly braces\n {\"title\":\"Practical Python for Data Wrangling and Data Quality\",\n  \"format\": \"book\",\n  \"author\": \"Susan E. McGregor\"\n }\n\n # a boolean is a data type that has only two values, true and false.\n True\n```", "```py\nThe author is Susan E. McGregor\n```", "```py\nauthor = \"Susan E. McGregor\"\n```", "```py\n# create a variable named author, set its contents to \"Susan E. McGregor\"\nauthor = \"Susan E. McGregor\"\n\n# confirm that the computer \"remembers\" what's in the `author` variable\nprint(author)\n```", "```py\n# create a variable named nyc_resident, set its contents to \"Susan E. McGregor\"\nnyc_resident = \"Susan E. McGregor\"\n\n# confirm that the computer \"remembers\" what's in the `nyc_resident` variable\nprint(nyc_resident)\n\n# create a variable named fuzzyPinkBunny, set its contents to \"Susan E. McGregor\"\nfuzzyPinkBunny = \"Susan E. McGregor\"\n\n# confirm that the computer \"remembers\" what's in the `fuzzyPinkBunny` variable\nprint(fuzzyPinkBunny)\n\n# but correct capitalization matters!\n# the following line will produce an error\nprint(fuzzypinkbunny)\n```", "```py\n print(\"Hello World!\")\n```", "```py\n# splitting a string \"literal\" and then printing the result\nsplit_world = \"Hello World!\".split()\nprint(split_world)\n\n# assigning a string to a variable\n# then printing the result of calling the `split()` method on it\nworld_msg = \"Hello World!\"\nprint(world_msg.split())\n```", "```py\n# the following will produce an error because\n# the `split()` method must be called on a string in order to work!\nsplit(\"Hello World!\")\n```", "```py\n# the following will produce an error because\n# there is no `split()` method for numbers!\nprint(5.split())\n```", "```py\n# create a variable named author\nauthor = \"Susan E. McGregor\"\n\n# create another variable named editor\neditor  = \"Jeff Bleiel\"\n\n# use the built-in print function to output \"Hello\" messages to each person\nprint(\"Hello \"+author)\nprint(\"Hello \"+editor)\n```", "```py\n# create a function that prints out a greeting\n# to any name passed to the function\n\ndef greet_me(a_name):\n    print(\"Hello \"+a_name)\n\n# create a variable named author\nauthor = \"Susan E. McGregor\"\n\n# create another variable named editor\neditor  = \"Jeff Bleiel\"\n\n# use my custom function, `greet_me` to output \"Hello\" messages to each person\ngreet_me(author)\ngreet_me(editor)\n```", "```py\n# create a list that contains the number of pages in each chapter\n# of a fictional print version of this book\n\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n```", "```py\n# fictional list of chapter page counts\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n\n# variable for tracking total page count; starting value is 0\ntotal_pages = 0\n\n# for every item in the list, perform some action\nfor a_number in page_counts:\n\n    # in this case, add the number to our \"total_pages\" variable\n    total_pages = total_pages + a_number\n\nprint(total_pages)\n```", "```py\nfor a_number in page_counts:\n```", "```py\n# fictional list of chapter page counts\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n\n# variable for tracking total page count; starting value is 0\ntotal_pages = 0\n\n# for every item in the list, perform some action\nfor a_number in page_counts:\n    print(\"Top of loop!\")\n    print(\"The current item is:\")\n    print(a_number)\n    total_pages = total_pages + a_number\n    print(\"The running total is:\")\n    print(total_pages)\n    print(\"Bottom of loop!\")\n\nprint(total_pages)\n```", "```py\n# fictional list of chapter page counts\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n\n# `print()` the result of using the `sum()` function on the list ![1](assets/1.png)\nprint(sum(page_counts))\n```", "```py\n# fictional list of chapter page counts\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n\n# create variables to keep track of:\n# the total pages in the book\ntotal_pages = 0\n\n# the number of chapters with more than 30 pages,\nunder_30 = 0\n\n# the number of chapters with fewer than 30 pages\nover_30 = 0\n\n# for every item in the page_counts list:\nfor a_number in page_counts:\n\n    # add the current number of pages to our total_pages count\n    total_pages = total_pages + a_number\n\n    # check if the current number of pages is more than 30\n    if a_number > 30:\n\n        # if so, add 1 to our over_30 counter\n        over_30 = over_30 + 1\n\n    # otherwise...\n    else:\n        # add 1 to our under_30 counter\n        under_30 = under_30 + 1\n\n# print our various results\nprint(total_pages)\nprint(\"Number of chapters over 30 pages:\")\nprint(over_30)\nprint(\"Number of chapters under 30 pages:\")\nprint(under_30)\n```", "```py\n# fictional list of chapter page counts\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n\n# define a new `count_pages()` function that takes one ingredient/argument:\n# a list of numbers\ndef count_pages(page_count_list): ![1](assets/1.png)\n\n    # create variables to keep track of:\n    # the total pages in the book\n    total_pages = 0\n\n    # the number of chapters with more than 30 pages,\n    under_30 = 0\n\n    # the number of chapters with fewer than 30 pages\n    over_30 = 0\n\n    # for every item in the page_count_list:\n    for a_number in page_count_list: ![2](assets/2.png)\n\n        # add the current number of pages to our total_pages count\n        total_pages = total_pages + a_number\n\n        # check if the current number of pages is more than 30\n        if a_number > 30:\n\n            # if so, add 1 to our over_30 counter\n            over_30 = over_30 + 1\n\n        # otherwise...\n        else:\n            # add 1 to our under_30 counter\n            under_30 = under_30 + 1\n\n    # print our various results\n    print(total_pages)\n    print(\"Number of chapters over 30 pages:\")\n    print(over_30)\n    print(\"Number of chapters under 30 pages:\")\n    print(under_30)\n\n# call/execute this \"recipe\", being sure to pass in our\n# actual list as an argument/ingredient\ncount_pages(page_counts) ![3](assets/3.png)\n```", "```py\n1 # although the actual error is on line 4 (missing comma)\n2 # the error message points to line 5\n3 book = {\"title\":\"Practical Python for Data Wrangling and Data Quality\",\n4  \"format\": \"book\"\n5  \"author\": \"Susan E. McGregor\"\n6 }\n```", "```py\n  File \"ObjectError.py\", line 5\n    \"author\": \"Susan E. McGregor\"\n            ^\nSyntaxError: invalid syntax\n```", "```py\n# create a function that prints out a greeting to any name passed to the function\n\ndef greet_me(a_name):\n    print(\"Hello \"+A_name)\n\n# create a variable named author\nauthor = \"Susan E. McGregor\"\n\n# pass my `author` variable as the \"ingredient\" to the `greet_me` function\ngreet_me(author)\n```", "```py\n  File \"greet_me_parameter_mismatch.py\", line 10, in <module>\n    greet_me(author)\n  File \"greet_me_parameter_mismatch.py\", line 4, in greet_me\n    print(\"Hello \"+A_name)\nNameError: global name 'A_name' is not defined\n```", "```py\nFile \"greet_me_parameter_mismatch.py\", line 10, in <module>\n```", "```py\nFile \"greet_me_parameter_mismatch.py\", line 4, in greet_me\n```", "```py\n291\nNumber of chapters over 30 pages:\n5\nNumber of chapters under 30 pages:\n4\n```", "```py\n page_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n```", "```py\n # check if the current number of pages is more than 30\n if a_number > 30:\n```", "```py\n # check if the current number of pages is greater than or equal to 30\n if a_number >= 30:\n```", "```py\n# question: How many Citi Bike rides each day are taken by\n# \"subscribers\" versus \"customers\"?\n\n# answer: Choose a single day of rides to examine.\n# the dataset used for this exercise was generated from the original\n# Citi Bike system data found here: https://s3.amazonaws.com/tripdata/index.html\n# filename: 202009-citibike-tripdata.csv.zip\n\n# program Outline:\n# 1\\. read in the data file: 202009CitibikeTripdataExample.csv\n# 2\\. create variables to count: subscribers, customers, and other\n# 3\\. for each row in the file:\n#       a. If the \"User Type\" is \"Subscriber,\" add 1 to \"subscriber_count\"\n#       b. If the \"User Type\" is \"Customer,\" add 1 to \"customer_count\"\n#       c. Otherwise, add 1 to the \"other\" variable\n# 4\\. print out my results\n```", "```py\n# import the `csv` library ![1](assets/1.png)\nimport csv\n\n# open the `202009CitibikeTripdataExample.csv` file in read (\"r\") mode\n# this file should be in the same folder as our Python script or notebook\nsource_file = open(\"202009CitibikeTripdataExample.csv\",\"r\") ![2](assets/2.png)\n\n# pass our `source_file` as an ingredient to the `csv` library's\n# DictReader \"recipe\".\n# store the result in a variable called `citibike_reader`\ncitibike_reader = csv.DictReader(source_file)\n\n# the DictReader method has added some useful information to our data,\n# like a `fieldnames` property that lets us access all the values\n# in the first or \"header\" row\nprint(citibike_reader.fieldnames) ![3](assets/3.png)\n```", "```py\n['tripduration', 'starttime', 'stoptime', 'start station id', 'start station\n name', 'start station latitude', 'start station longitude', 'end station id',\n 'end station name', 'end station latitude', 'end station longitude', 'bikeid',\n 'usertype', 'birth year', 'gender']\n```", "```py\ngit status\ngit commit -m \"*Commit message here*\" *filename_with_extension*\ngit push\n\n```", "```py\n# create a variable to hold the count of each type of Citi Bike user\n# assign or \"initialize\" each with a value of zero (0)\nsubscriber_count = 0\ncustomer_count = 0\nother_user_count = 0\n```", "```py\n# step 3: loop through every row of our data\nfor a_row in citibike_reader: ![1](assets/1.png)\n\n    # step 3a: if the value in the `usertype` column\n    # of the current row is \"Subscriber\"\n    if a_row[\"usertype\"] == \"Subscriber\": ![2](assets/2.png)\n\n        # add 1 to `subscriber_count`\n        subscriber_count = subscriber_count +1\n\n    # step 3b: otherwise (else), if the value in the `usertype` column\n    # of the current row is \"Customer\"\n    elif a_row[\"usertype\"] == \"Customer\": ![3](assets/3.png)\n\n        # add 1 to `subscriber_count`\n        customer_count = customer_count + 1\n\n    # step 3c: the `usertype` value is _neither_\"Subscriber\" nor \"Customer\",\n    # so we'll add 1 to our catch-all `other_user_count` variable\n    else: ![4](assets/4.png)\n        other_user_count = other_user_count + 1\n```", "```py\n# step 4: print out our results, being sure to include \"labels\" in the process:\nprint(\"Number of subscribers:\") ![1](assets/1.png)\nprint(subscriber_count)\nprint(\"Number of customers:\")\nprint(customer_count)\nprint(\"Number of 'other' users:\")\nprint(other_user_count)\n```", "```py\n['tripduration', 'starttime', 'stoptime', 'start station id', 'start station\n name', 'start station latitude', 'start station longitude', 'end station id',\n 'end station name', 'end station latitude', 'end station longitude', 'bikeid',\n 'usertype', 'birth year', 'gender']\nNumber of subscribers:\n58961\nNumber of customers:\n17713\nNumber of 'other' users:\n0\n```", "```py\nsource_file = open(\"202009CitibikeTripdataExample.csv\",\"r\")\n```", "```py\nsource_file = open(\"202009-citibike-tripdata.csv\",\"r\")\n```", "```py\ntime python _your_filename_.py\n```"]