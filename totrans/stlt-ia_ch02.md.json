["```py\nunit_config = {\n    \"Mass\": {\n        \"Kilograms\": 1, # Standard unit\n        \"Grams\": 0.001,\n        \"Pounds\": 0.453592,\n        # ...\n    },\n    \"Length\": {\n        \"Meters\": 1,  # Standard unit\n        \"Centimeters\": 0.01,\n        # ...\n    },\n}\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Unit:\n    abbrev: str\n    value_in_std_units: float\n```", "```py\ngram = Unit(abbrev=\"g\", value_in_std_units=0.001)\nprint(gram.abbrev) # Prints 'g'\n```", "```py\nclass Unit:\n    def __init__(self, abbrev, value_in_std_units):\n        self.abbrev: str = abbrev\n        self.value_in_std_units: float = value_in_std_units\n```", "```py\nfrom dataclasses import dataclass\nfrom typing import Dict\n\nfrom unit import Unit\n\n@dataclass\nclass Quantity:\n    std_unit: str\n    units: Dict[str, Unit]\n\n```", "```py\nfrom typing import Dict\n\nfrom quantity import Quantity\nfrom unit import Unit\n\nunit_config: Dict[str, Quantity] = {\n    \"Mass\": Quantity(\n        std_unit=\"Kilograms\",\n        units={\n            \"Kilograms\": Unit(abbrev=\"kg\", value_in_std_units=1),\n            \"Grams\": Unit(abbrev=\"g\", value_in_std_units=0.001),\n            \"Pounds\": Unit(abbrev=\"lb\", value_in_std_units=0.453592),\n            \"Ounces\": Unit(abbrev=\"oz\", value_in_std_units=0.0283495),\n            # Add more units here\n        }\n    ),\n    \"Length\": Quantity(\n        std_unit=\"Meters\",\n        units={\n            \"Meters\": Unit(abbrev=\"m\", value_in_std_units=1),\n            \"Centimeters\": Unit(abbrev=\"cm\", value_in_std_units=0.01),\n            \"Inches\": Unit(abbrev=\"in\", value_in_std_units=0.0254),\n            \"Feet\": Unit(abbrev=\"ft\", value_in_std_units=0.3048),\n        }\n    ),\n    \"Time\": Quantity(\n        std_unit=\"Seconds\",\n        units={\n            \"Seconds\": Unit(abbrev=\"s\", value_in_std_units=1),\n            \"Minutes\": Unit(abbrev=\"min\", value_in_std_units=60),\n            \"Hours\": Unit(abbrev=\"hr\", value_in_std_units=3600),\n            \"Days\": Unit(abbrev=\"d\", value_in_std_units=86400),\n        }\n    ),\n    # Add more quantities here\n}\n```", "```py\n\"Mass\": Quantity(\n        std_unit=\"Kilograms\",\n        units={\n            \"Kilograms\": Unit(abbrev=\"kg\", value_in_std_units=1),\n            \"Grams\": Unit(abbrev=\"g\", value_in_std_units=0.001),\n            \"Pounds\": Unit(abbrev=\"lb\", value_in_std_units=0.453592),\n            \"Ounces\": Unit(abbrev=\"oz\", value_in_std_units=0.0283495),\n            # Add more units here\n        }\n    )\n\n```", "```py\ndef list_quantities() -> List[str]\n```", "```py\ndef list_quantities() -> List[str]:\n    return list(unit_config.keys())\n```", "```py\ndef list_units(quantity_name) -> List[str]\n```", "```py\ndef list_units(quantity_name) -> List[str]:\n    return list(unit_config[quantity_name].units.keys())\n```", "```py\nfrom dataclasses import dataclass\nfrom unit import Unit\n\n@dataclass\nclass Result:\n    from_unit: Unit\n    to_unit: Unit\n    from_value: float\n    to_value: float\n\n```", "```py\ndef convert_value(\n        quantity_name: str,\n        from_unit_name: str,\n        to_unit_name: str,\n        value: float) -> Result\n```", "```py\ndef convert_value(\n        quantity_name: str,\n        from_unit_name: str,\n        to_unit_name: str,\n        value: float) -> Result:\n    quantity = unit_config[quantity_name]\n    from_unit = quantity.units[from_unit_name]\n    to_unit = quantity.units[to_unit_name]\n\n    # Two-step conversion: from-unit to standard unit, then to to-unit\n    value_in_to_units = (value *\n                         from_unit.value_in_std_units /\n                         to_unit.value_in_std_units)\n\n    return Result(from_unit, to_unit, value, value_in_to_units)\n\n```", "```py\nfrom unit_config import unit_config\nfrom result import Result\nfrom typing import List\n\ndef list_quantities() -> List[str]:\n    return list(unit_config.keys())\n\ndef list_units(quantity_name) -> List[str]:\n    return list(unit_config[quantity_name].units.keys())\n\ndef convert_value(\n        quantity_name: str,\n        from_unit_name: str,\n        to_unit_name: str,\n        value: float) -> Result:\n    quantity = unit_config[quantity_name]\n    from_unit = quantity.units[from_unit_name]\n    to_unit = quantity.units[to_unit_name]\n\n    # Two-step conversion: from-unit to standard unit, then to to-unit\n    value_in_to_units = (value *\n                         from_unit.value_in_std_units /\n                         to_unit.value_in_std_units)\n\n    return Result(from_unit, to_unit, value, value_in_to_units)\n\n```", "```py\nimport streamlit as st\nfrom backend import convert_value, list_quantities, list_units\n\n```", "```py\nstreamlit run frontend.py\n\n```", "```py\nquantity = st.radio(\"Select a quantity\", [\"Mass\", \"Force\", \"Pressure\"])\n```", "```py\nquantity = st.radio(\"Select a quantity\", list_quantities())\n```", "```py\nwith st.sidebar:\n    quantity = st.radio(\"Select a quantity\", list_quantities())\n```", "```py\nquantity = st.sidebar.radio(\"Select a quantity\", list_quantities())\n```", "```py\nst.title(\"Unit Converter\")\n```", "```py\ninput_num = st.text_input(\"Value to convert\", value=\"0\")\n```", "```py\ninput_num = float(st.text_input(\"Value to convert\", value=\"0\"))\n```", "```py\ncountry = st.selectbox(\"Pick a country\", [\"United States\", \"Canada\", \"India\"])\n```", "```py\nunits = list_units(quantity)\n```", "```py\nfrom_unit = st.selectbox(\"From\", units)\nto_unit = st.selectbox(\"To\", units, index=1)\n```", "```py\nfrom_unit_col, to_unit_col = st.columns(2)\n```", "```py\nwith from_unit_col:\n    from_unit = st.selectbox(\"From\", units)\nwith to_unit_col:\n    to_unit = st.selectbox(\"To\", units, index=1)\n```", "```py\nfrom_unit = from_unit_col.selectbox(\"From\", units)\nto_unit = to_unit_col.selectbox(\"To\", units, index=1)\n```", "```py\nif st.button(\"Convert\"):\n    # Statements to execute\n```", "```py\nif st.button(\"Convert\"):\n    result = convert_value(quantity, from_unit, to_unit, input_num)\n```", "```py\nfrom_display = f\"{result.from_value} {result.from_unit.abbrev}\"\nto_display = f\"{result.to_value} {result.to_unit.abbrev}\"\n```", "```py\nst.metric(\"From\", from_display, delta=None)\nst.metric(\"To\", to_display, delta=None)\n```", "```py\nfrom_value_col, to_value_col = st.columns(2)\nfrom_value_col.metric(\"From\", from_display, delta=None)\nto_value_col.metric(\"To\", to_display, delta=None)\n```", "```py\nimport streamlit as st\nfrom backend import convert_value, list_quantities, list_units\n\nquantity = st.sidebar.radio(\"Select a quantity\", list_quantities())\n\nst.title(\"Unit Converter\")\ninput_num = float(st.text_input(\"Value to convert\", value=\"0\"))\n\nunits = list_units(quantity)\nfrom_unit_col, to_unit_col = st.columns(2)\nfrom_unit = from_unit_col.selectbox(\"From\", units)\nto_unit = to_unit_col.selectbox(\"To\", units, index=1)\n\nif st.button(\"Convert\"):\n    result = convert_value(quantity, from_unit, to_unit, input_num)\n    from_display = f\"{result.from_value} {result.from_unit.abbrev}\"\n    to_display = f\"{result.to_value} {result.to_unit.abbrev}\"\n\n    from_value_col, to_value_col = st.columns(2)\n    from_value_col.metric(\"From\", from_display, delta=None)\n    to_value_col.metric(\"To\", to_display, delta=None)\n```", "```py\ndef format_value(\n        value: float,\n        unit_abbrev: str,\n        decimal_places: int = None) -> str:\n    is_rounded = decimal_places is not None\n    rounded = round(value, decimal_places) if is_rounded else value\n    formatted = format(rounded, \",\")\n    return f\"{formatted} {unit_abbrev}\"\n```", "```py\nplaces = st.number_input(\"Decimal places to round to\", value=2, min_value=0)\n```", "```py\nfrom_display = format_value(input_num, result.from_unit.abbrev)\nto_display = format_value(result.to_value, result.to_unit.abbrev, places)\n```", "```py\nplaces = None\nif st.checkbox(\"Round result?\", value=False):\n    places = st.number_input(\n        \"Decimal places to round to\", value=2, min_value=0)\n```", "```py\nimport streamlit as st\nfrom backend import convert_value, list_quantities, list_units\n\ndef format_value(\n        value: float,\n        unit_abbrev: str,\n        decimal_places: int = None) -> str:\n    is_rounded = decimal_places is not None\n    rounded = round(value, decimal_places) if is_rounded else value\n    formatted = format(rounded, \",\")\n    return f\"{formatted} {unit_abbrev}\"\n\nquantity = st.sidebar.radio(\"Select a quantity\", list_quantities())\n\nst.title(\"Unit Converter\")\ninput_num = float(st.text_input(\"Value\", value=\"0\"))\n\nunits = list_units(quantity)\nfrom_unit_col, to_unit_col = st.columns(2)\nfrom_unit = from_unit_col.selectbox(\"From\", units)\nto_unit = to_unit_col.selectbox(\"To\", units, index=1)\n\nplaces = None\nif st.checkbox(\"Round result?\", value=False):\n    places = st.number_input(\n        \"Decimal places to round to\", value=2, min_value=0)\n\nresult = convert_value(quantity, from_unit, to_unit, input_num)\nfrom_display = format_value(input_num, result.from_unit.abbrev)\nto_display = format_value(\n    result.to_value, result.to_unit.abbrev, places)\n\nfrom_result_col, to_result_col = st.columns(2)\nfrom_value_col, to_value_col = st.columns(2)\nfrom_value_col.metric(\"From\", from_display, delta=None)\nto_value_col.metric(\"To\", to_display, delta=None)\n\n```"]