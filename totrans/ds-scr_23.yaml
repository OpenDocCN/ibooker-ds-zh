- en: Chapter 22\. Network Analysis
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章 网络分析
- en: Your connections to all the things around you literally define who you are.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你与你周围所有事物的连接实际上定义了你是谁。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Aaron O’Connell
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Aaron O’Connell
- en: Many interesting data problems can be fruitfully thought of in terms of *networks*,
    consisting of *nodes* of some type and the *edges* that join them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多有趣的数据问题可以通过*网络*的方式进行有益的思考，网络由某种类型的*节点*和连接它们的*边*组成。
- en: For instance, your Facebook friends form the nodes of a network whose edges
    are friendship relations. A less obvious example is the World Wide Web itself,
    with each web page a node and each hyperlink from one page to another an edge.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你的Facebook朋友形成一个网络的节点，其边是友谊关系。一个不那么明显的例子是互联网本身，其中每个网页是一个节点，每个从一个页面到另一个页面的超链接是一条边。
- en: Facebook friendship is mutual—if I am Facebook friends with you, then necessarily
    you are friends with me. In this case, we say that the edges are *undirected*.
    Hyperlinks are not—my website links to *whitehouse.gov*, but (for reasons inexplicable
    to me) *whitehouse.gov* refuses to link to my website. We call these types of
    edges *directed*. We’ll look at both kinds of networks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook友谊是相互的——如果我在Facebook上是你的朋友，那么必然你也是我的朋友。在这种情况下，我们称这些边是*无向*的。而超链接则不是——我的网站链接到*whitehouse.gov*，但（出于我无法理解的原因）*whitehouse.gov*拒绝链接到我的网站。我们称这些类型的边为*有向*的。我们将研究这两种类型的网络。
- en: Betweenness Centrality
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中介中心性
- en: In [Chapter 1](ch01.html#introduction), we computed the key connectors in the
    DataSciencester network by counting the number of friends each user had. Now we
    have enough machinery to take a look at other approaches. We will use the same
    network, but now we’ll use `NamedTuple`s for the data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html#introduction)中，我们通过计算每个用户拥有的朋友数量来计算DataSciencester网络中的关键连接者。现在我们有足够的机制来看看其他方法。我们将使用相同的网络，但现在我们将使用`NamedTuple`来处理数据。
- en: 'Recall that the network ([Figure 22-1](#datasciencester_network_ch21)) comprised
    users:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，网络（[图22-1](#datasciencester_network_ch21)）包括用户：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and friendships:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以及友谊：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![The DataSciencester network.](assets/dsf2_0101.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![DataSciencester网络。](assets/dsf2_0101.png)'
- en: Figure 22-1\. The DataSciencester network
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-1\. DataSciencester网络
- en: 'The friendships will be easier to work with as a `dict`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 友谊将更容易作为一个`dict`来处理：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we left off we were dissatisfied with our notion of *degree centrality*,
    which didn’t really agree with our intuition about who the key connectors of the
    network were.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们离开时，我们对我们关于*度中心性*的概念并不满意，这与我们对网络中关键连接者的直觉并不完全一致。
- en: An alternative metric is *betweenness centrality*, which identifies people who
    frequently are on the shortest paths between pairs of other people. In particular,
    the betweenness centrality of node *i* is computed by adding up, for every other
    pair of nodes *j* and *k*, the proportion of shortest paths between node *j* and
    node *k* that pass through *i*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种度量标准是*中介中心性*，它识别频繁出现在其他人对之间最短路径上的人。特别地，节点*i*的中介中心性通过为每对节点*j*和*k*添加上通过*i*的最短路径的比例来计算。
- en: That is, to figure out Thor’s betweenness centrality, we’ll need to compute
    all the shortest paths between all pairs of people who aren’t Thor. And then we’ll
    need to count how many of those shortest paths pass through Thor. For instance,
    the only shortest path between Chi (`id` 3) and Clive (`id` 5) passes through
    Thor, while neither of the two shortest paths between Hero (`id` 0) and Chi (`id`
    3) does.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，要弄清楚Thor的中介中心性，我们需要计算所有不是Thor的人之间所有最短路径。然后我们需要计算有多少条这些最短路径通过Thor。例如，Chi（`id`
    3）和Clive（`id` 5）之间唯一的最短路径通过Thor，而Hero（`id` 0）和Chi（`id` 3）之间的两条最短路径都不通过Thor。
- en: So, as a first step, we’ll need to figure out the shortest paths between all
    pairs of people. There are some pretty sophisticated algorithms for doing so efficiently,
    but (as is almost always the case) we will use a less efficient, easier-to-understand
    algorithm.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为第一步，我们需要找出所有人之间的最短路径。有一些非常复杂的算法可以高效地完成这个任务，但是（几乎总是如此），我们将使用一种效率较低但更易于理解的算法。
- en: 'This algorithm (an implementation of breadth-first search) is one of the more
    complicated ones in the book, so let’s talk through it carefully:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法（广度优先搜索的实现）是本书中比较复杂的算法之一，所以让我们仔细讨论一下它：
- en: Our goal is a function that takes a `from_user` and finds *all* shortest paths
    to every other user.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的目标是一个函数，它接受一个`from_user`，并找到到每个其他用户的*所有*最短路径。
- en: We’ll represent a path as a `list` of user IDs. Since every path starts at `from_user`,
    we won’t include her ID in the list. This means that the length of the list representing
    the path will be the length of the path itself.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将路径表示为用户ID的`list`。因为每条路径都从`from_user`开始，我们不会在列表中包含她的ID。这意味着表示路径的列表长度将是路径本身的长度。
- en: We’ll maintain a dictionary called `shortest_paths_to` where the keys are user
    IDs and the values are lists of paths that end at the user with the specified
    ID. If there is a unique shortest path, the list will just contain that one path.
    If there are multiple shortest paths, the list will contain all of them.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将维护一个名为`shortest_paths_to`的字典，其中键是用户ID，值是以指定ID结尾的路径列表。如果有唯一的最短路径，列表将只包含该路径。如果有多条最短路径，则列表将包含所有这些路径。
- en: We’ll also maintain a queue called `frontier` that contains the users we want
    to explore in the order we want to explore them. We’ll store them as pairs `(prev_user,
    user)` so that we know how we got to each one. We initialize the queue with all
    the neighbors of `from_user`. (We haven’t talked about queues, which are data
    structures optimized for “add to the end” and “remove from the front” operations.
    In Python, they are implemented as `collections.deque`, which is actually a double-ended
    queue.)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还会维护一个称为`frontier`的队列，按照我们希望探索它们的顺序包含我们想要探索的用户。我们将它们存储为对`(prev_user, user)`，这样我们就知道如何到达每一个用户。我们将队列初始化为`from_user`的所有邻居。（我们还没有讨论过队列，它们是优化了“添加到末尾”和“从前面删除”的数据结构。在Python中，它们被实现为`collections.deque`，实际上是一个双端队列。）
- en: As we explore the graph, whenever we find new neighbors that we don’t already
    know the shortest paths to, we add them to the end of the queue to explore later,
    with the current user as `prev_user`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在探索图形时，每当我们发现新的邻居，而我们还不知道到达它们的最短路径时，我们将它们添加到队列的末尾以供稍后探索，当前用户为`prev_user`。
- en: When we take a user off the queue, and we’ve never encountered that user before,
    we’ve definitely found one or more shortest paths to him—each of the shortest
    paths to `prev_user` with one extra step added.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们从队列中取出一个用户，并且我们以前从未遇到过该用户时，我们肯定找到了一条或多条最短路径——每条最短路径到`prev_user`再添加一步。
- en: When we take a user off the queue and we *have* encountered that user before,
    then either we’ve found another shortest path (in which case we should add it)
    or we’ve found a longer path (in which case we shouldn’t).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们从队列中取出一个用户，并且我们之前*遇到过*该用户时，那么要么我们找到了另一条最短路径（在这种情况下，我们应该添加它），要么我们找到了一条更长的路径（在这种情况下，我们不应该添加）。
- en: When no more users are left on the queue, we’ve explored the whole graph (or,
    at least, the parts of it that are reachable from the starting user) and we’re
    done.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当队列中没有更多的用户时，我们已经探索了整个图形（或者至少是从起始用户可达的部分），我们完成了。
- en: 'We can put this all together into a (large) function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把所有这些组合成一个（很大的）函数：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let’s compute all the shortest paths:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算所有的最短路径：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And we’re finally ready to compute betweenness centrality. For every pair of
    nodes *i* and *j*, we know the *n* shortest paths from *i* to *j*. Then, for each
    of those paths, we just add 1/n to the centrality of each node on that path:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们终于可以计算介数中心性了。对于每对节点*i*和*j*，我们知道从*i*到*j*的*n*条最短路径。然后，对于每条路径，我们只需将1/n添加到该路径上每个节点的中心性：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As shown in [Figure 22-2](#network_sized_by_betweenness), users 0 and 9 have
    centrality 0 (as neither is on any shortest path between other users), whereas
    3, 4, and 5 all have high centralities (as all three lie on many shortest paths).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图22-2](#network_sized_by_betweenness)所示，用户0和9的中心性为0（因为它们都不在任何其他用户之间的最短路径上），而3、4和5都具有很高的中心性（因为它们都位于许多最短路径上）。
- en: '![The DataSciencester network sized by betweenness centrality.](assets/dsf2_2202.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![DataSciencester网络按介数中心性大小排序。](assets/dsf2_2202.png)'
- en: Figure 22-2\. The DataSciencester network sized by betweenness centrality
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-2\. DataSciencester网络按介数中心性大小排序
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Generally the centrality numbers aren’t that meaningful themselves. What we
    care about is how the numbers for each node compare to the numbers for other nodes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常中心性数值本身并不那么有意义。我们关心的是每个节点的数值与其他节点的数值相比如何。
- en: Another measure we can look at is *closeness centrality*. First, for each user
    we compute her *farness*, which is the sum of the lengths of her shortest paths
    to each other user. Since we’ve already computed the shortest paths between each
    pair of nodes, it’s easy to add their lengths. (If there are multiple shortest
    paths, they all have the same length, so we can just look at the first one.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以看的度量标准是*closeness centrality*。首先，对于每个用户，我们计算她的*farness*，即她到每个其他用户的最短路径长度之和。由于我们已经计算了每对节点之间的最短路径，所以将它们的长度相加很容易。（如果有多条最短路径，它们的长度都相同，所以我们只需看第一条。）
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'after which it’s very little work to compute closeness centrality ([Figure 22-3](#network_sized_by_closeness)):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之后计算接近中心度（[图22-3](#network_sized_by_closeness)）的工作量就很小：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![The DataSciencester network sized by closeness centrality.](assets/dsf2_2203.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![根据接近中心度调整大小的DataSciencester网络。](assets/dsf2_2203.png)'
- en: Figure 22-3\. The DataSciencester network sized by closeness centrality
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图22-3\. 根据接近中心度调整大小的DataSciencester网络
- en: There is much less variation here—even the very central nodes are still pretty
    far from the nodes out on the periphery.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里变化很少——即使非常中心的节点距离外围节点也相当远。
- en: As we saw, computing shortest paths is kind of a pain. For this reason, betweenness
    and closeness centrality aren’t often used on large networks. The less intuitive
    (but generally easier to compute) *eigenvector centrality* is more frequently
    used.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，计算最短路径有点麻烦。因此，介数和接近中心度在大型网络上并不经常使用。不太直观（但通常更容易计算）的*eigenvector centrality*更常用。
- en: Eigenvector Centrality
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征向量中心度
- en: In order to talk about eigenvector centrality, we have to talk about eigenvectors,
    and in order to talk about eigenvectors, we have to talk about matrix multiplication.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要谈论特征向量中心度，我们必须谈论特征向量，而要谈论特征向量，我们必须谈论矩阵乘法。
- en: Matrix Multiplication
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩阵乘法
- en: 'If *A* is an <math><mrow><mi>n</mi> <mo>×</mo> <mi>m</mi></mrow></math> matrix
    and *B* is an <math><mrow><mi>m</mi> <mo>×</mo> <mi>k</mi></mrow></math> matrix
    (notice that the second dimension of *A* is same as the first dimension of *B*),
    then their product *AB* is the <math><mrow><mi>n</mi> <mo>×</mo> <mi>k</mi></mrow></math>
    matrix whose (*i*,*j*)th entry is:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*A*是一个<math><mrow><mi>n</mi> <mo>×</mo> <mi>m</mi></mrow></math>矩阵，*B*是一个<math><mrow><mi>m</mi>
    <mo>×</mo> <mi>k</mi></mrow></math>矩阵（注意*A*的第二维度与*B*的第一维度相同），它们的乘积*AB*是一个<math><mrow><mi>n</mi>
    <mo>×</mo> <mi>k</mi></mrow></math>矩阵，其(*i*,*j*)项为：
- en: <math alttext="upper A Subscript i Baseline 1 Baseline upper B Subscript 1 j
    plus upper A Subscript i Baseline 2 Baseline upper B Subscript 2 j plus ellipsis
    plus upper A Subscript i m Baseline upper B Subscript m j" display="block"><mrow><msub><mi>A</mi>
    <mrow><mi>i</mi><mn>1</mn></mrow></msub> <msub><mi>B</mi> <mrow><mn>1</mn><mi>j</mi></mrow></msub>
    <mo>+</mo> <msub><mi>A</mi> <mrow><mi>i</mi><mn>2</mn></mrow></msub> <msub><mi>B</mi>
    <mrow><mn>2</mn><mi>j</mi></mrow></msub> <mo>+</mo> <mo>⋯</mo> <mo>+</mo> <msub><mi>A</mi>
    <mrow><mi>i</mi><mi>m</mi></mrow></msub> <msub><mi>B</mi> <mrow><mi>m</mi><mi>j</mi></mrow></msub></mrow></math>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <math alttext="upper A Subscript i Baseline 1 Baseline upper B Subscript 1 j
    plus upper A Subscript i Baseline 2 Baseline upper B Subscript 2 j plus ellipsis
    plus upper A Subscript i m Baseline upper B Subscript m j" display="block"><mrow><msub><mi>A</mi>
    <mrow><mi>i</mi><mn>1</mn></mrow></msub> <msub><mi>B</mi> <mrow><mn>1</mn><mi>j</mi></mrow></msub>
    <mo>+</mo> <msub><mi>A</mi> <mrow><mi>i</mi><mn>2</mn></mrow></msub> <msub><mi>B</mi>
    <mrow><mn>2</mn><mi>j</mi></mrow></msub> <mo>+</mo> <mo>⋯</mo> <mo>+</mo> <msub><mi>A</mi>
    <mrow><mi>i</mi><mi>m</mi></mrow></msub> <msub><mi>B</mi> <mrow><mi>m</mi><mi>j</mi></mrow></msub></mrow></math>
- en: which is just the dot product of the *i*th row of *A* (thought of as a vector)
    with the *j*th column of *B* (also thought of as a vector).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是*A*的第*i*行（看作向量）与*B*的第*j*列（也看作向量）的点积。
- en: 'We can implement this using the `make_matrix` function from [Chapter 4](ch04.html#linear_algebra):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[第四章](ch04.html#linear_algebra)中的`make_matrix`函数来实现这一点：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we think of an *m*-dimensional vector as an `(m, 1)` matrix, we can multiply
    it by an `(n, m)` matrix to get an `(n, 1)` matrix, which we can then think of
    as an *n*-dimensional vector.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将一个*m*维向量视为`(m, 1)`矩阵，我们可以将其乘以一个`(n, m)`矩阵得到一个`(n, 1)`矩阵，然后我们可以将其视为一个*n*维向量。
- en: 'This means another way to think about an `(n, m)` matrix is as a linear mapping
    that transforms *m*-dimensional vectors into *n*-dimensional vectors:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着另一种思考一个`(n, m)`矩阵的方式是将其视为将*m*维向量转换为*n*维向量的线性映射：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When *A* is a *square* matrix, this operation maps *n*-dimensional vectors to
    other *n*-dimensional vectors. It’s possible that, for some matrix *A* and vector
    *v*, when *A* operates on *v* we get back a scalar multiple of *v*—that is, that
    the result is a vector that points in the same direction as *v*. When this happens
    (and when, in addition, *v* is not a vector of all zeros), we call *v* an *eigenvector*
    of *A*. And we call the multiplier an *eigenvalue*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当*A*是一个*方阵*时，这个操作将*n*维向量映射到其他*n*维向量。对于某些矩阵*A*和向量*v*，当*A*作用于*v*时，可能得到*v*的一个标量倍数—也就是说，结果是一个指向*v*相同方向的向量。当这种情况发生时（并且此外*v*不是全零向量），我们称*v*是*A*的一个*特征向量*。我们称这个乘数为*特征值*。
- en: 'One possible way to find an eigenvector of *A* is by picking a starting vector
    *v*, applying `matrix_times_vector`, rescaling the result to have magnitude 1,
    and repeating until the process converges:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 找到*A*的一个特征向量的一个可能方法是选择一个起始向量*v*，应用`matrix_times_vector`，重新缩放结果使其大小为1，并重复，直到过程收敛：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By construction, the returned `guess` is a vector such that, when you apply
    `matrix_times_vector` to it and rescale it to have length 1, you get back a vector
    very close to itself—which means it’s an eigenvector.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all matrices of real numbers have eigenvectors and eigenvalues. For example,
    the matrix:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'rotates vectors 90 degrees clockwise, which means that the only vector it maps
    to a scalar multiple of itself is a vector of zeros. If you tried `find_eigenvector(rotate)`
    it would run forever. Even matrices that have eigenvectors can sometimes get stuck
    in cycles. Consider the matrix:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This matrix maps any vector `[x, y]` to `[y, x]`. This means that, for example,
    `[1, 1]` is an eigenvector with eigenvalue 1\. However, if you start with a random
    vector with unequal coordinates, `find_eigenvector` will just repeatedly swap
    the coordinates forever. (Not-from-scratch libraries like NumPy use different
    methods that would work in this case.) Nonetheless, when `find_eigenvector` does
    return a result, that result is indeed an eigenvector.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Centrality
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How does this help us understand the DataSciencester network? To start, we’ll
    need to represent the connections in our network as an `adjacency_matrix`, whose
    (*i*,*j*)th entry is either 1 (if user *i* and user *j* are friends) or 0 (if
    they’re not):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The eigenvector centrality for each user is then the entry corresponding to
    that user in the eigenvector returned by `find_eigenvector` ([Figure 22-4](#network_sized_by_eigenvector)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![The DataSciencester network sized by eigenvector centrality.](assets/dsf2_2204.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Figure 22-4\. The DataSciencester network sized by eigenvector centrality
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For technical reasons that are way beyond the scope of this book, any nonzero
    adjacency matrix necessarily has an eigenvector, all of whose values are nonnegative.
    And fortunately for us, for this `adjacency_matrix` our `find_eigenvector` function
    finds it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Users with high eigenvector centrality should be those who have a lot of connections,
    and connections to people who themselves have high centrality.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Here users 1 and 2 are the most central, as they both have three connections
    to people who are themselves highly central. As we move away from them, people’s
    centralities steadily drop off.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: On a network this small, eigenvector centrality behaves somewhat erratically.
    If you try adding or subtracting links, you’ll find that small changes in the
    network can dramatically change the centrality numbers. In a much larger network,
    this would not particularly be the case.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'We still haven’t motivated why an eigenvector might lead to a reasonable notion
    of centrality. Being an eigenvector means that if you compute:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: the result is a scalar multiple of `eigenvector_centralities`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at how matrix multiplication works, `matrix_times_vector` produces
    a vector whose *i*th element is:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: which is precisely the sum of the eigenvector centralities of the users connected
    to user *i*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: In other words, eigenvector centralities are numbers, one per user, such that
    each user’s value is a constant multiple of the sum of his neighbors’ values.
    In this case centrality means being connected to people who themselves are central.
    The more centrality you are directly connected to, the more central you are. This
    is of course a circular definition—eigenvectors are the way of breaking out of
    the circularity.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，特征向量中心度是一个数字，每个用户一个，其值是他的邻居值的常数倍。在这种情况下，中心度意味着与自身中心度很高的人连接。你直接连接的中心度越高，你自己就越中心。这当然是一个循环定义——特征向量是打破循环性的方法。
- en: 'Another way of understanding this is by thinking about what `find_eigenvector`
    is doing here. It starts by assigning each node a random centrality. It then repeats
    the following two steps until the process converges:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种理解方式是通过思考`find_eigenvector`在这里的作用来理解这个问题。它首先为每个节点分配一个随机的中心度，然后重复以下两个步骤，直到过程收敛：
- en: Give each node a new centrality score that equals the sum of its neighbors’
    (old) centrality scores.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给每个节点一个新的中心度分数，该分数等于其邻居（旧的）中心度分数的总和。
- en: Rescale the vector of centralities to have magnitude 1.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新调整中心度向量，使其大小为1。
- en: Although the mathematics behind it may seem somewhat opaque at first, the calculation
    itself is relatively straightforward (unlike, say, betweenness centrality) and
    is pretty easy to perform on even very large graphs. (At least, if you use a real
    linear algebra library it’s easy to perform on large graphs. If you used our matrices-as-lists
    implementation you’d struggle.)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其背后的数学可能一开始看起来有些难懂，但计算本身相对简单（不像介数中心度那样），甚至可以在非常大的图上执行。 （至少，如果你使用真正的线性代数库，那么在大型图上执行起来是很容易的。如果你使用我们的矩阵作为列表的实现，你会有些困难。）
- en: Directed Graphs and PageRank
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有向图和 PageRank
- en: DataSciencester isn’t getting much traction, so the VP of Revenue considers
    pivoting from a friendship model to an endorsement model. It turns out that no
    one particularly cares which data scientists are *friends* with one another, but
    tech recruiters care very much which data scientists are *respected* by other
    data scientists.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: DataSciencester 并没有得到很多关注，因此收入副总裁考虑从友谊模式转向背书模式。结果表明，没有人特别在意哪些数据科学家*彼此是朋友*，但技术招聘人员非常在意其他数据科学家*受到*其他数据科学家的*尊重*。
- en: In this new model, we’ll track endorsements `(source, target)` that no longer
    represent a reciprocal relationship, but rather that `source` endorses `target`
    as an awesome data scientist ([Figure 22-5](#datasciencester_network_endorsements)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新模型中，我们将跟踪不再代表互惠关系的背书`(source, target)`，而是`source`背书`target`作为一个优秀的数据科学家（参见[图 22-5](#datasciencester_network_endorsements)）。
- en: '![The DataSciencester endorsement network.](assets/dsf2_2205.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学家背书网络。](assets/dsf2_2205.png)'
- en: Figure 22-5\. The DataSciencester network of endorsements
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-5\. DataSciencester 的背书网络
- en: 'We’ll need to account for this asymmetry:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑这种不对称性：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'after which we can easily find the `most_endorsed` data scientists and sell
    that information to recruiters:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以轻松地找到`most_endorsed`数据科学家，并将这些信息卖给招聘人员：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, “number of endorsements” is an easy metric to game. All you need to
    do is create phony accounts and have them endorse you. Or arrange with your friends
    to endorse each other. (As users 0, 1, and 2 seem to have done.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，“背书数量”是一个容易操控的度量标准。你所需要做的就是创建假账户，并让它们为你背书。或者与你的朋友安排互相为对方背书。（就像用户0、1和2似乎已经做过的那样。）
- en: A better metric would take into account *who* endorses you. Endorsements from
    people who have a lot of endorsements should somehow count more than endorsements
    from people with few endorsements. This is the essence of the PageRank algorithm,
    used by Google to rank websites based on which other websites link to them, which
    other websites link to those, and so on.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的度量标准应考虑*谁*为你背书。来自背书颇多的人的背书应该比来自背书较少的人的背书更有价值。这就是 PageRank 算法的本质，它被谷歌用来根据其他网站链接到它们的网站来排名网站，以及那些链接到这些网站的网站，依此类推。
- en: (If this sort of reminds you of the idea behind eigenvector centrality, it should.)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: （如果这让你想起特征向量中心度的想法，那是正常的。）
- en: 'A simplified version looks like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简化版本看起来像这样：
- en: There is a total of 1.0 (or 100%) PageRank in the network.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络中总共有1.0（或100%）的 PageRank。
- en: Initially this PageRank is equally distributed among nodes.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最初，这个 PageRank 在节点之间均匀分布。
- en: At each step, a large fraction of each node’s PageRank is distributed evenly
    among its outgoing links.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每一步中，每个节点的大部分 PageRank 均匀分布在其出链之间。
- en: At each step, the remainder of each node’s PageRank is distributed evenly among
    all nodes.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在每个步骤中，每个节点的PageRank剩余部分均匀分布在所有节点之间。
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we compute page ranks:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计算页面排名：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: PageRank ([Figure 22-6](#network_sized_by_pagerank)) identifies user 4 (Thor)
    as the highest-ranked data scientist.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: PageRank（[图 22-6](#network_sized_by_pagerank)）将用户 4（Thor）标识为排名最高的数据科学家。
- en: '![The DataSciencester network sized by PageRank.](assets/dsf2_2206.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![按PageRank排序的数据科学家网络。](assets/dsf2_2206.png)'
- en: Figure 22-6\. The DataSciencester network sized by PageRank
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 22-6\. 数据科学家网络按PageRank排序的大小
- en: Even though Thor has fewer endorsements (two) than users 0, 1, and 2, his endorsements
    carry with them rank from their endorsements. Additionally, both of his endorsers
    endorsed only him, which means that he doesn’t have to divide their rank with
    anyone else.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Thor获得的认可少于用户 0、1 和 2（各有两个），但他的认可带来的排名来自他们的认可。此外，他的两个认可者仅认可了他一个人，这意味着他不必与任何其他人分享他们的排名。
- en: For Further Exploration
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步探索
- en: There are [many other notions of centrality](http://en.wikipedia.org/wiki/Centrality)
    besides the ones we used (although the ones we used are pretty much the most popular
    ones).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了我们使用的这些之外，还有[许多其他的中心度概念](http://en.wikipedia.org/wiki/Centrality)（尽管我们使用的这些基本上是最受欢迎的）。
- en: '[NetworkX](http://networkx.github.io/) is a Python library for network analysis.
    It has functions for computing centralities and for visualizing graphs.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NetworkX](http://networkx.github.io/) 是用于网络分析的 Python 库。它有计算中心度和可视化图形的函数。'
- en: '[Gephi](https://gephi.org/) is a love-it/hate-it GUI-based network visualization
    tool.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Gephi](https://gephi.org/) 是一款爱它或者恨它的基于GUI的网络可视化工具。'
