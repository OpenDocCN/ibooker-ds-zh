- en: Chapter 10\. First Steps with Python for Excel Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Created in 1991 by Guido van Rossum, Python is a programming language that,
    like R, is free and open source. At the time, van Rossum was reading the scripts
    from *Monty Python’s Flying Circus* and decided to name the language after the
    British comedy. Unlike R, which was designed explicitly for data analysis, Python
    was developed as a general-purpose language meant to do things like interact with
    operating systems, handle processing errors, and so forth. This has some important
    implications for how Python “thinks” and works with data. For example, you saw
    in [Chapter 7](ch07.html#data-structures-in-r) that R has a built-in tabular data
    structure. This isn’t the case in Python; we’ll need to rely more heavily on external
    packages to work with data.
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s not necessarily a problem: Python, like R, has thousands of packages
    maintained by a thriving contributor community. You’ll find Python used for everything
    from mobile app development to embedded devices to, yes, data analytics. Its diverse
    user base is growing rapidly, and Python has become one of the most popular programming
    languages not just for analytics but for computing generally.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Python was conceived as a general-purpose programming language, while R was
    bred specifically with statistical analysis in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [Python Software Foundation](https://python.org) maintains the “official”
    Python source code. Because Python is open source, anyone is available to take,
    add to, and redistribute Python code. Anaconda is one such Python distribution
    and is the suggested installation for this book. It’s maintained by a for-profit
    company of the same name and is available in paid tiers; we’ll be using the free
    Individual Edition. Python is now on its third version, Python 3\. You can download
    the latest release of Python 3 at [Anaconda’s website](https://oreil.ly/3RYeQ).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to a simplified installation of Python, Anaconda comes with extras,
    including some popular packages which we’ll use later in the book. It also ships
    with a web application that we’ll use to work with Python: the Jupyter Notebook.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Jupyter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in [Chapter 6](ch06.html#first-steps-r), R was modeled after the
    S program for EDA. Because of the iterative nature of EDA, the expected workflow
    of the language is to execute and explore the output of selected lines of code.
    This makes it easy to conduct data analysis directly from an R script, *.r*. We
    used the RStudio IDE to provide additional support for our programming session,
    such as dedicated panes for help documentation and information about the objects
    in our environment.
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, Python in some ways behaves more like “lower-level” programming
    languages, where code needs first to be compiled into a machine-readable file,
    and *then* run. This can make it relatively trickier to conduct piecemeal data
    analysis from a Python script, *.py*. This pain point of working with Python for
    statistical and, more broadly, scientific computing caught the attention of physicist
    and software developer Fernando Pérez, who with colleagues in 2001 launched the
    IPython project to make a more interactive interpreter for Python (IPython as
    a playful shorthand for “interactive Python”). One result of this initiative was
    a new type of file, the *IPython Notebook*, denoted with the *.ipynb* file extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'This project gained traction and in 2014, IPython was spun into the broader
    Project Jupyter, a language-agnostic initiative to develop interactive, open source
    computing software. Thus, the IPython Notebook became the Jupyter Notebook while
    retaining the *.ipynb* extension. Jupyter notebooks run as interactive web applications
    that allow users to combine code with text, equations, and more to create media-rich
    interactive documents. In fact, Jupyter was named in part as an homage to the
    notebooks Galileo used to record his discovery of the planet Jupiter’s moons.
    A *kernel* is used behind the scenes to execute the notebook’s code. By downloading
    Anaconda, you’ve set up all these necessary parts to execute Python from a Jupyter
    notebook: now you just need to launch a session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for launching a Jupyter notebook vary for Windows and Mac computers.
    On Windows, open the Start menu, then search for and launch `Anaconda Prompt`.
    This is a command-line tool for working with your Anaconda distribution and yet
    another way to interact with Python code. For a further introduction to running
    Python from the command line with the experience of an Excel user in mind, check
    out Felix Zumstein’s [*Python for Excel*](https://oreil.ly/gDpyj) (O’Reilly).
    From inside the Anaconda prompt, enter `jupyter notebook` at the cursor and hit
    `Enter`. Your command will resemble the following, but with a different home directory
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On a Mac, open Launchpad, then search for and launch Terminal. This is the
    command-line interface that ships with Macs and can be used to communicate with
    Python. From inside the Terminal prompt, enter `jupyter notebook` at the cursor
    and hit `Enter`. Your command line will resemble the following, but with a different
    home directory path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After doing this on either system, a couple of things will happen: first, an
    additional terminal-like window will launch on your computer. *Do not close this
    window.* This is what establishes the connection to the kernel. Additionally,
    the Jupyter notebook interface should automatically open in your default web browser.
    If it does not, the terminal-like window will include a link that you can paste
    into your browser. [Figure 10-1](#jupyter-landing) shows what you should see in
    your browser. Jupyter launches with a File-Explorer-like interface. You can now
    navigate to the folder in which you’d like to save your notebooks.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jupyter landing page](assets/aina_1001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-1\. Jupyter landing page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To open a new notebook, head to the upper-right side of your browser window
    and select New → Notebook → Python 3\. A new tab will open with a blank Jupyter
    notebook. Like RStudio, Jupyter provides far more features than we can cover in
    an introduction; we’ll focus on the key pieces to get you started. The four main
    components of a Jupyter notebook are labeled in [Figure 10-2](#jupyter-interface);
    let’s walk through each.
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of Jupyter notebook interface](assets/aina_1002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-2\. Elements of the Jupyter interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'First, the notebook name: this is the name of our *.ipynb* file. You can rename
    the notebook by clicking and writing over the current name.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, the menu bar. This contains different operations for working with your
    notebook. For example, under File you can open and close notebooks. Saving them
    isn’t much of an issue, because Jupyter notebooks are autosaved every two minutes.
    If you ever need to convert your notebook to a *.py* Python script or other common
    file type, you can do so by going to File → Download as. There’s also a Help section
    containing several guides and links to reference documentation. You can learn
    about Jupyter’s many keyboard shortcuts from this menu.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, I mentioned that the *kernel* is how Jupyter interacts with Python
    under the hood. The *Kernel* option in the menu bar contains helpful operations
    for working with it. Computers being what they are, sometimes all that’s needed
    to get your Python code working is to restart the kernel. You can do this by going
    to Kernel → Restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Immediately underneath the menu bar is the toolbar. This contains helpful icons
    for working with your notebook, which can be more convenient than navigating through
    the menu: for example, several icons here relate to interacting with the kernel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also insert and relocate *cells* in your notebook, where you’ll be
    spending most of your time in Jupyter. To get started, let’s do one last thing
    with the toolbar: you’ll find a drop-down menu there currently set to Code; change
    it to Markdown.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, navigate to your first code cell and type in the phrase, `Hello, Jupyter!`
    Head back to the toolbar and select the Run icon. A couple of things will happen.
    First, you’ll see that your `Hello, Jupyter!` cell will render to look as it might
    in a word processing document. Next, you’ll see that a new code cell is placed
    underneath your previous one, and that it’s set for you to enter more information.
    Your notebook should resemble [Figure 10-3](#hello-world-jupyter).
  prefs: []
  type: TYPE_NORMAL
- en: '![Jupyter keyboard shortcuts](assets/aina_1003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-3\. “Hello, Jupyter!”
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now, go back to the toolbar and again choose “Markdown” from the drop-down
    menu. As you’re beginning to find out, Jupyter notebooks consist of modular cells
    that can be of different types. We’ll focus on the two most common: Markdown and
    Code. Markdown is a plain-text markup language that uses regular keyboard characters
    to format text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following text into your blank cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the cell: you can do this either from the toolbar or with the shortcut
    Alt + Enter for Windows, Option + Return for Mac. Your selection will render as
    in [Figure 10-4](#jupyter-markdown).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Markdown in Jupyter](assets/aina_1004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-4\. Examples of Markdown formatting in Jupyter
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To learn more about Markdown, return to the Help section of the menu bar. It’s
    worth studying up to build elegant notebooks, which can include images, equations,
    and more. But in this book, we’ll focus on the *code* block, as that’s where executable
    Python goes. You should now be on your third code cell; you can leave this one
    as a Code format. Finally, we’ll get coding in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python can be used as a fancy calculator, just like Excel and R. [Table 10-1](#python-arithmetic)
    lists some common arithmetic operators in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-1\. Common arithmetic operators in Python
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | Addition |'
  prefs: []
  type: TYPE_TB
- en: '| `-` | Subtraction |'
  prefs: []
  type: TYPE_TB
- en: '| `*` | Multiplication |'
  prefs: []
  type: TYPE_TB
- en: '| `/` | Division |'
  prefs: []
  type: TYPE_TB
- en: '| `**` | Exponent |'
  prefs: []
  type: TYPE_TB
- en: '| `%%` | Modulo |'
  prefs: []
  type: TYPE_TB
- en: '| `//` | Floor division |'
  prefs: []
  type: TYPE_TB
- en: 'Enter in the following arithmetic, then run the cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As Jupyter code blocks are executed, they are given numbered labels of their
    inputs and outputs with `In []` and `Out []`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python also follows the order of operations; let’s try running a few examples
    from within the same cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Jupyter notebooks will only return the output of the last-run code
    within a cell, so we’ll break this into two. You can split a cell at the cursor
    on either Windows or Mac with the keyboard shortcut Ctrl + Shift + - (Minus):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And yes, Python also uses code comments. Similar to R, they start with a hash,
    and it’s also preferable to keep them to separate lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like Excel and R, Python includes many functions for both numbers and characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Unlike Excel, but like R, Python is case-sensitive. That means *only* `abs()`
    works, not `ABS()` or `Abs()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Similar to R, you can use the `?` operator to get information about functions,
    packages, and more. A window will open as in [Figure 10-5](#jupyter-help), which
    you can then expand or open in a new window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Help documentation in Jupyter](assets/aina_1005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-5\. Launching documentation in Jupyter notebooks
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Comparison operators mostly work the same in Python as in R and Excel; in Python,
    results are either returned as `True` or `False`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As with R, you check for whether two values are equal with `==`; a single equals
    sign `=` is used to assign objects. We’ll stick with `=` throughout to assign
    objects in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have noticed there was no `Out []` component of cell `11`. That’s because
    we only *assigned* the object; we didn’t print anything. Let’s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Object names in Python must start with a letter or underscore, and the rest
    of the name can contain only letters, numbers, or underscores. There are also
    a few off-limit keywords. Again, you’re left with broad license for naming objects
    in Python, but just because you *can* name an object `scooby_doo` doesn’t mean
    you should.
  prefs: []
  type: TYPE_NORMAL
- en: Just like in R, our objects in Python can consist of different data types. [Table 10-2](#data-types-python)
    shows some basic Python types. Do you see the similarities and differences to
    R?
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-2\. Basic object types in Python
  prefs: []
  type: TYPE_NORMAL
- en: '| Data type | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| String | `''Python''`, `''G. Mount''`, `''Hello, world!''` |'
  prefs: []
  type: TYPE_TB
- en: '| Float | `6.2`, `4.13`, `3.1` |'
  prefs: []
  type: TYPE_TB
- en: '| Integer | `3`, `-1`, `12` |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | `True`, `False` |'
  prefs: []
  type: TYPE_TB
- en: 'Let’s assign some objects. We can find what type they are with the `type()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You’ve worked with objects in R, so you’re probably not surprised that it’s
    possible to use them as part of Python operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Closely related to functions in Python are *methods*. A method is affixed to
    an object with a period and does something to that object. For example, to capitalize
    all letters in a string object, we can use the `upper()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Functions and methods are both used to perform operations on objects, and we’ll
    use both in this book. As you are probably hoping, Python, like R, can store multiple
    values in a single object. But before getting into that, let’s consider how *modules*
    work in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Modules in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python was designed as a general-purpose programming language, so even some
    of the simplest functions for working with data aren’t available out of the box.
    For example, we won’t have luck finding a function to take the square root of
    a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This function *does* exist in Python. But to access it, we’ll need to bring
    in a *module*, which is like a package in R. Several modules come installed with
    Python as part of the Python Standard Library; for example, the `math` module
    contains many mathematical functions, including `sqrt()`. We can call this module
    into our session with the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Statements are instructions telling the interpreter what to do. We just told
    Python to, well, *import* the `math` module. The `sqrt()` function should now
    be available to us; give it a try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Honestly, I’m not fibbing about a `sqrt()` function. The reason we’re still
    getting errors is we need to explicitly tell Python *where* that function comes
    from. We can do that by prefixing the module name before the function, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The Standard Library is full of helpful modules. Then there are the thousands
    of third-party modules, bundled into *packages* and submitted to the Python Package
    Index. `pip` is the standard package-management system; it can be used to install
    from the Python Package Index as well as outside sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Anaconda distribution has done much of the lifting for working with packages.
    First off, some of the most popular Python packages come preinstalled. Additionally,
    Anaconda includes features to ensure all packages on your machine are compatible.
    For this reason, it’s preferred to install packages directly from Anaconda rather
    than from `pip`. Python package installation is generally done from the command
    line; you worked there earlier when you were in the Anaconda Prompt (Windows)
    or Terminal (Mac). However, we can execute command-line code from Jupyter by including
    an exclamation mark in front of it. Let’s install `plotly`, a popular package
    for data visualization, from Anaconda. The statement to use is `conda install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Not all packages are available to download from Anaconda; in that case, we
    can install via `pip`. Let’s do it for the `pyxlsb` package, which can be used
    to read binary `.xlsb` Excel files into Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Although downloading packages right from Jupyter is convenient, it can be an
    unpleasant surprise for others to try running your notebook only to get hit with
    lengthy or unnecessary downloads. That’s why it’s common to comment out install
    commands, a convention I follow in the book repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If you’re using Anaconda to run Python, it’s best to install things first via
    `conda` and only then install via `pip` if the package is not available.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Python, Anaconda, and Python packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Table 10-3](#python-update-options) lists several other helpful commands for
    maintaining your Python environment. You can also install and maintain Anaconda
    packages from a point-and-click interface using the Anaconda Navigator, which
    is installed with Anaconda Individual Edition. To get started, launch the application
    on your computer, then navigate to the Help menu to read the documentation for
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-3\. Helpful commands for maintaining Python packages
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update anaconda` | Updates Anaconda distribution |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update python` | Updates Python version |'
  prefs: []
  type: TYPE_TB
- en: '| `conda update -- all` | Updates all possible packages downloaded via `conda`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pip list -- outdated` | Lists all packages downloaded via `pip` that can
    be updated |'
  prefs: []
  type: TYPE_TB
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to work with objects and packages in Python
    and got the hang of working with Jupyter notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following exercises provide additional practice and insight on these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From a new Jupyter notebook, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the sum of 1 and –4 as `a`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign the absolute value of `a` as `b`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign `b` minus 1 as `d`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is `d` greater than 2?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python Standard Library includes a module `random` containing a function
    `randint()`. This function works like `RANDBETWEEN()` in Excel; for example, `randint(1,
    6)` will return an integer between 1 and 6\. Use this function to find a random
    number between 0 and 36.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python Standard Library also includes a module called `this`. What happens
    when you import that module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `xlutils` package from Anaconda, then use the `?` operator to retrieve
    the available documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I will again encourage you to begin using the language as soon as possible in
    your everyday work, even if at first it’s just as a calculator. You can also try
    performing the same tasks in R *and* Python, then comparing and contrasting. If
    you learned by relating R to Excel, the same will work for relating Python to
    R.
  prefs: []
  type: TYPE_NORMAL
