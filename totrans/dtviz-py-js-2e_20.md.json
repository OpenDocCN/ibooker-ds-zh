["```py\nax = df_countries[df_countries.nobel_wins > 2]\\ ![1](assets/1.png)\n    .sort_values(by='nobel_wins_per_capita', ascending=True)\\\n    .nobel_wins_per_capita.plot(kind='barh',\\ ![2](assets/2.png)\n        figsize=(5, 10), title=\"Relative prize numbers\")\nax.set_xlabel(\"Nobel prizes per capita\")\nax.set_facecolor(\"#eee\")\nplt.tight_layout() ![3](assets/3.png)\nplt.savefig(\"country_relative_prize_numbers.png\")\n```", "```py\n<!-- index.xhtml -->\n<div class=\"main\">\n  <h1 class='title'>The Nobel Prize</h1>\n  <h2>A few exploratory nuggets</h2>\n\n  <div class=\"intro\">\n    <p>Some nuggets of data mined from a dataset of Nobel prize\n     winners (2016).</p>\n  </div>\n\n  <div class=\"container\" id=\"by-country-container\">\n\n    <div class=\"info-box\">\n      <p>These two charts compare Nobel prize winners by\n         country. [...] that Sweden, winner by a relative\n          metric, hosts the prize.</p>\n    </div>\n\n    <div class=\"chart-wrapper\" id=\"by-country\">\n\n      <div class=\"chart\">\n        <img src=\"images/country_absolute_prize_numbers.png\" ![1](assets/1.png)\n         alt=\"\">\n      </div>\n\n      <div class=\"chart\">\n        <img src=\"images/country_relative_prize_numbers.png\"\n         alt=\"\">\n      </div>\n\n    </div>\n  </div>\n</div>\n```", "```py\nhtml,\nbody {\n  height: 100%;\n  font-family: Georgia, serif;\n  background: #fff1e5;\n  font-size: 1.2em;\n}\n\nh1.title {\n  font-size: 2.1em;\n}\n\n.main {\n  padding: 10px;\n  padding-bottom: 100px;\n  min-width: 800px;\n  max-width: 1200px;\n}\n\n.container {\n  display: flex;\n}\n\n.chart-wrapper {\n  display: flex; ![1](assets/1.png)\n  flex: 2; ![2](assets/2.png)\n}\n\n.chart {\n  flex: 1;\n  padding: 0 1.5em;\n}\n\n.chart img {\n  max-height: 600px;\n}\n\n.info-box {\n  font-family: sans-serif;\n  flex: 1; ![2](assets/2.png)\n  font-size: 0.7em;\n  padding: 0 1.5em;\n  background: #ffebd9;\n}\n```", "```py\n/* When the browser is 1000 pixels wide or less */\n@media screen and (max-width: 1000px) {\n  #by-country-container {\n    flex-direction: column-reverse;\n  }\n}\n```", "```py\n      <div class=\"chart\">\n        <img src=\"https://www.dropbox.com/s/422ugyhvfc0zg99/\n country_absolute_prize_numbers.png?raw=1\" alt=\"\">\n      </div>\n\n      <div class=\"chart\">\n        <img src=\"https://www.dropbox.com/s/n6rfr9kvuvir7gi/\n country_relative_prize_numbers.png?raw=1\" alt=\"\">\n      </div>\n```", "```py\nnew_index = pd.Index(np.arange(1901, 2015), name='year')\n\nby_year_nat_sz = df.groupby(['year', 'country'])\\\n    .size().unstack().reindex(new_index).fillna(0)\n\n# Our continental country list created by selecting the biggest\n# two or three winners in the three continents compared.\nregions = [\n{'label':'N. America',\n'countries':['United States', 'Canada']},\n{'label':'Europe',\n'countries':['United Kingdom', 'Germany', 'France']},\n{'label':'Asia',\n'countries':['Japan', 'Russia', 'India']}\n]\n# Creates a new column with a region label for each dict in the\n# regions list, summing its countries members.\nfor region in regions:\n    by_year_nat_sz[region['label']] =\\\n    by_year_nat_sz[region['countries']].sum(axis=1)\n# Creates a new DataFrame using the cumulative sum of the\n# new region columns.\ndf_regions = by_year_nat_sz[[r['label'] for r in regions]].\\\n    cumsum()\n```", "```py\ndf_regions\ncountry  N. America  Europe  Asia\nyear\n1901            0.0     4.0   0.0\n1902            0.0     7.0   0.0\n1903            0.0    10.0   0.0\n1904            0.0    13.0   1.0\n1905            0.0    15.0   1.0\n...             ...     ...   ...\n2010          327.0   230.0  36.0\n2011          333.0   231.0  36.0\n...\n```", "```py\n# load the express module\nimport plotly.express as px\n# use the line method with a suitable DataFrame\nfig = px.line(df_regions)\nfig.show()\n```", "```py\nfig = px.line(df_regions, labels={'country': 'Regions'})\n      line_dash='country', line_dash_sequence=['solid', 'dash', 'dot']) ![1](assets/1.png)\n)\nfig.show()\n```", "```py\nimport plotly.graph_objs as go\n\ntraces = [] ![1](assets/1.png)\nfor region in regions:\n    name = region['label']\n    traces.append(\n        go.Scatter(\n            x=df_regions.index, # years\n            y=df_regions[name], # cum. prizes\n            name=name,\n            mode=\"lines\", ![2](assets/2.png)\n            hovertemplate=f\"{name}<br>%{{x}}<br>$%{{y}}<extra></extra>\" ![3](assets/3.png)\n            line=dict(dash=['solid', 'dash', 'dot'][len(traces)]) ![4](assets/4.png)\n        )\n    )\nlayout = go.Layout(height=600, width=600,\\ ![5](assets/5.png)\n    xaxis_title=\"year\", yaxis_title=\"cumulative prizes\")\nfig = go.Figure(traces, layout) ![6](assets/6.png)\nfig.show()\n```", "```py\ndf_country_category = df.groupby(['country', 'category'])\\\n    .size().unstack()\ndf_country_category['Total'] = df_country_category.sum(1)\ndf_country_category.head(3) # top three rows\n#category   Chemistry  Economics  Literature  Peace  Physics  \\\n#country\n#Argentina        1.0        NaN         NaN    2.0      NaN\n#Australia        NaN        1.0         1.0    NaN      1.0\n#Austria          3.0        1.0         1.0    2.0      4.0\n#\n#category   Physiology or Medicine  Total\n#country\n#Argentina                     2.0    5.0\n#Australia                     6.0    9.0\n#Austria                       4.0   15.0\n```", "```py\ndf_country_category = df_country_category.\\\n    loc[df_country_category.Total > 2].copy()\ndf_country_category\n```", "```py\n!pip install geopy\n```", "```py\nfrom geopy.geocoders import Nominatim\n\ngeolocator = Nominatim(user_agent=\"nobel_prize_app\")\n```", "```py\nfor name in df_country_category.index[:5]:\n    location = geolocator.geocode(name)\n    print(\"Name: \", name)\n    print(\"Coords: \", (location.latitude, location.longitude))\n    print(\"Raw details: \", location.raw)\n#Name:  Argentina\n#Coords:  (-34.9964963, -64.9672817)\n#Raw details:  {'place_id': 284427148, 'licence': 'Data Â©\n#OpenStreetMap contributors, ODbL 1.0\\. https://osm.org/\n#copyright', 'osm_type': 'relation', 'osm_id': 286393,\n#'boundingbox': ['-55.1850761', '-21.7808568', '-73.5605371',\n#[...] }\n```", "```py\nlats = {}\nlons = {}\nfor name in df_country_category.index:\n    location = geolocator.geocode(name)\n    if location:\n        lats[name] = location.latitude\n        lons[name] = location.longitude\n    else:\n        print(\"No coords for %s\"%name)\n\ndf_country_category.loc[:,'Lat'] = pd.Series(lats)\ndf_country_category.loc[:,'Lon'] = pd.Series(lons)\ndf_country_category\n#category   Chemistry  Economics  Literature  Peace  Physics  \\\n#country\n#Argentina        1.0        NaN         NaN    2.0      NaN\n#Australia        NaN        1.0         1.0    NaN      1.0\n#\n#category   Physiology or Medicine  Total        Lat         Lon\n#country\n#Argentina                     2.0    5.0 -34.996496  -64.967282\n#Australia                     6.0    9.0 -24.776109  134.755000\n```", "```py\ndef calc_marker_radius(size, scale=5):\n    return np.sqrt(size/np.pi) * scale\n```", "```py\nimport plotly.express as px\ninit_notebook_mode(connected=True)\n\nsize = df_country_category['Total'].apply(calc_marker_radius, args=(16,)) ![1](assets/1.png)\nfig = px.scatter_mapbox(df_country_category, lat=\"Lat\", lon=\"Lon\", ![2](assets/2.png)\n                        hover_name=df_country_category.index, ![3](assets/3.png)\n                        hover_data=['Total'],\n                        color_discrete_sequence=[\"olive\"],\n                        zoom=0.7, size=size)\nfig.update_layout(mapbox_style=\"carto-positron\", width=800, height=450) ![4](assets/4.png)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()\n```", "```py\nmapbox_access_token = \"pk.eyJ1Ij...JwFsbg\" ![1](assets/1.png)\n\ndf_cc = df_country_category\n\nsite_lat = df_cc.Lat ![2](assets/2.png)\nsite_lon = df_cc.Lon\ntotals = df_cc.Total\nlocations_name = df_cc.index\n\nlayout = go.Layout(\n    title='Nobel prize totals by country',\n    hovermode='closest',\n    showlegend=False,\n    margin ={'l':0,'t':0,'b':0,'r':0},\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        # we can set map details here including center, pitch and bearing..\n        # try playing  with these.\n#         bearing=0,\n# #         center=dict(\n# #             lat=38,\n# #             lon=-94\n# #         ),\n#         pitch=0,\n        zoom=0.7,\n        style='light'\n    ),\n    width=875, height=450\n)\n\ntraces = [\n            go.Scattermapbox(\n            lat=site_lat,\n            lon=site_lon,\n            mode='markers',\n            marker=dict(\n                size=totals.apply(calc_marker_radius, args=(7,)),\n                color='olive',\n                opacity=0.8\n            ),\n            text=[f'{locations_name[i]} won {int(x)} total prizes'\\\n                for i, x in enumerate(totals)],\n            hoverinfo='text'\n             )\n]\n\nfig = go.Figure(traces, layout=layout)\nfig.show()\n```", "```py\ndf_country_category.head(2)\n# Out:\n#  category   Chemistry  Economics  Literature  Peace  Physics  \\\n# country\n# Argentina        1.0        NaN         NaN    2.0      NaN\n# Australia        NaN        1.0         1.0    NaN      1.0\n```", "```py\ndf_country_category.fillna(0, inplace=True)\n```", "```py\n# ...\ncategories = ['Total', 'Chemistry',   'Economics', 'Literature',\\\n    'Peace', 'Physics','Physiology or Medicine',]\n# ...\ncolors = ['#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d']\nbuttons = []\n# ... DEFINE LAYOUT AS BEFORE\nfig = go.Figure(layout=layout)\ndefault_category = 'Total'\n\nfor i, category in enumerate(categories):\n    visible = False\n    if category == default_category: ![1](assets/1.png)\n        visible = True\n    fig.add_trace(\n        go.Scattermapbox(\n            lat=site_lat,\n            lon=site_lon,\n            mode='markers',\n            marker=dict(\n                size=df_cc[category].apply(calc_marker_radius, args=(7,)),\n                color=colors[i],\n                opacity=0.8\n            ),\n            text=[f'{locations_name[i]} prizes for {category}: {int(x)}'\\\n                  for i, x in enumerate(df_cc[category])],\n            hoverinfo='text',\n            visible=visible\n             ),\n    )\n    # We start with a mask array of Boolean False, one for each category (inc. Total)\n    # In Python [True] * 3 == [True, True, True]\n    mask = [False] * len(categories)\n    # We now set the mask index corresponding to the current category to True\n    # i.e. button 'Chemistry' has mask [False, True, False, False, False, False]\n    mask[categories.index(category)] = True\n    # Now we can use that Boolean mask to add a button to our button list\n    buttons.append(\n            dict(\n                label=category,\n                method=\"update\",\n                args=[{\"visible\": mask}], ![2](assets/2.png)\n            ),\n    )\n\nfig.layout.update( ![3](assets/3.png)\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"down\",\n            active=0,\n            x=0.0,\n            xanchor='left',\n            y=0.65,\n            showactive=True, # show the last button clicked\n            buttons=buttons\n        )\n    ]\n)\n\nfig.show()\n```", "```py\nfrom plotly.offline import plot\n```", "```py\nembed_string = plot(fig, output_type='div', include_plotlyjs=\"cdn\")\nembed_string\n#'<div>                        <script type=\"text/javascript\">window.PlotlyConfig\n#= {MathJaxConfig: \\'local\\'};</script>\\n        <script src=\"https://cdn.plot.ly/\n#plotly-2.9.0.min.js\"></script>                <div\n#id=\"195b2d71-f59d-4f8a-a40a-3b8c797a918b\" class=\"plotly-graph-div\"\n#style=\"height:600px; width:600px;\"></div>            <script type=\"text/\n#javascript\"> [...]    </script>\n#</div>'\n```", "```py\n<div>\n  <!-- (1) JavaScript Plotly config, placed with JavaScript (.js) file -->\n  <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};\n  </script>\n  <!-- (2) Place bottom of HTML file to import the Plotly library\n from the cloud (content delivery network) -->\n  <script src=\"https://cdn.plot.ly/plotly-2.9.0.min.js\"></script>\n  <!-- create a content div for the chart, with ID tag (to be inflated)\n (3) !! Put this div in the HTML section of the code-pen !! -->\n  <div id=\"4dbeae4f-ed9b-4dc1-9c69-d4bb2a20eaa7\" class=\"plotly-graph-div\"\n       style=\"height:100%; width:100%;\"></div>\n\n  <script type=\"text/javascript\">\n    // (4) Everything within this tag goes to a JavaScript (.js) file -->\n    window.PLOTLYENV=window.PLOTLYENV || {};\n    // Grab the 'div' tag above by ID and call Plotly's JS API on it, using the\n    // embedded data and annotations\n    if (document.getElementById(\"4dbeae4f-ed9b-4dc1-9c69-d4bb2a20eaa7\"))\n    {                    Plotly.newPlot(\"4dbeae4f-ed9b-4dc1-9c69-d4bb2a20eaa7\",\n                      [{\"mode\":\"lines\",\"name\":\"Korea, South\",\n                      \"x\": [0,1,2,3,4,5,6,7,8,9,10,11,12,...]}])\n                };\n  </script>\n</div>\n```", "```py\n<!-- index.xhtml -->\n<div class=\"main\">\n  <h1 class='title'>The Nobel Prize</h1>\n  <h2>From notebook to the web with Plotly</h2>\n\n  <div class=\"intro\">\n    <p>Some nuggets of data mined [...]</p>\n  </div>\n\n  <div class=\"container\" id=\"by-country-container\">\n\n    <div class=\"info-box\">\n      <p>This chart shows the cumulative Nobel prize wins by region, taking the\n       two or three highest winning countries from each.[...]</p>\n    </div>\n\n    <div class=\"chart-wrapper\" id=\"by-country\">\n      <div id=\"bd54c166-3733-4b20-9bb9-694cfff4a48e\" ![1](assets/1.png)\n      class=\"plotly-graph-div\" style=\"height:100%; width:100%;\"></div>\n    </div>\n  </div>\n</div>\n\n<script scr=\"scripts/plotly_charts.js\"></script>\n<script src=\"https://cdn.plot.ly/plotly-2.9.0.min.js\"></script> ![2](assets/2.png)\n```", "```py\n// scripts/plotly_charts.js\n  window.PLOTLYENV=window.PLOTLYENV || {};\n  if (document.getElementById(\"bd54c166-3733-4b20-9bb9-694cfff4a48e\")){ ![1](assets/1.png)\n    Plotly.newPlot(\"bd54c166-3733-4b20-9bb9-694cfff4a48e\", ![2](assets/2.png)\n      [{\"hovertemplate\":\"N. America<br>%{x}<br>$%{y}<extra></extra>\", ![3](assets/3.png)\n        \"mode\":\"lines\",\"name\":\"N. America\",\n        \"x\":[1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,\n             1914,1915,1916,1917,1918,1919,1920,1921,1922,...]\n      }])\n  }\n```", "```py\ndf_select = df[['gender', 'award_age']]\ndf_select.to_json(orient='records')\n#'[{\"gender\":\"male\",\"award_age\":57},{\"gender\":\"male\",\"award_age\":80},\n#{\"gender\":\"male\",\"award_age\":49},{\"gender\":\"male\",\"award_age\":59},\n#{\"gender\":\"male\",\"award_age\":49},{\"gender\":\"male\",\"award_age\":46},...}]'\n```", "```py\nlet data = JSON.parse('[{\"gender\":\"male\",\"award_age\":57}\n',{\"gender\":\"male\",\"award_age\":80},'\n'{\"gender\":\"male\",\"award_age\":49},{\"gender\":\"male\",\"award_age\":59},'\n'{\"gender\":\"male\",\"award_age\":48}, ... ]')\n```", "```py\n<div class=\"main\">\n  <h1 class='title'>The Nobel Prize</h1>\n  <!-- ... -->\n    <div class=\"chart-wrapper\">\n      <div class='chart' id='award_age'></div> ![1](assets/1.png)\n  </div>\n\n</div>\n\n<script src=\"https://cdn.plot.ly/plotly-2.9.0.min.js\"></script>\n```", "```py\nvar traces = [{ ![1](assets/1.png)\n  type: 'violin',\n  x: data.map(d => d.gender), ![2](assets/2.png)\n  y: data.map(d => d.award_age),\n  points: 'none',\n  box: {\n    visible: true\n  },\n  line: {\n    color: 'green',\n  },\n  meanline: {\n    visible: true\n  },\n}]\n\nvar layout = {\n  title: \"Nobel Prize Violin Plot\",\n  yaxis: {\n    zeroline: false\n  }\n}\n\nPlotly.newPlot('award_age', traces, layout); ![3](assets/3.png)\n```", "```py\ndf.to_json('nobel_winners.json', orient='records')\n```", "```py\n<!-- index.xhtml -->\n<link rel=\"stylesheet\" href=\"styles/index.css\">\n\n<div class=\"main\">\n  <h1 class='title'>The Nobel Prize</h1>\n  <!-- ... -->\n    <div class=\"chart-wrapper\">\n      <div class='chart' id='gender-category'> </div> ![1](assets/1.png)\n    </div>\n  </div>\n</div>\n\n<script src=\"https://cdn.plot.ly/plotly-2.9.0.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.4.2/d3.min.js\"></script>\n<script src=\"scripts/index.js\"></script> ![2](assets/2.png)\n```", "```py\n// scripts/index.js\nd3.json('data/nobel_winners.json').then(data => {\n  console.log(\"Dataset: \", data)\n  makeChart(data)\n})\n```", "```py\n[\n  {category: 'Physiology or Medicine', country: 'Argentina',\n   date_of_birth: -1332806400000, date_of_death: 1016928000000,\n   gender: 'male', â¦},\n  {category: 'Peace', country: 'Belgium',\n   date_of_birth: -4431715200000, date_of_death: -1806278400000,\n   gender: 'male', â¦}\n   [...]\n]\n```", "```py\nfunction makeChart(data) {\n  let cat_groups = d3.rollup(data, v => v.length, ![1](assets/1.png)\n                      d=>d.gender, d=>d.category)\n  let male = cat_groups.get('male')\n  let female = cat_groups.get('female')\n  let categories = [...male.keys()].sort() ![2](assets/2.png)\n\n  let traceM = {\n    y: categories,\n    x: categories.map(c => male.get(c)), ![3](assets/3.png)\n    name: \"male prize total\",\n    type: 'bar',\n    orientation: 'h'\n  }\n    let traceF= {\n    y: categories,\n    x: categories.map(c => female.get(c)),\n    name: \"female prize total\",\n    type: 'bar',\n    orientation: 'h'\n  }\n\n  let traces = [traceM, traceF]\n  let layout = {barmode: 'group', margin: {l:160}} ![4](assets/4.png)\n\n  Plotly.newPlot('gender-category', traces, layout)\n}\n```", "```py\n<div class=\"main\">\n  <h1 class='title'>The Nobel Prize</h1>\n  <h2>From notebook to the web with Plotly</h2>\n\n  <!-- ... -->\n  <div class=\"container\">\n  <!-- ... -->\n    <div class=\"chart-wrapper\">\n      <div class='chart' id='violin-group'> </div>\n    </div>\n  </div>\n\n  <div id=\"chart-controls\">\n\n    <div id=\"nobel-group-select-holder\">\n      <label for=\"nobel-group\">Group:</label>\n      <select name=\"nobel-group\" id=\"nobel-group\"></select> ![1](assets/1.png)\n    </div>\n\n  </div>\n\n</div>\n```", "```py\n#chart-controls {\n  display: flex;\n  justify-content: center;\n  font-family: sans-serif;\n  font-size: 0.7em;\n  margin: 20px 0;\n}\n\nselect {\n  padding: 2px;\n}\n```", "```py\nlet data\nd3.json(\"data/nobel_winners.json\").then((_data) => {\n  console.log(_data);\n  data = _data\n  updateChart();\n});\n\nlet selectedGroup = 'gender' ![1](assets/1.png)\n\nfunction updateChart() {\n  var traces = [\n    {\n      type: \"violin\",\n      x: data.map((d) => d[selectedGroup]), ![1](assets/1.png)\n      y: data.map((d) => d.award_age),\n      points: \"none\",\n      box: {\n        visible: true\n      },\n      line: {\n        color: \"green\"\n      },\n      meanline: {\n        visible: true\n      }\n    }\n  ];\n\n  var layout = {\n    title: \"Age distributions of the Nobel prizewinners\",\n    yaxis: {\n      zeroline: false\n    },\n    xaxis: {\n      categoryorder: 'category ascending' ![2](assets/2.png)\n    }\n  };\n\n  Plotly.update(\"violin-group\", traces, layout); ![3](assets/3.png)\n}\n```", "```py\nlet availableGroups = ['gender', 'category']\navailableGroups.forEach((g) => {\n  d3.select(\"#nobel-group\") ![1](assets/1.png)\n    .append(\"option\")\n    .property(\"selected\", g === selectedGroup) ![2](assets/2.png)\n    .attr(\"value\", g)\n    .text(g);\n});\n\nd3.select(\"#nobel-group\").on(\"change\", function (e) {\n  selectedGroup = d3.select(this).property(\"value\"); ![3](assets/3.png)\n  updateChart();\n});\n```"]