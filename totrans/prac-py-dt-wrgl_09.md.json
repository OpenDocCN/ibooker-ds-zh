["```py\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\n```", "```py\nmean_pgs = (28+32+44+23+56+32+12+34+30)/9\n```", "```py\n32.333333333333336\n```", "```py\nmean_pgs = (28+32+44+23+56+32+12+34+30+100)/10\n```", "```py\n39.1\n```", "```py\npage_counts = [28, 32, 44, 23, 56, 32, 12, 34, 30]\npage_counts.sort()\nprint(page_counts)\n```", "```py\n[12, 23, 28, 30, 32, 32, 34, 44, 56]\n```", "```py\n[12, 23, 28, 30, 32, 32, 34, 44, 56, 100]\n```", "```py\n# `pandas` for reading and assessing our data\nimport pandas as pd\n\n# `seaborn` for its built-in themes and chart types\nimport seaborn as sns\n\n# `matplotlib` for customizing visual details\nimport matplotlib.pyplot as plt\n\n# read in our data\nppp_data = pd.read_csv('public_150k_plus_221.csv')\n\n# set a basic color theme for our visualization\nsns.set_theme(style=\"whitegrid\")\n\n# use the built-in `mean()` and `median()` methods in `pandas\nmean = ppp_data['CurrentApprovalAmount'].mean() ![1](assets/1.png)\nmedian = ppp_data['CurrentApprovalAmount'].median()\n\n# create a histogram of the values in the `CurrentApprovalAmount` column\napproved_loan_plot = sns.histplot(data=ppp_data, x=\"CurrentApprovalAmount\")\n\n# get the min and max y-values on our histogram\ny_axis_range = approved_loan_plot.get_ylim() ![2](assets/2.png)\n\n# add the vertical lines at the correct locations\napproved_loan_plot.vlines(mean, 0, y_axis_range[1], color='crimson', ls=':') ![3](assets/3.png)\napproved_loan_plot.vlines(median, 0, y_axis_range[1], color='green', ls='-')\n\n# the matplotlib `show()` method actually renders the visualization\nplt.show() ![4](assets/4.png)\n```", "```py\n# `pandas` to read in our data\nimport pandas as pd\n\n# `seaborn` for built-in themes and chart types\nimport seaborn as sns\n\n# `matplotlib` for customizing visual details\nimport matplotlib.pyplot as plt\n\n# `statistics` easily calculating statistical measures\nimport statistics\n\n# read in our data\nwing_data = pd.read_csv('wing_length - s057.csv')\n\n# set a basic color theme for our visualization\nsns.set_theme(style=\"white\")\n\n# create the histogram, allowing `seaborn` to choose default \"bin\" values\nwing_plot = sns.histplot(data=wing_data, x=\"wing_length (0.1mm)\", kde=\"True\") ![1](assets/1.png)\n\n# calculate the standard deviation via the `statistics` `stdev()` method\nsd = statistics.stdev(wing_data['wing_length (0.1mm)']) ![2](assets/2.png)\n\n# get the min and max y-values on our histogram\ny_axis_range = wing_plot.get_ylim()\n\n# plot the mean as a solid line\nmean = wing_data['wing_length (0.1mm)'].mean()\nwing_plot.vlines(mean, 0, y_axis_range[1], color='gray', ls='-')\n\n# plot the three standard deviation boundary lines on either side of the mean\nfor i in range(-3,4): ![3](assets/3.png)\n\n    # find the current boundary value\n    z_value = mean + (i*sd)\n\n    # don't draw a second line over the mean line\n    if z_value != mean:\n\n        # plot a dotted gray line at each boundary value\n        wing_plot.vlines(z_value, 0, y_axis_range[1], color='gray', ls=':')\n\n# show the plot!\nplt.show()\n```", "```py\n# `pandas` for reading and assessing our data\nimport pandas as pd\n\n# `seaborn` for its built-in themes and chart types\nimport seaborn as sns\n\n# `matplotlib` for customizing visual details\nimport matplotlib.pyplot as plt\n\n# read in our data\nppp_data = pd.read_csv('public_150k_plus_221.csv')\n\n# set a basic color theme for our visualization\nsns.set_theme(style=\"whitegrid\")\n\n# use the built-in `mean()` and `median()` methods in `pandas\nmean = ppp_data['CurrentApprovalAmount'].mean()\nmedian = ppp_data['CurrentApprovalAmount'].median()\n\n# Q1 is the value at the position in our dataset\n# that has 25% of data readings to its left\nQ1 = ppp_data['CurrentApprovalAmount'].quantile(0.25)\n\n# Q3 is the value at the position in our dataset\n# that has 75% of data readings to its left\nQ3 = ppp_data['CurrentApprovalAmount'].quantile(0.75)\n\n# IQR is the difference between the Q3 and Q1 values\nIQR = Q3-Q1\n\n# and now we calculate our lower and upper bounds\nlower_bound = Q1 - (1.5*IQR)\nupper_bound = Q3 + (1.5*IQR)\n\n# use `seaborn` to plot the histogram\napproved_loan_plot = sns.histplot(data=ppp_data, x=\"CurrentApprovalAmount\")\n\n# get the min and max y-values on our histogram\ny_axis_range = approved_loan_plot.get_ylim()\n\n# add mean line in gray\napproved_loan_plot.vlines(mean, 0, y_axis_range[1], color='gray', ls='-')\n\n# other lines in black (median solid, others dotted)\napproved_loan_plot.vlines(median, 0, y_axis_range[1], color='black', ls='-')\napproved_loan_plot.vlines(lower_bound, 0, y_axis_range[1], color='black', ls=':')\napproved_loan_plot.vlines(Q1, 0, y_axis_range[1], color='black', ls=':')\napproved_loan_plot.vlines(Q3, 0, y_axis_range[1], color='black', ls=':')\napproved_loan_plot.vlines(upper_bound, 0, y_axis_range[1], color='black', ls=':')\n\n# show the plot!\nplt.show()\n```", "```py\n# `pandas` for data loading/transformations\nimport pandas as pd\n\n# `seaborn` for visualization\nimport seaborn as sns\n\n# `matplotlib` for detailed visualization support\nimport matplotlib.pyplot as plt\n\n# `numpy` for manipulating arrays/lists\nimport numpy as np\n\n# load our data\nppp_data = pd.read_csv('public_150k_plus_borrower_fingerprint_a.csv') ![1](assets/1.png)\n\n# convert the `DateApproved` column to an actual datetime data type\nppp_data['DateApproved'] = pd.to_datetime(ppp_data['DateApproved']) ![2](assets/2.png)\n\n# create a variable to hold the second-round start date\nsecond_round_start =  pd.to_datetime('2021-01-13')\n\n# treat today's date to use as the \"upper\" limit on possible second-round loans\ntodays_date = pd.to_datetime('today')\n\n# use 1/1/2020 as a \"lower\" limit, since it's before the PPP launched\nprogram_start = pd.to_datetime('2020-01-01')\n\n# pass our boundaries and category labels to the pandas `cut()` function\nloan_round = pd.cut(ppp_data.DateApproved,\n                    bins=[program_start,second_round_start, todays_date],\n                    labels=['first_round', 'maybe_second']) ![3](assets/3.png)\n\n# insert the new column at the position we specify\nppp_data.insert(2,'Loan Round',loan_round)\n\n# this \"pivot table\" will return a Series showing the number\n# of times a particular 'BorrowerNameFingerprint' appears in the dataset\nloan_count = ppp_data.pivot_table(index=['BorrowerNameFingerprint'], aggfunc='size')\n\n# convert our Series to a DataFrame and give it a name\nloan_count_df = loan_count.to_frame('Loan Count') ![4](assets/4.png)\n\n# use the `describe()` method to print out summary statistics\nprint(\"Description of duplicate borrower table:\")\nprint(loan_count_df.describe()) ![5](assets/5.png)\n```", "```py\nDescription of duplicate borrower table:\n          Loan Count\ncount  694279.000000\nmean        1.104022\nstd         0.306489\nmin         1.000000\n25%         1.000000\n50%         1.000000\n75%         1.000000\nmax        12.000000\n```", "```py\n# start by sorting our DataFrame of loan counts from greatest to least\nsorted_loan_counts = loan_count_df.sort_values(by=['Loan Count'], ascending=False)\n\n# create a new DataFrame with *only* those that have more than two loans\nmore_than_two = sorted_loan_counts[sorted_loan_counts['Loan Count'] > 2]\n\n# print one instance of each business name that appears in `more_than_two`\nprint(\"Businesses that seem to have gotten more than 2 loans:\")\nprint(more_than_two.shape)\n\nprint(\"Number of businesses that appear to have gotten precisely 2 loans:\")\nprecisely_two = sorted_loan_counts[sorted_loan_counts['Loan Count'] == 2]\nprint(precisely_two.shape)\n```", "```py\nBusinesses that seem to have gotten more than 2 loans:\n(58, 1)\nNumber of businesses that appear to have gotten precisely 2 loans:\n(72060, 1)\n```", "```py\n# use `ProcessingMethod` value to identify second-round loans\npps_loans = ppp_data[ppp_data['ProcessingMethod'] == 'PPS']\n\n# print out the `shape` of this DataFrame to see how many businesses we have\nprint(\"Number of loans labeled as second round:\")\nprint(pps_loans.shape)\n```", "```py\nNumber of loans labeled as second round:\n(103949, 52)\n```", "```py\n# how many loans in our derived data frame were approved for precisely $2M\n# during the (possibly) second-round timeframe?\n\n# merge our `loan_count_df` back to keep track of businesses\n# we labeled as having precisely two loans\nppp_data_w_lc = pd.merge(ppp_data, loan_count_df,\n                         on=['BorrowerNameFingerprint'], how='left')\n\n# now get *all* the records of business names we associated with two loans\nmatched_two_loans = ppp_data_w_lc[(ppp_data_w_lc['Loan Count'] == 2)]\n\n# select those loans our `maybe_second` loans that have a value of $2M\nmaybe_round2_2M = matched_two_loans[(matched_two_loans[\n                                    'CurrentApprovalAmount'] == 2000000.00) &\n                                    (matched_two_loans[\n                                    'Loan Round'] == 'maybe_second')]\nprint(\"Derived $2M second-round loans:\")\nprint(maybe_round2_2M.shape)\n\n# select those loans that we *know* are second round and have a value of $2M\npps_got_2M = pps_loans[pps_loans['CurrentApprovalAmount'] == 2000000.00]\nprint(\"Actual $2M second-round loans:\")\nprint(pps_got_2M.shape)\n```", "```py\nDerived $2M second-round loans:\n(1175, 53)\nActual $2M second-round loans:\n(1459, 52)\n```", "```py\n# `pandas` for data loading/transformations\nimport pandas as pd\n\n# `seaborn` for visualization\nimport seaborn as sns\n\n# `matplotlib` for detailed visualization support\nimport matplotlib.pyplot as plt\n\n# `numpy` for manipulating arrays/lists\nimport numpy as np\n\n# load our data\nppp_data = pd.read_csv('public_150k_plus_borrower_fingerprint_a.csv')\n\n# convert the `DateApproved` column to an actual datetime data type\nppp_data['DateApproved'] = pd.to_datetime(ppp_data['DateApproved'])\n\n# create a variable to hold the second-round start date\nsecond_round_start =  pd.to_datetime('2021-01-13')\n\n# treat today's date to use as the \"upper\" limit on possible second-round loans\ntodays_date = pd.to_datetime('today')\n\n# use 1/1/2020 as a \"lower\" limit, since it's before the PPP launched\nprogram_start = pd.to_datetime('2020-01-01')\n\n# pass our boundaries and category labels to the pandas `cut()` function\nloan_round = pd.cut(ppp_data.DateApproved,\n                    bins=[program_start,second_round_start, todays_date],\n                    labels=['first_round', 'maybe_second'])\n\n# insert the new column at the position we specify\nppp_data.insert(2,'Loan Round',loan_round)\n\n# this \"pivot table\" will return a Series showing the number\n# of times a particular 'BorrowerNameFingerprint' appears in the dataset\nloan_count = ppp_data.pivot_table(index=['BorrowerNameFingerprint'],\n                                  aggfunc='size')\n\n# convert our Series to a DataFrame and give it a name\nloan_count_df = loan_count.to_frame('Loan Count')\n\n# use the `describe()` method to print out summary statistics\nprint(\"Description of duplicate borrower table:\")\nprint(loan_count_df.describe())\n\n# start by sorting our DataFrame of loan counts from greatest to least\nsorted_loan_counts = loan_count_df.sort_values(by=['Loan Count'],\n                                               ascending=False)\n\n# create a new DataFrame with *only* those that have more than two loans\nmore_than_two = sorted_loan_counts[sorted_loan_counts['Loan Count'] > 2]\n\n# print one instance of each business name that appears in `more_than_two`\nprint(\"Businesses that seem to have gotten more than 2 loans:\")\nprint(more_than_two.shape)\n\nprint(\"Number of businesses that appear to have gotten precisely 2 loans:\")\nprecisely_two = sorted_loan_counts[sorted_loan_counts['Loan Count'] == 2]\nprint(precisely_two.shape)\n\n# use `ProcessingMethod` value to identify second-round loans\npps_loans = ppp_data[ppp_data['ProcessingMethod'] == 'PPS']\n\n# print out the `shape` of this DataFrame to see how many businesses we have\nprint(\"Number of loans labeled as second round:\")\nprint(pps_loans.shape)\n\n# how many loans in our derived data frame were approved for precisely $2M\n# during the (possibly) second-round timeframe?\n\n# merge our `loan_count_df` back to keep track of businesses\n# we labeled as having precisely two loans\nppp_data_w_lc = pd.merge(ppp_data, loan_count_df,\n                         on=['BorrowerNameFingerprint'], how='left')\n\n# now get *all* the records of business names we associated with two loans\nmatched_two_loans = ppp_data_w_lc[(ppp_data_w_lc['Loan Count'] == 2)]\n\n# select those loans our `maybe_second` loans that have a value of $2M\nmaybe_round2_2M = matched_two_loans[\n                    (matched_two_loans['CurrentApprovalAmount'] == 2000000.00) &\n                    (matched_two_loans['Loan Round'] == 'maybe_second')]\nprint(\"Derived $2M second-round loans:\")\nprint(maybe_round2_2M.shape)\n\n# select those loans that we *know* are second round and have a value of $2M\npps_got_2M = pps_loans[pps_loans['CurrentApprovalAmount'] == 2000000.00]\nprint(\"Actual $2M second-round loans:\")\nprint(pps_got_2M.shape)\n\n# isolate the fingerprints of businesses that got $2M second-round loans approved\nbiz_names = pd.unique(pps_got_2M['BorrowerNameFingerprint'])\n\n# convert that list to a DataFrame\nbiz_names_df = pd.DataFrame(biz_names, columns=['BorrowerNameFingerprint'])\n\n# create a new array of the same length as our biz_names_df and fill with\n# a flag value\nfill_column = np.full((len(biz_names),1), '2Mil2ndRnd')\nbiz_names_df['GotSecond'] = fill_column\n\n# now merge this new, two-column DataFrame back onto our full_data list,\n# so that we (hopefully) find their first-round loans as well\nsecond_round_max = pd.merge(ppp_data_w_lc, biz_names_df,\n                            on='BorrowerNameFingerprint')\n\n# now all the loans that share fingerprints with the ones that got the max\n# amount in the second round should have the flag value '2Mil2ndRnd' in the\n# 'GotSecond' column\nsecond_max_all_loans = second_round_max[\n                                second_round_max['GotSecond'] == '2Mil2ndRnd']\n\n# we expect this to be twice the number of businesses that received $2M\n# second-round loans\nprint('Total # of loans approved for most orgs that got $2M for second round:')\nprint(second_max_all_loans.shape)\n\n# how much money were these businesses approved to get from the PPP, total?\ntotal_funds = second_max_all_loans['CurrentApprovalAmount'].sum()\nprint(\"Total funds approved for identified orgs that could have \" + \\\n      \"second-round max:\")\nprint(total_funds)\n\n# plot our date-based `Loan Round`-labeled data next to records\n# separated by `ProcessingMethod`. Do we get the same results?\n\n# set the seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# use `matplotlib` `subplots()` to plot charts next to each other\n# use `tuples` to access the different subplots later\nfig, ((row1col1, row1col2)) = plt.subplots(nrows=1, ncols=2)\n\n# plot the histogram of our date-based analysis\ndate_based = sns.histplot(data=second_max_all_loans, x='CurrentApprovalAmount',\n                          hue='Loan Round', ax=row1col1)\n\n# plot the histogram of our data-based analysis\ndata_based = sns.histplot(data=second_max_all_loans, x='CurrentApprovalAmount',\n                          hue='ProcessingMethod', ax=row1col2)\n\n# show the plot!\nplt.show()\n```", "```py\nTotal # of loans approved for most orgs that got $2M for second round:\n(2634, 54)\nTotal funds approved for identified orgs that could have second-round max:\n6250357574.44\n```", "```py\n# `pandas` for data loading/transformations\nimport pandas as pd\n\n# `seaborn` for visualization\nimport seaborn as sns\n\n# `matplotlib` for customizing visuals\nimport matplotlib.pyplot as plt\n\n# `numpy` for manipulating arrays/lists\nimport numpy as np\n\n# load our data\nppp_data = pd.read_csv('public_150k_plus_borrower_fingerprint_a.csv')\n\n# first, sanity check our data\nprint(ppp_data[ppp_data['JobsReported'] <= 0]) ![1](assets/1.png)\n\n# drop the records with no value in `JobsReported`\nppp_data.drop(labels=[437083,765398], axis=0) ![1](assets/1.png)\n\n# calculate the dollars per job\ndollars_per_job = ppp_data['CurrentApprovalAmount']/ppp_data['JobsReported']\n\n# insert the new column into our original dataset\nppp_data.insert(3, 'Dollars per Job', dollars_per_job)\n\n# use `ProcessingMethod` value to identify second-round loans\npps_loans = ppp_data[ppp_data['ProcessingMethod'] == 'PPS']\n\n# select all second-round loans that have a value of $2M\npps_got_2M = pps_loans[pps_loans['CurrentApprovalAmount'] == 2000000.00]\nprint(\"Actual $2M second-round loans:\")\nprint(pps_got_2M.shape)\n\n# pull fingerprints of businesses approved for $2M second-round loans\nbiz_names = pd.unique(pps_got_2M['BorrowerNameFingerprint'])\n\n# convert that list to a DataFrame\nbiz_names_df = pd.DataFrame(biz_names, columns=['BorrowerNameFingerprint'])\n\n# create an array of the same length as `biz_names_df`; fill with flag value\nfill_column = np.full((len(biz_names),1), '2Mil2ndRnd')\nbiz_names_df['GotSecond'] = fill_column\n\n# now merge this new, two-column DataFrame back onto our full_data list\nsecond_round_max = pd.merge(ppp_data, biz_names_df, on='BorrowerNameFingerprint')\n\n# all loans whose fingerprints match those of businesses that got $2M\n# in the second round should have `2Mil2ndRnd` in the `GotSecond` column\nsecond_max_all_loans = second_round_max[\n                                second_round_max['GotSecond'] == '2Mil2ndRnd']\n\n# sbould be 2x the number of businesses approved for $2M second-round\nprint('Total # of loans approved for most orgs that got $2M for second round:')\nprint(second_max_all_loans.shape)\n\n# how much money were these businesses approved to get from the PPP, total?\ntotal_funds = second_max_all_loans['CurrentApprovalAmount'].sum()\nprint(\"Total funds approved for identified orgs that could have \" + \\\n      \"second-round max:\")\nprint(total_funds)\n\n# now, let's plot that new column on our selected dataset\n\n# set the seaborn theme\nsns.set_theme(style=\"whitegrid\")\n\n# the `matplotlib` `subplots()` to plot charts side by side\nfig, ((row1col1)) = plt.subplots(nrows=1, ncols=1)\n\n# plot the histogram of our date-based analysis\ndate_based = sns.histplot(data=second_max_all_loans, x='Dollars per Job',\n                          hue='ProcessingMethod', ax=row1col1)\n\n# show the plots!\nplt.show()\n```"]