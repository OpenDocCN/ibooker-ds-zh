["```py\nIn [1]: import pandas as pd\n        import numpy as np\n```", "```py\nIn [2]: index = [('California', 2010), ('California', 2020),\n                 ('New York', 2010), ('New York', 2020),\n                 ('Texas', 2010), ('Texas', 2020)]\n        populations = [37253956, 39538223,\n                       19378102, 20201249,\n                       25145561, 29145505]\n        pop = pd.Series(populations, index=index)\n        pop\nOut[2]: (California, 2010)    37253956\n        (California, 2020)    39538223\n        (New York, 2010)      19378102\n        (New York, 2020)      20201249\n        (Texas, 2010)         25145561\n        (Texas, 2020)         29145505\n        dtype: int64\n```", "```py\nIn [3]: pop[('California', 2020):('Texas', 2010)]\nOut[3]: (California, 2020)    39538223\n        (New York, 2010)      19378102\n        (New York, 2020)      20201249\n        (Texas, 2010)         25145561\n        dtype: int64\n```", "```py\nIn [4]: pop[[i for i in pop.index if i[1] == 2010]]\nOut[4]: (California, 2010)    37253956\n        (New York, 2010)      19378102\n        (Texas, 2010)         25145561\n        dtype: int64\n```", "```py\nIn [5]: index = pd.MultiIndex.from_tuples(index)\n```", "```py\nIn [6]: pop = pop.reindex(index)\n        pop\nOut[6]: California  2010    37253956\n                    2020    39538223\n        New York    2010    19378102\n                    2020    20201249\n        Texas       2010    25145561\n                    2020    29145505\n        dtype: int64\n```", "```py\nIn [7]: pop[:, 2020]\nOut[7]: California    39538223\n        New York      20201249\n        Texas         29145505\n        dtype: int64\n```", "```py\nIn [8]: pop_df = pop.unstack()\n        pop_df\nOut[8]:                 2010      2020\n        California  37253956  39538223\n        New York    19378102  20201249\n        Texas       25145561  29145505\n```", "```py\nIn [9]: pop_df.stack()\nOut[9]: California  2010    37253956\n                    2020    39538223\n        New York    2010    19378102\n                    2020    20201249\n        Texas       2010    25145561\n                    2020    29145505\n        dtype: int64\n```", "```py\nIn [10]: pop_df = pd.DataFrame({'total': pop,\n                                'under18': [9284094, 8898092,\n                                            4318033, 4181528,\n                                            6879014, 7432474]})\n         pop_df\nOut[10]:                     total  under18\n         California 2010  37253956  9284094\n                    2020  39538223  8898092\n         New York   2010  19378102  4318033\n                    2020  20201249  4181528\n         Texas      2010  25145561  6879014\n                    2020  29145505  7432474\n```", "```py\nIn [11]: f_u18 = pop_df['under18'] / pop_df['total']\n         f_u18.unstack()\nOut[11]:                 2010      2020\n         California  0.249211  0.225050\n         New York    0.222831  0.206994\n         Texas       0.273568  0.255013\n```", "```py\nIn [12]: df = pd.DataFrame(np.random.rand(4, 2),\n                           index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]],\n                           columns=['data1', 'data2'])\n         df\nOut[12]:         data1     data2\n         a 1  0.748464  0.561409\n           2  0.379199  0.622461\n         b 1  0.701679  0.687932\n           2  0.436200  0.950664\n```", "```py\nIn [13]: data = {('California', 2010): 37253956,\n                 ('California', 2020): 39538223,\n                 ('New York', 2010): 19378102,\n                 ('New York', 2020): 20201249,\n                 ('Texas', 2010): 25145561,\n                 ('Texas', 2020): 29145505}\n         pd.Series(data)\nOut[13]: California  2010    37253956\n                     2020    39538223\n         New York    2010    19378102\n                     2020    20201249\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [14]: pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'], [1, 2, 1, 2]])\nOut[14]: MultiIndex([('a', 1),\n                     ('a', 2),\n                     ('b', 1),\n                     ('b', 2)],\n                    )\n```", "```py\nIn [15]: pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)])\nOut[15]: MultiIndex([('a', 1),\n                     ('a', 2),\n                     ('b', 1),\n                     ('b', 2)],\n                    )\n```", "```py\nIn [16]: pd.MultiIndex.from_product([['a', 'b'], [1, 2]])\nOut[16]: MultiIndex([('a', 1),\n                     ('a', 2),\n                     ('b', 1),\n                     ('b', 2)],\n                    )\n```", "```py\nIn [17]: pd.MultiIndex(levels=[['a', 'b'], [1, 2]],\n                       codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\nOut[17]: MultiIndex([('a', 1),\n                     ('a', 2),\n                     ('b', 1),\n                     ('b', 2)],\n                    )\n```", "```py\nIn [18]: pop.index.names = ['state', 'year']\n         pop\nOut[18]: state       year\n         California  2010    37253956\n                     2020    39538223\n         New York    2010    19378102\n                     2020    20201249\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [19]: # hierarchical indices and columns\n         index = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],\n                                            names=['year', 'visit'])\n         columns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'],\n                                              ['HR', 'Temp']],\n                                              names=['subject', 'type'])\n\n         # mock some data\n         data = np.round(np.random.randn(4, 6), 1)\n         data[:, ::2] *= 10\n         data += 37\n\n         # create the DataFrame\n         health_data = pd.DataFrame(data, index=index, columns=columns)\n         health_data\nOut[19]: subject      Bob       Guido         Sue\n         type          HR  Temp    HR  Temp    HR  Temp\n         year visit\n         2013 1      30.0  38.0  56.0  38.3  45.0  35.8\n              2      47.0  37.1  27.0  36.0  37.0  36.4\n         2014 1      51.0  35.9  24.0  36.7  32.0  36.2\n              2      49.0  36.3  48.0  39.2  31.0  35.7\n```", "```py\nIn [20]: health_data['Guido']\nOut[20]: type          HR  Temp\n         year visit\n         2013 1      56.0  38.3\n              2      27.0  36.0\n         2014 1      24.0  36.7\n              2      48.0  39.2\n```", "```py\nIn [21]: pop\nOut[21]: state       year\n         California  2010    37253956\n                     2020    39538223\n         New York    2010    19378102\n                     2020    20201249\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [22]: pop['California', 2010]\nOut[22]: 37253956\n```", "```py\nIn [23]: pop['California']\nOut[23]: year\n         2010    37253956\n         2020    39538223\n         dtype: int64\n```", "```py\nIn [24]: poploc['california':'new york']\nOut[24]: state       year\n         california  2010    37253956\n                     2020    39538223\n         new york    2010    19378102\n                     2020    20201249\n         dtype: int64\n```", "```py\nIn [25]: pop[:, 2010]\nOut[25]: state\n         california    37253956\n         new york      19378102\n         texas         25145561\n         dtype: int64\n```", "```py\nIn [26]: pop[pop > 22000000]\nOut[26]: state       year\n         California  2010    37253956\n                     2020    39538223\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [27]: pop[['California', 'Texas']]\nOut[27]: state       year\n         California  2010    37253956\n                     2020    39538223\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [28]: health_data\nOut[28]: subject      Bob       Guido         Sue\n         type          HR  Temp    HR  Temp    HR  Temp\n         year visit\n         2013 1      30.0  38.0  56.0  38.3  45.0  35.8\n              2      47.0  37.1  27.0  36.0  37.0  36.4\n         2014 1      51.0  35.9  24.0  36.7  32.0  36.2\n              2      49.0  36.3  48.0  39.2  31.0  35.7\n```", "```py\nIn [29]: health_data['Guido', 'HR']\nOut[29]: year  visit\n         2013  1        56.0\n               2        27.0\n         2014  1        24.0\n               2        48.0\n         Name: (Guido, HR), dtype: float64\n```", "```py\nIn [30]: health_data.iloc[:2, :2]\nOut[30]: subject      Bob\n         type          HR  Temp\n         year visit\n         2013 1      30.0  38.0\n              2      47.0  37.1\n```", "```py\nIn [31]: health_data.loc[:, ('Bob', 'HR')]\nOut[31]: year  visit\n         2013  1        30.0\n               2        47.0\n         2014  1        51.0\n               2        49.0\n         Name: (Bob, HR), dtype: float64\n```", "```py\nIn [32]: health_data.loc[(:, 1), (:, 'HR')]\nSyntaxError: invalid syntax (3311942670.py, line 1)\n```", "```py\nIn [33]: idx = pd.IndexSlice\n         health_data.loc[idx[:, 1], idx[:, 'HR']]\nOut[33]: subject      Bob Guido   Sue\n         type          HR    HR    HR\n         year visit\n         2013 1      30.0  56.0  45.0\n         2014 1      51.0  24.0  32.0\n```", "```py\nIn [34]: index = pd.MultiIndex.from_product([['a', 'c', 'b'], [1, 2]])\n         data = pd.Series(np.random.rand(6), index=index)\n         data.index.names = ['char', 'int']\n         data\nOut[34]: char  int\n         a     1      0.280341\n               2      0.097290\n         c     1      0.206217\n               2      0.431771\n         b     1      0.100183\n               2      0.015851\n         dtype: float64\n```", "```py\nIn [35]: try:\n             data['a':'b']\n         except KeyError as e:\n             print(\"KeyError\", e)\nKeyError 'Key length (1) was greater than MultiIndex lexsort depth (0)'\n```", "```py\nIn [36]: data = data.sort_index()\n         data\nOut[36]: char  int\n         a     1      0.280341\n               2      0.097290\n         b     1      0.100183\n               2      0.015851\n         c     1      0.206217\n               2      0.431771\n         dtype: float64\n```", "```py\nIn [37]: data['a':'b']\nOut[37]: char  int\n         a     1      0.280341\n               2      0.097290\n         b     1      0.100183\n               2      0.015851\n         dtype: float64\n```", "```py\nIn [38]: pop.unstack(level=0)\nOut[38]: year            2010      2020\n         state\n         California  37253956  39538223\n         New York    19378102  20201249\n         Texas       25145561  29145505\n```", "```py\nIn [39]: pop.unstack(level=1)\nOut[39]: state       year\n         California  2010    37253956\n                     2020    39538223\n         New York    2010    19378102\n                     2020    20201249\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [40]: pop.unstack().stack()\nOut[40]: state       year\n         California  2010    37253956\n                     2020    39538223\n         New York    2010    19378102\n                     2020    20201249\n         Texas       2010    25145561\n                     2020    29145505\n         dtype: int64\n```", "```py\nIn [41]: pop_flat = pop.reset_index(name='population')\n         pop_flat\nOut[41]:         state  year  population\n         0  California  2010    37253956\n         1  California  2020    39538223\n         2    New York  2010    19378102\n         3    New York  2020    20201249\n         4       Texas  2010    25145561\n         5       Texas  2020    29145505\n```", "```py\nIn [42]: pop_flat.set_index(['state', 'year'])\nOut[42]:                  population\n         state      year\n         California 2010    37253956\n                    2020    39538223\n         New York   2010    19378102\n                    2020    20201249\n         Texas      2010    25145561\n                    2020    29145505\n```"]