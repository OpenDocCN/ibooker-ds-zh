["```py\nusers = [[0, \"Hero\", 0],\n         [1, \"Dunn\", 2],\n         [2, \"Sue\", 3],\n         [3, \"Chi\", 3]]\n```", "```py\nCREATE TABLE users (\n    user_id INT NOT NULL,\n    name VARCHAR(200),\n    num_friends INT);\n```", "```py\nINSERT INTO users (user_id, name, num_friends) VALUES (0, 'Hero', 0);\n```", "```py\nfrom typing import Tuple, Sequence, List, Any, Callable, Dict, Iterator\nfrom collections import defaultdict\n\n# A few type aliases we'll use later\nRow = Dict[str, Any]                        # A database row\nWhereClause = Callable[[Row], bool]         # Predicate for a single row\nHavingClause = Callable[[List[Row]], bool]  # Predicate over multiple rows\n```", "```py\nclass Table:\n    def __init__(self, columns: List[str], types: List[type]) -> None:\n        assert len(columns) == len(types), \"# of columns must == # of types\"\n\n        self.columns = columns         # Names of columns\n        self.types = types             # Data types of columns\n        self.rows: List[Row] = []      # (no data yet)\n```", "```py\n    def col2type(self, col: str) -> type:\n        idx = self.columns.index(col)      # Find the index of the column,\n        return self.types[idx]             # and return its type.\n```", "```py\n    def insert(self, values: list) -> None:\n        # Check for right # of values\n        if len(values) != len(self.types):\n            raise ValueError(f\"You need to provide {len(self.types)} values\")\n\n        # Check for right types of values\n        for value, typ3 in zip(values, self.types):\n            if not isinstance(value, typ3) and value is not None:\n                raise TypeError(f\"Expected type {typ3} but got {value}\")\n\n        # Add the corresponding dict as a \"row\"\n        self.rows.append(dict(zip(self.columns, values)))\n```", "```py\n    def __getitem__(self, idx: int) -> Row:\n        return self.rows[idx]\n\n    def __iter__(self) -> Iterator[Row]:\n        return iter(self.rows)\n\n    def __len__(self) -> int:\n        return len(self.rows)\n```", "```py\n    def __repr__(self):\n        \"\"\"Pretty representation of the table: columns then rows\"\"\"\n        rows = \"\\n\".join(str(row) for row in self.rows)\n\n        return f\"{self.columns}\\n{rows}\"\n```", "```py\n# Constructor requires column names and types\nusers = Table(['user_id', 'name', 'num_friends'], [int, str, int])\nusers.insert([0, \"Hero\", 0])\nusers.insert([1, \"Dunn\", 2])\nusers.insert([2, \"Sue\", 3])\nusers.insert([3, \"Chi\", 3])\nusers.insert([4, \"Thor\", 3])\nusers.insert([5, \"Clive\", 2])\nusers.insert([6, \"Hicks\", 3])\nusers.insert([7, \"Devin\", 2])\nusers.insert([8, \"Kate\", 2])\nusers.insert([9, \"Klein\", 3])\nusers.insert([10, \"Jen\", 1])\n```", "```py\n['user_id', 'name', 'num_friends']\n{'user_id': 0, 'name': 'Hero', 'num_friends': 0}\n{'user_id': 1, 'name': 'Dunn', 'num_friends': 2}\n{'user_id': 2, 'name': 'Sue', 'num_friends': 3}\n...\n```", "```py\nassert len(users) == 11\nassert users[1]['name'] == 'Dunn'\n```", "```py\nUPDATE users\nSET num_friends = 3\nWHERE user_id = 1;\n```", "```py\n    def update(self,\n               updates: Dict[str, Any],\n               predicate: WhereClause = lambda row: True):\n        # First make sure the updates have valid names and types\n        for column, new_value in updates.items():\n            if column not in self.columns:\n                raise ValueError(f\"invalid column: {column}\")\n\n            typ3 = self.col2type(column)\n            if not isinstance(new_value, typ3) and new_value is not None:\n                raise TypeError(f\"expected type {typ3}, but got {new_value}\")\n\n        # Now update\n        for row in self.rows:\n            if predicate(row):\n                for column, new_value in updates.items():\n                    row[column] = new_value\n```", "```py\nassert users[1]['num_friends'] == 2             # Original value\n\nusers.update({'num_friends' : 3},               # Set num_friends = 3\n             lambda row: row['user_id'] == 1)   # in rows where user_id == 1\n\nassert users[1]['num_friends'] == 3             # Updated value\n```", "```py\nDELETE FROM users;\n```", "```py\nDELETE FROM users WHERE user_id = 1;\n```", "```py\n    def delete(self, predicate: WhereClause = lambda row: True) -> None:\n        \"\"\"Delete all rows matching predicate\"\"\"\n        self.rows = [row for row in self.rows if not predicate(row)]\n```", "```py\n# We're not actually going to run these\nusers.delete(lambda row: row[\"user_id\"] == 1)  # Deletes rows with user_id == 1\nusers.delete()                                 # Deletes every row\n```", "```py\nSELECT * FROM users;                            -- get the entire contents\nSELECT * FROM users LIMIT 2;                    -- get the first two rows\nSELECT user_id FROM users;                      -- only get specific columns\nSELECT user_id FROM users WHERE name = 'Dunn';  -- only get specific rows\n```", "```py\nSELECT LENGTH(name) AS name_length FROM users;\n```", "```py\n    def select(self,\n               keep_columns: List[str] = None,\n               additional_columns: Dict[str, Callable] = None) -> 'Table':\n\n        if keep_columns is None:         # If no columns specified,\n            keep_columns = self.columns  # return all columns\n\n        if additional_columns is None:\n            additional_columns = {}\n\n        # New column names and types\n        new_columns = keep_columns + list(additional_columns.keys())\n        keep_types = [self.col2type(col) for col in keep_columns]\n\n        # This is how to get the return type from a type annotation.\n        # It will crash if `calculation` doesn't have a return type.\n        add_types = [calculation.__annotations__['return']\n                     for calculation in additional_columns.values()]\n\n        # Create a new table for results\n        new_table = Table(new_columns, keep_types + add_types)\n\n        for row in self.rows:\n            new_row = [row[column] for column in keep_columns]\n            for column_name, calculation in additional_columns.items():\n                new_row.append(calculation(row))\n            new_table.insert(new_row)\n\n        return new_table\n```", "```py\n    def where(self, predicate: WhereClause = lambda row: True) -> 'Table':\n        \"\"\"Return only the rows that satisfy the supplied predicate\"\"\"\n        where_table = Table(self.columns, self.types)\n        for row in self.rows:\n            if predicate(row):\n                values = [row[column] for column in self.columns]\n                where_table.insert(values)\n        return where_table\n\n    def limit(self, num_rows: int) -> 'Table':\n        \"\"\"Return only the first `num_rows` rows\"\"\"\n        limit_table = Table(self.columns, self.types)\n        for i, row in enumerate(self.rows):\n            if i >= num_rows:\n                break\n            values = [row[column] for column in self.columns]\n            limit_table.insert(values)\n        return limit_table\n```", "```py\n# SELECT * FROM users;\nall_users = users.select()\nassert len(all_users) == 11\n\n# SELECT * FROM users LIMIT 2;\ntwo_users = users.limit(2)\nassert len(two_users) == 2\n\n# SELECT user_id FROM users;\njust_ids = users.select(keep_columns=[\"user_id\"])\nassert just_ids.columns == ['user_id']\n\n# SELECT user_id FROM users WHERE name = 'Dunn';\ndunn_ids = (\n    users\n    .where(lambda row: row[\"name\"] == \"Dunn\")\n    .select(keep_columns=[\"user_id\"])\n)\nassert len(dunn_ids) == 1\nassert dunn_ids[0] == {\"user_id\": 1}\n\n# SELECT LENGTH(name) AS name_length FROM users;\ndef name_length(row) -> int: return len(row[\"name\"])\n\nname_lengths = users.select(keep_columns=[],\n                            additional_columns = {\"name_length\": name_length})\nassert name_lengths[0]['name_length'] == len(\"Hero\")\n```", "```py\nSELECT LENGTH(name) as name_length,\n MIN(user_id) AS min_user_id,\n COUNT(*) AS num_users\nFROM users\nGROUP BY LENGTH(name);\n```", "```py\nSELECT SUBSTR(name, 1, 1) AS first_letter,\n AVG(num_friends) AS avg_num_friends\nFROM users\nGROUP BY SUBSTR(name, 1, 1)\nHAVING AVG(num_friends) > 1;\n```", "```py\nSELECT SUM(user_id) as user_id_sum\nFROM users\nWHERE user_id > 1;\n```", "```py\n    def group_by(self,\n                 group_by_columns: List[str],\n                 aggregates: Dict[str, Callable],\n                 having: HavingClause = lambda group: True) -> 'Table':\n\n        grouped_rows = defaultdict(list)\n\n        # Populate groups\n        for row in self.rows:\n            key = tuple(row[column] for column in group_by_columns)\n            grouped_rows[key].append(row)\n\n        # Result table consists of group_by columns and aggregates\n        new_columns = group_by_columns + list(aggregates.keys())\n        group_by_types = [self.col2type(col) for col in group_by_columns]\n        aggregate_types = [agg.__annotations__['return']\n                           for agg in aggregates.values()]\n        result_table = Table(new_columns, group_by_types + aggregate_types)\n\n        for key, rows in grouped_rows.items():\n            if having(rows):\n                new_row = list(key)\n                for aggregate_name, aggregate_fn in aggregates.items():\n                    new_row.append(aggregate_fn(rows))\n                result_table.insert(new_row)\n\n        return result_table\n```", "```py\ndef min_user_id(rows) -> int:\n    return min(row[\"user_id\"] for row in rows)\n\ndef length(rows) -> int:\n    return len(rows)\n\nstats_by_length = (\n    users\n    .select(additional_columns={\"name_length\" : name_length})\n    .group_by(group_by_columns=[\"name_length\"],\n              aggregates={\"min_user_id\" : min_user_id,\n                          \"num_users\" : length})\n)\n```", "```py\ndef first_letter_of_name(row: Row) -> str:\n    return row[\"name\"][0] if row[\"name\"] else \"\"\n\ndef average_num_friends(rows: List[Row]) -> float:\n    return sum(row[\"num_friends\"] for row in rows) / len(rows)\n\ndef enough_friends(rows: List[Row]) -> bool:\n    return average_num_friends(rows) > 1\n\navg_friends_by_letter = (\n    users\n    .select(additional_columns={'first_letter' : first_letter_of_name})\n    .group_by(group_by_columns=['first_letter'],\n              aggregates={\"avg_num_friends\" : average_num_friends},\n              having=enough_friends)\n)\n```", "```py\ndef sum_user_ids(rows: List[Row]) -> int:\n    return sum(row[\"user_id\"] for row in rows)\n\nuser_id_sum = (\n    users\n    .where(lambda row: row[\"user_id\"] > 1)\n    .group_by(group_by_columns=[],\n              aggregates={ \"user_id_sum\" : sum_user_ids })\n)\n```", "```py\nSELECT * FROM users\nORDER BY name\nLIMIT 2;\n```", "```py\n    def order_by(self, order: Callable[[Row], Any]) -> 'Table':\n        new_table = self.select()       # make a copy\n        new_table.rows.sort(key=order)\n        return new_table\n```", "```py\nfriendliest_letters = (\n    avg_friends_by_letter\n    .order_by(lambda row: -row[\"avg_num_friends\"])\n    .limit(4)\n)\n```", "```py\nCREATE TABLE user_interests (\n    user_id INT NOT NULL,\n    interest VARCHAR(100) NOT NULL\n);\n```", "```py\nuser_interests = Table(['user_id', 'interest'], [int, str])\nuser_interests.insert([0, \"SQL\"])\nuser_interests.insert([0, \"NoSQL\"])\nuser_interests.insert([2, \"SQL\"])\nuser_interests.insert([2, \"MySQL\"])\n```", "```py\nSELECT users.name\nFROM users\nJOIN user_interests\nON users.user_id = user_interests.user_id\nWHERE user_interests.interest = 'SQL'\n```", "```py\nSELECT users.id, COUNT(user_interests.interest) AS num_interests\nFROM users\nLEFT JOIN user_interests\nON users.user_id = user_interests.user_id\n```", "```py\n    def join(self, other_table: 'Table', left_join: bool = False) -> 'Table':\n\n        join_on_columns = [c for c in self.columns           # columns in\n                           if c in other_table.columns]      # both tables\n\n        additional_columns = [c for c in other_table.columns # columns only\n                              if c not in join_on_columns]   # in right table\n\n        # all columns from left table + additional_columns from right table\n        new_columns = self.columns + additional_columns\n        new_types = self.types + [other_table.col2type(col)\n                                  for col in additional_columns]\n\n        join_table = Table(new_columns, new_types)\n\n        for row in self.rows:\n            def is_join(other_row):\n                return all(other_row[c] == row[c] for c in join_on_columns)\n\n            other_rows = other_table.where(is_join).rows\n\n            # Each other row that matches this one produces a result row.\n            for other_row in other_rows:\n                join_table.insert([row[c] for c in self.columns] +\n                                  [other_row[c] for c in additional_columns])\n\n            # If no rows match and it's a left join, output with Nones.\n            if left_join and not other_rows:\n                join_table.insert([row[c] for c in self.columns] +\n                                  [None for c in additional_columns])\n\n        return join_table\n```", "```py\nsql_users = (\n    users\n    .join(user_interests)\n    .where(lambda row: row[\"interest\"] == \"SQL\")\n    .select(keep_columns=[\"name\"])\n)\n```", "```py\ndef count_interests(rows: List[Row]) -> int:\n    \"\"\"counts how many rows have non-None interests\"\"\"\n    return len([row for row in rows if row[\"interest\"] is not None])\n\nuser_interest_counts = (\n    users\n    .join(user_interests, left_join=True)\n    .group_by(group_by_columns=[\"user_id\"],\n              aggregates={\"num_interests\" : count_interests })\n)\n```", "```py\nSELECT MIN(user_id) AS min_user_id FROM\n(SELECT user_id FROM user_interests WHERE interest = 'SQL') sql_interests;\n```", "```py\nlikes_sql_user_ids = (\n    user_interests\n    .where(lambda row: row[\"interest\"] == \"SQL\")\n    .select(keep_columns=['user_id'])\n)\n\nlikes_sql_user_ids.group_by(group_by_columns=[],\n                            aggregates={ \"min_user_id\" : min_user_id })\n```", "```py\nSELECT users.name\nFROM users\nJOIN user_interests\nON users.user_id = user_interests.user_id\nWHERE user_interests.interest = 'SQL'\n```", "```py\n(\n    user_interests\n    .where(lambda row: row[\"interest\"] == \"SQL\")\n    .join(users)\n    .select([\"name\"])\n)\n```", "```py\n(\n    user_interests\n    .join(users)\n    .where(lambda row: row[\"interest\"] == \"SQL\")\n    .select([\"name\"])\n)\n```"]