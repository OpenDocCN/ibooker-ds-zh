["```py\n$ cp solution1_for.py prot.py\n$ ./prot.py -h\nusage: prot.py [-h] RNA\n\nTranslate RNA to proteins\n\npositional arguments:\n  RNA         RNA sequence\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ ./prot.py AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA\nMAMAPRTEINSTRING\n```", "```py\n$ new.py -fp 'Translate RNA to proteins' prot.py\nDone, see new script \"prot.py\".\n```", "```py\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    rna: str ![1](assets/1.png)\n\ndef get_args() -> Args:\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Translate RNA to proteins',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('rna', type=str, metavar='RNA', help='RNA sequence') ![2](assets/2.png)\n\n    args = parser.parse_args()\n\n    return Args(args.rna)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(args.rna)\n```", "```py\n$ ./prot.py AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA\nAUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA\n```", "```py\n>>> rna = 'AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'\n```", "```py\n>>> rna[0:3]\n'AUG'\n```", "```py\n>>> rna[3:6]\n'GCC'\n```", "```py\n>>> list(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\n>>> list(range(5, 10))\n[5, 6, 7, 8, 9]\n```", "```py\n>>> list(range(0, len(rna), 3))\n[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48]\n```", "```py\n>>> [(n, n + 3) for n in range(0, len(rna), 3)][:5]\n[(0, 3), (3, 6), (6, 9), (9, 12), (12, 15)]\n```", "```py\n>>> [rna[n:n + 3] for n in range(0, len(rna), 3)][:5]\n['AUG', 'GCC', 'AUG', 'GCG', 'CCC']\n```", "```py\n>>> len(rna) - k + 1\n49\n```", "```py\n>>> len([rna[n:n + 3] for n in range(0, len(rna), 3)])\n17\n```", "```py\nUUU F      CUU L      AUU I      GUU V\nUUC F      CUC L      AUC I      GUC V\nUUA L      CUA L      AUA I      GUA V\nUUG L      CUG L      AUG M      GUG V\nUCU S      CCU P      ACU T      GCU A\nUCC S      CCC P      ACC T      GCC A\nUCA S      CCA P      ACA T      GCA A\nUCG S      CCG P      ACG T      GCG A\nUAU Y      CAU H      AAU N      GAU D\nUAC Y      CAC H      AAC N      GAC D\nUAA Stop   CAA Q      AAA K      GAA E\nUAG Stop   CAG Q      AAG K      GAG E\nUGU C      CGU R      AGU S      GGU G\nUGC C      CGC R      AGC S      GGC G\nUGA Stop   CGA R      AGA R      GGA G\nUGG W      CGG R      AGG R      GGG G\n```", "```py\n>>> rna = 'AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'\n>>> aa = []\n>>> for codon in [rna[n:n + 3] for n in range(0, len(rna), 3)]:\n...     aa.append(codon_to_aa[codon])\n...\n>>> aa\n['M', 'A', 'M', 'A', 'P', 'R', 'T', 'E', 'I', 'N', 'S', 'T', 'R', 'I',\n 'N', 'G', '*']\n```", "```py\ndef main() -> None:\n    args = get_args()\n    rna = args.rna.upper() ![1](assets/1.png)\n    codon_to_aa = { ![2](assets/2.png)\n        'AAA': 'K', 'AAC': 'N', 'AAG': 'K', 'AAU': 'N', 'ACA': 'T',\n        'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AGA': 'R', 'AGC': 'S',\n        'AGG': 'R', 'AGU': 'S', 'AUA': 'I', 'AUC': 'I', 'AUG': 'M',\n        'AUU': 'I', 'CAA': 'Q', 'CAC': 'H', 'CAG': 'Q', 'CAU': 'H',\n        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CGA': 'R',\n        'CGC': 'R', 'CGG': 'R', 'CGU': 'R', 'CUA': 'L', 'CUC': 'L',\n        'CUG': 'L', 'CUU': 'L', 'GAA': 'E', 'GAC': 'D', 'GAG': 'E',\n        'GAU': 'D', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',\n        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'GUA': 'V',\n        'GUC': 'V', 'GUG': 'V', 'GUU': 'V', 'UAC': 'Y', 'UAU': 'Y',\n        'UCA': 'S', 'UCC': 'S', 'UCG': 'S', 'UCU': 'S', 'UGC': 'C',\n        'UGG': 'W', 'UGU': 'C', 'UUA': 'L', 'UUC': 'F', 'UUG': 'L',\n        'UUU': 'F', 'UAA': '*', 'UAG': '*', 'UGA': '*',\n    }\n\n    k = 3 ![3](assets/3.png)\n    protein = '' ![4](assets/4.png)\n    for codon in [rna[i:i + k] for i in range(0, len(rna), k)]: ![5](assets/5.png)\n        aa = codon_to_aa.get(codon, '-') ![6](assets/6.png)\n        if aa == '*': ![7](assets/7.png)\n            break ![8](assets/8.png)\n        protein += aa ![9](assets/9.png)\n\n    print(protein) ![10](assets/10.png)\n```", "```py\ndef codons(seq: str) -> List[str]: ![1](assets/1.png)\n    \"\"\" Extract codons from a sequence \"\"\"\n\n    return [] ![2](assets/2.png)\n```", "```py\ndef test_codons() -> None:\n    \"\"\" Test codons \"\"\"\n\n    assert codons('') == []\n    assert codons('A') == ['A']\n    assert codons('ABC') == ['ABC']\n    assert codons('ABCDE') == ['ABC', 'DE']\n    assert codons('ABCDEF') == ['ABC', 'DEF']\n```", "```py\ndef codons(seq: str) -> List[str]:\n    \"\"\" Extract codons from a sequence \"\"\"\n\n    k = 3\n    ret = []\n    for codon in [seq[i:i + k] for i in range(0, len(seq), k)]:\n        ret.append(codon)\n\n    return ret\n```", "```py\ndef codons(seq: str) -> List[str]:\n    \"\"\" Extract codons from a sequence \"\"\"\n\n    k = 3\n    return [seq[i:i + k] for i in range(0, len(seq), k)]\n```", "```py\ndef main() -> None:\n    args = get_args()\n    rna = args.rna.upper()\n    codon_to_aa = {\n        'AAA': 'K', 'AAC': 'N', 'AAG': 'K', 'AAU': 'N', 'ACA': 'T',\n        'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AGA': 'R', 'AGC': 'S',\n        'AGG': 'R', 'AGU': 'S', 'AUA': 'I', 'AUC': 'I', 'AUG': 'M',\n        'AUU': 'I', 'CAA': 'Q', 'CAC': 'H', 'CAG': 'Q', 'CAU': 'H',\n        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CGA': 'R',\n        'CGC': 'R', 'CGG': 'R', 'CGU': 'R', 'CUA': 'L', 'CUC': 'L',\n        'CUG': 'L', 'CUU': 'L', 'GAA': 'E', 'GAC': 'D', 'GAG': 'E',\n        'GAU': 'D', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',\n        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'GUA': 'V',\n        'GUC': 'V', 'GUG': 'V', 'GUU': 'V', 'UAC': 'Y', 'UAU': 'Y',\n        'UCA': 'S', 'UCC': 'S', 'UCG': 'S', 'UCU': 'S', 'UGC': 'C',\n        'UGG': 'W', 'UGU': 'C', 'UUA': 'L', 'UUC': 'F', 'UUG': 'L',\n        'UUU': 'F', 'UAA': '*', 'UAG': '*', 'UGA': '*',\n    }\n\n    protein = ''\n    for codon in codons(rna): ![1](assets/1.png)\n        aa = codon_to_aa.get(codon, '-')\n        if aa == '*':\n            break\n        protein += aa\n\n    print(protein)\n```", "```py\n>>> from prot import codons\n```", "```py\n>>> codons('AAACCCGGGTTT')\n['AAA', 'CCC', 'GGG', 'TTT']\n```", "```py\n>>> import prot\n>>> prot.codons('AAACCCGGGTTT')\n['AAA', 'CCC', 'GGG', 'TTT']\n```", "```py\nif __name__ == '__main__': ![1](assets/1.png)\n    main() ![2](assets/2.png)\n```", "```py\ndef test_translate() -> None:\n    \"\"\" Test translate \"\"\"\n\n    assert translate('') == '' ![1](assets/1.png)\n    assert translate('AUG') == 'M' ![2](assets/2.png)\n    assert translate('AUGCCGUAAUCU') == 'MP' ![3](assets/3.png)\n    assert translate('AUGGCCAUGGCGCCCAGAACUGAGAU' ![4](assets/4.png)\n                     'CAAUAGUACCCGUAUUAACGGGUGA') == 'MAMAPRTEINSTRING' ![5](assets/5.png)\n```", "```py\ndef translate(rna: str) -> str:\n    \"\"\" Translate codon sequence \"\"\"\n\n    codon_to_aa = {\n        'AAA': 'K', 'AAC': 'N', 'AAG': 'K', 'AAU': 'N', 'ACA': 'T',\n        'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AGA': 'R', 'AGC': 'S',\n        'AGG': 'R', 'AGU': 'S', 'AUA': 'I', 'AUC': 'I', 'AUG': 'M',\n        'AUU': 'I', 'CAA': 'Q', 'CAC': 'H', 'CAG': 'Q', 'CAU': 'H',\n        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CGA': 'R',\n        'CGC': 'R', 'CGG': 'R', 'CGU': 'R', 'CUA': 'L', 'CUC': 'L',\n        'CUG': 'L', 'CUU': 'L', 'GAA': 'E', 'GAC': 'D', 'GAG': 'E',\n        'GAU': 'D', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',\n        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'GUA': 'V',\n        'GUC': 'V', 'GUG': 'V', 'GUU': 'V', 'UAC': 'Y', 'UAU': 'Y',\n        'UCA': 'S', 'UCC': 'S', 'UCG': 'S', 'UCU': 'S', 'UGC': 'C',\n        'UGG': 'W', 'UGU': 'C', 'UUA': 'L', 'UUC': 'F', 'UUG': 'L',\n        'UUU': 'F', 'UAA': '*', 'UAG': '*', 'UGA': '*',\n    }\n\n    aa = [codon_to_aa.get(codon, '-') for codon in codons(rna)] ![1](assets/1.png)\n    if '*' in aa: ![2](assets/2.png)\n        aa = aa[:aa.index('*')] ![3](assets/3.png)\n\n    return ''.join(aa) ![4](assets/4.png)\n```", "```py\n>>> rna = 'AUGCCGUAAUCU'\n```", "```py\n>>> from solution3_list_comp_slice import codons, translate\n>>> codons(rna)\n['AUG', 'CCG', 'UAA', 'UCU']\n```", "```py\n>>> codon_to_aa = {\n...     'AAA': 'K', 'AAC': 'N', 'AAG': 'K', 'AAU': 'N', 'ACA': 'T',\n...     'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AGA': 'R', 'AGC': 'S',\n...     'AGG': 'R', 'AGU': 'S', 'AUA': 'I', 'AUC': 'I', 'AUG': 'M',\n...     'AUU': 'I', 'CAA': 'Q', 'CAC': 'H', 'CAG': 'Q', 'CAU': 'H',\n...     'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CGA': 'R',\n...     'CGC': 'R', 'CGG': 'R', 'CGU': 'R', 'CUA': 'L', 'CUC': 'L',\n...     'CUG': 'L', 'CUU': 'L', 'GAA': 'E', 'GAC': 'D', 'GAG': 'E',\n...     'GAU': 'D', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',\n...     'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'GUA': 'V',\n...     'GUC': 'V', 'GUG': 'V', 'GUU': 'V', 'UAC': 'Y', 'UAU': 'Y',\n...     'UCA': 'S', 'UCC': 'S', 'UCG': 'S', 'UCU': 'S', 'UGC': 'C',\n...     'UGG': 'W', 'UGU': 'C', 'UUA': 'L', 'UUC': 'F', 'UUG': 'L',\n...     'UUU': 'F', 'UAA': '*', 'UAG': '*', 'UGA': '*',\n... }\n>>> aa = [codon_to_aa.get(c, '-') for c in codons(rna)]\n>>> aa\n['M', 'P', '*', 'S']\n```", "```py\n>>> '*' in aa\nTrue\n```", "```py\n>>> aa.index('*')\n2\n```", "```py\n>>> aa = aa[:aa.index('*')]\n>>> aa\n['M', 'P']\n```", "```py\n>>> ''.join(aa)\n'MP'\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(translate(args.rna.upper()))\n```", "```py\n>>> aa = list(map(lambda codon: codon_to_aa.get(codon, '-'), codons(rna)))\n>>> aa\n['M', 'P', '*', 'S']\n```", "```py\n>>> from itertools import takewhile\n```", "```py\n>>> list(takewhile(lambda residue: residue != '*', aa))\n['M', 'P']\n```", "```py\n>>> from functools import partial\n>>> import operator\n>>> not_stop = partial(operator.ne, '*')\n```", "```py\n>>> not_stop('F')\nTrue\n>>> not_stop('*')\nFalse\n```", "```py\n>>> list(takewhile(not_stop, aa))\n['M', 'P']\n```", "```py\ndef translate(rna: str) -> str:\n    \"\"\" Translate codon sequence \"\"\"\n\n    codon_to_aa = {\n        'AAA': 'K', 'AAC': 'N', 'AAG': 'K', 'AAU': 'N', 'ACA': 'T',\n        'ACC': 'T', 'ACG': 'T', 'ACU': 'T', 'AGA': 'R', 'AGC': 'S',\n        'AGG': 'R', 'AGU': 'S', 'AUA': 'I', 'AUC': 'I', 'AUG': 'M',\n        'AUU': 'I', 'CAA': 'Q', 'CAC': 'H', 'CAG': 'Q', 'CAU': 'H',\n        'CCA': 'P', 'CCC': 'P', 'CCG': 'P', 'CCU': 'P', 'CGA': 'R',\n        'CGC': 'R', 'CGG': 'R', 'CGU': 'R', 'CUA': 'L', 'CUC': 'L',\n        'CUG': 'L', 'CUU': 'L', 'GAA': 'E', 'GAC': 'D', 'GAG': 'E',\n        'GAU': 'D', 'GCA': 'A', 'GCC': 'A', 'GCG': 'A', 'GCU': 'A',\n        'GGA': 'G', 'GGC': 'G', 'GGG': 'G', 'GGU': 'G', 'GUA': 'V',\n        'GUC': 'V', 'GUG': 'V', 'GUU': 'V', 'UAC': 'Y', 'UAU': 'Y',\n        'UCA': 'S', 'UCC': 'S', 'UCG': 'S', 'UCU': 'S', 'UGC': 'C',\n        'UGG': 'W', 'UGU': 'C', 'UUA': 'L', 'UUC': 'F', 'UUG': 'L',\n        'UUU': 'F', 'UAA': '*', 'UAG': '*', 'UGA': '*',\n    }\n\n    aa = map(lambda codon: codon_to_aa.get(codon, '-'), codons(rna))\n    return ''.join(takewhile(partial(operator.ne, '*'), aa))\n```", "```py\n>>> from Bio import Seq\n```", "```py\n>>> rna = 'AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA'\n>>> Seq.translate(rna)\n'MAMAPRTEINSTRING*'\n```", "```py\n>>> Seq.translate('AUGCCGUAAUCU')\n'MP*S'\n```", "```py\n>>> Seq.translate('AUGCCGUAAUCU', to_stop=True)\n'MP'\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(Seq.translate(args.rna, to_stop=True))\n```"]