- en: Chapter 1\. In the Beginning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。初生牛犊不怕虎
- en: Rick J. Scavetta
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 里克·J·斯卡维塔
- en: Boyan Angelov
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 博扬·安吉洛夫
- en: We would like to begin with a great first sentence, like “It was the best of
    times, it was the worst of times…” but honestly, it’s just the best of times — Data
    Science is flourishing! As it continues to mature, it has begun to splinter into
    niche topics, as many disciplines do over time. This maturity is the result of
    a long journey that began in the early days of scientific computing. It’s our
    belief that knowing some of Python & R’s origin stories will help you to appreciate
    how they differ in today’s environment, and thus, how to get the most out of them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望以一句伟大的开场白开始，比如“这是最好的时代，也是最坏的时代……”，但老实说，这只是最好的时代 —— 数据科学正在蓬勃发展！随着它继续成熟，它已经开始分裂成各自的专业领域，就像许多学科随着时间的推移一样。这种成熟是科学计算早期就开始的漫长旅程的结果。我们相信，了解一些Python和R的起源故事将帮助您更好地理解它们在当今环境中的区别，从而更好地利用它们。
- en: We’re not going to pretend to be science historians, that niche group of academics
    who trace the circumstances of great discoveries and personalities. What we can
    do is offer a highlight reel of where Python and R come from and how that lead
    us to our current situation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会假装成为科学历史学家，那些追溯伟大发现和人物背后情况的学术人员。我们能做的是为您提供Python和R的起源及其如何引导我们走向当前局面的精彩摘要。
- en: The origins of R
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R语言的起源
- en: 'Whenever I think about R, I’m reminded of FUBU, a street wear company founded
    back in the 90s. The name is an acronym that I immediately fell in love with:
    *For Us, By Us*. FUBU meant community, it meant understanding the needs and desires
    of your people and making sure you served them well. *R is FUBU*.^([1](ch01.xhtml#idm45127463267640))
    By the end of this chapter, I’m sure you’ll feel the same way. Once we acknowledge
    that R is FUBU, it starts to make a lot more sense.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我想到R，我就会想起FUBU，这是一家成立在90年代的街头服装公司。这个名字是一个缩写词，我立即爱上了它：“For Us, By Us”。FUBU意味着社区，意味着理解你的人民的需求和欲望，并确保你为他们提供了良好的服务。*R就是FUBU*。^([1](ch01.xhtml#idm45127463267640))
    在本章结束时，我确信你会有同样的感觉。一旦我们承认R就是FUBU，它开始变得更有意义了。
- en: We can trace the origins of R right back to the now legendary Bell Laboratories
    in New Jersey. In 1976, development of the statistical programming language S
    was being spearheaded by John Chambers. A year later Chambers published *Computational
    methods for data analysis* and his colleague John Tukey, also at Bell Laboratories,
    published *Exploratory Data Analysis*. In 1983, Chambers published *Graphical
    methods for data analysis*. These books provided the framework to develop a computational
    system that would not only allow a statistician to explore, understand and analyze
    their data, but also to communicate their results. We’re talking about an all-star
    FUBU line-up here! Coauthors of Chambers included both Tukey’s cousin Paul A.
    Tukey and William Cleveland. Cleveland’s empirical experiments on perception,
    summarized in two insightful books, continue to inform the broader field of data
    visualization to this day. Among their many contributions to scientific computing
    and statistics, Tukey developed novel visualizations, like the oft mis-understood
    box & whiskers plot and Cleveland developed the LOESS method for non-parametric
    smoothing.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以追溯R语言的起源到如今传奇般的新泽西贝尔实验室。1976年，统计编程语言S的开发由约翰·钱伯斯领导。一年后，钱伯斯出版了《数据分析的计算方法》，他的同事约翰·图基（也在贝尔实验室）出版了《探索性数据分析》。1983年，钱伯斯出版了《数据分析的图形方法》。这些书籍为开发计算系统提供了框架，不仅允许统计学家探索、理解和分析数据，还能够传达他们的结果。我们在谈论一个由FUBU明星阵容组成的全明星阵容！钱伯斯的合著者包括图基的表亲保罗·A·图基和威廉·克利夫兰。克利夫兰的感知经验实验总结在两本富有洞见的书籍中，至今对数据可视化领域有所启发。在科学计算和统计学的诸多贡献中，图基开发了新颖的可视化方法，如常常被误解的箱线图和克利夫兰为非参数平滑开发了LOESS方法。
- en: We begin with S since it laid the foundations for what would eventually become
    R. The nuggets of information in the previous paragraph tell us quite a bit about
    S’s — and R’s — foundations. First, statisticians are very literal people (*S*,
    get it?). This is pretty a helpful trait. Second, statisticians wanted a FUBU
    programming language specializing in data analysis. They weren’t interested in
    making a generalist programming language or an operating system. Third, these
    early books on computational statistics and visualization are, simply put, stunning
    examples of pedagogical beauty and precise exposition^([2](ch01.xhtml#idm45127463262088)).
    They have aged surprisingly well, despite the obviously dated technology. I’d
    argue that these books planted the seed for how statisticians, and the R community
    in particular, approached technical communication in an open, clear and inclusive
    manner. This, I believe, is an outstanding and distinctive hallmark of the R community
    that has deep roots. Fourth, the early emphasis on *graphical methods* tells us
    that S was already concerned with flexible and efficient *data visualizations*,
    necessary for both understanding data and communicating results. So S was about
    getting the most important things done as easily as possible, and in a true FUBU
    way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从S开始，因为它奠定了最终成为R的基础。前一段的信息告诉我们很多关于S和R的基础知识。首先，统计学家是非常直白的人（*S*，你懂的吧？）。这是一个非常有用的特征。其次，统计学家需要一种专门用于数据分析的FUBU编程语言。他们对制作通用编程语言或操作系统不感兴趣。第三，这些早期关于计算统计学和可视化的书籍简直就是教学美的杰作和精确表达的例子^([2](ch01.xhtml#idm45127463262088))。尽管技术明显过时，但它们的质量仍然出色。我认为这些书籍为统计学家，尤其是R社区，以开放、清晰和包容的方式进行技术交流种下了种子。我相信，这是R社区的一大特点，具有深厚的根基。第四，早期对*图形方法*的强调告诉我们，S已经关注灵活和高效的*数据可视化*，这对于理解数据和传达结果都是必要的。因此，S是关于尽可能轻松地完成最重要的事情，并以真正的FUBU方式进行。
- en: The original distribution of S ran on Unix and was available for free. Eventually,
    S became licensed under an implementation titled S-PLUS. This prompted another
    open-source and free implementation of S by Ross Ihaka and Robert Gentleman at
    the University of Auckland in 1991\. They called this implementation R, for the
    initials of their first names, as a play on the name S, and in keeping with the
    tradition of naming programming languages using a single letter. The first official
    stable beta release of R `v1.0.0` was available on 29 February 2000\. In the intervening
    years two important developments occurred. First, [CRAN](https://cran.r-project.org/),
    the Comprehensive R Archive Network, was established to host and archive R packages
    on mirrored servers. Second, the R Core Team was also established. This group
    of volunteers (which currently consists of [20 members](https://www.r-project.org/contributors.html))
    implement base R, including documentation, builds, tests and releases, plus the
    infrastructure that makes it all possible. Notably, some of the original members
    are still involved, including John Chambers, Ross Ihaka and Robert Gentleman.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的S发行版在Unix上运行，并且是免费提供的。最终，S成为了S-PLUS的实现，并获得了许可。这促使奥克兰大学的Ross Ihaka和Robert
    Gentleman于1991年发布了另一个开源免费的S实现。他们将这个实现命名为R，以他们的名字首字母命名，这是对S名称的戏仿，并且符合使用单个字母命名编程语言的传统。R的第一个官方稳定beta版本`v1.0.0`于2000年2月29日发布。在此期间，发生了两个重要的发展。首先，建立了CRAN（[综合R档案网络](https://cran.r-project.org/)），用于在镜像服务器上托管和归档R软件包。其次，还成立了R核心团队。这个由志愿者组成的团队（目前包括[20名成员](https://www.r-project.org/contributors.html)）实现了基本的R功能，包括文档、构建、测试和发布，以及支持这一切的基础设施。值得注意的是，一些最初的成员仍然参与其中，包括John
    Chambers、Ross Ihaka和Robert Gentleman。
- en: A lot has happened since R `v1.0.0` in 2000, but the story so far should already
    give you an idea of R’s unique background as a FUBU statistical computing tool.
    Before we continue with R’s story, let’s take a look at Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自2000年R `v1.0.0`以来发生了很多事情，但迄今为止的故事应该已经让你对R作为FUBU统计计算工具的独特背景有了初步了解。在我们继续R的故事之前，让我们先来看看Python。
- en: The origins of Python
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的起源
- en: In 1991, as Ross Ihaka and Robert Gentleman began working on what would become
    R, Guido van Rossum, a Dutch programmer, released Python. Python’s core vision
    is really that of one person who set out to address common computing problems
    at the time. Indeed, van Rossum was lovingly referred to as the benevolent dictator
    for life (BDFL) for years, a title he gave up when he stepped down from Python’s
    Steering Council in 2018.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 1991 年，随着 Ross Ihaka 和 Robert Gentleman 开始着手开发将成为 R 的项目，荷兰程序员 Guido van Rossum
    发布了 Python。Python 的核心愿景实际上是一个人旨在解决当时常见计算问题的愿景。事实上，van Rossum 多年来被亲切地称为终身仁慈独裁者（BDFL），他在
    2018 年退出 Python 领导委员会时放弃了这一头衔。
- en: We saw how S arose out of the need for statisticians to perform data analysis,
    and how R arose from the need for an open-source implementation, so what problem
    was addressed by Python? Well, it wasn’t data analysis — that came much later.
    When Python came on the scene, C and C++, two low-level programming languages,
    were popular. Python slowly emerged as an interpreted, high-level alternative,
    in particular after Python `v2` was released in 2000 (the same year R `v1.0.0`
    was released). Python was written with the explicit purpose to be first-and-foremost
    an easy-to-use and learn, widely-adopted programming language with simple syntax.
    And it has succeeded in this role very well!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 S 是从统计学家进行数据分析的需求中产生的，R 是从开源实现的需求中产生的，那么 Python 解决了什么问题？嗯，并不是数据分析 —— 这一点要晚得多。当
    Python 出现时，C 和 C++，两种低级编程语言，非常流行。Python 慢慢成为一种解释型、高级别的替代方案，特别是在 2000 年发布 Python
    `v2`（与 R `v1.0.0` 同年发布）之后。Python 的明确目标是成为一种易于使用和学习的广泛采用的编程语言，具有简单的语法。在这个角色中，它取得了非常好的成功！
- en: This is why you’ll notice that, in contrast to R, Python is everywhere and is
    incredibly versatile. You’ll see it in web development, gaming, system administration,
    desktop applications, data science, and so on. To be sure, R is capable of much
    more than data analysis, but remember, R is FUBU. If R is FUBU, Python is a Swiss
    army knife. It’s everywhere and everyone has one, but even though it has many
    tools, most people just use a single tool on a regular basis. Although data scientists
    using Python work in a large and varied landscape, they tend to find their niche
    and specialize in the packages and workflows required for their work instead of
    exploiting all facets of this generalist language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，与 R 相比，Python 无处不在并且非常多才多艺。你会在网站开发、游戏、系统管理、桌面应用程序、数据科学等领域看到它的身影。当然，R 能做的远不止数据分析，但请记住，R
    是 FUBU。如果 R 是 FUBU，Python 则是瑞士军刀。它无处不在，每个人都有一把，但即使它有很多工具，大多数人也只是定期使用单一工具。虽然使用
    Python 的数据科学家工作在一个广阔而多样的景观中，他们倾向于找到自己的利基，并专注于他们工作所需的软件包和工作流程，而不是利用这个通用语言的所有方面。
- en: Python’s wide-spread popularity within Data Science is not entirely due to its
    data science capabilities. I would posit that Python entered data science by partly
    riding on the back of existing uses as a general purpose language. After all,
    getting your foot in the door is half-way inside. Analysts and data scientists
    would have had an easier time sharing and implementing scripts with colleagues
    involved in system administration and web development because they already knew
    how to work with Python scripts. This played an important role in Python’s wide-spread
    adoption. Python was well-suited to take advantage of high-performance computing
    and efficiently implement deep learning algorithms. R was, and perhaps still is,
    a niche and somewhat foreign language that the wider computing world didn’t really
    get.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在数据科学领域的广泛流行并非完全因为其数据科学能力。我认为 Python 部分是通过作为通用编程语言的现有用途进入数据科学的。毕竟，探入门槛是成功的一半。分析师和数据科学家在与系统管理和网站开发相关的同事共享和实施脚本时会更容易，因为他们已经知道如何使用
    Python 脚本。这在 Python 的广泛采纳中起到了重要作用。Python 很适合利用高性能计算，并有效地实现深度学习算法。R 曾经是，并且可能仍然是，一门较为小众和有些陌生的语言，广泛的计算世界并不真正了解它。
- en: Although Python `v2` was released in 2000, a widely-adopted package for handling
    array data didn’t take root until 2005, with the release of `NumPy`. At this time,
    `SciPy`, a package that, since 2001, provided fundamental algorithms for data
    science (think optimization, integration, differential equations, etc.), began
    relying on `NumPy` data structures. `SciPy` also provides specialized data structures
    such as *k*-dimensional trees.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python `v2` 于 2000 年发布，但直到 2005 年，处理数组数据的广泛采用的包才开始萌芽，即`NumPy`的发布。此时，`SciPy`，自
    2001 年以来提供数据科学基础算法（如优化、积分、微分方程等），开始依赖于`NumPy`的数据结构。`SciPy`还提供了特殊的数据结构，如*k*维树。
- en: Once the issue of a standard package for core data structures and algorithms
    was settled, Python began it’s ascent into wide-spread use in scientific computing.
    The low-level `NumPy` and `SciPy` packages laid the foundation for high-level
    packages like `pandas` in 2009, providing tools for data manipulation and data
    structures like `DataFrames`. This is sometimes termed the pyData stack and it’s
    when the ball really got rolling.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦核心数据结构和算法的标准包问题解决了，Python 开始在科学计算中广泛应用。低级别的`NumPy`和`SciPy`包为高级包如`pandas`（2009
    年）打下了基础，提供了数据操作和数据结构（如`DataFrames`）的工具。有时称为 pyData 栈，从此 Python 开始飞速发展。
- en: The language war begins
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言战争开始
- en: The early 2000s set the stage for what some would later refer to as the *language
    wars*. As the pyData stack started to take shape, milestones in both Python and
    R began to heat things up. Four stand out in particular.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的 2000 年为后来被称为“语言之战”的舞台铺平了道路。随着 pyData 栈的形成，Python 和 R 的里程碑开始加热竞争。特别突出的四个事件。
- en: First, in 2002, [`BioConductor`](https://www.bioconductor.org/) was established
    as a new R package repository and framework for handling the burgeoning (read
    absolute explosion of) biological data in its myriad forms. Until this point,
    Bioinformaticians relied on tools like MatLab and Perl (along with classic command
    line tools and some manual web-interface tools). MatLab is still favoured in specific
    disciplines, like Neuroscience. However, Perl has been mostly be superseded by
    `BioConductor`. `BioConductor`’s impact on bioinformatics is hard to overstate.
    Not only did it provide a repository of packages for dealing with remote genetic
    sequence databases, expression data, microarrays, and so on, but it also provided
    new data structures to handle genetic sequences. `BioConductor` continues to expand
    and is deeply embedded within the bioinformatics community.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，2002 年，[`BioConductor`](https://www.bioconductor.org/)成立为一个新的 R 包仓库和框架，用于处理不断增长的各种生物数据。在此之前，生物信息学家依赖于诸如
    MatLab 和 Perl（以及经典的命令行工具和一些手动 Web 接口工具）。MatLab 在特定学科如神经科学中仍然受到青睐。然而，Perl 已经大多被`BioConductor`取代。`BioConductor`对生物信息学的影响难以估量。它不仅提供了处理远程基因序列数据库、表达数据、微阵列等的包仓库，还提供了新的数据结构来处理遗传序列。`BioConductor`持续扩展并深深植根于生物信息学社区。
- en: Second, in 2006 the `IPython` package was released. This was a ground-breaking
    way to work on Python in an interactive notebook environment. Following various
    grants beginning in 2012, `IPython` eventually matured into the [*Jupyter Project*](https://jupyter.org/)
    in 2014, which now encompasses the JupyterLab IDE. Users often forget that Jupyter
    is short for “Julia, Python and R” because it’s very Python-centric. Notebooks
    have become a dominant way of doing data science in Python and in 2018 Google
    released [Google Colab](https://colab.research.google.com/), a free online notebook
    tool. We’ll dig into this in [Chapter 3](ch03.xhtml#ch04).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，2006 年发布了`IPython`包。这是一种在交互式笔记本环境中工作的突破性方式。从 2012 年开始的各种资助后，`IPython` 最终在
    2014 年成熟为[*Jupyter 项目*](https://jupyter.org/)，现在包括 JupyterLab IDE。用户经常忘记 Jupyter
    是“Julia、Python 和 R”的缩写，因为它非常以 Python 为中心。笔记本已经成为 Python 中进行数据科学的主要方式，在 2018 年，Google
    发布了[Google Colab](https://colab.research.google.com/)，一个免费的在线笔记本工具。我们将在[第 3 章](ch03.xhtml#ch04)中详细探讨这个工具。
- en: Third, in 2007, Hadley Wickham published his PhD thesis, which consisted of
    two R packages which would fundamentally change the R landscape. The first, `reshape`,
    laid the foundations for what would later become formalized as the [*Tidyverse*](https://www.tidyverse.org/)
    (more on this later). Although `reshape` has long since been retired, it was the
    first glimpse into understanding how data structure influences how we think about
    and work with our data. The second, `ggplot2`, is an implementation of the seminal
    book by Leland Wilkinson, “The Grammar of Graphics”, and provided intuitive, high-level
    plotting, that greatly simplified previously existing tools in R (more on this
    in [Chapter 5](ch05.xhtml#ch06)).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，2007 年，Hadley Wickham 发表了他的博士论文，其中包括两个会从根本上改变 R 景观的 R 包。第一个叫做`reshape`，为后来形成的[*Tidyverse*](https://www.tidyverse.org/)奠定了基础（稍后会详细讨论）。虽然`reshape`早已退役，但它是我们理解数据结构如何影响我们如何思考和处理数据的第一个窥视。第二个`ggplot2`则是
    Leland Wilkinson 的里程碑之作《图形语法》，提供了直观、高级别的绘图，极大简化了 R 中现有的工具（关于这点详见[第五章](ch05.xhtml#ch06)）。
- en: Finally, Python v3 was released in 2008\. For years the question persisted as
    to which version of Python to use, `v2` or `v3`. That’s because Python `v3` is
    backward-incompatible. Luckily, this has been resolved for you since Python `v2`
    was retired in 2020\. Surprisingly, you can still buy a new Mac Book Pro after
    that date with Python 2 pre-installed, since legacy scripts still rely on it.
    So Python 2 lives on still.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python v3 在 2008 年发布。多年来，关于使用 Python 的哪个版本，`v2` 还是 `v3` 的问题一直存在。这是因为 Python
    `v3` 是不兼容的。幸运的是，自从 2020 年 Python `v2` 被弃用后，这个问题已经为你解决了。令人惊讶的是，尽管如此，2020 年后你仍然可以购买到预装有
    Python 2 的新款 MacBook Pro，因为一些遗留脚本仍然依赖于它。所以 Python 2 仍然存在。
- en: The battle for data science dominance
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学主导地位之争
- en: By this point both Python and R had capable tools for a wide variety of data
    science applications. As the so-called “language wars” continued, other key developments
    saw each language find its niche.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到此时，Python 和 R 都已经有了广泛应用于各种数据科学应用的强大工具。随着所谓的“语言战争”持续进行，其他关键发展使每种语言找到了自己的领域。
- en: Both Python and R were wrapped up in specific *builds*. For Python this was
    the Anaconda distribution which is still in popular use (see [Chapter 3](ch03.xhtml#ch04)).
    For R, Revolution Analytics, a data science software developer, produced *Revolution
    R Open*. Although their R build was never widely adopted by the community, the
    company was acquired by Microsoft, signalling strong corporate support of the
    R language.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 和 R 都包含在特定的*构建*中。对于 Python，这是 Anaconda 发行版，目前仍然广泛使用（详见[第三章](ch03.xhtml#ch04)）。对于
    R，则是 Revolution Analytics 公司推出的*Revolution R Open*。尽管他们的 R 构建从未被社区广泛接受，但该公司被微软收购，显示了对
    R 语言的强大企业支持。
- en: In 2011, the Python community foresaw the boom in machine learning with the
    release of the `scikit-learn` package. In 2016, this was followed by the release
    of both `tensorflow` and `keras` for deep learning, also with a healthy dose of
    corporate support. This also highlights Python’s strength as a high-level interpreter
    sitting on top of high-performance platforms. For example, you’ll find AWS lambda
    for massive highly-concurrent programming, `Numba` for high-performance computing,
    and the aforementioned [TensorFlow](https://www.tensorflow.org/) for highly optimized
    C++. With its wide-spread adoption outside of data science, it’s no surprise that
    Python gained a reputation for deploying models in a way that R could not.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 2011 年，Python 社区预见到机器学习的繁荣，推出了`scikit-learn`包。2016 年，随着`tensorflow`和`keras`用于深度学习的发布，同时得到了健康的企业支持。这也突显了
    Python 作为一个高级解释器坐在高性能平台上的优势。例如，你会发现 AWS lambda 用于大规模高并发编程，`Numba` 用于高性能计算，以及前面提到的[TensorFlow](https://www.tensorflow.org/)用于高度优化的
    C++。除了数据科学之外，Python 在部署模型方面的声誉超越了 R，这一点也不足为奇。
- en: 2011 also saw the release of [RStudio](https://rstudio.com/) IDE by the eponymous
    company and over the next few years the R community began to converge on this
    tool. At this point, to use R is, in many regards, to use RStudio. The influence
    RStudio has on promoting R as a programming language suitable for a wide variety
    of data-centric uses is also important to note.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2011 年还见证了[RStudio](https://rstudio.com/) IDE 的发布，由同名公司推出，未来几年内，R 社区开始集中在这个工具上。在很多方面，使用
    R 就意味着使用 RStudio。RStudio 在推广 R 作为适用于各种数据中心用途的编程语言方面的影响也很重要。
- en: While all of this was happening, a growing segment of the R community began
    to move towards a suite of packages, many of which were authored or spearheaded
    by Hadley Wickham, that begin to reframe and simplify typical data workflows.
    Much of what these packages did was to standardize R function syntax, as well
    as input and output data storage structures. Eventually the suite of packages
    began to be referred to colloquially as the “Hadleyverse”. In a keynote speech
    at the UseR! 2016 conference at Stanford University, Wickham did away with this,
    igniting digital flames to burn up his name and coining the term “Tidyverse”.
    Since joining RStudio the company has been actively developing and promoting the
    Tidyverse ecosystem which has arguable become the dominant dialect in R. We’ll
    explore this in more depth in [Chapter 2](ch02.xhtml#ch03).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有这些都在发生的同时，R社区的一个不断增长的部分开始转向一套包，其中许多包由Hadley Wickham编写或领导，这些包开始重新构思和简化典型的数据工作流程。这些包的大部分工作是标准化R函数语法以及输入和输出数据存储结构。最终，这套包开始被非正式地称为“Hadleyverse”。在斯坦福大学UseR!
    2016年会议的主题演讲中，Wickham放弃了这一说法，点燃了数字火焰以消除他的名字，并创造了“Tidyverse”这一术语。自加入RStudio以来，该公司一直在积极开发和推广Tidyverse生态系统，这显然已成为R中占主导地位的方言。我们将在[第2章](ch02.xhtml#ch03)中更深入地探讨这一点。
- en: We can imagine that R contains at least 2 “paradigms”, or “dialects”. They can
    be mixed, but each has its own distinct flavor. Base R^([3](ch01.xhtml#idm45127463214056))
    is what most R has been and, probably, still is. `Tidyverse` re-imagines base
    R in a broad all-encompassing universe of packages and functions that play well
    together, often relying on *piping* and has a preference for data frames. I would
    argue that `BioConductor` provides yet another dialect, which is focused on a
    specific discipline, bioinformatics. You’ll no doubt find that some large packages
    may contain enough idiosyncrasies that you may consider them a dialect in their
    own right, but let’s not go down that rabbit hole. R is now at the threshold where
    some users know (or are taught) only the `Tidyverse` way of doing things. The
    distinction between base and Tidyverse R may seem trivial, but I have seen many
    new R learners struggle to make sense of why the Tidyverse exists. This is partly
    because years of base R code is still in active use and can’t be ignored. Although
    Tidyverse advocates argue that these packages make life much easier for the beginner,
    competing dialects can cause unnecessary confusion.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以想象R至少包含2种“范式”或“方言”。它们可以混合使用，但每种都有自己独特的风格。基础R^([3](ch01.xhtml#idm45127463214056))是大多数R所采用的，并且可能仍然是如此。`Tidyverse`重新构想了基础R，在一个广泛的包和函数组成的宇宙中发挥作用，这些包和函数能很好地协同工作，通常依赖于*管道*并且偏爱数据框。我认为`BioConductor`提供了另一种方言，专注于特定学科，即生物信息学。你毫无疑问会发现一些大型包可能包含足够多的特殊性，以至于你可能认为它们是自成一体的方言，但我们不要深究这个问题。R现在正处于阈值，一些用户只了解（或被教导）`Tidyverse`的做事方式。基础R和Tidyverse
    R之间的区别似乎微不足道，但我见过许多新的R学习者努力理解为什么Tidyverse存在。部分原因是多年来基础R代码仍在积极使用且不可忽视。尽管Tidyverse的支持者认为这些包让初学者的生活更加轻松，但竞争的方言可能造成不必要的困惑。
- en: We can also imagine that Python contains distinct dialects. The *vanilla* installation
    of Python is the bare-bones installation, and operates differently to an environment
    that has imported the pyData stack. For the most part data scientists operate
    within the pyData stack, so there’s less confusion between dialects.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以想象Python包含不同的方言。Python的“原生”安装是最基本的安装，与导入pyData堆栈的环境运行方式不同。大多数数据科学家在pyData堆栈中操作，因此方言之间的混淆较少。
- en: A convergence on cooperation and community-building
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于合作和社区建设的融合
- en: For a time, it seemed that the prevailing attitude in the language wars was
    an *Us versus Them* mentality. A look of disdain glancing at a person’s computer
    screen. It seemed like either Python or R would eventually disappear from the
    data science landscape. Hello monoculture! Some data scientists are still rooting
    for this, but we’re guessing you’re not one of them. And there was also a time
    when it seemed like Python and R were trying to mimic each other, just porting
    workflows so that language didn’t matter. Luckily those endeavors have not come
    to fruition. Both Python and R have unique strengths; trying to imitate each other
    seems to miss that point.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有一段时间，语言之争中主导的态度似乎是“我们对他们”。看着别人电脑屏幕的不屑表情。Python 或 R 似乎最终会在数据科学领域中消失。你好，单一文化！一些数据科学家仍然支持这一点，但我们猜想你不是他们中的一员。也有一段时间，Python
    和 R 试图彼此模仿，只是将工作流迁移，使语言不再重要。幸运的是，这些努力并未成功。Python 和 R 都有独特的优势；试图互相模仿似乎忽略了这一点。
- en: Today many data scientists in the Python and R communities recognize that both
    languages are outstanding, useful and complementary. To return to a key point
    in the preface, the data science community has converged onto a point of cooperation
    and community-building — to the benefit of everyone involved.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多 Python 和 R 社区的数据科学家认识到这两种语言都非常优秀、有用且互补。回到前言中的一个关键点，数据科学社区已经达成了合作和社区建设的共识，这对每个人都有益处。
- en: We’re ready for a new community of bilingual data scientists. The challenge
    is that many users of one language don’t quite know *how* they are complementary
    or *when* to use which language. There have been a few solutions over the years,
    but we’ll get into that in [Part IV](part04.xhtml#p04).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备迎接一个新的双语数据科学家社区。挑战在于，许多使用一种语言的用户不太清楚它们如何互补，以及何时使用哪种语言。多年来已经出现了一些解决方案，但我们将在[第四部分](part04.xhtml#p04)详细探讨这一点。
- en: Final thoughts
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结思考
- en: At this point you should have a good idea of where we are in 2021 and how we
    got here. In the next part we’ll introduce each group of users to a new language.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对我们在2021年的位置及其背后的原因有了一个很好的了解。在下一部分中，我们将向每组用户介绍一种新的语言。
- en: 'One last note: Python users refer to themselves as Pythonistias, which is a
    really cool name! There’s no real equivalent in R, and they also don’t get a really
    cool animal, but that’s life when you’re a single letter language. R users are
    typically called… wait for it … useRs! (exclamation optional) Indeed, the official,
    annual conference is called useR! (exclamation obligatory) and the publisher Springer
    has an ongoing and very excellent series of books of the same name. We’ll use
    these names for now own.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点说明：Python 用户称自己为 Pythonistas，这是一个非常酷的名字！R 没有真正的对应，他们也没有得到一个非常酷的动物，但这就是单字母语言的生活。R
    用户通常被称为……等等……用R用户！（叹号可选）事实上，官方的年度会议称为useR！（叹号是必须的），出版商 Springer 也有一系列名为同名的持续更新的很出色的书籍。我们将使用这些名称。
- en: '[Figure 1-1](#PyRTimeline) provides a summary of some of the major events that
    we’ve highlighted in this chapter, plus some other milestones of interest.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](#PyRTimeline) 概述了本章我们重点介绍的一些重要事件，以及其他一些值得关注的里程碑。'
- en: '![](Images/prds_0101.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/prds_0101.png)'
- en: Figure 1-1\. A timeline of Python and R data science milestones.
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. Python 和 R 数据科学里程碑的时间线。
- en: ^([1](ch01.xhtml#idm45127463267640-marker)) Well, OK, more like *For Statisticians,
    By Statisticians*, but FSBS doesn’t have the same ring to it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm45127463267640-marker)) 好吧，更像是*统计学家们的统计学家*，但是“FSBS”听起来没有那么响亮。
- en: ^([2](ch01.xhtml#idm45127463262088-marker)) With the possible exception of *Computational
    methods for data analysis* which I admit to having not read.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#idm45127463262088-marker)) 或许除了*用于数据分析的计算方法*，我承认我没有阅读过。
- en: ^([3](ch01.xhtml#idm45127463214056-marker)) Python users might not be familiar
    with the term “base”. This means only the built-in functionality of the language
    without any additional package installations. Base R itself is well-equipped for
    data analysis. In Python, a data scientist would import the PyData stack by default.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.xhtml#idm45127463214056-marker)) Python 用户可能不熟悉术语“基础”。这指的是语言的内置功能，没有任何额外的包安装。Python
    本身在数据分析方面已经非常强大。数据科学家在 Python 中默认会导入 PyData 栈。
