["```py\n{\n  \"text\": \"#Python and #JavaScript sitting in a tree...\", ![1](assets/1.png)\n  \"id\": 2103303030333004303, ![1](assets/1.png)\n  \"favorited\": true, ![2](assets/2.png)\n  \"filter_level\":\"medium\", ![3](assets/3.png)\n  \"created_at\": \"Wed Mar 23 14:07:43 +0000 2015\", ![4](assets/4.png)\n  \"retweet_count\":23, ![5](assets/5.png)\n  \"coordinates\":[-97.5, 45.3] ![6](assets/6.png)\n  ...\n}\n```", "```py\nimport pandas as pd\n\ndf = pd.read_json('data/nobel_winners.json')\n```", "```py\nIn [0]: df.columns\nOut[0]: Index(['born_in', 'category', ... ], dtype='object')\n```", "```py\nIn [1]: df.index\nOut[1]: RangeIndex(start=0, stop=1052, step=1)\n```", "```py\nIn [2] df = df.set_index('name') ![1](assets/1.png)\nIn [3] df.loc['Albert Einstein'] ![2](assets/2.png)\nOut[3]:\n                born_in category      country date_of_birth date_of_death  \\ name\nAlbert Einstein          Physics  Switzerland    1879-03-14    1955-04-18\nAlbert Einstein          Physics      Germany    1879-03-14    1955-04-18\n[...]\n\ndf = df.reset_index() ![3](assets/3.png)\n```", "```py\nIn [4] df.iloc[2]\nOut[4]:\nname                                              Vladimir Prelog *\nborn_in                                      Bosnia and Herzegovina\ncategory                                                  Chemistry\ncountry\ndate_of_birth                                         July 23, 1906\n...\nyear                                                           1975\nName: 2, dtype: object\n```", "```py\nIn [9] gender_col = df.gender # or df['gender']\nIn [10] type(gender_col)\nOut[10] pandas.core.series.Series\nIn [11] gender_col.head() # grab the Series' first five items\nOut[11]:\n0    male #index, object\n1    male\n2    male\n3    None\n4    male\nName: gender, dtype: object\n```", "```py\ncat_groups = df.groupby('category')\ncat_groups\n#Out[-] <pandas.core.groupby.generic.DataFrameGroupBy object ...>\n\ncat_groups.groups.keys()\n#Out[-]: dict_keys(['', 'Chemistry', 'Economics', 'Literature',\\\n#                  'Peace', 'Physics', 'Physiology or Medicine'])\n ...\n\nIn [14] phy_group = cat_groups.get_group('Physics')\nIn [15] phy_group.head()\nOut[15]:\n                 name born_in category  country    date_of_birth  \\\n13   François Englert          Physics  Belgium  6 November 1932\n19         Niels Bohr          Physics  Denmark   7 October 1885\n23  Ben Roy Mottelson          Physics  Denmark     July 9, 1926\n24          Aage Bohr          Physics  Denmark     19 June 1922\n47     Alfred Kastler          Physics   France       3 May 1902\n...\n```", "```py\nIn [16] df.category == 'Physics'\nOut[16]:\n0     False\n1     False\n...\n1047   True\n...\n```", "```py\nIn [17]: df[df.category == 'Physics']\nOut[17]:\n                          name    born_in category    country  \\\n13            François Englert             Physics    Belgium\n19                  Niels Bohr             Physics    Denmark\n23           Ben Roy Mottelson             Physics    Denmark\n24                   Aage Bohr             Physics    Denmark\n...\n1047          Brian P. Schmidt             Physics  Australia   ...\n```", "```py\ndf = pd.DataFrame({\n     'name': ['Albert Einstein', 'Marie Curie',\\\n     'William Faulkner'],\n     'category': ['Physics', 'Chemistry', 'Literature']\n     })\n```", "```py\ndf = pd.DataFrame.from_dict([ ![1](assets/1.png)\n     {'name': 'Albert Einstein', 'category':'Physics'},\n     {'name': 'Marie Curie', 'category':'Chemistry'},\n     {'name': 'William Faulkner', 'category':'Literature'}\n    ])\n```", "```py\ndf.head()\nOut:\n               name    category\n0   Albert Einstein     Physics\n1       Marie Curie   Chemistry\n2  William Faulkner  Literature\n```", "```py\ndf = pd.read_json('file.json')\n```", "```py\n[{\"name\":\"Albert Einstein\", \"category\":\"Physics\", ...},\n{\"name\":\"Marie Curie\", \"category\":\"Chemistry\", ... } ... ]\n```", "```py\n{\"name\":{\"0\":\"Albert Einstein\",\"1\":\"Marie Curie\" ... },\n\"category\":{\"1\",\"Physics\",\"2\":\"Chemistry\" ... }}\n```", "```py\ndf = pd.read_json('data.json')\n# ... Perform data-cleaning operations\njson = df.to_json('data_cleaned.json', orient='records') ![1](assets/1.png)\nOut:\n[{\"name\":\"Albert Einstein\", \"category\":\"Physics\", ...},\n{\"name\":\"Marie Curie\", \"category\":\"Chemistry\", ... } ... ]\n```", "```py\n# data.csv:\n# name,category\n# \"Albert Einstein\",Physics\n# \"Marie Curie\",Chemistry\n\ndf = pd.read_csv('data.csv')\ndf\nOut:\n              name   category\n0  Albert Einstein    Physics\n1      Marie Curie  Chemistry\n```", "```py\nfrom io import StringIO\n\ndata = \" `Albert Einstein`| Physics \\n`Marie Curie`|  Chemistry\"\n\ndf = pd.read_csv(StringIO(data),\n   sep='|', ![1](assets/1.png)\n   names=['name', 'category'], ![2](assets/2.png)\n   skipinitialspace=True, quotechar=\"`\")\n\ndf\nOut:\n              name   category\n0  Albert Einstein   Physics\n1      Marie Curie  Chemistry\n```", "```py\ndf.to_csv('data.csv', encoding='utf-8')\n```", "```py\n$ pip install openpyxl\n```", "```py\ndfs = {}\nxls = pd.ExcelFile('data/nobel_winners.xlsx') # load Excel file\ndfs['WinnersSheet1'] = xls.parse('WinnersSheet1', na_values=['NA']) ![1](assets/1.png)\ndfs['WinnersSheet2'] = xls.parse('WinnersSheet2',\n    index_col=1, ![2](assets/2.png)\n    na_values=['-'], ![3](assets/3.png)\n    skiprows=3 ![4](assets/4.png)\n    )\n```", "```py\ndfs = pd.read_excel('data/nobel_winners.xlsx', ['WinnersSheet1','WinnersSheet2'],\n                      index_col=None, na_values=['NA'])\n```", "```py\nIn: dfs['WinnersSheet2'].head()\nOut:\n     category             nationality  year                name    gender\n0       Peace                American  1906  Theodore Roosevelt      male\n1  Literature           South African  1991     Nadine Gordimer    female\n2   Chemistry  Bosnia and Herzegovina  1975     Vladamir Prelog      male\n```", "```py\n# return the first datasheet\ndf = pd.read_excel('nobel_winners.xls')\n\n# return a named sheet\ndf = pd.read_excel('nobel_winners.xls', 'WinnersSheet3')\n\n# first sheet and sheet named 'WinnersSheet3'\ndf = pd.read_excel('nobel_winners.xls', [0, 'WinnersSheet3'])\n\n# all sheets loaded into a name-keyed dictionary\ndfs = pd.read_excel('nobel_winners.xls', sheetname=None)\n```", "```py\n# parse up to the fifth column\npd.read_excel('nobel_winners.xls', 'WinnersSheet1', parse_cols=4)\n\n# parse the second and fourth columns\npd.read_excel('nobel_winners.xls', 'WinnersSheet1', parse_cols=[1, 3])\n```", "```py\ndf.to_excel('nobel_winners.xlsx', sheet_name='WinnersSheet1')\n```", "```py\nwith pd.ExcelWriter('nobel_winners.xlsx') as writer:\n    df1.to_excel(writer, sheet_name='WinnersSheet1')\n    df2.to_excel(writer, sheet_name='WinnersSheet2')\n```", "```py\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine(\n                'sqlite:///data/nobel_winners.db') ![1](assets/1.png)\ndf = pd.read_sql('winners', engine) ![2](assets/2.png)\ndf\nOut:\n     index                category    country date_of_birth\n0     4                   Peace    Belgium    1829-07-26\n...\n                      name                          place_of_birth\n0    Auguste Beernaert  Ostend ,  Netherlands  (now  Belgium )\n...\n```", "```py\n# save DataFrame df to nobel_winners SQL table\ndf.to_sql('winners_copy', engine, if_exists='replace')\n```", "```py\n# write 500 rows at a time\ndf.to_sql('winners_copy', engine, chunksize=500)\n```", "```py\nfrom sqlalchemy.types import String\ndf.to_sql('winners_copy', engine, dtype={'year': String}) ![1](assets/1.png)\n```", "```py\nimport pandas as pd\nfrom pymongo import MongoClient\n\nclient = MongoClient() ![1](assets/1.png)\n\ndb = client.nobel_prize ![2](assets/2.png)\ncursor = db.winners.find() ![3](assets/3.png)\ndf = pd.DataFrame(list(cursor)) ![4](assets/4.png)\ndf ![5](assets/5.png)\n# _\n```", "```py\ndb = get_mongo_database('nobel_prize')\n\nrecords = df.to_dict('records') ![1](assets/1.png)\ndb[collection].insert_many(records) ![2](assets/2.png)\n```", "```py\ndef mongo_to_dataframe(db_name, collection, query={},\\\n                       host='localhost', port=27017,\\\n                       username=None, password=None,\\\n                        no_id=True):\n    \"\"\" create a DataFrame from mongodb collection \"\"\"\n\n    db = get_mongo_database(db_name, host, port, username,\\\n     password)\n    cursor = db[collection].find(query)\n    df =  pd.DataFrame(list(cursor))\n\n    if no_id: ![1](assets/1.png)\n        del df['_id']\n\n    return df\n\ndef dataframe_to_mongo(df, db_name, collection,\\\n                       host='localhost', port=27017,\\\n                       username=None, password=None):\n    \"\"\" save a DataFrame to mongodb collection \"\"\"\n    db = get_mongo_database(db_name, host, port, username,\\\n     password)\n\n    records = df.to_dict('records')\n    db[collection].insert_many(records)\n```", "```py\ndb = get_mongo_database('nobel_prize')\nlist(db.winners.find()) ![1](assets/1.png)\n[{'_id': ObjectId('62fcf2fb0e7fe50ac4393912'),\n  'id': 1,\n  'category': 'Physics',\n  'name': 'Albert Einstein',\n  'nationality': 'Swiss',\n  'year': 1921,\n  'gender': 'male'},\n {'_id': ObjectId('62fcf2fb0e7fe50ac4393913'),\n  'id': 2,\n  'category': 'Physics',\n  'name': 'Paul Dirac',\n  'nationality': 'British',\n  'year': 1933,\n  'gender': 'male'},\n {'_id': ObjectId('62fcf2fb0e7fe50ac4393914'),\n  'id': 3,\n  'category': 'Chemistry',\n  'name': 'Marie Curie',\n  'nationality': 'Polish',\n  'year': 1911,\n  'gender': 'female'}]\n```", "```py\ns = pd.Series([1, 2, 3, 4]) # Series(np.arange(4))\nOut:\n0    1 # index, value\n1    2\n2    3\n3    4\ndtype: int64\n```", "```py\ns = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\ns\nOut:\na    1\nb    2\nc    3\nd    4\ndtype: int64\n```", "```py\ns = pd.Series({'a':1, 'b':2, 'c':3})\nOut:\na    1\nb    2\nc    3\ndtype: int64\n```", "```py\ns = pd.Series({'a':1, 'b':2}, index=['a', 'b', 'c'])\nOut:\na    1.0\nb    2.0\nc    NaN\ndtype: float64\n\ns = pd.Series({'a':1, 'b':2, 'c':3}, index=['a', 'b'])\nOut:\na 1\nb 2\ndtype: int64\n```", "```py\npd.Series(9, {'a', 'b', 'c'})\nOut:\na    9\nb    9\nc    9\ndtype: int64\n```", "```py\ns = pd.Series([1, 2, 3, 4], ['a', 'b', 'c', 'd'])\nnp.sqrt(s)\nOut:\na    1.000000\nb    1.414214\nc    1.732051\nd    2.000000\ndtype: float64\n```", "```py\ns[1:3]\nOut:\nb  2\nc  3\ndtype: int64\n```", "```py\npd.Series([1, 2.1, 'foo']) + pd.Series([2, 3, 'bar'])\nOut:\n0         3 # 1 + 2\n1       5.1 # 2.1 + 3\n2    foobar # strings correctly concatenated\ndtype: object\n```", "```py\nnames = pd.Series(['Albert Einstein', 'Marie Curie'],\\\n name='name') ![1](assets/1.png)\ncategories = pd.Series(['Physics', 'Chemistry'],\\\n name='category')\n\ndf = pd.concat([names, categories], axis=1) ![2](assets/2.png)\n\ndf.head()\nOut:\n               name    category\n0   Albert Einstein     Physics\n1       Marie Curie   Chemistry\n```"]