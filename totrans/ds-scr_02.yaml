- en: Chapter 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Data! Data! Data!” he cried impatiently. “I can’t make bricks without clay.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Arthur Conan Doyle
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Ascendance of Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We live in a world that’s drowning in data. Websites track every user’s every
    click. Your smartphone is building up a record of your location and speed every
    second of every day. “Quantified selfers” wear pedometers-on-steroids that are
    always recording their heart rates, movement habits, diet, and sleep patterns.
    Smart cars collect driving habits, smart homes collect living habits, and smart
    marketers collect purchasing habits. The internet itself represents a huge graph
    of knowledge that contains (among other things) an enormous cross-referenced encyclopedia;
    domain-specific databases about movies, music, sports results, pinball machines,
    memes, and cocktails; and too many government statistics (some of them nearly
    true!) from too many governments to wrap your head around.
  prefs: []
  type: TYPE_NORMAL
- en: Buried in these data are answers to countless questions that no one’s ever thought
    to ask. In this book, we’ll learn how to find them.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Data Science?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There’s a joke that says a data scientist is someone who knows more statistics
    than a computer scientist and more computer science than a statistician. (I didn’t
    say it was a good joke.) In fact, some data scientists are—for all practical purposes—statisticians,
    while others are fairly indistinguishable from software engineers. Some are machine
    learning experts, while others couldn’t machine-learn their way out of kindergarten.
    Some are PhDs with impressive publication records, while others have never read
    an academic paper (shame on them, though). In short, pretty much no matter how
    you define data science, you’ll find practitioners for whom the definition is
    totally, absolutely wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, we won’t let that stop us from trying. We’ll say that a data scientist
    is someone who extracts insights from messy data. Today’s world is full of people
    trying to turn data into insight.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the dating site OkCupid asks its members to answer thousands of
    questions in order to find the most appropriate matches for them. But it also
    analyzes these results to figure out innocuous-sounding questions you can ask
    someone to find out [how likely someone is to sleep with you on the first date](https://theblog.okcupid.com/the-best-questions-for-a-first-date-dba6adaa9df2).
  prefs: []
  type: TYPE_NORMAL
- en: Facebook asks you to list your hometown and your current location, ostensibly
    to make it easier for your friends to find and connect with you. But it also analyzes
    these locations to [identify global migration patterns](https://www.facebook.com/notes/facebook-data-science/coordinated-migration/10151930946453859)
    and [where the fanbases of different football teams live](https://www.facebook.com/notes/facebook-data-science/nfl-fans-on-facebook/10151298370823859).
  prefs: []
  type: TYPE_NORMAL
- en: As a large retailer, Target tracks your purchases and interactions, both online
    and in-store. And it uses the [data to predictively model](https://www.nytimes.com/2012/02/19/magazine/shopping-habits.html)
    which of its customers are pregnant, to better market baby-related purchases to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: In 2012, the Obama campaign employed dozens of data scientists who data-mined
    and experimented their way to identifying voters who needed extra attention, choosing
    optimal donor-specific fundraising appeals and programs, and focusing get-out-the-vote
    efforts where they were most likely to be useful. And in 2016 the Trump campaign
    [tested a staggering variety of online ads](https://www.wired.com/2016/11/facebook-won-trump-election-not-just-fake-news/)
    and analyzed the data to find what worked and what didn’t.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, before you start feeling too jaded: some data scientists also occasionally
    use their skills for good—[using data to make government more effective](https://www.marketplace.org/2014/08/22/tech/beyond-ad-clicks-using-big-data-social-good),
    [to help the homeless](https://dssg.uchicago.edu/2014/08/20/tracking-the-paths-of-homelessness/),
    and to [improve public health](https://plus.google.com/communities/109572103057302114737).
    But it certainly won’t hurt your career if you like figuring out the best way
    to get people to click on advertisements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Motivating Hypothetical: DataSciencester'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You’ve just been hired to lead the data science efforts at
    DataSciencester, *the* social network for data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When I wrote the first edition of this book, I thought that “a social network
    for data scientists” was a fun, silly hypothetical. Since then people have actually
    created social networks for data scientists, and have raised much more money from
    venture capitalists than I made from my book. Most likely there is a valuable
    lesson here about silly data science hypotheticals and/or book publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Despite being *for* data scientists, DataSciencester has never actually invested
    in building its own data science practice. (In fairness, DataSciencester has never
    really invested in building its product either.) That will be your job! Throughout
    the book, we’ll be learning about data science concepts by solving problems that
    you encounter at work. Sometimes we’ll look at data explicitly supplied by users,
    sometimes we’ll look at data generated through their interactions with the site,
    and sometimes we’ll even look at data from experiments that we’ll design.
  prefs: []
  type: TYPE_NORMAL
- en: And because DataSciencester has a strong “not-invented-here” mentality, we’ll
    be building our own tools from scratch. At the end, you’ll have a pretty solid
    understanding of the fundamentals of data science. And you’ll be ready to apply
    your skills at a company with a less shaky premise, or to any other problems that
    happen to interest you.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome aboard, and good luck! (You’re allowed to wear jeans on Fridays, and
    the bathroom is down the hall on the right.)
  prefs: []
  type: TYPE_NORMAL
- en: Finding Key Connectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s your first day on the job at DataSciencester, and the VP of Networking
    is full of questions about your users. Until now he’s had no one to ask, so he’s
    very excited to have you aboard.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, he wants you to identify who the “key connectors” are among data
    scientists. To this end, he gives you a dump of the entire DataSciencester network.
    (In real life, people don’t typically hand you the data you need. [Chapter 9](ch09.html#getting_data)
    is devoted to getting data.)
  prefs: []
  type: TYPE_NORMAL
- en: 'What does this data dump look like? It consists of a list of users, each represented
    by a `dict` that contains that user’s `id` (which is a number) and `name` (which,
    in one of the great cosmic coincidences, rhymes with the user’s `id`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'He also gives you the “friendship” data, represented as a list of pairs of
    IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For example, the tuple `(0, 1)` indicates that the data scientist with `id`
    0 (Hero) and the data scientist with `id` 1 (Dunn) are friends. The network is
    illustrated in [Figure 1-1](#datasciencester_network_ch01).
  prefs: []
  type: TYPE_NORMAL
- en: '![The DataSciencester network.](assets/dsf2_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. The DataSciencester network
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Having friendships represented as a list of pairs is not the easiest way to
    work with them. To find all the friendships for user 1, you have to iterate over
    every pair looking for pairs containing 1\. If you had a lot of pairs, this would
    take a long time.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let’s create a `dict` where the keys are user `id`s and the values
    are lists of friend `id`s. (Looking things up in a `dict` is very fast.)
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Don’t get too hung up on the details of the code right now. In [Chapter 2](ch02.html#python),
    I’ll take you through a crash course in Python. For now just try to get the general
    flavor of what we’re doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll still have to look at every pair to create the `dict`, but we only have
    to do that once, and we’ll get cheap lookups after that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the friendships in a `dict`, we can easily ask questions of
    our graph, like “What’s the average number of connections?”
  prefs: []
  type: TYPE_NORMAL
- en: 'First we find the *total* number of connections, by summing up the lengths
    of all the `friends` lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we just divide by the number of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It’s also easy to find the most connected people—they’re the people who have
    the largest numbers of friends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since there aren’t very many users, we can simply sort them from “most friends”
    to “least friends”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: One way to think of what we’ve done is as a way of identifying people who are
    somehow central to the network. In fact, what we’ve just computed is the network
    metric *degree centrality* ([Figure 1-2](#network_sized_by_degree)).
  prefs: []
  type: TYPE_NORMAL
- en: '![The DataSciencester network sized by degree.](assets/dsf2_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. The DataSciencester network sized by degree
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This has the virtue of being pretty easy to calculate, but it doesn’t always
    give the results you’d want or expect. For example, in the DataSciencester network
    Thor (`id` 4) only has two connections, while Dunn (`id` 1) has three. Yet when
    we look at the network, it intuitively seems like Thor should be more central.
    In [Chapter 22](ch22.html#network_analysis), we’ll investigate networks in more
    detail, and we’ll look at more complex notions of centrality that may or may not
    accord better with our intuition.
  prefs: []
  type: TYPE_NORMAL
- en: Data Scientists You May Know
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While you’re still filling out new-hire paperwork, the VP of Fraternization
    comes by your desk. She wants to encourage more connections among your members,
    and she asks you to design a “Data Scientists You May Know” suggester.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your first instinct is to suggest that users might know the friends of their
    friends. So you write some code to iterate over their friends and collect the
    friends’ friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we call this on `users[0]` (Hero), it produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It includes user 0 twice, since Hero is indeed friends with both of his friends.
    It includes users 1 and 2, although they are both friends with Hero already. And
    it includes user 3 twice, as Chi is reachable through two different friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Knowing that people are friends of friends in multiple ways seems like interesting
    information, so maybe instead we should produce a *count* of mutual friends. And
    we should probably exclude people already known to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This correctly tells Chi (`id` 3) that she has two mutual friends with Hero
    (`id` 0) but only one mutual friend with Clive (`id` 5).
  prefs: []
  type: TYPE_NORMAL
- en: 'As a data scientist, you know that you also might enjoy meeting users with
    similar interests. (This is a good example of the “substantive expertise” aspect
    of data science.) After asking around, you manage to get your hands on this data,
    as a list of pairs `(user_id, interest)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For example, Hero (`id` 0) has no friends in common with Klein (`id` 9), but
    they share interests in Java and big data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s easy to build a function that finds users with a certain interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This works, but it has to examine the whole list of interests for every search.
    If we have a lot of users and interests (or if we just want to do a lot of searches),
    we’re probably better off building an index from interests to users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And another from users to interests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it’s easy to find who has the most interests in common with a given user:'
  prefs: []
  type: TYPE_NORMAL
- en: Iterate over the user’s interests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each interest, iterate over the other users with that interest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep count of how many times we see each other user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We could then use this to build a richer “Data Scientists You May Know” feature
    based on a combination of mutual friends and mutual interests. We’ll explore these
    kinds of applications in [Chapter 23](ch23.html#recommender_systems).
  prefs: []
  type: TYPE_NORMAL
- en: Salaries and Experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Right as you’re about to head to lunch, the VP of Public Relations asks if
    you can provide some fun facts about how much data scientists earn. Salary data
    is of course sensitive, but he manages to provide you an anonymous dataset containing
    each user’s `salary` (in dollars) and `tenure` as a data scientist (in years):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The natural first step is to plot the data (which we’ll see how to do in [Chapter 3](ch03.html#visualizing_data)).
    You can see the results in [Figure 1-3](#salaries).
  prefs: []
  type: TYPE_NORMAL
- en: '![Salary by Years Experience.](assets/dsf2_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. Salary by years of experience
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It seems clear that people with more experience tend to earn more. How can
    you turn this into a fun fact? Your first idea is to look at the average salary
    for each tenure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This turns out to be not particularly useful, as none of the users have the
    same tenure, which means we’re just reporting the individual users’ salaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It might be more helpful to bucket the tenures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can group together the salaries corresponding to each bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally compute the average salary for each group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Which is more interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And you have your soundbite: “Data scientists with more than five years’ experience
    earn 65% more than data scientists with little or no experience!”'
  prefs: []
  type: TYPE_NORMAL
- en: But we chose the buckets in a pretty arbitrary way. What we’d really like is
    to make some statement about the salary effect—on average—of having an additional
    year of experience. In addition to making for a snappier fun fact, this allows
    us to *make predictions* about salaries that we don’t know. We’ll explore this
    idea in [Chapter 14](ch14.html#simple_linear_regression).
  prefs: []
  type: TYPE_NORMAL
- en: Paid Accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you get back to your desk, the VP of Revenue is waiting for you. She wants
    to better understand which users pay for accounts and which don’t. (She knows
    their names, but that’s not particularly actionable information.)
  prefs: []
  type: TYPE_NORMAL
- en: 'You notice that there seems to be a correspondence between years of experience
    and paid accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Users with very few and very many years of experience tend to pay; users with
    average amounts of experience don’t. Accordingly, if you wanted to create a model—though
    this is definitely not enough data to base a model on—you might try to predict
    “paid” for users with very few and very many years of experience, and “unpaid”
    for users with middling amounts of experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Of course, we totally eyeballed the cutoffs.
  prefs: []
  type: TYPE_NORMAL
- en: With more data (and more mathematics), we could build a model predicting the
    likelihood that a user would pay based on his years of experience. We’ll investigate
    this sort of problem in [Chapter 16](ch16.html#logistic_regression).
  prefs: []
  type: TYPE_NORMAL
- en: Topics of Interest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you’re wrapping up your first day, the VP of Content Strategy asks you for
    data about what topics users are most interested in, so that she can plan out
    her blog calendar accordingly. You already have the raw data from the friend-suggester
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'One simple (if not particularly exciting) way to find the most popular interests
    is to count the words:'
  prefs: []
  type: TYPE_NORMAL
- en: Lowercase each interest (since different users may or may not capitalize their
    interests).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Split it into words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Count the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This makes it easy to list out the words that occur more than once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'which gives the results you’d expect (unless you expect “scikit-learn” to get
    split into two words, in which case it doesn’t give the results you expect):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We’ll look at more sophisticated ways to extract topics from data in [Chapter 21](ch21.html#natural_language_processing).
  prefs: []
  type: TYPE_NORMAL
- en: Onward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It’s been a successful first day! Exhausted, you slip out of the building before
    anyone can ask you for anything else. Get a good night’s rest, because tomorrow
    is new employee orientation. (Yes, you went through a full day of work *before*
    new employee orientation. Take it up with HR.)
  prefs: []
  type: TYPE_NORMAL
