["```py\nIn [1]: my_list = [4, 1, 5, 2]\n        my_list\n\nOut[1]: [4, 1, 5, 2]\n```", "```py\nIn [2]: type(my_list)\n\nOut[2]: list\n```", "```py\nIn [3]: my_nested_list = [1, 2, 3, ['Boo!', True]]\n        type(my_nested_list)\n\nOut[3]: list\n```", "```py\nIn [4]:  my_list * 2\n\nOut[4]: [4, 1, 5, 2, 4, 1, 5, 2]\n```", "```py\nIn [5]:  import numpy\n```", "```py\nIn [6]:  my_array = numpy.array([4, 1, 5, 2])\n         my_array\n\nOut[6]: array([4, 1, 5, 2])\n```", "```py\nIn [7]: type(my_list)\n\nOut[7]: list\n\nIn [8]: type(my_array)\n\nOut[8]: numpy.ndarray\n```", "```py\nIn [9]: my_list * 2\n\nOut[9]: [4, 1, 5, 2, 4, 1, 5, 2]\n\nIn [10]: my_array * 2\n\nOut[10]: array([ 8,  2, 10,  4])\n```", "```py\nIn [11]: my_coerced_array = numpy.array([1, 2, 3, 'Boo!'])\n         my_coerced_array\n\nOut[11]: array(['1', '2', '3', 'Boo!'], dtype='<U11')\n```", "```py\nIn [12]:  import numpy as np\n```", "```py\nIn [13]: import numpy as np\n         # numpy also has a sqrt() function:\n         np.sqrt(my_array)\n\nOut[13]: array([2.        , 1.        , 2.23606798, 1.41421356])\n```", "```py\nIn [14]: # Get second element... right?\n         my_array[2]\n\nOut[14]: 5\n```", "```py\nIn [15]: my_array\n\nOut[15]: array([4, 1, 5, 2])\n```", "```py\nIn [16]: # *Now* let's get the second element\n         my_array[1]\n\nOut[16]: 1\n```", "```py\nIn [17]: # Get second through fourth elements... right?\n         my_array[1:3]\n\nOut[17]: array([1, 5])\n```", "```py\nIn [18]: # *Now* get second through fourth elements\n         my_array[1:4]\n\nOut[18]: array([1, 5, 2])\n```", "```py\nIn [19]: import pandas as pd\n```", "```py\nIn [20]: record_1 = np.array(['Jack', 72, False])\n         record_2 = np.array(['Jill', 65, True])\n         record_3 = np.array(['Billy', 68, False])\n         record_4 = np.array(['Susie', 69, False])\n         record_5 = np.array(['Johnny', 66, False])\n\n         roster = pd.DataFrame(data = [record_1,\n             record_2, record_3, record_4, record_5],\n               columns = ['name', 'height', 'injury'])\n\n         roster\n\nOut[20]:\n              name height injury\n         0    Jack     72  False\n         1    Jill     65   True\n         2   Billy     68  False\n         3   Susie     69  False\n         4  Johnny     66  False\n```", "```py\nIn [21]: import seaborn as sns\n         sns.get_dataset_names()\n\nOut[21]:\n        ['anagrams', 'anscombe', 'attention', 'brain_networks', 'car_crashes',\n        'diamonds', 'dots', 'exercise', 'flights', 'fmri', 'gammas',\n        'geyser', 'iris', 'mpg', 'penguins', 'planets', 'tips', 'titanic']\n```", "```py\nIn [22]: iris = sns.load_dataset('iris')\n         iris.head()\n\nOut[22]:\n                sepal_length  sepal_width  petal_length  petal_width species\n        0           5.1          3.5           1.4          0.2  setosa\n        1           4.9          3.0           1.4          0.2  setosa\n        2           4.7          3.2           1.3          0.2  setosa\n        3           4.6          3.1           1.5          0.2  setosa\n        4           5.0          3.6           1.4          0.2  setosa\n```", "```py\nIn [23]: import os\n```", "```py\nIn [24]: os.path.isfile('test-file.csv')\n\nOut[24]: True\n```", "```py\nIn [25]: os.path.isfile('test-folder/test-file.csv')\n\nOut[25]: True\n```", "```py\nIn [26]:  os.path.isfile('../test-file.csv')\n\nOut[26]: True\n```", "```py\nIn [27]: star = pd.read_excel('datasets/star/star.xlsx')\n         star.head()\n\nOut[27]:\n   tmathssk  treadssk             classk  totexpk   sex freelunk   race\n0       473       447        small.class        7 girl       no  white\n1       536       450        small.class       21 girl       no  black\n2       463       439  regular.with.aide        0   boy      yes  black\n3       559       448            regular       16   boy       no  white\n4       489       447        small.class        5 boy      yes  white\n\n   schidkn\n0       63\n1       20\n2       19\n3       69\n4       79\n```", "```py\nIn [28]: districts = pd.read_csv('datasets/star/districts.csv')\n         districts.head()\n\nOut[28]:\n             schidkn      school_name       county\n          0        1          Rosalia  New Liberty\n          1        2  Montgomeryville       Topton\n          2        3             Davy     Wahpeton\n          3        4         Steelton    Palestine\n          4        6       Tolchester      Sattley\n```", "```py\nIn [29]: star.info()\n\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5748 entries, 0 to 5747\n    Data columns (total 8 columns):\n    #   Column    Non-Null Count  Dtype\n    ---  ------    --------------  -----\n    0   tmathssk  5748 non-null   int64\n    1   treadssk  5748 non-null   int64\n    2   classk    5748 non-null   object\n    3   totexpk   5748 non-null   int64\n    4   sex       5748 non-null   object\n    5   freelunk  5748 non-null   object\n    6   race      5748 non-null   object\n    7   schidkn   5748 non-null   int64\n    dtypes: int64(4), object(4)\n    memory usage: 359.4+ KB\n```", "```py\nIn [30]: star.describe()\n\nOut[30]:\n                tmathssk     treadssk      totexpk      schidkn\n        count  5748.000000  5748.000000  5748.000000  5748.000000\n        mean    485.648051   436.742345     9.307411    39.836639\n        std      47.771531    31.772857     5.767700    22.957552\n        min     320.000000   315.000000     0.000000     1.000000\n        25%     454.000000   414.000000     5.000000    20.000000\n        50%     484.000000   433.000000     9.000000    39.000000\n        75%     513.000000   453.000000    13.000000    60.000000\n        max     626.000000   627.000000    27.000000    80.000000\n```", "```py\nIn [31]: star.describe(include = 'all')\n\nOut[31]:\n           tmathssk     treadssk             classk      totexpk   sex  \\\ncount   5748.000000  5748.000000               5748  5748.000000  5748\nunique          NaN          NaN                  3          NaN     2\ntop             NaN          NaN  regular.with.aide          NaN   boy\nfreq            NaN          NaN               2015          NaN  2954\nmean     485.648051   436.742345                NaN     9.307411   NaN\nstd       47.771531    31.772857                NaN     5.767700   NaN\nmin      320.000000   315.000000                NaN     0.000000   NaN\n25%      454.000000   414.000000                NaN     5.000000   NaN\n50%      484.000000   433.000000                NaN     9.000000   NaN\n75%      513.000000   453.000000                NaN    13.000000   NaN\nmax      626.000000   627.000000                NaN    27.000000   NaN\n\n       freelunk   race      schidkn\ncount      5748   5748  5748.000000\nunique        2      3          NaN\ntop          no  white          NaN\nfreq       2973   3869          NaN\nmean        NaN    NaN    39.836639\nstd         NaN    NaN    22.957552\nmin         NaN    NaN     1.000000\n25%         NaN    NaN    20.000000\n50%         NaN    NaN    39.000000\n75%         NaN    NaN    60.000000\nmax         NaN    NaN    80.000000\n```", "```py\nIn [32]:  # First row, first column of DataFrame\n          roster.iloc[0, 0]\n\nOut[32]: 'Jack'\n```", "```py\nIn [33]: # Second through fourth rows, first through third columns\n         roster.iloc[1:4, 0:3]\n\nOut[33]:\n     name height injury\n 1   Jill     65   True\n 2  Billy     68  False\n 3  Susie     69  False\n```", "```py\nIn [34]:  # Select all rows in the name column\n          roster.loc[:, 'name']\n\nOut[34]:\n        0      Jack\n        1      Jill\n        2     Billy\n        3     Susie\n        4    Johnny\n        Name: name, dtype: object\n```", "```py\nIn [35]: roster.to_csv('output/roster-output-python.csv')\n         roster.to_excel('output/roster-output-python.xlsx')\n```", "```py\n    practice_array = ['I', 'am', 'having', 'fun', 'with', 'Python']\n    ```"]