["```py\n`heat_df` `=` `pd``.``read_csv``(``\"``data/utilities.csv``\"``,` `usecols``=``[``\"``temp``\"``,` `\"``ccf``\"``]``)`\n`heat_df`\n\n```", "```py\n99 rows × 2 columns\n```", "```py\n`y` `=` `heat_df``[``'``ccf``'``]`\n`X` `=` `heat_df``[``[``'``temp``'``]``]`\n\n`from` `sklearn``.``preprocessing` `import` `PolynomialFeatures`\n\n`poly` `=` `PolynomialFeatures``(``degree``=``2``,` `include_bias``=``False``)`\n`poly_features` `=` `poly``.``fit_transform``(``X``)`\n`poly_features`\n\n```", "```py\narray([[  29.,  841.],\n       [  31.,  961.],\n       [  15.,  225.],\n       ...,\n       [  76., 5776.],\n       [  55., 3025.],\n       [  39., 1521.]])\n\n```", "```py\n`from` `sklearn``.``linear_model` `import` `LinearRegression`\n\n`model_deg2` `=` `LinearRegression``(``)``.``fit``(``poly_features``,` `y``)`\n\n```", "```py\n`poly12` `=` `PolynomialFeatures``(``degree``=``12``,` `include_bias``=``False``)`\n`poly_features12` `=` `poly12``.``fit_transform``(``X``)`\n\n`degrees` `=` `[``1``,` `2``,` `3``,` `6``,` `8``,` `12``]`\n\n`mods` `=` `[``LinearRegression``(``)``.``fit``(``poly_features12``[``:``,` `:``deg``]``,` `y``)`\n        `for` `deg` `in` `degrees``]`\n\n```", "```py\n`from` `sklearn``.``model_selection` `import` `train_test_split`\n\n`test_size` `=` `22`\n\n`X_train``,` `X_test``,` `y_train``,` `y_test` `=` `train_test_split``(`\n    `X``,` `y``,` `test_size``=``test_size``,` `random_state``=``42``)`\n\n`print``(``f``'``Training set size:` `{``len``(``X_train``)``}``'``)`\n`print``(``f``'``Test set size:` `{``len``(``X_test``)``}``'``)`\n\n```", "```py\nTraining set size: 75\nTest set size: 22\n\n```", "```py\n`poly` `=` `PolynomialFeatures``(``degree``=``12``,` `include_bias``=``False``)`\n`poly_train` `=` `poly``.``fit_transform``(``X_train``)`\n\n`degree` `=` `np``.``arange``(``1``,``13``)`\n\n`mods` `=` `[``LinearRegression``(``)``.``fit``(``poly_train``[``:``,` `:``j``]``,` `y_train``)`\n        `for` `j` `in` `degree``]`\n\n```", "```py\n`from` `sklearn``.``metrics` `import` `mean_squared_error`\n\n`error_train` `=` `[`\n    `mean_squared_error``(``y_train``,` `mods``[``j``]``.``predict``(``poly_train``[``:``,` `:` `(``j` `+` `1``)``]``)``)`\n    `for` `j` `in` `range``(``12``)`\n`]`\n\n```", "```py\n`px``.``line``(``x``=``degree``,` `y``=``error_train``,` `markers``=``True``,`\n        `labels``=``dict``(``x``=``'``Degree of polynomial``'``,` `y``=``'``Train set MSE``'``)``,`\n        `width``=``350``,` `height``=``250``)`\n\n```", "```py\n`poly_test` `=` `poly``.``fit_transform``(``X_test``)`\n`y_hat` `=` `mods``[``2``]``.``predict``(``poly_test``[``:``,` `:``3``]``)`\n\n`mean_squared_error``(``y_test``,` `y_hat``)`\n\n```", "```py\n307.44460133992294\n\n```", "```py\n`error_test` `=` `[`\n    `mean_squared_error``(``y_test``,` `mods``[``j``]``.``predict``(``poly_test``[``:``,` `:` `(``j` `+` `1``)``]``)``)`\n    `for` `j` `in` `range``(``12``)`\n`]`\n\n```", "```py\n`y` `=` `heat_df``[``\"``ccf``\"``]`\n`X` `=` `heat_df``[``[``\"``temp``\"``]``]`\n`X``[``\"``temp65p``\"``]` `=` `(``X``[``\"``temp``\"``]` `-` `65``)` `*` `(``X``[``\"``temp``\"``]` `>``=` `65``)`\n\n```", "```py\n`bend_index` `=` `LinearRegression``(``)``.``fit``(``X``,` `y``)`\n\n```", "```py\n`bends` `=` `np``.``arange``(``40``,` `70``,` `1``)`\n\n`for` `i` `in` `bends``:`\n    `col` `=` `\"``temp``\"` `+` `i``.``astype``(``\"``str``\"``)` `+` `\"``p``\"`\n    `heat_df``[``col``]` `=` `(``heat_df``[``\"``temp``\"``]` `-` `i``)` `*` `(``heat_df``[``\"``temp``\"``]` `>``=` `i``)`\n`heat_df`\n\n```", "```py\n97 rows × 32 columns\n```", "```py\n`y` `=` `heat_df``[``'``ccf``'``]`\n`X` `=` `heat_df``.``drop``(``columns``=``[``'``ccf``'``]``)`\n\n`test_size` `=` `22`\n\n`X_train``,` `X_test``,` `y_train``,` `y_test` `=` `train_test_split``(`\n    `X``,` `y``,` `test_size``=``test_size``,` `random_state``=``0``)`\n\n```", "```py\n`from` `sklearn``.``model_selection` `import` `KFold`\n\n`kf` `=` `KFold``(``n_splits``=``3``,` `shuffle``=``True``,` `random_state``=``42``)`\n\n`validation_errors` `=` `np``.``zeros``(``(``3``,` `30``)``)`\n\n`def` `validate_bend_model``(``X``,` `y``,` `X_valid``,` `y_valid``,` `bend_index``)``:`\n    `model` `=` `LinearRegression``(``)``.``fit``(``X``.``iloc``[``:``,` `[``0``,` `bend_index``]``]``,` `y``)`\n    `predictions` `=` `model``.``predict``(``X_valid``.``iloc``[``:``,` `[``0``,` `bend_index``]``]``)`\n    `return` `mean_squared_error``(``y_valid``,` `predictions``)`\n\n`for` `fold``,` `(``train_idx``,` `valid_idx``)` `in` `enumerate``(``kf``.``split``(``X_train``)``)``:`\n    `cv_X_train``,` `cv_X_valid` `=` `(``X_train``.``iloc``[``train_idx``,` `:``]``,`\n                              `X_train``.``iloc``[``valid_idx``,` `:``]``)`\n    `cv_Y_train``,` `cv_Y_valid` `=` `(``y_train``.``iloc``[``train_idx``]``,`\n                              `y_train``.``iloc``[``valid_idx``]``)`\n\n    `error_bend` `=` `[`\n        `validate_bend_model``(`\n            `cv_X_train``,` `cv_Y_train``,` `cv_X_valid``,` `cv_Y_valid``,` `bend_index`\n        `)`\n        `for` `bend_index` `in` `range``(``1``,` `31``)`\n    `]`\n\n    `validation_errors``[``fold``]``[``:``]` `=` `error_bend`\n\n```", "```py\n`totals` `=` `validation_errors``.``mean``(``axis``=``0``)`\n\n```", "```py\n`bent_final` `=` `LinearRegression``(``)``.``fit``(`\n    `X_train``.``loc``[``:``,` `[``\"``temp``\"``,` `\"``temp58p``\"``]``]``,` `y_train`\n`)`\n\n```", "```py\n`y_pred_test` `=` `bent_final``.``predict``(``X_test``.``loc``[``:``,` `[``\"``temp``\"``,` `\"``temp58p``\"``]``]``)`\n\n`mean_squared_error``(``y_test``,` `y_pred_test``)`\n\n```", "```py\n71.40781435952441\n\n```", "```py\n`def` `g``(``x``)``:`\n    `return` `np``.``sin``(``x``)` `+` `0.3` `*` `x`\n\n`def` `gen_noise``(``n``)``:`\n    `return` `np``.``random``.``normal``(``scale``=``0.2``,` `size``=``n``)`\n\n`def` `draw``(``n``)``:`\n    `points` `=` `np``.``random``.``choice``(``np``.``arange``(``0``,` `10``,` `0.05``)``,` `size``=``n``)`\n    `return` `points``,` `g``(``points``)` `+` `gen_noise``(``n``)`\n\n```", "```py\n`np``.``random``.``seed``(``42``)`\n\n`xs``,` `ys` `=` `draw``(``50``)`\n`noise` `=` `ys` `-` `g``(``xs``)`\n\n```", "```py\n`poly` `=` `PolynomialFeatures``(``degree``=``2``,` `include_bias``=``False``)`\n`poly_features` `=` `poly``.``fit_transform``(``xs``.``reshape``(``-``1``,` `1``)``)`\n\n`model_deg2` `=` `LinearRegression``(``)``.``fit``(``poly_features``,` `ys``)`\n\n```", "```py\nFitted Model: 0.98 + -0.19x + 0.05x^2\n\n```", "```py\n`def` `fit``(``n``)``:`\n    `xs_new` `=` `np``.``random``.``choice``(``np``.``arange``(``0``,` `10``,` `0.05``)``,` `size``=``n``)`\n    `ys_new` `=` `g``(``xs_new``)` `+` `gen_noise``(``n``)`\n    `X_new` `=` `xs_new``.``reshape``(``-``1``,` `1``)`\n    `mod_new` `=` `LinearRegression``(``)``.``fit``(``poly``.``fit_transform``(``X_new``)``,` `ys_new``)`\n    `return` `mod_new``.``predict``(``poly_features_x_full``)``.``flatten``(``)`\n\n```", "```py\n`fits` `=` `[``fit``(``50``)` `for` `j` `in` `range``(``25``)``]`\n\n```"]