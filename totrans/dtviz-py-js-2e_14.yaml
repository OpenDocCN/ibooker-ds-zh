- en: Chapter 10\. Visualizing Data with Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章\. 使用Matplotlib可视化数据
- en: As a data visualizer, one of the best ways to come to grips with your data is
    to visualize it interactively, using the full range of charts and plots that have
    evolved to summarize and refine datasets. Conventionally, the fruits of this exploratory
    phase are then presented as static figures, but increasingly they are used to
    construct more engaging interactive web-based charts, such as the cool D3 visualizations
    you have probably seen (one of which we’ll be building in [Part V](part05.xhtml#part_viz)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据可视化者，熟悉数据的最佳方式之一是通过交互式可视化来理解它，使用已演变的各种图表和绘图来总结和优化数据集。传统上，这个探索阶段的成果被呈现为静态图像，但越来越多地被用来构建更具吸引力的基于Web的交互式图表，比如您可能见过的酷炫的D3可视化之一（我们将在[第V部分](part05.xhtml#part_viz)中构建其中之一）。
- en: Python’s Matplotlib and its family of extensions (such as the statistically
    focused seaborn) form a mature and very customizable plotting ecosystem. Matplotlib
    plots can be used interactively by IPython (the Qt and notebook versions), providing
    a very powerful and intuitive way of finding interesting nuggets in your data.
    In this chapter, we’ll introduce Matplotlib and one of its great extensions, seaborn.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python的Matplotlib及其扩展系列（例如统计焦点的seaborn）形成了一个成熟且非常可自定义的绘图生态系统。Matplotlib绘图可以通过IPython（Qt和笔记本版本）进行交互使用，为您在数据中找到有趣信息提供了非常强大和直观的方式。在本章中，我们将介绍Matplotlib及其伟大的扩展之一，seaborn。
- en: pyplot and Object-Oriented Matplotlib
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pyplot和面向对象的Matplotlib
- en: Matplotlib can be more than a little confusing, especially if you start randomly
    sampling examples online. The main complicating factor is that there are two main
    ways to create plots, which are similar enough to be confused but different enough
    to lead to a lot of frustrating errors. The first way uses a global state machine
    to interact directly with Matplotlib’s `pyplot` module. The second, object-oriented
    approach uses the more familiar notion of figure and axes classes to provide a
    programmatic alternative. I’ll clarify their differences in the sections ahead,
    but as a rough rule of thumb, if you’re working interactively with single plots,
    `pyplot`’s global state is a convenient shortcut. For all other occasions, it
    makes sense to explicitly declare your figures and axes using the object-oriented
    approach.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib可能会让人感到相当困惑，特别是如果你随机在网上找例子。主要的复杂因素是有两种主要的绘图方式，它们足够相似以至于容易混淆，但又足够不同以至于会导致许多令人沮丧的错误。第一种方式使用全局状态机直接与Matplotlib的`pyplot`模块交互。第二种面向对象的方法使用更熟悉的图和轴类的概念，提供了一种编程的选择。我将在接下来的章节中澄清它们的差异，但是作为一个粗略的经验法则，如果你正在交互式地处理单个绘图，`pyplot`的全局状态是一个方便的快捷方式。对于其他所有场合，使用面向对象的方法显式声明你的图和轴是有意义的。
- en: Starting an Interactive Session
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动交互式会话
- en: 'We will be using a [Jupyter notebook](https://jupyter.org) for our interactive
    visualization. Use the following command to start a session:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[Jupyter notebook](https://jupyter.org)进行交互式可视化。使用以下命令启动会话：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can then use one of the [Matplotlib magic commands](https://oreil.ly/KhWbX)
    within the IPython session to enable interactive Matplotlib. On its own, `%matplotlib`
    will use the default GUI backend to create a plotting window, but you can specify
    the backend directly. The following should work on standard and Qt console IPython:^([1](ch10.xhtml#idm45607769764064))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在IPython会话中使用[Matplotlib魔术命令](https://oreil.ly/KhWbX)之一来启用交互式Matplotlib。单独使用`%matplotlib`将使用默认的GUI后端创建绘图窗口，但您可以直接指定后端。以下命令应该适用于标准和Qt控制台IPython：^([1](ch10.xhtml#idm45607769764064))
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To get inline graphics in the notebook or Qt console, you can use the `inline`
    directive. Note that with inline plots, you can’t amend them after creation, unlike
    the standalone Matplotlib window:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要在笔记本或Qt控制台中获取内联图形，可以使用`inline`指令。请注意，使用内联绘图时，无法在创建后进行修改，不同于独立的Matplotlib窗口：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Whether you are using Matplotlib interactively or in Python programs, you’ll
    use similar imports:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是在交互式环境还是在Python程序中使用Matplotlib，您都会使用类似的导入方式：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You will find many examples of Matplotlib using `pylab`. `pylab` is a convenience
    module that bulk-imports `matplotlib.pyplot` (for plotting) and NumPy in a single
    namespace. `pylab` is pretty much deprecated now, but even were it not, I’d still
    recommend avoiding this namespace and merging and importing `pyplot` and `numpy`
    explicitly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将发现许多使用`pylab`的Matplotlib示例。`pylab`是一个便捷模块，它将`matplotlib.pyplot`（用于绘图）和NumPy批量导入到单一命名空间中。现在`pylab`基本上已经过时，但即使它没有过时，我仍然建议避免使用这个命名空间，并显式地合并和导入`pyplot`和`numpy`。
- en: While NumPy and pandas are not mandatory, Matplotlib is designed to play well
    with them, handling NumPy arrays and, by association, pandas Series.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然NumPy和pandas不是强制的，但Matplotlib设计时考虑了它们，能处理NumPy数组，通过关联处理pandas Series。
- en: 'The ability to create inline plots is key to enjoyable interaction with Matplotlib,
    and we achieve this in IPython with the following “magic”^([2](ch10.xhtml#idm45607769728560))
    injunction:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在IPython中创建内联图的能力对于与Matplotlib的愉快交互至关重要，我们使用以下“魔术”^([2](ch10.xhtml#idm45607769728560))
    指令来实现这一点：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Your Matplotlib plots will now be inserted into your IPython workflow. This
    works with Qt and notebook versions. In notebooks, the plots are incorporated
    into the active cell.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的Matplotlib图表将插入到你的IPython工作流中。这适用于Qt和notebook版本。在notebooks中，图表将被合并到活动单元格中。
- en: Amending Plots
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改绘图
- en: In inline mode, after a Jupyter notebook cell or (multiline) input has been
    run, the drawing context is flushed. This means you cannot change the plot from
    a previous cell or input using the `gcf` (get current figure) method but have
    to repeat all the plot commands with any additions or amendments in a new input/cell.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在内联模式下，当Jupyter notebook单元格或（多行）输入运行后，绘图上下文被刷新。这意味着你不能使用`gcf`（获取当前图形）方法从先前单元格或输入更改图表，而必须在新的输入/单元格中重复所有绘图命令并进行任何添加或修改。
- en: Interactive Plotting with pyplot’s Global State
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pyplot的全局状态进行交互绘图
- en: 'The `pyplot` module provides a global state that you can manipulate interactively.^([3](ch10.xhtml#idm45607769721600))
    This is intended for use in interactive data exploration and is best when you
    are creating simple plots, usually containing single figures. `pyplot` is convenient
    and many of the examples you’ll see use it, but for more complex plotting Matplotlib’s
    object-oriented API (which we’ll see shortly) comes into its own. Before demoing
    use of the global plot, let’s create some random data to display, courtesy of
    pandas’s useful `period_range` method:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyplot`模块提供了一个全局状态，你可以进行交互式操作。^([3](ch10.xhtml#idm45607769721600)) 这是用于交互式数据探索的，当你创建简单图表时非常方便。你会看到很多示例使用`pyplot`，但对于更复杂的绘图，Matplotlib的面向对象API（我们马上会看到）更适合。在演示全局绘图使用之前，让我们创建一些随机数据来显示，借助pandas有用的`period_range`方法：'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO1-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO1-1)'
- en: Creates a pandas `datetime` index with 200 day (`d`) elements, starting from
    the current time (`datetime.now()`).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用当前时间（`datetime.now()`）从现在开始创建包含200天（`d`）元素的pandas `datetime`索引。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO1-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO1-2)'
- en: Converts `datetime` index to Python `datetimes`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将`datetime`索引转换为Python的`datetimes`。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO1-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO1-3)'
- en: Creates three 200-element random arrays summed along the 0 axis.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建三个包含200个元素的随机数组，沿着0轴求和。
- en: 'We now have a y-axis with 200 time slots and three random arrays for the complementary
    x values. These are provided as separate arguments to the `(line)plot` method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个包含200个时间槽的y轴和三个随机数组作为补充的x值。这些作为独立的参数提供给`(line)plot`方法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This gives us the not particularly inspiring chart shown in [Figure 10-1](#mpl_3lines_default).
    Note how Matplotlib deals naturally with a multidimensional NumPy line array.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们展示了不是特别激动人心的图表，如[图 10-1](#mpl_3lines_default)所示。注意Matplotlib如何自然地处理多维NumPy线性数组。
- en: '![dpj2 1001](assets/dpj2_1001.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1001](assets/dpj2_1001.png)'
- en: Figure 10-1\. Default line plot
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10-1\. 默认线性图
- en: Although Matplotlib’s defaults are, by general consensus, less than ideal, one
    of its strengths is the sheer amount of customization you can perform. This is
    why there is a rich ecosystem of chart libraries that wrap Matplotlib with better
    defaults, more attractive color schemes, and more. Let’s see some of this customization
    in action by using vanilla Matplotlib to tailor our default plot.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Matplotlib
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Matplotlib provides a wide range of [configurations](https://oreil.ly/IbgVA),
    which can be specified in a [`matplotlibrc` file](https://oreil.ly/knyiZ) or dynamically,
    through the dictionary-like `rcParams` variable. Here we change the width and
    default color of our plot lines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can find a sample `matplotlibrc` file at the [main site](https://oreil.ly/LBqxb).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: As well as using the `rcParams` variable, you can use the `gcf` (get current
    figure) method to grab the currently active figure and manipulate it directly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see a little example of configuration, setting the current figure’s size.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Figure’s Size
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your plot’s default readability is poor or the width-to-height ratio suboptimal,
    you will want to change its size. By default, Matplotlib uses inches for its plotting
    size. This makes sense when you consider the many backends (often vector-graphic-based)
    that Matplotlib can save to. Here we show two ways to use `pyplot` to set the
    figure size to eight by four inches, using `rcParams` and `gcf`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Points, Not Pixels
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matplotlib uses points, not pixels, to measure the size of its figures. This
    is the accepted measure for print-quality publications, and Matplotlib is used
    to deliver publication-quality images.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: By default a point is approximately 1/72 of an inch wide, but Matplotlib allows
    you to adjust this by changing the dots-per-inch (dpi) for any figures generated.
    The higher this number, the better the quality of the image. For the purpose of
    the inline figures shown interactively during IPython sessions, the resolution
    is usually a product of the backend engine being used to generate the plots (e.g.,
    Qt, WxAgg, tkinter). See the [Matplotlib documentation](https://oreil.ly/4ENnG)
    for an explanation of backends.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Labels and Legends
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Figure 10-1](#mpl_3lines_default) needs, among other things, to tell us what
    the lines mean. Matplotlib has a handy legend box for line labeling, which, like
    most things Matplotlib, is heavily configurable. Labeling our three lines involves
    a little indirection as the `plot` method only takes one label, which it applies
    to all lines generated. Usefully, the `plot` command returns all `Line2D` objects
    created. These can be used by the `legend` method to set individual labels.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Because this plot will be appearing in black and white (if you’re reading the
    print version of this book), we need a way to distinguish the lines other than
    the default colors. The easiest way to do this with Matplotlib is to create the
    lines sequentially, specifying *x* and *y* values and a line style.^([4](ch10.xhtml#idm45607769467872))
    We’ll make our line styles solid (-), dashed (--), and dash-dotted (-.). Note
    the use of NumPy’s column indexing (see [Figure 7-1](ch07.xhtml#numpy_indexing)):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这张图将会以黑白形式出现（如果您阅读本书的打印版本），我们需要一种方法来区分线条，而不是使用默认的颜色。在 Matplotlib 中实现这一点的最简单方法是顺序创建线条，指定
    *x* 和 *y* 值以及线型。我们将使用实线 (-)、虚线 (--) 和点划线 (-.) 来创建线条。请注意 NumPy 的列索引用法（见 [Figure 7-1](ch07.xhtml#numpy_indexing)）：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The [`legend` method](https://oreil.ly/2hEMc) can set labels, suggest a location
    for the legend box, and configure a number of other things:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[`legend`方法](https://oreil.ly/2hEMc) 可以设置标签，建议图例框的位置，并配置许多其他内容：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO2-1)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO2-1)'
- en: Sets the labels for our three plots.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 设置我们三个图的标签。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO2-2)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO2-2)'
- en: Using the `best` location should avoid obscuring lines.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`best`位置应避免遮挡线条。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO2-3)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO2-3)'
- en: Sets the legend’s transparency.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 设置图例的透明度。
- en: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO2-4)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO2-4)'
- en: Here we adjust the font properties of the legend.^([5](ch10.xhtml#idm45607769227712))
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们调整图例的字体属性：^([5](ch10.xhtml#idm45607769227712))
- en: Titles and Axes Labels
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标题和轴标签
- en: 'Adding a title and label for your axes is as easy as can be:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 添加标题和轴标签非常简单：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can add some text with the `figtext` method:^([6](ch10.xhtml#idm45607769200272))
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`figtext`方法可以添加一些文本：^([6](ch10.xhtml#idm45607769200272))
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO3-1)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO3-1)'
- en: The location of the text proportionate to figure size.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 文本相对于图大小的位置。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO3-2)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO3-2)'
- en: Horizontal (`ha`) and vertical (`va`) alignment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 水平(`ha`)和垂直(`va`)对齐。
- en: The complete code is shown in [Example 10-1](#mpl_3lines_custom_code) and the
    resulting chart in [Figure 10-2](#mpl_3lines_custom).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码显示在 [Example 10-1](#mpl_3lines_custom_code) 中，生成的图表在 [Figure 10-2](#mpl_3lines_custom)
    中。
- en: Example 10-1\. Customized line chart
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: Example 10-1\. 自定义折线图
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO4-1)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO4-1)'
- en: This will add a dotted grid to the figure, marking the axis ticks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在图中添加点状网格，标记轴刻度。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO4-2)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO4-2)'
- en: The [`tight_layout` method](https://oreil.ly/roH2Z) should guarantee that all
    your plot elements are within the figure box. Otherwise, you might find tick-labels
    or legends truncated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[`tight_layout`方法](https://oreil.ly/roH2Z)应保证所有的绘图元素都在图框内。否则，可能会发现刻度标签或图例被截断。'
- en: '![dpj2 1002](assets/dpj2_1002.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1002](assets/dpj2_1002.png)'
- en: Figure 10-2\. Customized line chart
  id: totrans-80
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-2\. 自定义折线图
- en: 'We used the `tight_layout` method in [Example 10-1](#mpl_3lines_custom_code)
    to prevent plot elements from being obscured or truncated. `tight_layout` has
    been known to cause problems with some systems, particularly macOS. If you have
    any problems, this [issue thread](https://oreil.ly/qGONZ) may help. As of now,
    the best advice is to use the `set_tight_layout` method on the current figure:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [Example 10-1](#mpl_3lines_custom_code) 中使用了`tight_layout`方法，以防止绘图元素被遮挡或截断。在某些系统（特别是
    macOS）中，`tight_layout`已知可能会引起问题。如果您遇到任何问题，可以参考这个 [问题线程](https://oreil.ly/qGONZ)。
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Saving Your Charts
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存您的图表
- en: One area where Matplotlib shines is in saving your plots, providing many output
    formats.^([7](ch10.xhtml#idm45607768868400)) The available formats depend on the
    backends available, but generally PNG, PDF, PS, EPS, and SVG are supported. PNG
    stands for Portable Network Graphics and is the most popular format for distributing
    web images. The other formats are vector-based, which can scale smoothly without
    pixelation artifacts. For high-quality print work, this is probably what you want.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 在保存绘图方面表现出色，提供多种输出格式。^([7](ch10.xhtml#idm45607768868400)) 可用的格式取决于可用的后端，但通常支持
    PNG、PDF、PS、EPS 和 SVG。PNG 代表便携式网络图形，是分发网络图像的最流行格式。其他格式都是基于矢量的，可以在不产生像素化伪影的情况下平滑缩放。对于高质量的印刷工作，这可能是您想要的格式。
- en: 'Saving is as simple as this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 保存操作就像这样简单：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can set the format explicitly using `format="svg"`, but Matplotlib understands
    the *.svg* suffix. To avoid truncated labels, use the `tight_layout` method.^([8](ch10.xhtml#idm45607768834368))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `format="svg"` 明确设置格式，但 Matplotlib 也能理解 *.svg* 后缀。为避免标签截断，使用 `tight_layout`
    方法。^([8](ch10.xhtml#idm45607768834368))
- en: Figures and Object-Oriented Matplotlib
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形和面向对象的 Matplotlib
- en: As just shown, interactively manipulating `pyplot`’s global state works fine
    for quick data sketching and single-plot work. However, if you want to have more
    control over your charts, Matplotlib’s figure and axes Object-Oriented (OO) approach
    is the way to go. Most of the more advanced plotting demos you see will be done
    this way.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚刚展示的，交互式地操作 `pyplot` 的全局状态对于快速数据草图和单一绘图工作效果良好。然而，如果您希望更多地控制图表，Matplotlib
    的图形和坐标轴面向对象（OO）方法是更好的选择。您看到的大多数高级绘图演示都是用这种方式完成的。
- en: In essence, with OO Matplotlib we are dealing with a figure, which you can think
    of as a drawing canvas with one or more axes (or plots) embedded in it. Both figures
    and axes have properties that can be independently specified. In this sense, the
    interactive `pyplot` route discussed earlier was plotting to a single axis of
    a global figure.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，使用面向对象的 Matplotlib，我们处理的是一个图形（figure），可以将其视为一个带有一个或多个坐标轴（或绘图）的绘图画布。图形（figure）和坐标轴（axes）都有可以独立指定的属性。在这个意义上，之前讨论的交互式
    `pyplot` 路线是将绘图绘制到全局图形的单个坐标轴上。
- en: 'We can create a figure by using `pyplot`’s `figure` method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `pyplot` 的 `figure` 方法创建一个图形：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, figures share a subset of properties with the global `pyplot`
    module. These can be set on creation of the figure or through similar methods
    (i.e., `fig.text()` as opposed to `plt.fig_text()`). Each figure can have multiple
    axes, each of which is analogous to the single, global plot state but with the
    considerable advantage that multiple axes can exist on one figure, each with independent
    properties.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，图形与全局 `pyplot` 模块共享一部分属性。这些属性可以在创建图形时设置，也可以通过类似的方法设置（例如 `fig.text()` 而不是
    `plt.fig_text()`）。每个图形可以有多个轴，每个轴类似于单个全局绘图状态，但具有多个独立属性的优势。
- en: Axes and Subplots
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标轴和子图
- en: 'The `figure.add_axes` method allows precise control over the position of axes
    within a figure (e.g., enabling you to embed a smaller plot within the main).
    Positioning of plot elements uses a 0 → 1 coordinate system, where 1 is the width
    or height of the figure. You can specify the position using a four-element list
    or tuple to set bottom-left and top-right bounds:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`figure.add_axes` 方法允许精确控制图形中轴的位置（例如，使您能够在主轴中嵌入一个较小的绘图）。绘图元素的定位使用的是 0 → 1 的坐标系统，其中
    1 是图形的宽度或高度。您可以使用四元素列表或元组指定位置，以设置底部左侧和顶部右侧边界：'
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[Example 10-2](#mpl_add_axes_code) shows the code needed to insert smaller
    axes into larger ones, using our random test data. The result is shown in [Figure 10-3](#mpl_add_axes).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-2](#mpl_add_axes_code) 展示了插入较大坐标轴中较小坐标轴所需的代码，使用我们的随机测试数据。结果显示在 [图 10-3](#mpl_add_axes)
    中。'
- en: Example 10-2\. A plot insert with `figure.add_axes`
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-2\. 使用 `figure.add_axes` 插入图表
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO5-1)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO5-1)'
- en: This selects the first column of our random NumPy y-data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这选择了我们随机生成的 NumPy y 数据的第一列。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO5-2)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO5-2)'
- en: Removes the x ticks and labels from our embedded plot.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们嵌入的绘图中删除 x 轴刻度和标签。
- en: Although `add_axes` gives us a lot of scope for fine-tuning the appearance of
    our charts, most of the time Matplotlib’s built-in grid-layout system makes life
    much easier.^([9](ch10.xhtml#idm45607768572320)) The simplest option is to use
    `figure.subplots`, which allows you to specify row-column layouts of equal-sized
    plots. If you want a grid with different-sized plots, the `gridspec` module is
    your go-to.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`add_axes`给了我们很多调整图表外观的空间，但大多数情况下，Matplotlib内置的网格布局系统使生活变得更加轻松。^([9](ch10.xhtml#idm45607768572320))
    最简单的选项是使用`figure.subplots`，它允许您指定等大小的行列布局的网格。如果您想要具有不同大小的网格，`gridspec`模块是您的首选。
- en: '![dpj2 1003](assets/dpj2_1003.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1003](assets/dpj2_1003.png)'
- en: Figure 10-3\. Inserted plot with `figure.add_axes`
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图例 10-3\. 使用`figure.add_axes`插入绘图
- en: Calling `subplots` without arguments returns a figure with single axes. This
    is closest in use to using the `pyplot` state machine shown in [“Interactive Plotting
    with pyplot’s Global State”](#sect_pyplot_global). [Example 10-3](#mpl_3lines_custom_axes_code)
    shows the figure and axes equivalent to the `pyplot` demo in [Example 10-1](#mpl_3lines_custom_code),
    producing the chart in [Figure 10-2](#mpl_3lines_custom). Note the use of “setter”
    methods for figure and axes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 调用不带参数的`subplots`返回一个带有单个轴的图。这在使用`pyplot`全局状态机时最接近，如[“使用pyplot的交互绘图”](#sect_pyplot_global)中所示。[示例
    10-3](#mpl_3lines_custom_axes_code)展示了等效于[示例 10-1](#mpl_3lines_custom_code)中`pyplot`演示的图和轴，生成了[图例
    10-2](#mpl_3lines_custom)中的图表。请注意使用“setter”方法设置图和轴。
- en: Example 10-3\. Plotting with single figure and axes
  id: totrans-108
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-3\. 使用单个图和轴绘图
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Calling `subplots` with arguments for number of rows (`nrows`) and columns (`ncols`)
    (as shown in [Example 10-4](#mpl_subplots_code)) allows multiple plots to be placed
    on a grid layout (see the results in [Figure 10-4](#mpl_subplots)). The call to
    `subplots` returns the figure and an array of axes, in row-column order. In the
    example, we specify one column so `axes` is a single array of three stacked axes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 调用带有行数（`nrows`）和列数（`ncols`）参数的`subplots`（如[示例 10-4](#mpl_subplots_code)所示）允许将多个绘图放置在网格布局上（见[图例
    10-4](#mpl_subplots)的结果）。`subplots`的调用返回图和轴的数组，按行列顺序排列。在本例中，我们指定了一列，因此`axes`是一个包含三个堆叠轴的单个数组。
- en: Example 10-4\. Using subplots
  id: totrans-111
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-4\. 使用子图
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO6-1)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO6-1)'
- en: Specifies a subplot grid of three rows by one column.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 指定了一个三行一列的子图网格。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO6-2)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO6-2)'
- en: We want to share x- and y-axes, automatically adjusting limits for easy comparison.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望共享x和y轴，自动调整限制以便进行简单比较。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO6-3)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO6-3)'
- en: Switch y to row-column and zip the line data, labels, and line colors together.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将y切换为行列，并将线数据、标签和线颜色一起压缩。
- en: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO6-4)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO6-4)'
- en: Labels the last of the shared x-axes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 给最后一个共享的x轴加上标签。
- en: '![dpj2 1004](assets/dpj2_1004.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1004](assets/dpj2_1004.png)'
- en: Figure 10-4\. Three subplots
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图例 10-4\. 三个子图
- en: 'We make use of Python’s handy `zip` method to produce three dictionaries with
    line data. [`zip`](https://oreil.ly/G8YGh) takes lists or tuples of length *n*
    and returns *n* lists, formed by matching the elements by order:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用Python便利的`zip`方法生成了包含线数据的三个字典。[`zip`](https://oreil.ly/G8YGh)接受长度为*n*的列表或元组，并返回*n*个列表，按顺序匹配元素：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `for` loop, we use `enumerate` to supply an index `i`, which we use to
    select an axis by row, using our zipped `labelled_data` to provide the plot properties.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环中，我们使用`enumerate`为索引`i`提供了一个轴，使用我们的`labelled_data`来提供绘图属性。
- en: Note the shared x- and y-axes specified in the `subplots` call in [Example 10-4](#mpl_subplots_code)
    (2). This allows easy comparison of the three charts, particularly on the now
    normalized y-axis. To avoid redundant x labels, we only call `set_xlabel` on the
    last row, using Python’s handy negative indexing.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在`subplots`调用中指定的共享x和y轴，如[示例 10-4](#mpl_subplots_code)（2）所示。这样可以在现在标准化的y轴上轻松比较三个图表，为了避免冗余的x标签，我们仅在最后一行调用`set_xlabel`，使用Python方便的负索引。
- en: Now that we’ve covered the two ways in which IPython and Matplotlib engage interactively,
    using the global state (accessed through `plt`) and the object-oriented API, let’s
    look at a few of the common plot types you’ll use to explore your datasets.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了IPython和Matplotlib交互式使用的两种方式，即使用全局状态（通过`plt`访问）和面向对象的API，让我们看看您将用来探索数据集的几种常见绘图类型。
- en: Plot Types
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图类型
- en: As well as the line plot just demonstrated, Matplotlib has a number of plot
    types available. I’ll now demonstrate a few of the ones commonly used in exploratory
    data visualization.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除了刚才演示的折线图外，Matplotlib 还有许多其他类型的图表可用。接下来我将演示几种在探索性数据可视化中常用的类型。
- en: Bar Charts
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条形图
- en: The humble bar chart is a staple for a lot of visual data exploration. As with
    most of Matplotlib charts, there’s a good deal of customization possible. We’ll
    now run through a few variants to give you the gist.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 朴素的条形图是许多视觉数据探索中的重要工具。与大多数 Matplotlib 图表一样，可以进行大量自定义。我们将介绍几个变体，帮助您理解其要领。
- en: The code in [Example 10-5](#mpl_barchart_code) produces the bar chart in [Figure 10-5](#mpl_barchart).
    Note that you have to specify your own bar and label locations. This kind of flexibility
    is beloved by hardcore Matplotlibbers and is pretty easy to get the hang of. Nevertheless,
    it’s the sort of thing that can get tedious. It’s trivial to write some helper
    methods here, and there are many libraries that wrap Matplotlib and make things
    a little more user-friendly. As we’ll see in [Chapter 11](ch11.xhtml#chapter_pandas_exploring),
    pandas’s built-in Matplotlib-based plots are quite a bit simpler to use.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-5](#mpl_barchart_code) 中的代码生成了 [图 10-5](#mpl_barchart) 的条形图。请注意，您需要指定自己的条和标签位置。这种灵活性深受
    Matplotlib 爱好者的喜爱，并且相当容易上手。尽管如此，有时这样的工作可能会显得乏味。编写一些辅助方法非常简单，此外还有许多封装了 Matplotlib
    的库，使得操作更加用户友好。正如我们将在 [第 11 章](ch11.xhtml#chapter_pandas_exploring) 中看到的那样，基于 pandas
    的 Matplotlib 绘图功能要简单得多。'
- en: Example 10-5\. A simple bar chart
  id: totrans-133
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-5\. 简单的条形图
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO7-1)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO7-1)'
- en: Here we create the middle bar locations, two `bar_width`’s apart.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了中间条的位置，两个 `bar_width` 之间相隔。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO7-2)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO7-2)'
- en: We’re hardcoding the x values for demonstration purposes—usually you will want
    to calculate ranges on the fly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们在此硬编码了 x 值，通常您会希望动态计算范围。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO7-3)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO7-3)'
- en: This places tick labels at the middle of the bars.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将刻度标签放置在条的中间。
- en: '![dpj2 1005](assets/dpj2_1005.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1005](assets/dpj2_1005.png)'
- en: Figure 10-5\. A simple bar chart
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-5\. 简单的条形图
- en: 'Bar charts with multiple groups are particularly useful. In [Example 10-6](#mpl_barchart_multi_code),
    we add some more country data (for a mythical Barland) and use the `subplots`
    method to produce grouped bar charts (see [Figure 10-6](#mpl_barchart_multi)).
    Once again we specify the bar locations manually, adding two bar groups—this time
    with `ax.bar`. Note that our axes’ x-limits are automatically rescaled in a sensible
    fashion, at increments of 0.5:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 多组条形图尤其有用。在 [示例 10-6](#mpl_barchart_multi_code) 中，我们添加了更多的国家数据（来自一个虚构的 Barland），并使用
    `subplots` 方法生成了分组条形图（见 [图 10-6](#mpl_barchart_multi)）。再次手动指定条的位置，使用 `ax.bar`
    添加了两组条形图。请注意，我们的轴的 x 范围会以合理的方式自动重新缩放，以增量为 0.5：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Use the respective setter methods (`set_xlim`, in this case) if autoscaling
    doesn’t achieve the desired look.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自动缩放不能达到预期效果，请使用相应的设置方法（例如此处的 `set_xlim`）。
- en: Example 10-6\. Creating a grouped bar chart
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-6\. 创建分组条形图
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO8-1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO8-1)'
- en: With a width of `1` for our two-bar groups, this bar width gives 0.1 bar padding.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的双条组，使用 `1` 的宽度，这个条宽度提供了 0.1 的条填充。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO8-2)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO8-2)'
- en: Matplotlib supports standard HTML colors, taking hex values or a name.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 支持标准的 HTML 颜色，可以使用十六进制值或名称。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO8-3)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO8-3)'
- en: We use the `pad` argument to specify padding around the figure as a fraction
    of the font size.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `pad` 参数来指定围绕图像的填充，其值为字体大小的一部分。
- en: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO8-4)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO8-4)'
- en: This saves the figure at the high resolution of 200 dots per inch.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以每英寸 200 点的高分辨率保存图像。
- en: '![dpj2 1006](assets/dpj2_1006.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1006](assets/dpj2_1006.png)'
- en: Figure 10-6\. Grouped bar charts
  id: totrans-157
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-6\. 分组条形图
- en: It’s often useful to use horizontal bars, particularly if there are a lot of
    them and/or you are using tick labels, which are likely to run into one another
    if placed on the same line. Turning [Figure 10-6](#mpl_barchart_multi) on its
    side is easy enough, requiring only that we replace the `bar` method with its
    horizontal counterpart `barh` and switch the axis labels and limits (see [Example 10-7](#mpl_barchart_multi_h_code)
    and the resulting chart [Figure 10-7](#mpl_barchart_multi_h)).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条形图很多并且使用刻度标签，横向放置它们通常更有用，因为标签可能会相互重叠在同一行。将 [图 10-6](#mpl_barchart_multi)
    转为水平方向很容易，只需将 `bar` 方法替换为其水平对应方法 `barh`，并交换轴标签和限制（参见 [示例 10-7](#mpl_barchart_multi_h_code)
    和生成的图表 [图 10-7](#mpl_barchart_multi_h)）。
- en: Example 10-7\. Converting [Example 10-6](#mpl_barchart_multi_code) to horizontal
    bars
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-7\. 将 [示例 10-6](#mpl_barchart_multi_code) 转换为水平条形图
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO9-1)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO9-1)'
- en: To create a horizontal bar chart, we use `barh` in place of `bar`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建水平条形图，我们使用 `barh` 替代 `bar`。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO9-2)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO9-2)'
- en: A horizontal chart necessitates swapping the horizontal and vertical axes.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 水平图表需要交换水平和垂直轴。
- en: '![dpj2 1007](assets/dpj2_1007.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1007](assets/dpj2_1007.png)'
- en: Figure 10-7\. Turning the bars on their side
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-7\. 将条形图横置
- en: Stacked bars are easy to achieve in Matplotlib.^([10](ch10.xhtml#idm45607767371344))
    [Example 10-8](#mpl_barchart_multi_stack_code) converts [Figure 10-6](#mpl_barchart_multi)
    to a stacked form; [Figure 10-8](#mpl_barchart_multi_stack) shows the result.
    The trick is to use the bottom argument to `bar` to set the bottom of the raised
    bars as the top of the previous group.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 中实现堆叠条形图很容易。（参见 [10](ch10.xhtml#idm45607767371344)）[示例 10-8](#mpl_barchart_multi_stack_code)
    将 [图 10-6](#mpl_barchart_multi) 转为堆叠形式；[图 10-8](#mpl_barchart_multi_stack) 展示了结果。使用
    `bar` 方法的 bottom 参数将提升条的底部设置为前一组的顶部。
- en: Example 10-8\. Converting [Example 10-6](#mpl_barchart_multi_code) to stacked
    bars
  id: totrans-168
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-8\. 将 [示例 10-6](#mpl_barchart_multi_code) 转换为堆叠条形图
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO10-1)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO10-1)'
- en: The `foo_data` and `bar_data` bar groups share the same x-locations.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`foo_data` 和 `bar_data` 条形图组共享相同的 x 轴位置。'
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO10-2)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO10-2)'
- en: The bottom of the `bar_data` group is the top of the `foo_data`, providing stacked
    bars.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`bar_data` 组的底部是 `foo_data` 组的顶部，形成了堆叠条形图。'
- en: '![dpj2 1008](assets/dpj2_1008.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1008](assets/dpj2_1008.png)'
- en: Figure 10-8\. Stacked bar chart
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-8\. 堆叠条形图
- en: Scatter Plots
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 散点图
- en: Another useful chart is the scatter plot, which takes 2D arrays of points with
    options for point size, color, and more.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的图表是散点图，它接受点大小、颜色等选项的 2D 数组。
- en: '[Example 10-9](#mpl_scatter_code) shows the code for a quick scatter plot,
    using Matplotlib autoscaling for x and y limits. We create a noisy line by adding
    normally distributed random numbers (sigma of 10). [Figure 10-9](#mpl_scatterplot)
    shows the resulting chart.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 10-9](#mpl_scatter_code) 显示了一个快速散点图的代码，使用 Matplotlib 自动调整 x 和 y 的限制。我们通过添加正态分布的随机数（标准差为
    10）创建了一条嘈杂的线。[图 10-9](#mpl_scatterplot) 展示了生成的图表。'
- en: Example 10-9\. A simple scatter plot
  id: totrans-179
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-9\. 简单的散点图
- en: '[PRE27]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO11-1)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO11-1)'
- en: '`randn` gives normally distributed random numbers, which we scale to be within
    0 and 10 and to which we then add an x-dependent value.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`randn` 函数提供正态分布的随机数，我们将其缩放到 0 到 10 的范围内，并且添加一个依赖 x 轴的值。'
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO11-2)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO11-2)'
- en: The equally sized x and y arrays provide the point coordinates.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: x 和 y 数组的大小相等，提供了点的坐标。
- en: '![dpj2 1009](assets/dpj2_1009.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1009](assets/dpj2_1009.png)'
- en: Figure 10-9\. A simple scatter plot
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-9\. 简单的散点图
- en: We can adjust the size and color of individual points by passing an array of
    marker sizes and color indices to the current default colormap. One thing to note,
    which can be confusing, is that we are specifying the area of the markers’ bounding
    boxes, not the circles’ diameters. This means if we want points to double the
    diameter of the circles, we must increase the size by a factor of four.^([11](ch10.xhtml#idm45607767082480))
    In [Example 10-10](#mpl_scatter_sc_code), we add size and color information to
    our simple scatter plot, producing [Figure 10-10](#mpl_scatter_sc).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将标记大小和颜色索引数组传递给当前默认的颜色映射，我们可以调整单个点的大小和颜色。需要注意的一点（可能会令人困惑的一点）是，我们指定的是标记边界框的面积，而不是圆的直径。这意味着，如果我们希望点的直径是圆的两倍，我们必须将大小增加四倍。^([11](ch10.xhtml#idm45607767082480))
    在 [示例 10-10](#mpl_scatter_sc_code) 中，我们向简单的散点图添加了大小和颜色信息，生成了 [图 10-10](#mpl_scatter_sc)。
- en: Example 10-10\. Adjusting point size and color
  id: totrans-188
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-10\. 调整点的大小和颜色
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO12-1)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO12-1)'
- en: This produces 100 random color values between 0 and 1 for the default colormap.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成默认颜色映射的 100 个随机颜色值，取值范围在 0 到 1 之间。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO12-2)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO12-2)'
- en: We use the power notation `**` to square values between 2 and 10, the width
    range for our markers.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用幂符号 `**` 对介于 2 到 10 之间的值进行平方，这是我们标记宽度范围的方法。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO12-3)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO12-3)'
- en: We use the `alpha` argument to make our markers half-transparent.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `alpha` 参数使我们的标记半透明。
- en: '![dpj2 1010](assets/dpj2_1010.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1010](assets/dpj2_1010.png)'
- en: Figure 10-10\. Adjusting point size and color
  id: totrans-197
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-10\. 调整点的大小和颜色
- en: Matplotlib Colormaps
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 颜色映射
- en: Matplotlib has a huge variety of colormaps available, the choice of which can
    significantly improve the quality of your visualization. See [the colormap docs](https://oreil.ly/g8Q9b)
    for details.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 提供了大量的颜色映射可供选择，选择适当的颜色映射可以显著提高可视化质量。请参阅 [颜色映射文档](https://oreil.ly/g8Q9b)
    了解详情。
- en: Adding a regression line
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加回归线
- en: A regression line is a simple predictive model of the correlation between two
    variables, in this case the x and y coordinates of our scatter plot. The line
    is essentially a best fit through the points of the plot, and adding one to a
    scatter plot is a useful dataviz technique and a good way to demo Matplotlib and
    NumPy interaction.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 回归线是两个变量之间相关性的简单预测模型，本例中是散点图的 x 和 y 坐标。该线基本上是通过图的点拟合而成，并且将其添加到散点图中是一种有用的数据可视化技术，也是演示
    Matplotlib 和 NumPy 交互的良好方式。
- en: In [Example 10-11](#mpl_scatter_regression_code) NumPy’s very useful `polyfit`
    function is used to generate the gradient and constant of a best-fit line for
    the points defined by the x and y arrays. We then plot this line on the same axes
    as the scatter plot (see [Figure 10-11](#mpl_scatter_regression)).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [示例 10-11](#mpl_scatter_regression_code) 中，NumPy 的非常有用的 `polyfit` 函数用于生成由
    x 和 y 数组定义的点的最佳拟合直线的梯度和常数。然后，我们在相同的坐标轴上绘制这条直线和散点图（参见 [图 10-11](#mpl_scatter_regression)）。
- en: Example 10-11\. Scatter plot with regression line
  id: totrans-203
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-11\. 带有回归线的散点图
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO13-1)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO13-1)'
- en: We use NumPy’s `polyfit` in 1D to get a line gradient (`m`) and constant (`c`)
    for a best-fit line through our random points.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 NumPy 的 `polyfit` 在 1D 中获取一条最佳拟合直线通过我们随机点的线性梯度 (`m`) 和常数 (`c`)。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO13-2)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO13-2)'
- en: Use the gradient and constant to plot a line on the scatter plot’s axes (`y`
    = `mx` + `c`).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 使用梯度和常数在散点图的坐标轴上绘制一条直线 (`y` = `mx` + `c`)。
- en: '![dpj2 1011](assets/dpj2_1011.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1011](assets/dpj2_1011.png)'
- en: Figure 10-11\. Scatter plot with regression line
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-11\. 带有回归线的散点图
- en: It’s generally a good idea to plot confidence intervals when doing line regression.
    This gives an idea of how reliable the line fit is, based on the number and distribution
    of the points. Confidence intervals can be achieved with Matplotlib and NumPy,
    but it is a little awkward. Luckily, there is a library built on Matplotlib that
    has extra, specialized functions for statistical analysis and data visualization
    and, in the opinion of many, looks a lot better than Matplotlib’s defaults. That
    library is seaborn, which we are going to take a quick look at now.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行线性回归时，通常建议绘制置信区间。这可以根据点的数量和分布给出线性拟合的可靠性概念。可以使用Matplotlib和NumPy实现置信区间，但操作起来有点麻烦。幸运的是，有一个基于Matplotlib构建的库，它具有额外的专业函数用于统计分析和数据可视化，并且在许多人看来比Matplotlib的默认视觉效果更好。这个库就是seaborn，现在我们来简单看一下。
- en: seaborn
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: seaborn
- en: There are a number of libraries that wrap the powerful plotting abilities of
    Matplotlib in a more user-friendly guise^([12](ch10.xhtml#idm45607766687440))
    and, as important for us data visualizers, play nicely with pandas.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多库将Matplotlib强大的绘图能力封装成更用户友好的形式^([12](ch10.xhtml#idm45607766687440))，对于我们这些数据可视化者来说，这些库与pandas的兼容性非常好。
- en: '[Bokeh](https://bokeh.pydata.org/en/latest) is an interactive visualization
    library with the web in mind, producing browser-rendered output and therefore
    playing very nicely with IPython notebook. It’s a great achievement, with a design
    philosophy similar to D3’s.^([13](ch10.xhtml#idm45607766685872))'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bokeh](https://bokeh.pydata.org/en/latest)是一个专为网络设计的交互式可视化库，产生浏览器渲染的输出，因此非常适合IPython笔记本。它是一个伟大的成就，设计哲学与D3类似。^([13](ch10.xhtml#idm45607766685872))'
- en: But for the kind of interactive, exploratory dataviz necessary to get a feel
    for your data and suggest visualizations, I recommend [seaborn](https://oreil.ly/b2RpH).
    seaborn extends Matplotlib with some powerful statistical plots and is well integrated
    with the PyData stack, playing nicely with NumPy, pandas, and the statistical
    routines found in SciPy and [statsmodels](https://oreil.ly/peqqT).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，要进行交互式、探索性数据可视化，以便对数据有所感觉并建议可视化方法，我推荐使用[seaborn](https://oreil.ly/b2RpH)。seaborn通过一些强大的统计图扩展了Matplotlib，并且与PyData堆栈非常好地集成，与NumPy、pandas以及在SciPy和[statsmodels](https://oreil.ly/peqqT)中找到的统计例程良好地配合。
- en: One of the nice things about seaborn is that it doesn’t hide the Matplotlib
    API, allowing you to tweak your charts with Matplotlib’s extensive tools. In this
    sense, it’s not a replacement for Matplotlib and the relevant skills, but a very
    impressive extension.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn的一个好处是不隐藏Matplotlib的API，允许您使用Matplotlib丰富的工具调整图表。从这个意义上说，它并不取代Matplotlib及其相关技能，而是一个非常令人印象深刻的扩展。
- en: 'To work with seaborn, simply extend your standard Matplotlib imports:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用seaborn，只需扩展您的标准Matplotlib导入：
- en: '[PRE30]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Matplotlib provides a number of plotting styles that can be invoked by calling
    a `use` method with a style key. Let’s set the current style to seaborn’s default,
    which will provide a subtle gray grid to the charts:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib提供了许多绘图样式，可以通过调用`use`方法设置当前样式为seaborn的默认样式，这将为图表提供一个微妙的灰色网格：
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: You can check out all available styles and their visual effects in the [Matplotlib
    documentation](https://oreil.ly/9RTub).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[Matplotlib文档](https://oreil.ly/9RTub)中查看所有可用的样式及其视觉效果。
- en: 'Many of seaborn’s functions are designed to accept a pandas DataFrame, allowing
    you to specify, for example, the column values describing 2D scattered points.
    Let’s take our existing x and y arrays from [Example 10-9](#mpl_scatter_code)
    and use them to make some dummy data:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn的许多函数都设计成接受pandas DataFrame，你可以指定描述二维散点的列值，例如来自[示例 10-9](#mpl_scatter_code)的现有x和y数组。让我们使用它们来生成一些虚拟数据：
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We now have some `data` with columns of x (`'dummy x'`) and y (`'dummy y'`)
    values. [Example 10-12](#mpl_scatter_seaborn_code) demonstrates the use of seaborn’s
    dedicated linear regression plot `lmplot`, which produces the chart in [Figure 10-12](#mpl_scatter_seaborn).
    Note that for some seaborn plots, to adjust figure size we pass a size (height)
    in inches and an aspect ratio (width/height). Note also that seaborn shares `pyplot`’s
    global context.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一些带有x（'dummy x'）和y（'dummy y'）值的`data`。[示例 10-12](#mpl_scatter_seaborn_code)演示了使用seaborn专用的线性回归绘图`lmplot`，生成了[图 10-12](#mpl_scatter_seaborn)中的图表。请注意，对于某些seaborn绘图，我们可以通过传递以英寸为单位的大小（高度）和宽高比来调整图形大小。还请注意，seaborn共享`pyplot`的全局上下文。
- en: Example 10-12\. Linear regression plot with seaborn
  id: totrans-225
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 10-12\. 使用seaborn进行线性回归绘图
- en: '[PRE33]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO14-1)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO14-1)'
- en: The `x` and `y` arguments specify the column names of the DataFrame data that
    define the coordinates of the plot points.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`x` 和 `y` 参数指定了定义图形点坐标的 DataFrame 数据的列名。'
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO14-2)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO14-2)'
- en: To set figure size, we provide the height in inches and an aspect ratio of width/height.
    Here we’ll use a ratio of two to better fit this book’s page format.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置图形大小，我们提供以英寸为单位的高度和宽高比。在这里，我们将使用 2 的比率以更好地适应本书的页面格式。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO14-3)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO14-3)'
- en: seaborn shares the `pyplot` global context, allowing you to save its plots as
    you would Matplotlib’s.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn 共享 `pyplot` 的全局上下文，允许您保存其绘制的图像，就像使用 Matplotlib 一样。
- en: '![dpj2 1012](assets/dpj2_1012.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1012](assets/dpj2_1012.png)'
- en: Figure 10-12\. Linear regression plot with seaborn
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-12\. 使用 seaborn 的线性回归图
- en: 'As you would expect from a library that places an emphasis on attractive-looking
    plots, seaborn allows a lot of visual customization. Let’s make a few changes
    to the look of [Figure 10-12](#mpl_scatter_seaborn) and adjust the confidence
    interval to the [standard error](https://oreil.ly/gOLOo) estimate of 68% (see
    [Figure 10-13](#mpl_scatter_seaborn_custom) for the result):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所期待的那样，seaborn 这个强调画出吸引人的图形的库，允许大量的视觉定制。让我们对 [Figure 10-12](#mpl_scatter_seaborn)
    的外观进行一些改变，并将置信区间调整为 68% 的标准误估计（查看 [Figure 10-13](#mpl_scatter_seaborn_custom)
    的结果）：
- en: '[PRE34]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO15-1)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO15-1)'
- en: Provide the scatter plot component’s keyword arguments, setting our points’
    color to slate gray.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 提供散点图组件的关键字参数，将点的颜色设置为石板灰。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO15-2)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO15-2)'
- en: Provide the line plot component’s keyword arguments, setting line width and
    style.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 提供线图组件的关键字参数，设置线宽和样式。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO15-3)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO15-3)'
- en: Set the plot markers to diamonds using Matplotlib marker code *D*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Matplotlib 的标记设置为钻石，使用 Matplotlib 标记代码 *D*。
- en: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO15-4)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO15-4)'
- en: We set a confidence interval of 68%, the standard error estimate.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了 68% 的置信区间，即标准误估计。
- en: '![dpj2 1013](assets/dpj2_1013.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1013](assets/dpj2_1013.png)'
- en: Figure 10-13\. Customizing the seaborn scatter plot
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-13\. 自定义 seaborn 散点图
- en: seaborn offers a number of useful plots beyond Matplotlib’s basic set. Let’s
    take a look at one of the most interesting, using seaborn’s FacetGrid to plot
    reflections of multidimensional data.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn 提供了一些比 Matplotlib 基本设置更有用的图形。让我们来看看其中最有趣的之一，使用 seaborn 的 FacetGrid 绘制多维数据的反射。
- en: FacetGrids
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FacetGrids
- en: Often referred to as “lattice” or “trellis” plotting, the ability to draw multiple
    instances of the same plot on different subsets of your dataset is a good way
    to get a bird’s-eye view of your data. Large amounts of information can be presented
    in one plot, and relationships between the different dimensions can be quickly
    apprehended. This technique is related to the [small multiples](https://oreil.ly/Ck1fT)
    popularized by Edward Tufte.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 常被称为“格栅”或“镶嵌”绘图，能够在数据集的不同子集上绘制多个相同图形实例的能力，是一种鸟瞰数据的好方法。大量信息可以在一个图中呈现，并且可以快速理解不同维度之间的关系。这种技术与
    Edward Tufte 推广的“小多面板图”有关。
- en: FacetGrids require the data to be in the form of a pandas DataFrame (see [“The
    DataFrame”](ch08.xhtml#pandas_objects)) and in a form referred to by Hadley Wickham,
    creator of ggplot2, as “tidy,” meaning each column in the DataFrame should be
    a variable and each row an observation.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: FacetGrids 要求数据以 pandas DataFrame 的形式存在（参见 [“DataFrame”](ch08.xhtml#pandas_objects)），并且按照
    Hadley Wickham 的说法，应该是“整洁”的形式，意味着 DataFrame 的每一列应该是一个变量，每一行是一个观察结果。
- en: 'Let’s use Tips, one of seaborn’s test datasets,^([14](ch10.xhtml#idm45607766287520))
    to show a FacetGrid in action. Tips is a small set of data showing the distribution
    of tips by various dimensions, such as day of the week or whether the customer
    was a smoker.^([15](ch10.xhtml#idm45607766286048)) First, let’s load our Tips
    dataset into a pandas DataFrame using the `load_dataset` method:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Tips，seaborn的一个测试数据集，^([14](ch10.xhtml#idm45607766287520))展示FacetGrid的工作原理。Tips是一个小数据集，显示了小费的分布情况，根据不同维度如周几或顾客是否吸烟。^([15](ch10.xhtml#idm45607766286048))首先，让我们使用`load_dataset`方法将Tips数据加载到pandas
    DataFrame中：
- en: '[PRE35]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To create a FacetGrid, we specify the `tips` DataFrame and a column of interest,
    such as the smoking status of the customer. This column will be used to create
    our plot groups. There are two categories in the smoker column (`''smoker=Yes''`
    and `''smoker=No''`), which means there will be two charts in our facet-grid.
    We then use the grid’s `map` method to create multiple scatter plots of tip size
    against total bill:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个FacetGrid，我们指定`tips` DataFrame和一个感兴趣的列，如顾客的吸烟状态。该列将用于创建我们的绘图组。吸烟列中有两个类别（'smoker=Yes'和'smoker=No'），这意味着我们的facet-grid中将有两个图表。然后，我们使用grid的`map`方法创建小费与总账单的多个散点图：
- en: '[PRE36]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO16-1)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO16-1)'
- en: '`map` takes a plot class, in this case `scatter`, and two (`tips`) dimensions
    required for this scatter plot.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`map`接受一个绘图类，本例中为`scatter`，以及此散点图所需的两个（`tips`）维度。'
- en: This produces the two scatter plots shown in [Figure 10-14](#mpl_facetgrid_1),
    one for each smoker status, with tips and total bills correlated.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生两个散点图，如[Figure 10-14](#mpl_facetgrid_1)所示，一个用于每种吸烟状态，显示了小费与总账单的相关性。
- en: '![dpj2 1014](assets/dpj2_1014.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1014](assets/dpj2_1014.png)'
- en: Figure 10-14\. A seaborn FacetGrid using scatter plots
  id: totrans-259
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-14\. 使用散点图的seaborn FacetGrid
- en: 'We can include another dimension of the `tips` data by specifying the marker
    to be used in our scatter plots. Let’s make it a red diamond for females and a
    blue square for males:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定要在散点图中使用的标记来包含`tips`数据的另一个维度。让我们将其设置为红色菱形表示女性，蓝色方形表示男性：
- en: '[PRE37]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO17-1)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO17-1)'
- en: Adds a marker color (`hue`) for the `sex` dimension with diamond (`D`) and square
    (`s`) shapes, and uses our color palette (`pal`) to make them red and blue.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 为`sex`维度添加了标记颜色（`hue`），使用了菱形（`D`）和方形（`s`）形状，并使用我们的调色板（`pal`）使它们呈现红色和蓝色。
- en: You can see the resulting FacetGrid in [Figure 10-15](#mpl_facetgrid_2).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Figure 10-15](#mpl_facetgrid_2)中看到生成的FacetGrid。
- en: '![dpj2 1015](assets/dpj2_1015.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1015](assets/dpj2_1015.png)'
- en: Figure 10-15\. Scatter plot with diamond and square markers for sex
  id: totrans-266
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-15\. Scatter plot with diamond and square markers for sex
- en: 'We can use rows as well as columns to create subsets of the data by dimension.
    Combining the two allows, with the help of a `regplot`,^([16](ch10.xhtml#idm45607766007680))
    five dimensions to be explored:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用行和列来创建数据维度的子集。结合一个`regplot`，^([16](ch10.xhtml#idm45607766007680))可以探索五个维度：
- en: '[PRE38]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO18-1)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO18-1)'
- en: Adds a time row to separate tips by lunch and dinner.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个时间行，将小费按午餐和晚餐分开。
- en: '[Figure 10-16](#mpl_facetgrid_tips3) shows four `regplot`s producing a linear-regression
    model fit with confidence intervals for female and male hue-groups. The plot titles
    show the data subset being used, each row having the same time and smoker status.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 10-16](#mpl_facetgrid_tips3)展示了四个`regplot`，为女性和男性hue组生成带有置信区间的线性回归模型拟合。图表标题显示正在使用的数据子集，每行具有相同的时间和吸烟者状态。'
- en: '![dpj2 1016](assets/dpj2_1016.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1016](assets/dpj2_1016.png)'
- en: Figure 10-16\. Visualizing five dimensions
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 10-16\. Visualizing five dimensions
- en: 'We can achieve the same effect using the `lmplot` we saw in [Example 10-12](#mpl_scatter_seaborn_code),
    which wraps the functionality of FacetGrid and `regplot` for convenience. The
    following code produces [Figure 10-16](#mpl_facetgrid_tips3):'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过`lmplot`来实现与我们在[Example 10-12](#mpl_scatter_seaborn_code)中看到的相同效果，它封装了FacetGrid和`regplot`以便于使用。以下代码生成[Figure 10-16](#mpl_facetgrid_tips3)：
- en: '[PRE39]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO19-1)'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO19-1)'
- en: Note the use of a `markers` keyword as opposed to the `kws_hue` dictionary we
    used with the FacetGrid plot.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`markers`关键字，而不是我们在FacetGrid图中使用的`kws_hue`字典。
- en: '`lmplot` offers a nice shortcut to producing FacetGrid `regplot`s, but FacetGrid’s
    `map` allows you to use the full panoply of seaborn and Matplotlib charts to create
    plots on dimensional subsets. It’s a very powerful technique and a great way to
    drill down into your data.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`lmplot` 提供了一个很好的快捷方式来生成 FacetGrid 的 `regplot`，但是 FacetGrid 的 `map` 允许您使用 seaborn
    和 Matplotlib 图表的全套来在维度子集上创建图表。这是一种非常强大的技术，也是深入了解数据的一个很好的方式。'
- en: PairGrids
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PairGrid
- en: PairGrids are another rather cool seaborn plot type that provide a way to quickly
    assess multidimensional data. Unlike with FacetGrids, you don’t divide the dataset
    into subsets that are then compared by designated dimensions. With PairGrids,
    the dataset’s dimensions are all compared pair-wise in a square grid. By default
    all dimensions are compared, but you can specify which ones get plotted by providing
    a list to the `vars` parameter when declaring the PairGrid.^([17](ch10.xhtml#idm45607765677072))
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: PairGrid 是另一种相当酷的 seaborn 绘图类型，提供了一种快速评估多维数据的方式。与 FacetGrid 不同，您不会将数据集分成子集，然后按指定的维度进行比较。使用
    PairGrid，数据集的各个维度将按成对方式在一个方形网格中进行比较。默认情况下，将比较所有维度，但是您可以通过在声明 PairGrid 时向 `vars`
    参数提供列表来指定要绘制的维度。^([17](ch10.xhtml#idm45607765677072))
- en: 'Let’s demonstrate the utility of this pair-wise comparison by using the classic
    Iris dataset, showing some vital statistics for a set containing members of three
    Iris species. First, we’ll load the example dataset:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用经典的 Iris 数据集来演示这种成对比较的效用，展示包含三种 Iris 种类成员的一组数据的一些重要统计信息。首先，我们加载示例数据集：
- en: '[PRE40]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To capture the relationship between petal and sepal dimensions by species,
    we first create a `PairGrid` object, set its hue to `species`, and then use its
    mapping methods to create plots on and off the diagonal of the pair-wise grid,
    producing the charts in [Figure 10-17](#mpl_pairgrid_iris):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕捉按物种分组的花瓣和萼片尺寸之间的关系，我们首先创建一个 `PairGrid` 对象，将其色调设置为 `species`，然后使用其映射方法在成对网格的对角线上和非对角线上创建图表，生成图表见
    [Figure 10-17](#mpl_pairgrid_iris)：
- en: '[PRE41]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO20-1)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_data_with_matplotlib_CO20-1)'
- en: Tweaks the font size using seaborn’s `set_theme` method (see [the documentation](https://oreil.ly/rSmrH)
    for the full list of available tweaks).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 seaborn 的 `set_theme` 方法调整字体大小（参见[文档](https://oreil.ly/rSmrH)获取可用调整项的完整列表）。
- en: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO20-2)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_data_with_matplotlib_CO20-2)'
- en: Sets the markers and subbars to be colored by species.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将标记和子条设置为按物种着色。
- en: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO20-3)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_data_with_matplotlib_CO20-3)'
- en: Places histograms of the species’ dimensions on the grid’s diagonal.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格的对角线上放置物种尺寸的直方图。
- en: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO20-4)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_data_with_matplotlib_CO20-4)'
- en: Uses standard scatter plots to compare the dimensions of the diagonal.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准散点图比较对角线尺寸。
- en: '![dpj2 1017](assets/dpj2_1017.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1017](assets/dpj2_1017.png)'
- en: Figure 10-17\. PairGrid summation of Iris measures
  id: totrans-294
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-17\. Iris 测量的 PairGrid 汇总
- en: 'As you can see in [Figure 10-17](#mpl_pairgrid_iris), a few lines of seaborn
    go a long way in creating a richly informative set of plots correlating the different
    Iris metrics. This plot is known as a [scatter-plot matrix](https://oreil.ly/UAJ8T)
    and is a great way of finding linear correlations between pairs of variables in
    a multivariate set. As it stands, there is redundancy in the grid: for example,
    plots for `sepal_width-petal_length` and `petal_length-septal_width`. `PairGrid`
    gives you the opportunity to use the redundant plots above or below the main diagonal
    to provide a different reflection of the data. Check out some of the examples
    [at the seaborn docs](https://stanford.io/1YydS2V) for more info.^([18](ch10.xhtml#idm45607765484192))'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在 [Figure 10-17](#mpl_pairgrid_iris) 中看到的，seaborn 的几行代码就能创建一组丰富信息的图表，相关联不同
    Iris 测量指标。这种图表称为 [散点矩阵](https://oreil.ly/UAJ8T)，是在多变量集中查找变量对线性相关性的一个很好的方式。目前，网格中存在冗余：例如，`sepal_width-petal_length`
    和 `petal_length-sepal_width` 的图表。`PairGrid` 提供了使用主对角线之上或之下的冗余图表来提供数据的不同反映的机会。查看一些
    seaborn 文档中的示例以获取更多信息。^([18](ch10.xhtml#idm45607765484192))
- en: I’ve covered a few of the seaborn plots in this section, and you’ll be seeing
    a few more when we explore our Nobel Prize dataset in the next chapter. But seaborn
    has a lot of other very handy and very powerful plotting tools, mainly of a statistical
    nature. For further investigation, I’d recommend starting with the [main seaborn
    documentation](https://stanford.io/28L8ezk). There are some nice examples, a well-documented
    API, and some good tutorials that should complement what you’ve learned in this
    chapter.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced Matplotlib, Python’s plotting powerhouse. It’s a big,
    mature library with lots of documentation and an active community. If you have
    a particular customization in mind, chances are there’s an example out there somewhere.
    I’d recommend firing up a [Jupyter notebook](https://jupyter.org) and playing
    around with a dataset.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: We saw how seaborn extends Matplotlib with some useful statistical methods and
    that it has what many consider to be superior aesthetics. It also allows access
    to the Matplotlib figure and axes internals, allowing full customization if required.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll use Matplotlib along with pandas to explore our freshly
    scraped and cleaned Nobel dataset. We’ll use some of the plot types demonstrated
    in this chapter and see a few useful new ones.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch10.xhtml#idm45607769764064-marker)) If you have errors trying to start
    a GUI session, try changing the backend setting (e.g., if using macOS and `%matplotlib
    qt` doesn’t work, try `%matplotlib osx`).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch10.xhtml#idm45607769728560-marker)) IPython has a large number of such
    functions to enable a whole slew of useful extras to the vanilla Python interpreter.
    Check them out [on the IPython website](https://oreil.ly/0gUSc).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch10.xhtml#idm45607769721600-marker)) This was inspired by [MATLAB](https://oreil.ly/sw9KZ).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch10.xhtml#idm45607769467872-marker)) You can find details of Matplotlib’s
    line styles in [its documentation](https://oreil.ly/iqlBE).
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch10.xhtml#idm45607769227712-marker)) See [the docs](https://oreil.ly/upz5A)
    for more details.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: ^([6](ch10.xhtml#idm45607769200272-marker)) See [the Matplotlib website](https://oreil.ly/oD0lN)
    for details.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: ^([7](ch10.xhtml#idm45607768868400-marker)) As well as providing many formats,
    it also understands [LaTeX math mode](https://www.latex-project.org), which is
    a language that will allow you to use mathematical symbols in the titles, legends,
    and the like. This is one of the reasons Matplotlib is much beloved by academics,
    as it is quite capable of journal-quality images.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: ^([8](ch10.xhtml#idm45607768834368-marker)) More details are available on the
    [Matplotlib website](https://oreil.ly/GacYP).
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: ^([9](ch10.xhtml#idm45607768572320-marker)) The handy `tight_layout` option
    assumes grid-layout subplots.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: ^([10](ch10.xhtml#idm45607767371344-marker)) It’s questionable whether stacked
    bar charts are a particularly good way of appreciating groups of data. See [Solomon
    Messing’s blog](https://oreil.ly/nClO0) for a nice discussion and one example
    of “good” use.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch10.xhtml#idm45607767371344-marker)) 叠加条形图是否特别适合理解数据组？请参阅[Solomon Messing的博客](https://oreil.ly/nClO0)，进行精彩的讨论，并提供一个“好”使用的例子。
- en: ^([11](ch10.xhtml#idm45607767082480-marker)) Setting marker size, rather than
    width or radius, is actually a good default, making it proportional to whatever
    value we are trying to reflect.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch10.xhtml#idm45607767082480-marker)) 设置标记大小而不是宽度或半径，实际上是一个很好的默认选择，使其与我们试图反映的任何值成比例。
- en: ^([12](ch10.xhtml#idm45607766687440-marker)) It’s generally agreed that Matplotlib’s
    defaults aren’t that great and making them better is an easy win for any wrapper.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: ^([12](ch10.xhtml#idm45607766687440-marker)) 普遍认为Matplotlib的默认设置并不那么好，通过改进可以轻松提升任何包的表现。
- en: ^([13](ch10.xhtml#idm45607766685872-marker)) Both D3 and Bokeh tip their hats
    to the classic visualization text, Leland Wilkinson’s *The Grammar of Graphics*
    (Springer).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: ^([13](ch10.xhtml#idm45607766685872-marker)) D3和Bokeh都向经典的可视化著作《图形语法》（Springer，Leland
    Wilkinson著）致敬。
- en: ^([14](ch10.xhtml#idm45607766287520-marker)) seaborn has a number of handy datasets,
    which you can find [on GitHub](https://oreil.ly/clELR).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: ^([14](ch10.xhtml#idm45607766287520-marker)) seaborn有一些方便的数据集，你可以在[GitHub](https://oreil.ly/clELR)上找到。
- en: ^([15](ch10.xhtml#idm45607766286048-marker)) The Tips dataset uses sex as a
    category, whereas the datasets in this book have used gender. In the past these
    tended to be used interchangeably, but this is no longer the case. See this [Yale
    School of Medicine article](https://oreil.ly/P0zWt) for an explanation.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ^([15](ch10.xhtml#idm45607766286048-marker)) Tips数据集使用性别作为一个类别，而本书的数据集使用性别。过去这些词汇通常可以互换使用，但现在情况已经不同。请参阅[Yale
    School of Medicine的文章](https://oreil.ly/P0zWt)以获取解释。
- en: ^([16](ch10.xhtml#idm45607766007680-marker)) `regplot`, short for regression
    plot, is equivalent to `lmplot`, used in [Example 10-12](#mpl_scatter_seaborn_code).
    The latter combines `regplot` and FacetGrid for convenience.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: ^([16](ch10.xhtml#idm45607766007680-marker)) `regplot`，即回归图，相当于`lmplot`，在[示例 10-12](#mpl_scatter_seaborn_code)中有使用。后者结合了`regplot`和FacetGrid以提供便利。
- en: ^([17](ch10.xhtml#idm45607765677072-marker)) There are also `x_vars` and `y_vars`
    parameters enabling you to specify nonsquare grids.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: ^([17](ch10.xhtml#idm45607765677072-marker)) 还有`x_vars`和`y_vars`参数，使您能够指定非方形网格。
- en: ^([18](ch10.xhtml#idm45607765484192-marker)) For the curious, there’s a D3 example
    that builds a scatter-plot matrix at the [*bl.ocks.org* site](https://oreil.ly/ox8VW).
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: ^([18](ch10.xhtml#idm45607765484192-marker)) 如果你感兴趣，有一个D3的例子在[*bl.ocks.org*站点](https://oreil.ly/ox8VW)上构建了一个散点矩阵。
