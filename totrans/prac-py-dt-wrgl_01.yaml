- en: Chapter 1\. Introduction to Data Wrangling and Data Quality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 介绍数据整理和数据质量
- en: 'These days it seems like data is the answer to everything: we use the data
    in product and restaurant reviews to decide what to buy and where to eat; companies
    use the data about what we read, click, and watch to decide what content to produce
    and which advertisements to show; recruiters use data to decide which applicants
    get job interviews; the government uses data to decide everything from how to
    allocate highway funding to where your child goes to school. Data—whether it’s
    a basic table of numbers or the foundation of an “artificial intelligence” system—permeates
    our lives. The pervasive impact that data has on our experiences and opportunities
    every day is precisely why data wrangling is—and will continue to be—an essential
    skill for anyone interested in understanding and influencing how data-driven systems
    operate. Likewise, the ability to assess—and even improve—data quality is indispensable
    for anyone interested in making these sometimes (deeply) flawed systems work better.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，似乎数据是解决所有问题的答案：我们利用产品和餐厅评论中的数据来决定购买和就餐地点；公司利用我们阅读、点击和观看的数据来决定生产什么内容和展示哪些广告；招聘人员使用数据来决定哪些申请者可以获得面试机会；政府利用数据决定从如何分配公路资金到您的孩子就读学校的所有事务。数据——无论是简单的数字表格还是“人工智能”系统的基础——渗透着我们的生活。数据对我们每天的经历和机会产生的广泛影响正是为何数据整理——以及将继续成为——任何有兴趣了解和影响数据驱动系统运作方式的人必备的技能。同样，评估——甚至改善——数据质量的能力对于希望使这些有时（深度）有缺陷的系统更加有效的人来说也是不可或缺的。
- en: 'Yet because both the terms *data wrangling* and *data quality* will mean different
    things to different people, we’ll begin this chapter with a brief overview of
    the three main topics addressed in this book: data wrangling, data quality, and
    the Python programming language. The goal of this overview is to give you a sense
    of my approach to these topics, partly so you can determine if this book is right
    for you. After that, we’ll spend some time on the necessary logistics of how to
    access and configure the software tools and other resources you’ll need to follow
    along with and complete the exercises in this book. Though all of the resources
    that this book will reference are free to use, many programming books and tutorials
    take for granted that readers will be coding on (often quite expensive) computers
    that they own. Since I *really* believe that anyone who wants to can learn to
    wrangle data with Python, however, I wanted to make sure that the material in
    this book can work for you even if you don’t have access to a full-featured computer
    of your own. To help ensure this, all of the solutions you’ll find here and in
    the following chapters were written and tested on a Chromebook; they can also
    be run using free, online-only tools using either your own device or a shared
    computer, for example, at school or a public library. I hope that by illustrating
    how accessible not just the knowledge but also the tools of data wrangling can
    be will encourage you to explore this exciting and empowering practice.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管术语*数据整理*和*数据质量*对不同人意味着不同的事物，我们将从本章开始简要概述本书涉及的三个主要主题：数据整理、数据质量和Python编程语言。这一概述的目标是让您对我对这些主题的方法有所了解，部分原因是您可以判断本书是否适合您。之后，我们将花一些时间讨论如何访问和配置软件工具及其他资源，这些工具和资源是您需要跟随和完成本书中练习所必需的。尽管本书引用的所有资源都是免费使用的，但许多编程书籍和教程默认读者会在自己拥有的（通常是相当昂贵的）计算机上编程。然而，由于我*真的*相信任何有意愿的人都可以学会使用Python整理数据，我希望确保即使您没有自己的功能齐全的计算机，本书中的内容也可以为您提供帮助。为了帮助确保这一点，您在本书和接下来的章节中找到的所有解决方案都是在Chromebook上编写和测试的；它们也可以使用免费的在线工具在您自己的设备或学校或公共图书馆等地的共享计算机上运行。我希望通过展示数据整理的知识和工具不仅是可获得的，而且是激发和赋权的实践，来鼓励您探索这个令人兴奋的实践领域。
- en: What Is “Data Wrangling”?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “数据整理”是什么？
- en: 'Data wrangling is the process of taking “raw” or “found” data, and transforming
    it into something that can be used to generate insight and meaning. Driving every
    substantive data wrangling effort is a *question*: something about the world you
    want to investigate or learn more about. Of course, if you came to this book because
    you’re really excited about learning to program, then data wrangling can be a
    great way to get started, but let me urge you now not to try to skip straight
    to the programming without engaging the data quality processes in the chapters
    ahead. Because as much as data wrangling may benefit from programming skills,
    it is about much more than simply learning how to access and manipulate data;
    it’s about making judgments, inferences, and selections. As this book will illustrate,
    most data that is readily available is not especially good *quality*, so there’s
    no way to do data wrangling without making choices that will influence the substance
    of the resulting data. To attempt data wrangling without considering data quality
    is like trying drive a car without steering: you may get *somewhere*—and fast!—but
    it’s probably nowhere you want to be. If you’re going to spend time wrangling
    and analyzing data, you want to try to make sure it’s at least *likely* to be
    worth the effort.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据整理是将“原始”或“找到的”数据转换为可用于生成见解和意义的过程。驱动每一个实质性数据整理工作的是一个*问题*：关于您想调查或了解更多的世界的某些内容。当然，如果您来到这本书是因为您对学习编程感到非常兴奋，那么数据整理可以是一个很好的开始方法，但让我现在敦促您不要试图在没有参与前几章节中的数据质量过程的情况下直接跳到编程。因为数据整理虽然可以从编程技能中受益，但它远不止于学习如何访问和操作数据；它涉及做出判断、推理和选择。正如本书将阐明的那样，大多数容易获取的数据质量并不特别好*质量*，因此如果不考虑数据质量就尝试进行数据整理，就像试图在没有方向盘的情况下驾驶汽车一样：您可能会到达*某个地方*——并且很快！——但那可能不是您想要去的地方。如果您打算花时间整理和分析数据，您应该尽量确保这至少是*有可能*值得努力的数据。
- en: Just as importantly, though, there’s no better way to learn a new skill than
    to connect it to something you genuinely *want* to get “right,” because that personal
    interest is what will carry you through the inevitable moments of frustration.
    This doesn’t mean that question you choose has to be something of global importance.
    It can be a question about your favorite video games, bands, or types of tea.
    It can be a question about your school, your neighborhood, or your social media
    life. It can be a question about economics, politics, faith, or money. It just
    has to be something that *you* genuinely care about.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与此同样重要的是，没有比将新技能与您真正*想要*做到“正确”的事情联系起来更好的学习方式，因为个人兴趣将帮助您度过不可避免的挫折。这并不意味着您选择的问题必须具有全球重要性。它可以是关于您喜爱的视频游戏、乐队或茶叶类型的问题。它可以是关于您学校、社区或社交媒体生活的问题。它可以是关于经济、政治、信仰或金钱的问题。它只需是*您*真正关心的事情。
- en: 'Once you have your question in hand, you’re ready to begin the data wrangling
    process. While the specific steps may need adjusting (or repeating) depending
    on your particular project, in principle data wrangling involves some or all of
    the following steps:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您掌握了问题，您就可以开始数据整理过程。尽管具体步骤可能需要根据您的特定项目进行调整（或重复），但原则上，数据整理涉及以下一些或所有步骤：
- en: Locating or collecting data
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位或收集数据
- en: Reviewing the data
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查数据
- en: “Cleaning,” standardizing, transforming, and/or augmenting the data
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “清理”，标准化，转换和/或增强数据
- en: Analyzing the data
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析数据
- en: Visualizing the data
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可视化数据
- en: Communicating the data
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传达数据
- en: 'The time and effort required for each of these steps, of course, can vary considerably:
    if you’re looking to speed up a data wrangling task you already do for work, you
    may already have a dataset in hand and know basically what it contains. Then again,
    if you’re trying to answer a question about city spending in your community, collecting
    the data may be the most challenging part of your project.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每个步骤所需的时间和精力可能差异很大：如果您希望加快您已经在工作中进行的数据整理任务，您可能已经掌握了数据集，并基本知道其包含内容。另一方面，如果您试图回答关于您社区中城市支出的问题，那么收集数据可能是您项目中最具挑战性的部分。
- en: Also, know that, despite my having numbered the preceding list, the data wrangling
    process is really more of a cycle than it is a linear set of steps. More often
    than not, you’ll need to revisit earlier steps as you learn more about the meaning
    and context of the data you’re working with. For example, as you analyze a large
    dataset, you may come across surprising patterns or values that cause you to question
    assumptions you may have made about it during the “review” step. This will almost
    always mean seeking out more information—either from the original data source
    or completely new ones—in order to understand what is really happening before
    you can move on with your analysis or visualization. Finally, while I haven’t
    explicitly included it in the list, it would be a little more accurate to start
    each of the steps with *Researching and*. While the “wrangling” parts of our work
    will focus largely on the dataset(s) we have in front of us, the “quality” part
    is almost all about research and context, and both of these are integral to every
    stage of the data wrangling process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，尽管我已经对前述列表进行了编号，但数据处理过程实际上更像是一个循环而不是线性的步骤集。往往情况是，随着你对正在处理的数据的含义和背景了解得更多，你需要重新审视早期的步骤。例如，在分析大型数据集时，你可能会发现令人惊讶的模式或值，这会导致你对在“审查”步骤中可能做出的假设产生疑问。这几乎总是意味着需要获取更多信息——要么来自原始数据源，要么是完全新的数据源——以便在继续分析或可视化之前真正理解正在发生的事情。最后，虽然我没有明确将其列入列表中，但每个步骤最好以*研究和*开头会更加准确。虽然我们工作中的“整理”部分主要集中在我们面前的数据集（们）上，但“质量”部分几乎完全是关于研究和背景的，并且这两者对数据整理过程的每个阶段都是至关重要的。
- en: If this all seems a little overwhelming right now—don’t worry! The examples
    in this book are built around real datasets, and as you follow along with coding
    and quality-assessment processes, this will all begin to feel much more organic.
    And if you’re working through your own data wrangling project and start to feel
    a little lost, just keep reminding yourself of the question you are trying to
    answer. Not only will that remind you why you’re bothering to learn about all
    the minutiae of data formats and API access keys,^([1](ch01.html#idm45143428836064))
    it will also almost always lead you intuitively to the next “step” in the wrangling
    process—whether that means visualizing your data or doing just a *little* more
    research in order to improve its context and quality.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在所有这些看起来有点令人不知所措，请不要担心！本书中的示例都是围绕真实数据集构建的，当你跟随编码和质量评估过程时，这一切将开始感觉更加自然。如果你正在进行自己的数据整理项目，并开始感到有点迷茫，只需不断提醒自己你试图回答的问题。这不仅会提醒你为什么要费心学习关于数据格式和API访问密钥的细枝末节，^([1](ch01.html#idm45143428836064))
    它几乎总是会直观地引导你进入数据整理过程的下一个“步骤”——无论是可视化数据还是进行一点点*更多*的研究以改善其背景和质量。
- en: What Is “Data Quality”?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是“数据质量”？
- en: There is plenty of data out in the world and plenty of ways to access and collect
    it. But all data is not created equal. Understanding data quality is an essential
    part of data wrangling because any data-driven insight can only be as good as
    the data it was built upon.^([2](ch01.html#idm45143428764544)) So if you’re trying
    to use data to understand something meaningful about the world, you have to first
    make sure that the data you have accurately reflects that world. As we’ll see
    in later chapters (Chapters [3](ch03.html#chapter3) and [6](ch06.html#chapter6),
    in particular), the work of improving data quality is almost never as clear-cut
    as the often tidy-looking, neatly labeled rows and columns of data you’ll be working
    with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上有大量的数据和访问和收集它的方式。但并非所有数据都是平等的。理解数据质量是数据整理的重要组成部分，因为任何基于数据驱动的洞见都只能像其构建在之上的数据一样好。^([2](ch01.html#idm45143428764544))
    因此，如果你试图用数据理解世界的某些有意义的事物，你必须首先确保你所拥有的数据能够准确反映这个世界。正如我们将在后面的章节中看到（特别是第[3](ch03.html#chapter3)章和第[6](ch06.html#chapter6)章），改进数据质量的工作几乎永远不像通常看起来整洁的、标签清晰的行和列数据那样简单明了。
- en: That’s because—despite the use of terms like *machine learning* and *artificial
    intelligence*—the only thing that computational tools can do is follow the directions
    given to them, using the data provided. And even the most complex, sophisticated,
    and abstract data is irrevocably human in its substance, because it is the result
    of human decisions about what to measure and how. Moreover, even today’s most
    advanced computer technologies make “predictions” and “decisions” via what amounts
    to large-scale pattern matching—patterns that exist in the particular selections
    of data that the *humans* “training” them provide. *Computers do not have original
    ideas or make creative leaps*; they are fundamentally bad at many tasks (like
    explaining the “gist” of an argument or the plot of a story) that humans find
    intuitive. On the other hand, computers excel at performing repetitive calculations,
    very very fast, without getting bored, tired, or distracted. In other words, while
    computers are a fantastic complement to human judgment and intelligence, they
    can only amplify them—not substitute for them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为——尽管使用了像*机器学习*和*人工智能*这样的术语——计算工具能做的唯一事情就是按照给定给它们的指令使用提供的数据。即使是最复杂、最先进和最抽象的数据在其实质上也是不可逆转地人类的，因为它是关于如何测量和如何测量的人类决策的结果。此外，即使是今天最先进的计算机技术也是通过大规模的模式匹配来进行“预测”和“决策”——这些模式存在于*人类*“训练”它们提供的数据的特定选择中。*计算机没有原创思想，也不会进行创造性的跳跃*；它们在许多任务（如解释论点的“要旨”或故事情节）上基本上是不擅长的，这是人类找到直觉的地方。另一方面，计算机擅长执行重复的计算，非常快速，而不会感到无聊、疲倦或分心。换句话说，尽管计算机是人类判断和智慧的奇妙补充，但它们只能增强它们，而不能替代它们。
- en: 'What this means is that it is up to the humans involved in data collection,
    acquisition, and analysis to ensure its quality so that the outputs of our data
    work actually *mean* something. While we will go into significant detail around
    data quality in [Chapter 3](ch03.html#chapter3), I do want to introduce two distinct
    (though equally important) axes for evaluating data quality: (1) the integrity
    of the data itself, and (2) the “fit” or appropriateness of the data with respect
    to a particular question or problem.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着参与数据收集、获取和分析的人类必须确保其质量，以便我们的数据工作的输出实际上*具有意义*。虽然我们将在[第三章](ch03.html#chapter3)中详细讨论数据质量，但我确实希望介绍两个不同（尽管同样重要）的评估数据质量的维度：（1）数据本身的完整性，以及（2）数据与特定问题或问题的“匹配”或适当性。
- en: Data Integrity
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据完整性
- en: 'For our purposes, the *integrity* of a dataset is evaluated using the data
    values and descriptors that make it up. If our dataset includes measurements over
    time, for example, have they been recorded at consistent intervals or sporadically?
    Do the values represent direct individual readings, or are only averages available?
    Is there a *data dictionary* that provides details about how the data was collected,
    recorded, or should be interpreted—for example, by providing relevant units? In
    general, data that is *complete*, *atomic*, and *well-annotated*—among other things—is
    considered to be of higher integrity because these characteristics make it possible
    to do a wider range of more conclusive analyses. In most cases, however, you’ll
    find that a given dataset is lacking on any number of data integrity dimensions,
    meaning that it’s up to you to try to understand its limitations and improve it
    where you can. While this often means augmenting a given dataset by finding others
    that can complement, contextualize, or extend it, it almost *always* means looking
    beyond “data” of any kind and reaching out to experts: the people who designed
    the data, collected it, have worked with it previously, or know a lot about the
    subject area your data is supposed to address.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，数据集的*完整性*是通过构成它的数据值和描述符来评估的。例如，如果我们的数据集包括随时间的测量结果，它们是按一致的间隔记录还是零散记录的？这些数值代表直接的个体读数，还是只有平均值可用？是否有*数据字典*提供有关数据收集、记录或解释的详细信息，例如提供相关单位？一般来说，数据*完整*、*原子化*和*良好注释*—等特性使其被认为具有更高的完整性，因为这些特点使得进行更广泛和更结论性的分析成为可能。然而，在大多数情况下，您会发现某个给定的数据集在任何数据完整性维度上都不足，这意味着您需要尽力了解其局限性并在可能的情况下加以改进。尽管这通常意味着通过找到其他可以补充、上下文化或扩展它的数据集来增强给定的数据集，但几乎*总是*意味着超越任何种类的“数据”并联系到专家：那些设计数据、收集数据、以前使用过数据或对您的数据应该解决的主题领域非常了解的人。
- en: Data “Fit”
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据“匹配”
- en: Even a dataset that has excellent integrity, however, cannot be considered high
    quality unless it is *also* appropriate for your particular purpose. Let’s say,
    for example, that you were interested in knowing which Citi Bike station has had
    the most bikes rented and returned in a given 24-hour period. Although the real-time
    [Citi Bike API](http://gbfs.citibikenyc.com/gbfs/gbfs.json) contains high-integrity
    data, it’s poorly suited to answering the particular question of which Citi Bike
    station has seen the greatest turnover on a given date. In this case, you would
    be much better off trying to answer this question using the [Citi Bike “trip history”
    data](https://s3.amazonaws.com/tripdata/index.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使数据集完整性很好，除非它*也*适合你的特定目的，否则不能被视为高质量的数据。比如说，假设你有兴趣知道哪个Citi Bike站点在给定的24小时内租借和归还了最多的自行车。尽管实时的[Citi
    Bike API](http://gbfs.citibikenyc.com/gbfs/gbfs.json)包含高完整性的数据，但它对于回答哪个Citi Bike站点在特定日期看到最大周转量的问题并不合适。在这种情况下，使用[Citi
    Bike“行程历史”数据](https://s3.amazonaws.com/tripdata/index.html)来回答这个问题会更好。
- en: 'Of course, it’s rare that a data fit problem can be solved so simply; often
    we have to do a significant amount of integrity work before we can know with confidence
    that our dataset *is* actually fit for our selected question or project. There’s
    no way to bypass this time investment, however: shortcuts when it comes to either
    data integrity or data fit will inevitably compromise the quality and relevance
    of your data wrangling work overall. In fact, many of the harms caused by today’s
    computational systems are related to problems of data fit. For example, using
    data that describes one phenomenon (such as income) to try to answer questions
    about a potentially related—but fundamentally different—phenomenon (like educational
    attainment) can lead to distorted conclusions about what is happening in the world,
    with sometimes devastating consequences. In some instances, of course, using such
    proxy measures is unavoidable. An initial medical diagnosis based on a patient’s
    observable symptoms may be required to provide emergency treatment until the results
    of a more definitive test are available. While such substations are sometimes
    acceptable at the individual level, however, the gap between any proxy measure
    and the real phenomenon multiplies with the scale of the data and the system it
    is used to power. When this happens, we end up with a massively distorted view
    of the very reality our data wrangling and analysis hoped to illuminate. Fortunately,
    there are a number of ways to protect against these types of errors, as we’ll
    explore further in [Chapter 3](ch03.html#chapter3).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，很少有数据拟合问题能如此简单解决；通常我们必须在能够自信地知道我们的数据集*确实*适合我们选择的问题或项目之前进行大量的完整性工作。然而，无法绕过这种时间投入：无论是数据完整性还是数据拟合的捷径最终都会损害数据整理工作的质量和相关性。事实上，今天计算系统造成的许多危害都与数据拟合问题有关。例如，使用描述一个现象（如收入）的数据来尝试回答有关一个潜在相关但基本上不同的现象（如教育程度）的问题，可能导致对世界发生情况的扭曲结论，有时带来毁灭性后果。在某些情况下，使用这样的代理测量是不可避免的。例如，基于患者可观察症状的初始医疗诊断可能需要提供紧急治疗，直到更为确定的测试结果可用。然而，尽管在个体层面上有时可以接受这样的代替物，但任何代理测量与真实现象之间的差距随着数据和使用它的系统规模而扩大。当这种情况发生时，我们最终得到的是对我们希望阐明的现实的极度扭曲视图。幸运的是，我们将在[第三章](ch03.html#chapter3)中进一步探讨的一些方法可以防止这些类型的错误。
- en: Why Python?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python？
- en: If you’re reading this book, chances are you’ve already heard of the Python
    programming language, and you may even be pretty certain that it’s the right tool
    for starting—or expanding—your work on data wrangling. Even if that’s the case,
    I think it’s worth briefly reviewing what makes Python especially suited to the
    type of data wrangling and quality work that we’ll do in this book. Of course
    if you *haven’t* heard of Python before, consider this an introduction to what
    makes it one of the most popular and powerful programming languages in use today.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本书，很可能已经听说过Python编程语言，并且你甚至可能相当确定它是开始或扩展数据整理工作的正确工具。即使是这种情况，我认为简要回顾一下Python特别适合本书中我们将要进行的数据整理和质量工作的原因也是值得的。当然，如果你之前*没有*听说过Python，那么请将其视为介绍什么使它成为当今使用中最流行和功能强大的编程语言之一。
- en: Versatility
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多功能性
- en: 'Perhaps one of the greatest strengths of Python as a general programming language
    is its versatility: it can be easily used to access APIs, scrape data from the
    web, perform statistical analyses, and generate meaningful visualizations. While
    many other programming languages do some of these things, few do all of them as
    well as Python.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种通用编程语言，Python 的最大优势之一是其多功能性：可以轻松地用于访问 API、从网络中抓取数据、进行统计分析以及生成有意义的可视化。虽然许多其他编程语言也能完成其中的一些功能，但很少有像
    Python 一样在所有这些方面表现得如此出色。
- en: Accessibility
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可访问性
- en: One of Python creator Guido van Rossum’s goals in designing the language was
    to make [“code that is as understandable as plain English”](https://en.wikipedia.org/wiki/Guido_van_Rossum#Python).
    Python uses English keywords where many other scripting languages (like R and
    JavaScript) use punctuation. For English-language readers, then, Python may be
    both easier and more intuitive to learn than other scripting languages.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Python 创建者 Guido van Rossum 设计语言时的一个目标是制造 [“像普通英语一样易于理解的代码”](https://en.wikipedia.org/wiki/Guido_van_Rossum#Python)。Python
    使用英语关键词，而许多其他脚本语言（如 R 和 JavaScript）使用标点符号。因此，对于英语读者来说，Python 可能比其他脚本语言更容易学习和更直观。
- en: Readability
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可读性
- en: 'One of the core tenets of the Python programming language is that [“readability
    counts”](https://en.wikipedia.org/wiki/Zen_of_Python). In most programming languages,
    the visual layout of the code is irrelevant to how it functions—as long as the
    “punctuation” is correct, the computer will understand it. Python, by contrast,
    is what’s known as “whitespace dependent”: without proper tab and/or space characters
    indenting the code, it actually won’t do anything except produce a bunch of errors.
    While this can take some getting used to, it enforces a level of readability in
    Python programs that can make reading other people’s code (or, more likely, your
    own code after a little time has passed) much less difficult. Another aspect of
    readability is *commenting* and otherwise documenting your work, which I’ll address
    in more detail in [“Documenting, Saving, and Versioning Your Work”](#documenting_your_work).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程语言的一个核心原则是 [“可读性至关重要”](https://en.wikipedia.org/wiki/Zen_of_Python)。在大多数编程语言中，代码的视觉布局与其功能无关——只要“标点符号”正确，计算机就能理解。相比之下，Python
    是一种“依赖空白”的语言：如果没有正确的制表符和/或空格字符缩进代码，它实际上什么也不会做，只会产生一堆错误。虽然这可能需要一些时间来适应，但它确实在 Python
    程序中强制实施了一种可读性，这可以使阅读其他人的代码（或更可能是你自己的代码在一段时间后）变得不那么困难。可读性的另一个方面是*注释*和其他方式记录你的工作，我将在
    [“文档化、保存和版本管理你的工作”](#documenting_your_work) 中详细讨论。
- en: Community
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: Python has a very large and active community of users, many of whom help create
    and maintain “libraries” of code that enormously expand what you can quickly accomplish
    with your own Python code. For example, Python has popular and well-developed
    code libraries like *NumPy* and *Pandas* that can help you clean and analyze data,
    as well as others like *Matplotlib* and *Seaborn* to create visualizations. There
    are even powerful libraries like *Scikit-Learn* and *NLTK* that can do the heavy
    lifting of machine learning and natural language processing. Once you have a handle
    on the essentials of data wrangling with Python that we’ll cover in this book
    (in which we will use many of the libraries just mentioned), you’ll probably find
    yourself eager to explore what’s possible with many of these libraries and just
    a few lines of code. Fortunately, the same folks who write the code for these
    libraries often write blog posts, make video tutorials, and share code samples
    that you can use to expand your Python work.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Python 拥有一个非常庞大且活跃的用户社区，其中许多人帮助创建和维护着各种代码“库”，极大地扩展了你可以利用自己的 Python 代码快速实现的功能。例如，Python
    拥有像 *NumPy* 和 *Pandas* 这样流行且成熟的代码库，可以帮助你清理和分析数据，以及像 *Matplotlib* 和 *Seaborn* 这样用于创建可视化的库。还有一些强大的库，如
    *Scikit-Learn* 和 *NLTK*，可以处理机器学习和自然语言处理中的繁重工作。一旦掌握了本书中将介绍的 Python 数据处理的基本要点（我们将使用许多刚提到的库），你可能会发现自己渴望探索这些库可能实现的功能，而这只需几行代码。幸运的是，撰写这些库代码的同行们通常也会写博客文章、制作视频教程，并分享代码示例，这些都可以帮助你扩展你的
    Python 工作。
- en: Similarly, the size and enthusiasm of the Python community means that finding
    answers to both common (and even not-so-common) problems and errors that you may
    encounter is easy—detailed solutions are often posted online. As a result, troubleshooting
    Python code can be easier than for more specialized languages with a smaller community
    of users.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Python 社区的规模和热情意味着很容易找到您可能遇到的常见（甚至不那么常见）问题和错误的答案 —— 通常会在线发布详细的解决方案。因此，与具有较小用户群的更专业的语言相比，调试
    Python 代码可能更容易。
- en: Python Alternatives
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的替代方案
- en: 'Although Python has much to recommend it, you may also be considering other
    tools for your data-wrangling needs. The following is a brief overview of some
    tools you may have heard of, along with why I chose Python for this work instead:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 有很多值得推荐的地方，但您可能也在考虑其他工具来满足数据整理的需求。以下是您可能听说过的一些工具的简要概述，以及为什么我选择了 Python
    而不是其他工具进行此项工作：
- en: R
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: R
- en: The R programming language is probably Python’s nearest competitor for data
    work, and many teams and organizations rely on R for its combination of data wrangling,
    advanced statistical modeling, and visualization capabilities. At the same time,
    R lacks some of the accessibility and readability of Python.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: R 编程语言可能是 Python 在数据工作方面的最近竞争对手，许多团队和组织都依赖于 R，因为它集数据整理、高级统计建模和可视化功能于一身。同时，R
    缺乏 Python 的一些易用性和可读性。
- en: SQL
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: SQL
- en: 'Simple Query Language (SQL) is just that: a language designed to “slice and
    dice” database data. While SQL can be powerful and useful, it requires data to
    exist in a particular format to be useful and is therefore of limited use for
    “wrangling” data in the first place.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简单查询语言（SQL）就是那样：一种旨在“切片和切块”数据库数据的语言。虽然 SQL 可以很强大和有用，但它要求数据以特定格式存在才能发挥作用，因此在第一次“整理”数据时使用范围有限。
- en: Scala
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Scala
- en: Although Scala is well suited for dealing with large datasets, it has a much
    steeper learning curve than Python, and a much smaller user community. The same
    is true of Julia.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Scala 非常适合处理大型数据集，但与 Python 相比，它的学习曲线要陡峭得多，并且用户社区要小得多。Julia 也是如此。
- en: Java, C/C++
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Java、C/C++
- en: While these have large user communities and are very versatile, they lack the
    natural language and readability bent of Python and are oriented more toward building
    software than doing data wrangling and analysis.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些工具具有庞大的用户社区，并且非常多功能，但它们缺乏 Python 的自然语言和可读性倾向，更倾向于构建软件而不是进行数据整理和分析。
- en: JavaScript
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript
- en: In a web-based environment, JavaScript is invaluable, and many popular visualization
    tools (e.g., D3) are built using variations of JavaScript. At the same time, JavaScript
    does not have the same breadth of data analysis features as Python and is generally
    slower.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 web 的环境中，JavaScript 是无价的，并且许多流行的可视化工具（例如 D3）都是使用 JavaScript 的变体构建的。同时，JavaScript
    没有像 Python 那样的数据分析功能广泛，并且通常速度较慢。
- en: Writing and “Running” Python
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和“运行” Python
- en: To follow along with the exercises in this book, you’ll need to get familiar
    with the tools that will help you write and run your Python code; you’ll also
    want a system for backing up and documenting your code so you don’t lose valuable
    work to an errant keystroke,^([5](ch01.html#idm45143428504912)) *and* so that
    you can easily remind yourself what all that great code can do, even when you
    haven’t looked at it for a while. Because there are multiple toolsets for solving
    these problems, I recommend that you start by reading through the following sections
    and then choosing the approach (or combination of approaches) that works best
    for your preferences and resources. At a high level, the key decisions will be
    whether you want to work “online only”—that is, with tools and services you access
    via the internet—or whether you can and want to be able to do Python work *without*
    an internet connection, which requires installing these tools on a device that
    you control.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟着本书的练习进行，您需要熟悉一些工具，这些工具将帮助您编写和运行 Python 代码；您还需要一个备份和文档化代码的系统，以防止因一次错误的按键而丢失宝贵的工作，*并且*，以便您在很长时间没有看到代码时，也可以轻松地提醒自己所有这些优秀代码能做什么。因为解决这些问题有多种工具集，我建议您先阅读以下部分，然后选择最适合您偏好和资源的方法（或方法组合）。从高层次来看，关键决策将是您是否希望仅“在线”工作
    —— 也就是说，使用通过互联网访问的工具和服务 —— 还是您可以并且希望能够在没有互联网连接的情况下进行 Python 工作，这需要在您控制的设备上安装这些工具。
- en: 'We all write differently depending on context: you probably use a different
    style and structure when writing an email than when sending a text message; for
    a job application cover letter you may use a whole different tone entirely. I
    know I also use different tools to write depending on what I need to accomplish:
    I use online documents when I need to write and edit collaboratively with coworkers
    and colleagues, but I prefer to write books and essays in a super-plain text editor
    that lives on my device. More particular document formats, like PDFs, are typically
    used for contracts and other important documents that we don’t want others to
    be able to easily change.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在不同的情境下写作时会有不同的风格和结构：你可能在写电子邮件时使用不同的风格和结构，而在发送短信时则不同；在求职信中，你可能会完全采用不同的语气。我知道，我也会根据需要完成的任务使用不同的写作工具：当我需要与同事协作编辑文档时，我会使用在线文档，但在我设备上，我更喜欢使用超简单的文本编辑器写作书籍和论文。更特定的文档格式，比如
    PDF，通常用于合同和其他不希望他人轻易更改的重要文档。
- en: 'Just like natural human languages, Python can be written in different types
    of documents, each of which supports slightly different styles of writing, testing,
    and running your code. The primary types of Python documents are *notebooks* and
    *standalone files*. While either type of document can be used for data wrangling,
    analysis, and visualization, they have slightly different strengths and requirements.
    Since it takes some tweaking to convert one format to the other, I’ve made the
    exercises in this book available in both formats. I did this not only to give
    you the flexibility of choosing the document type that you find easiest or most
    useful but also so that you can compare them and see for yourself how the translation
    process affects the code. Here’s a brief overview of these document types to help
    you make an initial choice:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就像自然人类语言一样，Python 可以用不同类型的文档来编写，每种文档支持稍微不同的编写、测试和运行代码的风格。Python 文档的主要类型是 *notebook*
    和 *standalone files*。虽然任何一种类型的文档都可以用于数据整理、分析和可视化，但它们具有略微不同的优势和要求。由于将一种格式转换为另一种格式需要一些调整，我已经将本书中的练习提供了这两种格式。我这样做不仅是为了让你有选择你认为最容易或最有用的文档类型的灵活性，而且还让你可以比较它们并自行查看翻译过程如何影响代码。以下是这些文档类型的简要概述，以帮助你做出初步选择：
- en: Notebooks
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Notebooks
- en: A Python *notebook* is an interactive document used to run chunks of code, using
    a web browser window as an interface. In this book, we’ll be using a tool called
    “Jupyter” to create, edit, and execute our Python notebooks.^([6](ch01.html#idm45143428494768))
    A key advantage of using notebooks for Python programming is that they offer a
    simple way to write, run, and document your Python code all in one place. You
    may prefer notebooks if you’re looking for a more “point and click” programming
    experience or if working entirely online is important to you. In fact, the same
    Python notebooks can be used on your local device or in an online coding environment
    with minimal changes, meaning that this option may be right for you if you (1)
    don’t have access to a device where you’re able to install software, or (2) you
    can install software but you *also* want to be able to work on your code when
    you don’t have your machine with you.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Python *notebook* 是一个交互式文档，用于运行代码块，使用浏览器窗口作为界面。在本书中，我们将使用一个称为“Jupyter”的工具来创建、编辑和执行我们的
    Python notebook。[^6] 使用 notebook 编程 Python 的一个关键优势是，它们提供了一种简单的方式来在一个地方编写、运行和记录你的
    Python 代码。如果你寻求更多“点与点”编程体验，或者完全在线工作对你很重要，你可能会更喜欢 notebook。事实上，同样的 Python notebook
    可以在本地设备或在线编码环境中使用，几乎不需要做任何改动，这意味着如果你 (1) 无法访问能够安装软件的设备，或者 (2) 你可以安装软件但也希望在没有机器的情况下工作，这个选项可能适合你。
- en: Standalone files
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Standalone files
- en: A *standalone* Python file is really any plain-text file that contains Python
    code. You can create such standalone Python files using any basic text editor,
    though I strongly recommend that you use one specifically designed for working
    with code, like Atom (I’ll walk through setting this up in [“Installing Python,
    Jupyter Notebook, and a Code Editor”](#local_installation)). While the software
    you choose for writing and editing your code is up to you, in general the only
    place you’ll be able to *run* these standalone Python files is on a physical device
    (like a computer or phone) that has the Python programming language installed.
    You (and your computer) will be able to recognize standalone Python files by their
    *.py* file extension. Although they might seem more restrictive at first, standalone
    Python files can have some advantages. You don’t need an internet connection to
    run standalone files, and they don’t require you to upload your data to the cloud.
    While both of those things are also true of locally run notebooks, you *also*
    don’t have to wait for any software to start up when running standalone files.
    Once you have Python installed, you can run standalone Python files instantly
    from the *command line* (more on this shortly)—this is especially useful if you
    have a Python script that you need to run on a regular basis. And while notebooks’
    ability to run bits of code independently of one another can make them feel a
    bit more approachable, the fact that standalone Python files also always run your
    code “from scratch” can help you avoid the errors or unpredictable results that
    can occur if you run bits of notebook code out of order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*独立* Python文件实际上就是包含Python代码的任何纯文本文件。你可以使用任何基本文本编辑器创建这样的独立Python文件，尽管我强烈建议你使用专门用于编写代码的编辑器，比如Atom（我将在[“安装Python、Jupyter
    Notebook和代码编辑器”](#local_installation)中介绍设置过程）。虽然你选择的编写和编辑代码的软件取决于你自己，但通常你唯一能够*运行*这些独立Python文件的地方是在已安装Python编程语言的物理设备（如计算机或手机）上。你（以及你的计算机）将能够通过它们的*.py*文件扩展名识别出独立的Python文件。尽管它们起初可能看起来更受限制，独立的Python文件也有一些优点。你不需要互联网连接来运行独立文件，它们也不需要你将数据上传到云端。虽然这两个条件在本地运行笔记本时也成立，但你在运行独立文件时也*不必*等待任何软件启动。一旦安装了Python，你就可以从*命令行*立即运行独立的Python文件（稍后将详细介绍这一点）——如果你需要定期运行Python脚本，这尤其有用。虽然笔记本能够独立运行代码的能力使它们看起来更易接近一些，但独立Python文件始终运行你的代码“从头开始”，这有助于你避免如果你以不正确的顺序运行笔记本代码而产生的错误或不可预测的结果。'
- en: Of course, you don’t have to choose just one or the other; many people find
    that notebooks are especially useful for *exploring* or *explaining* data (thanks
    to their interactive and reader-friendly format), while standalone files are better
    suited for *accessing, transforming*, and *cleaning* data (since standalone files
    can more quickly and easily run the same code on different datasets, for example).
    Perhaps the bigger question is whether you want to work *online* or *locally*.
    If you don’t have a device where you can install Python, you’ll need to work in
    cloud-based notebooks; otherwise you can choose to use either (or both!) notebooks
    or standalone files on your device. As noted previously, notebooks that can be
    used either online or locally, as well as standalone Python files, are available
    for all the exercises in this book to give you as much flexibility as possible,
    and also so you can compare how the same tasks get done in each case!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你不必只选择其中一种；许多人发现笔记本在*探索*或*解释*数据方面特别有用（感谢它们交互式和用户友好的格式），而独立文件更适合于*访问、转换*和*清理*数据（因为独立文件可以更快速、更容易地在不同数据集上运行相同的代码，例如）。也许更重要的问题是你想要在线还是本地工作。如果你没有一个可以安装Python的设备，你需要在基于云的笔记本上工作；否则，你可以选择在你的设备上使用笔记本或独立文件（或两者兼而有之！）。正如之前所述，本书中的所有练习都可以在线或本地使用笔记本，以便你尽可能灵活地使用，也可以比较在每种情况下完成相同任务的方式！
- en: Working with Python on Your Own Device
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自己的设备上使用Python
- en: To understand and run Python code, you’ll need to install it on your device.
    Depending on your device, there may be a downloadable installation file available,
    or you may need to use a text-based interface (which you’ll need to use at some
    point if you’re using Python on your device) called the *command line*. Either
    way, the goal is to get you up and running with at least Python 3.9.^([7](ch01.html#idm45143428474976))
    Once you’ve got Python up and running, you can move on to installing Jupyter notebook
    and/or a code editor (instructions included here are for [Atom](https://atom.io)).
    If you’re planning to work only in the cloud, you can skip right to [“Working
    with Python Online”](#working_with_python_online) for information on how to get
    started.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解和运行 Python 代码，您需要在设备上安装 Python。根据您的设备，可能有可下载的安装文件，或者您可能需要使用一个称为*命令行*的文本界面（如果您在设备上使用
    Python，则必须使用它）。无论哪种方式，目标都是至少让您能够使用 Python 3.9 进行操作。^([7](ch01.html#idm45143428474976))
    安装好 Python 后，您可以继续安装 Jupyter 笔记本和/或代码编辑器（此处的说明适用于 [Atom](https://atom.io)）。如果您计划只在云端工作，您可以直接跳到[“使用在线
    Python”](#working_with_python_online)获取有关如何入门的信息。
- en: Getting Started with the Command Line
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行开始
- en: If you plan to use Python locally on your device, you’ll need to learn to use
    the *command line* (also sometimes referred to as the *terminal* or *command prompt*),
    which is a text-based way of providing instruction to your computer. While in
    principle you can do anything in the command line that you can do with a mouse,
    it’s particularly efficient for installing code and software (especially the Python
    libraries that we’ll be using throughout the book) and backing up and running
    code. While it may take a little getting used to, the command line is often faster
    and more straightforward for many programming-related tasks than using a mouse.
    That said, I’ll provide instructions for using both the command line and your
    mouse where both are possible, and you should feel free to use whichever you find
    more convenient for a particular task.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在本地设备上使用 Python，您需要学习如何使用*命令行*（有时也称为*终端*或*命令提示符*），这是一种通过文本方式向计算机提供指令的方法。虽然原则上您可以用命令行做任何鼠标能做的事情，但它特别适合安装代码和软件（尤其是我们将在本书中使用的
    Python 库）以及备份和运行代码。虽然可能需要一点时间来适应，但命令行对于许多与编程相关的任务通常比使用鼠标更快速、更直接。也就是说，我将提供使用命令行和鼠标的说明，两者都可以使用，您可以根据具体任务选择更方便的方式。
- en: To get started, let’s open up a command line (sometimes also called the *terminal*)
    interface and use it to create a folder for our data wrangling work. If you’re
    on a Chromebook, macOS, or Linux machine, search for “terminal” and select the
    application called Terminal; on a Windows PC, search for “powershell” and choose
    the program called Windows PowerShell.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请打开命令行（有时也称为*终端*）界面，并使用它来为我们的数据整理工作创建一个文件夹。如果您使用的是 Chromebook、macOS 或 Linux
    设备，请搜索“终端”，然后选择名为 Terminal 的应用程序；如果是在 Windows PC 上，请搜索“powershell”，然后选择名为 Windows
    PowerShell 的程序。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: To enable Linux on your Chromebook, just go to your Chrome OS settings (click
    the gear icon in the Start menu, or search for “settings” in the Launcher). Toward
    the bottom of the lefthand menu, you’ll see a small penguin icon labeled “Linux
    (Beta).” Click this and follow the directions to enable Linux on your machine.
    You may need to restart before you can continue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Chromebook 上启用 Linux，只需进入 Chrome OS 设置（点击开始菜单中的齿轮图标，或在启动器中搜索“设置”）。在左侧菜单底部，您会看到一个名为“Linux（Beta）”的小企鹅图标。点击它并按照说明启用您的机器上的
    Linux。在继续之前，您可能需要重新启动。
- en: 'Once you have a terminal open, it’s time to make a new folder! To help you
    get started, here is a quick glossary of useful command-line terms:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开了终端，现在是创建一个新文件夹的时候了！为帮助您入门，这里是一些有用的命令行术语快速词汇表：
- en: '`ls`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ls`'
- en: The “list” command shows files and folders in the current location. This is
    a text-based version of what you would see in a finder window.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: “列出”命令显示当前位置的文件和文件夹。这是一个文本版本，与查找器窗口中看到的相似。
- en: '`cd` *`foldername`*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd` *`foldername`*'
- en: The “change directory” command moves you from the current location into *`foldername`*,
    as long as *`foldername`* is shown when you use the `ls` command. This is equivalent
    to “double-clicking” on a folder within a finder window using your mouse.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “更改目录”命令将您从当前位置移动到*`foldername`*，只要您在使用`ls`命令时显示了*`foldername`*。这相当于在查找器窗口中双击一个文件夹。
- en: '`cd ../`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd ../`'
- en: “Change directory” once again, but the `../` moves your current position to
    the containing folder or location.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: “改变目录”再次，但是`../`会将您当前的位置移动到包含的文件夹或位置。
- en: '`cd ~/`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`cd ~/`'
- en: “Change directory,” but the `~/` returns you to your “home” folder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “改变目录”，但`~/`会返回到您的“主目录”。
- en: '`mkdir` *`foldername`*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`mkdir` *`文件夹名称`*'
- en: “Make directory” with name *`foldername`*. This is equivalent to choosing New
    → Folder in the context menu with your mouse and then naming the folder once its
    icon appears.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用名称为*`文件夹名称`*创建目录。这相当于使用鼠标选择新建→文件夹，在其图标出现后命名文件夹。
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: When using the command line, you never actually have to type out the full name
    of a file or folder; think of it more like search, and just start by typing the
    first few characters of the (admittedly case-sensitive) name. Once you’ve done
    that, hit the Tab key, and the name will autocomplete as much as possible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命令行时，您实际上无需完整输入文件或文件夹的全名；可以将其视为搜索，只需输入前几个（区分大小写的）名称字符。完成后，按Tab键，名称将尽可能自动完成。
- en: For example, if you have two files in a folder, one called *xls_parsing.py*
    and one called *xlsx_parsing.py* (as you will when you’re finished with [Chapter 4](ch04.html#chapter4)),
    and you wanted to run the latter, you can type **`python xl`** and then hit Tab,
    which will cause the command line to autocomplete to **`python xls`**. At this
    point, since the two possible filenames diverge, you’ll need to supply either
    an `x` or an `_`, after which hitting Tab one more time will complete the rest
    of the filename, and you’re good to go!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您在一个文件夹中有两个文件，一个叫做*xls_parsing.py*，另一个叫做*xlsx_parsing.py*（在您完成[第四章](ch04.html#chapter4)后会有这种情况），并且您想要运行后者，您可以输入**`python
    xl`**然后按Tab键，这将使命令行自动完成为**`python xls`**。在这一点上，由于两个可能的文件名分歧，您需要输入`x`或`_`，再按Tab键一次将完成其余的文件名，然后就可以继续进行了！
- en: 'Any time you open a new terminal window on your device, you’ll be in what’s
    known as your “home” folder. On macOS, Windows, and Linux machines, this is often
    the “User” folder, which is *not* the same as the “desktop” area you see when
    you first log in. This can be a little disorienting a first, since the files and
    folders you’ll see when you first run `ls` in a terminal window will probably
    be unfamiliar. Don’t worry; just point your terminal at your regular desktop by
    typing:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在设备上打开新的终端窗口时，您将处于被称为“主目录”的位置。在macOS、Windows和Linux机器上，这通常是“用户”文件夹，与您首次登录时看到的“桌面”区域不同。这一点可能会让人感到有些迷惑，因为当您在终端窗口中首次运行`ls`时，看到的文件和文件夹可能会很陌生。不用担心；只需通过输入以下内容将您的终端定位到常规桌面：
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: into the terminal and hitting Enter or Return (for efficiency’s sake, I’ll just
    refer to this as the Enter key from here on out).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到终端并按下Enter或Return键（为了效率起见，我将在此之后仅称其为Enter键）。
- en: On Chromebooks, Python (and the other programs we’ll need) can only be run from
    inside the *Linux files* folder, so you can’t actually navigate to the desktop
    and will have to open a terminal window.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chromebook上，Python（以及我们需要的其他程序）只能从*Linux files*文件夹内运行，因此您实际上无法导航到桌面，必须打开一个终端窗口。
- en: 'Next, type the following command into your terminal window and hit Enter:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的终端窗口中输入以下命令并按Enter键：
- en: '[PRE1]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Did you see the folder appear? If so, congratulations on making your first folder
    in the command line! If not, double-check the text at the left of the command
    line prompt (`$` on Chromebook, `%` on macOS, or `>` on Windows). If you don’t
    see the word `Desktop` in there, run `cd ~/Desktop` and then try again.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到文件夹出现了吗？如果是这样，恭喜您在命令行中创建了您的第一个文件夹！如果没有，请仔细检查命令行提示符左侧的文本（在Chromebook上为`$`，在macOS上为`%`，在Windows上为`>`）。如果您没有看到其中的`Desktop`一词，请运行`cd
    ~/Desktop`然后再试一次。
- en: Now that you’ve gotten a little bit of practice with the command line, let’s
    see how it can help when installing and testing Python on your machine.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在命令行中练习了一点，让我们看看它如何在安装和测试Python时有所帮助。
- en: Installing Python, Jupyter Notebook, and a Code Editor
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python、Jupyter Notebook和代码编辑器
- en: To keep things simple, we’re going to use a software *distribution manager*
    called Miniconda, which will automatically install both Python and Jupyter Notebook.
    Even if you don’t plan to use notebooks for your own coding, they’re popular enough
    that being able to view and run *other* people’s notebooks is useful, and it doesn’t
    take up that much additional space on your device. In addition to getting your
    Python and Jupyter Notebook tools up and running, installing Miniconda will also
    create a new command-line function called `conda`, which will give you a quick
    and easy way to keep both your Python and Jupyter Notebook installations up to
    date.^([8](ch01.html#idm45143421172256)) You can find more information about how
    to do these updates in [Appendix A](app01.html#appendix_a).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化事务，我们将使用一个名为 Miniconda 的软件*分发管理器*，它将自动安装 Python 和 Jupyter Notebook。即使您不打算在自己的编码中使用笔记本，由于它们非常受欢迎，因此能够查看和运行*其他*人的笔记本也很有用，并且不会占用设备太多的额外空间。除了启动您的
    Python 和 Jupyter Notebook 工具外，安装 Miniconda 还将创建一个名为`conda`的新命令行函数，使您能够快速轻松地保持
    Python 和 Jupyter Notebook 的更新状态。^([8](ch01.html#idm45143421172256)) 您可以在[附录 A](app01.html#appendix_a)中找到有关如何进行这些更新的更多信息。
- en: If you’re planning to do most of your Python programming in a notebook, I also
    still recommend installing a code editor. Even if you never use them to write
    a single line of Python, code editors are indispensable for viewing, editing,
    and even creating your own data files more effectively and efficiently than most
    devices’ built-in text-editing software. Most importantly, code editors do something
    called *syntax highlighting*, which is basically built-in grammar checking for
    code and data. While that may not sound like much, the reality is that it will
    make your coding and debugging processes *much* faster and more reliable, because
    you’ll know (literally) where to look when there’s a problem. This combination
    of features makes a solid code editor one of the most important tools for both
    Python programming *and* general data wrangling.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在笔记本中进行大部分的 Python 编程工作，我仍然建议安装一个代码编辑器。即使您从未使用它们来编写一行 Python 代码，代码编辑器也是查看、编辑甚至创建自己的数据文件比大多数设备内置文本编辑软件更有效和高效的不可或缺的工具。最重要的是，代码编辑器还进行称为*语法高亮*的操作，这基本上是代码和数据的内置语法检查。虽然这听起来可能不起眼，但实际上，这将使您的编码和调试过程*大大*加快和更可靠，因为当出现问题时，您会（确切地）知道从哪里查找。这些功能的结合使得一个可靠的代码编辑器成为
    Python 编程*和*通用数据处理中最重要的工具之一。
- en: In this book I’ll be using and referencing the Atom ([*https://atom.io*](https://atom.io))
    code editor, which is free, multiplatform, and open source. If you play around
    with the settings, you’ll find many ways to customize your coding environment
    to suit your needs. Where I reference the color of certain characters or bits
    of code in this book, they reflect the default “One Dark” theme in Atom, but use
    whatever settings work best for you.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用并参考 Atom（[*https://atom.io*](https://atom.io)）代码编辑器，它是免费、跨平台且开源的。如果您调整设置，您将找到许多方法来定制您的编码环境以满足您的需求。在本书中提到某些字符或代码位的颜色时，它们反映了
    Atom 中默认的“One Dark”主题，但请根据您的需要使用任何设置。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll need a strong, stable internet connection and about 30–60 minutes to
    complete the following setup and installation processes. I also strongly recommend
    that you have your device plugged into a power source.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个强大稳定的互联网连接和约 30-60 分钟的时间来完成以下设置和安装过程。我还强烈建议您将设备插入电源。
- en: Chromebook
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chromebook
- en: To install your suite of data wrangling tools on a Chromebook, the first thing
    you’ll need to know is whether your version of the Chrome OS operating system
    is 32-bit or 64-bit.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Chromebook 上安装您的数据处理工具套件，首先您需要知道您的 Chrome OS 操作系统版本是 32 位还是 64 位。
- en: To find this information, open up your Chrome settings (click the gear icon
    in the Start menu, or search “settings” in the Launcher) and then click on “About
    Chrome OS” at the lower left. Toward the top of the window, you’ll see the version
    number followed by either `(32-bit)` or `(64-bit)`, as shown in [Figure 1-1](#chrome_settings).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找这些信息，请打开 Chrome 设置（点击开始菜单中的齿轮图标，或在启动器中搜索“设置”），然后点击左下角的“关于 Chrome OS”。在窗口顶部附近，您将看到版本号，后面跟着`(32-bit)`或`(64-bit)`，如[图
    1-1](#chrome_settings)所示。
- en: '![Chrome OS version detail](assets/ppdw_0101.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome OS 版本详细信息](assets/ppdw_0101.png)'
- en: Figure 1-1\. Chrome OS version detail
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. Chrome OS 版本详细信息
- en: Make a note of this information before continuing with your setup.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续设置之前，请记录这些信息。
- en: Installing Python and Jupyter Notebook
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Python和Jupyter Notebook
- en: To get started, download the [Linux installer](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links)
    that matches the bit format of your Chrome OS version. Then, open your *Downloads*
    folder and drag the installer file (it will end in *.sh*) into your *Linux files*
    folder.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请下载与你的Chrome OS版本位数格式匹配的[Linux安装程序](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links)。然后，打开你的*下载*文件夹，并将安装程序文件（以*.sh*结尾）拖放到*Linux文件*文件夹中。
- en: 'Next, open up a terminal window, run the **`ls`** command, and make sure that
    you see the Miniconda *.sh* file. If you do, run the following command (remember,
    you can just type the beginning of the filename and then hit the Tab key, and
    it will autocomplete!):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开一个终端窗口，运行**`ls`**命令，并确保你看到Miniconda的*.sh*文件。如果看到了，请运行以下命令（记住，你可以只输入文件名的开头，然后按Tab键，它会自动完成！）：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Follow the directions that appear in your terminal window (accept the license
    and the `conda init` prompt), then close and reopen your terminal window. Next,
    you’ll need to run the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端窗口中按照出现的指示（接受许可证和`conda init`提示），然后关闭并重新打开你的终端窗口。接下来，你需要运行以下命令：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then close and reopen your terminal window again so that you can install Jupyter
    Notebook with the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再次关闭并重新打开你的终端窗口，以便通过以下命令安装Jupyter Notebook：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Answer yes to the subsequent prompts, close your terminal one last time, and
    you’re all set!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对后续提示选择是，最后关闭你的终端一次，然后你就可以了！
- en: Installing Atom
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Atom
- en: To install Atom on your Chromebook, you’ll need to download the *.deb* package
    from [*https://atom.io*](https://atom.io) and save it in (or move it to) your
    *Linux files* folder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的Chromebook上安装Atom，你需要从[*https://atom.io*](https://atom.io)下载*.deb*包，并将其保存在（或移动到）你的*Linux文件*文件夹中。
- en: 'To install the software using the terminal, open a terminal window and type:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用终端安装软件，请打开一个终端窗口并输入：
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Hit Enter.^([9](ch01.html#idm45143421119776)) Once the text has finished scrolling
    and the *command prompt* (which ends with a `$`) is back, the installation is
    complete.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 按Enter键。^([9](ch01.html#idm45143421119776)) 当文本滚动完成并且命令提示符（以`$`结束）重新出现时，安装完成。
- en: Alternatively, you can context-click on the *.deb* file in your *Linux files*
    folder and choose the “Install with Linux” option from the top of the context
    menu, then click “Install” and “OK.” You should see a progress bar on the bottom
    right of your screen and get a notification when the installation is complete.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在*Linux文件*文件夹中右键点击*.deb*文件，并从上下文菜单的顶部选择“用Linux安装”，然后点击“安装”和“确定”。你会在屏幕右下角看到一个进度条，并在安装完成时收到通知。
- en: Whichever method you use, once the installation is finished, you should see
    the green Atom icon appear in your “Linux apps” bubble in the Launcher.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种方法，安装完成后，你应该会在“Linux应用”气泡中看到绿色的Atom图标。
- en: macOS
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: macOS
- en: 'You have two options when installing Miniconda on macOS: you can use the terminal
    to install it using a *.sh* file, or you can install it by downloading and double-clicking
    the *.pkg* installer.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上安装Miniconda有两种选择：你可以使用终端通过*.sh*文件安装，或者下载并双击*.pkg*安装程序进行安装。
- en: Installing Python and Jupyter Notebook
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Python和Jupyter Notebook
- en: To get started, go to the [Miniconda installer links page](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links).
    If you want to do your installation with the terminal, download the Python 3.9
    “bash” file that ends in *.sh*; if you prefer to use your mouse, download the
    *.pkg* file (you may see a notification from the operating system during the download
    process warning, “This type of file can harm your computer”; choose “Keep”).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请转到[Miniconda安装程序链接页面](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links)。如果想通过终端进行安装，下载以*.sh*结尾的Python
    3.9 “bash”文件；如果喜欢使用鼠标，下载*.pkg*文件（在下载过程中，操作系统可能会弹出警告通知，“此类文件可能会损害您的计算机”，请选择“保留”）。
- en: Whichever method you select, open your *Downloads* folder and drag the file
    onto your desktop.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种方法，打开你的*下载*文件夹，并将文件拖放到你的桌面上。
- en: 'If you want to try installing Miniconda using the terminal, start by opening
    a terminal window and using the `cd` command to point it to your desktop:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想通过终端尝试安装Miniconda，请先打开一个终端窗口，并使用`cd`命令将其指向你的桌面：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, run the **`ls`** command, and make sure that you see the Miniconda *.sh*
    file in the resulting list. If you do, run the following command (remember, you
    can just type the beginning of the filename and then hit the Tab key, and it will
    autocomplete!):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行**`ls`**命令，并确保您在结果列表中看到Miniconda的*.sh*文件。如果看到了，请运行以下命令（记住，您只需键入文件名的开头，然后按Tab键，它将自动补全！）：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Follow the directions that appear in your terminal window:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 按照您终端窗口中显示的说明进行操作：
- en: Use the space bar to move through the license agreement a full page at a time,
    and when you see `(END)`, hit Return.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用空格键逐页浏览许可协议，并在看到`(END)`时按回车键。
- en: Type **`yes`** followed by Return to accept the license agreement.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键入**`yes`**再按回车键接受许可协议。
- en: Hit Return to confirm the installation location, and type **`yes`** followed
    by Return to accept the `conda init` prompt.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按回车键确认安装位置，并键入**`yes`**再按回车键接受`conda init`提示。
- en: Finally, close your terminal window.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关闭您的终端窗口。
- en: If you would prefer to do the installation using your mouse, just double-click
    the *.pkg* file and follow the installation instructions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用鼠标进行安装，只需双击*.pkg*文件，然后按照安装说明进行操作。
- en: 'Now that you have Miniconda installed, you need to open a new terminal window
    and type:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了Miniconda，您需要打开一个新的终端窗口并键入：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then hit Return. Next, close and reopen your terminal window, and use the following
    command (followed by Return) to install Jupyter Notebook:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按回车键。接下来，关闭并重新打开您的终端窗口，并使用以下命令（后跟回车键）安装Jupyter Notebook：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Answer yes to the subsequent prompts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对后续提示选择是。
- en: Installing Atom
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Atom
- en: To install Atom on a Mac, visit [*https://atom.io*](https://atom.io) and click
    the large yellow Download button to download the installer.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Mac上安装Atom，请访问[*https://atom.io*](https://atom.io)，然后单击大黄色下载按钮下载安装程序。
- en: Click on the *atom-mac.zip* file in your *Downloads* folder and then drag the
    Atom application (which will have a green icon next to it) into your *Applications*
    folder (this may prompt you for your password).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的*Downloads*文件夹中单击*atom-mac.zip*文件，然后将Atom应用程序（其旁边将有一个绿色图标）拖入*Applications*文件夹（这可能会提示您输入密码）。
- en: Windows 10+
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 10+
- en: To install your suite of data wrangling tools on Windows 10+, the first thing
    you’ll need to know is whether your version of the Windows 10 operating system
    is 32-bit or 64-bit.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows 10+上安装您的数据整理工具套件，首先需要知道您的Windows 10操作系统版本是32位还是64位。
- en: To find this information, open up your Start menu, then select the gear icon
    to go to the Settings menu. In the resulting window, choose System → About in
    the lefthand menu. In the section titled “Device specifications,” you’ll see “System
    type,” which will specify whether you have a 32-bit or 64-bit system. For the
    official instructions, see [Microsoft’s related FAQ](https://support.microsoft.com/en-us/windows/32-bit-and-64-bit-windows-frequently-asked-questions-c6ca9541-8dce-4d48-0415-94a3faa2e13d).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到这些信息，请打开开始菜单，然后选择齿轮图标以进入设置菜单。在弹出的窗口中，选择系统 → 关于在左侧菜单中。在名为“设备规格”的部分中，您将看到“系统类型”，其中将指定您是否拥有32位或64位系统。有关官方说明，请参阅[Microsoft相关FAQ](https://support.microsoft.com/en-us/windows/32-bit-and-64-bit-windows-frequently-asked-questions-c6ca9541-8dce-4d48-0415-94a3faa2e13d)。
- en: Make a note of this information before continuing with your setup.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续设置之前，请记下这些信息。
- en: Installing Python and Jupyter Notebook
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Python和Jupyter Notebook
- en: To get started, go to the [Miniconda installer links page](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links)
    and download the Python 3.9 installer appropriate for your system (either 32-bit
    or 64-bit). Once the *.exe* file has downloaded, click through the installer menus,
    leaving the preselected options in place (you can skip the recommended tutorials
    and the “Anaconda Nucleus” sign-up at the end).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请访问[Miniconda安装程序链接页面](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links)，并下载适合您系统的Python
    3.9安装程序（32位或64位）。一旦*.exe*文件下载完成，请点击安装程序菜单，保留预选项（您可以跳过推荐的教程和最后的“Anaconda核心”注册）。
- en: 'Once the installation is complete, you should see two new items in your Start
    menu in the “Recently added” list at the top: “Anaconda Prompt (miniconda3)” and
    “Anaconda Powershell Prompt (miniconda3),” as shown in [Figure 1-2](#windows_start).
    While both will work for our purposes, I recommend you use Powershell as your
    “terminal” interface throughout this book.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，在“最近添加”列表的顶部，你应该会看到两个新项目在你的开始菜单中：“Anaconda Prompt (miniconda3)” 和 “Anaconda
    Powershell Prompt (miniconda3)” ，如图 [图 1-2](#windows_start) 所示。虽然两者都适用于我们的目的，但我建议你在本书中使用Powershell作为你的“终端”界面。
- en: '![Anaconda options in Start menu](assets/ppdw_0102.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Anaconda选项在开始菜单中](assets/ppdw_0102.png)'
- en: Figure 1-2\. Anaconda options in the Start menu
  id: totrans-145
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-2\. Anaconda选项在开始菜单中
- en: 'Now that you have Miniconda installed, you need to open a new terminal (Powershell)
    window and type:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了Miniconda，需要打开一个新的终端（Powershell）窗口并输入：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then hit Return. Next, close and reopen your terminal window as instructed,
    and use the following command (followed by Return) to install Jupyter Notebook:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按回车。接下来，按照说明关闭并重新打开你的终端窗口，并使用以下命令（然后按回车）来安装Jupyter Notebook：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Answer yes (by typing **`y`** and then hitting the Enter key) to the subsequent
    prompts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 回答是（通过输入 **`y`** 然后按回车键）来回应后续的提示。
- en: Installing Atom
  id: totrans-151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装Atom
- en: To install Atom on a Windows 10+ machine, visit [*https://atom.io*](https://atom.io)
    and click the large yellow “Download” button to download the installer.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows 10+机器上安装Atom，请访问 [*https://atom.io*](https://atom.io) 并点击大黄色的“下载”按钮下载安装程序。
- en: Click on the *Atom-Setup-x64.exe* file,^([10](ch01.html#idm45143428675216))
    and wait for the installation to finish; Atom should launch automatically. You
    can answer Yes to the blue pop-up that asks about registering as the default *atom://*
    URI handler.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 *Atom-Setup-x64.exe* 文件，^([10](ch01.html#idm45143428675216)) 并等待安装完成；Atom
    应该会自动启动。你可以回答蓝色弹出窗口的询问，关于是否注册为默认的 *atom://* URI 处理程序，选择是。
- en: Testing your setup
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试你的设置
- en: To make sure that both Python and Jupyter Notebook are working as expected,
    start by opening a terminal window and pointing it to the *data_wrangling* folder
    you created in [“Getting Started with the Command Line”](#getting_started_with_terminal),
    then running the following command:^([11](ch01.html#idm45143428664000))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Python和Jupyter Notebook都按预期工作，请首先打开一个终端窗口，将其指向你在[“命令行入门”](#getting_started_with_terminal)中创建的
    *data_wrangling* 文件夹，然后运行以下命令:^([11](ch01.html#idm45143428664000))
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, run:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you see something like:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似这样的内容：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: this means that Python was installed successfully.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Python安装成功。
- en: 'Next, test out Jupyter Notebook by running:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令来测试Jupyter Notebook：
- en: '[PRE15]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If a browser window opens^([12](ch01.html#idm45143428659312)) that looks something
    like the image in [Figure 1-3](#blank_jupyter), you’re all set and ready to go!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个浏览器窗口打开^([12](ch01.html#idm45143428659312))，看起来像[图 1-3](#blank_jupyter)，那么你已经准备好开始了！
- en: '![Jupyter Notebook running in an empty folder](assets/ppdw_0103.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Jupyter Notebook 在一个空文件夹中运行](assets/ppdw_0103.png)'
- en: Figure 1-3\. Jupyter Notebook running in an empty folder
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. Jupyter Notebook 在一个空文件夹中运行
- en: Working with Python Online
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线使用Python
- en: If you want to skip the hassle of installing Python and code editor on your
    machine (and you plan to only use Python when you have a strong, consistent internet
    connection), working with Jupyter notebooks online through Google Colab is a great
    option. All you’ll need to get started is an unrestricted Google account (you
    can create a new one if you prefer—make sure you know your password!). If you
    have those elements in place, you’re ready to get wrangling with [“Hello World!”](#hello_world)!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跳过在你的机器上安装Python和代码编辑器的麻烦（并且你计划只在有强大，稳定的互联网连接时使用Python），通过Google Colab在线使用Jupyter笔记本是一个很好的选择。你只需要一个无限制的Google账户即可开始（如果你愿意，可以创建一个新的——确保你知道你的密码！）。如果这些要素都准备好了，你就可以开始与
    [“Hello World!”](#hello_world) 玩耍了！
- en: Hello World!
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，世界！
- en: Now that you’ve got your data wrangling tools in place, you’re ready to get
    started writing and running your first Python program. For this, we’ll bow to
    programming tradition and create a simple “Hello World” program; all it’s designed
    to do is print out the words “Hello World!” To get started, you’ll need a new
    file where you can write and save your code.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好使用你的数据整理工具，可以开始编写和运行你的第一个Python程序了。为此，我们将遵循编程传统，创建一个简单的“Hello World”程序；它的设计目的只是打印出“Hello
    World!”这几个词。要开始，你需要一个新的文件，可以在其中编写和保存你的代码。
- en: Using Atom to Create a Standalone Python File
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Atom创建一个独立的Python文件
- en: Atom works just like any other text-editing program; you can launch it using
    your mouse or even using your terminal.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Atom 就像任何其他文本编辑程序一样工作；你可以使用鼠标启动它，甚至可以使用终端启动它。
- en: 'To launch it with your mouse, locate the program icon on your device:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用鼠标启动它，请在设备上找到程序图标：
- en: Chromebook
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Chromebook
- en: Inside the “Linux apps” applications bubble.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Linux 应用”应用程序泡泡内。
- en: Mac
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Mac
- en: In *Applications* or in the Launchpad on Mac.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在*应用程序*或在 Mac 的启动台中。
- en: Windows
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: In the Start menu or via search on Windows. If Atom doesn’t appear in your start
    menu or in search after installing it for the first time on Windows 10, you can
    find [troubleshooting videos on YouTube](https://youtube.com/watch?v=N4liFqsK9nM).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 的“开始”菜单或通过搜索启动。如果在 Windows 10 上第一次安装 Atom 后，在“开始”菜单或搜索中找不到 Atom，你可以在
    YouTube 上找到[故障排除视频](https://youtube.com/watch?v=N4liFqsK9nM)。
- en: 'Alternatively, you can open Atom from the terminal by simply running:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过在终端中运行以下命令来打开 Atom：
- en: '[PRE16]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The first time you open Atom on a Chromebook, you’ll see the “Choose password
    for new keyring” prompt. Since we’ll just be using Atom for code and data editing,
    you can click Cancel to close this prompt. On macOS, you’ll see a warning that
    Atom was downloaded from the internet—you can also click past this prompt.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Chromebook 上首次打开 Atom 时，你会看到“为新钥匙环选择密码”的提示。由于我们只会使用 Atom 进行代码和数据编辑，你可以点击取消关闭此提示。在
    macOS 上，你会看到一个警告，Atom 是从互联网下载的——你也可以忽略此提示。
- en: You should now see a screen similar to the one shown in [Figure 1-4](#atom_welcome).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该看到一个类似于[图 1-4](#atom_welcome)中显示的屏幕。
- en: By default, when Atom launches, it shows one or more “Welcome” tabs; you can
    just close these by clicking the `x` close button that appears to the right of
    the text when you hover over it with your mouse. This will move the *untitled*
    file toward the center of your screen (if you like, you can also collapse the
    Project panel on the left by hovering over its right edge until the `<` appears
    and then clicking on that).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当 Atom 启动时，会显示一个或多个“欢迎”选项卡；你可以通过将鼠标悬停在文本上方并在右侧显示的`x`关闭按钮上单击来关闭这些选项卡。这将把*未命名*文件移到屏幕中央（如果你愿意，你也可以通过将鼠标悬停在其右边缘直到出现`<`，然后单击它来折叠左侧的项目面板）。
- en: '![Atom welcome screen](assets/ppdw_0104.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![Atom 欢迎界面](assets/ppdw_0104.png)'
- en: Figure 1-4\. Atom welcome screen
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. Atom 欢迎界面
- en: Before we start writing any code, let’s go ahead and save our file where we’ll
    know where to find it—in our *data_wrangling* folder! In the File menu, select
    “Save As…” and save the file in your *data_wrangling* folder with the name *HelloWorld.py*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写任何代码之前，让我们先保存文件，这样我们就知道在哪里找到它——在我们的*data_wrangling*文件夹中！在“文件”菜单中，选择“另存为…”，并将文件保存在你的*data_wrangling*文件夹中，文件名为*HelloWorld.py*。
- en: Tip
  id: totrans-188
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: When saving standalone Python files, it’s essential to make sure you add the
    *.py* extension. While your Python code will still work properly without it, having
    the correct extension will let Atom do the super-useful syntax highlighting I
    mentioned in [“Installing Python, Jupyter Notebook, and a Code Editor”](#local_installation).
    This feature will make it *much* easier to write your code correctly the first
    time!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当保存独立的 Python 文件时，确保添加*.py*扩展名是非常重要的。虽然你的 Python 代码没有这个扩展名也能正常工作，但是正确的扩展名将允许
    Atom 执行我在[“安装 Python、Jupyter Notebook 和代码编辑器”](#local_installation)中提到的非常有用的语法高亮功能。这个功能将使你第一次就更容易写出正确的代码！
- en: Using Jupyter to Create a New Python Notebook
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Jupyter 创建新的 Python 笔记本
- en: As you may have noticed when you tested Jupyter Notebook, in [“Testing your
    setup”](#testing_your_setup), the interface you’re using is actually just a regular
    browser window. Believe it or not, when you run the `jupyter notebook` command,
    your regular computer is actually creating a tiny web server on your device!^([13](ch01.html#idm45143428595488))
    Once that main Jupyter window is up and running, you can use your mouse to create
    new Python files and run other commands right in your web browser!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，当你测试 Jupyter Notebook 时，在[“测试你的设置”](#testing_your_setup)中，你使用的界面实际上只是一个常规的浏览器窗口。信不信由你，当你运行`jupyter
    notebook`命令时，你的常规计算机实际上在设备上创建了一个微型 Web 服务器！^([13](ch01.html#idm45143428595488))一旦主
    Jupyter 窗口启动并运行，你可以使用鼠标在你的 Web 浏览器中创建新的 Python 文件和运行其他命令！
- en: 'To get started, open a terminal window and use the command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请打开一个终端窗口并使用以下命令：
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'to move into the *data_wrangling* folder on your Desktop. Next, run:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到你的桌面上的*data_wrangling*文件夹。接下来，运行：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You’ll see a lot of code run past on the terminal window, and your computer
    should automatically open a browser window that will show you an empty directory.
    Under New in the upper-righthand corner, choose “Python 3” to open a new notebook.
    Double-click the word *Untitled* in the upper-lefthand corner next to the Jupyter
    logo to name your file *HelloWorld*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到在终端窗口上运行过的许多代码，并且你的计算机应该会自动打开一个浏览器窗口，显示一个空目录。在右上角的“新建”下选择“Python 3”以打开一个新的笔记本。在
    Jupyter 标志旁边的左上角双击*Untitled*来命名你的文件为*HelloWorld*。
- en: Warning
  id: totrans-197
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 警告
- en: Because Jupyter Notebook is actually running a web server (yes, the same kind
    that runs regular websites) on your local computer, it’s essential that *you leave
    that terminal window open and running* for as long as you are interacting with
    your notebooks. If you close that particular terminal window, your notebooks will
    “crash.”
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Jupyter Notebook 实际上在你的本地计算机上运行一个 Web 服务器（是的，与常规网站运行的相同类型），所以*你需要保持该终端窗口打开并运行*，只要你在与笔记本交互。如果关闭该特定终端窗口，你的笔记本将“崩溃”。
- en: Fortunately, Jupyter notebooks autosave every two minutes, so even if something
    does crash, you probably won’t lose much work. That being said, you may want to
    minimize the terminal window you use to launch Jupyter, just to avoid accidentally
    closing it while you’re working.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Jupyter Notebook 每两分钟自动保存一次，因此即使发生崩溃，你可能也不会丢失太多工作。话虽如此，你可能会希望最小化你用来启动 Jupyter
    的终端窗口，以免在工作时意外关闭它。
- en: Using Google Colab to Create a New Python Notebook
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google Colab 创建一个新的 Python 笔记本
- en: First, sign in to the Google account you want to use for your data wrangling
    work, then visit [the Colab website](https://colab.research.google.com). You’ll
    see something similar to the overlay shown in [Figure 1-5](#colab_overlay).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，登录你要用于数据整理工作的 Google 帐户，然后访问[Colab 网站](https://colab.research.google.com)。你将看到类似于[图
    1-5](#colab_overlay)所示的叠加层。
- en: '![Google Colab landing page (signed in)](assets/ppdw_0105.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![Google Colab 登录页面（已登录）](assets/ppdw_0105.png)'
- en: Figure 1-5\. Google Colab landing page (signed in)
  id: totrans-203
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-5\. Google Colab 登录页面（已登录）
- en: In the bottom-right corner, choose New notebook, then double-click at the top
    left to replace *Untitled0.ipynb* with *HelloWorld.ipynb*.^([14](ch01.html#idm45143428573360))
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在右下角选择新笔记本，然后在左上角双击以替换*Untitled0.ipynb*为*HelloWorld.ipynb*。^([14](ch01.html#idm45143428573360))
- en: Adding the Code
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加代码
- en: Now, we’ll write our first bit of code, which is designed to print out the words
    “Hello World.” No matter which type of Python file you’re using, the code shown
    in [Example 1-1](#hello_world_code) is the same.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写我们的第一段代码，用于打印出“Hello World”这几个字。无论你使用哪种类型的 Python 文件，[示例 1-1](#hello_world_code)
    中显示的代码都是一样的。
- en: Example 1-1\. *hello_world.py*
  id: totrans-207
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 1-1\. *hello_world.py*
- en: '[PRE19]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In a Standalone File
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在独立文件中
- en: All you need to do is copy (or type) the code in [Example 1-1](#hello_world_code)
    into your file and save it!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需复制（或键入）[示例 1-1](#hello_world_code) 中的代码到你的文件中并保存即可！
- en: In a Notebook
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在笔记本中
- en: When you create a new file, there is one empty “code cell” in it by default
    (in Jupyter Notebook, you’ll see `In [ ]` to the left of it; in Google Colab,
    there’s a little “play” button). Copy (or type) the code in [Example 1-1](#hello_world_code)
    into that cell.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新文件时，默认情况下会有一个空的“代码单元格”（在 Jupyter Notebook 中，你会看到左侧的`In [ ]`；在 Google Colab
    中，有一个小的“播放”按钮）。复制（或键入）[示例 1-1](#hello_world_code) 中的代码到该单元格中。
- en: Running the Code
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行代码
- en: Now that we’ve added and saved our Python code in our file, we need to *run*
    it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加并保存了 Python 代码到我们的文件中，我们需要*运行*它。
- en: In a Standalone File
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在独立文件中
- en: 'Open a terminal window and move it into your *data_wrangling* folder using:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，并使用以下命令将其移动到你的*data_wrangling*文件夹中：
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the **`ls`** command and make sure you see your *HelloWorld.py* file listed
    in response. Finally, run:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**`ls`**命令，确保你的*HelloWorld.py*文件在响应中列出。最后运行：
- en: '[PRE21]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see the words `Hello World!` print out on their own line, before
    the command prompt returns (signaling that the program has finished running).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到这几个字`Hello World!`打印在自己的一行上，然后命令提示符返回（表示程序已经运行完毕）。
- en: In a Notebook
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在笔记本中
- en: Hit the “play” button to the left of the cell. You should see the words `Hello
    World!` print out beneath it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 点击单元格左侧的“播放”按钮。你会看到在其下打印出`Hello World!`这几个字。
- en: If everything worked as expected—congratulations! You’ve now written your first
    bit of Python code!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都如预期般工作——恭喜！你现在已经写下了你的第一段 Python 代码！
- en: Documenting, Saving, and Versioning Your Work
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录、保存和版本化你的工作
- en: Before we really dive into Python in [Chapter 2](ch02.html#chapter2), there
    are a few more bits of preparation to do. I know these may seem tedious, but making
    sure you’ve laid the groundwork for properly documenting your work will save you
    dozens of hours of effort and frustration. What’s more, carefully commenting,
    saving, and versioning your code is a crucial part of “bulletproofing” your data
    wrangling work. And while it’s not exactly enticing right now, pretty soon all
    of these steps will be second nature (I promise!), and you’ll see how much speed
    and efficiency it adds to your data work.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正深入讨论 Python 在[第 2 章](ch02.html#chapter2)中之前，还有一些准备工作要做。我知道这些可能看起来很乏味，但确保你已经为正确记录工作奠定了基础将为你节省数十个小时的努力和挫折。更重要的是，仔细注释、保存和版本控制你的代码是“防弹”数据整理工作的关键部分。虽然现在可能并不那么吸引人，但很快所有这些步骤都将成为第二天性（我保证！），你会看到它们为你的数据工作增加了多少速度和效率。
- en: Documenting
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档记录
- en: You may have noticed that the first line you wrote in your code cell or Python
    file in [“Hello World!”](#hello_world) *didn’t* show up in the output; the only
    thing that printed was `Hello World!`. That first line in our file was a *comment*,
    which provides a plain-language description of what the code on the following
    line(s) will do. Almost all programming languages (and some data types!) provide
    a way to include comments, precisely because they are an excellent way to provide
    anyone reading your code^([15](ch01.html#idm45143424049200)) with the context
    and explanation necessary to understand what the specific program or section of
    code is doing.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在你的代码单元格或 Python 文件中的第一行中写的内容在[“Hello World！”](#hello_world) *没有*显示在输出中；只有`Hello
    World!`被打印出来了。我们文件中的第一行是一个*注释*，它提供了对接下来代码行（行）将做什么的简明语言描述。几乎所有编程语言（和一些数据类型！）都提供了一种包括注释的方法，正是因为它们是为任何阅读你代码的人提供上下文和解释所必需的出色方式^([15](ch01.html#idm45143424049200))。
- en: 'Though many individual programmers tend to overlook (read: skip) the commenting
    process, it is probably the single most valuable programming habit you can develop.
    Not only will it save you—and anyone you collaborate with—an enormous amount of
    time and effort when you are looking through a Python program, but commenting
    is also *the single best way* to really internalize what you’re learning about
    programming more generally. So even though the code samples provided with this
    book will already have comments, I *strongly* encourage you to rewrite them in
    your own words. This will help ensure that when future you returns to these files,
    they’ll contain a clear walk-through of how you understood each particular coding
    challenge the first time.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多个人程序员倾向于忽视（即：跳过）注释过程，但这可能是你可以养成的单个最有价值的编程习惯。当你查看 Python 程序时，它不仅会为你和任何你合作的人节省大量时间和精力，而且注释也是真正内化你对编程更广泛学习的*最佳方式*。因此，即使这本书提供的代码示例已经有注释，我*强烈*建议你用自己的话重新编写它们。这将有助于确保将来再次打开这些文件时，它们将包含对你第一次理解每个特定编码挑战的清晰解释。
- en: The other essential documentation process for data wrangling is keeping what
    I call a “data diary.” Like a personal diary, your data diary can be written and
    organized however you like; the key thing is to capture *what you are doing as
    you are doing it*. Whether you’re clicking around the web looking for data, emailing
    experts, or designing a program, you need somewhere to keep track of everything,
    because you *will* forget.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 数据整理的另一个重要文档过程是保留我称之为“数据日记”。就像个人日记一样，你的数据日记可以按照你喜欢的方式书写和组织；关键是在做事的时候记录下*你正在做的事情*。无论你是在网上寻找数据、给专家发邮件还是设计程序，你都需要一个地方来记录所有事情，因为你*肯定会*忘记。
- en: The first entry in your “diary” for any data wrangling project should be *the
    question you are trying to answer*. Though it may be a challenge, try to write
    your question as a single sentence, and put it at the top of your data wrangling
    project diary. Why is it important that your question be a single sentence? Because
    the process of real data wrangling will inevitably lead you down enough “rabbit
    holes”—to answer a question about your data’s origin, for example, or to solve
    some programming problem—that it’s very easy to lose track of what you were originally
    trying to accomplish (and why). Once you have that question at the top of your
    data diary, though, you can always come back to it for a reminder.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 任何数据整理项目中“日记”的第一条目应该是*您试图回答的问题*。虽然这可能是一项挑战，但请尝试将您的问题写成一个句子，并将其放在数据整理项目日记的顶部。为什么重要的是您的问题必须是一个句子？因为真正的数据整理过程将不可避免地使您沉迷于足够多的“兔子洞”——例如回答有关数据来源的问题，或解决某些编程问题——这很容易让您忘记最初试图完成的任务（及其原因）。但一旦您在数据日记的顶部有了这个问题，您随时可以回到这个问题来进行提醒。
- en: Your data diary question will also be invaluable for helping you make decisions
    about how to spend your time when data wrangling. For example, your dataset may
    contain terms that are unfamiliar to you—should you try to track down the meaning
    of every single one? Yes, *if* doing so will help answer your question. If not,
    it may be time to move on to another task.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您的数据日记问题对于帮助您在数据整理时决定如何分配时间也将非常宝贵。例如，您的数据集可能包含对您不熟悉的术语——您应该尝试追踪每一个单词的含义吗？是的，*如果*这样做有助于回答您的问题。如果不是，可能是时候转向另一个任务了。
- en: 'Of course, once you succeed in answering your question (and you will! at least
    in part), you’ll almost certainly find you have more questions you want to answer,
    or that you want to answer the same question again, but a week, a month, or a
    year later. Having your data diary on hand as a guide will help you do it *much*
    faster and more easily the next time. That’s not to say that it doesn’t take effort:
    in my experience, keeping a thorough data diary makes a project take about 40%
    longer to complete the first time around, but it makes doing it again (with a
    new version of the dataset, for example) at least twice as fast. Having a data
    diary is also a valuable proof of work: if you’re ever looking for the process
    by which you got your data wrangling results, your data diary will have all the
    information that you (or anyone else) might need.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一旦您成功回答了您的问题（而且您会成功的！至少部分成功），您几乎肯定会发现您有更多问题想要回答，或者您想要在一周、一个月或一年后再次回答同样的问题。随手拿出您的数据日记作为指南将帮助您*快速*且更轻松地下次完成。这并不是说这不需要努力：根据我的经验，保持一个详尽的数据日记会使得项目第一次完成时间延长约40%，但在下一次（例如使用数据集的新版本）时，完成速度至少会快两倍。拥有数据日记还是一种有价值的工作证明：如果您曾试图了解数据整理结果的过程，您的数据日记将包含您（或任何其他人）可能需要的所有信息。
- en: When it comes to *how* you keep your data diary, however, it’s really up to
    you. Some folks like to do a lot of fancy formatting; others just use a plain
    old text file. You may even want to use a real gosh-for-sure paper notebook! Whatever
    works for you is fine. While your data diary will be an invaluable reference when
    it comes time to communicate with others about your data (and the wrangling process),
    you should organize it however suits you best.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关于*如何*保持您的数据日记，真的取决于您自己。有些人喜欢进行大量的花式格式化；其他人只使用简单的纯文本文件。您甚至可能想使用真正的纸质笔记本！对您有效的任何方法都可以。当您需要与他人沟通您的数据（及整理过程）时，您的数据日记将是一份宝贵的参考，您应该按照最适合您的方式进行组织。
- en: Saving
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存
- en: 'In addition to documenting your work carefully through comments and data diaries,
    you’ll want to make sure you save it regularly. Fortunately, the “saving” process
    is essentially built in to our workflow: notebooks autosave regularly, and to
    run the code in our standalone file, we have to save our changes first. Whether
    you rely on keyboard shortcuts (for me, hitting Ctrl+S is something of a nervous
    habit) or use mouse-driven menus, you’ll probably want to save your work every
    10 minutes or so at least.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过注释和数据日记仔细记录您的工作外，您还需要确保定期保存。幸运的是，“保存”过程基本上已内置到我们的工作流程中：笔记本会定期自动保存，并且要运行我们独立文件中的代码，我们必须首先保存更改。无论您是依赖键盘快捷键（对我来说，按下Ctrl+S几乎成了一种紧张的习惯）还是使用鼠标驱动的菜单，您可能至少每10分钟就想保存一次工作。
- en: Tip
  id: totrans-236
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are using standalone files, one thing to get familiar with is how your
    code editor indicates that a file has unsaved changes. In Atom, for example, a
    small colored dot appears in the document tab just to the right of the filename
    when there are unsaved changes to the file. If the code you’re running isn’t behaving
    as you expect, double-check that you have it saved first and then try again.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用独立文件，需要熟悉的一件事是你的代码编辑器如何指示文件有未保存的更改。例如，在 Atom 中，当文件有未保存的更改时，文档标签右侧会出现一个小彩点。如果你运行的代码表现不符合你的预期，请先确认是否已保存，然后再尝试一次。
- en: Versioning
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: Programming—like most writing—is an iterative process. My preferred approach
    has always been to write a little bit of code, test it out, and if it works, write
    a little more and test again. One goal of this approach is to make it easier to
    backtrack in case I add something that accidentally “breaks” the code.^([16](ch01.html#idm45143424006608))
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 编程——就像大多数写作一样——是一个迭代的过程。我的首选方法一直是先写一点代码，测试一下，如果有效，再写一点并再次测试。这种方法的一个目标是使得在不小心“破坏”代码的情况下更容易回退。^([16](ch01.html#idm45143424006608))
- en: At the same time, it’s not always possible to guarantee that your code will
    be “working” when you have to step away from it—whether because the kids just
    got home, the study break is over, or it’s time for bed. You always want to have
    a “safe” copy of your code that you can come back to. This is where version control
    comes in.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，当你不得不离开代码时，无法保证代码一定“运行”——无论是因为孩子回家了、学习休息结束，还是该睡觉了。你总想要有一个“安全”的代码副本，以备不时之需。这就是版本控制的作用所在。
- en: Getting started with GitHub
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用 GitHub
- en: 'Version control is basically just a system for backing up your code, both on
    your computer and in the cloud. In this book, we’ll be using GitHub for version
    control; it’s a hugely popular website where you can back up your code for free.
    Although there are many different ways to interact with GitHub, we’ll use the
    command line because it just takes a few quick commands to get your code safely
    tucked away until you’re ready to work on it again. To get started, you’ll need
    to create an account on GitHub, install Git on your computer, and then connect
    the accounts to one another:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制基本上只是一个备份系统，可以在你的计算机和云端备份你的代码。在本书中，我们将使用 GitHub 进行版本控制；这是一个非常流行的网站，你可以免费备份你的代码。尽管与
    GitHub 互动的方式有很多种，但我们将使用命令行，因为只需几个快速的命令，你的代码就可以安全地存储，等待下次继续工作。要开始使用，你需要在 GitHub
    上创建一个账号，在计算机上安装 Git，然后将这些账号连接起来：
- en: Visit the GitHub website at [*https://github.com*](https://github.com) and click
    “Sign Up.” Enter your preferred username (you may need to try a few to find one
    that’s available), your email address, and your chosen password (make sure to
    write this down or save it to your password manager—you’ll need it soon!).
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 GitHub 网站 [*https://github.com*](https://github.com)，并点击“Sign Up”。输入你喜欢的用户名（可能需要尝试几个才能找到一个可用的），你的电子邮箱地址，以及选择的密码（确保记下来或保存到密码管理器中——很快你会需要它！）。
- en: Once you’ve logged in, click the New button on the left. This will open the
    “Create a new repository” page shown in [Figure 1-6](#create_new_repo).
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，点击左侧的“New”按钮。这将打开如下所示的“创建新仓库”页面，详见[图 1-6](#create_new_repo)。
- en: Give your repository a name. This can be anything you like, but I suggest you
    make it something descriptive, like *data_wrangling_exercises*.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给你的仓库起一个名字。这可以是任何你喜欢的东西，但我建议你使用描述性的名称，比如 *data_wrangling_exercises*。
- en: Select the Private radio button, and select the checkbox next to the option
    that says “Add a README file.”
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“Private”单选按钮，并选中旁边的“Add a README file”选项前面的复选框。
- en: Click the"Create repository” button.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Create repository”按钮。
- en: '![Creating a new repository (or ''repo'') on GitHub.com](assets/ppdw_0106.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![在 GitHub.com 上创建新仓库（或“repo”）](assets/ppdw_0106.png)'
- en: Figure 1-6\. Creating a new repository (or “repo”) on GitHub.com
  id: totrans-249
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-6\. 在 GitHub.com 上创建新仓库（或“repo”）
- en: You’ll now see a page that shows *data_wrangling_exercises* in large type, with
    a small pencil icon just above and to the right. Click on the pencil and you’ll
    see an editing interface where you can add text. This is your *README* file, which
    you can use to describe your repository. Since we’ll be using this repository
    (or “repo” for short) to store exercises from this book, you can just add a sentence
    to that effect, as shown in [Figure 1-7](#edit_readme).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将看到一个页面，显示 *data_wrangling_exercises* 以大号字体展示，右上方有一个小铅笔图标。点击铅笔图标，您将看到一个编辑界面，在此您可以添加文本。这是您的*README*文件，您可以用它来描述您的仓库。因为我们将使用此仓库（或简称“repo”）来存储此书中的练习，您可以只添加一句说明，如
    [Figure 1-7](#edit_readme) 所示。
- en: 'Scroll to the bottom of the page and you’ll see your profile icon with an editable
    area to the right that says “Commit changes,” and below that some default text
    that says “Update README.md.” Replace that default text with a brief description
    of what you did; this is your “commit message.” For example, I wrote: “Added description
    of repo contents,” as shown in [Figure 1-8](#readme_commit_msg). Then click the"Commit
    changes” button.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到页面底部，您将看到您的个人资料图标，右侧有一个可编辑区域，显示“提交更改”，在其下方是一些默认文本，显示“更新 README.md”。将该默认文本替换为您所做内容的简要描述；这就是您的“提交消息”。例如，我写道：“添加仓库内容描述”，如
    [Figure 1-8](#readme_commit_msg) 所示。然后点击“提交更改”按钮。
- en: '![Updating the README file on GitHub.com](assets/ppdw_0107.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![在 GitHub.com 更新 README 文件](assets/ppdw_0107.png)'
- en: Figure 1-7\. Updating the *README* file on GitHub
  id: totrans-253
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 1-7\. 在 GitHub 上更新*README*文件
- en: '![Adding a commit message to the README file changes](assets/ppdw_0108.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![添加提交消息到 README 文件更改](assets/ppdw_0108.png)'
- en: Figure 1-8\. Adding a commit message to the README file changes
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 1-8\. 添加提交消息到 README 文件更改
- en: When the screen refreshes, you’ll now see the text you added to the main file
    underneath the original *data_wrangling_exercises* title. Just above that, you
    should be able to see the text of your commit message, along with the approximate
    amount of time that’s passed since you clicked “Commit changes.” If you click
    on the text that says “2 commits” to the right of that, you’ll see the “commit
    history,” which will show you all the changes (so far just two) that have been
    made to that repo, as shown in [Figure 1-9](#readme_commit_history). If you want
    to see how a commit changed a particular file, just click on the six-character
    code to the right, and you’ll see what’s known as a *diff* (for “difference”)
    view of the file. On the left is the file as it existed before the commit, and
    on the right is the version of the file in this commit.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕刷新后，您将看到添加到主文件下 *data_wrangling_exercises* 标题下的文本。在这之上，您应该能看到您的提交消息文本，以及自您点击“提交更改”以来经过的大约时间。如果您点击右侧标有“2
    次提交”的文字，您将看到“提交历史”，其中显示了到目前为止（仅有两次）对该仓库进行的所有更改，如 [Figure 1-9](#readme_commit_history)
    所示。如果您想查看提交如何改变特定文件，请点击右侧的六位字符代码，您将看到所谓的*差异*（即“difference”）视图文件。左侧是提交前文件的版本，右侧是此提交文件的版本。
- en: '![A brief commit history for our new repo.](assets/ppdw_0109.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![我们新仓库的简要提交历史。](assets/ppdw_0109.png)'
- en: Figure 1-9\. A brief commit history for our new repo
  id: totrans-258
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 1-9\. 我们新仓库的简要提交历史
- en: By this point, you may be wondering how this relates to backing up code, since
    all we’ve done is click some buttons and edit some text. Now that we’ve got a
    “repo” started on GitHub, we can create a copy of it on our local machine and
    use the command line to make “commits” of working code and back them up to this
    website with just a few commands.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您可能会想知道这与备份代码有何关系，因为我们所做的只是点击一些按钮并编辑一些文本。现在我们在 GitHub 上启动了一个“repo”，我们可以在本地计算机上创建其副本，并使用命令行对工作代码进行“提交”，并通过几个命令将其备份到此网站。
- en: 'For backing up local files: installing and configuring Git'
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对于本地文件备份：安装和配置 Git
- en: 'Like Python itself, Git is software that you install on your computer and run
    via the command line. Because version control is such an integral part of most
    coding processes, Git comes built in on macOS and Linux; instructions for Windows
    machines can be found [on GitHub](https://github.com/git-guides/install-git),
    and for ChromeBooks, you can install Git using the [Termux app](https://techrepublic.com/article/how-to-use-github-in-chrome-os).
    Once you’ve completed the necessary steps, open up a terminal window and type:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Python本身一样，Git是您在计算机上安装并通过命令行运行的软件。由于版本控制是大多数编码过程中不可或缺的部分，Git在macOS和Linux上是内置的；Windows机器的安装说明可以在[GitHub上找到](https://github.com/git-guides/install-git)，对于ChromeBook，您可以使用[Termux应用](https://techrepublic.com/article/how-to-use-github-in-chrome-os)安装Git。完成必要步骤后，打开终端窗口并输入：
- en: '[PRE22]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Followed by ‘enter’. If *anything* prints, you’ve already got Git! You’ll still,
    however, want to set your username and email (you can use any name and email you
    like) by running the following commands:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按‘enter’。如果*任何*东西打印出来，说明您已经有了Git！然而，您仍然需要通过运行以下命令来设置用户名和电子邮件（您可以使用任何喜欢的名称和电子邮件）：
- en: '[PRE23]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that you have Git installed and have added your name and email of choice
    to your local Git account, you need to create an *authentication key* on your
    device so that when you back up your code, GitHub knows that it really came from
    you (and not just someone on the other side of the world who figured out your
    username and password).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了Git并向本地Git账户添加了您喜欢的名称和电子邮件，需要在设备上创建*身份验证密钥*，以便在备份代码时，GitHub知道这确实是来自您的（而不仅仅是来自世界另一端猜出您用户名和密码的人）。
- en: 'To do this, you’ll need to create what’s known as an *SSH key*—which is a long,
    unique string of characters stored on your device that GitHub can use to identify
    it. Creating these keys with the command line is easy: just open up a terminal
    window and type:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要创建所谓的*SSH密钥* —— 这是存储在您设备上的一长串唯一字符，GitHub可以用它来识别您的设备。在命令行上创建这些密钥很容易：只需打开终端窗口并输入：
- en: '[PRE24]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'When you see the “Enter a file in which to save the key” prompt, just press
    the Enter or Return key, so it saves the default location (this will make it easier
    to find in a minute, when we want to add it to GitHub). When you see the following
    prompt:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到“输入要保存密钥的文件”提示时，只需按Enter或Return键，以保存默认位置（这样稍后当我们想要将其添加到GitHub时会更容易找到）。当您看到以下提示时：
- en: '[PRE25]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '*definitely add a passphrase!* And *don’t* make it the password to your GitHub
    (or any other) account. However, since you’ll need to supply this passphrase every
    time you want to back your code up to GitHub,^([17](ch01.html#idm45143423946496))
    it needs to be memorable—try something like the first three words of the second
    verse of your favorite song or poem, for example. As long as it’s at least 8–12
    characters long, you’re set!'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*一定要添加一个密码！*但*不要*把它作为您的GitHub（或任何其他）账户的密码。然而，由于您每次想要将代码备份到GitHub时都需要提供此密码，^([17](ch01.html#idm45143423946496))它需要是易于记忆的
    —— 您可以尝试使用您喜欢的歌曲或诗歌第二段的前三个单词，例如。只要它至少有8-12个字符长，您就可以设置好了！'
- en: Once you’ve reentered your passphrase for confirmation, you can copy your key
    to your GitHub account; this will let GitHub match the key on your account to
    the one on your device. To do this, start by clicking on your profile icon in
    the upper-righthand corner of GitHub and choosing Settings from the drop-down
    menu. Then, on the lefthand navigation bar, click on the “SSH and GPG Keys” option.
    Toward the upper right, click the “New SSH key” button, as shown in [Figure 1-10](#github_ssh_page).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您再次输入确认密码，您就可以将密钥复制到您的GitHub账户上；这将使GitHub能够将您账户上的密钥与设备上的密钥匹配。要做到这一点，请首先点击GitHub右上角的个人资料图标，从下拉菜单中选择“Settings”。然后，在左侧导航栏中，点击“SSH
    and GPG Keys”选项。在右上角，点击“New SSH key”按钮，如图[Figure 1-10](#github_ssh_page)所示。
- en: '![SSH key landing page on GitHub.com.](assets/ppdw_0110.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub.com上的SSH密钥页面。](assets/ppdw_0110.png)'
- en: Figure 1-10\. SSH key landing page on GitHub.com
  id: totrans-273
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-10\. GitHub.com上的SSH密钥页面
- en: 'To access the SSH key you just generated, you’ll need to navigate to the main
    user folder on your device (this is the folder that a new terminal window will
    open in) and set it (temporarily) to show hidden files:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问刚生成的SSH密钥，您需要导航到设备上的主用户文件夹（这是新终端窗口将打开的文件夹），并设置它（临时）以显示隐藏文件：
- en: Chromebook
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Chromebook
- en: Your main user folder is just the one called *Linux files*. To show hidden files,
    just click the three stacked dots at the top right of any Files window and choose
    “Show hidden files.”
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你的主用户文件夹实际上就是名为*Linux files*的文件夹。要显示隐藏文件，只需单击任何文件窗口右上角的三个堆叠点，并选择“显示隐藏文件”。
- en: macOS
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: Use the Command-Shift-. keyboard shortcut to show/hide hidden files.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Command-Shift-.键盘快捷键来显示/隐藏隐藏文件。
- en: Windows
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: Open File Explorer on the taskbar, then choose View → Options → “Change folder
    and search options.” On the View tab in “Advanced settings,” select “Show hidden
    files, folders, and drives,” then click OK.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务栏上打开文件资源管理器，然后选择“查看” → “选项” → “更改文件夹和搜索选项”。在“高级设置”中的“视图”选项卡中，选择“显示隐藏文件、文件夹和驱动器”，然后点击“确定”。
- en: Look for the folder (it actually is a folder!) called *.ssh* and click into
    it, then using a basic text editor (like Atom), open the file called *id_rsa.pub*.
    Using your keyboard to select and then copy everything in the file, paste it into
    the empty text area labeled Key, as shown in [Figure 1-11](#add_ssh_key).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个文件夹（它实际上是一个文件夹！）叫做*.ssh*，点击进入它，然后使用基本文本编辑器（如Atom），打开名为*id_rsa.pub*的文件。使用键盘选择并复制文件中的所有内容，然后将其粘贴到标有“密钥”的空文本区域中，如[图1-11](#add_ssh_key)所示。
- en: '![Uploading your SSH key to your GitHub.com account.](assets/ppdw_0111.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![上传你的SSH密钥到你的GitHub.com账户。](assets/ppdw_0111.png)'
- en: Figure 1-11\. Uploading your SSH key to your GitHub.com account
  id: totrans-283
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-11\. 将你的SSH密钥上传到你的GitHub.com账户
- en: Finally, give this key a name so you know what device it’s associated with,
    and click the"Add new SSH key” button—you will probably have to reenter your main
    GitHub password. That’s it! Now you can go back to leaving hidden files hidden
    and finish connecting your GitHub account to your device and/or Colab account.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，给这个密钥起一个名字，这样你就知道它与哪个设备相关联，并点击“添加新SSH密钥”按钮——你可能需要重新输入你的主GitHub密码。就这样！现在你可以继续保持隐藏文件的隐藏状态，并完成将你的GitHub帐户连接到你的设备和/或Colab帐户的过程。
- en: Tip
  id: totrans-285
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: 'I recommend using keyboard shortcuts to copy/paste your SSH key because the
    *exact* string of characters (including spaces) actually matters; if you use a
    mouse, something might get dragged around. If you paste in your key and GitHub
    throws an error, however, there are a couple of things to try:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议使用键盘快捷键复制/粘贴你的SSH密钥，因为确切的字符串（包括空格）实际上是有影响的；如果你使用鼠标，可能会出现拖动的情况。然而，如果你粘贴你的密钥而GitHub报错了，有几件事情可以尝试：
- en: Make sure you’re uploading the contents of the *.pub* file (you never really
    want to do anything with the other one).
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你上传的是*.pub*文件的内容（你实际上不想对另一个文件做任何操作）。
- en: Close the file (without saving) and try again.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭文件（不保存）然后重试。
- en: If you still have trouble, you can always just delete your whole .ssh folder
    and generate new keys—since they haven’t been added to anything yet, there’s no
    loss in just starting over!
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然遇到问题，你可以直接删除整个.ssh文件夹并生成新的密钥——因为它们还没有添加到任何地方，所以重新开始并没有损失！
- en: Tying it all together
  id: totrans-290
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 把这一切联系到一起
- en: 'Our final step is to create a linked copy of our GitHub repo on our local computer.
    This is easily done via the `git clone` command:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是在我们的本地计算机上创建GitHub仓库的链接副本。这可以通过`git clone`命令轻松完成：
- en: Open a terminal window, and navigate to your *data_wrangling* folder.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到你的*data_wrangling*文件夹。
- en: On GitHub, go to *`your_github_username`/data_wrangling_exercises*.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub上，转到*`your_github_username`/data_wrangling_exercises*。
- en: Still on GitHub, click theCode button toward the top of the page.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍在GitHub上，点击页面顶部的“Code”按钮。
- en: In the “Clone with SSH” pop-up, click the small clipboard icon next to the URL,
    as shown in [Figure 1-12](#clone_via_ssh).
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“使用SSH克隆”弹出窗口中，点击URL旁边的小剪贴板图标，如[图1-12](#clone_via_ssh)所示。
- en: '![Retrieving the repo''s SSH location.](assets/ppdw_0112.png)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![检索回购的SSH位置。](assets/ppdw_0112.png)'
- en: Figure 1-12\. Retrieving the repo’s SSH location
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-12\. 检索回购的SSH位置
- en: 'Back in your terminal window, type **`git clone`** and then paste the URL from
    your clipboard (or type it directly if needed). It will look something like:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的终端窗口，输入**`git clone`**，然后粘贴从剪贴板中的URL（或者如果需要，直接输入）。它看起来可能是这样的：
- en: '[PRE26]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You may get a prompt asking if you would like to add the destination to the
    list of known hosts. Type **`yes`** and hit Return. If prompted, provide your
    SSH password.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会收到一个提示，问你是否要将目标添加到已知主机列表中。输入**`yes`**并按回车键。如果提示，输入你的SSH密码。
- en: When you see the “done” message, type **`ls`**. You should now see *data_wrangling_exercises*
    in your *data_wrangling* folder.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到“完成”消息后，输入**`ls`**。现在你应该在*data_wrangling*文件夹中看到*data_wrangling_exercises*。
- en: Finally, type **`cd data_wrangling_exercises`** and hit Enter to move your terminal
    into the copied repo. Use the `ls` command to have the terminal show the *README.md*
    file.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入**`cd data_wrangling_exercises`**并按 Enter 键将终端移动到复制的仓库中。使用`ls`命令让终端显示*README.md*文件。
- en: Whew! That probably seems like a lot, but keep in mind that you only ever need
    to create an SSH key once, and you’ll only have to go through the cloning process
    once per repo (and all the exercises in this book can be done in the same repo).
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这可能看起来很多，但请记住，您只需创建一次 SSH 密钥，并且每个仓库只需克隆一次（本书中的所有练习都可以在同一个仓库中完成）。
- en: Now let’s see how this all works in action by adding our Python file to our
    repo. In a finder window, navigate to your *data_wrangling* folder. Save and close
    your *HelloWorld.py* or *HelloWorld.ipynb* file, and drag it into the *data_wrangling_exercises*
    folder. Back in terminal, use the `ls` command to confirm that you see your Python
    file.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过将我们的 Python 文件添加到我们的仓库中来看看这一切是如何运作的。在 Finder 窗口中，导航到您的*data_wrangling*文件夹。保存并关闭您的*HelloWorld.py*或*HelloWorld.ipynb*文件，并将其拖放到*data_wrangling_exercises*文件夹中。回到终端，使用`ls`命令确认您看到您的
    Python 文件。
- en: Our final step is to use the `add` command to let Git know that we want our
    Python file to be part of what gets backed up to GitHub. We’ll then use a `commit`
    to save the current version, followed by the `push` command to actually upload
    it to GitHub.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是使用`add`命令告知 Git 我们希望我们的 Python 文件成为备份到 GitHub 的一部分。然后我们将使用`commit`保存当前版本，接着使用`push`命令实际上传到
    GitHub。
- en: 'To do this, we’re going to start by running `git status` in the terminal window.
    This should generate a message that mentions “untracked files” and shows the name
    of your Python file. This is what we expected (but running `git status` is a nice
    way to confirm it). Now we’ll do the adding, committing, and pushing process described
    previously. Note that the `add` commands produce output messages in the terminal:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们将从终端窗口中运行`git status`开始。这应该生成一个提到“未跟踪文件”的消息，并显示您的 Python 文件的名称。这正是我们预期的（但运行`git
    status`是确认的好方法）。现在我们将执行之前描述的添加、提交和推送过程。请注意，`add`命令会在终端中产生输出消息：
- en: In terminal, run **`git add`** *`your_python_filename`*.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行**`git add`** *`your_python_filename`*。
- en: Then run **`git commit -m "Adding my Hello World Python file."`** *`your_python_filename`*.
    The `-m` command indicates that the quoted text should be used as the commit message—the
    command-line equivalent of what we entered on GitHub for our *README* update a
    few minutes ago.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后运行**`git commit -m "添加我的 Hello World Python 文件。"`** *`your_python_filename`*。`-m`命令指示使用引号中的文本作为提交消息，相当于我们刚才在
    GitHub 上输入的*README*更新的命令行等价物。
- en: Finally, run **`git push`**.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，运行**`git push`**。
- en: The final command is what uploads your files to GitHub (note that this clearly
    will not work if you don’t have an available internet connection, but you can
    make commits anytime you like and run the `push` command whenever you have internet
    again). To confirm that everything worked correctly, reload your GitHub repo page,
    and you’ll see that your Python file and commit message have been added!
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的命令是上传您的文件到 GitHub（请注意，如果您没有可用的互联网连接，这显然不起作用，但您可以随时进行提交并在再次连接互联网时运行`push`命令）。确认一切工作正常后，重新加载
    GitHub 仓库页面，您将看到已添加您的 Python 文件和提交消息！
- en: 'For backing up online Python files: connecting Google Colab to GitHub'
  id: totrans-311
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用于在线备份 Python 文件：将 Google Colab 连接到 GitHub
- en: If you’re doing all of your data wrangling online, you can connect Google Colab
    directly to your GitHub account. Make sure you’re logged in to your data wrangling
    Google account and then visit [*https://colab.research.google.com/github*](https://colab.research.google.com/github).
    In the pop-up window, it will ask you to sign in to your GitHub account, and then
    to “Authorize Colaboratory.” Once you do so, you can select a GitHub repo from
    the drop-down menu on the left, and any Jupyter notebooks that are in that repo
    will appear below.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在进行所有的数据整理工作，您可以直接将 Google Colab 连接到您的 GitHub 账户。确保您已登录到您的数据整理 Google 账户，然后访问[*https://colab.research.google.com/github*](https://colab.research.google.com/github)。在弹出窗口中，它将要求您登录到您的
    GitHub 账户，然后“授权 Colaboratory”。一旦您这样做了，您可以从左侧的下拉菜单中选择一个 GitHub 仓库，该仓库中的任何 Jupyter
    笔记本将显示在下方。
- en: Note
  id: totrans-313
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The Google Colab view of your GitHub repos will *only* show you Jupyter notebooks
    (files that end in *.ipynb*). To see all files in a repo, you’ll need to visit
    it on the GitHub website.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 查看你的 GitHub 仓库在 Google Colab 上的视图将*仅显示* Jupyter 笔记本（以 *.ipynb* 结尾的文件）。要查看仓库中的所有文件，您需要访问
    GitHub 网站。
- en: Tying it all together
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将所有这些联系起来
- en: If you’re working on Google Colab, all you have to do to add a new file to your
    GitHub repo is to choose File → Save a copy in GitHub. After automatically opening
    and closing a few pop-ups (this is Colab logging in to your GitHub account in
    the background), you’ll once again be able to choose the GitHub repo where you
    want to save your file from the drop-down menu at the top left. You can then choose
    to keep (or change) the notebook name and add a commit message. If you leave “Include
    a link to Colaboratory” checked in this window, then the file in GitHub will include
    a little “Open in Colab” label, which you’ll be able to click to automatically
    open the notebook in Colab from GitHub. Any notebooks that you don’t explicitly
    back up in GitHub this way will be in your Google Drive, inside a folder called
    *Colab Notebooks*. You can also find them by visiting [the Colab website](https://colab.research.google.com)
    and selecting the Google Drive tab at the top.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Google Colab，在GitHub仓库中添加新文件的方法是选择 文件 → 在GitHub中保存副本。在自动打开和关闭几个弹出窗口后（这是Colab在后台登录到您的GitHub帐户），您将再次可以从左上角的下拉菜单中选择要将文件保存到的GitHub仓库。然后，您可以选择保留（或更改）笔记本名称并添加提交消息。如果您在此窗口中勾选“包括到Colaboratory的链接”，那么GitHub中的文件将包含一个小的“在Colab中打开”的标签，您可以点击它来自动从GitHub中打开笔记本到Colab中。这种方式没有明确备份到GitHub的任何笔记本将位于您的Google
    Drive中，名为*Colab Notebooks*的文件夹中。您也可以通过访问[Colab网站](https://colab.research.google.com)并在顶部选择Google
    Drive选项卡来找到它们。
- en: Conclusion
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'The goal of this chapter was to provide you with a general overview of what
    you can expect to learn in this book: what I mean by data wrangling and data quality,
    and why I think the Python programming language is the right tool for this work.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是为您提供本书中可以期待学到的内容的概述：我所说的数据整理和数据质量的含义，以及为什么我认为Python编程语言是这项工作的正确工具。
- en: 'In addition, we covered all the setup you’ll need to get started (and keep
    going!) with Python for data wrangling, by offering instructions for setting up
    your choice of programming environment: working with “standalone” Python files
    or Jupyter notebooks on your own device, or using Google Colab to use Jupyter
    notebooks online. Finally, we covered how you can use version control (no matter
    which setup you have) to back up, share, and document your work.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还介绍了所有设置，让您可以开始（并继续！）使用Python进行数据整理，通过提供设置您选择的编程环境的说明：在您自己的设备上使用“独立”Python文件或Jupyter笔记本，或者使用Google
    Colab在线使用Jupyter笔记本。最后，我们还介绍了如何使用版本控制（无论您选择哪种设置）来备份、分享和记录您的工作。
- en: 'In the next chapter, we’ll move far beyond our “Hello World” program as we
    work through the foundations of the Python programming language and even tackle
    our first data wrangling project: a day in the life of New York’s Citi Bike system.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将远离我们的“Hello World”程序，逐步学习Python编程语言的基础知识，甚至开始我们的第一个数据整理项目：纽约市Citi Bike系统的一天。
- en: ^([1](ch01.html#idm45143428836064-marker)) We’ll cover these in detail in Chapters
    [4](ch04.html#chapter4) and [5](ch05.html#chapter5), respectively.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45143428836064-marker)) 我们将分别在第[4](ch04.html#chapter4)章和第[5](ch05.html#chapter5)章详细讨论这些内容。
- en: ^([2](ch01.html#idm45143428764544-marker)) In the world of computing, this is
    often expressed as “garbage in/garbage out.”
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm45143428764544-marker)) 在计算机领域，这通常被表达为“垃圾进/垃圾出”。
- en: '^([3](ch01.html#idm45143429060384-marker)) Disclosure: many ProPublica staffers,
    including the lead reporter on this series, are former colleagues of mine.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#idm45143429060384-marker)) 披露：许多ProPublica员工，包括本系列的首席记者，都是我的前同事。
- en: '^([4](ch01.html#idm45143429056016-marker)) The “Machine Bias” series generated
    substantial debate in the academic community, where some took issue with ProPublica’s
    definition of *bias*. Much more importantly, however, the controversy spawned
    an entirely new area of academic research: fairness and transparency in machine
    learning and intelligence.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.html#idm45143429056016-marker)) “机器偏见”系列在学术界引发了广泛的辩论，一些人对ProPublica对*偏见*的定义持有异议。然而，更重要的是，这场争议催生了一个全新的学术研究领域：机器学习和智能中的公平与透明度。
- en: ^([5](ch01.html#idm45143428504912-marker)) Remember that even a misplaced space
    character can cause problems in Python.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.html#idm45143428504912-marker)) 记住，即使一个错位的空格字符在Python中也可能会导致问题。
- en: ^([6](ch01.html#idm45143428494768-marker)) This same software can also be used
    to create notebooks in R and other scripting languages.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.html#idm45143428494768-marker)) 这款软件还可以用于创建R和其他脚本语言的笔记本。
- en: ^([7](ch01.html#idm45143428474976-marker)) The numbers here are called *version
    numbers*, and they increase sequentially as the Python language is changed and
    upgraded over time. The first number (`3`) indicates the “major” version, and
    the second number (`9`) indicates the “minor” version. Unlike regular decimals,
    it’s possible for the minor version to be higher than 9, so in the future you
    might encounter a Python 3.12.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.html#idm45143428474976-marker)) 这里的数字称为*版本号*，它们随着Python语言的变更和升级逐步增加。第一个数字（`3`）表示“主要”版本，第二个数字（`9`）表示“次要”版本。与常规的十进制不同，次要版本可以高于9，所以未来您可能会遇到Python
    3.12。
- en: ^([8](ch01.html#idm45143421172256-marker)) Miniconda is a smaller version of
    the popular “Anaconda” software, but since the latter installs the R programming
    language and a number of other items we won’t need, we’ll use Miniconda to save
    space on our device.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.html#idm45143421172256-marker)) Miniconda是流行软件“Anaconda”的较小版本，但由于后者安装了R编程语言和其他一些我们不需要的项目，我们将使用Miniconda来节省设备空间。
- en: ^([9](ch01.html#idm45143421119776-marker)) If you have a 32-bit Chromebook,
    the filename might be slightly different.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.html#idm45143421119776-marker)) 如果您使用的是32位Chromebook，文件名可能会有所不同。
- en: ^([10](ch01.html#idm45143428675216-marker)) The installer filename may have
    a different number if you are on a 32-bit system.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch01.html#idm45143428675216-marker)) 如果您使用的是32位系统，安装程序的文件名可能会有所不同。
- en: ^([11](ch01.html#idm45143428664000-marker)) Unless otherwise noted, all terminal
    commands should be followed by hitting Enter or Return.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: ^([11](ch01.html#idm45143428664000-marker)) 除非另有说明，所有终端命令都应该在按下Enter或Return键之后执行。
- en: ^([12](ch01.html#idm45143428659312-marker)) If you get a prompt asking about
    how you want to “open this file,” I recommend selecting Google Chrome.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: ^([12](ch01.html#idm45143428659312-marker)) 如果您看到提示询问如何“打开此文件”，我建议选择Google Chrome。
- en: ^([13](ch01.html#idm45143428595488-marker)) Don’t worry, it’s not visible on
    the internet!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: ^([13](ch01.html#idm45143428595488-marker)) 别担心，它不会在互联网上可见！
- en: ^([14](ch01.html#idm45143428573360-marker)) Early versions of Jupyter Notebook
    were known as “iPythonNotebook,” which is where the *.ipynb* file extension comes
    from.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: ^([14](ch01.html#idm45143428573360-marker)) Jupyter Notebook的早期版本被称为“iPython
    Notebook”，这就是*.ipynb*文件扩展名的来源。
- en: ^([15](ch01.html#idm45143424049200-marker)) Especially “future you”!
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: ^([15](ch01.html#idm45143424049200-marker)) 尤其是“未来的你”！
- en: ^([16](ch01.html#idm45143424006608-marker)) Meaning that I no longer get the
    output I expect, or that I get errors and no output at all!
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: ^([16](ch01.html#idm45143424006608-marker)) 这意味着我不再得到预期的输出，或者得到错误信息而没有任何输出！
- en: ^([17](ch01.html#idm45143423946496-marker)) Depending on your device, you can
    save this password to your “keychain.” For more information, see [the docs on
    GitHub](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: ^([17](ch01.html#idm45143423946496-marker)) 根据您的设备，您可以将此密码保存到您的“钥匙链”中。更多信息请参见[Github上的文档](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/working-with-ssh-key-passphrases)。
