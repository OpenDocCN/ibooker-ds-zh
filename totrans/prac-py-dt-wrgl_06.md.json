["```py\npip install pandas\n```", "```py\n# quick script for finding the earliest and latest loan dates in the PPP loan\n# data\n\n# importing the `pandas` library\nimport pandas as pd ![1](assets/1.png)\n\n# read the recent data into a pandas DataFrame using its `read_csv()` method\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# convert the values in the `DateApproved` column to *actual* dates\nppp_data['DateApproved'] = pd.to_datetime(ppp_data['DateApproved'],\n                                          format='%m/%d/%Y') ![2](assets/2.png)\n\n# print out the `min()` and `max()` values in the `DateApproved` column\nprint(ppp_data['DateApproved'].min())\nprint(ppp_data['DateApproved'].max())\n```", "```py\n2020-04-03 00:00:00\n2021-01-31 00:00:00\n```", "```py\n# quick script to print out the number of rows in each of our PPP loan data files\n# this is a pretty basic task, so no need to import extra libraries!\n\n# open the August PPP data in \"read\" mode\naugust_data = open(\"public_150k_plus_080820.csv\",\"r\")\n\n# use `readlines()` to convert the lines in the data file into a list\nprint(\"August file has \"+str(len(august_data.readlines()))+\" rows.\") ![1](assets/1.png)\n\n# ditto for the recent PPP data\nrecent_data = open(\"public_150k_plus_recent.csv\",\"r\")\n\n# once again, print the number of lines\nprint(\"Recent file has \"+str(len(recent_data.readlines()))+\" rows.\")\n```", "```py\n# quick script for creating new CSVs that each contain the first few rows of\n# our larger data files\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the august data into a pandas DataFrame using its `read_csv()` method\naugust_ppp_data = pd.read_csv('public_150k_plus_080820.csv')\n\n# the `head()` method returns the DataFrame's column headers\n# along with the first 5 rows of data\naugust_sample = august_ppp_data.head()\n\n# write those first few rows to a CSV called `august_sample.csv`\n# using the pandas `to_csv()` method\naugust_sample.to_csv('august_sample.csv', index=False) ![1](assets/1.png)\n\n# read the recent data into a pandas DataFrame using its `read_csv()` method\nrecent_ppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# the `head()` method returns the DataFrame's column headers\n# along with the first 5 rows of data\nrecent_sample = recent_ppp_data.head()\n\n# write those first few rows to a CSV called `recent_sample.csv`\nrecent_sample.to_csv('recent_sample.csv', index=False)\n```", "```py\n# quick script for creating new CSVs that each contain the first few rows of\n# our larger data files\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the august data into a pandas DataFrame using its `read_csv()` method\naugust_ppp_data = pd.read_csv('public_150k_plus_080820.csv')\n\n# read the recent data into a pandas DataFrame using its `read_csv()` method\nrecent_ppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# now that we have both files in memory, let's merge them!\nmerged_data = pd.merge(august_ppp_data,recent_ppp_data,how='outer',\n    left_on=['BusinessName','Lender','DateApproved'],right_on=['BorrowerName',\n    'ServicingLenderName','DateApproved'],indicator=True) ![1](assets/1.png)\n\n# `print()` the values in the \"indicator\" column,\n# which has a default label of `_merge`\nprint(merged_data.value_counts('_merge')) ![2](assets/2.png)\n```", "```py\n_merge\nboth          595866\nright_only    171334\nleft_only      67333\ndtype: int64\n```", "```py\n# merge the data again, removing the match on `DateApproved`\nmerged_data_no_date = pd.merge(august_ppp_data,recent_ppp_data,how='outer',\n    left_on=['BusinessName','Lender'],right_on=['BorrowerName',\n    'ServicingLenderName'],indicator=True)\n\n# `print()` the values in the \"indicator\" column,\n# which has a default label of `_merge`\nprint(merged_data_no_date.value_counts('_merge'))\n```", "```py\n_merge\nboth          671942\nright_only     96656\nleft_only      22634\ndtype: int64\n```", "```py\n# merge the data again, matching only on `BusinessName`/`BorrowerName`\nmerged_data_biz_only = pd.merge(august_ppp_data,recent_ppp_data,how='outer',\n    left_on=['BusinessName'],right_on=['BorrowerName'],indicator=True)\n\n# `print()` the values in the \"indicator\" column,\n# which has a default label of `_merge`\nprint(merged_data_biz_only.value_counts('_merge'))\n```", "```py\n_merge\nboth          706349\nright_only     77064\nleft_only       7207\ndtype: int64\n```", "```py\n# quick script for reviewing all the column names in the PPP data\n# to see what we can infer about them from the data itself\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data into a pandas DataFrame using its `read_csv()` method\nppp_data_sample = pd.read_csv('recent_sample.csv')\n\n# convert all missing data entries to '<NA>' using the `convertdtypes()` method\nconverted_data_sample = ppp_data_sample.convert_dtypes() ![1](assets/1.png)\n\n# transpose the whole sample\ntransposed_ppp_data_sample = converted_data_sample.transpose()\n\n# print out the results!\nprint(transposed_ppp_data_sample)\n```", "```py\nLoanStatus        Current status of loan:\n               • NOT FUNDED = Undisbursed\n               • PIF = Paid In Full\n               • CHGOFF = Charged Off\n               • CANCLD = Canceled\n               • EXEMPT = The status of loans that have been disbursed but\n                   have not been canceled, paid in full, or charged off are\n                   exempt from disclosure under FOIA Exemption 4\n```", "```py\n# quick script for reviewing all the column names in the PPP data\n# to see what we can infer about them from the data itself\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data sample into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# print the summary of values that appear in the `LoanStatus` column\nprint(ppp_data.value_counts('LoanStatus'))\n\n# print the total number of entries in the `LoanStatus` column\nprint(sum(ppp_data.value_counts('LoanStatus')))\n\n# print the summary of values that appear in the `Gender` column\nprint(ppp_data.value_counts('Gender'))\n\n# print the total number of entries in the `Gender` column\nprint(sum(ppp_data.value_counts('Gender')))\n\n# print how many rows do not list a value for `BorrowerAddress`\nprint(ppp_data['BorrowerAddress'].isna().sum())\n```", "```py\nLoanStatus\nExemption 4            549011\nPaid in Full           110120\nActive Un-Disbursed    107368\ndtype: int64\n766499\n\nGender\nUnanswered      563074\nMale Owned      168969\nFemale Owned     34456\ndtype: int64\n766499\n\n17\n```", "```py\n# quick script for finding the minimum and maximum loans currently approved\n# in our PPP loan dataset\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# use the pandas `min()` and `max()` methods to retrieve the\n# largest and smallest values, respectively\nprint(ppp_data['CurrentApprovalAmount'].min())\nprint(ppp_data['CurrentApprovalAmount'].max())\n```", "```py\n150000.0\n10000000.0\n```", "```py\npip install fingerprints\n```", "```py\n# quick script for determining whether there are typos &c. in any of the PPP\n# loan data's bank names\n\n# importing the `pandas` library\nimport pandas as pd\n\n# importing the `fingerprints` library, which will help us generate normalized\n# labels for each of the bank names in our dataset\nimport fingerprints\n\n# read the recent data into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# use the pandas DataFrame `unique()` method to create a list of unique\n# bank names in our data's `OriginatingLender` column\nunique_names = ppp_data['OriginatingLender'].unique()\n\n# confirm how many unique names there are\nprint(len(unique_names))\n\n# create an empty list to hold the fingerprint of each of the unique names\nfingerprint_list = []\n\n# iterate through each name in the list of unique names\nfor name in unique_names:\n\n    # for each name, generate its fingerprint\n    # and append it to the end of the list\n    fingerprint_list.append(fingerprints.generate(name))\n\n# use the `set()` function to remove duplicates and sort `fingerprint_list`\nfingerprint_set = set(fingerprint_list)\n\n# check the length of `fingerprint_set`\nprint(len(fingerprint_set))\n```", "```py\n4337\n4242\n```", "```py\n# quick script for determining what borrowers did (or really, did not) state\n# they would use PPP loan funds for\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data sample into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# print how many rows do not list a value for `UTILITIES_PROCEED`\nprint(ppp_data['UTILITIES_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `PAYROLL_PROCEED`\nprint(ppp_data['PAYROLL_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `MORTGAGE_INTEREST_PROCEED`\nprint(ppp_data['MORTGAGE_INTEREST_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `RENT_PROCEED`\nprint(ppp_data['RENT_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `REFINANCE_EIDL_PROCEED`\nprint(ppp_data['REFINANCE_EIDL_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `HEALTH_CARE_PROCEED`\nprint(ppp_data['HEALTH_CARE_PROCEED'].isna().sum())\n\n# print how many rows do not list a value for `DEBT_INTEREST_PROCEED`\nprint(ppp_data['DEBT_INTEREST_PROCEED'].isna().sum())\n\n# create a new DataFrame that contains all rows reporting *only* payroll costs\n# that is, where all _other_ costs are listed as \"NA\"\npayroll_only = ppp_data[(ppp_data['UTILITIES_PROCEED'].isna()) & (ppp_data\n    ['MORTGAGE_INTEREST_PROCEED'].isna()) & (ppp_data\n    ['MORTGAGE_INTEREST_PROCEED'].isna()) & (ppp_data['RENT_PROCEED'].isna()) &\n    (ppp_data['REFINANCE_EIDL_PROCEED'].isna()) &  (ppp_data\n    ['HEALTH_CARE_PROCEED'].isna()) & (ppp_data['DEBT_INTEREST_PROCEED'].isna())\n    ]\n\n# print the length of our \"payroll costs only\" DataFrame\nprint(len(payroll_only.index))\n```", "```py\n570995\n1828\n719946\n666788\n743125\n708892\n734456\n538905\n```", "```py\n# quick script for determining how many loans have been disbursed\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data sample into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# print a summary of values in the `LoanStatus` column\nprint(ppp_data['LoanStatus'].value_counts())\nprint(sum(ppp_data['LoanStatus'].value_counts())) ![1](assets/1.png)\n```", "```py\nExemption 4            549011\nPaid in Full           110120\nActive Un-Disbursed    107368\nName: LoanStatus, dtype: int64\n766499\n```", "```py\n# quick script for finding a business within our dataset by (partial) name\n\n# importing the `pandas` library\nimport pandas as pd\n\n# read the recent data sample into a pandas DataFrame\nppp_data = pd.read_csv('public_150k_plus_recent.csv')\n\n# create a DataFrame without any missing `BorrowerName` values\nppp_data_named_borrowers = ppp_data[ppp_data['BorrowerName'].notna()] ![1](assets/1.png)\n\n# because precise matching can be tricky,\n# we'll use the pandas `str.contains()` method\nbankruptcy_example = ppp_data_named_borrowers[ \\\n                                ppp_data_named_borrowers['BorrowerName']\n                                .str.contains('WATERFORD RECEPTIONS')] ![2](assets/2.png)\n\n# transposing the result so it's easier to read\nprint(bankruptcy_example.transpose())\n```", "```py\nLoanNumber                                        7560217107\nDateApproved                                      04/14/2020\nSBAOfficeCode                                            353\nProcessingMethod                                         PPP\nBorrowerName                       WATERFORD RECEPTIONS, LLC\nBorrowerAddress                         6715 COMMERCE STREET\nBorrowerCity                                     SPRINGFIELD\nBorrowerState                                             VA\nBorrowerZip                                            22150\nLoanStatusDate                                           NaN\nLoanStatus                                       Exemption 4\nTerm                                                      24\nSBAGuarantyPercentage                                    100\nInitialApprovalAmount                               413345.0\nCurrentApprovalAmount                               413345.0\nUndisbursedAmount                                        0.0\nFranchiseName                                            NaN\nServicingLenderLocationID                             122873\nServicingLenderName                                EagleBank\nServicingLenderAddress                     7815 Woodmont Ave\nServicingLenderCity                                 BETHESDA\nServicingLenderState                                      MD\nServicingLenderZip                                     20814\nRuralUrbanIndicator                                        U\nHubzoneIndicator                                           N\nLMIIndicator                                             NaN\nBusinessAgeDescription       New Business or 2 years or less\nProjectCity                                      SPRINGFIELD\nProjectCountyName                                    FAIRFAX\nProjectState                                              VA\nProjectZip                                        22150-0001\nCD                                                     VA-08\nJobsReported                                            45.0\nNAICSCode                                           722320.0\nRaceEthnicity                                     Unanswered\nUTILITIES_PROCEED                                        NaN\nPAYROLL_PROCEED                                     413345.0\nMORTGAGE_INTEREST_PROCEED                                NaN\nRENT_PROCEED                                             NaN\nREFINANCE_EIDL_PROCEED                                   NaN\nHEALTH_CARE_PROCEED                                      NaN\nDEBT_INTEREST_PROCEED                                    NaN\nBusinessType                 Limited  Liability Company(LLC)\nOriginatingLenderLocationID                           122873\nOriginatingLender                                  EagleBank\nOriginatingLenderCity                               BETHESDA\nOriginatingLenderState                                    MD\nGender                                            Male Owned\nVeteran                                          Non-Veteran\nNonProfit                                                NaN\n```", "```py\nprint(sum(ppp_data['LoanStatusDate'].isna()))\n```"]