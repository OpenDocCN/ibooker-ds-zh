- en: Chapter 17\. Hierarchical Indexing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 17 章。分层索引
- en: Up to this point we’ve been focused primarily on one-dimensional and two-dimensional
    data, stored in Pandas `Series` and `DataFrame` objects, respectively. Often it
    is useful to go beyond this and store higher-dimensional data—that is, data indexed
    by more than one or two keys. Early Pandas versions provided `Panel` and `Panel4D`
    objects that could be thought of as 3D or 4D analogs to the 2D `DataFrame`, but
    they were somewhat clunky to use in practice. A far more common pattern for handling
    higher-dimensional data is to make use of *hierarchical indexing* (also known
    as *multi-indexing*) to incorporate multiple index *levels* within a single index.
    In this way, higher-dimensional data can be compactly represented within the familiar
    one-dimensional `Series` and two-dimensional `DataFrame` objects. (If you’re interested
    in true *N*-dimensional arrays with Pandas-style flexible indices, you can look
    into the excellent [Xarray package](https://xarray.pydata.org).)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要关注存储在 Pandas `Series` 和 `DataFrame` 对象中的一维和二维数据。通常，超出这些维度存储更高维度的数据是有用的——也就是说，数据由超过一个或两个键索引。早期的
    Pandas 版本提供了 `Panel` 和 `Panel4D` 对象，可以视为二维 `DataFrame` 的三维或四维类比，但在实践中使用起来有些笨拙。处理更高维数据的更常见模式是利用*分层索引*（也称为*多重索引*），在单个索引中包含多个索引*级别*。通过这种方式，高维数据可以在熟悉的一维
    `Series` 和二维 `DataFrame` 对象中紧凑地表示。（如果你对带有 Pandas 风格灵活索引的真正的 *N* 维数组感兴趣，可以查看优秀的[Xarray
    包](https://xarray.pydata.org)。）
- en: In this chapter, we’ll explore the direct creation of `MultiIndex` objects;
    considerations when indexing, slicing, and computing statistics across multiply
    indexed data; and useful routines for converting between simple and hierarchically
    indexed representations of data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨直接创建 `MultiIndex` 对象；在多重索引数据中进行索引、切片和计算统计信息时的考虑；以及在简单索引和分层索引数据表示之间进行转换的有用程序。
- en: 'We begin with the standard imports:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从标准导入开始：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A Multiply Indexed Series
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个多重索引的系列
- en: Let’s start by considering how we might represent two-dimensional data within
    a one-dimensional `Series`. For concreteness, we will consider a series of data
    where each point has a character and numerical key.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先考虑如何在一维 `Series` 中表示二维数据。为了具体起见，我们将考虑一个数据系列，其中每个点都有一个字符和数值键。
- en: The Bad Way
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不好的方法
- en: 'Suppose you would like to track data about states from two different years.
    Using the Pandas tools we’ve already covered, you might be tempted to simply use
    Python tuples as keys:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要跟踪两个不同年份的州数据。使用我们已经介绍过的 Pandas 工具，你可能会简单地使用 Python 元组作为键：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With this indexing scheme, you can straightforwardly index or slice the series
    based on this tuple index:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种索引方案，你可以直接根据这个元组索引或切片系列：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But the convenience ends there. For example, if you need to select all values
    from 2010, you’ll need to do some messy (and potentially slow) munging to make
    it happen:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但便利性到此为止。例如，如果你需要选择所有 2010 年的值，你将需要做一些混乱的（可能是缓慢的）整理来实现它：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This produces the desired result, but is not as clean (or as efficient for large
    datasets) as the slicing syntax we’ve grown to love in Pandas.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生期望的结果，但不如我们在 Pandas 中已经喜爱的切片语法那样清晰（或对于大型数据集来说不够高效）。
- en: 'The Better Way: The Pandas MultiIndex'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的方法：Pandas 多重索引
- en: 'Fortunately, Pandas provides a better way. Our tuple-based indexing is essentially
    a rudimentary multi-index, and the Pandas `MultiIndex` type gives us the types
    of operations we wish to have. We can create a multi-index from the tuples as
    follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Pandas 提供了更好的方法。我们基于元组的索引本质上是一个简单的多重索引，而 Pandas 的 `MultiIndex` 类型给了我们希望拥有的操作类型。我们可以从元组创建一个多重索引，如下所示：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `MultiIndex` represents multiple *levels* of indexing—in this case, the
    state names and the years—as well as multiple *labels* for each data point which
    encode these levels.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiIndex` 表示多个*索引级别*——在这种情况下，州名和年份——以及每个数据点的多个*标签*，这些标签编码了这些级别。'
- en: 'If we reindex our series with this `MultiIndex`, we see the hierarchical representation
    of the data:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用这个 `MultiIndex` 重新索引我们的系列，我们将看到数据的分层表示：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here the first two columns of the Series representation show the multiple index
    values, while the third column shows the data. Notice that some entries are missing
    in the first column: in this multi-index representation, any blank entry indicates
    the same value as the line above it.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 Series 表示法的前两列显示了多个索引值，而第三列显示了数据。请注意，第一列中有些条目缺失：在这种多重索引表示中，任何空白条目表示与上一行相同的值。
- en: 'Now to access all data for which the second index is 2020, we can use the Pandas
    slicing notation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要访问所有第二个索引为 2020 的数据，我们可以使用 Pandas 切片表示法：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The result is a singly indexed Series with just the keys we’re interested in.
    This syntax is much more convenient (and the operation is much more efficient!)
    than the home-spun tuple-based multi-indexing solution that we started with. We’ll
    now further discuss this sort of indexing operation on hierarchically indexed
    data.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个仅包含我们感兴趣键的单索引 Series。这种语法比我们最初使用的基于元组的多重索引解决方案更方便（并且操作效率更高！）。接下来我们将进一步讨论在具有分层索引数据上进行此类索引操作。
- en: MultiIndex as Extra Dimension
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为额外维度的 MultiIndex
- en: 'You might notice something else here: we could easily have stored the same
    data using a simple `DataFrame` with index and column labels. In fact, Pandas
    is built with this equivalence in mind. The `unstack` method will quickly convert
    a multiply indexed `Series` into a conventionally indexed `DataFrame`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这里还有另一点：我们本可以使用带有索引和列标签的简单`DataFrame`存储相同的数据。实际上，Pandas 就是考虑到这种等价性而构建的。`unstack`方法将快速将一个多重索引的`Series`转换为传统索引的`DataFrame`：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Naturally, the `stack` method provides the opposite operation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，`stack`方法提供了相反的操作：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Seeing this, you might wonder why would we would bother with hierarchical indexing
    at all. The reason is simple: just as we were able to use multi-indexing to manipulate
    two-dimensional data within a one-dimensional `Series`, we can also use it to
    manipulate data of three or more dimensions in a `Series` or `DataFrame`. Each
    extra level in a multi-index represents an extra dimension of data; taking advantage
    of this property gives us much more flexibility in the types of data we can represent.
    Concretely, we might want to add another column of demographic data for each state
    at each year (say, population under 18); with a `MultiIndex` this is as easy as
    adding another column to the `DataFrame`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这些，您可能会想知道为什么我们要费心处理分层索引。原因很简单：正如我们能够使用多重索引来操作一个维度的`Series`中的二维数据一样，我们也可以用它来操作`Series`或`DataFrame`中的三维或更高维度的数据。多重索引中的每个额外级别代表了数据的一个额外维度；利用这个特性使我们在能够表示的数据类型上有了更大的灵活性。具体来说，我们可能希望为每个州在每年的人口（例如
    18 岁以下人口）添加另一列人口统计数据；使用`MultiIndex`，这就像在`DataFrame`中添加另一列数据那样简单：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In addition, all the ufuncs and other functionality discussed in [Chapter 15](ch15.xhtml#section-0303-operations-in-pandas)
    work with hierarchical indices as well. Here we compute the fraction of people
    under 18 by year, given the above data:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有在[第 15 章](ch15.xhtml#section-0303-operations-in-pandas)讨论的 ufunc 和其他功能也适用于层次索引。在此我们计算按年龄小于
    18 岁人口的比例，给定上述数据：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This allows us to easily and quickly manipulate and explore even high-dimensional
    data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够轻松快速地操作和探索甚至是高维数据。
- en: Methods of MultiIndex Creation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MultiIndex 创建方法
- en: 'The most straightforward way to construct a multiply indexed `Series` or `DataFrame`
    is to simply pass a list of two or more index arrays to the constructor. For example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个多重索引的`Series`或`DataFrame`最直接的方法是简单地将两个或更多索引数组列表传递给构造函数。例如：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The work of creating the `MultiIndex` is done in the background.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`MultiIndex`的工作是在后台完成的。
- en: 'Similarly, if you pass a dictionary with appropriate tuples as keys, Pandas
    will automatically recognize this and use a `MultiIndex` by default:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果您传递了适当的元组作为键的字典，Pandas 将自动识别并默认使用`MultiIndex`：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Nevertheless, it is sometimes useful to explicitly create a `MultiIndex`; we’ll
    look at a couple of methods for doing this next.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，有时明确创建`MultiIndex`也是有用的；我们将看看几种方法来完成这个操作。
- en: Explicit MultiIndex Constructors
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式 MultiIndex 构造器
- en: 'For more flexibility in how the index is constructed, you can instead use the
    constructor methods available in the `pd.MultiIndex` class. For example, as we
    did before, you can construct a `MultiIndex` from a simple list of arrays giving
    the index values within each level:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更灵活地构建索引，您可以使用`pd.MultiIndex`类中提供的构造方法。例如，就像我们之前做的那样，您可以从给定每个级别索引值的简单数组列表构造一个`MultiIndex`：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or you can construct it from a list of tuples giving the multiple index values
    of each point:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以通过提供每个点的多重索引值的元组列表来构建它：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can even construct it from a Cartesian product of single indices:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以通过单个索引的笛卡尔积构建它：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Similarly, you can construct a `MultiIndex` directly using its internal encoding
    by passing `levels` (a list of lists containing available index values for each
    level) and `codes` (a list of lists that reference these labels):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，可以直接使用其内部编码通过传递`levels`（包含每个级别可用索引值的列表的列表）和`codes`（引用这些标签的列表的列表）构造`MultiIndex`：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Any of these objects can be passed as the `index` argument when creating a `Series`
    or `DataFrame`, or be passed to the `reindex` method of an existing `Series` or
    `DataFrame`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Series`或`DataFrame`时，可以将任何这些对象作为`index`参数传递，或者将其传递给现有`Series`或`DataFrame`的`reindex`方法。
- en: MultiIndex Level Names
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重索引级别名称
- en: 'Sometimes it is convenient to name the levels of the `MultiIndex`. This can
    be accomplished by passing the `names` argument to any of the previously discussed
    `MultiIndex` constructors, or by setting the `names` attribute of the index after
    the fact:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候给`MultiIndex`的级别命名会很方便。可以通过在任何先前讨论过的`MultiIndex`构造函数中传递`names`参数来实现，或者在事后设置索引的`names`属性来完成：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With more involved datasets, this can be a useful way to keep track of the meaning
    of various index values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的数据集，这是一种跟踪各种索引值意义的有用方法。
- en: MultiIndex for Columns
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列的多重索引
- en: 'In a `DataFrame`, the rows and columns are completely symmetric, and just as
    the rows can have multiple levels of indices, the columns can have multiple levels
    as well. Consider the following, which is a mock-up of some (somewhat realistic)
    medical data:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DataFrame`中，行和列是完全对称的，就像行可以具有多级索引一样，列也可以具有多级索引。考虑以下内容，这是一些（有些逼真的）医疗数据的模拟：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is fundamentally four-dimensional data, where the dimensions are the subject,
    the measurement type, the year, and the visit number. With this in place we can,
    for example, index the top-level column by the person’s name and get a full `DataFrame`
    containing just that person’s information:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是四维数据，维度包括主题、测量类型、年份和访问次数。有了这个设置，例如，我们可以通过人名索引顶级列，并获得一个只包含该人信息的完整`DataFrame`：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Indexing and Slicing a MultiIndex
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对`MultiIndex`进行索引和切片
- en: Indexing and slicing on a `MultiIndex` is designed to be intuitive, and it helps
    if you think about the indices as added dimensions. We’ll first look at indexing
    multiply indexed `Series`, and then multiply indexed `DataFrame` objects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MultiIndex`上进行索引和切片设计得很直观，如果将索引视为增加的维度会有所帮助。我们首先看一下如何对多重索引的序列进行索引，然后再看如何对多重索引的数据框进行索引。
- en: Multiply Indexed Series
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重索引的序列
- en: 'Consider the multiply indexed `Series` of state populations we saw earlier:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我们之前看到的州人口的多重索引`Series`：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can access single elements by indexing with multiple terms:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用多个项进行索引来访问单个元素：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `MultiIndex` also supports *partial indexing*, or indexing just one of
    the levels in the index. The result is another `Series`, with the lower-level
    indices maintained:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiIndex`还支持*部分索引*，即仅对索引中的一个级别进行索引。结果是另一个`Series`，保留较低级别的索引：'
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Partial slicing is available as well, as long as the `MultiIndex` is sorted
    (see the discussion in [“Sorted and Unsorted Indices”](#ch_0305-hierarchical-indexing_sorted-and-unsorted-indices)):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以进行部分切片，只要`MultiIndex`是排序的（参见[“排序和未排序索引”](#ch_0305-hierarchical-indexing_sorted-and-unsorted-indices)的讨论）：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'with sorted indices, partial indexing can be performed on lower levels by passing
    an empty slice in the first index:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对排序索引来说，可以通过在第一个索引中传递空切片来在较低级别执行部分索引：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Other types of indexing and selection (discussed in [Chapter 14](ch14.xhtml#section-0302-data-indexing-and-selection))
    work as well; for example, selection based on Boolean masks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的索引和选择（在[第14章](ch14.xhtml#section-0302-data-indexing-and-selection)中讨论）同样适用；例如，基于布尔掩码的选择：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Selection based on fancy indexing also works:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基于花式索引的选择也是有效的：
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Multiply Indexed DataFrames
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重索引的数据框
- en: 'A multiply indexed `DataFrame` behaves in a similar manner. Consider our toy
    medical `DataFrame` from before:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 多重索引的`DataFrame`表现方式类似。考虑之前的医疗玩具`DataFrame`：
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Remember that columns are primary in a `DataFrame`, and the syntax used for
    multiply indexed `Series` applies to the columns. For example, we can recover
    Guido’s heart rate data with a simple operation:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在`DataFrame`中，列是主要的，用于多重索引的`Series`的语法适用于列。例如，我们可以通过简单的操作恢复Guido的心率数据：
- en: '[PRE28]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Also, as with the single-index case, we can use the `loc`, `iloc`, and `ix`
    indexers introduced in [Chapter 14](ch14.xhtml#section-0302-data-indexing-and-selection).
    For example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如单索引情况一样，我们还可以使用在[第14章](ch14.xhtml#section-0302-data-indexing-and-selection)介绍的`loc`、`iloc`和`ix`索引器。例如：
- en: '[PRE29]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'These indexers provide an array-like view of the underlying two-dimensional
    data, but each individual index in `loc` or `iloc` can be passed a tuple of multiple
    indices. For example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些索引器提供了底层二维数据的类似数组的视图，但每个`loc`或`iloc`中的单个索引可以传递多个索引的元组。例如：
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Working with slices within these index tuples is not especially convenient;
    trying to create a slice within a tuple will lead to a syntax error:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些索引元组内部工作切片并不特别方便；尝试在元组内创建切片将导致语法错误：
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You could get around this by building the desired slice explicitly using Python’s
    built-in `slice` function, but a better way in this context is to use an `IndexSlice`
    object, which Pandas provides for precisely this situation. For example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用Python的内置`slice`函数来明确构建所需的切片，但在这种情况下更好的方法是使用`IndexSlice`对象，Pandas专门为此提供。例如：
- en: '[PRE32]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As you can see, there are many ways to interact with data in multiply indexed
    `Series` and `DataFrame`s, and as with many tools in this book the best way to
    become familiar with them is to try them out!
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在多重索引的`Series`和`DataFrame`中与数据交互的方式有很多，并且与本书中的许多工具一样，熟悉它们的最佳方法是尝试它们！
- en: Rearranging Multi-Indexes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新排列多重索引
- en: One of the keys to working with multiply indexed data is knowing how to effectively
    transform the data. There are a number of operations that will preserve all the
    information in the dataset, but rearrange it for the purposes of various computations.
    We saw a brief example of this in the `stack` and `unstack` methods, but there
    are many more ways to finely control the rearrangement of data between hierarchical
    indices and columns, and we’ll explore them here.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 处理多重索引数据的关键之一是知道如何有效地转换数据。有许多操作将保留数据集中的所有信息，但为各种计算目的重新排列数据。我们在`stack`和`unstack`方法中看到了一个简短的示例，但在控制数据在层次索引和列之间重新排列方面，还有许多其他方法，我们将在这里探讨它们。
- en: Sorted and Unsorted Indices
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排序和未排序的索引
- en: Earlier I briefly mentioned a caveat, but I should emphasize it more here. *Many
    of the `MultiIndex` slicing operations will fail if the index is not sorted.*
    Let’s take a closer look.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前简要提到过一个警告，但我应该在这里更加强调。*如果索引未排序，则许多`MultiIndex`切片操作将失败*。让我们仔细看看。
- en: 'We’ll start by creating some simple multiply indexed data where the indices
    are *not lexographically sorted*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一些简单的多重索引数据开始，其中索引*未按词典顺序排序*：
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we try to take a partial slice of this index, it will result in an error:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试对这个索引进行部分切片，将导致错误：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Although it is not entirely clear from the error message, this is the result
    of the `MultiIndex` not being sorted. For various reasons, partial slices and
    other similar operations require the levels in the `MultiIndex` to be in sorted
    (i.e., lexographical) order. Pandas provides a number of convenience routines
    to perform this type of sorting, such as the `sort_index` and `sortlevel` methods
    of the `DataFrame`. We’ll use the simplest, `sort_index`, here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从错误消息中不完全清楚，但这是由于`MultiIndex`未排序造成的。出于各种原因，部分切片和其他类似操作要求`MultiIndex`中的级别按排序（即词典）顺序排列。Pandas提供了许多方便的例程来执行这种类型的排序，例如`DataFrame`的`sort_index`和`sortlevel`方法。我们在这里将使用最简单的`sort_index`：
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'With the index sorted in this way, partial slicing will work as expected:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当索引以这种方式排序时，部分切片将按预期工作：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Stacking and Unstacking Indices
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆叠和展开索引
- en: 'As we saw briefly before, it is possible to convert a dataset from a stacked
    multi-index to a simple two-dimensional representation, optionally specifying
    the level to use:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前简要看到的，可以将数据集从堆叠的多重索引转换为简单的二维表示，可选地指定要使用的级别：
- en: '[PRE37]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The opposite of `unstack` is `stack`, which here can be used to recover the
    original series:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`unstack`的相反操作是`stack`，在这里可以用它来恢复原始系列：'
- en: '[PRE39]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Index Setting and Resetting
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引设置和重置
- en: 'Another way to rearrange hierarchical data is to turn the index labels into
    columns; this can be accomplished with the `reset_index` method. Calling this
    on the population dictionary will result in a `DataFrame` with `state` and `year`
    columns holding the information that was formerly in the index. For clarity, we
    can optionally specify the name of the data for the column representation:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 重新排列分层数据的另一种方法是将索引标签转换为列；这可以通过`reset_index`方法来实现。对人口字典调用此方法将导致一个`DataFrame`，其中包含`state`和`year`列，这些列保存了以前在索引中的信息。为了清晰起见，我们可以选择指定数据的名称作为列的表示方式：
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'A common pattern is to build a `MultiIndex` from the column values. This can
    be done with the `set_index` method of the `DataFrame`, which returns a multiply
    indexed `DataFrame`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的模式是从列值构建一个`MultiIndex`。这可以通过`DataFrame`的`set_index`方法来实现，该方法返回一个多重索引的`DataFrame`：
- en: '[PRE41]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In practice, this type of reindexing is one of the more useful patterns when
    exploring real-world datasets.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，这种重新索引的方式是探索实际数据集时最有用的模式之一。
