["```py\n$ cd 03_revc\n$ cp solution1_for_loop.py revc.py\n```", "```py\n$ ./revc.py --help\nusage: revc.py [-h] DNA\n\nPrint the reverse complement of DNA\n\npositional arguments:\n  DNA         Input sequence or file\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ ./revc.py AAAACCCGGT\nACCGGGTTTT\n```", "```py\n$ cat tests/inputs/input1.txt\nAAAACCCGGT\n```", "```py\n$ ./revc.py tests/inputs/input1.txt\nACCGGGTTTT\n```", "```py\n$ ./revc.py aaaaCCCGGT\nACCGGGtttt\n```", "```py\n$ new.py -f -p 'Print the reverse complement of DNA' revc.py\nDone, see new script \"revc.py\".\n```", "```py\n$ ./revc.py AAAACCCGGT\nAAAACCCGGT\n$ ./revc.py tests/inputs/input1.txt\nAAAACCCGGT\n```", "```py\n$ pytest -xv\n============================= test session starts ==============================\n...\n\ntests/revc_test.py::test_exists PASSED                                   [ 14%]\ntests/revc_test.py::test_usage PASSED                                    [ 28%]\ntests/revc_test.py::test_no_args PASSED                                  [ 42%]\ntests/revc_test.py::test_uppercase FAILED                                [ 57%]\n\n=================================== FAILURES ===================================\n________________________________ test_uppercase ________________________________\n\n    def test_uppercase():\n        \"\"\" Runs on uppercase input \"\"\"\n\n        rv, out = getstatusoutput(f'{RUN} AAAACCCGGT')\n        assert rv == 0\n>       assert out == 'ACCGGGTTTT'\nE       AssertionError: assert 'AAAACCCGGT' == 'ACCGGGTTTT'\nE         - ACCGGGTTTT\nE         + AAAACCCGGT\n\ntests/revc_test.py:47: AssertionError\n=========================== short test summary info ============================\nFAILED tests/revc_test.py::test_uppercase - AssertionError: assert 'AAAACCCGG...\n!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!\n========================= 1 failed, 3 passed in 0.33s ==========================\n```", "```py\n>>> dna = 'AAAACCCGGT'\n>>> dna[:2]\n'AA'\n```", "```py\n>>> dna[-2:]\n'GT'\n```", "```py\n>>> dna[:]\n'AAAACCCGGT'\n```", "```py\n>>> dna[::-1]\n'TGGCCCAAAA'\n```", "```py\n>>> reversed(dna)\n<reversed object at 0x7ffc4c9013a0>\n```", "```py\n>>> ''.join(reversed(dna)) ![1](assets/1.png)\n'TGGCCCAAAA'\n```", "```py\n>>> list(reversed(dna))\n['T', 'G', 'G', 'C', 'C', 'C', 'A', 'A', 'A', 'A']\n```", "```py\n>>> list(dna)\n['A', 'A', 'A', 'A', 'C', 'C', 'C', 'G', 'G', 'T']\n```", "```py\n>>> rev = '' ![1](assets/1.png)\n>>> for base in reversed(dna): ![2](assets/2.png)\n...     rev += base ![3](assets/3.png)\n...\n>>> rev\n'TGGCCCAAAA'\n```", "```py\nrevc = '' ![1](assets/1.png)\nfor base in reversed(dna): ![2](assets/2.png)\n    if base == 'A': ![3](assets/3.png)\n        revc += 'T' ![4](assets/4.png)\n    elif base == 'T':\n        revc += 'A'\n    elif base == 'G':\n        revc += 'C'\n    elif base == 'C':\n        revc += 'G'\n    elif base == 'a':\n        revc += 't'\n    elif base == 't':\n        revc += 'a'\n    elif base == 'g':\n        revc += 'c'\n    elif base == 'c':\n        revc += 'g'\n    else: ![5](assets/5.png)\n        revc += base\n```", "```py\n>>> revc\n'ACCGGGTTTT'\n```", "```py\ndef test_lowercase():\n    \"\"\" Runs on lowercase input \"\"\"\n\n    rv, out = getstatusoutput(f'{RUN} aaaaCCCGGT') ![1](assets/1.png)\n    assert rv == 0 ![2](assets/2.png)\n    assert out == 'ACCGGGtttt' ![3](assets/3.png)\n```", "```py\ndef test_input1():\n    \"\"\" Runs on file input \"\"\"\n\n    file, expected = TEST1 ![1](assets/1.png)\n    rv, out = getstatusoutput(f'{RUN} {file}') ![2](assets/2.png)\n    assert rv == 0 ![3](assets/3.png)\n    assert out == open(expected).read().rstrip() ![4](assets/4.png)\n```", "```py\nclass Args(NamedTuple): ![1](assets/1.png)\n    \"\"\" Command-line arguments \"\"\"\n    dna: str\n\n# --------------------------------------------------\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Print the reverse complement of DNA',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('dna', metavar='DNA', help='Input sequence or file')\n\n    args = parser.parse_args()\n\n    if os.path.isfile(args.dna): ![2](assets/2.png)\n        args.dna = open(args.dna).read().rstrip()\n\n    return Args(args.dna) ![3](assets/3.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    revc = '' ![1](assets/1.png)\n\n    for base in reversed(args.dna): ![2](assets/2.png)\n        if base == 'A': ![3](assets/3.png)\n            revc += 'T'\n        elif base == 'T':\n            revc += 'A'\n        elif base == 'G':\n            revc += 'C'\n        elif base == 'C':\n            revc += 'G'\n        elif base == 'a':\n            revc += 't'\n        elif base == 't':\n            revc += 'a'\n        elif base == 'g':\n            revc += 'c'\n        elif base == 'c':\n            revc += 'g'\n        else:\n            revc += base\n\n    print(revc) ![4](assets/4.png)\n```", "```py\n>>> trans = {\n...     'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n...     'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n... }\n```", "```py\n>>> for base in 'AAAACCCGGT':\n...     print(base, trans.get(base, base))\n...\nA T\nA T\nA T\nA T\nC G\nC G\nC G\nG C\nG C\nT A\n```", "```py\n>>> complement = ''\n>>> for base in 'AAAACCCGGT':\n...     complement += trans.get(base, base)\n...\n>>> complement\n'TTTTGGGCCA'\n```", "```py\n>>> list(reversed(complement))\n['A', 'C', 'C', 'G', 'G', 'G', 'T', 'T', 'T', 'T']\n```", "```py\n>>> ''.join(reversed(complement))\n'ACCGGGTTTT'\n```", "```py\ndef main() -> None:\n    args = get_args()\n    trans = { ![1](assets/1.png)\n        'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n        'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n    }\n\n    complement = '' ![2](assets/2.png)\n    for base in args.dna: ![3](assets/3.png)\n        complement += trans.get(base, base) ![4](assets/4.png)\n\n    print(''.join(reversed(complement))) ![5](assets/5.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    trans = {\n        'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n        'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n    }\n\n    complement = [] ![1](assets/1.png)\n    for base in args.dna:\n        complement += trans.get(base, base)\n\n    print(''.join(reversed(complement)))\n```", "```py\nfor base in args.dna:\n    complement.append(trans.get(base, base))\n```", "```py\ndef main() -> None:\n    args = get_args()\n    trans = {\n        'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n        'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n    }\n\n    complement = [trans.get(base, base) for base in args.dna] ![1](assets/1.png)\n    print(''.join(reversed(complement)))\n```", "```py\nprint(''.join(reversed([trans.get(base, base) for base in args.dna])))\n```", "```py\n>>> dna = 'AAAACCCGGT'\n>>> dna = dna.replace('A', 'T')\n```", "```py\n>>> dna\n'TTTTCCCGGT'\n```", "```py\n>>> dna = dna.replace('T', 'A')\n>>> dna\n'AAAACCCGGA'\n```", "```py\n>>> trans = {\n...     'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n...     'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n... }\n>>> str.maketrans(trans)\n{65: 'T', 67: 'G', 71: 'C', 84: 'A', 97: 't', 99: 'g', 103: 'c', 116: 'a'}\n```", "```py\n>>> ord('A')\n65\n```", "```py\n>>> chr(65)\n'A'\n```", "```py\n>>> 'AAAACCCGGT'.translate(str.maketrans(trans))\n'TTTTGGGCCA'\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    trans = str.maketrans({ ![1](assets/1.png)\n        'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A',\n        'a': 't', 'c': 'g', 'g': 'c', 't': 'a'\n    })\n    print(''.join(reversed(args.dna.translate(trans)))) ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    trans = str.maketrans('ACGTacgt', 'TGCAtgca') ![1](assets/1.png)\n    print(''.join(reversed(args.seq.translate(trans)))) ![2](assets/2.png)\n```", "```py\n$ python3 -m pip install biopython\n```", "```py\n>>> from Bio import Seq\n```", "```py\n>>> Seq.reverse_complement('AAAACCCGGT')\n'ACCGGGTTTT'\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(Seq.reverse_complement(args.dna)) ![1](assets/1.png)\n```", "```py\n=================================== FAILURES ===================================\n___________________________________ revc.py ____________________________________\n6: error: Skipping analyzing 'Bio': found module but no type hints or library\n    stubs\n6: note: See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing\n    -imports\n===================================== mypy =====================================\nFound 1 error in 1 file (checked 2 source files)\nmypy.ini: No [mypy] section in config file\n\n=========================== short test summary info ============================\nFAILED revc.py::mypy\n!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!\n========================= 1 failed, 1 skipped in 0.20s =========================\n```", "```py\n$ cat mypy.ini\n[mypy]\nignore_missing_imports = True\n```"]