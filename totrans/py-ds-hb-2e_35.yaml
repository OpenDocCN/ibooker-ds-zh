- en: Chapter 31\. Multiple Subplots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes it is helpful to compare different views of data side by side. To
    this end, Matplotlib has the concept of *subplots*: groups of smaller axes that
    can exist together within a single figure. These subplots might be insets, grids
    of plots, or other more complicated layouts. In this chapter we’ll explore four
    routines for creating subplots in Matplotlib. We’ll start by importing the packages
    we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'plt.axes: Subplots by Hand'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most basic method of creating an axes is to use the `plt.axes` function.
    As we’ve seen previously, by default this creates a standard axes object that
    fills the entire figure. `plt.axes` also takes an optional argument that is a
    list of four numbers in the figure coordinate system (`[*left*, *bottom*, *width*,
    *height*]`), which ranges from 0 at the bottom left of the figure to 1 at the
    top right of the figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we might create an inset axes at the top-right corner of another
    axes by setting the *x* and *y* position to 0.65 (that is, starting at 65% of
    the width and 65% of the height of the figure) and the *x* and *y* extents to
    0.2 (that is, the size of the axes is 20% of the width and 20% of the height of
    the figure). [Figure 31-1](#fig_0408-multiple-subplots_files_in_output_4_0) shows
    the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![output 4 0](assets/output_4_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-1\. Example of an inset axes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The equivalent of this command within the object-oriented interface is `fig.add_axes`.
    Let’s use this to create two vertically stacked axes, as seen in [Figure 31-2](#fig_0408-multiple-subplots_files_in_output_6_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have two axes (the top with no tick labels) that are just touching:
    the bottom of the upper panel (at position 0.5) matches the top of the lower panel
    (at position 0.1 + 0.4).'
  prefs: []
  type: TYPE_NORMAL
- en: '![output 6 0](assets/output_6_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-2\. Vertically stacked axes example
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'plt.subplot: Simple Grids of Subplots'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aligned columns or rows of subplots are a common enough need that Matplotlib
    has several convenience routines that make them easy to create. The lowest level
    of these is `plt.subplot`, which creates a single subplot within a grid. As you
    can see, this command takes three integer arguments—the number of rows, the number
    of columns, and the index of the plot to be created in this scheme, which runs
    from the upper left to the bottom right (see [Figure 31-3](#fig_0408-multiple-subplots_files_in_output_9_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![output 9 0](assets/output_9_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-3\. A plt.subplot example
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The command `plt.subplots_adjust` can be used to adjust the spacing between
    these plots. The following code uses the equivalent object-oriented command, `fig.add_subplot`;
    [Figure 31-4](#fig_0408-multiple-subplots_files_in_output_11_0) shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here we’ve used the `hspace` and `wspace` arguments of `plt.subplots_adjust`,
    which specify the spacing along the height and width of the figure, in units of
    the subplot size (in this case, the space is 40% of the subplot width and height).
  prefs: []
  type: TYPE_NORMAL
- en: '![output 11 0](assets/output_11_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-4\. plt.subplot with adjusted margins
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'plt.subplots: The Whole Grid in One Go'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The approach just described quickly becomes tedious when creating a large grid
    of subplots, especially if you’d like to hide the x- and y-axis labels on the
    inner plots. For this purpose, `plt.subplots` is the easier tool to use (note
    the `s` at the end of `subplots`). Rather than creating a single subplot, this
    function creates a full grid of subplots in a single line, returning them in a
    NumPy array. The arguments are the number of rows and number of columns, along
    with optional keywords `sharex` and `sharey`, which allow you to specify the relationships
    between different axes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a <math alttext="2 times 3"><mrow><mn>2</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    grid of subplots, where all axes in the same row share their y-axis scale, and
    all axes in the same column share their x-axis scale (see [Figure 31-5](#fig_0408-multiple-subplots_files_in_output_14_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 14 0](assets/output_14_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-5\. Shared x and y axes in plt.subplots
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: By specifying `sharex` and `sharey`, we’ve automatically removed inner labels
    on the grid to make the plot cleaner. The resulting grid of axes instances is
    returned within a NumPy array, allowing for convenient specification of the desired
    axes using standard array indexing notation (see [Figure 31-6](#fig_0408-multiple-subplots_files_in_output_16_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In comparison to `plt.subplot`, `plt.subplots` is more consistent with Python’s
    conventional zero-based indexing, whereas `plt.subplot` uses MATLAB-style one-based
    indexing.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 16 0](assets/output_16_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-6\. Identifying plots in a subplot grid
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'plt.GridSpec: More Complicated Arrangements'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To go beyond a regular grid to subplots that span multiple rows and columns,
    `plt.GridSpec` is the best tool. `plt.GridSpec` does not create a plot by itself;
    it is rather a convenient interface that is recognized by the `plt.subplot` command.
    For example, a `GridSpec` for a grid of two rows and three columns with some specified
    width and height space looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: From this we can specify subplot locations and extents using the familiar Python
    slicing syntax (see [Figure 31-7](#fig_0408-multiple-subplots_files_in_output_21_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![output 21 0](assets/output_21_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-7\. Irregular subplots with `plt.GridSpec`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This type of flexible grid alignment has a wide range of uses. I most often
    use it when creating multiaxes histogram plots like the ones shown in [Figure 31-8](#fig_0408-multiple-subplots_files_in_output_23_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 23 0](assets/output_23_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 31-8\. Visualizing multidimensional distributions with `plt.GridSpec`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This type of distribution plotted alongside its margins is common enough that
    it has its own plotting API in the Seaborn package; see [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)
    for more details.
  prefs: []
  type: TYPE_NORMAL
