- en: 'Chapter 13\. Location Restriction Sites: Using, Testing, and Sharing Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章\. 位置限制位点：使用、测试和共享代码
- en: A *palindromic* sequence in DNA is one in which the 5’ to 3’ base pair sequence
    is identical on both strands. For example, [Figure 13-1](#fig_13.1) shows that
    the reverse complement of the DNA sequence *GCATGC* is the sequence itself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: DNA中的*回文*序列是指其5'到3'碱基序列在两条链上是相同的。例如，[图 13-1](#fig_13.1)显示DNA序列*GCATGC*的反向互补序列是该序列本身。
- en: '![mpfb 1301](assets/mpfb_1301.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1301](assets/mpfb_1301.png)'
- en: Figure 13-1\. A reverse palindrome is equal to its reverse complement
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-1\. 反向回文等于其反向互补序列
- en: 'I can verify this in code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以通过代码验证这一点：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As described in [the Rosalind REVP challenge](https://oreil.ly/w3Tdm), restriction
    enzymes recognize and cut within specific palindromic sequences of DNA known as
    restriction sites. They typically have a length of between 4 and 12 nucleotides.
    The goal of this exercise is to find the locations in a DNA sequence of every
    putative restriction enzyme. The code to solve this problem could be massively
    complicated, but a clear understanding of some functional programming techniques
    helps to create a short, elegant solution. I will explore `map()`, `zip()`, and
    `enumerate()` as well as many small, tested functions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[Rosalind REVP挑战](https://oreil.ly/w3Tdm)中描述的那样，限制酶识别和切割DNA中特定的回文序列，称为限制位点。它们通常具有4到12个核苷酸的长度。这个练习的目标是找到每个可能的限制酶在DNA序列中的位置。解决这个问题的代码可能非常复杂，但对一些函数式编程技术的清晰理解有助于创建一个简短而优雅的解决方案。我将探索`map()`、`zip()`和`enumerate()`以及许多小的、经过测试的函数。
- en: 'You will learn:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学到：
- en: How to find a reverse palindrome
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找到反向回文
- en: How to create modules to share common functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建模块以共享常用函数
- en: About the `PYTHONPATH` environment variable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于`PYTHONPATH`环境变量
- en: Getting Started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'The code and tests for this exercise are in the *13_revp* directory. Start
    by copying a solution to the program `revp.py`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习的代码和测试位于*13_revp*目录下。首先将一个解决方案复制到程序`revp.py`中开始：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Inspect the usage:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 检查用法：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO1-1)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO1-1)'
- en: The only required argument is a single positional file of FASTA-formatted DNA
    sequences.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一必需的参数是一个FASTA格式的DNA序列的单个位置文件。
- en: 'Have a look at the first test input file. The contents are identical to the
    example on the Rosalind page:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 先看一下第一个测试输入文件。其内容与Rosalind页面上的示例相同：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the program with this input and verify that you see the position (using
    1-based counting) and length of every reverse palindrome in the string having
    a length between 4 and 12, as illustrated in [Figure 13-2](#fig_13.2). Note that
    the order of the results is unimportant:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序，使用此输入，并验证你是否看到每个字符串中长度介于4到12之间的每个反向回文的位置（使用基于1的计数），如[图 13-2](#fig_13.2)所示。注意，结果的顺序无关紧要：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![mpfb 1302](assets/mpfb_1302.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 1302](assets/mpfb_1302.png)'
- en: Figure 13-2\. The locations of the eight reverse palindromes found in the sequence
    *TCAATGCATGCGGGTCTATATGCAT*.
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13-2\. 在序列*TCAATGCATGCGGGTCTATATGCAT*中找到的八个反向回文的位置。
- en: 'Run the tests to verify that the program passes, then start over:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试以验证程序是否通过，然后重新开始：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is a way to define the program’s parameter:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是定义程序参数的一种方式：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO2-1)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO2-1)'
- en: The only parameter is a file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的参数是一个文件。
- en: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO2-2)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO2-2)'
- en: Define a parameter that must be a readable text file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个必须是可读文本文件的参数。
- en: 'Have the `main()` function print the input filename for now:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时让`main()`函数打印输入文件名：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Manually verify that the program will produce the correct usage, will reject
    bogus files, and will print a valid input’s name:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 手动验证程序是否能生成正确的用法，是否会拒绝伪文件，并打印一个有效输入的名称：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run **`make test`** and you should find you pass some tests. Now you’re ready
    to write the bones of the program.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行**`make test`**，你应该发现通过了一些测试。现在你可以编写程序的基础部分了。
- en: Finding All Subsequences Using K-mers
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用K-mer查找所有子序列
- en: 'The first step is to read the sequences from the FASTA input file. I can use
    `SeqIO.parse()` to create a lazy iterator and then use `next()` to get the first
    sequence:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是从 FASTA 输入文件中读取序列。我可以使用 `SeqIO.parse()` 创建一个惰性迭代器，然后使用 `next()` 获取第一个序列：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code is unsafe to use if the file is empty, such as *tests/inputs/empty.fa*.
    If you try to open this file in the same way and call `next()`, Python will raise
    a `StopIteration` exception. In your code, I recommend you use a `for` loop that
    detects the exhaustion of the iterator and gracefully exits.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件为空，比如 *tests/inputs/empty.fa*，则上述代码不安全。如果尝试以同样的方式打开此文件并调用 `next()`，Python
    将会引发 `StopIteration` 异常。在你的代码中，我建议你使用一个 `for` 循环来检测迭代器的耗尽并优雅地退出。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I need to find all the sequences between 4 and 12 bases long. This sounds like
    another job for k-mers, so I’ll bring in the `find_kmers()` function from [Chapter 9](ch09.html#ch09):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要找到所有长度在 4 到 12 之间的序列。这听起来又是 k-mer 的工作，所以我将从 [第9章](ch09.html#ch09) 中引入 `find_kmers()`
    函数：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I can use `range()` to generate all the numbers between 4 and 12, remembering
    that the end position is not included so I have to go up to 13. As there are many
    k-mers for each `k`, I’ll print the value of `k` and how many k-mers are found:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以使用 `range()` 生成从 4 到 12 之间的所有数字，记住结束位置不包括在内，所以我必须取到 13。因为每个 `k` 有很多 k-mer，我将打印出
    `k` 的值以及找到的 k-mer 的数量：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finding All Reverse Complements
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找所有反向互补序列
- en: 'I showed many ways to find the reverse complement in [Chapter 3](ch03.html#ch03),
    with the conclusion that `Bio.Seq.reverse_complement()` is probably the easiest
    method. Start by finding all the 12-mers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第3章](ch03.html#ch03) 中，我展示了许多找到反向互补的方法，结论是 `Bio.Seq.reverse_complement()`
    可能是最简单的方法。首先找到所有的 12-mer：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To create a list of the reverse complements, you could use a list comprehension:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建反向互补序列的列表，你可以使用列表推导式：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or use `map()`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 `map()`：
- en: '[PRE15]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Either way, you should have 12 reverse complements:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，你应该有 12 个反向互补序列：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Putting It All Together
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: You should have just about everything you need to complete this challenge. First,
    pair all the k-mers with their reverse complements, find those that are the same,
    and print their positions. You could iterate through them with a `for` loop, or
    you might consider using the `zip()` function that we first looked at in [Chapter 6](ch06.html#ch06)
    to create the pairs. This is an interesting challenge, and I’m sure you can figure
    out a working solution before you read my versions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经具备完成这个挑战所需的一切。首先，将所有的 k-mer 与它们的反向互补配对，找出相同的那些，并打印它们的位置。你可以使用 `for` 循环来遍历它们，或者考虑使用我们在
    [第6章](ch06.html#ch06) 中首次介绍的 `zip()` 函数来创建这些配对。这是一个有趣的挑战，我相信在阅读我的解决方案之前，你能找到一个可行的解决方案。
- en: Solutions
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: I’ll show three variations to find the restriction sites, which increasingly
    rely on functions to hide the complexities of the program.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示三种方法来查找限制位点，它们越来越依赖函数来隐藏程序的复杂性。
- en: 'Solution 1: Using the zip() and enumerate() Functions'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 1：使用 `zip()` 和 `enumerate()` 函数
- en: 'In my first solution, I first use `zip()` to pair the k-mers and reverse complements.
    Assume `k=4`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的第一个解决方案中，我首先使用 `zip()` 将 k-mer 和它们的反向互补配对。假设 `k=4`：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'I also need to know the positions of the pairs, which I can get from `enumerate()`.
    If I inspect the pairs, I see that some of them (4, 6, 16, 17, and 20) are the
    same:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我还需要知道这些配对的位置，这可以通过 `enumerate()` 得到。如果检查这些配对，我发现其中一些（4、6、16、17 和 20）是相同的：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'I can use a list comprehension with a guard to find all the positions where
    the pairs are the same. Note I add 1 to the index values to get 1-based positions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以使用带有保护条件的列表推导式来找到所有配对相同的位置。注意，我将索引值加 1 以得到基于 1 的位置：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In [Chapter 11](ch11.html#ch11), I introduced the functions `fst()` and `snd()`
    for getting the first or second elements from a 2-tuple. I’d like to use those
    here so I don’t have to use indexing with the tuples. I also keep using the `find_kmers()`
    function from previous chapters. It seems like it’s time to put these functions
    into a separate module so I can import them as needed rather than copying them.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第11章](ch11.html#ch11) 中，我介绍了用于获取二元组中第一个或第二个元素的函数 `fst()` 和 `snd()`。我想在这里使用它们，这样就不必再用元组索引了。我还继续使用之前章节中的
    `find_kmers()` 函数。现在看起来是时候将这些函数放入一个单独的模块中，这样我就可以根据需要导入它们，而不是复制它们了。
- en: 'If you inspect the `common.py` module, you’ll see these functions and their
    tests. I can run `pytest` to ensure they all pass:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检查 `common.py` 模块，你会看到这些函数及其测试。我可以运行 `pytest` 确保它们全部通过：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Because `common.py` is in the current directory, I can import any functions
    I like from it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `common.py` 在当前目录中，所以我可以从中导入任何我喜欢的函数：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is how I incorporated these ideas in the first solution:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我如何在第一个解决方案中结合这些想法的方式：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-1)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-1)'
- en: Iterate over the records in the FASTA file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历 FASTA 文件中的记录。
- en: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-2)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-2)'
- en: Iterate through all the values of `k`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历所有 `k` 的值。
- en: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-3)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-3)'
- en: Find the k-mers for this `k`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 找到这个 `k` 的 k-mer。
- en: '[![4](assets/4.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-4)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-4)'
- en: Find the reverse complements of the k-mers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 k-mer 的反向互补。
- en: '[![5](assets/5.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-5)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-5)'
- en: Iterate through the positions and pairs of k-mer/reverse complement.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历位置和 k-mer/反向互补对。
- en: '[![6](assets/6.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-6)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-6)'
- en: Check if the first element of the pair is the same as the second element.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 检查对的第一个元素是否与第二个元素相同。
- en: '[![7](assets/7.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-7)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO3-7)'
- en: Print the position plus 1 (to correct for 0-based indexing) and the size of
    the sequence `k`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打印位置加1（以修正基于0的索引）和序列 `k` 的大小。
- en: 'Solution 2: Using the operator.eq() Function'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 2：使用 `operator.eq()` 函数
- en: Though I like the `fst()` and `snd()` functions and want to highlight how to
    share modules and functions, I’m duplicating the `operator.eq()` function. I first
    introduced this module in [Chapter 6](ch06.html#ch06) to use the `operator.ne()`
    (not equal) function, and I’ve also used the `operator.le()` (less than or equal)
    and `operator.add()` functions elsewhere.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我喜欢 `fst()` 和 `snd()` 函数，并想强调如何共享模块和函数，但我却重复了 `operator.eq()` 函数。我在[第6章](ch06.html#ch06)首次引入了这个模块，用于使用
    `operator.ne()`（不等于）函数，并且在其他地方也使用了 `operator.le()`（小于或等于）和 `operator.add()` 函数。
- en: 'I can rewrite part of the preceding solution like so:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以像这样重写前面解决方案的一部分：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO4-1)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO4-1)'
- en: Use the functional version of the `==` operator to compare the elements of the
    pair. Note the need to splat the pair to expand the tuple into its two values.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用函数版本的 `==` 操作符来比较对的元素。请注意需要展开对以将元组扩展为其两个值。
- en: 'I prefer a list comprehension with a guard to condense this code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢使用守卫的列表推导来压缩这段代码：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO5-1)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO5-1)'
- en: Use a guard for the equality comparison, and correct the position inside a list
    comprehension.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用守卫进行相等比较，并在列表推导中修正位置。
- en: 'Solution 3: Writing a revp() Function'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案 3：编写一个 `revp()` 函数
- en: In this final solution, it behooves me to write a `revp()` function and create
    a test. This will make the program more readable and will also make it easier
    to move this function into something like the `common.py` module for sharing in
    other projects.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终解决方案中，我喜欢编写一个 `revp()` 函数并创建一个测试。这将使程序更易读，并且也会更容易将此函数移入像 `common.py` 这样的模块中，以便在其他项目中共享。
- en: 'As usual, I imagine the signature of my function:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，我设想函数的签名：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO6-1)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO6-1)'
- en: I want to pass in a sequence and a value for `k` to get back a list of locations
    where reverse palindromes of the given size are found.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我想传入一个序列和一个`k`值，以获取反向回文字符串的位置列表。
- en: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO6-2)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO6-2)'
- en: For now, return the empty list.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，返回空列表。
- en: 'Here is the test I wrote. Note that I decided that the function should correct
    the indexes to 1-based counting:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我编写的测试。请注意，我决定该函数应该校正索引以进行基于1的计数：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If I add these to my `revp.py` program and run `pytest revp.py`, I’ll see that
    the test fails as it should. Now I can fill in the code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我将这些添加到我的`revp.py`程序中并运行`pytest revp.py`，我会看到测试失败，这正是应该的。现在我可以填写代码：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If I run `pytest` again, I should get a passing test. The `main()` function
    is now more readable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我再次运行 `pytest`，我应该会得到通过的测试。`main()` 函数现在更易读了：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-1)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-1)'
- en: Iterate through each value of `k`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历每个`k`值。
- en: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-2)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-2)'
- en: Iterate through each reverse palindrome of size `k` found in the sequence.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历在序列中找到的每个大小为`k`的反向回文字符串。
- en: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-3)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO7-3)'
- en: Print the position and size of the reverse palindrome.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打印反向回文的位置和大小。
- en: 'Note that it’s possible to use more than one iterator inside a list comprehension.
    I can collapse the two `for` loops into a single one, like so:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可以在列表推导式中使用多个迭代器。我可以将两个`for`循环合并成一个，如下所示：
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO8-1)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO8-1)'
- en: First iterate the `k` values, then use those to iterate the `revp()` values,
    returning both as a tuple.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先迭代`k`值，然后使用这些值迭代`revp()`值，并将两者作为元组返回。
- en: 'I would probably not use this construct. It reminds me of my old coworker,
    Joe, who would joke: “If it was hard to write, it should be hard to read!”'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能不会使用这种结构。它让我想起了我的老同事乔，他会开玩笑说：“如果写起来很难，那么阅读起来也应该很难！”
- en: Testing the Program
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试程序
- en: I’d like to take a moment to look at the integration test in *tests/revp_test.py*.
    The first two tests are always the same, checking for the existence of the expected
    program and that the program will produce some usage statement when requested.
    For a program that accepts files as inputs such as this one, I include a test
    that the program rejects an invalid file. I usually challenge other inputs too,
    like passing strings when integers are expected, to ensure the arguments are rejected.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我想花一点时间查看 *tests/revp_test.py* 中的集成测试。前两个测试总是一样的，检查预期程序的存在性以及在请求时程序将生成一些用法说明。对于接受文件作为输入的程序（比如这个程序），我包括一个测试，即程序拒绝无效文件。我通常也会挑战其他输入，比如在预期整数时传递字符串，以确保参数被拒绝。
- en: 'After I’ve checked that the arguments to the program are all validated, I start
    passing good input values to see that the program works as expected. This requires
    that I use valid, known input and verify that the program produces the correct,
    expected output. In this case, I encode the inputs and outputs using files in
    the *tests/inputs* directory. For instance, the expected output for the input
    file *1.fa* is found in *1.fa.out*:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认程序的参数全部验证通过后，我开始传递良好的输入值，以确保程序按预期工作。这需要我使用有效的、已知的输入，并验证程序产生正确的预期输出。在这种情况下，我使用
    *tests/inputs* 目录中的文件编码输入和输出。例如，文件 *1.fa* 的预期输出可以在 *1.fa.out* 中找到：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is the first input:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一个输入：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'and the expected output is:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 期望的输出是：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The second input file is significantly larger than the first. This is common
    with the Rosalind problems, and so it would be ugly to try to include the input
    and output values as literal strings in the test program. The expected output
    for the second file is 70 lines long. The last test is for an empty file, and
    the expected output is the empty string. While that may seem obvious, the point
    is to check that the program does not throw an exception on an empty input file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个输入文件比第一个大得多。这在 Rosalind 问题中很常见，因此试图在测试程序中包含输入和输出值作为字面字符串是不合适的。第二个文件的预期输出长度为70行。最后一个测试是针对空文件，预期输出为空字符串。虽然这似乎是显而易见的，但重点是检查程序在空输入文件时是否会抛出异常。
- en: 'In *tests/revp_test.py*, I wrote a `run()` helper function that takes the name
    of the input file, reads the expected output filename, and runs the program with
    the input to check the output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *tests/revp_test.py* 中，我编写了一个 `run()` 辅助函数，该函数接受输入文件的名称，读取预期输出文件名，并运行程序以检查输出：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-1)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-1)'
- en: The function takes the name of the input file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接受输入文件的名称。
- en: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-2)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-2)'
- en: The output file is the name of the input file plus *.out*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 输出文件是输入文件名加上 *.out*。
- en: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-3)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-3)'
- en: Make sure the output file exists.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 确保输出文件存在。
- en: '[![4](assets/4.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-4)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-4)'
- en: Run the program with the input file and capture the return value and output.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用输入文件运行程序并捕获返回值和输出。
- en: '[![5](assets/5.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-5)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-5)'
- en: Make sure the program reported a successful run.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 确保程序报告了成功运行。
- en: '[![6](assets/6.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-6)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-6)'
- en: Read the expected output file, breaking the contents on lines and creating a
    set of the resulting strings.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 读取预期输出文件，将内容按行分割并创建结果字符串的集合。
- en: '[![7](assets/7.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-7)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_location_restriction_sites___span_class__keep_together__using__testing__and_sharing_code__span__CO9-7)'
- en: Break the output of the program on lines and create a set to compare to the
    expected results. Sets allow me to disregard the order of the lines.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将程序的输出按行分割并创建一个集合，以便与预期结果进行比较。集合使我能够忽略行的顺序。
- en: 'This simplifies the tests. Note that the `INPUT*` and `EMPTY` variables are
    declared at the top of the module:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这简化了测试。请注意，`INPUT*` 和 `EMPTY` 变量在模块顶部声明：
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: I would encourage you to spend some time reading the **_test.py* files for every
    program. I hope that you will integrate testing into your development workflow,
    and I’m sure you can find ample code to copy from my tests, which will save you
    time.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你花一些时间阅读每个程序的 **_test.py* 文件。我希望你能将测试整合到你的开发工作流中，我相信你可以从我的测试中找到大量可供复制的代码，这将节省你的时间。
- en: Going Further
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解
- en: The minimum (4) and maximum (12) values for the length of the sites are hardcoded
    in the program. Add command-line parameters to pass these as integer options using
    those default values. Change the code to use the given values, and add tests to
    ensure the correct sites are found for different ranges of these values.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中硬编码了长度为最小（4）和最大（12）的位点值。添加命令行参数以将这些作为整数选项传递，并使用这些默认值更改代码。添加测试以确保找到不同范围内正确的位点。
- en: Write a program that can identify English palindromes such as “A man, a plan,
    a canal—Panama!” Start by creating a new repository. Find several interesting
    palindromes to use in your tests. Be sure to provide phrases that are not palindromes
    and verify that your algorithm rejects those, too. Release your code to the internet,
    and reap the fame, glory, and profit of writing open source software.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，可以识别英语回文，例如“A man, a plan, a canal—Panama!” 开始创建一个新的存储库。找几个有趣的回文来用于测试。确保提供不是回文的短语，并验证你的算法也能拒绝这些短语。将你的代码发布到互联网上，并收获编写开源软件的名声、荣誉和利润。
- en: Review
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习
- en: 'Key points from this chapter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的关键点：
- en: You can reuse functions by placing them into a module and importing them as
    needed.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过将它们放入模块并根据需要导入来重用函数。
- en: The `PYTHONPATH` environment variable indicates directories which Python should
    search when looking for modules of code.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PYTHONPATH` 环境变量指示 Python 在查找代码模块时应搜索的目录。'
