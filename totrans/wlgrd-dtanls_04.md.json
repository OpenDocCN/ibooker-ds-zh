["```py\nimport numpy as np\nimport pandas as pd\n\nimport pdfplumber\n\nfrom IPython.display import display\n```", "```py\npdf_path = \"./files/2019 - BFI yearbook 2019 - 888.pdf\"\npage_num = 11\n\npage_tables = []\n\nwith pdfplumber.open(pdf_path) as pdf:\n    page = pdf.pages[page_num-1]\n    page_tables = [t.extract() for t in page.find_tables()] #1\n\npage_tables\n```", "```py\ntable = page_tables[0]\npd.DataFrame(table[1:-1], columns=table[0])\n```", "```py\ndef extract_tables(pdf_path, pages=None, print_tables=True):\n  \"\"\"\n  Extract all tables found in a PDF.\n\n  `pdf_path`: file path pointing to the PDF\n  `pages`: the page number(s) to read\n  `print_tables`: whether to also print out\n  all the tables that are found (default: True)\n\n  returns: a list of pandas DataFrames\n  \"\"\"\n\n  if not pages:\n      pages = []\n\n  print(f\"Reading {pdf_path}\")\n\n  tables = []\n\n  with pdfplumber.open(pdf_path) as pdf:\n      for page_num in pages:\n          page = pdf.pages[page_num-1]\n\n          page_tables = [t.extract() for t in page.find_tables()]\n\n          df = [pd.DataFrame(table[1:-1], columns=table[0]) #1\n↪ for table in page_tables]\n\n          tables.extend(df)\n\n  print(f\"{len(tables)} tables found.\")\n\n  if len(tables) > 0:\n    if print_tables:\n        for index, df in enumerate(tables):\n          print(f\"\\n##########################\\n\\tTable\n↪ {index}\\n##########################\\n\")\n          display(df)\n\n  return tables\n\ntables = extract_tables(\"./files/2019 - BFI yearbook 2019 - 888.pdf\",\n↪ pages=[11,34,70])\n```", "```py\ntables_2018 = extract_tables(\"./files/2019 - BFI yearbook 2019 - 888.pdf\",\n↪ pages=[11,34,70])\n```", "```py\nadmissions_2018 = (\n    tables_2018[0]\n    .iloc[:,[0, 2]]\n)\n\nadmissions_2018.columns = [\"Month\", \"Admissions (million)\"]\n\nadmissions_2018.insert(0, \"Year\", 2018)\n\nadmissions_2018.head()\n```", "```py\ngenres_2018 = (\n    tables_2018[1]\n    .drop(columns=[tables_2018[1].columns[2], tables_2018[1].columns[4]])\n)\n\ngenres_2018.insert(0, \"Year\", 2018)\n\ngenres_2018.columns = [\"Year\", \"Genre\", \"Number of releases\",\n↪ \"Gross box office (£ million)\", \"Top performing title\"]\n\ngenres_2018.head()\n```", "```py\ndistributors_2018 = (\n    tables_2018[2]\n    .drop(index=[10]) #1\n)\n\ndistributors_2018.insert(0, \"Year\", 2018)\n\ndistributors_2018.columns = [\"Year\", \"Distributor\", \"Market share\",\n↪ \"Films on release\", \"Box office gross (£ million)\"]\n\ndistributors_2018.head()\n```", "```py\nadmissions = pd.concat([admissions_2018, admissions_2019,\n  admissions_2020, admissions_2021],\n  ignore_index=True,\n  axis=0)\n```", "```py\nadmissions[\"Year\"].value_counts()\n```", "```py\nadmissions.to_csv(\"admissions.csv\", index=False)\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nadmissions = pd.read_csv(\"admissions.csv\")\nprint(admissions.shape)\nadmissions.head()\n```", "```py\nCOVID_START_DATE = datetime.datetime(2020, 3, 1)     #1\nLOCKDOWN_END_DATE = datetime.datetime(2021, 7, 1)\n\nadmissions[\"date\"] = (\n    \"1 \" +      #2\n    admissions[\"Month\"] +\n    \" \" +\n    admissions[\"Year\"].astype(str)\n)\n\nadmissions[\"date\"] = pd.to_datetime(admissions[\"date\"], format=\"%d %B %Y\")\nadmissions.head()\n```", "```py\nadmissions.loc[admissions[\"date\"] < COVID_START_DATE, \"covid_period\"]\n↪ = \"pre-COVID\"\nadmissions.loc[admissions[\"date\"].between(COVID_START_DATE,\n↪ LOCKDOWN_END_DATE, \"left\"), \"covid_period\"] = \"during COVID\"\nadmissions.loc[admissions[\"date\"] >= LOCKDOWN_END_DATE, \"covid_period\"]\n↪ = \"post-lockdowns\"\n\nadmissions[\"covid_period\"] = (\n    pd.Categorical(\n        admissions[\"covid_period\"],\n        categories=[\"pre-COVID\", \"during COVID\", \"post-lockdowns\"],\n        ordered=True\n    )\n)\n\nadmissions[\"covid_period\"].value_counts(dropna=False)\n```", "```py\nfig, axis = plt.subplots(figsize=(10, 6))\n\nlinestyles = [\"solid\", \"dotted\", \"dashed\"]\n\nfor idx, covid_period in \n↪ enumerate(admissions[\"covid_period\"].value_counts().index):\n    (\n        admissions\n        .query(f\"covid_period=='{covid_period}'\")\n        .set_index(\"date\")\n        [\"Admissions (million)\"]\n        .plot(ax=axis, label=covid_period, linestyle=linestyles[idx])\n    )\n\naxis.set(\n    title=\"Monthly cinema admissions over time\",\n    ylabel=\"Admissions (millions)\"\n)\n\naxis.legend()\n\nplt.show()\n```", "```py\nfig, axis = plt.subplots()\n\nadmissions_by_period = (\n    admissions\n    .groupby(\"covid_period\")\n    [\"Admissions (million)\"]\n    .agg([\"mean\", \"median\"])\n)\n\nfor i, metric in enumerate(admissions_by_period.columns):\n    hatch = \"/\" if i == 0 else \"\\\\\\\\\"                            #1\n    color = \"C0\" if i == 0 else \"C1\"     #2\n    admissions_by_period[metric].plot(kind=\"bar\", ax=axis, position=i,\n                                      hatch=hatch, label=metric,\n                                      width=0.2, color=color)\n\naxis.set(\n    title=\"Average monthly cinema admissions during COVID periods\",\n    ylabel=\"Admissions (millions)\",\n    xlabel=\"Period\",\n    xticklabels = admissions_by_period.index\n)\n\naxis.legend()\n\nplt.show()\n```", "```py\nfig, axes = plt.subplots(1, 2, figsize=(10, 6), sharey=True)\n\n(\n    admissions\n    .loc[admissions[\"covid_period\"] == \"pre-COVID\", \"Admissions (million)\"]\n    .hist(bins=10, ax=axes[0])\n)\n\naxes[0].set(\n    title=\"Distribution of monthly admissions pre-COVID\",\n    xlabel=\"Admissions (million)\",\n    ylabel=\"Frequency\"\n)\n\n(\n    admissions\n    .loc[admissions[\"covid_period\"] == \"post-lockdowns\",\n↪ \"Admissions (million)\"]\n    .hist(ax=axes[1])\n)\n\naxes[1].set(\n    title=\"Distribution of monthly admissions post-lockdowns\",\n    xlabel=\"Admissions (million)\"\n)\n\nplt.show()\n```", "```py\ngenres = pd.read_csv(\"genres.csv\")\nprint(genres.shape)\ngenres.head()\n```", "```py\ngenres.loc[genres[\"Year\"] < 2020, \"covid_period\"] = \"pre-COVID\"\ngenres.loc[genres[\"Year\"] == 2020, \"covid_period\"] = \"during COVID\"\ngenres.loc[genres[\"Year\"] > 2020, \"covid_period\"] = \"post-lockdowns\"\n\ngenres[\"covid_period\"].value_counts(dropna=False)\n```", "```py\ngenres.loc[genres[\"Gross box office (£ million)\"] == \"<0.1\",\n↪ \"Gross box office (£ million)\"] = 0.05\ngenres[\"Gross box office (£ million)\"] =\n↪ genres[\"Gross box office (£ million)\"].astype(float)\n```", "```py\nfig, axis = plt.subplots()\n\n(\n    genres\n    .groupby(\"Genre\")\n    [\"Gross box office (£ million)\"]\n    .sum()\n    .sort_values()\n    .plot\n    .barh(ax=axis)\n)\n\naxis.set(\n    title=\"Total revenue (£ millions) by genre\",\n    xlabel=\"Gross revenue (£ million)\"\n)\n\nplt.show()\n```", "```py\nyears = genres[\"Year\"].unique()\n\nfig, axes = plt.subplots(1, len(years),\n↪ figsize=(3*len(years),8), sharex=True)\n\nfor idx, year in enumerate(years):\n    (\n        genres[genres[\"Year\"] == year]\n        .groupby(\"Genre\")\n        [\"Gross box office (£ million)\"]\n        .sum()\n        .sort_values()\n        .plot\n        .barh(ax=axes[idx])\n    )\n\n    axes[idx].set(\n        title=f\"Revenue by genre ({year})\"\n    )\n\nplt.tight_layout()\nplt.show()\n```", "```py\n(\n    genres[genres[\"Genre\"] == \"Animation\"]\n    .groupby(\"Year\")\n    [\"Number of releases\"]\n    .sum()\n)\n```", "```py\ngenres[(genres[\"Genre\"] == \"War\") & (genres[\"Year\"] == 2020)]\n```", "```py\ndistributors = pd.read_csv(\"distributors.csv\")\nprint(distributors.shape)\ndistributors.head()\n```", "```py\ndistributors.loc[distributors[\"Year\"] < 2020, \"covid_period\"] = \"pre-COVID\"\ndistributors.loc[distributors[\"Year\"] == 2020, \"covid_period\"]\n↪ = \"during COVID\"\ndistributors.loc[distributors[\"Year\"] > 2020, \"covid_period\"]\n↪ = \"post-lockdowns\"\n\ndistributors[\"covid_period\"].value_counts(dropna=False)\n```", "```py\ndistributors.groupby(\"Year\")[\"Market share\"].sum()\n```", "```py\n(\n    distributors\n    .groupby([\"Year\", \"Distributor\"])\n    [\"Market share\"]\n    .sum()\n    .unstack()\n)\n```", "```py\ndistributors[\"Distributor\"] = (\n    distributors[\"Distributor\"].replace({\n        \"20th Century Fox*\": \"20th Century Fox\",\n        \"eOne Films\": \"Entertainment One\"\n    })\n)\n\ndistributors.loc[distributors[\"Distributor\"].str.startswith(\"Other\"),\n↪ \"Distributor\"] = \"Other\"\n\ndistributors[\"Distributor\"].value_counts()\n```", "```py\ndistributors_to_keep = (\n    distributors[\"Distributor\"]\n    .value_counts()\n    .loc[lambda x: x == distributors[\"Year\"].nunique()]\n    .index\n)\n```", "```py\ndistributors_pivot = (\n  distributors\n  .query(\"Distributor in @distributors_to_keep\")\n  .assign(Year=distributors[\"Year\"]\n          .apply(lambda x: datetime.datetime(x, 1, 1))     #1\n         )\n  .groupby([\"Year\", \"Distributor\"])\n  [\"Market share\"]\n  .sum()\n  .unstack()      #2\n)\n```", "```py\ndistributors_pivot.transpose()\n```"]