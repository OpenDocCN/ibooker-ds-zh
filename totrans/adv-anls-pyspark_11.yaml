- en: Chapter 11\. Managing the Machine Learning Lifecycle with MLflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。使用MLflow管理机器学习生命周期
- en: As machine learning gains prominence across industries and is deployed in production
    environments, the level of collaboration and complexity surrounding it has increased
    as well. Thankfully, platforms and tools have cropped up to help manage the machine
    learning lifecycle in a structured manner. One such platform that works well with
    PySpark is MLflow. In this chapter, we will show how MLflow can be used with PySpark.
    Along the way, we’ll introduce key practices that you can incorporate in your
    data science workflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着机器学习在各行业的重要性日益突出并在生产环境中部署，围绕它的协作和复杂性水平也相应增加。幸运的是，已经出现了平台和工具，以有组织的方式管理机器学习生命周期。一个与PySpark兼容的这类平台是MLflow。在本章中，我们将展示如何使用MLflow与PySpark。在此过程中，我们将介绍您可以在数据科学工作流中引入的关键实践。
- en: Rather than starting from scratch, we’ll build upon the work that we did in
    [Chapter 4](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests).
    We will revisit our decision tree implementation using the Covtype dataset. Only
    this time, we’ll use MLflow for managing the machine learning lifecycle.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其从头开始，我们将在[第4章](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests)所做的工作基础上进行构建。我们将使用Covtype数据集重新审视我们的决策树实现。这一次，我们将使用MLflow来管理机器学习生命周期。
- en: We’ll start by explaining the challenges and processes that encompass the machine
    learning lifecycle. We will then introduce MLflow and its components, as well
    as cover MLflow’s support for PySpark. This will be followed by an introduction
    to tracking machine learning training runs using MLflow. We’ll then learn how
    to manage machine learning models using MLflow Models. Then we’ll discuss deployment
    of our PySpark model and do an implementation for it. We’ll end the chapter by
    creating an MLflow Project. This will show how we can make our work so far reproducible
    for collaborators. Let’s get started by discussing the machine learning lifecycle.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先解释围绕机器学习生命周期的挑战和过程。然后我们将介绍MLflow及其组件，以及MLflow对PySpark的支持。接下来我们将介绍如何使用MLflow跟踪机器学习训练运行。然后我们将学习如何使用MLflow
    Models管理机器学习模型。然后我们将讨论我们的PySpark模型的部署并对其进行实现。我们将通过创建一个MLflow项目来结束本章。这将展示如何使我们迄今为止的工作对合作者可重现。让我们开始讨论机器学习生命周期。
- en: Machine Learning Lifecycle
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习生命周期
- en: There are multiple ways to describe the machine learning lifecycle. One simple
    way is to break it down into various components or steps, as shown in [Figure 11-1](#ml_lifecycle).
    These steps may not necessarily be in sequence for every project, and the lifecycle
    is cyclic more often than not.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 描述机器学习生命周期的方法有多种。一个简单的方法是将其分解为不同的组件或步骤，如[图11-1](#ml_lifecycle)所示。这些步骤对于每个项目来说不一定是顺序的，并且生命周期往往是循环的。
- en: Business project definition and stakeholder alignment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务项目定义和利益相关者的对齐
- en: Data acquisition and exploration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据获取和探索
- en: Data modeling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据建模
- en: Interpretation and communication of results
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果的解释和沟通
- en: Model implementation and deployment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型实施和部署
- en: '![machine learning lifecycle](assets/machine_learning_lifecycle.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![机器学习生命周期](assets/machine_learning_lifecycle.png)'
- en: Figure 11-1\. ML lifecycle
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-1。ML生命周期
- en: The speed at which you can iterate through the ML lifecycle affects how fast
    you can put your work to practical use. For example, an implemented model can
    become outdated due to a change in underlying data. In that case, you will need
    to revisit past work and build upon it again.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你能够迭代机器学习生命周期的速度影响你能够将工作投入实际应用的速度。例如，由于底层数据的变化，实施的模型可能会过时。在这种情况下，你需要重新审视过去的工作并再次构建。
- en: 'Examples of challenges that can show up during a machine learning project’s
    lifecycle are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习项目生命周期中可能出现的挑战示例包括：
- en: Lack of reproducibility
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏可重现性
- en: Data scientists on the same team may not be able to reproduce each other’s results
    even if the code and parameters have been tracked. This can be a result of the
    execution environment (system configuration or library dependencies) being different.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使代码和参数已被跟踪，同一团队的数据科学家可能无法复现彼此的结果。这可能是由于执行环境（系统配置或库依赖项）不同造成的。
- en: Lack of standardization of models
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模型标准化的缺乏
- en: Different teams may use different libraries and different conventions for storing
    machine learning models. This can become a problem when sharing work across teams.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的团队可能使用不同的库和存储机器学习模型的约定，这在团队间共享工作时可能会成为问题。
- en: Trying to structure your work while going through the ML lifecycle can quickly
    become overwhelming. In light of such challenges, multiple open source and proprietary
    platforms are available to help. One leading open source platform is MLflow, which
    we will introduce in the upcoming section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 ML 生命周期的结构化工作时可能会快速变得无法控制。针对这类挑战，多个开源和专有平台可供选择。其中一个领先的开源平台是 MLflow，在接下来的部分中我们将进行介绍。
- en: MLflow
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MLflow
- en: MLflow is an open source platform for managing the end-to-end machine learning
    lifecycle. It helps us reproduce and share experiments, manage models, and deploy
    models for end users. In addition to a REST API and CLI, it also provides APIs
    for Python, R, and Java/Scala.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个管理端到端机器学习生命周期的开源平台。它帮助我们复现和共享实验，管理模型并为最终用户部署模型。除了 REST API 和 CLI 外，它还提供了
    Python、R 和 Java/Scala 的 API。
- en: 'It has four main components, as shown in [Figure 11-2](#mlflow_components):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如 [图 11-2](#mlflow_components) 所示，它有四个主要组件：
- en: MLflow Tracking
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow Tracking
- en: This component records parameters, metrics, code versions, models, and artifacts
    such as plots and text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件记录参数、指标、代码版本、模型以及如图表和文本等工件。
- en: MLflow Projects
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 项目
- en: This component provides you with a reusable, reproducible format to share with
    other data scientists or transfer to production. It helps you manage the model
    training process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件为您提供可重复使用的、可重现的格式，以与其他数据科学家共享或传输到生产中。它帮助您管理模型训练过程。
- en: MLflow Models
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型
- en: This component enables you to package models to deploy to a variety of model
    serving and inference platforms. It provides a consistent API for loading and
    applying models, regardless of the underlying library used to build the model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使您能够将模型打包部署到各种模型服务和推断平台。它提供了一个一致的 API，用于加载和应用模型，无论使用哪种底层库构建模型。
- en: MLflow Registry
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 注册表
- en: This component enables you to collaboratively keep track of model lineage, model
    versions, stage transitions, and annotations in a central store.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使您能够在中心存储中协作跟踪模型衍生、模型版本、阶段转换和注释。
- en: '![MLflow components](assets/aaps_1102.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow 组件](assets/aaps_1102.png)'
- en: Figure 11-2\. MLflow components
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. MLflow 组件
- en: 'Let’s install MLflow. It’s straightforward to do so using pip:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 MLflow。使用 pip 安装非常简单：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s it!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: MLflow integrates with many popular machine learning frameworks such as Spark,
    TensorFlow, PyTorch, and others. We will be using its native support for Spark
    over the next few sections. Importing the Spark-specific MLflow component is as
    easy as running `import mlflow.spark`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 与许多流行的机器学习框架集成，如 Spark、TensorFlow、PyTorch 等。接下来的几节中，我们将使用它对 Spark 的本地支持。导入特定于
    Spark 的 MLflow 组件就像运行 `import mlflow.spark` 一样简单。
- en: In the next section, we’ll introduce MLflow Tracking and add it to our decision
    tree code from [Chapter 4](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍 MLflow Tracking 并将其添加到我们的决策树代码中 [第 4 章](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests)。
- en: Experiment Tracking
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验跟踪
- en: A typical machine learning project involves experimenting with several algorithms
    and models to solve a problem. The associated datasets, hyperparameters, and metrics
    need to be tracked. Typically, experiment tracking is done using makeshift tools
    such as spreadsheets and can be inefficient or, worse, unreliable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的机器学习项目涉及尝试多种算法和模型以解决问题。需要跟踪相关的数据集、超参数和指标。通常使用临时工具（如电子表格）进行实验跟踪可能效率低下，甚至不可靠。
- en: MLflow Tracking is an API and UI for logging parameters, code versions, metrics,
    and artifacts when running your machine learning code and for later visualizing
    the results. You can use MLflow Tracking in any environment (for example, a standalone
    script or a notebook) to log results to local files or to a server and then compare
    multiple runs. It is library-agnostic and integrates with multiple frameworks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow Tracking 是一个 API 和 UI，用于在运行机器学习代码时记录参数、代码版本、指标和工件，并在稍后可视化结果。您可以在任何环境中使用
    MLflow Tracking（例如独立脚本或笔记本）将结果记录到本地文件或服务器，然后比较多次运行。它与多个框架集成且与库无关。
- en: 'MLflow Tracking is organized around the concept of *runs*, which are executions
    of some piece of data science code. MLflow Tracking provides a UI that lets you
    visualize, search, and compare runs, as well as download run artifacts or metadata
    for analysis in other tools. It contains the following key features:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow跟踪围绕“运行”这一概念组织，这些运行是某段数据科学代码的执行。MLflow跟踪提供了一个界面，让您可以可视化，搜索和比较运行，以及下载运行的工件或元数据以在其他工具中进行分析。它包含以下关键功能：
- en: Experiment-based run listing and comparison
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于实验的运行列表和比较
- en: Searching for runs by parameter or metric value
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据参数或指标值搜索运行
- en: Visualizing run metrics
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化运行指标
- en: Downloading run results
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载运行结果
- en: Let’s add MLflow Tracking to our decision tree code in the PySpark shell. It’s
    assumed that you have downloaded the [Covtype dataset](https://oreil.ly/0xyky)
    and are familiar with it. The Covtype dataset is available online as a compressed
    CSV-format data file, *covtype.data.gz*, and accompanying info file, *covtype.info*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在PySpark shell中的决策树代码中添加MLflow跟踪。假设您已下载了[Covtype数据集](https://oreil.ly/0xyky)并对其熟悉。Covtype数据集以压缩的CSV格式数据文件*covtype.data.gz*和配套的信息文件*covtype.info*的形式在线提供。
- en: Start `pyspark-shell`. As mentioned previously, building decision trees can
    be resource intensive. If you have the memory, specify `--driver-memory 8g` or
    similar.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 启动`pyspark-shell`。如前所述，构建决策树可能需要大量资源。如果您有足够的内存，请指定`--driver-memory 8g`或类似的值。
- en: 'We start by preparing the data and machine learning pipeline:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先准备数据和机器学习管道：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To start logging with MLflow, we start a run using `mlflow.start_run`. We will
    use a `with` clause to automatically end the run at the end of the block:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用MLflow记录日志，我们使用`mlflow.start_run`启动一个运行。我们将使用`with`子句来在块结束时自动结束运行：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can now access our experiment data via the tracking UI. Start it by running
    the `mlflow ui` command. By default it starts on port 5000\. You can use the `-p
    <port_name>` option to change the default port. Once you have successfully started
    the UI, go to *[*http://localhost:5000/*](http://localhost:5000/)*. You will see
    a UI as shown in [Figure 11-3](#mlflow_ui). You can search across all the runs,
    filter for those that meet particular criteria, compare runs side by side, etc.
    If you wish, you can also export the contents as a CSV file to analyze locally.
    Click the run in the UI named `decision-tree`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过跟踪界面访问我们的实验数据。运行`mlflow ui`命令启动它。默认情况下，它会在端口5000上启动。您可以使用`-p <port_name>`选项更改默认端口。一旦成功启动界面，请转到[*http://localhost:5000/*](http://localhost:5000/)。您将看到一个如[图11-3](#mlflow_ui)所示的界面。您可以搜索所有运行，过滤符合特定条件的运行，将运行进行比较等。如果您愿意，还可以将内容导出为CSV文件以进行本地分析。点击界面中名为`decision-tree`的运行。
- en: '![MLflow UI 1](assets/aaps_1103.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow UI 1](assets/aaps_1103.png)'
- en: Figure 11-3\. MLflow UI 1
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-3\. MLflow UI 1
- en: When viewing an individual run, as shown in [Figure 11-4](#mlflow_ui_2), you’ll
    notice that MLflow stores all the corresponding parameters, metrics, etc. You
    can add notes about this run in free text, as well as tags.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看单个运行时，如[图11-4](#mlflow_ui_2)所示，您会注意到MLflow存储了所有相应的参数，指标等。您可以在其中添加关于此运行的自由文本注释，以及标签。
- en: '![MLflow UI 2](assets/aaps_1104.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow UI 2](assets/aaps_1104.png)'
- en: Figure 11-4\. MLflow UI 2
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-4\. MLflow UI 2
- en: We are now able to track and reproduce our experiments. Let’s now discuss managing
    our models using MLflow.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够跟踪和重现我们的实验。现在让我们讨论使用MLflow管理我们的模型。
- en: Managing and Serving ML Models
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理和提供机器学习模型
- en: An MLflow Model is a standard format for packaging machine learning models that
    can be used in a variety of downstream tools—for example, real-time serving through
    a REST API or batch inference on Apache Spark. The format defines a convention
    that lets you save a model in different “flavors” that can be understood by different
    libraries.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow模型是打包机器学习模型的标准格式，可以在各种下游工具中使用，例如通过REST API进行实时服务或在Apache Spark上进行批量推断。该格式定义了一种约定，可让您以不同的“口味”保存模型，这些口味可以被不同的库理解。
- en: Flavors are the key concept that makes MLflow Models powerful. They make it
    possible to write tools that work with models from any ML library without having
    to integrate each tool with each library. MLflow defines several “standard” flavors
    that all of its built-in deployment tools support, such as a “Python function”
    flavor that describes how to run the model as a Python function. However, libraries
    can also define and use other flavors. For example, MLflow’s `mlflow.sklearn`
    library allows loading models back as a scikit-learn `Pipeline` object for use
    in code that is aware of scikit-learn, or as a generic Python function for use
    in tools that just need to apply the model (for example, the `mlflow.sagemaker`
    tool for deploying models to Amazon SageMaker).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Flavor 是使 MLflow 模型强大的关键概念。它使得可以编写可以与任何 ML 库中的模型一起工作的工具，而无需将每个工具与每个库集成。MLflow
    定义了几种“标准” flavor，所有其内置部署工具都支持，如描述如何将模型作为 Python 函数运行的“Python function” flavor。然而，库也可以定义和使用其他
    flavors。例如，MLflow 的`mlflow.sklearn`库允许将模型加载回作为 scikit-learn 的`Pipeline`对象，在意识到
    scikit-learn 的代码中使用，或者作为通用 Python 函数在仅需要应用模型的工具中使用（例如用于将模型部署到 Amazon SageMaker
    的`mlflow.sagemaker`工具）。
- en: An MLflow Model is a directory containing a set of files. We had earlier logged
    our model using the `log_model` API. This created a file called *MLmodel*. Open
    the decision-tree run and scroll down to the “Artifacts” section. Check out the
    *MLmodel* file. Its contents should be similar to what’s depicted in [Figure 11-5](#mlflow_model).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型是一个包含一组文件的目录。我们之前使用`log_model`API记录了我们的模型。这创建了一个名为 *MLmodel* 的文件。打开决策树运行并向下滚动到“Artifacts”部分。查看
    *MLmodel* 文件。它的内容应类似于[图 11-5](#mlflow_model)所示。
- en: '![MLflow Model](assets/aaps_1105.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow 模型](assets/aaps_1105.png)'
- en: Figure 11-5\. MLflow Model
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-5\. MLflow 模型
- en: The file captures our model’s metadata, signature, and flavors. The Model signature
    defines the schema of a model’s inputs and outputs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件捕获了我们模型的元数据、签名和 flavors。模型签名定义了模型输入和输出的模式。
- en: 'Our model file has two flavors: python_function and spark. The python_function
    flavor enables MLflow’s model deployment and serving tools to work with any Python
    model regardless of which ML library trained the model. As a result, any Python
    model can be easily productionalized in a variety of runtime environments.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型文件有两种 flavor：python_function 和 spark。python_function flavor 使得 MLflow 的模型部署和服务工具可以处理任何
    Python 模型，而不管该模型是用哪个 ML 库训练的。因此，任何 Python 模型都可以轻松地在各种运行时环境中投入生产。
- en: 'The spark model flavor enables exporting Spark MLlib models as MLflow Models.
    For example, to make predictions on a Spark DataFrame using the logged model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spark 模型风格支持将 Spark MLlib 模型导出为 MLflow 模型。例如，可以使用记录的模型在 Spark DataFrame 上进行预测：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-1)'
- en: This ID can be obtained from the tracking UI in the relevant *MLmodel* file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从相关的 *MLmodel* 文件在追踪 UI 中获取此 ID。
- en: '[![2](assets/2.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-2)'
- en: We use Python f-strings for adding the relevant run ID.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Python f-strings 添加相关的运行 ID。
- en: We can also use the `mlflow serve` command-line tool to serve the model corresponding
    to a particular run ID.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`mlflow serve`命令行工具来为与特定运行 ID 对应的模型提供服务。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You have successfully deployed your model as a REST API!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将模型部署为 REST API！
- en: 'We can now use this endpoint to perform inference. Let’s prepare and send a
    request to the endpoint to see it in action. We’ll use the `requests` library
    to do this. Install it using pip first if you don’t yet have it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个端点进行推断。让我们准备并发送一个请求到端点来看看它的运行情况。我们将使用`requests`库来完成这个操作。如果你还没有安装它，请先使用pip进行安装：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we’ll send a request containing a JSON object in a pandas-split orientation
    to the model server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将发送一个包含 JSON 对象的请求到模型服务器，该对象的方向为 pandas-split。
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We not only loaded a saved model but also deployed it as a REST API and performed
    inference in real time!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅加载了一个保存的模型，还将其部署为 REST API 并进行了实时推断！
- en: Let us now learn how to create an MLflow Project for the work we have done so
    far.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们学习如何为我们迄今所做的工作创建一个 MLflow 项目。
- en: Creating and Using MLflow Projects
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用 MLflow 项目
- en: MLflow Projects is a standard format for reusable and reproducible packaging.
    It’s a self-contained unit that bundles all the machine code and dependencies
    required to execute a machine learning workflow and enables you to produce a particular
    model run on any system or environment. MLflow Projects includes an API and command-line
    tools for running projects. It can also be used to chain projects together into
    workflows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow Projects是一个可重复使用和可复制打包的标准格式。它是一个自包含单元，捆绑了执行机器学习工作流所需的所有机器代码和依赖项，并使你能够在任何系统或环境上生成特定模型运行。MLflow
    Projects包括一个API和命令行工具来运行项目。它还可以用于将项目链接到工作流中。
- en: Each project is simply a directory of files, or a Git repository, containing
    your code. MLflow can run some projects based on a convention for placing files
    in this directory (for example, a *conda.yml* file is treated as a Conda environment),
    but you can describe your project in more detail by adding an MLproject file,
    which is a YAML-formatted text file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目只是一个文件目录，或者是一个包含你的代码的Git仓库。MLflow可以根据在该目录中放置文件的约定来运行某些项目（例如，*conda.yml*文件被视为一个Conda环境），但是你可以通过添加MLproject文件来更详细地描述你的项目，该文件是一个格式为YAML的文本文件。
- en: 'MLflow currently supports the following project environments: Conda environment,
    Docker container environment, and system environment. By default, MLflow uses
    the system path to find and run the Conda binary.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow当前支持以下项目环境：Conda环境、Docker容器环境和系统环境。默认情况下，MLflow使用系统路径来查找和运行Conda二进制文件。
- en: Creating a basic MLflow project is straightforward. The required steps are listed
    in [Figure 11-6](#how_to_build_an_mflow_project).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个基本的MLflow项目很简单。所需的步骤列在[图 11-6](#how_to_build_an_mflow_project)中。
- en: '![How to build an MLflow Project](assets/aaps_1106.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![如何构建一个MLflow项目](assets/aaps_1106.png)'
- en: Figure 11-6\. How to build an MLflow Project
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-6\. 如何构建一个MLflow项目
- en: 'We will start by creating our project directory named *decision_tree_project*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建名为*decision_tree_project*的项目目录开始：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we’ll first create an MLproject file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们首先会创建一个MLproject文件：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now need our *conda.yml* file. We can get this from the MLflow UI introduced
    in a previous section. Go inside the decision-tree run that we previously saw.
    Scroll down to the Artifacts, click the conda YAML file, and copy its contents
    into *conda.yml* in our project directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要我们的*conda.yml*文件。我们可以从之前介绍的MLflow UI中获取这个。进入我们之前看到的decision-tree运行。向下滚动到Artifacts，点击conda
    YAML文件，将其内容复制到我们项目目录中的*conda.yml*中：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will now create the Python script that will be used to train a decision
    tree model upon the MLflow project being executed. For this, we’ll use the code
    from a previous section:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建Python脚本，用于在执行MLflow项目时训练决策树模型。为此，我们将使用前面一节中的代码：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO2-1)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO2-1)'
- en: Data is assumed to be one directory level above the MLflow project directory
    being executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设数据位于执行的MLflow项目目录的上一级目录。
- en: Data can also be included inside an MLflow project. In this case, we don’t do
    so because of the large size. In such a case, data can be shared using cloud storage
    such as AWS S3 or GCS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 数据也可以包含在MLflow项目中。在这种情况下，我们没有这样做是因为数据太大了。在这种情况下，可以使用AWS S3或GCS等云存储来共享数据。
- en: You can simulate how it will work for a collaborator locally before sharing,
    too. We do that using the `mlflow run` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在分享之前，你也可以在本地模拟协作者如何工作，我们使用`mlflow run`命令来实现这一点。
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We now have a reproducible MLflow project. We can upload it to a GitHub repository
    and share it with a collaborator who will be able to reproduce our work.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可复制的MLflow项目。我们可以将其上传到GitHub仓库，并与协作者分享，对方能够复现我们的工作。
- en: Where to Go from Here
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从这里开始
- en: This chapter introduced the MLflow project and guided you through its implementation
    for a straightforward project. There is a lot to explore within the MLflow project
    itself. You can find more information in the [official docs](https://mlflow.org).
    There are other tools out there that can serve as alternatives as well. These
    include open source projects, such as Metaflow and Kubeflow, as well as proprietary
    offerings by big cloud providers including Amazon SageMaker and the Databricks
    platform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了MLflow项目，并指导您如何在简单项目中实施它。 MLflow项目本身有很多可以探索的内容。 您可以在[官方文档](https://mlflow.org)中找到更多信息。
    还有其他工具可供选择。 这些包括开源项目，如Metaflow和Kubeflow，以及亚马逊SageMaker和Databricks平台等大型云提供商的专有产品。
- en: Of course, tools are only part of the solution to the challenges that a real-world
    machine learning project offers. Processes need to be defined by the people working
    on any project. We hope that you will build upon the foundations offered in this
    chapter and contribute to successful machine learning projects in the wild.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，工具只是应对现实世界中机器学习项目挑战的一部分解决方案。 进程需要由参与任何项目的人员定义。 我们希望您能在本章提供的基础上建立，并为野外成功的机器学习项目做出贡献。
