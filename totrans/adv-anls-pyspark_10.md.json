["```py\n$ pip3 install torch torchvision\n```", "```py\nwget http://ai.stanford.edu/~jkrause/car196/car_ims.tgz\n```", "```py\ndata_directory = \"cars_data\"\ntrain_images = \"cars_data/cars_train/cars_train\"\n```", "```py\nimport pandas as pd\n\ntrain_df = pd.read_csv(data_directory+\"/cars_train_data.csv\")\n\ntrain_df.head()\n...\n\n    Unnamed: 0 \tx1 \ty1 \t    x2 \t    y2 \t    Class \timage\n0 \t         0 \t39 \t116 \t569 \t375 \t14 \t    00001.jpg\n1 \t         1 \t36 \t116 \t868 \t587 \t3 \t    00002.jpg\n2 \t         2 \t85 \t109 \t601 \t381 \t91 \t    00003.jpg\n3 \t         3 \t621 \t393     1484    1096    134 \t    00004.jpg\n4 \t         4 \t14 \t36      133     99      106 \t    00005.jpg\n```", "```py\nimport os\nfrom PIL import Image\nfrom torchvision import transforms\n\n# needed input dimensions for the CNN\ninput_dim = (224,224)\ninput_dir_cnn = data_directory + \"/images/input_images_cnn\"\n\nos.makedirs(input_dir_cnn, exist_ok = True)\n\ntransformation_for_cnn_input = transforms.Compose([transforms.Resize(input_dim)])\n\nfor image_name in os.listdir(train_images):\n    I = Image.open(os.path.join(train_images, image_name))\n    newI = transformation_for_cnn_input(I)\n\n    newI.save(os.path.join(input_dir_cnn, image_name))\n\n    newI.close()\n    I.close()\n```", "```py\nimport torch\nfrom torchvision import models\n\nclass Img2VecResnet18():\n    def __init__(self):\n        self.device = torch.device(\"cpu\")\n        self.numberFeatures = 512\n        self.modelName = \"resnet-18\"\n        self.model, self.featureLayer = self.getFeatureLayer()\n        self.model = self.model.to(self.device)\n        self.model.eval()\n        self.toTensor = transforms.ToTensor() ![1](assets/1.png)\n        self.normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                              std=[0.229, 0.224, 0.225]) ![2](assets/2.png)\n\n    def getFeatureLayer(self):\n        cnnModel = models.resnet18(pretrained=True)\n        layer = cnnModel._modules.get('avgpool')\n        self.layer_output_size = 512\n\n        return cnnModel, layer\n\n    def getVec(self, img):\n        image = self.normalize(self.toTensor(img)).unsqueeze(0).to(self.device)\n        embedding = torch.zeros(1, self.numberFeatures, 1, 1)\n        def copyData(m, i, o): embedding.copy_(o.data)\n        h = self.featureLayer.register_forward_hook(copyData)\n        self.model(image)\n        h.remove()\n        return embedding.numpy()[0, :, 0, 0]\n```", "```py\nimport tqdm\n\nimg2vec = Img2VecResnet18()\nallVectors = {}\nfor image in tqdm(os.listdir(input_dir_cnn)):\n    I = Image.open(os.path.join(input_dir_cnn, image))\n    vec = img2vec.getVec(I)\n    allVectors[image] = vec\n    I.close()\n```", "```py\nimport pandas as pd\n\npd.DataFrame(allVectors).transpose().\\\n    to_csv(data_folder + '/input_data_vectors.csv')\n```", "```py\n$ pyspark --driver-memory 4g\n```", "```py\ninput_df = spark.read.option('inferSchema', True).\\\n                    csv(data_directory + '/input_data_vectors.csv')\ninput_df.columns\n...\n\n['_c0',\n '_c1',\n '_c2',\n '_c3',\n '_c4',\n[...]\n'_c509',\n '_c510',\n '_c511',\n '_c512']\n```", "```py\nfrom pyspark.ml.feature import VectorAssembler\n\nvector_columns = input_df.columns[1:]\nassembler = VectorAssembler(inputCols=vector_columns, outputCol=\"features\")\n\noutput = assembler.transform(input_df)\noutput = output.select('_c0', 'features')\n\noutput.show(1, vertical=True)\n...\n\n-RECORD 0------------------------\n _c0      | 01994.jpg\n features | [0.05640895,2.709...\n\n...\n\noutput.printSchema()\n...\n\nroot\n |-- _c0: string (nullable = true)\n |-- features: vector (nullable = true)\n```", "```py\nfrom pyspark.ml.feature import BucketedRandomProjectionLSH\n\nbrp = BucketedRandomProjectionLSH(inputCol=\"features\", outputCol=\"hashes\",\n                                  numHashTables=200, bucketLength=2.0)\nmodel = brp.fit(output)\n```", "```py\nlsh_df = model.transform(output)\nlsh_df.show(5)\n\n...\n+---------+--------------------+--------------------+\n|      _c0|            features|              hashes|\n+---------+--------------------+--------------------+\n|01994.jpg|[0.05640895,2.709...|[[0.0], [-2.0], [...|\n|07758.jpg|[2.1690884,3.4647...|[[0.0], [-1.0], [...|\n|05257.jpg|[0.7666548,3.7960...|[[-1.0], [-1.0], ...|\n|07642.jpg|[0.86353475,2.993...|[[-1.0], [-1.0], ...|\n|00850.jpg|[0.49161428,2.172...|[[-1.0], [-2.0], ...|\n+---------+--------------------+--------------------+\nonly showing top 5 rows\n```", "```py\nfrom IPython.display import display\nfrom PIL import Image\n\ninput_dir_cnn = data_folder + \"/images/input_images_cnn\"\n\ntest_image = os.listdir(input_dir_cnn)[0]\ntest_image = os.path.join(input_dir_cnn, test_image)\nprint(test_image)\ndisplay(Image.open(test_image))\n...\ncars_data/images/input_images_cnn/01994.jpg\n```", "```py\nimg2vec = Img2VecResnet18()\nI = Image.open(test_image)\ntest_vec = img2vec.getVec(I)\nI.close()\n\nprint(len(test_vec))\nprint(test_vec)\n...\n\n512\n[5.64089492e-02 2.70972490e+00 2.15519500e+00 1.43926993e-01\n 2.47581363e+00 1.36641121e+00 1.08204508e+00 7.62105465e-01\n[...]\n5.62133253e-01 4.33687061e-01 3.95899676e-02 1.47889364e+00\n 2.89110214e-01 6.61322474e-01 1.84713617e-01 9.42268595e-02]\n...\n\ntest_vector = Vectors.dense(test_vec)\n```", "```py\nprint(\"Approximately searching lsh_df for 5 nearest neighbors \\\n of input vector:\")\nresult = model.approxNearestNeighbors(lsh_df, test_vector, 5)\n\nresult.show()\n...\n+---------+--------------------+--------------------+--------------------+\n|      _c0|            features|              hashes|             distCol|\n+---------+--------------------+--------------------+--------------------+\n|01994.jpg|[0.05640895,2.709...|[[0.0], [-2.0], [...|3.691941786298668...|\n|00046.jpg|[0.89430475,1.992...|[[0.0], [-2.0], [...|   10.16105522433224|\n|04232.jpg|[0.71477133,2.582...|[[-1.0], [-2.0], ...|  10.255391011678762|\n|05146.jpg|[0.36903867,3.410...|[[-1.0], [-2.0], ...|  10.264572173322843|\n|00985.jpg|[0.530428,2.87453...|[[-1.0], [-2.0], ...|  10.474841359816633|\n+---------+--------------------+--------------------+--------------------+\n```", "```py\nfor i in list(result.select('_c0').toPandas()['_c0']):\n    display(Image.open(os.path.join(input_dir_cnn, i)))\n```"]