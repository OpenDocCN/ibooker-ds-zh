["```py\nIn [1]: import numpy as np\n        x = np.array([2, 3, 5, 7, 11, 13])\n        x * 2\nOut[1]: array([ 4,  6, 10, 14, 22, 26])\n```", "```py\nIn [2]: data = ['peter', 'Paul', 'MARY', 'gUIDO']\n        [s.capitalize() for s in data]\nOut[2]: ['Peter', 'Paul', 'Mary', 'Guido']\n```", "```py\nIn [3]: data = ['peter', 'Paul', None, 'MARY', 'gUIDO']\n        [s if s is None else s.capitalize() for s in data]\nOut[3]: ['Peter', 'Paul', None, 'Mary', 'Guido']\n```", "```py\nIn [4]: import pandas as pd\n        names = pd.Series(data)\n        names.str.capitalize()\nOut[4]: 0    Peter\n        1     Paul\n        2     None\n        3     Mary\n        4    Guido\n        dtype: object\n```", "```py\nIn [5]: monte = pd.Series(['Graham Chapman', 'John Cleese', 'Terry Gilliam',\n                           'Eric Idle', 'Terry Jones', 'Michael Palin'])\n```", "```py\nIn [6]: monte.str.lower()\nOut[6]: 0    graham chapman\n        1       john cleese\n        2     terry gilliam\n        3         eric idle\n        4       terry jones\n        5     michael palin\n        dtype: object\n```", "```py\nIn [7]: monte.str.len()\nOut[7]: 0    14\n        1    11\n        2    13\n        3     9\n        4    11\n        5    13\n        dtype: int64\n```", "```py\nIn [8]: monte.str.startswith('T')\nOut[8]: 0    False\n        1    False\n        2     True\n        3    False\n        4     True\n        5    False\n        dtype: bool\n```", "```py\nIn [9]: monte.str.split()\nOut[9]: 0    [Graham, Chapman]\n        1       [John, Cleese]\n        2     [Terry, Gilliam]\n        3         [Eric, Idle]\n        4       [Terry, Jones]\n        5     [Michael, Palin]\n        dtype: object\n```", "```py\nIn [10]: monte.str.extract('([A-Za-z]+)', expand=False)\nOut[10]: 0     Graham\n         1       John\n         2      Terry\n         3       Eric\n         4      Terry\n         5    Michael\n         dtype: object\n```", "```py\nIn [11]: monte.str.findall(r'^[^AEIOU].*[^aeiou]$')\nOut[11]: 0    [Graham Chapman]\n         1                  []\n         2     [Terry Gilliam]\n         3                  []\n         4       [Terry Jones]\n         5     [Michael Palin]\n         dtype: object\n```", "```py\nIn [12]: monte.str[0:3]\nOut[12]: 0    Gra\n         1    Joh\n         2    Ter\n         3    Eri\n         4    Ter\n         5    Mic\n         dtype: object\n```", "```py\nIn [13]: monte.str.split().str[-1]\nOut[13]: 0    Chapman\n         1     Cleese\n         2    Gilliam\n         3       Idle\n         4      Jones\n         5      Palin\n         dtype: object\n```", "```py\nIn [14]: full_monte = pd.DataFrame({'name': monte,\n                                    'info': ['B|C|D', 'B|D', 'A|C',\n                                             'B|D', 'B|C', 'B|C|D']})\n         full_monte\nOut[14]:              name   info\n         0  Graham Chapman  B|C|D\n         1     John Cleese    B|D\n         2   Terry Gilliam    A|C\n         3       Eric Idle    B|D\n         4     Terry Jones    B|C\n         5   Michael Palin  B|C|D\n```", "```py\nIn [15]: full_monte['info'].str.get_dummies('|')\nOut[15]:    A  B  C  D\n         0  0  1  1  1\n         1  0  1  0  1\n         2  1  0  1  0\n         3  0  1  0  1\n         4  0  1  1  0\n         5  0  1  1  1\n```", "```py\nIn [16]: # repo = \"https://raw.githubusercontent.com/jakevdp/open-recipe-data/master\"\n         # !cd data && curl -O {repo}/recipeitems.json.gz\n         # !gunzip data/recipeitems.json.gz\n```", "```py\nIn [17]: recipes = pd.read_json('data/recipeitems.json', lines=True)\n         recipes.shape\nOut[17]: (173278, 17)\n```", "```py\nIn [18]: recipes.iloc[0]\nOut[18]: _id                                {'$oid': '5160756b96cc62079cc2db15'}\n         name                                    Drop Biscuits and Sausage Gravy\n         ingredients           Biscuits\\n3 cups All-purpose Flour\\n2 Tablespo...\n         url                   http://thepioneerwoman.com/cooking/2013/03/dro...\n         image                 http://static.thepioneerwoman.com/cooking/file...\n         ts                                             {'$date': 1365276011104}\n         cookTime                                                          PT30M\n         source                                                  thepioneerwoman\n         recipeYield                                                          12\n         datePublished                                                2013-03-11\n         prepTime                                                          PT10M\n         description           Late Saturday afternoon, after Marlboro Man ha...\n         totalTime                                                           NaN\n         creator                                                             NaN\n         recipeCategory                                                      NaN\n         dateModified                                                        NaN\n         recipeInstructions                                                  NaN\n         Name: 0, dtype: object\n```", "```py\nIn [19]: recipes.ingredients.str.len().describe()\nOut[19]: count    173278.000000\n         mean        244.617926\n         std         146.705285\n         min           0.000000\n         25%         147.000000\n         50%         221.000000\n         75%         314.000000\n         max        9067.000000\n         Name: ingredients, dtype: float64\n```", "```py\nIn [20]: recipes.name[np.argmax(recipes.ingredients.str.len())]\nOut[20]: 'Carrot Pineapple Spice &amp; Brownie Layer Cake with Whipped Cream &amp;\n          > Cream Cheese Frosting and Marzipan Carrots'\n```", "```py\nIn [21]: recipes.description.str.contains('[Bb]reakfast').sum()\nOut[21]: 3524\n```", "```py\nIn [22]: recipes.ingredients.str.contains('[Cc]innamon').sum()\nOut[22]: 10526\n```", "```py\nIn [23]: recipes.ingredients.str.contains('[Cc]inamon').sum()\nOut[23]: 11\n```", "```py\nIn [24]: spice_list = ['salt', 'pepper', 'oregano', 'sage', 'parsley',\n                       'rosemary', 'tarragon', 'thyme', 'paprika', 'cumin']\n```", "```py\nIn [25]: import re\n         spice_df = pd.DataFrame({\n             spice: recipes.ingredients.str.contains(spice, re.IGNORECASE)\n             for spice in spice_list})\n         spice_df.head()\nOut[25]:     salt  pepper  oregano   sage  parsley  rosemary  tarragon  thyme   \\\n         0  False   False    False   True    False     False     False  False\n         1  False   False    False  False    False     False     False  False\n         2   True    True    False  False    False     False     False  False\n         3  False   False    False  False    False     False     False  False\n         4  False   False    False  False    False     False     False  False\n\n            paprika   cumin\n         0    False   False\n         1    False   False\n         2    False    True\n         3    False   False\n         4    False   False\n```", "```py\nIn [26]: selection = spice_df.query('parsley & paprika & tarragon')\n         len(selection)\nOut[26]: 10\n```", "```py\nIn [27]: recipes.name[selection.index]\nOut[27]: 2069      All cremat with a Little Gem, dandelion and wa...\n         74964                         Lobster with Thermidor butter\n         93768      Burton's Southern Fried Chicken with White Gravy\n         113926                     Mijo's Slow Cooker Shredded Beef\n         137686                     Asparagus Soup with Poached Eggs\n         140530                                 Fried Oyster Poâ€™boys\n         158475                Lamb shank tagine with herb tabbouleh\n         158486                 Southern fried chicken in buttermilk\n         163175            Fried Chicken Sliders with Pickles + Slaw\n         165243                        Bar Tartine Cauliflower Salad\n         Name: name, dtype: object\n```"]