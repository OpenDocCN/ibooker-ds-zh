["```py\ndiamonds <- read.csv(\"ch02-r4py/data/diamonds.csv\")\n```", "```py\ndiamonds <- read.csv(\"ch02-r4py/data/diamonds.csv\")\n```", "```py\ninstall.packages(\"tidyverse\")\n```", "```py\n.libPaths()\n[1] \"/Library/Frameworks/R.framework/Versions/4.0/Resources/library\"\n```", "```py\n# R\nlibrary(readr)\n```", "```py\n# Python equivalent\nimport readr\n```", "```py\nimport readr as rr\n```", "```py\nrequire(readr)\n```", "```py\n> diamonds_2 <- read_csv(\"R4Py/diamonds.csv\")\nParsed with column specification:\ncols(\n  carat = col_double(),\n  cut = col_character(),\n  color = col_character(),\n  clarity = col_character(),\n  depth = col_double(),\n  table = col_double(),\n  price = col_double(),\n  x = col_double(),\n  y = col_double(),\n  z = col_double()\n)\n```", "```py\n> print(diamonds)\n```", "```py\n> diamonds\n```", "```py\n> diamonds_2\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7 0.24  Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8 0.26  Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9 0.22  Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10 0.23  Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# … with 53,930 more rows\n```", "```py\n# A tibble: 53,940 x 10\n   carat cut     color clarity\n   <dbl> <chr>   <chr> <chr>\n 1 0.23  Ideal   E     SI2\n 2 0.21  Premium E     SI1\n 3 0.23  Good    E     VS1\n 4 0.290 Premium I     VS2\n 5 0.31  Good    J     SI2\n 6 0.24  Very G… J     VVS2\n 7 0.24  Very G… I     VVS1\n 8 0.26  Very G… H     SI1\n 9 0.22  Fair    E     VS2\n10 0.23  Very G… H     VS1\n# … with 53,930 more rows,\n#   and 6 more variables:\n#   depth <dbl>, table <dbl>,\n#   price <dbl>, x <dbl>,\n#   y <dbl>, z <dbl>\n```", "```py\n> diamonds_2 <- readr::read_csv(\"R4Py/diamonds.csv\")\n```", "```py\nfrom pandas import read_csv\n```", "```py\n(aa <- 8)\n```", "```py\naa <- 8\naa\n```", "```py\nclass(diamonds)\n[1] \"data.frame\"\n```", "```py\nclass(diamonds_2)\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n```", "```py\n> a <- c(TRUE, FALSE)\n> typeof(a)\n[1] \"logical\"\n```", "```py\n> b <- c(1, 2)\n> typeof(b)\n[1] \"double\"\n```", "```py\n> c <- c(3.14, 6.8)\n> typeof(c)\n[1] \"double\"\n```", "```py\n> b <- as.integer(c(1, 2))\n> typeof(b)\n[1] \"integer\"\n```", "```py\n> b <- c(1L, 2L)\n> typeof(b)\n[1] \"integer\"\n```", "```py\n> d <- c(\"a\", \"b\")\n> typeof(d)\n[1] \"character\"\n```", "```py\nmy_tibble <- tibble(a = c(T, F),\n                    b = c(1L, 2L),\n                    c = c(3.14, 6.8),\n                    d = c(\"a\", \"b\"))\nmy_tibble\n```", "```py\n# A tibble: 2 x 4\n  a         b     c d\n  <lgl> <int> <dbl> <chr>\n1 TRUE      1  3.14 a\n2 FALSE     2  6.8  b\n```", "```py\n> str(my_tibble)\ntibble [2 × 4] (S3: tbl_df/tbl/data.frame)\n $ a: logi [1:2] TRUE FALSE\n $ b: int [1:2] 1 2\n $ c: num [1:2] 3.14 6.8\n $ d: chr [1:2] \"a\" \"b\"\n```", "```py\n> library(dplyr)\n> glimpse(my_tibble)\nRows: 2\nColumns: 4\n$ a <lgl> TRUE, FALSE\n$ b <int> 1, 2\n$ c <dbl> 3.14, 6.80\n$ d <chr> \"a\", \"b\"\n```", "```py\n# Base package version\ndata.frame(\"Weight (g)\" = 15,\n           \"Group\" = \"trt1\",\n           \"5-day check\" = TRUE)\n  Weight..g. Group X5.day.check\n1         15  trt1         TRUE\n```", "```py\n> diamonds_base_nohead <- read.csv(\"ch02-r4py/data/diamonds_noheader.csv\", header = F)\n> names(diamonds_base_nohead)\n [1] \"V1\"  \"V2\"  \"V3\"  \"V4\"  \"V5\"  \"V6\"  \"V7\"  \"V8\"  \"V9\"  \"V10\"\n```", "```py\n> tibble(\"Weight (g)\" = 15,\n+            \"Group\" = \"trt1\",\n+            \"5-day check\" = TRUE)\n# A tibble: 1 x 3\n  `Weight (g)` Group `5-day check`\n         <dbl> <chr> <lgl>\n1           15 trt1  TRUE\n```", "```py\n> diamonds_tidy_nohead <- read_csv(\"ch02-r4py/data/diamonds_noheader.csv\", col_names = F)\n> names(diamonds_tidy_nohead)\n [1] \"X1\"  \"X2\"  \"X3\"  \"X4\"  \"X5\"  \"X6\"  \"X7\"  \"X8\"  \"X9\"  \"X10\"\n```", "```py\n> typeof(my_tibble)\n[1] \"list\"\n```", "```py\n> glimpse(PlantGrowth)\nRows: 30\nColumns: 2\n$ weight <dbl> 4.17, 5.58, 5.18, 6.11, 4.50, 4.6…\n$ group  <fct> ctrl, ctrl, ctrl, ctrl, ctrl, ctr…\n```", "```py\n> str(PlantGrowth)\n'data.frame':\t30 obs. of  2 variables:\n $ weight: num  4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...\n $ group : Factor w/ 3 levels \"ctrl\",\"trt1\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```", "```py\npg_lm <- lm(weight ~ group, data = PlantGrowth)\n```", "```py\n> typeof(pg_lm)\n[1] \"list\"\n> class(pg_lm)\n[1] \"lm\"\n```", "```py\n> names(PlantGrowth)\n[1] \"weight\" \"group\"\n> PlantGrowth$weight\n [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59\n[15] 5.87 3.83 6.03 4.89 4.32 4.69 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15\n[29] 5.80 5.26\n```", "```py\n> names(pg_lm)\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"\n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"\n [9] \"contrasts\"     \"xlevels\"       \"call\"          \"terms\"\n[13] \"model\"\n```", "```py\n> pg_lm$coefficients\n(Intercept)   grouptrt1   grouptrt2\n      5.032      -0.371       0.494\n```", "```py\n> pg_lm$residuals\n     1      2      3      4      5      6      7      8      9     10\n-0.862  0.548  0.148  1.078 -0.532 -0.422  0.138 -0.502  0.298  0.108\n    11     12     13     14     15     16     17     18     19     20\n 0.149 -0.491 -0.251 -1.071  1.209 -0.831  1.369  0.229 -0.341  0.029\n    21     22     23     24     25     26     27     28     29     30\n 0.784 -0.406  0.014 -0.026 -0.156 -0.236 -0.606  0.624  0.274 -0.266\n```", "```py\nlm(weight ~ ., data = PlantGrowth)\n```", "```py\nlm(len ~ ., data = ToothGrowth)\n# is the same as\nlm(len ~ supp + dose, data = ToothGrowth)\n```", "```py\nlm(len ~ supp * dose, data = ToothGrowth)\n```", "```py\n> typeof(PlantGrowth$group)\n[1] \"integer\"\n> class(PlantGrowth$group)\n[1] \"factor\"\n```", "```py\n> PlantGrowth$group\n [1] ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl\n [11] trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1\n [21] trt2 trt2 trt2 trt2 trt2 trt2 trt2 trt2 trt2 trt2\nLevels: ctrl trt1 trt2\n```", "```py\n> dput(PlantGrowth$group)\nstructure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,\n            2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,\n            3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L),\n          .Label = c(\"ctrl\", \"trt1\", \"trt2\"),\n          class = \"factor\")\n```", "```py\n> diamonds$color\n[1] E E E I J J I H E H ..\nLevels: D < E < F < G < H < I < J\n```", "```py\n> diamonds$price > 18000\n   [1] FALSE FALSE FALSE FALSE FALSE FALSE\n   ...\n```", "```py\n> diamonds$price > 18000 & diamonds$carat < 1.5\n   [1] FALSE FALSE FALSE FALSE FALSE FALSE\n   ...\n```", "```py\n> sum(diamonds$price > 18000 & diamonds$carat < 1.5)\n[1] 9\n```", "```py\n> sum(diamonds$price > 18000 & diamonds$carat < 1.5)/nrow(diamonds)\n[1] 0.0001668521\n```", "```py\n> letters[1] # The 1st element (indexing begins at 1)\n[1] \"a\"\n```", "```py\n> letters[-4] # Everything except the 4th element,\n> # (*not* the fourth element, counting backwards!)\n [1] \"a\" \"b\" \"c\" \"e\" \"f\" \"g\" \"h\" ...\n```", "```py\n> letters[-(1:20)] # Exclude elements 1 through 20\n[1] \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```", "```py\n> letters[23:26] # The 23rd to the 26th element\n[1] \"w\" \"x\" \"y\" \"z\"\n```", "```py\n>    # The 23rd to the last element\n[1] \"w\" \"x\" \"y\" \"z\"\n```", "```py\n> letters[23:] # error\n```", "```py\n> df[1]\nError in df[1] : object of type 'closure' is not subsettable\n> t[6]\nError in t[6] : object of type 'closure' is not subsettable\n```", "```py\n> diamonds$color[diamonds$price > 18000 & diamonds$carat < 1.5]\n[1] D D D D F D F F E\nLevels: D < E < F < G < H < I < J\n```", "```py\n> diamonds[diamonds$price > 18000 & diamonds$carat < 1.5, \"color\"]\n# A tibble: 9 x 1\n  color\n  <ord>\n1 D\n2 D\n3 D\n4 D\n5 F\n6 D\n7 F\n8 F\n9 E\n```", "```py\n> class(diamonds)\n[1] \"data.frame\"\n> diamonds[diamonds$price > 18000 & diamonds$carat < 1.5, \"color\"]\n[1] D D D D F D F F E\nLevels: D < E < F < G < H < I < J\n```", "```py\n> diamonds %>%\n+   filter(price > 18000, carat < 1.5) %>%\n+   select(color)\n# A tibble: 9 x 1\n  color\n  <ord>\n1 D\n2 D\n3 D\n4 D\n5 F\n6 D\n7 F\n8 F\n9 E\n```", "```py\n> select(filter(diamonds, price > 18000, carat < 1.5), color)\n```", "```py\n> PlantGrowth %>%\n+   group_by(group) %>%\n+   summarise(avg = mean(weight),\n+             stdev = sd(weight))\n`summarise()` ungrouping output (override with `.groups` argument)\n# A tibble: 3 x 3\n  group   avg stdev\n  <fct> <dbl> <dbl>\n1 ctrl   5.03 0.583\n2 trt1   4.66 0.794\n3 trt2   5.53 0.443\n```", "```py\n> irrigation <- read_csv(\"R4Py/irrigation.csv\")\nParsed with column specification:\ncols(\n  region = col_character(),\n  year = col_double(),\n  area = col_double()\n)\n> irrigation\n# A tibble: 16 x 3\n   region      year  area\n   <chr>      <dbl> <dbl>\n 1 Africa      1980   9.3\n 2 Africa      1990  11\n 3 Africa      2000  13.2\n 4 Africa      2007  13.6\n 5 Europe      1980  18.8\n 6 Europe      1990  25.3\n 7 Europe      2000  26.7\n 8 Europe      2007  26.3\n...\n```", "```py\nirrigation %>%\n  group_by(region) %>%\n  mutate(area_std_1980 = area/area[year == 1980])\n# A tibble: 16 x 4\n# Groups:   region [4]\n   region      year  area area_std_1980\n   <chr>      <dbl> <dbl>         <dbl>\n 1 Africa      1980   9.3          1\n 2 Africa      1990  11            1.18\n 3 Africa      2000  13.2          1.42\n 4 Africa      2007  13.6          1.46\n 5 Europe      1980  18.8          1\n 6 Europe      1990  25.3          1.35\n 7 Europe      2000  26.7          1.42\n 8 Europe      2007  26.3          1.40\n ...\n```", "```py\n> irrigation <- irrigation %>%\n+   group_by(region) %>%\n+   mutate(area_std_1980 = area/area[year == 1980],\n+          area_per_change = c(0, diff(area)/area[-length(area)] * 100))\n> irrigation\n# A tibble: 16 x 5\n# Groups:   region [4]\n   region      year  area area_std_1980 area_per_change\n   <chr>      <dbl> <dbl>         <dbl>           <dbl>\n 1 Africa      1980   9.3          1               0\n 2 Africa      1990  11            1.18           18.3\n 3 Africa      2000  13.2          1.42           20.0\n 4 Africa      2007  13.6          1.46            3.03\n 5 Europe      1980  18.8          1               0\n 6 Europe      1990  25.3          1.35           34.6\n 7 Europe      2000  26.7          1.42            5.53\n 8 Europe      2007  26.3          1.40           -1.50\n ...\n```", "```py\n> tapply(PlantGrowth$weight, PlantGrowth$group, mean)\n ctrl  trt1  trt2\n5.032 4.661 5.526\n> tapply(PlantGrowth$weight, PlantGrowth$group, sd)\n     ctrl      trt1      trt2\n0.5830914 0.7936757 0.4425733\n```", "```py\nlibrary(plyr)\n\nddply(PlantGrowth, \"group\", summarize,\n      avg = mean(weight))\n```", "```py\nlibrary(dplyr)\nPlantGrowth %>%\n  group_by(group) %>%\n  summarize(avg = mean(weight))\n```", "```py\n> aggregate(weight ~ group, PlantGrowth, mean)\n  group weight\n1  ctrl  5.032\n2  trt1  4.661\n3  trt2  5.526\n```"]