["```py\nIn [1]: import numpy as np\n```", "```py\nIn [2]: a = np.array([0, 1, 2])\n        b = np.array([5, 5, 5])\n        a + b\nOut[2]: array([5, 6, 7])\n```", "```py\nIn [3]: a + 5\nOut[3]: array([5, 6, 7])\n```", "```py\nIn [4]: M = np.ones((3, 3))\n        M\nOut[4]: array([[1., 1., 1.],\n               [1., 1., 1.],\n               [1., 1., 1.]])\n```", "```py\nIn [5]: M + a\nOut[5]: array([[1., 2., 3.],\n               [1., 2., 3.],\n               [1., 2., 3.]])\n```", "```py\nIn [6]: a = np.arange(3)\n        b = np.arange(3)[:, np.newaxis]\n\n        print(a)\n        print(b)\nOut[6]: [0 1 2]\n        [[0]\n         [1]\n         [2]]\n```", "```py\nIn [7]: a + b\nOut[7]: array([[0, 1, 2],\n               [1, 2, 3],\n               [2, 3, 4]])\n```", "```py\nIn [8]: M = np.ones((2, 3))\n        a = np.arange(3)\n```", "```py\nIn [9]: M + a\nOut[9]: array([[1., 2., 3.],\n               [1., 2., 3.]])\n```", "```py\nIn [10]: a = np.arange(3).reshape((3, 1))\n         b = np.arange(3)\n```", "```py\nIn [11]: a + b\nOut[11]: array([[0, 1, 2],\n                [1, 2, 3],\n                [2, 3, 4]])\n```", "```py\nIn [12]: M = np.ones((3, 2))\n         a = np.arange(3)\n```", "```py\nIn [13]: M + a\nValueError: operands could not be broadcast together with shapes (3,2) (3,)\n```", "```py\nIn [14]: a[:, np.newaxis].shape\nOut[14]: (3, 1)\n```", "```py\nIn [15]: M + a[:, np.newaxis]\nOut[15]: array([[1., 1.],\n                [2., 2.],\n                [3., 3.]])\n```", "```py\nIn [16]: np.logaddexp(M, a[:, np.newaxis])\nOut[16]: array([[1.31326169, 1.31326169],\n                [1.69314718, 1.69314718],\n                [2.31326169, 2.31326169]])\n```", "```py\nIn [17]: rng = np.random.default_rng(seed=1701)\n         X = rng.random((10, 3))\n```", "```py\nIn [18]: Xmean = X.mean(0)\n         Xmean\nOut[18]: array([0.38503638, 0.36991443, 0.63896043])\n```", "```py\nIn [19]: X_centered = X - Xmean\n```", "```py\nIn [20]: X_centered.mean(0)\nOut[20]: array([ 4.99600361e-17, -4.44089210e-17,  0.00000000e+00])\n```", "```py\nIn [21]: # x and y have 50 steps from 0 to 5\n         x = np.linspace(0, 5, 50)\n         y = np.linspace(0, 5, 50)[:, np.newaxis]\n\n         z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\n```", "```py\nIn [22]: %matplotlib inline\n         import matplotlib.pyplot as plt\n```", "```py\nIn [23]: plt.imshow(z, origin='lower', extent=[0, 5, 0, 5])\n         plt.colorbar();\n```"]