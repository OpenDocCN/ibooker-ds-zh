["```py\nIn [1]: %matplotlib inline\n        import matplotlib.pyplot as plt\n        plt.style.use('seaborn-whitegrid')\n        import numpy as np\n```", "```py\nIn [2]: x = np.linspace(0, 10, 30)\n        y = np.sin(x)\n\n        plt.plot(x, y, 'o', color='black');\n```", "```py\nIn [3]: rng = np.random.default_rng(0)\n        for marker in ['o', '.', ',', 'x', '+', 'v', '^', '<', '>', 's', 'd']:\n            plt.plot(rng.random(2), rng.random(2), marker, color='black',\n                     label=\"marker='{0}'\".format(marker))\n        plt.legend(numpoints=1, fontsize=13)\n        plt.xlim(0, 1.8);\n```", "```py\nIn [4]: plt.plot(x, y, '-ok');\n```", "```py\nIn [5]: plt.plot(x, y, '-p', color='gray',\n                 markersize=15, linewidth=4,\n                 markerfacecolor='white',\n                 markeredgecolor='gray',\n                 markeredgewidth=2)\n        plt.ylim(-1.2, 1.2);\n```", "```py\nIn [6]: plt.scatter(x, y, marker='o');\n```", "```py\nIn [7]: rng = np.random.default_rng(0)\n        x = rng.normal(size=100)\n        y = rng.normal(size=100)\n        colors = rng.random(100)\n        sizes = 1000 * rng.random(100)\n\n        plt.scatter(x, y, c=colors, s=sizes, alpha=0.3)\n        plt.colorbar();  # show color scale\n```", "```py\nIn [8]: from sklearn.datasets import load_iris\n        iris = load_iris()\n        features = iris.data.T\n\n        plt.scatter(features[0], features[1], alpha=0.4,\n                    s=100*features[3], c=iris.target, cmap='viridis')\n        plt.xlabel(iris.feature_names[0])\n        plt.ylabel(iris.feature_names[1]);\n```", "```py\nIn [1]: %matplotlib inline\n        import matplotlib.pyplot as plt\n        plt.style.use('seaborn-whitegrid')\n        import numpy as np\n```", "```py\nIn [2]: x = np.linspace(0, 10, 50)\n        dy = 0.8\n        y = np.sin(x) + dy * np.random.randn(50)\n\n        plt.errorbar(x, y, yerr=dy, fmt='.k');\n```", "```py\nIn [3]: plt.errorbar(x, y, yerr=dy, fmt='o', color='black',\n                     ecolor='lightgray', elinewidth=3, capsize=0);\n```", "```py\nIn [4]: from sklearn.gaussian_process import GaussianProcessRegressor\n\n        # define the model and draw some data\n        model = lambda x: x * np.sin(x)\n        xdata = np.array([1, 3, 5, 6, 8])\n        ydata = model(xdata)\n\n        # Compute the Gaussian process fit\n        gp = GaussianProcessRegressor()\n        gp.fit(xdata[:, np.newaxis], ydata)\n\n        xfit = np.linspace(0, 10, 1000)\n        yfit, dyfit = gp.predict(xfit[:, np.newaxis], return_std=True)\n```", "```py\nIn [5]: # Visualize the result\n        plt.plot(xdata, ydata, 'or')\n        plt.plot(xfit, yfit, '-', color='gray')\n        plt.fill_between(xfit, yfit - dyfit, yfit + dyfit,\n                         color='gray', alpha=0.2)\n        plt.xlim(0, 10);\n```"]