["```py\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n\n<style>font-family: sans-serif;</style>\n\n<body>\n  <h2 id=\"title\">title holder</h2>\n</body>\n```", "```py\n.fancy-title {\n    font-size: 24px;\n    font-weight: bold;\n}\n```", "```py\nd3.select('#title')\n  .classed('fancy-title', true)\n  .text('My Bar Chart');\n```", "```py\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<link rel=\"stylesheet\" href=\"style.css\" />\n\n<body>\n  <div id='nobel-bar'></div>\n\n  <script\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.3.1/d3.min.js\">\n  </script>\n  <script type=\"text/javascript\" src=\"script.js\"></script> ![1](assets/1.png)\n</body>\n```", "```py\n#nobel-bar {\n  width: 600px;\n  height: 400px;\n}\n\n.bar {\n    fill: blue; /* blue bars for the chapter */\n}\n```", "```py\n    var chartHolder = d3.select(\"#nobel-bar\");\n\n    var margin = {top:20, right:20, bottom:30, left:40};\n\n    var boundingRect = chartHolder.node()\n      .getBoundingClientRect(); ![1](assets/1.png)\n    var width = boundingRect.width - margin.left - margin.right,\n    height = boundingRect.height - margin.top - margin.bottom;\n```", "```py\nd3.select('#nobel-bar').append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\").classed('chart', true)\n    .attr(\"transform\", \"translate(\" + margin.left + \",\"\n                                  + margin.top + \")\");\n```", "```py\n...\n    <div id=\"nobel-bar\">\n      <svg width=\"600\" height=\"400\">\n        <g class=\"chart\" transform=\"translate(40, 20)\"></g>\n      </svg>\n    </div>\n...\n```", "```py\nvar nobelData = [\n    {key:'United States', value:336},\n    {key:'United Kingdom', value:98},\n    {key:'Germany', value:79},\n    {key:'France', value:60},\n    {key:'Sweden', value:29},\n    {key:'Switzerland', value:23},\n    {key:'Japan', value:21},\n    {key:'Russia', value:19},\n    {key:'Netherlands', value:17},\n    {key:'Austria', value:14}\n];\n```", "```py\nvar buildCrudeBarchart = function() {\n\n    var chartHolder = d3.select(\"#nobel-bar\");\n\n    var margin = {top:20, right:20, bottom:30, left:40};\n    var boundingRect = chartHolder.node().getBoundingClientRect();\n    var width = boundingRect.width - margin.left - margin.right,\n    height = boundingRect.height - margin.top - margin.bottom;\n    var barWidth = width/nobelData.length;\n\n    var svg = d3.select('#nobel-bar').append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\").classed('chart', true)\n        .attr(\"transform\", \"translate(\" + margin.left + \",\"\n        + margin.top + \")\");\n\n    nobelData.forEach(function(d, i) { ![1](assets/1.png)\n        svg.append('rect').classed('bar', true)\n            .attr('height', d.value)\n            .attr('width', barWidth)\n            .attr('y', height - d.value)\n            .attr('x', i * (barWidth));\n    });\n};\n```", "```py\nvar scale = d3.scaleLinear(); // create a linear scale scale.domain([0, 1]).range([0, 100]); ![1](assets/1.png)\nscale(0.5) // returns 50 ![2](assets/2.png)\n```", "```py\nlet maxWinners = d3.max(nobelData, function(d){\n                   return +d.value; ![1](assets/1.png)\n                 });\n\nlet yScale = d3.scaleLinear()\n                 .domain([0, maxWinners]) /* [0, 336] */\n                 .range([height, 0]);\n```", "```py\nvar numInt = d3.interpolate(400, 0);\n\nnumInt(0); //   400 ![1](assets/1.png)\nnumInt(0.5); // 200 numInt(1); //   0\n```", "```py\nvar color = d3.scaleLinear()\n    .domain([-1, 0, 1])\n    .range([\"red\", \"green\", \"blue\"]);\n\ncolor(0) // \"#008000\" green's hex code\ncolor(0.5) // \"004080\" slate blue\n```", "```py\nvar oScale = d3.scaleOrdinal()\n               .domain(['a', 'b', 'c', 'd', 'e'])\n               .range([1, 2, 3, 4, 5]);\n\noScale('c'); // 3\n```", "```py\nvar oScale = d3.scaleBand()\n               .domain([1, 2, 3, 4, 5])\n               .rangeRound([0, 400]);\n\noScale(3) // 160\noScale(5) // 320\n```", "```py\nvar oScale = d3.scaleBand()\n               .domain([1, 2]); ![1](assets/1.png)\n\noScale.rangeRound([0, 100]); ![2](assets/2.png)\noScale(2); // 50 oScale.bandwidth(); // 50 \n\noScale.rangeRound([0, 100]);\noScale.padding(0.1) // pBpBp ![3](assets/3.png)\noScale(1); // 5 oScale(2); // 52 oScale.bandwidth(); // 42, the padded bar width\n```", "```py\nlet nobelData = [\n  { key: \"United States\", value: 336 },\n  { key: \"United Kingdom\", value: 98 },\n  { key: \"Germany\", value: 79 },\n  { key: \"France\", value: 60 },\n  { key: \"Sweden\", value: 29 },\n  { key: \"Switzerland\", value: 23 },\n  { key: \"Japan\", value: 21 }\n];\n```", "```py\n<div id=\"nobel-bars\">\n  <svg width=\"600\" height=\"400\">\n    <g class=\"bars\" transform=\"translate(40, 20)\"></g>\n  </svg>\n</div>\n\n<style>\n.bar {\n  fill: blue;\n}\n</style>\n```", "```py\nfunction updateBars(data) {\n  // select and store the SVG bars group\n  let svg = d3.select(\"#nobel-bars g\");\n  let bars = svg.selectAll(\".bar\").data(data);\n\n  bars\n    .join(\"rect\") ![1](assets/1.png)\n    .classed(\"bar\", true) ![2](assets/2.png)\n    .attr(\"height\", 10)\n    .attr(\"width\", d => d.value)\n    .attr(\"y\", function (d, i) {\n      return i * 12;\n    });\n}\n```", "```py\nupdateBars(nobelData.slice(0, 4));\n```", "```py\nupdateBars(nobelData.slice(0, 2));\n```", "```py\nupdateBars(nobelData.slice(0, 6));\n```", "```py\nlet chartHolder = d3.select('#nobel-bar')\nlet margin = { top: 20, right: 20, bottom: 35, left: 40 }\nlet boundingRect = chartHolder.node().getBoundingClientRect()\nlet width = boundingRect.width - margin.left - margin.right,\nheight = boundingRect.height - margin.top - margin.bottom\n// some left-padding for the y-axis label\nvar xPaddingLeft = 20\n```", "```py\nlet xScale = d3.scaleBand()\n  .range([xPaddingLeft, width]) // left-padding for y-label\n  .padding(0.1)\n\nlet yScale = d3.scaleLinear().range([height, 0])\n```", "```py\nvar svg = chartHolder\n    .append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n```", "```py\n[ {key: 'United States', value: 336, code: 'USA'}\n  {key: 'United Kingdom', value: 98, code: 'GBR'}\n  {key: 'Germany', value: 79, code: 'DEU'} ... ]\n```", "```py\nlet updateBarChart = function (data) {\n  // filter out any countries with zero prizes by value\n  data = data.filter(function (d) {\n    return d.value > 0\n  })\n  // change the scale domains to reflect the newly filtered data\n  // this produces an array of country codes: ['USA', 'DEU', 'FRA' ...]\n  xScale.domain(\n    data.map(d => d.code)\n  )\n  // we want to scale the highest number of prizes won, e.g., USA: 336\n  yScale.domain([\n    0,\n    d3.max(data, d => d.value)\n  ])\n// ...\n}\n```", "```py\nlet bars = svg\n     .selectAll('.bar')\n     .data(data)\n     .join(\n       (enter) => { ![1](assets/1.png)\n         return enter\n           .append('rect')\n           .attr('class', 'bar')\n           .attr('x', xPaddingLeft)\n       }\n     )\n     .attr('x', d => xScale(d.code))\n     .attr('width', xScale.bandwidth())\n     .attr('y', d => yScale(d.value))\n     .attr('height', d => height - yScale(d.value))\n```", "```py\nlet xAxis = d3.axisBottom().scale(xScale)\n\nlet yAxis = d3\n  .axisLeft()\n  .scale(yScale)\n  .ticks(10)\n  .tickFormat(function (d) {\n    if (nbviz.valuePerCapita) { ![1](assets/1.png)\n      return d.toExponential()\n    }\n    return d\n  })\n```", "```py\n/* style.css */\n.axis { font: 10px sans-serif; }\n.axis path, .axis line {\n    fill: none;\n    stroke: #000;\n    shape-rendering: crispEdges;\n}\n```", "```py\nsvg.append(\"g\")\n    .attr(\"class\", \"x axis\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\"); ![1](assets/1.png)\n\nsvg.append(\"g\")\n        .attr(\"class\", \"y axis\");\n```", "```py\nlet updateBarChart = function(data) {\n    // A. Update scale domains with new data\n    xScale.domain( data.map(d => d.code) );\n    yScale.domain([0, d3.max(data, d => +d.value)])\n    // B. Use the axes generators with the new scale domains\n    svg.select('.x.axis')\n        .call(xAxis) ![1](assets/1.png)\n        .selectAll(\"text\") ![2](assets/2.png)\n        .style(\"text-anchor\", \"end\")\n        .attr(\"dx\", \"-.8em\")\n        .attr(\"dy\", \".15em\")\n        .attr(\"transform\", \"rotate(-65)\");\n\n    svg.select('.y.axis')\n        .call(yAxis);\n    // ... }\n```", "```py\nlet xPaddingLeft = 20 ![1](assets/1.png)\n\nlet xScale = d3.scaleBand()\n  .range([xPaddingLeft, width])\n  .padding(0.1)\n//... svg.append(\"g\")\n    .attr(\"class\", \"y axis\")\n    .append(\"text\")\n    .attr('id', 'y-axis-label')\n    .attr(\"transform\", \"rotate(-90)\") ![2](assets/2.png)\n    .attr(\"y\", 6)\n    .attr(\"dy\", \".71em\") ![3](assets/3.png)\n    .style(\"text-anchor\", \"end\")\n    .text('Number of winners');\n```", "```py\n// nbviz_core.mjs nbviz.TRANS_DURATION = 2000 // time in milliseconds // nbviz_bar.mjs import nbviz from ./nbviz_core.mjs\n//... svg.select('.x.axis')\n    .transition().duration(nbviz.TRANS_DURATION) ![1](assets/1.png)\n    .call(xAxis) //... //... svg.select('.y.axis')\n    .transition().duration(nbviz.TRANS_DURATION)\n    .call(yAxis);\n//... var bars = svg.selectAll(\".bar\")\n    .data(data, d => d.code) ![2](assets/2.png)\n//... let bars = svg.selectAll('.bar')\n  .data(data, (d) => d.code)\n  .join(\n   // ...\n  )\n  .classed('active', function (d) {\n    return d.key === nbviz.activeCountry\n  })\n  .transition()\n  .duration(nbviz.TRANS_DURATION)\n  .attr(\"x\", (d) => xScale(d.code)) ![3](assets/3.png)\n  .attr(\"width\", xScale.bandwidth())\n  .attr(\"y\", (d) => yScale(d.value))\n  .attr(\"height\", (d) => height - yScale(d.value));\n```", "```py\nnbviz.callbacks.push(() => { ![1](assets/1.png)\n  let data = nbviz.getCountryData()\n  updateBarChart(data)\n})\n```"]