["```py\ncross = df_w.merge(df_t, how='cross', suffixes=('_w', '_t'))\n```", "```py\ncross['Fmatch']= (cross['Firstname_w']==cross['Firstname_t'])\ncross['Lmatch']= (cross['Lastname_w']==cross['Lastname_t'])\ncross['Cmatch']= (cross['Constituency_w']==cross['Constituency_t'])\n```", "```py\ncross['Tmatch'] =\n    sum([cross['Fmatch'],cross['Lmatch'],cross['Cmatch']]) \n```", "```py\nmatch = cross[cross['Cmatch'] & (cross['Fmatch'] |\n   cross['Lmatch'])]\n```", "```py\nnotmatch = cross[(~cross['Cmatch']) | (~cross['Fmatch'] &\n    ~cross['Lmatch'])]\n```", "```py\nfirst_match = match[match['Fmatch']]\n\nlen(first_match)\n632\n```", "```py\nit1_match = cross[cross['Tmatch']>=2]\nit1_notmatch = cross[cross['Tmatch']<2]\n\nlen(it1_match)\n637\n```", "```py\nit1_match[~it1_match['Fmatch'] | ~it1_match['Lmatch']]\n   [['Constituency_w','Firstname_w','Firstname_t',\n      'Lastname_w','Lastname_t']]\n```", "```py\nmfi1 = len(it1_match[it1_match['Fmatch']])/len(it1_match)\nmli1 = len(it1_match[it1_match['Lmatch']])/len(it1_match)\nmci1 = len(it1_match[it1_match['Cmatch']])/len(it1_match)\n\nufi1 = len(it1_notmatch[it1_notmatch['Fmatch']])/len(it1_notmatch)\nuli1 = len(it1_notmatch[it1_notmatch['Lmatch']])/len(it1_notmatch)\nuci1 = len(it1_notmatch[it1_notmatch['Cmatch']])/len(it1_notmatch)\n```", "```py\ndef match_prb(Fmatch,Lmatch,Cmatch,mf1,ml1,mc1,uf1,ul1,uc1, lmbda):\n    if (Fmatch==1):\n        mf = mf1\n        uf = uf1\n    else:\n        mf = (1-mf1)\n        uf = (1-uf1)\n    if (Lmatch==1):\n        ml = ml1\n        ul = ul1\n    else:\n        ml = (1-ml1)\n        ul = (1-ul1)\n    if (Cmatch==1):\n        mc = mc1\n        uc = uc1\n    else:\n        mc = (1-mc1)\n        uc = (1-uc1)\n    prob = (lmbda * ml * mf * mc) / (lmbda * ml * mf * mc +\n           (1-lmbda) * ul * uf * uc)\n    return(prob)\n```", "```py\ncross['prob'] = cross.apply(lambda x: match_prb(\n      x.Fmatch,x.Lmatch,x.Cmatch,\n      mfi1,mli1,mci1,\n      ufi1,uli1,uci1,\n      lmbda), axis=1)\n```", "```py\nit2_match = cross[cross['prob']>0.99]\nit2_notmatch = cross[cross['prob']<=0.99]\n\nlen(it2_match)\n633\n```", "```py\nit2_notmatch[it2_notmatch['prob']>0.9]\n   [['Constituency_w', 'Lastname_w','Lastname_t','prob']]\n```", "```py\nimport splink\n```", "```py\ndf_w['unique_id'] = df_w.index\ndf_t['unique_id'] = df_t.index\n```", "```py\ndf_w['Flink'] = None\ndf_t['Notes'] = None\n\ndf_w = df_w[['Firstname','Lastname','Constituency','Flink','Notes',\n   'unique_id']]\ndf_t = df_t[['Firstname','Lastname','Constituency','Flink','Notes',\n   'unique_id']]\n```", "```py\nfrom splink.duckdb.linker import DuckDBLinker\nfrom splink.duckdb import comparison_library as cl\n\nsettings = {\n   \"link_type\": \"link_only\", \"comparisons\": [\n       cl.exact_match(\"Firstname\"),\n       cl.exact_match(\"Lastname\"),\n       cl.exact_match(\"Constituency\"),\n   ],\n}\nlinker = DuckDBLinker([df_w, df_t], settings)\n```", "```py\nlinker.profile_columns(['Firstname','Lastname','Constituency'])\n```", "```py\nem_session = linker.estimate_parameters_using_expectation_maximisation(\n   'True',\n   fix_u_probabilities=False,\n   fix_probability_two_random_records_match=False,\n   populate_probability_two_random_records_match_from_trained_values\n     =True)\n```", "```py\nem_session.match_weights_interactive_history_chart()\n```", "```py\nlinker.save_settings_to_json(\"Chapter4_Splink_Settings.json\",\n   overwrite=True)\n```", "```py\n{'link_type': 'link_only',\n'comparisons': [{'output_column_name': 'Firstname',\n   'comparison_levels': [{'sql_condition': '\"Firstname_l\" IS NULL OR\n       \"Firstname_r\" IS NULL',\n     'label_for_charts': 'Null',\n     'is_null_level': True},\n    {'sql_condition': '\"Firstname_l\" = \"Firstname_r\"',\n     'label_for_charts': 'Exact match',\n     'm_probability': 0.992118804074688,\n     'u_probability': 0.004864290128404288},\n    {'sql_condition': 'ELSE',\n     'label_for_charts': 'All other comparisons',\n     'm_probability': 0.007881195925311958,\n     'u_probability': 0.9951357098715956}],\n   'comparison_description': 'Exact match vs. anything else'},\n  {'output_column_name': 'Lastname',\n   'comparison_levels': [{'sql_condition': '\"Lastname_l\" IS NULL OR\n       \"Lastname_r\" IS NULL',\n     'label_for_charts': 'Null',\n     'is_null_level': True},\n    {'sql_condition': '\"Lastname_l\" = \"Lastname_r\"',\n     'label_for_charts': 'Exact match',\n     'm_probability': 0.9937726043638647,\n     'u_probability': 0.00082730840955421},\n    {'sql_condition': 'ELSE',\n     'label_for_charts': 'All other comparisons',\n     'm_probability': 0.006227395636135347,\n     'u_probability': 0.9991726915904457}],\n   'comparison_description': 'Exact match vs. anything else'},\n  {'output_column_name': 'Constituency',\n   'comparison_levels': [{'sql_condition': '\"Constituency_l\" IS NULL OR\n       \"Constituency_r\" IS NULL',\n     'label_for_charts': 'Null',\n     'is_null_level': True},\n    {'sql_condition': '\"Constituency_l\" = \"Constituency_r\"',\n     'label_for_charts': 'Exact match',\n     'm_probability': 0.9999999403661186,\n     'u_probability': 3.092071473132138e-05},\n    {'sql_condition': 'ELSE',\n     'label_for_charts': 'All other comparisons',\n     'm_probability': 5.963388147277392e-08,\n     'u_probability': 0.9999690792852688}],\n   'comparison_description': 'Exact match vs. anything else'}],\n'retain_intermediate_calculation_columns': True,\n'retain_matching_columns': True,\n'sql_dialect': 'duckdb',\n'linker_uid': 'adm20und',\n'probability_two_random_records_match': 0.0015075875293170335}\n```", "```py\npres = linker.predict(threshold_match_probability =\n   0.99).as_pandas_dataframe()\n\nlen(pres)\n633\n```", "```py\nm_outer = match.merge(\n   pres,\n   left_on=['Constituency_t'],\n   right_on=['Constituency_l'],\n   how='outer')\n\nm_outer[m_outer['Constituency_t']!=m_outer['Constituency_l']]\n   [['Constituency_w','Lastname_w','Lastname_t']]\n```"]