- en: 'Chapter 12\. Structured Data: NumPy’s Structured Arrays'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。结构化数据：NumPy的结构化数组
- en: While often our data can be well represented by a homogeneous array of values,
    sometimes this is not the case. This chapter demonstrates the use of NumPy’s *structured
    arrays* and *record arrays*, which provide efficient storage for compound, heterogeneous
    data. While the patterns shown here are useful for simple operations, scenarios
    like this often lend themselves to the use of Pandas `DataFrame`s, which we’ll
    explore in [Part III](part03.xhtml#section-0300-introduction-to-pandas).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常我们的数据可以用值的同类数组很好地表示，但有时情况并非如此。本章演示了NumPy的*结构化数组*和*记录数组*的使用，它们为复合异构数据提供了高效的存储。虽然这里展示的模式对于简单操作很有用，但像这样的情景通常适合使用Pandas的`DataFrame`，我们将在[第三部分](part03.xhtml#section-0300-introduction-to-pandas)中探讨。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Imagine that we have several categories of data on a number of people (say,
    name, age, and weight), and we’d like to store these values for use in a Python
    program. It would be possible to store these in three separate arrays:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有几类数据关于一些人（比如，姓名、年龄和体重），我们想要存储这些值以供在Python程序中使用。可以将它们分别存储在三个单独的数组中：
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But this is a bit clumsy. There’s nothing here that tells us that the three
    arrays are related; NumPy’s structured arrays allow us to do this more naturally
    by using a single structure to store all of this data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但这有点笨拙。这里没有告诉我们这三个数组是相关的；NumPy的结构化数组允许我们通过使用单一结构更自然地存储所有这些数据。
- en: 'Recall that previously we created a simple array using an expression like this:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾之前我们用这样的表达式创建了一个简单的数组：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can similarly create a structured array using a compound data type specification:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以类似地使用复合数据类型规范来创建结构化数组：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here `'U10'` translates to “Unicode string of maximum length 10,” `'i4'` translates
    to “4-byte (i.e., 32-bit) integer,” and `'f8'` translates to “8-byte (i.e., 64-bit)
    float.” We’ll discuss other options for these type codes in the following section.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`'U10'`被翻译为“最大长度为10的Unicode字符串”，`'i4'`被翻译为“4字节（即32位）整数”，而`'f8'`被翻译为“8字节（即64位）浮点数”。我们将在下一节讨论这些类型代码的其他选项。
- en: 'Now that we’ve created an empty container array, we can fill the array with
    our lists of values:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建了一个空的容器数组，我们可以用我们的值列表填充这个数组：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we had hoped, the data is now conveniently arranged in one structured array.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所希望的那样，数据现在方便地排列在一个结构化数组中。
- en: 'The handy thing with structured arrays is that we can now refer to values either
    by index or by name:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组的方便之处在于，我们现在既可以按索引也可以按名称引用值：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using Boolean masking, we can even do some more sophisticated operations, such
    as filtering on age:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布尔遮罩，我们甚至可以进行一些更复杂的操作，例如按年龄进行过滤：
- en: '[PRE8]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you’d like to do any operations that are any more complicated than these,
    you should probably consider the Pandas package, covered in [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib).
    As you’ll see, Pandas provides a `DataFrame` object, which is a structure built
    on NumPy arrays that offers a variety of useful data manipulation functionality
    similar to what you’ve seen here, as well as much, much more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要进行比这些更复杂的操作，您可能应该考虑Pandas包，详细介绍请参阅[第四部分](part04.xhtml#section-0400-introduction-to-matplotlib)。正如您将看到的，Pandas提供了一个`DataFrame`对象，它是建立在NumPy数组上的结构，提供了许多有用的数据操作功能，类似于您在这里看到的，以及更多更多。
- en: Exploring Structured Array Creation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索结构化数组的创建
- en: 'Structured array data types can be specified in a number of ways. Earlier,
    we saw the dictionary method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化数组数据类型可以用多种方式指定。早些时候，我们看到了字典方法：
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For clarity, numerical types can be specified using Python types or NumPy `dtype`s
    instead:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，数值类型可以使用Python类型或NumPy `dtype`来指定：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A compound type can also be specified as a list of tuples:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 复合类型也可以作为元组列表来指定：
- en: '[PRE11]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the names of the types do not matter to you, you can specify the types alone
    in a comma-separated string:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类型名称对您不重要，您可以单独在逗号分隔的字符串中指定这些类型：
- en: '[PRE12]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The shortened string format codes may not be immediately intuitive, but they
    are built on simple principles. The first (optional) character `<` or `>`, means
    “little endian” or “big endian,” respectively, and specifies the ordering convention
    for significant bits. The next character specifies the type of data: characters,
    bytes, ints, floating points, and so on (see [Table 12-1](#table-12-1)). The last
    character or characters represent the size of the object in bytes.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 缩短的字符串格式代码可能并不直观，但它们基于简单的原则构建。第一个（可选）字符 `<` 或 `>`，表示“小端”或“大端”，分别指定了显著位的排序约定。接下来的字符指定数据类型：字符、字节、整数、浮点数等（参见[表 12-1](#table-12-1)）。最后一个字符或多个字符表示对象的字节大小。
- en: Table 12-1\. NumPy data types
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1\. NumPy 数据类型
- en: '| Character | Description | Example |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `''b''` | Byte | `np.dtype(''b'')` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `''b''` | 字节 | `np.dtype(''b'')` |'
- en: '| `''i''` | Signed integer | `np.dtype(''i4'') == np.int32` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `''i''` | 有符号整数 | `np.dtype(''i4'') == np.int32` |'
- en: '| `''u''` | Unsigned integer | `np.dtype(''u1'') == np.uint8` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `''u''` | 无符号整数 | `np.dtype(''u1'') == np.uint8` |'
- en: '| `''f''` | Floating point | `np.dtype(''f8'') == np.int64` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `''f''` | 浮点数 | `np.dtype(''f8'') == np.int64` |'
- en: '| `''c''` | Complex floating point | `np.dtype(''c16'') == np.complex128` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `''c''` | 复数浮点数 | `np.dtype(''c16'') == np.complex128` |'
- en: '| `''S''`, `''a''` | String | `np.dtype(''S5'')` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `''S''`, `''a''` | 字符串 | `np.dtype(''S5'')` |'
- en: '| `''U''` | Unicode string | `np.dtype(''U'') == np.str_` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `''U''` | Unicode 字符串 | `np.dtype(''U'') == np.str_` |'
- en: '| `''V''` | Raw data (void) | `np.dtype(''V'') == np.void` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `''V''` | 原始数据（空） | `np.dtype(''V'') == np.void` |'
- en: More Advanced Compound Types
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更高级的复合类型
- en: 'It is possible to define even more advanced compound types. For example, you
    can create a type where each element contains an array or matrix of values. Here,
    we’ll create a data type with a `mat` component consisting of a <math alttext="3
    times 3"><mrow><mn>3</mn> <mo>×</mo> <mn>3</mn></mrow></math> floating-point matrix:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义更高级的复合类型。例如，您可以创建每个元素包含值数组或矩阵的类型。在这里，我们将创建一个数据类型，其 `mat` 组件由一个 <math alttext="3
    times 3"><mrow><mn>3</mn> <mo>×</mo> <mn>3</mn></mrow></math> 浮点矩阵组成：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now each element in the `X` array consists of an `id` and a <math alttext="3
    times 3"><mrow><mn>3</mn> <mo>×</mo> <mn>3</mn></mrow></math> matrix. Why would
    you use this rather than a simple multidimensional array, or perhaps a Python
    dictionary? One reason is that this NumPy `dtype` directly maps onto a C structure
    definition, so the buffer containing the array content can be accessed directly
    within an appropriately written C program. If you find yourself writing a Python
    interface to a legacy C or Fortran library that manipulates structured data, structured
    arrays can provide a powerful interface.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `X` 数组中的每个元素包含一个 `id` 和一个 <math alttext="3 times 3"><mrow><mn>3</mn> <mo>×</mo>
    <mn>3</mn></mrow></math> 矩阵。为什么您会使用这个而不是简单的多维数组，或者可能是 Python 字典？一个原因是这个 NumPy
    `dtype` 直接映射到 C 结构定义，因此包含数组内容的缓冲区可以在适当编写的 C 程序中直接访问。如果您发现自己编写一个 Python 接口来操作结构化数据的传统
    C 或 Fortran 库，结构化数组可以提供一个强大的接口。
- en: 'Record Arrays: Structured Arrays with a Twist'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录数组：带有变化的结构化数组
- en: 'NumPy also provides record arrays (instances of the `np.recarray` class), which
    are almost identical to the structured arrays just described, but with one additional
    feature: fields can be accessed as attributes rather than as dictionary keys.
    Recall that we previously accessed the ages in our sample dataset by writing:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 还提供了记录数组（`np.recarray` 类的实例），几乎与上述结构化数组相同，但有一个附加功能：可以将字段作为属性而不是字典键访问。回顾我们之前通过编写来访问样本数据集中的年龄：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we view our data as a record array instead, we can access this with slightly
    fewer keystrokes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将数据视为记录数组，我们可以用稍少的按键操作访问它：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The downside is that for record arrays, there is some extra overhead involved
    in accessing the fields, even when using the same syntax:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点在于，对于记录数组，即使使用相同的语法，访问字段时也涉及一些额外的开销：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Whether the more convenient notation is worth the (slight) overhead will depend
    on your own application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是否更便利的表示形式值得（轻微的）开销将取决于您自己的应用程序。
- en: On to Pandas
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向 Pandas
- en: 'This chapter on structured and record arrays is purposely located at the end
    of this part of the book, because it leads so well into the next package we will
    cover: Pandas. Structured arrays can come in handy in certain situations, like
    when you’re using NumPy arrays to map onto binary data formats in C, Fortran,
    or another language. But for day-to-day use of structured data, the Pandas package
    is a much better choice; we’ll explore it in depth in the chapters that follow.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节关于结构化数组和记录数组被特意放置在本书的这一部分的末尾，因为它很好地过渡到我们将要介绍的下一个包：Pandas。结构化数组在某些情况下非常有用，比如当你使用
    NumPy 数组来映射到 C、Fortran 或其他语言的二进制数据格式时。但对于日常使用结构化数据，Pandas 包是一个更好的选择；我们将在接下来的章节深入探讨它。
