["```py\nimport pandas as pd\npath = \"https://github.com/causal-methods/Data/raw/master/\" \nsheet_name = \"Data Chess Tournaments\"\nchess = pd.read_excel(path + \"Chess.xls\", sheet_name)\nchess \n```", "```py\nchess['Title1'].value_counts() \n```", "```py\n0      130\nIM      29\nGM      26\nFM      15\nWGM      6\nWIM      3\nWFM      1\nCM       1\nName: Title1, dtype: int64 \n```", "```py\ndictionary = {    'Title1':\n               {    0: \"Other\",\n                'WGM': \"Other\", \n                'WIM': \"Other\", \n                'WFM': \"Other\",\n                 'CM': \"Other\" }}\n\nchess.replace(dictionary, inplace=True) \n```", "```py\nchess['Title1'].value_counts() \n```", "```py\nOther    141\nIM        29\nGM        26\nFM        15\nName: Title1, dtype: int64 \n```", "```py\ntitle_rating1 = chess.filter([\"Title1\", \"ELORating1\"])\ntitle_rating1 \n```", "```py\n# Round 2 decimals\npd.set_option('precision', 2)\n\nimport numpy as np\ntitle_rating1.groupby('Title1').agg(np.mean) \n```", "```py\ngrandmasters = chess[chess['Title1'] == \"GM\"]\ngrandmasters \n```", "```py\ngrandmasters.groupby('EndNode').size() \n```", "```py\nEndNode\n1    26\ndtype: int64 \n```", "```py\ninternational_master = chess[chess['Title1'] == \"IM\"]\n\n# Return only 4 observations\ninternational_master.head(4) \n```", "```py\nnode_IM = international_master.groupby('EndNode').size()\nnode_IM \n```", "```py\nEndNode\n1    22\n2     5\n3     2\ndtype: int64 \n```", "```py\nlength_IM = len(international_master)\nprop_IM = node_IM / length_IM\nprop_IM \n```", "```py\nEndNode\n1    0.76\n2    0.17\n3    0.07\ndtype: float64 \n```", "```py\nfederation_master = chess[chess['Title1'] == \"FM\"]\n\nnode_FM = federation_master.groupby('EndNode').size()\nlength_FM = len(federation_master)\n\nprop_FM = node_FM / length_FM\nprop_FM \n```", "```py\nEndNode\n1    0.73\n2    0.20\n3    0.07\ndtype: float64 \n```", "```py\nimport plotly.graph_objects as go\nnode = ['Node 1', 'Node 2', 'Node 3']\n\nfig = go.Figure(data=[\n    go.Bar(name='Grandmasters', x=node, y=[1,0,0]),\n    go.Bar(name='International Masters', x=node, y=prop_IM),\n    go.Bar(name='Federation Masters', x=node, y=prop_FM) ])\n\nfig.update_layout(barmode='group',\n  title_text = 'Share of Chess Players that Ended Centipede Game at Each Node',\n  font=dict(size=21) )\n\nfig.show() \n```", "```py\nfrom statsmodels.stats.proportion import proportions_ztest\n\n#  I inserted manually the data from Grandmasters to \n# ilustrate the input format\ncount = np.array([ 26, node_IM[1] ]) # number of stops\nnobs = np.array([ 26, length_IM ])   # sample size\n\nproportions_ztest(count, nobs) \n```", "```py\nC:\\Anaconda\\envs\\textbook\\lib\\site-packages\\statsmodels\\tools\\_testing.py:19: FutureWarning:\n\npandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. \n```", "```py\n(2.68162114289528, 0.00732663816543149) \n```", "```py\ncount = np.array([ node_IM[1], node_FM[1] ])\nnobs = np.array([ length_IM, length_FM ])\n\nproportions_ztest(count, nobs) \n```", "```py\n(0.1836204648065827, 0.8543112075010346) \n```"]