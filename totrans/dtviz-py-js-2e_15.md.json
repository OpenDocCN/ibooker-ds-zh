["```py\n[{\n 'category': 'Physiology or Medicine',\n 'date_of_birth': '8 October 1927',\n 'date_of_death': '24 March 2002',\n 'gender': 'male',\n 'link': 'http://en.wikipedia.org/wiki/C%C3%A9sar_Milstein',\n 'name': 'César Milstein'\n 'country': 'Argentina',\n 'place_of_birth': 'Bahía Blanca,  Argentina',\n 'place_of_death': 'Cambridge , England',\n 'year': 1984,\n 'born_in': NaN\n },\n ...\n ]\n```", "```py\n$ jupyter notebook\n```", "```py\n%matplotlib inline\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\nimport matplotlib\nimport seaborn as sns\n```", "```py\nmatplotlib.style.use('seaborn') ![1](assets/1.png)\n\nplt.rcParams['figure.figsize'] = (8, 4) ![2](assets/2.png)\nplt.rcParams['font.size'] = '14'\n```", "```py\ndf = pd.read_json(open('data/nobel_winners_cleaned.json'))\n```", "```py\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 858 entries, 0 to 857\nData columns (total 13 columns):\n #   Column          Non-Null Count  Dtype\n---  ------          --------------  -----\n 0   category        858 non-null    object\n 1   country         858 non-null    object\n 2   date_of_birth   858 non-null    object\n 3   date_of_death   559 non-null    object\n 4   gender          858 non-null    object\n 5   link            858 non-null    object\n 6   name            858 non-null    object\n 7   place_of_birth  831 non-null    object\n 8   place_of_death  524 non-null    object\n 9   text            858 non-null    object\n 10  year            858 non-null    int64\n 11  award_age       858 non-null    int64\n 12  born_in         102 non-null    object\n 13  bio_image       770 non-null    object\n 14  mini_bio        857 non-null    object\ndtypes: int64(2), object(13)\nmemory usage: 100.7+ KB\n```", "```py\ndf.date_of_birth = pd.to_datetime(df.date_of_birth)\ndf.date_of_death = pd.to_datetime(df.date_of_death)\n```", "```py\ndf.info()\n\n...\ndate_of_birth     858 non-null datetime64[ns, UTC] ![1](assets/1.png)\ndate_of_death     559 non-null datetime64[ns, UTC]\n...\n```", "```py\nby_gender = df.groupby('gender')\nby_gender.size().plot(kind='bar')\n```", "```py\nby_gender.size()\nOut:\ngender\nfemale     47\nmale      811\ndtype: int64\n```", "```py\nby_cat_gen = df.groupby(['category','gender'])\n\nby_cat_gen.get_group(('Physics', 'female'))[['name', 'year']] ![1](assets/1.png)\n```", "```py\nOut:\n                       name  year\n269    Maria Goeppert-Mayer  1963\n612  Marie Skłodowska-Curie  1903\n```", "```py\nby_cat_gen.size()\n```", "```py\nOut:\ncategory                gender\nChemistry               female      4\n                        male      167\nEconomics               female      1\n                        male       74\n...\nPhysiology or Medicine  female     11\n                        male      191\ndtype: int64\n```", "```py\nby_cat_gen.size().plot(kind='barh')\n```", "```py\nby_cat_gen.size().unstack().plot(kind='barh')\n```", "```py\ncat_gen_sz = by_cat_gen.size().unstack()\ncat_gen_sz.head()\n```", "```py\ngender      female  male\ncategory\nChemistry        4   167\nEconomics        1    74\nLiterature      13    93\nPeace           16    87\nPhysics          2   199\n```", "```py\ncat_gen_sz['ratio'] = cat_gen_sz.female /\\ ![1](assets/1.png)\n                     (cat_gen_sz.female + cat_gen_sz.male)\ncat_gen_sz.head()\n```", "```py\nender      female  male     ratio\ncategory\nChemistry        4   167  0.023392\nEconomics        1    74  0.013333\nLiterature      13    93  0.122642\nPeace           16    87  0.155340\nPhysics          2   199  0.009950\n```", "```py\ncat_gen_sz['female_pc'] = cat_gen_sz['ratio'] * 100\n```", "```py\ncat_gen_sz = cat_gen_sz.sort_values(by='female_pc', ascending=True)\nax = cat_gen_sz[['female_pc']].plot(kind='barh')\nax.set_xlim([0, 100])\nax.set_xlabel('% of female winners')\n```", "```py\ndf[(df.category == 'Physics') & (df.gender == 'female')]\\\n    [['name', 'country','year']]\n```", "```py\nOut:\n                       name    country  year\n269    Maria Goeppert-Mayer  United States  1963\n612  Marie Skłodowska-Curie         Poland  1903\n```", "```py\nby_year_gender = df.groupby(['year','gender'])\nyear_gen_sz = by_year_gender.size().unstack()\nyear_gen_sz.plot(kind='bar', figsize=(16,4))\n```", "```py\ndef thin_xticks(ax, tick_gap=10, rotation=45):\n    \"\"\" Thin x-ticks and adjust rotation \"\"\"\n    ticks = ax.xaxis.get_ticklocs() ![1](assets/1.png)\n    ticklabels = [l.get_text()\n                  for l in ax.xaxis.get_ticklabels()] ![1](assets/1.png)\n    # Sets the new tick locations and labels at an interval\n    # of tick_gap (default +10+):\n    ax.xaxis.set_ticks(ticks[::tick_gap])\n    ax.xaxis.set_ticklabels(ticklabels[::tick_gap],\n                            rotation=rotation) ![2](assets/2.png)\n    ax.figure.show()\n```", "```py\nby_year_gender = df.groupby(['year', 'gender'])\nby_year_gender.size().unstack()\nOut:\ngender  female  male\nyear\n1901       NaN     6.0\n1902       NaN     7.0\n...\n2014         2.0    11.0\n[111 rows x 2 columns]\n```", "```py\nnew_index = pd.Index(np.arange(1901, 2015), name='year') ![1](assets/1.png)\nby_year_gender = df.groupby(['year','gender'])\nyear_gen_sz = by_year_gender.size().unstack()\n  .reindex(new_index) ![2](assets/2.png)\n```", "```py\nnew_index = pd.Index(np.arange(1901, 2015), name='year')\nby_year_gender = df.groupby(['year','gender'])\n\nyear_gen_sz = by_year_gender.size().unstack().reindex(new_index)\n\nfig, axes = plt.subplots(nrows=2, ncols=1, ![1](assets/1.png)\n            sharex=True, sharey=True, figsize=(16, 8)) ![2](assets/2.png)\n\nax_f = axes[0]\nax_m = axes[1]\n\nfig.suptitle('Nobel Prize-winners by gender', fontsize=16)\n\nax_f.bar(year_gen_sz.index, year_gen_sz.female) ![3](assets/3.png)\nax_f.set_ylabel('Female winners')\n\nax_m.bar(year_gen_sz.index, year_gen_sz.male)\nax_m.set_ylabel('Male winners')\n\nax_m.set_xlabel('Year')\n```", "```py\ndf.groupby('country').size().order(ascending=False)\n        .plot(kind='bar', figsize=(12,4))\n```", "```py\nnat_group = df.groupby('country')\nngsz = nat_group.size()\nngsz.index\nOut:\nIndex([u'Argentina', u'Australia', u'Austria', u'Azerbaijan',...])\n```", "```py\ndf_countries = pd.read_json('data/winning_country_data.json',\\\n                            orient='index')\n\ndf_countries.loc['Japan'] # countries indexed by name\n\nOut:\ngini                   38.1\nname                  Japan\nalpha3Code              JPN\narea               377930.0\nlatlng        [36.0, 138.0]\ncapital               Tokyo\npopulation        127080000\nName: Japan, dtype: object\n```", "```py\ndf_countries = df_countries.set_index('name')\ndf_countries['nobel_wins'] = ngsz\ndf_countries['nobel_wins_per_capita'] =\\\n    df_countries.nobel_wins / df_countries.population\n```", "```py\ndf.countries.sort_values(by='nobel_wins_per_capita',\\\n    ascending=False).nobel_per_capita.plot(kind='bar',\\\n    figsize=(12, 4))\n```", "```py\ndf_countries[df_countries.nobel_wins > 2]\\\n        .sort_values(by='nobel_wins_per_capita', ascending=False)\\\n        .nobel_wins_per_capita.plot(kind='bar')\n```", "```py\nnat_cat_sz = df.groupby(['country', 'category']).size()\n.unstack()\nnat_cat_sz\nOut:\ncategory     Chemistry  Economics  Literature  Peace  \\...\ncountry\nArgentina            1        NaN         NaN      2\nAustralia          NaN          1           1    NaN\nAustria              3          1           1      2\nAzerbaijan         NaN        NaN         NaN    NaN\nBangladesh         NaN        NaN         NaN      1\n```", "```py\nCOL_NUM = 2\nROW_NUM = 3\n\nfig, axes = plt.subplots(ROW_NUM, COL_NUM, figsize=(12,12))\n\nfor i, (label, col) in enumerate(nat_cat_sz.items()): ![1](assets/1.png)\n    ax = axes[i//COL_NUM, i%COL_NUM] ![2](assets/2.png)\n    col = col.order(ascending=False)[:10] ![3](assets/3.png)\n    col = col.sort_values(ascending=True) ![4](assets/4.png)\n    col.plot(kind='barh', ax=ax)\n    ax.set_title(label)\n\nplt.tight_layout() ![5](assets/5.png)\n```", "```py\nplt.rcParams['font.size'] = 20\n```", "```py\nnew_index = pd.Index(np.arange(1901, 2015), name='year')\n\nby_year_nat_sz = df.groupby(['year', 'country'])\\\n    .size().unstack().reindex(new_index)\n```", "```py\nby_year_nat_sz['United States'].cumsum().plot()\n```", "```py\nby_year_nat_sz['United States'].fillna(0)\n    .cumsum().plot()\n```", "```py\nby_year_nat_sz = df.groupby(['year', 'country'])\n    .size().unstack().fillna(0)\n\nnot_US = by_year_nat_sz.columns.tolist() ![1](assets/1.png)\nnot_US.remove('United States')\n\nby_year_nat_sz['Not US'] = by_year_nat_sz[not_US].sum(axis=1) ![2](assets/2.png)\nax = by_year_nat_sz[['United States', 'Not US']]\\\n    .cumsum().plot(style=['-', '--']) ![3](assets/3.png)\n```", "```py\nby_year_nat_sz = df.groupby(['year', 'country'])\\\n    .size().unstack().reindex(new_index).fillna(0)\n\nregions = [ ![1](assets/1.png)\n    {'label':'N. America',\n      'countries':['United States', 'Canada']},\n    {'label':'Europe',\n     'countries':['United Kingdom', 'Germany', 'France']},\n    {'label':'Asia',\n     'countries':['Japan', 'Russia', 'India']}\n]\n\nfor region in regions: ![2](assets/2.png)\n    by_year_nat_sz[region['label']] =\\\n        by_year_nat_sz[region['countries']].sum(axis=1)\n\nby_year_nat_sz[[r['label'] for r in regions]].cumsum()\\\n  .plot(style=['-', '--', '-.']) # solid, dashed, dash-dotted line style ![3](assets/3.png)\n```", "```py\nCOL_NUM = 4\nROW_NUM = 4\n\nby_nat_sz = df.groupby('country').size()\nby_nat_sz.sort_values(ascending=False,\\\n    inplace=True)  ![1](assets/1.png)\n\nfig, axes = plt.subplots(COL_NUM, ROW_NUM,\\ ![2](assets/2.png)\n    sharex=True, sharey=True, ![2](assets/2.png)\n    figsize=(12,12))\n\nfor i, nat in enumerate(by_nat.index[1:17]): ![3](assets/3.png)\n    ax = axes[i/COL_NUM, i%ROW_NUM]\n    by_year_nat_sz[nat].cumsum().plot(ax=ax) ![4](assets/4.png)\n    ax.set_title(nat)\n```", "```py\nimport seaborn as sns\n\nsns.set(font_scale = 1.3)\n```", "```py\nbins = np.arange(df.year.min(), df.year.max(), 10) ![1](assets/1.png)\n\nby_year_nat_binned = df.groupby('country',\\\n    [pd.cut(df.year, bins, precision=0)])\\ ![2](assets/2.png)\n    .size().unstack().fillna(0)\n\nplt.figure(figsize=(8, 8))\n\nsns.heatmap(\\\n  by_year_nat_binned[by_year_nat_binned.sum(axis=1) > 2],\\ ![3](assets/3.png)\n  cmap='rocket_r') ![4](assets/4.png)\n```", "```py\ndf['award_age'].hist(bins=20)\n```", "```py\nsns.displot(df['award_age'], kde=True, height=4, aspect=2)\n```", "```py\nsns.boxplot(df, x='gender', y='award_age')\n```", "```py\nsns.violinplot(data=df, x='gender', y='award_age')\n```", "```py\ndf['age_at_death'] = (df.date_of_death - df.date_of_birth)\\\n                     .dt.days/365 ![1](assets/1.png)\n```", "```py\nage_at_death = df[df.age_at_death.notnull()].age_at_death ![1](assets/1.png)\n\nsns.displot(age_at_death, bins=40, kde=True, aspect=2, height=4)\n```", "```py\ndf[df.age_at_death > 100][['name', 'category', 'year']]\nOut:\n                     name                category  year\n101          Ronald Coase               Economics  1991\n328   Rita Levi-Montalcini  Physiology or Medicine 1986\n```", "```py\ndf_temp = df_temp[df.age_at_death.notnull()] ![1](assets/1.png)\nsns.kdeplot(df_temp[df_temp.gender == 'male']\n    .age_at_death, shade=True, label='male')\nsns.kdeplot(df_temp[df_temp.gender == 'female']\n    .age_at_death, shade=True, label='female')\n\nplt.legend()\n```", "```py\nsns.violinplot(data=df, x='gender', y='age_at_death',\\\n               aspect=2, height=4)\n```", "```py\ndf_temp = df[df.age_at_death.notnull()] ![1](assets/1.png)\ndata = pd.DataFrame( ![2](assets/2.png)\n    {'age at death':df_temp.age_at_death,\n     'date of birth':df_temp.date_of_birth.dt.year})\nsns.lmplot(data=data, x='date of birth', y='age at death',\n  height=6, aspect=1.5)\n```", "```py\nby_bornin_nat = df[df.born_in.notnull()].groupby(\\ ![1](assets/1.png)\n    ['born_in', 'country']).size().unstack()\nby_bornin_nat.index.name = 'Born in' ![2](assets/2.png)\nby_bornin_nat.columns.name = 'Moved to'\nplt.figure(figsize=(12, 12))\n\nax = sns.heatmap(by_bornin_nat, vmin=0, vmax=8, cmap=\"crest\",\\ ![3](assets/3.png)\n                 linewidth=0.5)\nax.set_title('The Nobel Diaspora')\n```", "```py\ndf[(df.born_in == 'Germany') & (df.country == 'United Kingdom')]\n    [['name', 'date_of_birth', 'category']]\n\nOut:\n                    name date_of_birth                category\n119  Ernst Boris Chain    1906-06-19  Physiology or Medicine\n484   Hans Adolf Krebs    1900-08-25  Physiology or Medicine\n486           Max Born    1882-12-11                 Physics\n503       Bernard Katz    1911-03-26  Physiology or Medicine\n```"]