["```py\n/* C code */\nint result = 0;\nfor(int i=0; i<100; i++){\n    result += i;\n}\n```", "```py\n# Python code\nresult = 0\nfor i in range(100):\n    result += i\n```", "```py\n# Python code\nx = 4\nx = \"four\"\n```", "```py\n/* C code */\nint x = 4;\nx = \"four\";  // FAILS\n```", "```py\nstruct _longobject {\n    long ob_refcnt;\n    PyTypeObject *ob_type;\n    size_t ob_size;\n    long ob_digit[1];\n};\n```", "```py\nIn [1]: L = list(range(10))\n        L\nOut[1]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nIn [2]: type(L[0])\nOut[2]: int\n```", "```py\nIn [3]: L2 = [str(c) for c in L]\n        L2\nOut[3]: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n```", "```py\nIn [4]: type(L2[0])\nOut[4]: str\n```", "```py\nIn [5]: L3 = [True, \"2\", 3.0, 4]\n        [type(item) for item in L3]\nOut[5]: [bool, str, float, int]\n```", "```py\nIn [6]: import array\n        L = list(range(10))\n        A = array.array('i', L)\n        A\nOut[6]: array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nIn [7]: import numpy as np\n```", "```py\nIn [8]: # Integer array\n        np.array([1, 4, 2, 5, 3])\nOut[8]: array([1, 4, 2, 5, 3])\n```", "```py\nIn [9]: np.array([3.14, 4, 2, 3])\nOut[9]: array([3.14, 4.  , 2.  , 3.  ])\n```", "```py\nIn [10]: np.array([1, 2, 3, 4], dtype=np.float32)\nOut[10]: array([1., 2., 3., 4.], dtype=float32)\n```", "```py\nIn [11]: # Nested lists result in multidimensional arrays\n         np.array([range(i, i + 3) for i in [2, 4, 6]])\nOut[11]: array([[2, 3, 4],\n                [4, 5, 6],\n                [6, 7, 8]])\n```", "```py\nIn [12]: # Create a length-10 integer array filled with 0s\n         np.zeros(10, dtype=int)\nOut[12]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n```", "```py\nIn [13]: # Create a 3x5 floating-point array filled with 1s\n         np.ones((3, 5), dtype=float)\nOut[13]: array([[1., 1., 1., 1., 1.],\n                [1., 1., 1., 1., 1.],\n                [1., 1., 1., 1., 1.]])\n```", "```py\nIn [14]: # Create a 3x5 array filled with 3.14\n         np.full((3, 5), 3.14)\nOut[14]: array([[3.14, 3.14, 3.14, 3.14, 3.14],\n                [3.14, 3.14, 3.14, 3.14, 3.14],\n                [3.14, 3.14, 3.14, 3.14, 3.14]])\n```", "```py\nIn [15]: # Create an array filled with a linear sequence\n         # starting at 0, ending at 20, stepping by 2\n         # (this is similar to the built-in range function)\n         np.arange(0, 20, 2)\nOut[15]: array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n```", "```py\nIn [16]: # Create an array of five values evenly spaced between 0 and 1\n         np.linspace(0, 1, 5)\nOut[16]: array([0.  , 0.25, 0.5 , 0.75, 1.  ])\n```", "```py\nIn [17]: # Create a 3x3 array of uniformly distributed\n         # pseudorandom values between 0 and 1\n         np.random.random((3, 3))\nOut[17]: array([[0.09610171, 0.88193001, 0.70548015],\n                [0.35885395, 0.91670468, 0.8721031 ],\n                [0.73237865, 0.09708562, 0.52506779]])\n```", "```py\nIn [18]: # Create a 3x3 array of normally distributed pseudorandom\n         # values with mean 0 and standard deviation 1\n         np.random.normal(0, 1, (3, 3))\nOut[18]: array([[-0.46652655, -0.59158776, -1.05392451],\n                [-1.72634268,  0.03194069, -0.51048869],\n                [ 1.41240208,  1.77734462, -0.43820037]])\n```", "```py\nIn [19]: # Create a 3x3 array of pseudorandom integers in the interval [0, 10)\n         np.random.randint(0, 10, (3, 3))\nOut[19]: array([[4, 3, 8],\n                [6, 5, 0],\n                [1, 1, 4]])\n```", "```py\nIn [20]: # Create a 3x3 identity matrix\n         np.eye(3)\nOut[20]: array([[1., 0., 0.],\n                [0., 1., 0.],\n                [0., 0., 1.]])\n```", "```py\nIn [21]: # Create an uninitialized array of three integers; the values will be\n         # whatever happens to already exist at that memory location\n         np.empty(3)\nOut[21]: array([1., 1., 1.])\n```", "```py\nnp.zeros(10, dtype='int16')\n```", "```py\nnp.zeros(10, dtype=np.int16)\n```"]