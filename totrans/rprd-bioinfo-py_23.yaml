- en: Appendix B. Understanding $PATH and Installing Command-Line Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PATH` is an environment variable that defines the directories that will be
    searched for a given command. That is, if I type `foo` and there’s no built-in
    command, shell function, command alias, or program anywhere in my `PATH` that
    the shell can execute as **`foo`**, I’ll be told this command cannot be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In Windows PowerShell, I can inspect the `PATH` with **`echo $env:Path`**, whereas
    on Unix platforms I use the command **`echo $PATH`**. Both paths are printed as
    a long string with no spaces, listing all the directory names separated by semicolons
    on Windows or by colons on Unix. If the operating system didn’t have some concept
    of a path, it would have to search *every directory* on the machine for a given
    command. This could take minutes to hours, so it makes sense to restrict the searching
    to just a few directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is my path on my Macintosh. Note that I have to put a dollar sign
    (`$`) in front of the name to tell my shell (`bash`) that this is a variable and
    not the literal string `PATH`. To make this more readable, I’ll use Perl to replace
    the colons with newlines. Note that this command will only work on a Unix command
    line where Perl is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_understanding__path_and_installing_command_line_programs_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The Perl substitute (`s//`) command replaces the first pattern (`:`) with the
    second (`\n`) globally (`g`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_understanding__path_and_installing_command_line_programs_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a custom directory I usually create for installing my own programs.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_understanding__path_and_installing_command_line_programs_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: This is where Python installed itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_understanding__path_and_installing_command_line_programs_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: This is a standard directory for user-installed software.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_understanding__path_and_installing_command_line_programs_CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The rest are more standard directories for finding programs.
  prefs: []
  type: TYPE_NORMAL
- en: The directories will be searched in the order they are defined, so the order
    can be quite important. For instance, the Python path is listed before system
    paths so that when I type **`python3`** it will use the version found in my local
    Python directory *before* one that might have been preinstalled on my system.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that all the directory names in my `PATH` end in *bin*. This is short
    for *binaries* and comes from the fact that many programs exist in a binary form.
    For example, the source code for a C program is written in a pseudo-English language
    that is compiled into a machine-readable executable file. The contents of this
    file are binary-encoded instructions that the operating system can execute.
  prefs: []
  type: TYPE_NORMAL
- en: Python programs, by contrast, are usually installed as their source code files,
    which are executed by Python at runtime. If you want to globally install one of
    your Python programs, I suggest you copy it to one of the directories that are
    already listed in your `PATH`. For instance, */usr/local/bin* is a typical directory
    for *local* installations of software by the user. It’s such a common directory
    that it’s normally present in the `PATH`. If you are working on your personal
    machine, like a laptop, where you have administrator privileges, you should be
    able to write new files into this location.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if I wanted to be able to run the `dna.py` program from [Chapter 1](ch01.html#ch01)
    without providing the full path to the source code, I could copy it to a location
    in my `PATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may not have sufficient permissions to do this, however. Unix systems were
    designed from the beginning to be *multitenant* operating systems, meaning that
    they support many different people using the system concurrently. It’s important
    to keep users from writing and deleting files they shouldn’t, and so the OS may
    prevent you from writing `dna.py` to a directory that you don’t own. If, for instance,
    you are working on a shared high-performance computing (HPC) system at a university,
    you certainly won’t have such privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you cannot install into system directories, it’s easiest to create a location
    in your `HOME` directory for such files. On my laptop, this is my `HOME` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On almost all my systems, I create a *$HOME/.local* directory for installing
    programs. Most shells interpret the tilde (`~`) as `HOME`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By convention, files and directories that have names starting with a dot are
    normally hidden by the `ls` command. You can use **`ls -a`** to list *all* the
    contents of a directory. You may notice many other *dotfiles* that are used by
    various programs to persist options and program state. I like to call this *.local*
    so I won’t normally see it in my directory listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a directory in your `HOME` for software installations is especially
    useful when compiling programs from source, a very common operation in bioinformatics.
    Most installations of this sort begin by using a `configure` program to gather
    information about your system, such as the location of your C compiler and such.
    This program almost always has a `--prefix` option that I’ll set to this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The resulting installation will put the binary compiled files into *$HOME/.local/bin*.
    It might also install header files and manual pages and other supporting data
    into other directories in *$HOME/.local*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wherever you decide to install local programs, you’ll need to ensure that your
    `PATH` is updated to search in that directory in addition to the others. I tend
    to use the `bash` shell, and one of the dotfiles in my `HOME` is a file called
    *.bashrc* (or sometimes *.bash_profile* or even *.profile*). I can add this line
    to put my custom directory first in the `PATH`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You may need something slightly different if you are using a different shell.
    Recently macOS started using `zsh` (Z shell) as the default shell, or your HPC
    system might use another shell. They all have the idea of `PATH` and all allow
    you to customize this in some manner. On Windows, you can use this command to
    append the directory to your path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how I can make the directory and copy the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'I should now be able to execute **`dna.py`** from any location on a Unix machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows shells like `cmd.exe` and PowerShell don’t read and execute the shebang
    like Unix shells, so you are required to include the command **`python.exe`**
    or **`python3.exe`** before the program name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Be sure `python.exe --version` shows that you are using version 3 and not version
    2\. You may need to install the latest version of Python. I have only shown Windows
    commands using `python.exe`, assuming this means Python 3, but you may need to
    use `python3.exe`, depending on your system.
  prefs: []
  type: TYPE_NORMAL
