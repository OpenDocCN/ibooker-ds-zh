["```py\n$ cd 09_grph/\n$ cp solution1.py grph.py\n$ ./grph.py -h\nusage: grph.py [-h] [-k size] [-d] FILE\n\nOverlap Graphs\n\npositional arguments:\n  FILE                  FASTA file ![1](assets/1.png)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -k size, --overlap size\n                        Size of overlap (default: 3) ![2](assets/2.png)\n  -d, --debug           Debug (default: False) ![3](assets/3.png)\n```", "```py\n$ cat tests/inputs/1.fa\n>Rosalind_0498\nAAATAAA\n>Rosalind_2391\nAAATTTT\n>Rosalind_2323\nTTTTCCC\n>Rosalind_0442\nAAATCCC\n>Rosalind_5013\nGGGTGGG\n```", "```py\n$ ./grph.py tests/inputs/1.fa\nRosalind_2391 Rosalind_2323\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\n```", "```py\n$ ./grph.py -k 4 tests/inputs/1.fa\nRosalind_2391 Rosalind_2323\n```", "```py\n$ ./grph.py tests/inputs/1.fa --debug\nRosalind_2391 Rosalind_2323\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\n```", "```py\n$ cat .log\nDEBUG:root:STARTS\ndefaultdict(<class 'list'>,\n            {'AAA': ['Rosalind_0498', 'Rosalind_2391', 'Rosalind_0442'],\n             'GGG': ['Rosalind_5013'],\n             'TTT': ['Rosalind_2323']})\nDEBUG:root:ENDS\ndefaultdict(<class 'list'>,\n            {'AAA': ['Rosalind_0498'],\n             'CCC': ['Rosalind_2323', 'Rosalind_0442'],\n             'GGG': ['Rosalind_5013'],\n             'TTT': ['Rosalind_2391']})\n```", "```py\n$ new.py -fp 'Overlap Graphs' grph.py\nDone, see new script \"grph.py\".\n```", "```py\nfrom typing import List, NamedTuple, TextIO\n\nclass Args(NamedTuple): ![1](assets/1.png)\n    \"\"\" Command-line arguments \"\"\"\n    file: TextIO\n    k: int\n    debug: bool\n\n# --------------------------------------------------\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Overlap Graphs',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file', ![2](assets/2.png)\n                        metavar='FILE',\n                        type=argparse.FileType('rt'),\n                        help='FASTA file')\n\n    parser.add_argument('-k', ![3](assets/3.png)\n                        '--overlap',\n                        help='Size of overlap',\n                        metavar='size',\n                        type=int,\n                        default=3)\n\n    parser.add_argument('-d', '--debug', help='Debug', action='store_true') ![4](assets/4.png)\n\n    args = parser.parse_args()\n\n    if args.overlap < 1: ![5](assets/5.png)\n        parser.error(f'-k \"{args.overlap}\" must be > 0') ![6](assets/6.png)\n\n    return Args(args.file, args.overlap, args.debug) ![7](assets/7.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(args.file.name)\n```", "```py\n$ ./grph.py tests/inputs/1.fa\ntests/inputs/1.fa\n```", "```py\n$ cat log.py\n#!/usr/bin/env python3\n\nimport sys\n\nprint('This is STDOUT.') ![1](assets/1.png)\nprint('This is also STDOUT.', file=sys.stdout) ![2](assets/2.png)\nprint('This is STDERR.', file=sys.stderr) ![3](assets/3.png)\n```", "```py\n$ ./log.py\nThis is STDOUT.\nThis is also STDOUT.\nThis is STDERR.\n```", "```py\n$ ./log.py 1>out 2>err\n```", "```py\n$ cat out\nThis is STDOUT.\nThis is also STDOUT.\n```", "```py\n$ cat err\nThis is STDERR.\n```", "```py\nimport logging\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    logging.basicConfig( ![1](assets/1.png)\n        filename='.log', ![2](assets/2.png)\n        filemode='w', ![3](assets/3.png)\n        level=logging.DEBUG if args.debug else logging.CRITICAL) ![4](assets/4.png)\n\n    logging.debug('input file = \"%s\"', args.file.name) ![5](assets/5.png)\n```", "```py\n$ ./grph.py --debug tests/inputs/1.fa\n```", "```py\n$ cat .log\nDEBUG:root:input file = \"tests/inputs/1.fa\"\n```", "```py\nfrom Bio import SeqIO\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        print(rec.id, rec.seq)\n```", "```py\n$ ./grph.py tests/inputs/1.fa\nRosalind_0498 AAATAAA\nRosalind_2391 AAATTTT\nRosalind_2323 TTTTCCC\nRosalind_0442 AAATCCC\nRosalind_5013 GGGTGGG\n```", "```py\n$ ./grph.py tests/inputs/1.fa\nRosalind_0498 AAATAAA first AAA last AAA\nRosalind_2391 AAATTTT first AAA last TTT\nRosalind_2323 TTTTCCC first TTT last CCC\nRosalind_0442 AAATCCC first AAA last CCC\nRosalind_5013 GGGTGGG first GGG last GGG\n```", "```py\n$ ./grph.py tests/inputs/1.fa -k 4\nRosalind_0498 AAATAAA first AAAT last TAAA\nRosalind_2391 AAATTTT first AAAT last TTTT\nRosalind_2323 TTTTCCC first TTTT last TCCC\nRosalind_0442 AAATCCC first AAAT last TCCC\nRosalind_5013 GGGTGGG first GGGT last TGGG\n```", "```py\n>>> k = 3\n>>> seq = 'AAATTTT'\n>>> seq[:k] ![1](assets/1.png)\n'AAA'\n>>> seq[-k:] ![2](assets/2.png)\n'TTT'\n```", "```py\ndef find_kmers(seq: str, k: int) -> List[str]: ![1](assets/1.png)\n    \"\"\" Find k-mers in string \"\"\"\n\n    return [] ![2](assets/2.png)\n```", "```py\ndef test_find_kmers() -> None:\n    \"\"\"Test find_kmers\"\"\"\n\n    assert find_kmers('', 1) == [] ![1](assets/1.png)\n    assert find_kmers('ACTG', 1) == ['A', 'C', 'T', 'G'] ![2](assets/2.png)\n    assert find_kmers('ACTG', 2) == ['AC', 'CT', 'TG']\n    assert find_kmers('ACTG', 3) == ['ACT', 'CTG']\n    assert find_kmers('ACTG', 4) == ['ACTG']\n    assert find_kmers('ACTG', 5) == [] ![3](assets/3.png)\n```", "```py\ndef find_kmers(seq: str, k: int) -> List[str]:\n    \"\"\"Find k-mers in string\"\"\"\n\n    n = len(seq) - k + 1 ![1](assets/1.png)\n    return [] if n < 1 else [seq[i:i + k] for i in range(n)] ![2](assets/2.png)\n```", "```py\n>>> from grph import find_kmers\n>>> kmers = find_kmers('AAATTTT', 3)\n>>> kmers\n['AAA', 'AAT', 'ATT', 'TTT', 'TTT']\n>>> kmers[0] ![1](assets/1.png)\n'AAA'\n>>> kmers[-1] ![2](assets/2.png)\n'TTT'\n```", "```py\nfrom collections import defaultdict\nfrom pprint import pformat\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    logging.basicConfig(\n        filename='.log',\n        filemode='w',\n        level=logging.DEBUG if args.debug else logging.CRITICAL)\n\n    start, end = defaultdict(list), defaultdict(list) ![1](assets/1.png)\n    for rec in SeqIO.parse(args.file, 'fasta'): ![2](assets/2.png)\n        if kmers := find_kmers(str(rec.seq), args.k): ![3](assets/3.png)\n            start[kmers[0]].append(rec.id) ![4](assets/4.png)\n            end[kmers[-1]].append(rec.id) ![5](assets/5.png)\n\n    logging.debug(f'STARTS\\n{pformat(start)}') ![6](assets/6.png)\n    logging.debug(f'ENDS\\n{pformat(end)}')\n```", "```py\n$ ./grph.py tests/inputs/1.fa -d\n$ cat .log\nDEBUG:root:STARTS ![1](assets/1.png)\ndefaultdict(<class 'list'>,\n            {'AAA': ['Rosalind_0498', 'Rosalind_2391', 'Rosalind_0442'], ![2](assets/2.png)\n             'GGG': ['Rosalind_5013'],\n             'TTT': ['Rosalind_2323']})\nDEBUG:root:ENDS ![3](assets/3.png)\ndefaultdict(<class 'list'>,\n            {'AAA': ['Rosalind_0498'], ![4](assets/4.png)\n             'CCC': ['Rosalind_2323', 'Rosalind_0442'],\n             'GGG': ['Rosalind_5013'],\n             'TTT': ['Rosalind_2391']})\n```", "```py\ndef main() -> None:\n    args = get_args()\n\n    logging.basicConfig(\n        filename='.log',\n        filemode='w',\n        level=logging.DEBUG if args.debug else logging.CRITICAL)\n\n    start, end = defaultdict(list), defaultdict(list)\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        if kmers := find_kmers(str(rec.seq), args.k):\n            start[kmers[0]].append(rec.id)\n            end[kmers[-1]].append(rec.id)\n\n    logging.debug('STARTS\\n{}'.format(pformat(start)))\n    logging.debug('ENDS\\n{}'.format(pformat(end)))\n\n    for kmer in set(start).intersection(set(end)): ![1](assets/1.png)\n        for pair in starfilter(op.ne, product(end[kmer], start[kmer])): ![2](assets/2.png)\n            print(*pair) ![3](assets/3.png)\n```", "```py\n>>> from pprint import pprint\n>>> from Bio import SeqIO\n>>> from collections import defaultdict\n>>> from grph import find_kmers\n>>> k = 3\n>>> start, end = defaultdict(list), defaultdict(list)\n>>> for rec in SeqIO.parse('tests/inputs/1.fa', 'fasta'):\n...     if kmers := find_kmers(str(rec.seq), k):\n...         start[kmers[0]].append(rec.id)\n...         end[kmers[-1]].append(rec.id)\n...\n>>> pprint(start)\n{'AAA': ['Rosalind_0498', 'Rosalind_2391', 'Rosalind_0442'],\n 'GGG': ['Rosalind_5013'],\n 'TTT': ['Rosalind_2323']}\n>>> pprint(end)\n{'AAA': ['Rosalind_0498'],\n 'CCC': ['Rosalind_2323', 'Rosalind_0442'],\n 'GGG': ['Rosalind_5013'],\n```", "```py\n>>> for kmer in end: ![1](assets/1.png)\n...     if kmer in start: ![2](assets/2.png)\n...         for seq_id in end[kmer]: ![3](assets/3.png)\n...             for other in start[kmer]: ![4](assets/4.png)\n...                 if seq_id != other: ![5](assets/5.png)\n...                     print(seq_id, other) ![6](assets/6.png)\n...\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\nRosalind_2391 Rosalind_2323\n```", "```py\n>>> set(start)\n{'TTT', 'GGG', 'AAA'}\n>>> set(end)\n{'TTT', 'CCC', 'AAA', 'GGG'}\n```", "```py\n>>> set(start).intersection(set(end))\n{'TTT', 'GGG', 'AAA'}\n```", "```py\n>>> from itertools import product\n>>> kmer = 'AAA'\n>>> pairs = list(product(end[kmer], start[kmer]))\n>>> pprint(pairs)\n[('Rosalind_0498', 'Rosalind_0498'),\n ('Rosalind_0498', 'Rosalind_2391'),\n ('Rosalind_0498', 'Rosalind_0442')]\n```", "```py\n>>> list(filter(lambda p: p[0] != p[1], pairs)) ![1](assets/1.png)\n[('Rosalind_0498', 'Rosalind_2391'), ('Rosalind_0498', 'Rosalind_0442')]\n```", "```py\n>>> from iteration_utilities import starfilter\n>>> list(starfilter(lambda a, b: a != b, pairs))\n[('Rosalind_0498', 'Rosalind_2391'), ('Rosalind_0498', 'Rosalind_0442')]\n```", "```py\n>>> import operator as op\n>>> list(starfilter(op.ne, pairs))\n[('Rosalind_0498', 'Rosalind_2391'), ('Rosalind_0498', 'Rosalind_0442')]\n```", "```py\n>>> for pair in starfilter(op.ne, pairs):\n...     print(*pair)\n...\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\n```", "```py\n>>> print('\\n'.join(map(' '.join, starfilter(op.ne, pairs))))\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\n```", "```py\n$ ./solution2_graph.py -h\nusage: solution2_graph.py [-h] [-k size] [-o FILE] [-v] [-d] FILE\n\nOverlap Graphs\n\npositional arguments:\n  FILE                  FASTA file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -k size, --overlap size\n                        Size of overlap (default: 3)\n  -o FILE, --outfile FILE\n                        Output filename (default: graph.txt) ![1](assets/1.png)\n  -v, --view            View outfile (default: False) ![2](assets/2.png)\n  -d, --debug           Debug (default: False)\n```", "```py\n$ ./solution2_graph.py tests/inputs/1.fa -o 1.txt\nRosalind_2391 Rosalind_2323\nRosalind_0498 Rosalind_2391\nRosalind_0498 Rosalind_0442\n```", "```py\n$ cat 1.txt\ndigraph {\n\tRosalind_0498\n\tRosalind_2391\n\tRosalind_0498 -> Rosalind_2391\n\tRosalind_0498\n\tRosalind_0442\n\tRosalind_0498 -> Rosalind_0442\n\tRosalind_2391\n\tRosalind_2323\n\tRosalind_2391 -> Rosalind_2323\n}\n```", "```py\n$ dot -O -Tpng 1.txt\n```", "```py\ndef main() -> None:\n    args = get_args()\n    start, end = defaultdict(list), defaultdict(list)\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        if kmers := find_kmers(str(rec.seq), args.k):\n            start[kmers[0]].append(rec.id)\n            end[kmers[-1]].append(rec.id)\n\n    dot = Digraph() ![1](assets/1.png)\n    for kmer in set(start).intersection(set(end)): ![2](assets/2.png)\n        for s1, s2 in starfilter(op.ne, product(end[kmer], start[kmer])): ![3](assets/3.png)\n            print(s1, s2) ![4](assets/4.png)\n            dot.node(s1) ![5](assets/5.png)\n            dot.node(s2)\n            dot.edge(s1, s2) ![6](assets/6.png)\n\n    args.outfile.close() ![7](assets/7.png)\n    dot.render(args.outfile.name, view=args.view) ![8](assets/8.png)\n```"]