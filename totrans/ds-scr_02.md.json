["```py\nusers = [\n    { \"id\": 0, \"name\": \"Hero\" },\n    { \"id\": 1, \"name\": \"Dunn\" },\n    { \"id\": 2, \"name\": \"Sue\" },\n    { \"id\": 3, \"name\": \"Chi\" },\n    { \"id\": 4, \"name\": \"Thor\" },\n    { \"id\": 5, \"name\": \"Clive\" },\n    { \"id\": 6, \"name\": \"Hicks\" },\n    { \"id\": 7, \"name\": \"Devin\" },\n    { \"id\": 8, \"name\": \"Kate\" },\n    { \"id\": 9, \"name\": \"Klein\" }\n]\n```", "```py\nfriendship_pairs = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),\n                    (4, 5), (5, 6), (5, 7), (6, 8), (7, 8), (8, 9)]\n```", "```py\n# Initialize the dict with an empty list for each user id:\nfriendships = {user[\"id\"]: [] for user in users}\n\n# And loop over the friendship pairs to populate it:\nfor i, j in friendship_pairs:\n    friendships[i].append(j)  # Add j as a friend of user i\n    friendships[j].append(i)  # Add i as a friend of user j\n```", "```py\ndef number_of_friends(user):\n    \"\"\"How many friends does _user_ have?\"\"\"\n    user_id = user[\"id\"]\n    friend_ids = friendships[user_id]\n    return len(friend_ids)\n\ntotal_connections = sum(number_of_friends(user)\n                        for user in users)        # 24\n```", "```py\nnum_users = len(users)                            # length of the users list\navg_connections = total_connections / num_users   # 24 / 10 == 2.4\n```", "```py\n# Create a list (user_id, number_of_friends).\nnum_friends_by_id = [(user[\"id\"], number_of_friends(user))\n                     for user in users]\n\nnum_friends_by_id.sort(                                # Sort the list\n       key=lambda id_and_friends: id_and_friends[1],   # by num_friends\n       reverse=True)                                   # largest to smallest\n\n# Each pair is (user_id, num_friends):\n# [(1, 3), (2, 3), (3, 3), (5, 3), (8, 3),\n#  (0, 2), (4, 2), (6, 2), (7, 2), (9, 1)]\n```", "```py\ndef foaf_ids_bad(user):\n    \"\"\"foaf is short for \"friend of a friend\" \"\"\"\n    return [foaf_id\n            for friend_id in friendships[user[\"id\"]]\n            for foaf_id in friendships[friend_id]]\n```", "```py\n[0, 2, 3, 0, 1, 3]\n```", "```py\nprint(friendships[0])  # [1, 2]\nprint(friendships[1])  # [0, 2, 3]\nprint(friendships[2])  # [0, 1, 3]\n```", "```py\nfrom collections import Counter                   # not loaded by default\n\ndef friends_of_friends(user):\n    user_id = user[\"id\"]\n    return Counter(\n        foaf_id\n        for friend_id in friendships[user_id]     # For each of my friends,\n        for foaf_id in friendships[friend_id]     # find their friends\n        if foaf_id != user_id                     # who aren't me\n        and foaf_id not in friendships[user_id]   # and aren't my friends.\n    )\n\nprint(friends_of_friends(users[3]))               # Counter({0: 2, 5: 1})\n```", "```py\ninterests = [\n    (0, \"Hadoop\"), (0, \"Big Data\"), (0, \"HBase\"), (0, \"Java\"),\n    (0, \"Spark\"), (0, \"Storm\"), (0, \"Cassandra\"),\n    (1, \"NoSQL\"), (1, \"MongoDB\"), (1, \"Cassandra\"), (1, \"HBase\"),\n    (1, \"Postgres\"), (2, \"Python\"), (2, \"scikit-learn\"), (2, \"scipy\"),\n    (2, \"numpy\"), (2, \"statsmodels\"), (2, \"pandas\"), (3, \"R\"), (3, \"Python\"),\n    (3, \"statistics\"), (3, \"regression\"), (3, \"probability\"),\n    (4, \"machine learning\"), (4, \"regression\"), (4, \"decision trees\"),\n    (4, \"libsvm\"), (5, \"Python\"), (5, \"R\"), (5, \"Java\"), (5, \"C++\"),\n    (5, \"Haskell\"), (5, \"programming languages\"), (6, \"statistics\"),\n    (6, \"probability\"), (6, \"mathematics\"), (6, \"theory\"),\n    (7, \"machine learning\"), (7, \"scikit-learn\"), (7, \"Mahout\"),\n    (7, \"neural networks\"), (8, \"neural networks\"), (8, \"deep learning\"),\n    (8, \"Big Data\"), (8, \"artificial intelligence\"), (9, \"Hadoop\"),\n    (9, \"Java\"), (9, \"MapReduce\"), (9, \"Big Data\")\n]\n```", "```py\ndef data_scientists_who_like(target_interest):\n    \"\"\"Find the ids of all users who like the target interest.\"\"\"\n    return [user_id\n            for user_id, user_interest in interests\n            if user_interest == target_interest]\n```", "```py\nfrom collections import defaultdict\n\n# Keys are interests, values are lists of user_ids with that interest\nuser_ids_by_interest = defaultdict(list)\n\nfor user_id, interest in interests:\n    user_ids_by_interest[interest].append(user_id)\n```", "```py\n# Keys are user_ids, values are lists of interests for that user_id.\ninterests_by_user_id = defaultdict(list)\n\nfor user_id, interest in interests:\n    interests_by_user_id[user_id].append(interest)\n```", "```py\ndef most_common_interests_with(user):\n    return Counter(\n        interested_user_id\n        for interest in interests_by_user_id[user[\"id\"]]\n        for interested_user_id in user_ids_by_interest[interest]\n        if interested_user_id != user[\"id\"]\n    )\n```", "```py\nsalaries_and_tenures = [(83000, 8.7), (88000, 8.1),\n                        (48000, 0.7), (76000, 6),\n                        (69000, 6.5), (76000, 7.5),\n                        (60000, 2.5), (83000, 10),\n                        (48000, 1.9), (63000, 4.2)]\n```", "```py\n# Keys are years, values are lists of the salaries for each tenure.\nsalary_by_tenure = defaultdict(list)\n\nfor salary, tenure in salaries_and_tenures:\n    salary_by_tenure[tenure].append(salary)\n\n# Keys are years, each value is average salary for that tenure.\naverage_salary_by_tenure = {\n    tenure: sum(salaries) / len(salaries)\n    for tenure, salaries in salary_by_tenure.items()\n}\n```", "```py\n{0.7: 48000.0,\n 1.9: 48000.0,\n 2.5: 60000.0,\n 4.2: 63000.0,\n 6: 76000.0,\n 6.5: 69000.0,\n 7.5: 76000.0,\n 8.1: 88000.0,\n 8.7: 83000.0,\n 10: 83000.0}\n```", "```py\ndef tenure_bucket(tenure):\n    if tenure < 2:\n        return \"less than two\"\n    elif tenure < 5:\n        return \"between two and five\"\n    else:\n        return \"more than five\"\n```", "```py\n# Keys are tenure buckets, values are lists of salaries for that bucket.\nsalary_by_tenure_bucket = defaultdict(list)\n\nfor salary, tenure in salaries_and_tenures:\n    bucket = tenure_bucket(tenure)\n    salary_by_tenure_bucket[bucket].append(salary)\n```", "```py\n# Keys are tenure buckets, values are average salary for that bucket.\naverage_salary_by_bucket = {\n  tenure_bucket: sum(salaries) / len(salaries)\n  for tenure_bucket, salaries in salary_by_tenure_bucket.items()\n}\n```", "```py\n{'between two and five': 61500.0,\n 'less than two': 48000.0,\n 'more than five': 79166.66666666667}\n```", "```py\n0.7  paid\n1.9  unpaid\n2.5  paid\n4.2  unpaid\n6.0  unpaid\n6.5  unpaid\n7.5  unpaid\n8.1  unpaid\n8.7  paid\n10.0 paid\n```", "```py\ndef predict_paid_or_unpaid(years_experience):\n  if years_experience < 3.0:\n    return \"paid\"\n  elif years_experience < 8.5:\n    return \"unpaid\"\n  else:\n    return \"paid\"\n```", "```py\ninterests = [\n    (0, \"Hadoop\"), (0, \"Big Data\"), (0, \"HBase\"), (0, \"Java\"),\n    (0, \"Spark\"), (0, \"Storm\"), (0, \"Cassandra\"),\n    (1, \"NoSQL\"), (1, \"MongoDB\"), (1, \"Cassandra\"), (1, \"HBase\"),\n    (1, \"Postgres\"), (2, \"Python\"), (2, \"scikit-learn\"), (2, \"scipy\"),\n    (2, \"numpy\"), (2, \"statsmodels\"), (2, \"pandas\"), (3, \"R\"), (3, \"Python\"),\n    (3, \"statistics\"), (3, \"regression\"), (3, \"probability\"),\n    (4, \"machine learning\"), (4, \"regression\"), (4, \"decision trees\"),\n    (4, \"libsvm\"), (5, \"Python\"), (5, \"R\"), (5, \"Java\"), (5, \"C++\"),\n    (5, \"Haskell\"), (5, \"programming languages\"), (6, \"statistics\"),\n    (6, \"probability\"), (6, \"mathematics\"), (6, \"theory\"),\n    (7, \"machine learning\"), (7, \"scikit-learn\"), (7, \"Mahout\"),\n    (7, \"neural networks\"), (8, \"neural networks\"), (8, \"deep learning\"),\n    (8, \"Big Data\"), (8, \"artificial intelligence\"), (9, \"Hadoop\"),\n    (9, \"Java\"), (9, \"MapReduce\"), (9, \"Big Data\")\n]\n```", "```py\nwords_and_counts = Counter(word\n                           for user, interest in interests\n                           for word in interest.lower().split())\n```", "```py\nfor word, count in words_and_counts.most_common():\n    if count > 1:\n        print(word, count)\n```", "```py\nlearning 3\njava 3\npython 3\nbig 3\ndata 3\nhbase 2\nregression 2\ncassandra 2\nstatistics 2\nprobability 2\nhadoop 2\nnetworks 2\nmachine 2\nneural 2\nscikit-learn 2\nr 2\n```"]