- en: Appendix B. A Bit More About Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the most part, working with Git as the only programmer on a project is
    fairly straightforward: you make changes to your code, commit them, push them
    to GitHub (or another remote repository), and that’s that.'
  prefs: []
  type: TYPE_NORMAL
- en: Until…it isn’t. Maybe you updated your *README.md* file on GitHub and forgot
    to `git pull` before making changes to the same file on your device. Maybe you
    forgot to add a message when you ran `git commit`. While dealing with these kinds
    of hiccups is not really all that complicated, some of the error messages and
    default behaviors of Git in the terminal can be tricky to deal with if you’ve
    never encountered them before. While the guidance in this appendix is *far* from
    comprehensive, in my experience a basic working knowledge of Git is more than
    enough, unless and until you’re working with a relatively large team in a large
    organization. So while you should definitely move beyond these simple fixes if
    you’re planning to use Git with multiple collaborators on complex projects, for
    most of us, these examples cover the situations you’ll find yourself in—and need
    help getting out of—most often.
  prefs: []
  type: TYPE_NORMAL
- en: You Run git push/pull and End Up in a Weird Text Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like me, Git is relentless when it comes to documenting your work, to the point
    that *it will not let you commit changes without a commit message*. That means
    that if you run a `commit` command without including the `-m "Commit message here"`,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: you will most likely find your terminal window taken over, showing text similar
    to what’s shown in [Figure B-1](#terminal_commit_editing).
  prefs: []
  type: TYPE_NORMAL
- en: '![Terminal-based commit message editing](assets/ppdw_ab01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-1\. Terminal-based commit message editing
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This can be pretty unsettling, especially the first time it happens. But since
    it *will* happen, here’s how to get it sorted out quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by typing the letter **`i`**. While not all editors actually require you
    to type `i` to enter `INSERT` mode, most of them will swallow the first character
    you type, so you may as well start with that one. You can see what this view looks
    like in [Figure B-2](#terminal_insert_mode).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get *out* of `INSERT` mode, hit the Esc or Escape key. Then type **`:x`**
    as shown in [Figure B-3](#terminal_commit_save), followed by Enter or Return.
    This will save your commit message as required and *also* get you out of that
    text editor and back into the terminal window you know and love.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the editor you find yourself in may not look like what’s shown in
    Figures [B-2](#terminal_insert_mode) and [B-3](#terminal_commit_save); if not,
    don’t panic. Now’s the time to search online for how to edit, save, and exit in
    whatever program you have been bounced into. Whatever the specifics, the objective
    is the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![Terminal editor in `INSERT` mode](assets/ppdw_ab02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-2\. Terminal editor in `INSERT` mode
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Terminal editor with ''save and exit'' command](assets/ppdw_ab03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure B-3\. Terminal editor with “save and exit” command
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Your git push/pull Command Gets Rejected
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It happens to all of us. You think you’ve been diligent about committing your
    code at the end of each work session—even writing individual commit messages to
    keep track of the changes you’ve made in individual files instead of just running
    `git commit -a`. Even so, sometimes you run your `git push` command and it gets
    rejected. What do you do then?
  prefs: []
  type: TYPE_NORMAL
- en: 'If your `git push` command fails, you’ll probably see an error like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In general, this happens when (at least) one of the files in your local repository
    has been changed since the last commit, but *so has the version in your remote
    repository*, so Git doesn’t know which one should take precedence. Not to worry!
  prefs: []
  type: TYPE_NORMAL
- en: Run git pull
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the changes in the file(s) can be merged automatically, Git will do that.
    This will resolve your file conflicts, but it can result in your being popped
    into the command line’s built-in text editor, which can be pretty confusing to
    deal with in its own right. If you run `git pull` and suddenly you’re looking
    at something like the text shown in [Figure B-1](#terminal_commit_editing), see
    [“You Run git push/pull and End Up in a Weird Text Editor”](#editing_commits_in_vim).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the changes in the file(s) *can’t* be merged automatically, you’ll get a
    message that looks something like this (you’ll also see this message if you just
    run `git pull` without running `git push` first):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This basically means that it’s up to you, the human, to determine which file
    should take precedence and either manually bring them back into line (by directly
    editing one or both files) or by simply forcing one to overwrite the other.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing conflicts manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine you have a repo with a *README.md* file, to which you have committed
    changes both on GitHub.com and on your device. You tried to `git push` and got
    an error, so you tried to `git pull`, but the automatic merge failed. To fix the
    conflicts manually, start by opening the *local* copy of the file in your preferred
    text editor. What you might see for a markdown file is shown in [Example B-1](#markdown_file_conflict).
  prefs: []
  type: TYPE_NORMAL
- en: Example B-1\. An example conflict in a markdown file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To resolve the conflict, simply edit the content of the file as you prefer,
    being sure to delete the lines that start with `<<<<<<<` and `>>>>>>>`, as well
    as the `=======`; if you leave those lines, they will appear in your final file.
    Now save the file as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that you *cannot* specify the filename in the `git commit` command, or
    Git will complain that you’ve asked it to do a partial commit during a merge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And you should be all set!
  prefs: []
  type: TYPE_NORMAL
- en: “Fixing” conflicts by forcing an overwrite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While it’s always a good idea to actually look at any files where conflicts
    have popped up, sometimes you’re pushing to a repo that you know is way out of
    date, and you just want to overwrite what’s on your remote repository. In that
    case, you *can* push the changes without manually reconciling the files by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will simply overwrite the remote file with your local version, but keep
    in mind that *all record of the overwritten version will be lost, including the
    commit history*. That means once you use `--force`, there’s no going back—the
    remote content is gone. Obviously, this means that you should *never* use this
    option if other people are contributing to the same repository—use it only if
    you’re the only one working on it and you’re (very) confident that the material
    in the remote repo can be overwritten safely.
  prefs: []
  type: TYPE_NORMAL
- en: Git Quick Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Table B-1](#common_git_commands_table) is a very brief overview of the most
    useful/common `git` commands. A more comprehensive list can be found [on the GitHub
    website](https://training.github.com/downloads/github-git-cheat-sheet).'
  prefs: []
  type: TYPE_NORMAL
- en: Table B-1\. Most-used `git` terminal commands
  prefs: []
  type: TYPE_NORMAL
- en: '| Command text | Command result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `git status` | Prints out the current state of the repo; doesn’t modify anything.
    Lists all files^([a](app02.html#idm45143393092848)) in the repo, grouped by whether
    they are *new*, *untracked*, or *modified*. |'
  prefs: []
  type: TYPE_TB
- en: '| `git add` *`filename`* | *Stage* a specific file that is currently *untracked*.
    A file must be staged by a `git add` command before it can be committed to the
    repository. After this, `git status` will label staged files as *new*. |'
  prefs: []
  type: TYPE_TB
- en: '| `git add -A` | Stage *all* currently untracked files at once. After this,
    `git status` will label staged files as *new*. |'
  prefs: []
  type: TYPE_TB
- en: '| `` git commit -m "Commit message here."` `` *`filename`* | Commit a specific,
    already-staged file, attaching the message that appears between double quotation
    marks. |'
  prefs: []
  type: TYPE_TB
- en: '| `git commit -a -m "Commit message here."` | Commit *all* currently staged
    files, attaching the same commit message to all of them. |'
  prefs: []
  type: TYPE_TB
- en: '| `git push` | Push all local commits to the remote repo. Adding the `--force`
    command will overwrite any conflicting commits in the remote repo with the locally
    committed files. |'
  prefs: []
  type: TYPE_TB
- en: '| `git pull` | Pull all remote files to the local repo. Adding the `--force`
    command will overwrite any conflicting commits in the local repo with the remote
    committed files. |'
  prefs: []
  type: TYPE_TB
- en: '| ^([a](app02.html#idm45143393092848-marker)) If you have an active *.gitignore*
    file for the repo, any ignored files will *not* be listed by `git status`. |'
  prefs: []
  type: TYPE_TB
