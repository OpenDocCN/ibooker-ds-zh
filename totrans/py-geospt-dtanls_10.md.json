["```py\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```", "```py\n!pip install xarray[complete]\n```", "```py\nimport glob\nimport matplotlib.pyplot as plt\n**import** urllib.request\nimport xarray as xr\n```", "```py\nds2015 = xr.open_dataset('/content/precip.V1.0.2015.nc')\n\nds2021 = xr.open_dataset('/content/precip.V1.0.2021.nc')\n```", "```py\nds2015_2021 = xr.concat([ds2015,ds2021], dim='time')\nds2015_2021\n```", "```py\nds2015_mon = ds2015.groupby('time.month').sum()\nds2015_mon.precip[0,:,:].plot(cmap='jet', vmax=300)\n```", "```py\nimport calendar\n```", "```py\nlandmask = ds2015.precip.sum(dim='time')>0\n```", "```py\nfig = plt.figure(figsize=[12,8], facecolor='w')\nplt.subplots_adjust(bottom=0.15, top=0.96, left=0.04, right=0.99,\n                   wspace=0.2, hspace=0.27)\nnrows = 3\nncols = 4\nfor i in range(1, 13):\n#the python data index starts at 0, but the subplot starts at 1\\.  \nplt.subplot(nrows, ncols, i)\n   dataplot = ds2015_mon.precip[i-1, :].where(landmask)\n   p = plt.pcolormesh(ds2015_mon.lon, ds2015_mon.lat, dataplot,\n                  vmax = 400, vmin = 0, cmap = 'nipy_spectral_r',\n                  )\n   plt.xlim([233,295])\n   plt.ylim([25,50])\n   plt.title(calendar.month_name[dataplot.month.values], fontsize = 13,\n             fontweight = 'bold', color = 'b')\n   plt.xticks(fontsize = 11)\n   plt.yticks(fontsize = 11)\n   if i % ncols == 1: # Add ylabel for the very left subplots\n       plt.ylabel('Latitude', fontsize = 11, fontweight = 'bold')\n   if i > ncols*(nrows-1): # Add xlabel for the bottom row subplots\n       plt.xlabel('Longitude', fontsize = 11, fontweight = 'bold')\n\n# Add a colorbar at the bottom:\ncax = fig.add_axes([0.25, 0.06, 0.5, 0.018])\ncb = plt.colorbar(cax=cax, orientation='horizontal', extend = 'max',)\ncb.ax.tick_params(labelsize=11)\ncb.set_label(label='Precipitation (mm)', color = 'k', size=14)\n\n# Now we can save a high resolution (300dpi) version of the figure:\nplt.savefig('Fig_prec_cpc_mon_2015.png', format = 'png', dpi = 300)\n```", "```py\nds2021.groupby(\"time.season\")\nDatasetGroupBy, grouped over 'season'\n4 groups with labels 'DJF', 'JJA', 'MAM', 'SON'.\n```", "```py\nseasonal_mean = seasonal_mean.reindex(season=[\"DJF\", \"MAM\", \"JJA\", \"SON\"])\nseasonal_mean\n```", "```py\n!pip install wtss\nfrom wtss import WTSS\n```", "```py\nservice = WTSS('https://brazildatacube.dpi.inpe.br/', \n    access_token='Your access token')\n```", "```py\nservice.coverages\n```", "```py\n['LANDSAT-MOZ_30_1M_STK-1',\n 'MOD13Q1-6',\n 'LC8_30_6M_MEDSTK-1',\n 'MYD13Q1-6',\n 'S2-SEN2COR_10_16D_STK-1',\n 'CB4_64_16D_STK-1',\n 'LC8_30_16D_STK-1',\n 'CB4MUX_20_1M_STK-1']\n```", "```py\ncbers4_coverage = service['CB4_64_16D_STK-1']\ncbers4_coverage\n```", "```py\nred_band = 'BAND15'\nnir_band = 'BAND16'\n```", "```py\ntime_series = cbers4_coverage.ts(attributes=(red_band, nir_band),\n                                 latitude=-16.350000,\n                                 longitude= -56.666668 ,\n                                 start_date=\"2016-01-01\",\n                                 end_date=\"2022-03-21\")\n```", "```py\ntime_series.plot()\n```", "```py\ncbers_df = pd.DataFrame({ 'BAND15': time_series.BAND15, \n'BAND16': time_series.BAND16 }, \n                        index = pd.to_datetime(time_series.timeline))\ncbers_df\n```", "```py\nfig = px.line(cbers_df, x=cbers_df.index, y=['BAND15', 'BAND16'], \ntitle='CBERS-4/AWFI (BAND 15 and 16)', labels={\n    'index': 'Date',\n    'value': 'Spectral Reflectance (scaled)'\n})\n\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()\n```", "```py\ncb4_timeseries_cmask = cbers4_coverage.ts(\n\n    attributes = ('CMASK'),\n\n    latitude = -12.0,\n    longitude = -53.989,\n\n    start_date = \"2017-01-01\",\n    end_date = \"2021-12-31\"\n)\n\ncb4_timeseries_cmask\n```", "```py\nCMASK: [127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 255.0, 127.0, 127.0, 127.0, 255.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 255.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, \n127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 127.0, 255.0]\n```", "```py\nset(cb4_timeseries_cmask.values('CMASK'))\n```", "```py\ncb4_timeseries = cbers4_coverage.ts(\n\n    attributes = ('NDVI', 'CMASK'),\n\n    latitude = -12.0,\n    longitude = -53.989,\n\n    start_date = \"2017-01-01\",\n    end_date = \"2019-12-31\"\n\n)\n```", "```py\nndvi_timeline = pd.to_datetime(cb4_timeseries.timeline)\nndvi_timeline\n```", "```py\nimport numpy as np\n\nndvi_data = np.array(cb4_timeseries.NDVI)\nndvi_data\n\ncmask_data = np.array(cb4_timeseries.CMASK)\ncmask_data\n```", "```py\ncmask_data = np.where(cmask_data == 255, np.nan, 1)\ncmask_data\n```", "```py\nndvi_data * cmask_data\n```", "```py\nndvi_masked_data = pd.DataFrame({ 'data': ndvi_data * cmask_data }, \nindex = pd.to_datetime(ndvi_timeline))\nndvi_masked_data[ndvi_masked_data['data'].isna()]\n```", "```py\nndvi_masked_data_interpolated = ndvi_masked_data.interpolate()\nndvi_masked_data_interpolated[ndvi_masked_data_interpolated['data'].isna()]\n```", "```py\nplt.figure(dpi = 120)\n\nplt.plot(ndvi_data, color='gray', linestyle='dashed', label = 'Original')\nplt.plot(ndvi_masked_data_interpolated['data'].values, color='blue', \nlabel = 'Interpolated')\n\nplt.title('Comparison of Time Series with and without interpolation')\nplt.legend()\nplt.grid(True)\nplt.show()\n```", "```py\nconda create --name conda-far -c conda-forge python=3.7 gdal numpy matplotlib \npandas patsy pip statsmodels earthengine-api --yes\nconda activate conda-far\npip install pywdpa sklearn # Packages not available with conda\npip install forestatrisk # For PyPI version\nconda install -c conda-forge python-dotenv rclone\n```", "```py\nconda install ipykernel\n```", "```py\npython -m ipykernel install --user --name myenv \n--display-name \"FAR\"\n```", "```py\n# Imports\nimport os\nfrom shutil import copy2\nimport urllib.request\nfrom zipfile import ZipFile\n\nimport forestatrisk as far\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom patsy import dmatrices\nimport pickle\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss\n```", "```py\n# Make output directory\nfar.make_dir(\"output\")\n```", "```py\n# Source of the data\nurl = \"https://github.com/ghislainv/forestatrisk/raw/master/docsrc/notebooks/\ndata_GLP.zip\"\n\nif os.path.exists(\"data_GLP.zip\") is False:\n    urllib.request.urlretrieve(url, \"data_GLP.zip\")\n\nwith ZipFile**(**\"data_GLP.zip\", \"r\") as z**:**\n    z.extractall(\"data\")\n```", "```py\n# Plot forest\nfig_fcc23 = far.plot.fcc(\n    input_fcc_raster=\"data/fcc23.tif\",\n    maxpixels=1e8,\n    output_file=\"output/fcc23.png\",\n    borders=\"data/ctry_PROJ.shp\",\n    linewidth=0.3, dpi=500)\n```", "```py\n# Sample points\ndataset = far.sample(nsamp=10000, adapt=True, seed=1234, csize=10,\n                     var_dir=\"data\",\n                     input_forest_raster=\"fcc23.tif\",\n                     output_file=\"output/sample.txt\",\n                     blk_rows=0)\n```", "```py\nSample 2x 10000 pixels (deforested vs. forest)\nDivide region in 168 blocks\nCompute number of deforested and forest pixels per block\n100%\nDraw blocks at random\nDraw pixels at random in blocks\n100%\nCompute center of pixel coordinates\nCompute number of 10 x 10 km spatial cells\n... 99 cells (9 x 11)\nIdentify cell number from XY coordinates\nMake virtual raster with variables as raster bands\nExtract raster values for selected pixels\n100%\nExport results to file output/sample.txt\n```", "```py\n# Remove NA from dataset \ndataset = dataset.dropna**(**axis=0**)**\n# Set number of trials to one for far.model_binomial_iCAR()\ndataset**[**\"trial\"**]** = 1\n# Print the first five rows\nprint**(**dataset.head**(**5**))**\n```", "```py\naltitude  dist_defor  dist_edge  dist_river  dist_road  dist_town  fcc23  \\\n0      30.0       642.0       30.0      8448.0     1485.0     6364.0    0.0   \n1      37.0       765.0       30.0      8583.0     1697.0     6576.0    0.0   \n2      78.0       216.0       30.0      7722.0      949.0     5743.0    0.0   \n3      80.0       277.0       30.0      8168.0     1172.0     6047.0    0.0   \n4      46.0        30.0       30.0      6179.0      541.0     6690.0    0.0   \n\n    pa  slope          X          Y               cell  trial  \n0  0.0    8.0 -6842295.0  1851975.0   4.0      1  \n1  0.0    7.0 -6842235.0  1852095.0   4.0      1  \n2  0.0    5.0 -6842535.0  1851195.0   4.0      1  \n3  0.0    2.0 -6842445.0  1851615.0   4.0      1  \n4  0.0    1.0 -6840465.0  1849755.0   4.0      1 \n```", "```py\n# Sample size\nndefor = sum(dataset.fcc23 == 0)\nnfor = sum(dataset.fcc23 == 1)\nwith open(\"output/sample_size.csv\", \"w\") as f:\n    f.write(\"var, n\\n\")\n    f.write(\"ndefor, \" + str(ndefor) + \"\\n\")\n    f.write(\"nfor, \" + str(nfor) + \"\\n\")\nprint(\"ndefor = {}, nfor = {}\".format(ndefor, nfor))\n```", "```py\n# Correlation formula formula_corr = \"fcc23 ~ dist_road + dist_town + dist_river + \\\ndist_defor + dist_edge + altitude + slope - 1\"  \n# Output file of = \"output/correlation.pdf\"\n# Data y, data = dmatrices(formula_corr, data=dataset,\n                    return_type=\"dataframe\")\n# Plots figs = far.plot.correlation(\n    y=y, data=data,\n    plots_per_page=3,\n    figsize=(7, 8),\n    dpi=80,\n    output_file=of)\n```", "```py\nBinomial logistic regression with iCAR process\n  Model: I(1 - fcc23) + trial ~ 1 + scale(altitude) + scale(slope) \n  + scale(dist_defor) + scale(dist_edge) + scale(dist_road) + scale(dist_town) \n  + scale(dist_river) + cell\n  Posteriors:\n                        Mean        Std     CI_low    CI_high\n        Intercept      -3.84      0.224      -4.23      -3.27\n  scale(altitude)       -0.5      0.105     -0.679     -0.293\n     scale(slope)    -0.0159     0.0545     -0.117     0.0906\nscale(dist_defor)      -2.06      0.274      -2.51      -1.51\n scale(dist_edge)      -6.89       0.44      -7.78       -6.2\n scale(dist_road)    -0.0408     0.0573     -0.159     0.0702\n scale(dist_town)    -0.0916     0.0444     -0.175     0.0032\nscale(dist_river)    -0.0122     0.0347    -0.0838     0.0607\n             Vrho       3.12      0.852       1.83       5.07\n         Deviance   1.52e+04         48   1.52e+04   1.54e+04\n```", "```py\n# Projected forest cover change (2020-2050)\nfcc_2050 = far.plot.fcc(\"output/fcc_2050.tif\",\n                        maxpixels=1e8,\n                        borders=\"data/ctry_PROJ.shp\",\n                        linewidth=0.2,\n                        output_file=\"output/fcc_2050.png\",\n                        figsize=(5, 4), dpi=800)\n```", "```py\n// Palette for fcc_2050 and fcc_2100\nvar pal_fcc_proj = [\nrgb(227, 26, 28), // 0\\. Deforestation, red\nrgb(34, 139, 34), // 1\\. Remaining forest, green\n];\n```", "```py\n# Create dataframe\ndpast = [\"2020\"]\ndpast.extend(dates_fut)\nC_df = pd.DataFrame({\"date\": dpast, \"C\": np.repeat(-99, ndates_fut + 1)},\n                    columns=[\"date\",\"C\"])\n# Loop on date\nfor i in range(ndates_fut):\n    carbon = far.emissions(input_stocks=\"data/emissions/AGB.tif\",\n                           input_forest=\"output/fcc_\" + dates_fut[i] + \".tif\")\n    C_df.loc[C_df[\"date\"]==dates_fut[i], [\"C\"]] = carbon\n# Past emissions\ncarbon = far.emissions(input_stocks=\"data/emissions/AGB.tif\",\n                       input_forest=\"data/fcc23.tif\")\nC_df.loc[C_df[\"date\"]==dpast[0], [\"C\"]] = carbon\n# Save dataframe\nC_df.to_csv(\"output/C_emissions.csv\", header=True, index=False)\n```", "```py\nprint(C_df)\n```", "```py\n    date  C\n0   2020   85954\n1   2030   99463\n2   2035  152047\n3   2040  202883\n4   2050  290920\n5   2055  335097\n6   2060  382887\n7   2070  481913\n8   2080  587963\n9   2085  645071\n10  2090  705914\n11  2100  844066\n```"]