["```py\npython -m pip install matplotlib\n```", "```py\nfrom matplotlib import pyplot as plt\n\nyears = [1950, 1960, 1970, 1980, 1990, 2000, 2010]\ngdp = [300.2, 543.3, 1075.9, 2862.5, 5979.6, 10289.7, 14958.3]\n\n# create a line chart, years on x-axis, gdp on y-axis\nplt.plot(years, gdp, color='green', marker='o', linestyle='solid')\n\n# add a title\nplt.title(\"Nominal GDP\")\n\n# add a label to the y-axis\nplt.ylabel(\"Billions of $\")\nplt.show()\n```", "```py\nmovies = [\"Annie Hall\", \"Ben-Hur\", \"Casablanca\", \"Gandhi\", \"West Side Story\"]\nnum_oscars = [5, 11, 3, 8, 10]\n\n# plot bars with left x-coordinates [0, 1, 2, 3, 4], heights [num_oscars]\nplt.bar(range(len(movies)), num_oscars)\n\nplt.title(\"My Favorite Movies\")     # add a title\nplt.ylabel(\"# of Academy Awards\")   # label the y-axis\n\n# label x-axis with movie names at bar centers\nplt.xticks(range(len(movies)), movies)\n\nplt.show()\n```", "```py\nfrom collections import Counter\ngrades = [83, 95, 91, 87, 70, 0, 85, 82, 100, 67, 73, 77, 0]\n\n# Bucket grades by decile, but put 100 in with the 90s\nhistogram = Counter(min(grade // 10 * 10, 90) for grade in grades)\n\nplt.bar([x + 5 for x in histogram.keys()],  # Shift bars right by 5\n        histogram.values(),                 # Give each bar its correct height\n        10,                                 # Give each bar a width of 10\n        edgecolor=(0, 0, 0))                # Black edges for each bar\n\nplt.axis([-5, 105, 0, 5])                  # x-axis from -5 to 105,\n                                           # y-axis from 0 to 5\n\nplt.xticks([10 * i for i in range(11)])    # x-axis labels at 0, 10, ..., 100\nplt.xlabel(\"Decile\")\nplt.ylabel(\"# of Students\")\nplt.title(\"Distribution of Exam 1 Grades\")\nplt.show()\n```", "```py\nmentions = [500, 505]\nyears = [2017, 2018]\n\nplt.bar(years, mentions, 0.8)\nplt.xticks(years)\nplt.ylabel(\"# of times I heard someone say 'data science'\")\n\n# if you don't do this, matplotlib will label the x-axis 0, 1\n# and then add a +2.013e3 off in the corner (bad matplotlib!)\nplt.ticklabel_format(useOffset=False)\n\n# misleading y-axis only shows the part above 500\nplt.axis([2016.5, 2018.5, 499, 506])\nplt.title(\"Look at the 'Huge' Increase!\")\nplt.show()\n```", "```py\nplt.axis([2016.5, 2018.5, 0, 550])\nplt.title(\"Not So Huge Anymore\")\nplt.show()\n```", "```py\nvariance     = [1, 2, 4, 8, 16, 32, 64, 128, 256]\nbias_squared = [256, 128, 64, 32, 16, 8, 4, 2, 1]\ntotal_error  = [x + y for x, y in zip(variance, bias_squared)]\nxs = [i for i, _ in enumerate(variance)]\n\n# We can make multiple calls to plt.plot\n# to show multiple series on the same chart\nplt.plot(xs, variance,     'g-',  label='variance')    # green solid line\nplt.plot(xs, bias_squared, 'r-.', label='bias^2')      # red dot-dashed line\nplt.plot(xs, total_error,  'b:',  label='total error') # blue dotted line\n\n# Because we've assigned labels to each series,\n# we can get a legend for free (loc=9 means \"top center\")\nplt.legend(loc=9)\nplt.xlabel(\"model complexity\")\nplt.xticks([])\nplt.title(\"The Bias-Variance Tradeoff\")\nplt.show()\n```", "```py\nfriends = [ 70,  65,  72,  63,  71,  64,  60,  64,  67]\nminutes = [175, 170, 205, 120, 220, 130, 105, 145, 190]\nlabels =  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\nplt.scatter(friends, minutes)\n\n# label each point\nfor label, friend_count, minute_count in zip(labels, friends, minutes):\n    plt.annotate(label,\n        xy=(friend_count, minute_count), # Put the label with its point\n        xytext=(5, -5),                  # but slightly offset\n        textcoords='offset points')\n\nplt.title(\"Daily Minutes vs. Number of Friends\")\nplt.xlabel(\"# of friends\")\nplt.ylabel(\"daily minutes spent on the site\")\nplt.show()\n```", "```py\ntest_1_grades = [ 99, 90, 85, 97, 80]\ntest_2_grades = [100, 85, 60, 90, 70]\n\nplt.scatter(test_1_grades, test_2_grades)\nplt.title(\"Axes Aren't Comparable\")\nplt.xlabel(\"test 1 grade\")\nplt.ylabel(\"test 2 grade\")\nplt.show()\n```"]