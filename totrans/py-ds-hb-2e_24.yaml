- en: Chapter 21\. Pivot Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第21章. 透视表
- en: We have seen how the `groupby` abstraction lets us explore relationships within
    a dataset. A *pivot table* is a similar operation that is commonly seen in spreadsheets
    and other programs that operate on tabular data. The pivot table takes simple
    column-wise data as input, and groups the entries into a two-dimensional table
    that provides a multidimensional summarization of the data. The difference between
    pivot tables and `groupby` can sometimes cause confusion; it helps me to think
    of pivot tables as essentially a *multidimensional* version of `groupby` aggregation.
    That is, you split-apply-combine, but both the split and the combine happen across
    not a one-dimensional index, but across a two-dimensional grid.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`groupby`抽象可以帮助我们探索数据集中的关系。*透视表*是一种类似的操作，在电子表格和其他操作表格数据的程序中经常见到。透视表以简单的列数据作为输入，并将条目分组成二维表，提供数据的多维总结。透视表与`groupby`之间的区别有时会引起混淆；我认为透视表基本上是`groupby`聚合的*多维*版本。也就是说，你进行分割-应用-组合，但分割和组合发生在二维网格上，而不是一维索引上。
- en: Motivating Pivot Tables
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激励透视表
- en: 'For the examples in this section, we’ll use the database of passengers on the
    *Titanic*, available through the Seaborn library (see [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分的示例中，我们将使用泰坦尼克号乘客的数据库，该数据库可通过Seaborn库获取（见[第36章](ch36.xhtml#section-0414-visualization-with-seaborn)）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As the output shows, this contains a number of data points on each passenger
    on that ill-fated voyage, including sex, age, class, fare paid, and much more.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如输出所示，这包含了每位乘客的多个数据点，包括性别、年龄、阶级、支付的票价等等。
- en: Pivot Tables by Hand
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动透视表
- en: 'To start learning more about this data, we might begin by grouping according
    to sex, survival status, or some combination thereof. If you read the previous
    chapter, you might be tempted to apply a `groupby` operation—for example, let’s
    look at survival rate by sex:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始了解更多关于这些数据的信息，我们可以根据性别、生存状态或两者的某种组合进行分组。如果你已经阅读了前一章节，你可能会想应用一个`groupby`操作——例如，让我们来看看按性别划分的生存率：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This gives us some initial insight: overall, three of every four females on
    board survived, while only one in five males survived!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一些初步的见解：总体而言，船上四分之三的女性幸存下来，而只有五分之一的男性幸存！
- en: 'This is useful, but we might like to go one step deeper and look at survival
    rates by both sex and, say, class. Using the vocabulary of `groupby`, we might
    proceed using a process like this: we first *group by* class and sex, then *select*
    survival, *apply* a mean aggregate, *combine* the resulting groups, and finally
    *unstack* the hierarchical index to reveal the hidden multidimensionality. In
    code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有用，但我们可能希望再深入一步，查看性别和阶级的生存率。使用`groupby`的术语，我们可以按以下过程进行操作：首先按阶级和性别进行*分组*，然后*选择*生存，*应用*均值聚合，*组合*结果组，并最后*展开*层次索引以显示隐藏的多维特性。在代码中：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This gives us a better idea of how both sex and class affected survival, but
    the code is starting to look a bit garbled. While each step of this pipeline makes
    sense in light of the tools we’ve previously discussed, the long string of code
    is not particularly easy to read or use. This two-dimensional `groupby` is common
    enough that Pandas includes a convenience routine, `pivot_table`, which succinctly
    handles this type of multidi⁠mensional aggregation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以更好地了解性别和阶级如何影响生存，但是代码看起来有点凌乱。虽然我们之前讨论的每个步骤在工具的背景下都是合理的，但是这长串代码并不特别易于阅读或使用。这种二维的`groupby`很常见，因此Pandas包含了一个方便的例程`pivot_table`，它简洁地处理这种多维聚合类型。
- en: Pivot Table Syntax
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 透视表语法
- en: 'Here is the equivalent to the preceding operation using the `DataFrame.pivot_table`
    method:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用`DataFrame.pivot_table`方法进行的等效操作：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is eminently more readable than the manual `groupby` approach, and produces
    the same result. As you might expect of an early 20th-century transatlantic cruise,
    the survival gradient favors both higher classes and people recorded as females
    in the data. First-class females survived with near certainty (hi, Rose!), while
    only one in eight or so third-class males survived (sorry, Jack!).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这比手动的`groupby`方法更易读，并产生相同的结果。正如你可能期待的那样，在20世纪初的大西洋横渡邮轮上，生存率偏向于更高阶级和数据中记录为女性的人群。头等舱的女性几乎百分之百幸存下来（嗨，Rose！），而仅约五分之一的三等舱男性幸存下来（抱歉，Jack！）。
- en: Multilevel Pivot Tables
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多级透视表
- en: 'Just as in a `groupby`, the grouping in pivot tables can be specified with
    multiple levels and via a number of options. For example, we might be interested
    in looking at age as a third dimension. We’ll bin the age using the `pd.cut` function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在`groupby`中一样，透视表中的分组可以通过多个级别和多种选项来指定。例如，我们可能对年龄作为第三维度感兴趣。我们将使用`pd.cut`函数对年龄进行分箱：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can apply the same strategy when working with the columns as well; let’s
    add info on the fare paid, using `pd.qcut` to automatically compute quantiles:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理列时我们可以应用相同的策略；让我们添加有关支付费用的信息，使用`pd.qcut`自动计算分位数：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The result is a four-dimensional aggregation with hierarchical indices (see
    [Chapter 17](ch17.xhtml#section-0305-hierarchical-indexing)), shown in a grid
    demonstrating the relationship between the values.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是具有分层索引的四维聚合（见[第 17 章](ch17.xhtml#section-0305-hierarchical-indexing)），显示了展示值之间关系的网格。
- en: Additional Pivot Table Options
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的透视表选项
- en: 'The full call signature of the `DataFrame.pivot_table` method is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.pivot_table`方法的完整调用签名如下：'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ve already seen examples of the first three arguments; here we’ll look at
    some of the remaining ones. Two of the options, `fill_value` and `dropna`, have
    to do with missing data and are fairly straightforward; I will not show examples
    of them here.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了前三个参数的示例；这里我们将看一些其余的选项。两个选项`fill_value`和`dropna`与缺失数据有关，非常直观；我不会在这里展示它们的示例。
- en: 'The `aggfunc` keyword controls what type of aggregation is applied, which is
    a mean by default. As with `groupby`, the aggregation specification can be a string
    representing one of several common choices (`''sum''`, `''mean''`, `''count''`,
    `''min''`, `''max''`, etc.) or a function that implements an aggregation (e.g.,
    `np.sum()`, `min()`, `sum()`, etc.). Additionally, it can be specified as a dictionary
    mapping a column to any of the desired options:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`aggfunc`关键字控制应用的聚合类型，默认为均值。与`groupby`一样，聚合规范可以是表示几种常见选择之一的字符串（`''sum''`、`''mean''`、`''count''`、`''min''`、`''max''`等）或实现聚合的函数（例如，`np.sum()`、`min()`、`sum()`等）。此外，它可以被指定为将列映射到任何所需选项之一的字典：'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice also here that we’ve omitted the `values` keyword; when specifying a
    mapping for `aggfunc`, this is determined automatically.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还要注意，我们省略了`values`关键字；在为`aggfunc`指定映射时，这将自动确定。
- en: 'At times it’s useful to compute totals along each grouping. This can be done
    via the `margins` keyword:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有时计算每个分组的总计是有用的。这可以通过`margins`关键字来完成：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, this automatically gives us information about the class-agnostic survival
    rate by sex, the sex-agnostic survival rate by class, and the overall survival
    rate of 38%. The margin label can be specified with the `margins_name` keyword;
    it defaults to `"All"`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，这自动为我们提供了关于性别不可知的无关生存率、类别不可知的生存率以及38%的总体生存率信息。边缘标签可以通过`margins_name`关键字指定，默认为`"All"`。
- en: 'Example: Birthrate Data'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：出生率数据
- en: As another example, let’s take a look at the freely available [data on births
    in the US](https://oreil.ly/2NWnk), provided by the Centers for Disease Control
    (CDC). (This dataset has been analyzed rather extensively by Andrew Gelman and
    his group; see, for example, the [blog post on signal processing using Gaussian
    processes](https://oreil.ly/5EqEp)):^([1](ch21.xhtml#idm45858772021024))
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子，让我们看看美国出生数据的免费可用数据（提供者为美国疾病控制中心（CDC））：[data on births in the US](https://oreil.ly/2NWnk)，这些数据已经被安德鲁·格尔曼及其团队进行了相当深入的分析；例如，参见[使用高斯过程进行信号处理的博客文章](https://oreil.ly/5EqEp)：^([1](ch21.xhtml#idm45858772021024))
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Taking a look at the data, we see that it’s relatively simple—it contains the
    number of births grouped by date and gender:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下数据，我们可以看到它相对简单——它包含按日期和性别分组的出生数量：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can start to understand this data a bit more by using a pivot table. Let’s
    add a `decade` column, and take a look at male and female births as a function
    of decade:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用透视表来开始更深入地理解这些数据。让我们添加一个`decade`列，然后看看男性和女性出生人数如何随着十年变化：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see that male births outnumber female births in every decade. To see this
    trend a bit more clearly, we can use the built-in plotting tools in Pandas to
    visualize the total number of births by year, as shown in [Figure 21-1](#fig_0309-pivot-tables_files_in_output_33_0)
    (see [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib) for a discussion
    of plotting with Matplotlib):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到每个十年男性出生人数超过女性。为了更清楚地看到这一趋势，我们可以使用Pandas中的内置绘图工具来可视化每年的总出生人数，如[图 21-1](#fig_0309-pivot-tables_files_in_output_33_0)所示（参见[第 IV 部分](part04.xhtml#section-0400-introduction-to-matplotlib)关于使用Matplotlib绘图的讨论）：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![output 33 0](assets/output_33_0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![output 33 0](assets/output_33_0.png)'
- en: Figure 21-1\. Total number of US births by year and gender^([2](ch21.xhtml#idm45858771699920))
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-1\. 美国各年度出生总数及性别分布^([2](ch21.xhtml#idm45858771699920))
- en: With a simple pivot table and the `plot` method, we can immediately see the
    annual trend in births by gender. By eye, it appears that over the past 50 years
    male births have outnumbered female births by around 5%.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个简单的数据透视表和`plot`方法，我们可以立即看到性别出生的年度趋势。通过肉眼观察，过去50年男性出生人数大约比女性出生人数多约5%。
- en: 'Though this doesn’t necessarily relate to the pivot table, there are a few
    more interesting features we can pull out of this dataset using the Pandas tools
    covered up to this point. We must start by cleaning the data a bit, removing outliers
    caused by mistyped dates (e.g., June 31st) or missing values (e.g., June 99th).
    One easy way to remove these all at once is to cut outliers; we’ll do this via
    a robust sigma-clipping operation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这与数据透视表不一定有关，但我们可以利用到目前为止介绍的Pandas工具从这个数据集中提取一些更有趣的特征。我们必须首先稍微清理数据，删除由于输入错误的日期（例如6月31日）或缺失值（例如6月99日）引起的异常值。一种一次性删除所有这些异常值的简单方法是通过强大的sigma剪切操作：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This final line is a robust estimate of the sample standard deviation, where
    the 0.74 comes from the interquartile range of a Gaussian distribution (you can
    learn more about sigma-clipping operations in a book I coauthored with Željko
    Ivezić, Andrew J. Connolly, and Alexander Gray *Statistics, Data Mining, and Machine
    Learning in Astronomy* (Princeton University Press)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这最后一行是样本标准差的健壮估计，其中的0.74来自高斯分布的四分位距（您可以在我与Željko Ivezić、Andrew J. Connolly和Alexander
    Gray共同撰写的书籍*Statistics, Data Mining, and Machine Learning in Astronomy*（普林斯顿大学出版社）中了解更多有关sigma剪切操作的信息）。
- en: 'With this, we can use the `query` method (discussed further in [Chapter 24](ch24.xhtml#section-0312-performance-eval-and-query))
    to filter out rows with births outside these values:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`query`方法（在[第24章](ch24.xhtml#section-0312-performance-eval-and-query)中进一步讨论）来过滤出超出这些值范围的出生行：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next we set the `day` column to integers; previously it had been a string column
    because some columns in the dataset contained the value `''null''`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将`day`列设置为整数；此前它是一个字符串列，因为数据集中的一些列包含值`'null'`：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we can combine the day, month, and year to create a date index (see
    [Chapter 23](ch23.xhtml#section-0311-working-with-time-series)). This allows us
    to quickly compute the weekday corresponding to each row:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以结合日、月和年创建一个日期索引（见[第23章](ch23.xhtml#section-0311-working-with-time-series)）。这使得我们可以快速计算每一行对应的工作日：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using this, we can plot births by weekday for several decades (see [Figure 21-2](#fig_0309-pivot-tables_files_in_output_44_0)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这一点，我们可以绘制几十年来每周的出生情况（见[图 21-2](#fig_0309-pivot-tables_files_in_output_44_0)）。
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Apparently births are slightly less common on weekends than on weekdays! Note
    that the 1990s and 2000s are missing because starting in 1989, the CDC data contains
    only the month of birth.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，周末的出生率略低于工作日！请注意，1990年代和2000年代缺失，因为从1989年开始，CDC的数据仅包含出生月份。
- en: 'Another interesting view is to plot the mean number of births by the day of
    the year. Let’s first group the data by month and day separately:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的视图是按年中日期平均出生数量的图表。让我们首先分别按月份和日期分组数据：
- en: '[PRE21]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![output 44 0](assets/output_44_0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![output 44 0](assets/output_44_0.png)'
- en: Figure 21-2\. Average daily births by day of week and decade^([3](ch21.xhtml#idm45858771266320))
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-2\. 每周平均出生量按工作日和十年间隔^([3](ch21.xhtml#idm45858771266320))
- en: 'The result is a multi-index over months and days. To make this visualizable,
    let’s turn these months and days into dates by associating them with a dummy year
    variable (making sure to choose a leap year so February 29th is correctly handled!):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个月份和日期的多重索引。为了使其可视化，让我们通过将它们与一个虚拟的年份变量关联起来（确保选择一个闰年，以正确处理2月29日）将这些月份和日期转换为日期：
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Focusing on the month and day only, we now have a time series reflecting the
    average number of births by date of the year. From this, we can use the `plot`
    method to plot the data. It reveals some interesting trends, as you can see in
    [Figure 21-3](#fig_0309-pivot-tables_files_in_output_50_0).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点放在月份和日期上，我们现在有一个反映每年平均出生数量的时间序列。从这个序列，我们可以使用`plot`方法绘制数据。正如您可以在[图 21-3](#fig_0309-pivot-tables_files_in_output_50_0)中看到的那样，它显示了一些有趣的趋势。
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![output 50 0](assets/output_50_0.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![output 50 0](assets/output_50_0.png)'
- en: Figure 21-3\. Average daily births by date^([4](ch21.xhtml#idm45858771123312))
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 21-3\. 每日平均出生量按日期^([4](ch21.xhtml#idm45858771123312))
- en: In particular, the striking feature of this graph is the dip in birthrate on
    US holidays (e.g., Independence Day, Labor Day, Thanksgiving, Christmas, New Year’s
    Day), although this likely reflects trends in scheduled/induced births rather
    than some deep psychosomatic effect on natural births. For more discussion of
    this trend, see the analysis and links in [Andrew Gelman’s blog post](https://oreil.ly/ugVHI)
    on the subject. We’ll return to this figure in [Chapter 32](ch32.xhtml#section-0409-text-and-annotation),
    where we will use Matplotlib’s tools to annotate this plot.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，这张图的显著特征是美国假日（例如独立日、劳动节、感恩节、圣诞节、元旦）出生率的下降，尽管这可能反映了计划/引发出生的趋势，而不是对自然出生产生深刻的心理效应。关于这一趋势的更多讨论，请参见[安德鲁·格尔曼的博客文章](https://oreil.ly/ugVHI)。我们将在[第32章](ch32.xhtml#section-0409-text-and-annotation)中使用
    Matplotlib 的工具对这个图进行注释。
- en: Looking at this short example, you can see that many of the Python and Pandas
    tools we’ve seen to this point can be combined and used to gain insight from a
    variety of datasets. We will see some more sophisticated applications of these
    data manipulations in future chapters!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个简短的例子，你可以看到到目前为止我们见过的许多 Python 和 Pandas 工具可以结合使用，从各种数据集中获取洞察力。我们将在后续章节中看到这些数据操作的更复杂应用！
- en: ^([1](ch21.xhtml#idm45858772021024-marker)) The CDC dataset used in this section
    uses the sex assigned at birth, which it calls “gender,” and limits the data to
    male and female. While gender is a spectrum independent of biology, I will be
    using the same terminology while discussing this dataset for consistency and clarity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch21.xhtml#idm45858772021024-marker)) 本节中使用的 CDC 数据集使用了出生时分配的性别，称之为“性别”，并将数据限制在男性和女性之间。尽管性别是独立于生物学的光谱，但为了一致性和清晰度，在讨论这个数据集时我将使用相同的术语。
- en: ^([2](ch21.xhtml#idm45858771699920-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch21.xhtml#idm45858771699920-marker)) 这个图的全彩版本可以在[GitHub](https://oreil.ly/PDSH_GitHub)找到。
- en: ^([3](ch21.xhtml#idm45858771266320-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch21.xhtml#idm45858771266320-marker)) 这个图的全彩版本可以在[GitHub](https://oreil.ly/PDSH_GitHub)找到。
- en: ^([4](ch21.xhtml#idm45858771123312-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch21.xhtml#idm45858771123312-marker)) 这个图的全尺寸版本可以在[GitHub](https://oreil.ly/PDSH_GitHub)找到。
