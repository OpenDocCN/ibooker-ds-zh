- en: Chapter 21\. Pivot Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how the `groupby` abstraction lets us explore relationships within
    a dataset. A *pivot table* is a similar operation that is commonly seen in spreadsheets
    and other programs that operate on tabular data. The pivot table takes simple
    column-wise data as input, and groups the entries into a two-dimensional table
    that provides a multidimensional summarization of the data. The difference between
    pivot tables and `groupby` can sometimes cause confusion; it helps me to think
    of pivot tables as essentially a *multidimensional* version of `groupby` aggregation.
    That is, you split-apply-combine, but both the split and the combine happen across
    not a one-dimensional index, but across a two-dimensional grid.
  prefs: []
  type: TYPE_NORMAL
- en: Motivating Pivot Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the examples in this section, we’ll use the database of passengers on the
    *Titanic*, available through the Seaborn library (see [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As the output shows, this contains a number of data points on each passenger
    on that ill-fated voyage, including sex, age, class, fare paid, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot Tables by Hand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start learning more about this data, we might begin by grouping according
    to sex, survival status, or some combination thereof. If you read the previous
    chapter, you might be tempted to apply a `groupby` operation—for example, let’s
    look at survival rate by sex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us some initial insight: overall, three of every four females on
    board survived, while only one in five males survived!'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful, but we might like to go one step deeper and look at survival
    rates by both sex and, say, class. Using the vocabulary of `groupby`, we might
    proceed using a process like this: we first *group by* class and sex, then *select*
    survival, *apply* a mean aggregate, *combine* the resulting groups, and finally
    *unstack* the hierarchical index to reveal the hidden multidimensionality. In
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This gives us a better idea of how both sex and class affected survival, but
    the code is starting to look a bit garbled. While each step of this pipeline makes
    sense in light of the tools we’ve previously discussed, the long string of code
    is not particularly easy to read or use. This two-dimensional `groupby` is common
    enough that Pandas includes a convenience routine, `pivot_table`, which succinctly
    handles this type of multidi⁠mensional aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot Table Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the equivalent to the preceding operation using the `DataFrame.pivot_table`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is eminently more readable than the manual `groupby` approach, and produces
    the same result. As you might expect of an early 20th-century transatlantic cruise,
    the survival gradient favors both higher classes and people recorded as females
    in the data. First-class females survived with near certainty (hi, Rose!), while
    only one in eight or so third-class males survived (sorry, Jack!).
  prefs: []
  type: TYPE_NORMAL
- en: Multilevel Pivot Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as in a `groupby`, the grouping in pivot tables can be specified with
    multiple levels and via a number of options. For example, we might be interested
    in looking at age as a third dimension. We’ll bin the age using the `pd.cut` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can apply the same strategy when working with the columns as well; let’s
    add info on the fare paid, using `pd.qcut` to automatically compute quantiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The result is a four-dimensional aggregation with hierarchical indices (see
    [Chapter 17](ch17.xhtml#section-0305-hierarchical-indexing)), shown in a grid
    demonstrating the relationship between the values.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Pivot Table Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The full call signature of the `DataFrame.pivot_table` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We’ve already seen examples of the first three arguments; here we’ll look at
    some of the remaining ones. Two of the options, `fill_value` and `dropna`, have
    to do with missing data and are fairly straightforward; I will not show examples
    of them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `aggfunc` keyword controls what type of aggregation is applied, which is
    a mean by default. As with `groupby`, the aggregation specification can be a string
    representing one of several common choices (`''sum''`, `''mean''`, `''count''`,
    `''min''`, `''max''`, etc.) or a function that implements an aggregation (e.g.,
    `np.sum()`, `min()`, `sum()`, etc.). Additionally, it can be specified as a dictionary
    mapping a column to any of the desired options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice also here that we’ve omitted the `values` keyword; when specifying a
    mapping for `aggfunc`, this is determined automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'At times it’s useful to compute totals along each grouping. This can be done
    via the `margins` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, this automatically gives us information about the class-agnostic survival
    rate by sex, the sex-agnostic survival rate by class, and the overall survival
    rate of 38%. The margin label can be specified with the `margins_name` keyword;
    it defaults to `"All"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Birthrate Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As another example, let’s take a look at the freely available [data on births
    in the US](https://oreil.ly/2NWnk), provided by the Centers for Disease Control
    (CDC). (This dataset has been analyzed rather extensively by Andrew Gelman and
    his group; see, for example, the [blog post on signal processing using Gaussian
    processes](https://oreil.ly/5EqEp)):^([1](ch21.xhtml#idm45858772021024))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Taking a look at the data, we see that it’s relatively simple—it contains the
    number of births grouped by date and gender:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can start to understand this data a bit more by using a pivot table. Let’s
    add a `decade` column, and take a look at male and female births as a function
    of decade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that male births outnumber female births in every decade. To see this
    trend a bit more clearly, we can use the built-in plotting tools in Pandas to
    visualize the total number of births by year, as shown in [Figure 21-1](#fig_0309-pivot-tables_files_in_output_33_0)
    (see [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib) for a discussion
    of plotting with Matplotlib):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![output 33 0](assets/output_33_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-1\. Total number of US births by year and gender^([2](ch21.xhtml#idm45858771699920))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: With a simple pivot table and the `plot` method, we can immediately see the
    annual trend in births by gender. By eye, it appears that over the past 50 years
    male births have outnumbered female births by around 5%.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though this doesn’t necessarily relate to the pivot table, there are a few
    more interesting features we can pull out of this dataset using the Pandas tools
    covered up to this point. We must start by cleaning the data a bit, removing outliers
    caused by mistyped dates (e.g., June 31st) or missing values (e.g., June 99th).
    One easy way to remove these all at once is to cut outliers; we’ll do this via
    a robust sigma-clipping operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This final line is a robust estimate of the sample standard deviation, where
    the 0.74 comes from the interquartile range of a Gaussian distribution (you can
    learn more about sigma-clipping operations in a book I coauthored with Željko
    Ivezić, Andrew J. Connolly, and Alexander Gray *Statistics, Data Mining, and Machine
    Learning in Astronomy* (Princeton University Press)).
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, we can use the `query` method (discussed further in [Chapter 24](ch24.xhtml#section-0312-performance-eval-and-query))
    to filter out rows with births outside these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we set the `day` column to integers; previously it had been a string column
    because some columns in the dataset contained the value `''null''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can combine the day, month, and year to create a date index (see
    [Chapter 23](ch23.xhtml#section-0311-working-with-time-series)). This allows us
    to quickly compute the weekday corresponding to each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Using this, we can plot births by weekday for several decades (see [Figure 21-2](#fig_0309-pivot-tables_files_in_output_44_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Apparently births are slightly less common on weekends than on weekdays! Note
    that the 1990s and 2000s are missing because starting in 1989, the CDC data contains
    only the month of birth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting view is to plot the mean number of births by the day of
    the year. Let’s first group the data by month and day separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![output 44 0](assets/output_44_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-2\. Average daily births by day of week and decade^([3](ch21.xhtml#idm45858771266320))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The result is a multi-index over months and days. To make this visualizable,
    let’s turn these months and days into dates by associating them with a dummy year
    variable (making sure to choose a leap year so February 29th is correctly handled!):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Focusing on the month and day only, we now have a time series reflecting the
    average number of births by date of the year. From this, we can use the `plot`
    method to plot the data. It reveals some interesting trends, as you can see in
    [Figure 21-3](#fig_0309-pivot-tables_files_in_output_50_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![output 50 0](assets/output_50_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21-3\. Average daily births by date^([4](ch21.xhtml#idm45858771123312))
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In particular, the striking feature of this graph is the dip in birthrate on
    US holidays (e.g., Independence Day, Labor Day, Thanksgiving, Christmas, New Year’s
    Day), although this likely reflects trends in scheduled/induced births rather
    than some deep psychosomatic effect on natural births. For more discussion of
    this trend, see the analysis and links in [Andrew Gelman’s blog post](https://oreil.ly/ugVHI)
    on the subject. We’ll return to this figure in [Chapter 32](ch32.xhtml#section-0409-text-and-annotation),
    where we will use Matplotlib’s tools to annotate this plot.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at this short example, you can see that many of the Python and Pandas
    tools we’ve seen to this point can be combined and used to gain insight from a
    variety of datasets. We will see some more sophisticated applications of these
    data manipulations in future chapters!
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch21.xhtml#idm45858772021024-marker)) The CDC dataset used in this section
    uses the sex assigned at birth, which it calls “gender,” and limits the data to
    male and female. While gender is a spectrum independent of biology, I will be
    using the same terminology while discussing this dataset for consistency and clarity.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch21.xhtml#idm45858771699920-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch21.xhtml#idm45858771266320-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch21.xhtml#idm45858771123312-marker)) A full-size version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
