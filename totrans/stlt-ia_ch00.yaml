- en: 1 Introduction to Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Why you'd want to build web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What exactly Streamlit is, and why it's so popular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Streamlit's ease-of-use, LLM-friendliness, and other factors make it popular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Streamlit is different from other similar technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you can (and can't) build with Streamlit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Welcome to the exciting realm of Streamlit! By picking up this book, you''ve
    joined the ranks of thousands of developers who have discovered Streamlit over
    the past several years. These developers have become enamored with what Streamlit
    makes possible: web apps coded entirely in Python in mere minutes!'
  prefs: []
  type: TYPE_NORMAL
- en: Take a second to think about why you were drawn to this book. Maybe you have
    an idea buzzing in your head for an application that will save your coworkers
    hours of mundane, easy-to-automate tasks, and you want the fastest way to turn
    it into reality. Maybe you're aiming to land a job in tech and want to close a
    gap in your skillset by adding frontend development. Perhaps you're a data analyst
    or scientist wanting to present your findings in interactive dashboards for higher-ups.
    Or you might be a software engineer needing a quick way to prototype your apps.
    Perhaps you simply heard the buzz around Streamlit and AI and were curious.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever your story, Streamlit can bring your ideas to life quickly and easily.
    This book will be your guide, taking you step-by-step through the process of creating
    powerful, interactive web applications. You'll learn how to harness the simplicity
    and elegance of Python to build and deploy apps that can wow your audience, solve
    real problems, and advance your career.
  prefs: []
  type: TYPE_NORMAL
- en: Experience is the best teacher, so you'll learn Streamlit through real-world
    projects. By the end of this book, you'll have built a versatile portfolio, ranging
    from an interactive mortgage calculator to a chatbot powered by generative AI—all
    in record time!
  prefs: []
  type: TYPE_NORMAL
- en: While each chapter will immerse you deeper into Streamlit's capabilities, you'll
    also learn the overarching process of developing apps, including how to think
    about UI design and how to organize your code for maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you're a seasoned industry veteran or a complete beginner, I am convinced
    that you'll find value in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Eager to dive in? Then let's get started with the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Building web apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get to Streamlit itself, let's talk about web apps and why you would
    want to build one, which is what Streamlit is for.
  prefs: []
  type: TYPE_NORMAL
- en: A *graphical app* is an application with a *graphical user interface (GUI)*
    that you can interact with by clicking a mouse or touching on-screen controls.
    Contrast this with a *command-line app*, which has a *command-line user interface*
    where you type text inputs into a terminal and get the results back in the same
    terminal. You've likely written a few of the latter using Python.
  prefs: []
  type: TYPE_NORMAL
- en: A *web application (*or *web app)* is a graphical app that you access through
    a web browser, such as when you access Gmail or Netflix using the Google Chrome
    browser, as opposed to a *desktop app*, which is a program that runs directly
    on your computer (e.g., Photoshop or Notepad running on your PC), or a *native
    mobile app,* which runs directly on your mobile phone (e.g., Uber or when you
    access Gmail through the iPhone Gmail app).
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit helps you build web apps, not command-line, desktop or native mobile
    apps. But why would you want to do that?
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.1 Why build a graphical app in the first place?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've learned Python, chances are that you're comfortable with creating
    command-line programs. These are the easiest types of apps to create, and Python
    provides native support for them.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is, outside of techies, no one likes to use command-line programs
    for anything significant. Graphical apps are much less intimidating and give users
    a more intuitive experience.
  prefs: []
  type: TYPE_NORMAL
- en: This is true generally, but also in the workplace. If you want to automate something
    at work for a non-technical audience and expect people to actually use what you've
    built, you'll need to make a graphical interface to go with it. You might have
    created the perfect solution to a genuine problem that cuts the effort required
    to accomplish something from hours to minutes, but the minute you tell people
    they're going to have to open up a terminal and type commands into it, you'll
    have lost them.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.2 Why build apps for the web?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graphical apps provide a clear usability advantage, but why build a web app
    rather than a desktop app or a native mobile app?
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past two decades, web apps have become increasingly popular for a
    whole host of reasons. Here are just a couple:'
  prefs: []
  type: TYPE_NORMAL
- en: Web apps can run on pretty much any device that has a web browser. This means
    you can code your app once and have users be able to run your program on their
    computer, tablet or phone with no extra effort.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users don't have to install or update web apps manually; by visiting the right
    web address, they are always using the latest version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web apps are especially popular within companies. Most companies today have
    an *intranet*, which is an internal network of web pages only open to their employees.
    Since all employees are used to accessing the intranet, it often makes a lot of
    sense for a company to host their internal programs on this intranet as web apps
    rather than have people go through the trouble of installing desktop or mobile
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are certainly valid reasons to build desktop or mobile apps
    instead, such as when performance or offline access is critical. However, for
    many use cases, the benefits of web apps make them the preferred choice for both
    developers and users.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1.3 What do you need to build a web app?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Hopefully you''ve bought into the idea of creating web apps enough to turn
    to the next question: how?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking (and simplifying somewhat), a web app has two big parts:
    a *frontend* and a *backend*. The frontend contains the onscreen things that people
    interact with, such as buttons, textboxes, menus, and what have you. The backend
    has the actual logic that fulfills the app''s purpose, such as crunching numbers
    or looking something up in a database.'
  prefs: []
  type: TYPE_NORMAL
- en: The skills and languages required to create the backend are quite different
    from those required for the frontend. You can write your backend logic in Python
    (which this book assumes you're familiar with), primarily focusing on getting
    your business logic to work.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the frontend, on the other hand, involves focusing on the user experience
    where there are fewer "right" answers. And importantly, it has traditionally required
    familiarity with a different set of languages. Learning these languages requires
    at least as much, and probably more, effort as it took to learn Python from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'This problem has stymied many busy Python developers without the time to invest
    in acquiring a whole new skillset, and prevented them from building full-fledged
    web apps. Luckily for you, we have a solution today: Streamlit.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 What is Streamlit?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit is a pure Python frontend development library that lets you create
    web apps called *Streamlit apps* quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, a traditional challenge in Python development is that you need
    to either use a command line to execute your script or write non-Python code to
    create a visual interface if it's for the web. Streamlit disrupts this by allowing
    you to write a web-based UI in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, one of my favorite ways to describe Streamlit apps to people new to
    them is "think of them as Python scripts where you can click buttons and stuff.”
  prefs: []
  type: TYPE_NORMAL
- en: Originally launched in 2019, Streamlit has exploded in popularity and usage
    in the last couple of years, bolstered by—among other things we'll explore shortly—its
    easy-to-grok syntax, its value in data science, and its support for creating LLM-based
    chatbots. So much so that in 2022, it was acquired by Snowflake Inc. for $800M.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you a sense of Streamlit''s rise, figure 1.1 shows a Google Trends
    chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1 A Google Trends chart that shows the popularity of Streamlit over
    time (note: the dip near the end of 2023 is the week between Christmas and New
    Year''s Day, when I assume relatively few people were working in the US)'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 1.3 10 reasons Streamlit is so popular
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As figure 1.1 shows, Streamlit has enjoyed a fairly steady rise in popularity,
    especially beginning in 2022\. Besides its vibrant community of individual users,
    the roster of companies that use Streamlit internally includes names such as Netflix,
    Airbnb, Stripe, and Square.
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons that Streamlit has gained such acceptance, chief among
    them being its pure-Python nature and its ease-of-use for data science and AI
    applications in particular. In this section, we'll explore ten of these reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.1 Streamlit is pure Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any code you write with Streamlit is Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, creating a web-based interface has required developers to write
    HTML, CSS and Javascript, the three stalwart languages of the web. *HyperText
    Markup Language* (HTML) is used for page structure, *Cascading StyleSheets (*CSS)
    for appearance and layout, and *Javascript* for functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is, these languages (especially CSS and Javascript) can be hard
    to master if you want to create something relatively complex. There are frameworks
    built on top of these languages that help, but more often than not these have
    a learning curve, too. In any case, you'd still need to know HTML, CSS, and Javascript
    to use them effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Python, due to factors such as its ease-of-use and its rich ecosystem of libraries
    for data wrangling and analysis, is popular among data scientists, hobbyists,
    and even semi-technical people who learned it to help with their day jobs (and
    because it's fun). These groups are illustrated in figure 1.2\. Their skillset
    may not extend to the three web languages, or they may only have a passing knowledge
    of them—usually not enough to create complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 Streamlit unlocks web app development for anyone who knows Python
    and helps even full stack developers prototype and build faster
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Streamlit is a boon to these people because it lowers a huge barrier for them;
    it lets them create rich applications for the web without first having to invest
    time in learning another stack of languages.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.2 Streamlit lets you go from idea to app in minutes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you start using Streamlit, I can guarantee that you'll be impressed by
    how little time it takes to create a working application.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its intuitiveness and the fact that it gives you sensible defaults for
    most things (which means you don't have to customize or configure them manually
    to look and work great), apps created in Streamlit are really quick to develop.
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, often, the time it takes to go from an idea to a fully working app can
    be measured in minutes rather than hours or days.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.3 Streamlit makes beautiful apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you do know some of the web-based languages I mentioned earlier, *knowing*
    them is very different from being skilled at *using* them to create web pages
    that look good.
  prefs: []
  type: TYPE_NORMAL
- en: In Streamlit, the apps and pages you create are beautiful by default. That's
    because the elements (individual parts of an app, such as buttons, checkboxes
    or tabs) that Streamlit creates for you have been pre-designed to look good. All
    you have to do is put them together.
  prefs: []
  type: TYPE_NORMAL
- en: As anyone who has used CSS to style a web page by hand (or tried to, at any
    rate) can tell you, it can be frustratingly hard to get just the right spacing
    you want between the edges of a button and its text, or the unique shadow effect
    you've dreamt up. And if, through force of will, you manage to implement exactly
    what you had in mind, it's *still* not guaranteed to be pretty, because UI design
    is as much art as it is science.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit doesn't necessarily solve all of those problems for you, but it *does*
    make it so you have to go out of your way to create something that *doesn't* look
    nice.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.4 Streamlit lets you focus on your app, not UI details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Giving you pre-designed elements you can then combine to create apps has another
    advantage; it frees up your time to focus on the part you know best: your app''s
    logic.'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit intentionally limits the UI choices you can make by choosing *for*
    you.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, take the snippet of code shown in Listing 1.1
  prefs: []
  type: TYPE_NORMAL
- en: Listing 1.1 Using tabs in Streamlit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You don't need to know how this works just yet, but it produces the tabbed page
    shown in figure 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 Tabs in Streamlit, illustrating how Streamlit makes UI choices for
    you
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Turn your attention to the tab bar at the top. Notice the orange line beneath
    the tab we're currently on and the way the tab we're hovering over on is highlighted.
    Also, though you can't see it in a screenshot, the transition from one tab to
    another has a small animation where the orange line moves under the new tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'The line that produces the tab bar is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice how nothing in this line says anything about the styling we just discussed.
    We essentially just said "tabs" and Streamlit took care of the details for us.
  prefs: []
  type: TYPE_NORMAL
- en: This is because Streamlit correctly recognizes that most developers don't want
    to design these UI-related minutiae and would much rather spend that time implementing
    their business logic.
  prefs: []
  type: TYPE_NORMAL
- en: The result is that Streamlit app developers are highly productive, and able
    to churn out sensible interfaces that complement rather than detract from their
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: That said, there is ultimately a tradeoff here between hassle-free UI development
    and fine-grained control. Streamlit works great for you if you care about the
    former, but not the latter. If you want to be able to exercise a lot of control
    over the finer aspects of your interface, Streamlit may not be the tool for you.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, as of the time of writing, if you wanted to put a shaded box around
    the current tab instead of a line underneath, you can't do that easily or without
    knowing HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.5 Streamlit's syntax is simple, concise, and intuitive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the things I've always admired about Streamlit is how readable the syntax
    is. Like Python itself, Streamlit code is self-documenting and you'll often find
    what it does obvious.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say you want to simulate the roll of a die and plot the results
    in a graph. Consider the four-line snippet shown in Listing 1.2 that does this.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 1.2 A die roll simulator in Streamli
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can see the output in figure 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 Output of a die roll simulator in Streamlit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Notice how you can likely read the code in Listing 1.2 and make sense of it
    without having seen a single line of Streamlit code before: we show a title, display
    a slider for the user to pick the number of die rolls to plot (between 10 and
    100), show a "Plot graph" button, and when it''s clicked, we generate the die
    rolls (random numbers between 1 and 6) and plot them in a line chart.'
  prefs: []
  type: TYPE_NORMAL
- en: There's none of the "setup" code that you would see with other languages or
    libraries, such as defining a handler to listen for a button-click event or defining
    a laundry list of attributes for the slider. It's short and simple.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.6 Streamlit is great with LLMs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For better or for worse, technology had a watershed moment in 2022 with the
    launch and subsequent reception of OpenAI's generative AI chatbot, ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how the rise of generative AI has resulted in an explosion in
    popularity for Streamlit, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AI has captured the world's imagination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python is the most popular language for AI development because of its wide adoption
    across the industry and its rich ecosystem of AI-related libraries such as TensorFlow,
    PyTorch, scikit-learn, and LangChain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit is the fastest way to write visual apps in Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The intersection of these facts has meant that developers of all stripes have
    been flocking to Streamlit to develop AI apps.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit itself was quick to capitalize on the sudden popularity of Large Language
    Models (LLMs) like GPT.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, Streamlit makes writing conversational chatbots a cinch through
    the introduction of chat elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 1.3 shows a *complete* working AI chatbot I built using Streamlit chat
    elements in less than 30 lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing 1.3 A working AI chatbot in less than 30 lines of code
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To get this to work, you need to make an OpenAI account, generate an API key
    and plug it into the line `os.environ["OPENAI_API_KEY"] = "sk-..."`. Importantly,
    the above code is for demonstration purposes only. In practice, you should never
    include API keys in any code that you distribute or share. Later in this book,
    we'll explore how to work around this.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 shows the output of our code. You don't have to understand the code
    just yet, but you can hopefully see that Streamlit created a fully functional
    chat interface for us, complete with cute little bot and user avatars.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 A complete AI chatbot in Streamlit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Time will tell if the hype around generative AI proves to be well-founded. In
    the meantime, if you're considering writing an AI app, Streamlit has you covered.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.7 You can share your Streamlit apps for free, in record time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building a web app is one thing, but making it available to people is quite
    another. For a public-facing web app that doesn't use Streamlit, usually that
    involves finding a way to host it (such as using a cloud provider like AWS or
    even acquiring and managing your own servers).
  prefs: []
  type: TYPE_NORMAL
- en: All of this can seem intimidating (not to mention expensive) to the time-strapped
    data scientist or casual hobbyist, especially if the app they're trying to distribute
    is relatively simple and doesn't need to cater to thousands of users.
  prefs: []
  type: TYPE_NORMAL
- en: Enter Streamlit Community Cloud, a completely free and fast way to deploy an
    unlimited number of public-facing Streamlit apps, designed with the same simplicity
    that you'll find in Streamlit itself. Using it is as simple as linking your GitHub
    repository (a way to share your code and manage different versions) to it.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, most of the projects and examples used in this book, besides being
    available on GitHub, have also been published to Streamlit Community Cloud where
    you can access and play with them.
  prefs: []
  type: TYPE_NORMAL
- en: Community Cloud does come with limitations, so it may not be for everyone, but
    it is a nice, hassle-free way to share your creations.
  prefs: []
  type: TYPE_NORMAL
- en: We discuss deploying to Community Cloud in detail in Chapter 5, and other options
    in Chapter 12 if Community Cloud doesn't meet your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.8 Streamlit has a huge, friendly community
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit's user base is growing every day, and the more it grows, the more
    questions people have. Luckily, Streamlit's forums are friendly and the members
    (including the team behind Streamlit) are quite responsive.
  prefs: []
  type: TYPE_NORMAL
- en: In researching this book, for instance, I needed to find out more about how
    Streamlit works under the hood. A forum comment by a Streamlit engineer helped
    me identify the right place to check in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: If you've exhausted your Google-fu and still have a question that stumps you,
    help is at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.9 Streamlit has excellent support for data science and visualizations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit's original design prioritized data scientists, so you may be unsurprised
    to learn that it has great support for all sorts of data visualizations, powered
    by Python's already-rich set of visualization libraries.
  prefs: []
  type: TYPE_NORMAL
- en: This means that you can use your favorite visualization library to create charts
    (Matplotlib, Plotly, Altair etc.), graphs (GraphViz) or 3D renders (PyDeck), and
    display them in Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 shows a histogram rendered in Streamlit using the Matplotlib library.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 A histogram in Streamlit created using the popular Matplotlib library
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Streamlit also works great with Pandas, which is an extremely popular library
    that makes working with tabular data easy via its central concept of dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: A dataframe is a table-based data structure that enables developers to ingest,
    wrangle and analyze data in various ways. If you're a data scientist, there's
    a good chance that you use it regularly in your work.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit has first-class support for dataframes with the ability to display
    them directly and even edit them visually.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 shows an example of this where we enable the user to edit a Pandas
    dataframe live in the Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 An editable Pandas dataframe as displayed in Streamlit
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We'll explore Pandas and dataframes in more detail in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3.10 You can extend Streamlit with third-party components or build your own
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we saw earlier, Streamlit saves you time by providing pre-built UI elements
    and limits the amount of customization you can perform on them.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, this is actually a good thing since it gives you space to
    focus on your logic. Other times, it can feel restrictive because the specific
    experience you have in mind may be challenging to build out of the box with Streamlit's
    building blocks.
  prefs: []
  type: TYPE_NORMAL
- en: In these situations, Streamlit provides a way out in the form of Streamlit Components,
    which are modules that third-party developers can create to extend its functionality.
    Streamlit Components can range from things that fill perceived gaps in Streamlit's
    natively-available elements, such as a search box with autocomplete, to entire
    mini-apps (an audio recorder, say) that you can embed in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit publishes popular components in a gallery on its website where you
    can view how they look and work. Installing a component is as easy as installing
    any other Python library.
  prefs: []
  type: TYPE_NORMAL
- en: If you have some frontend development experience, you can even create your own
    components. This does require knowledge of the web languages we mentioned earlier
    (HTML, CSS, and Javascript), but can enable you to fine-tune the experience you
    create for your users. We explore how to create our own Streamlit Components in
    Chapter 15.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 What can you build with Streamlit?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit offers a versatile platform for creating a wide array of interactive
    applications. In this section, we'll explore the diverse range of projects that
    can be built using Streamlit, showcasing its adaptability and utility.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.1 Data applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit was originally designed for data scientists, and its usefulness in
    creating data applications remains one of its greatest selling points.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kinds of data-related applications you can create with Streamlit include,
    but are not limited to:'
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards that display metrics that decision makers at a company care about
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data exploration apps that enable you to dive into and get a feel for datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizations that users can interact with to understand data better
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning model deployments that enable users to upload inputs to get
    back predictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.4.2 Internal tools for your workplace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data apps may be the most well-known use case for Streamlit, but in my opinion,
    it is equally well-suited for developing internal tools for employees at your
    company.
  prefs: []
  type: TYPE_NORMAL
- en: 'This might include applications such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Project management dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time tracking apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shift scheduling tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory management systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File converter utilities, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several factors make these tools ideal candidates for Streamlit apps:'
  prefs: []
  type: TYPE_NORMAL
- en: They generally need only cater to a limited number of concurrent users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are scrappy in nature and may be required in a short time frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most companies don't have room in their budgets to hire full-time engineers
    to build them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit is easy enough that even semi-technical people with a passing knowledge
    of Python can wield it quite effectively to build what they need.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.3 Apps that use Generative AI like LLMs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing generative AI apps often tends to involve adding a thin layer of business
    logic on top of API calls to a generative AI service such as OpenAI's GPT or Anthropic's
    Claude.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit works quite well for these tools, letting you roll out AI functionality
    with a UI in a short time with out-of-the-box support for common AI form factors
    such as chatbots.
  prefs: []
  type: TYPE_NORMAL
- en: It also helps that Python's libraries for interacting with generative AI (LangChain,
    for one) are second to none, and Streamlit is perfectly placed to take advantage
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 An AI interviewer chatbot from Streamlit's app gallery ([https://aiinterviewer.streamlit.app/](https://aiinterviewer.streamlit.app/))
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 1.4.4 Prototypes for large apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit can be useful even to a dedicated software engineering team tasked
    with building a large, ambitious application. Such projects tend to be expensive
    in terms of developer time and effort to develop, and the work is spread out over
    months or years. Even with an iterative approach to development, it frequently
    takes a long time to see any results, at which point many incorrect and expensive-to-fix
    assumptions may have been made.
  prefs: []
  type: TYPE_NORMAL
- en: Early design mocks help solve this issue, but prototypes are even better. With
    Streamlit, you can churn out lightweight working prototypes that mimic the functionality
    of the larger app quickly. This shows stakeholders what to expect, and helps validate
    basic assumptions about the functionality early on in the process.
  prefs: []
  type: TYPE_NORMAL
- en: If you're a software engineer, going through this exercise not only saves the
    company time and money in the long run; it also drums up excitement among your
    partners and builds support for your work because people appreciate something
    they can experience first-hand more than design documents and mocks.
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.5 Anything else you can dream up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier in the chapter, I characterized Streamlit apps as "Python scripts where
    you can click buttons''. What this boils down to is that your Streamlit app can
    do pretty much anything Python can.
  prefs: []
  type: TYPE_NORMAL
- en: 'You don''t have to use Streamlit in ways that people are familiar with. You
    can find new, creative things to code up into an app. Here are some unconventional
    app ideas for inspiration:'
  prefs: []
  type: TYPE_NORMAL
- en: A personal AI habit-building buddy that lets you record your activity and offers
    advice and encouragement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A maze generator that generates fun puzzles (see figure 1.9)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A laundry tracker that keeps track of when your clothes need to be washed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The point is, you should feel free to experiment! Often, learning a technology
    sparks ideas about new potential applications of it that only you could have thought
    about!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../Images/01__image009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 Dungeon, a game created with Streamlit ([https://dungeon.streamlit.app/](https://dungeon.streamlit.app/))
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 1.5 What not to use Streamlit for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like any other technology, Streamlit comes with tradeoffs. Let's address these
    by taking a look at a few things you can't (or probably shouldn't) use Streamlit
    to develop.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.1 Complex, large-scale applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The size of a Streamlit app's ideal user base is likely measured in the hundreds
    or thousands of users, not in the millions.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to concurrent users (users accessing your app at the same time),
    depending on the kind of app you're creating and its resource requirements to
    serve a single user, once you cross a threshold, your app may have trouble scaling.
  prefs: []
  type: TYPE_NORMAL
- en: As we'll see in a later chapter, Streamlit works by running your entire Python
    script from top to bottom each time something needs to change on the app screen.
    This can have implications for performance, especially if your script executes
    heavy computations. Streamlit's caching feature can usually mitigate this issue,
    but you may occasionally encounter situations where you can't use caching.
  prefs: []
  type: TYPE_NORMAL
- en: There are other reasons that Streamlit may be unsuitable for large production-grade
    applications, though you can often overcome these limitations by using third-party
    components. For instance, Streamlit doesn't have a built-in authentication feature,
    but there are Streamlit components created by other people that add this (e.g.,
    `streamlit-authenticator`).
  prefs: []
  type: TYPE_NORMAL
- en: As the complexity of your app increases, you may find yourself straying from
    the beaten path more frequently. While the Streamlit forums are invaluable for
    identifying workarounds for features that Streamlit is missing, once your app
    reaches a certain level of sophistication, migrating to a different, more flexible
    framework (such as Flask, Django or some of the other options we explored earlier)
    with enhanced capabilities may be warranted.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.2 Apps that require a high degree of UI customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit is designed to simplify adding most common UI elements into your app,
    but now and then you may run into situations where you want fine-grained control
    over how a part of your interface works. Streamlit's limited customizability may
    pose challenges here.
  prefs: []
  type: TYPE_NORMAL
- en: Though Streamlit does offer some relief in the form of theming for color customization
    or the ability to write your own components (or include ones others have shared)
    to augment its native functionality, the larger point stands.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to have precise control over how your app looks or if there are
    specific visual effects you're trying to achieve, Streamlit may not be for you.
    Consider alternatives like React, a framework known for its flexibility and extensive
    customization capabilities (explored in the following section), or even manual
    page design with traditional HTML and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.3 Native desktop or mobile apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit is a web framework, meaning that it produces apps that run within
    a web browser. If you're trying to develop desktop or mobile apps outside the
    browser, opt for native application frameworks such as PyQt or React Native.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth mentioning that you can still access Streamlit apps on mobile devices;
    the point here is that Streamlit does not produce standalone Android or iOS apps
    that run independently of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6 How is Streamlit different from other technologies?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you've thought about or researched ways to create interactive applications
    in the past, chances are that you've come across or possibly used technologies
    similar or related to Streamlit before. This section compares Streamlit to some
    of these in an effort to clarify your understanding.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6.1 Jupyter notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A Jupyter notebook is an interactive environment for data exploration and working
    with code and visualizations. The concept is fairly simple: you write Python code
    (or even just text or markdown) in a "cell,” execute it, and see the output (which
    can be text, some kind of visualization or even something interactive) directly
    below. The output of each cell is retained so you can see what came before it.'
  prefs: []
  type: TYPE_NORMAL
- en: Useful for things like explaining your thought process, playing around with
    data, and sharing your work with colleagues, Jupyter notebooks have become a mainstay
    in the data science community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jupyter is similar to Streamlit in a few respects: they are both Python-based,
    both support tabular and graphical data, both integrate with popular libraries
    like pandas, and they are both popular in the data science world.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are also important differences:'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter is used to create interactive documents, rather than actual apps; it
    is best used for sharing your code and explanations with collaborators rather
    than having that code be executed by actual end users. Streamlit, as we've seen,
    is used to create apps for end users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jupyter's support for engineering practices such as version control is sketchy;
    this is fine because it's meant for exploratory analysis, not shipping production
    dashboards. Streamlit, on the other hand, fits well into a regular engineering
    workflow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The audience for Jupyter notebooks consists of technical folks, not laypeople.
    Streamlit doesn't require the users of your app to be able to read or understand
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All told, Jupyter notebooks are a fantastic initial tool for experimenting with
    code, data and charts. Streamlit is an amazing tool for building and sharing the
    final buttoned-up interactive experience you want users to have, often using the
    code, data and charts you finessed in your Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6.2 HTML, CSS and Javascript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we discussed earlier, HTML, CSS, and Javascript are the big three complementary
    languages of the web.
  prefs: []
  type: TYPE_NORMAL
- en: HTML, or HyperText Markup Language, is used to provide the structure and content
    of a web page, and define elements like headings, lists, divisions, and links
    through a tree of "tags" which can contain other tags.
  prefs: []
  type: TYPE_NORMAL
- en: CSS, or Cascading StyleSheets, lets web developers manage the appearance, layout,
    and formatting of many different web pages in a central place. CSS has options
    to set colors, spacing, fonts, borders, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Javascript is a programming language primarily used to define the dynamic behavior
    of a web page. It can be used to create animations, validate forms, connect to
    other webpages, and pretty much anything else you'd want a web site to do.
  prefs: []
  type: TYPE_NORMAL
- en: Together, these powerful languages enable you to build any web experience you
    want. While they aren't difficult per se to learn, using them effectively to create
    complex apps is a laborious process, so much so that "frontend" development is
    its own discipline in software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit abstracts away the complexity of using these languages in their raw
    form and lets you use a simpler, more concise syntax to write web pages, working
    in the background to generate the equivalent code that a web browser can understand.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6.3 React
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: React is a popular Javascript framework that helps you create fast, responsive
    web pages. Like Streamlit, it is an alternative to using raw HTML, Javascript,
    and CSS to create web applications.
  prefs: []
  type: TYPE_NORMAL
- en: React follows a reusable component-based design where you build up parts of
    a web page using smaller parts and then combine *those* parts to build larger
    parts, working all the way up to a full application. Each such part you create
    is called a component, and can be reused in your app or even shared with other
    people so they can use it in theirs.
  prefs: []
  type: TYPE_NORMAL
- en: React has a declarative programming approach where you describe the UI you want,
    and React takes care of updating the DOM (the tree of HTML elements that lies
    under your web page) to match it.
  prefs: []
  type: TYPE_NORMAL
- en: While React is incredibly powerful and used by frontend developers to create
    complex UIs, its architecture and approach can be challenging to wrap your head
    around. It is also not Python-based.
  prefs: []
  type: TYPE_NORMAL
- en: Though Streamlit actually uses React under the hood, from the programmer's perspective,
    Streamlit trades some of the power and flexibility of React for simpler semantics,
    pre-built elements with some customizability, and the ability to use Python to
    write web pages.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6.4 Flask and Django
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flask and Django are both Python-based web frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Flask is lightweight and minimalistic. It's designed to be straightforward to
    use, and is quite flexible, allowing developers to choose the various libraries
    and tools they prefer rather than being prescriptive. Flask provides the essentials
    you need to create a web app, such as the ability to handle routing and HTTP requests,
    while leaving most of the design choices beyond that to the developer. It's popular
    with web developers who want to employ a modular approach or exercise a high degree
    of control.
  prefs: []
  type: TYPE_NORMAL
- en: Django, on the other hand, is feature-rich and sophisticated. It's more opinionated
    than Flask, following specific design patterns such as the MVT ("Model-View-Template")
    architecture. It also comes with many built-in modules for common tasks, such
    as an admin panel to manage your data models. Django is a popular choice to run
    powerful enterprise-grade applications.
  prefs: []
  type: TYPE_NORMAL
- en: While Flask and Django are similar to Streamlit in that they can all be used
    to build web applications, a key distinction is that Flask and Django are primarily
    *backend* frameworks to be used in conjunction with your *frontend*, which still
    consists of HTML/CSS/Javascript that you have to write or embed within your Python
    code. Not so with Streamlit, which lets you write frontend code in pure Python.
  prefs: []
  type: TYPE_NORMAL
- en: 1.6.5 Tkinter and PyQt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tkinter and PyQt (pronounced "pie-cute") are Python libraries used to create
    graphical user interfaces (GUIs).
  prefs: []
  type: TYPE_NORMAL
- en: Tkinter comes bundled with Python and provides a set of widgets you can use
    to create a desktop application. It is popular with beginners and suitable for
    creating simple apps.
  prefs: []
  type: TYPE_NORMAL
- en: PyQt is similar, but it's more powerful and mature (and more complex) than Tkinter.
    It's actually a wrapper around the C++ Qt application framework. PyQt lets you
    create quite sophisticated GUIs and has a wide range of features.
  prefs: []
  type: TYPE_NORMAL
- en: As you might have guessed, the key difference between Tkinter/PyQt and Streamlit
    is that the latter is used to create web applications, not desktop applications.
    Over the last couple of decades, users have increasingly become comfortable with
    web-based software that never needs to be installed or updated, which makes Streamlit
    arguably more useful than the other two for most use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7 Learning through projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know what Streamlit can and can't do, let's talk about what's in
    store for you as you go through the rest of this book. I strongly believe that
    the best way to learn a piece of technology is to gain experience in using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is designed to give you this experience by building real projects
    that require you to think through actual problems and how to solve them. In fact,
    through these projects, we will learn not only about Streamlit itself, but also:'
  prefs: []
  type: TYPE_NORMAL
- en: large language models (LLMs) like OpenAI's GPT, and how to create LLM-powered
    apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: best practices around User Experience (UX) and User Interface (UI) design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: best practices around code organization and structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a sneak preview of some of the things we''ll build together:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.1 An interactive metrics dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project, we'll study the requirements of a CEO who needs to make important
    decisions about their company, and design an interactive dashboard that they'll
    look at every day to understand what's going on in the business.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we'll explore Streamlit's charting and visualization capabilities,
    as well as how to work with Pandas dataframes.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.2 A rent-vs-buy housing calculator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our second real-world application, we'll evaluate the benefits and costs
    of owning a home as opposed to renting, and design a calculator that helps people
    make their decision.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we'll experiment with Streamlit's layout options and different ways for
    users to provide inputs. We'll also dive deep into how Streamlit maintains state.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.3 A CRUD application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our next stop is a *Create-Read-Update-Delete* (CRUD) application where you'll
    need to go beyond a siloed app and establish a connection to a database for persistent
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see how this unlocks powerful possibilities in the kinds of things you
    can build. We'll also explore data tables and theming.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.4 An AI trivia app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With three real apps that explore Streamlit's key features under your belt,
    it's now time to turn your attention to the exciting world of generative AI. To
    get a taste of what you can do in this space, we'll design an app that can answer
    trivia questions using OpenAI's GPT.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.5 A chatbot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this project, you'll expand your LLM capabilities with the LangChain libraries
    and build your very custom chatbot. We'll learn how Streamlit's chat elements
    make this easy to do.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.6 A custom knowledge base
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want a second brain? For our third LLM project, that's essentially what we're
    building. We'll learn how to integrate various sources of information into a query-able
    knowledge base and expose it in a Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.7 Your own Streamlit component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This one's pretty advanced, so strap in! We'll first identify some functionality
    we want that Streamlit's pre-built elements can't serve out of the box. We'll
    then use the React framework to create that functionality and integrate it into
    an app.
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Streamlit is a framework that lets you build web apps in pure Python with no
    HTML, CSS or Javascript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streamlit has been exploding in popularity due to its simplicity, development
    velocity, support for LLMs, powerful visualizations, and integration with data
    science libraries, among other features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can create many types of applications with Streamlit: data apps, internal
    tools for your workplace, LLM apps, prototypes for larger apps, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You shouldn't use Streamlit for large-scale apps meant for millions of users,
    or apps that require a high level of UI customization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
