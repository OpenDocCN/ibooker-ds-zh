- en: 'Chapter 3\. QGIS: Exploring PyQGIS and Native Algorithms for Spatial Analytics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。QGIS：探索PyQGIS和本地算法进行空间分析
- en: In this chapter, we will continue to focus on QGIS as you level up your skills
    with Python and QGIS. These are foundational concepts, and learning them will
    be critical to future geospatial analysis skills, including spatial algorithms,
    data engineering, prediction modeling and forecasting, and machine learning.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续专注于QGIS，随着您通过Python和QGIS提升技能。这些是基础概念，学习它们对未来的地理空间分析技能至关重要，包括空间算法、数据工程、预测建模和机器学习。
- en: The QGIS integration of Python is called *PyQGIS*, a Python API that uses defined
    protocols and customization to automate workflows. Automation is important when
    running large scripts or building applications. The integration with an API allows
    you access to a large variety of datasets for exploration and analysis. You can
    create, modify, and query digital objects of interest that represent features
    in the real world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS的Python集成称为*PyQGIS*，这是一个使用定义的协议和定制来自动化工作流程的Python API。在运行大型脚本或构建应用程序时，自动化非常重要。通过API与集成，您可以访问各种数据集进行探索和分析。您可以创建、修改和查询表示现实世界中特征的数字对象。
- en: PyQGIS is a wrapper around the underlying C++ library. All the methods and class
    variables implemented by the C++ version of `QgisInterface` are made available
    through the Python wrapper. PyQGIS *classes* target functionality within QGIS.
    You do not need a separate installation of Python because it is installed with
    QGIS directly into your system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PyQGIS是基于底层C++库的一个包装器。所有由C++版本的`QgisInterface`实现的方法和类变量都通过Python包装器提供。PyQGIS的*类*专注于QGIS内的功能。您无需单独安装Python，因为它与QGIS一起直接安装到您的系统中。
- en: Python is an object-oriented programming language. You can think of objects
    as chunks of data (*attributes*) and behaviors (*methods*). In Python, objects
    also include functions. Attributes can be either data or functions. Methods are
    also attributes, which means you can store them in variables, just like any other
    attribute. A Python class describes instructions for how to change the state of
    an object and the attributes of the object.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种面向对象的编程语言。您可以将对象视为数据块（*属性*）和行为（*方法*）。在Python中，对象还包括函数。属性可以是数据或函数。方法也是属性，这意味着您可以像任何其他属性一样将它们存储在变量中。Python类描述如何改变对象状态和对象属性的指令。
- en: I will revisit these concepts when we briefly explore Python scripting templates
    later in the chapter, but I will also highlight them when we use methods or functions
    that are defined by the `QgisInterface` class. We will begin by using PyQGIS to
    navigate a sample project. You will upload data layers and learn how to interact
    with them using the Python Console.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本章稍后简要探讨Python脚本模板时再次讨论这些概念，但在我们使用由`QgisInterface`类定义的方法或函数时，我还将突出它们。我们将首先使用PyQGIS导航一个示例项目。您将上传数据层并学习如何使用Python控制台与它们交互。
- en: 'Exploring the QGIS Workspace: Tree Cover and Inequality in San Francisco'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索QGIS工作空间：旧金山的树木覆盖和不平等
- en: 'You learned about urban heat islands in [Chapter 2](ch02.xhtml#essential_facilities_for_spatial_analys),
    and we’re going to expand on that here. It is well known that neighborhoods with
    less tree cover tend to be hotter, often leading to increased health risks. We’re
    going to explore that idea in the first example of this chapter as it plays out
    in one US city, San Francisco, with the research question: *which neighborhoods
    in San Francisco are less likely to have tree cover?*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第2章](ch02.xhtml#essential_facilities_for_spatial_analys)中学习了城市热岛现象，我们在这里将进一步展开讨论。众所周知，树木覆盖较少的社区往往更炎热，这常常导致健康风险增加。我们将在本章的第一个示例中探索这个想法，看看在美国的一个城市，旧金山，有哪些社区可能树木覆盖较少。
- en: 'The map in [Figure 3-1](#urban_heat_islands_in_san_franciscocomm) has four
    layers of data superimposed onto it: one delineating neighborhood boundaries,
    one that provides data about tree cover in San Francisco, one that provides data
    about income level and race, and an OpenStreetMap for location context. The purple
    lines indicate neighborhood boundaries represented as a summary feature class.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-1](#urban_heat_islands_in_san_franciscocomm)中的地图有四个数据层叠加在上面：一个描绘社区边界的层，一个提供旧金山树木覆盖数据的层，一个提供收入水平和种族数据的层，以及一个提供位置背景的OpenStreetMap。紫色线条表示以摘要要素类表示的社区边界。'
- en: 'One last thing we need is a *proxy*, or stand-in, for low-income neighborhoods.
    Is there a measure already in use that will tell us what we need to know? In fact,
    there is: [Equity Strategy Neighborhoods](https://oreil.ly/HeLPB). The San Francisco
    Municipal Transportation Agency (SFMTA) uses this measure in applying equity policies
    that attempt to address disparities in transit performance. These neighborhoods
    were identified based on their percentage of low-income households and public
    housing and residents’ access to personal vehicles, race/ethnicity, and disability.
    This could serve our purpose as a proxy for low-income neighborhoods.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要最后一件事情，那就是*代理*或代替，用于低收入社区。是否有已经在使用的措施，可以告诉我们需要知道的信息？事实上，有：[Equity Strategy
    Neighborhoods](https://oreil.ly/HeLPB)。旧金山市交通局（SFMTA）在应用旨在解决交通性能不平等的政策时使用此措施。这些社区根据其低收入家庭的比例、公共住房以及居民对私人车辆的访问、种族/族裔和残疾进行了识别。这可以作为我们需要的低收入社区的代理。
- en: With these layers in place, we can think about where areas of adequate tree
    cover are located and compare them to neighborhoods of different income levels
    and racial composition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些图层，我们可以考虑树木覆盖充足的区域位于何处，并将它们与不同收入水平和种族组成的社区进行比较。
- en: '![Urban heat islands in San Francisco, generated in ArcGIS Online](assets/pgda_0301.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![旧金山的城市热岛，由ArcGIS Online生成](assets/pgda_0301.png)'
- en: Figure 3-1\. Urban heat islands in San Francisco, generated in ArcGIS Online
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 旧金山的城市热岛，由ArcGIS Online生成
- en: 'You’ll be looking at sample data from [DataSF](https://oreil.ly/pLNTb) (pictured
    in [Figure 3-2](#sample_data_visible_in_the_qgis_map_can)). Download the shapefiles
    from these three data resource links: [Equity Strategy Neighborhoods](https://oreil.ly/HPve3),
    [SF Urban Tree Canopy](https://oreil.ly/RIKUa), and [SF_neighborhoods](https://oreil.ly/qNEsQ).
    You will return to these files as soon as you set up your workspace.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会查看来自[DataSF](https://oreil.ly/pLNTb)的样本数据（如[图 3-2](#sample_data_visible_in_the_qgis_map_can)所示）。从以下三个数据资源链接下载shapefile文件：[Equity
    Strategy Neighborhoods](https://oreil.ly/HPve3)，[SF Urban Tree Canopy](https://oreil.ly/RIKUa)，以及[SF_neighborhoods](https://oreil.ly/qNEsQ)。一旦设置好工作空间，你将返回这些文件。
- en: '![Sample data visible in the QGIS map canvas](assets/pgda_0302.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在QGIS地图画布中可见的样本数据](assets/pgda_0302.png)'
- en: Figure 3-2\. Sample data visible in the QGIS map canvas
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-2\. 在QGIS地图画布中可见的样本数据
- en: The Python Plug-in
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python插件
- en: Open the Python Console, just as you did in [Chapter 2](ch02.xhtml#essential_facilities_for_spatial_analys),
    by either selecting the icon in the toolbar at the top of your window or opening
    Plugins >> Python Console from the menu bar. You can click the console, and the
    plug-in will be added to your work space, like in [Figure 3-3](#installing_the_python_plug_in).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Python控制台，就像你在[第二章](ch02.xhtml#essential_facilities_for_spatial_analys)中所做的那样，可以通过在窗口顶部的工具栏中选择图标或从菜单栏中打开Plugins
    >> Python Console来执行。你可以点击控制台，插件将添加到你的工作空间中，就像[图 3-3](#installing_the_python_plug_in)中那样。
- en: '![Installing the Python plug-in](assets/pgda_0303.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![安装Python插件](assets/pgda_0303.png)'
- en: Figure 3-3\. Installing the Python plug-in
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-3\. 安装Python插件
- en: The `QgisInterface` class provides methods for interacting with the QGIS environment.
    When QGIS is running, a variable called `iface` is set up to provide an object
    of the `QgisInterface` class to interact with the running QGIS environment. This
    interface allows access to the map canvas, menus, toolbars, and other parts of
    the QGIS application. Both the Python Console and plug-in can use `iface` to access
    various parts of the QGIS interface.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`QgisInterface`类提供了与QGIS环境交互的方法。当QGIS运行时，设置一个名为`iface`的变量，以提供一个`QgisInterface`类的对象，用于与运行中的QGIS环境交互。该接口允许访问地图画布、菜单、工具栏和QGIS应用程序的其他部分。Python控制台和插件都可以使用`iface`访问QGIS界面的各个部分。'
- en: In the QGIS desktop application, `iface.activeLayer()` gives access to the currently
    selected layer in the legend. The most common use of the `iface` class is to get
    a reference to the canvas where maps are displayed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在QGIS桌面应用程序中，`iface.activeLayer()`可以访问图例中当前选择的图层。`iface`类最常见的用法是获取显示地图的画布的引用。
- en: The prompt at the bottom left of [Figure 3-4](#python_console_left_parenthesisleftrigh)
    is where you will enter your short code snippets. The results of your queries
    will appear in the upper console. The code editor, on the right, accommodates
    longer lines of code and lets you work with your code a bit before you run it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 3-4](#python_console_left_parenthesisleftrigh) 左下角的提示是您将输入短代码片段的位置。您的查询结果将显示在上部控制台中。右侧的代码编辑器可以容纳更长的代码行，并允许您在运行代码之前对其进行一些处理。
- en: '![Python Console (left) and a Python code editor (right)](assets/pgda_0304.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Python 控制台（左）和 Python 代码编辑器（右）](assets/pgda_0304.png)'
- en: Figure 3-4\. Python Console (left) and a Python code editor (right)
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-4\. Python 控制台（左）和 Python 代码编辑器（右）
- en: Reading the toolbar icons from left to right in [Figure 3-4](#python_console_left_parenthesisleftrigh),
    you will see Clear Console (removes the contents in the console), Run Command,
    Show Editor, Options, and Help.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 3-4](#python_console_left_parenthesisleftrigh) 中从左到右阅读工具栏图标，您将看到 Clear
    Console（清除控制台内容），Run Command，Show Editor，Options 和 Help。
- en: Selecting Options in the toolbar lets you set the font and perform additional
    customization. The code editor also lists icons for functions, which you can use
    when creating scripts directly in the editor window. A full list is given in [Table 3-1](#function_icons_in_qgis).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具栏中选择选项，可以设置字体并执行其他自定义操作。代码编辑器还列出了函数图标，您可以在直接在编辑器窗口中创建脚本时使用它们。完整列表在 [表 3-1](#function_icons_in_qgis)
    中给出。
- en: Table 3-1\. Function icons in QGIS
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-1\. QGIS 中的功能图标
- en: '| ![Inline](assets/icon01.png) | Clear Console |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon01.png) | 清除控制台 |'
- en: '| ![Inline](assets/icon02.png) | Run Command/Run Script |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon02.png) | 运行命令/运行脚本 |'
- en: '| ![Inline](assets/icon03.png) | Show Editor/Open in External Editor |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon03.png) | 显示编辑器/在外部编辑器中打开 |'
- en: '| ![Inline](assets/icon04.png) | Options |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon04.png) | 选项 |'
- en: '| ![Inline](assets/icon05.png) | Python Console Help |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon05.png) | Python 控制台帮助 |'
- en: '| ![Inline](assets/icon06.png) | Open Script |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon06.png) | 打开脚本 |'
- en: '| ![Inline](assets/icon07.png) | Save |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon07.png) | 保存 |'
- en: '| ![Inline](assets/icon08.png) | Save As |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon08.png) | 另存为 |'
- en: '| ![Inline](assets/icon09.png) | Cut |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon09.png) | 剪切 |'
- en: '| ![Inline](assets/icon10.png) | Copy |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon10.png) | 复制 |'
- en: '| ![Inline](assets/icon11.png) | Paste |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon11.png) | 粘贴 |'
- en: '| ![Inline](assets/icon12.png) | Find Text |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon12.png) | 查找文本 |'
- en: '| ![Inline](assets/icon13.png) | Comment |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon13.png) | 注释 |'
- en: '| ![Inline](assets/icon14.png) | Uncomment |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon14.png) | 取消注释 |'
- en: '| ![Inline](assets/icon15.png) | Object Inspector |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| ![内联](assets/icon15.png) | 对象检查器 |'
- en: 'Type into the console at the >>> prompt:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 >>> 提示符下在控制台中键入：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Hit Enter and you get the output: Save the Planet!'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按 Enter 键，您将得到输出：拯救地球！
- en: I also want to point out that the string “Save the Planet!” appears in red in
    the GQIS console when you type in this code, while the rest appears in black.
    This is called *syntax highlighting*, and it’s a helpful tool that makes it easier
    to spot if you’ve made any typing mistakes in your code. Brackets will also be
    highlighted, because it is a common mistake to accidentally leave out a required
    opening or closing bracket.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想指出，当您在 GQIS 控制台中键入此代码时，“拯救地球！” 字符串以红色显示，而其余部分以黑色显示。这称为 *语法高亮*，是一个有用的工具，使您更容易发现代码中是否有任何输入错误。括号也将被突出显示，因为意外地留下所需的开放或闭合括号是常见错误。
- en: Accessing the Data
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: Before we explore a multilayer example, let’s load a vector layer using Python.
    This is the neighborhood layer from [Figure 3-1](#urban_heat_islands_in_san_franciscocomm).
    You will need to know the URL from where you downloaded your files. If you go
    to the Browser panel and locate the downloaded file, the URL is retrievable from
    Layer Properties, as shown in [Figure 3-5](#loading_data_from_the_browser).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索多层示例之前，让我们使用 Python 加载一个矢量图层。这是来自 [图 3-1](#urban_heat_islands_in_san_franciscocomm)
    的邻域图层。您需要知道从哪里下载了您的文件的 URL。如果您进入浏览器面板并找到已下载的文件，可以从图层属性中检索到 URL，如 [图 3-5](#loading_data_from_the_browser)
    所示。
- en: '![Loading data from the Browser](assets/pgda_0305.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器加载数据](assets/pgda_0305.png)'
- en: Figure 3-5\. Loading data from the Browser
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-5\. 从浏览器加载数据
- en: 'You’ll have to tell `iface` to add the vector layer. In the code snippet that
    follows, `ogr` is the provider key name you saw in [Chapter 2](ch02.xhtml#essential_facilities_for_spatial_analys).
    You will work with a few different provider keys in this chapter. Replace `*Path
    to your shape file.shp*` with the URL you retrieved from the Layer Properties.
    You’ll also create a variable for San Francisco, `SF`, and store the location
    information in it, which lets you refer to it later without having to reenter
    the string:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code here is obtaining the polygon shapes for the neighborhoods in the layer
    we’re calling SF_neighborhoods. If the vector is valid, this code will add the
    layer to the canvas. The `.isValid``():` is a program check to verify that the
    input entered is correct.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'You have now loaded a layer onto the canvas from the Python Console. The color
    of the vector layer is random, but you can modify the attributes:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, you’ll want to include the names of the neighborhoods. Select Layer Properties
    and format the Labels to update the map with the names. In [Figure 3-6](#layer_properties_adding_labels_to_a_map),
    you can see how to adjust the Font, Style (bold), Size, Color, and Opacity.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Layer properties: adding labels to a map](assets/pgda_0306.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-6\. Layer properties: adding labels to a map'
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The labels are added to the canvas ([Figure 3-7](#sf_neighborhood_layer_from_qgiscomma_wi))
    when you select Apply and OK.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Load in the remaining layers. The quickest way is to use the `addVectorLayer()`
    method as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![SF neighborhood layer from QGIS, with labels](assets/pgda_0307.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Figure 3-7\. SF neighborhood layer from QGIS, with labels
  id: totrans-63
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Earlier, you used the method `QgsProject.instance().addMapLayer(SF)` to set
    the active layer. Here, you are adding the vector layer, `iface.addVectorLayer`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Working with Layer Panels
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we view the final map, I want to rewind a little to show you how we got
    here. On your canvas you have three vector layers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Click on View in the menu bar and scroll down to Panels ([Figure 3-8](#types_of_panels_available_in_qgis))
    to see a nested menu of Panel options. You can dock these options onto your canvas
    to make them accessible while you are building a visualization (map) and interacting
    with the features and underlying data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Types of panels available in QGIS](assets/pgda_0308.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 3-8\. Types of panels available in QGIS
  id: totrans-69
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To dock panels, you can drag them on top of one another to save space and move
    between them as needed by selecting the panel. If you decide you prefer to undock
    them, click the stacked image next to the X, and one by one they will undock.
    I suggest docking Layers >> Layer Styling >> Browser >> Processing Toolbox. As
    you begin working, you can remove or add panels simply by returning to your canvas
    or by clicking View in the menu and scrolling to Panels, then checking or unchecking
    options.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The panels are a type of widget. You can use them to provide inputs and visibility,
    digitize coordinates, perform statistical analysis, and add data sources, to name
    a few examples. See the [QGIS User Guide](https://oreil.ly/QWQF1) for details
    on all the different options. I will walk you through the panels I use in almost
    all of the map projects I create.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '面板是一种小部件。你可以使用它们提供输入和可见性，数字化坐标，执行统计分析和添加数据源等等。有关所有不同选项的详细信息，请参阅[QGIS用户指南](https://oreil.ly/QWQF1)。我将向你展示我在创建几乎所有地图项目中使用的面板。  '
- en: In [Figure 3-9](#editing_the_layers_on_the_map_canvas), you can see that the
    layers in the upper left window have been moved into a hierarchy that allows each
    to be visible. For example, the labels for the neighborhoods are at the highest
    level, so they aren’t buried beneath the other features or the polygons.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '在[图3-9](#editing_the_layers_on_the_map_canvas)中，你可以看到左上窗口中的图层已经移动到了一个允许每个图层都可见的层次结构中。例如，社区的标签位于最高层级，因此它们不会被其他要素或多边形掩盖。  '
- en: '![Editing the layers on the map canvas](assets/pgda_0309.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![编辑地图画布上的图层](assets/pgda_0309.png)  '
- en: Figure 3-9\. Editing the layers on the map canvas
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '图3-9\. 编辑地图画布上的图层  '
- en: In the Layers panel, you can also adjust opacity and colors. You want to be
    certain that the Equity Strategy Neighborhoods data is visible but not masking
    the SF Urban Tree Canopy beneath. Select the panels and arrange them on the canvas.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '在图层面板中，你还可以调整不透明度和颜色。你要确保“Equity Strategy Neighborhoods”数据可见，但不要遮盖SF Urban
    Tree Canopy下面的数据。选择面板并在画布上排列它们。  '
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '小贴士  '
- en: Now that you have been introduced to writing Python code in the console, the
    [QGIS Cheat sheet for PyQGIS](https://oreil.ly/yXc82) has a list of code snippets
    for you.  Feel free to experiment with them and decide which might introduce efficiencies
    in your workflow.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '现在你已经开始在控制台中编写Python代码了，[QGIS PyQGIS速查表](https://oreil.ly/yXc82)列出了一些代码片段供你参考。请随意尝试它们，并决定哪些可以提高工作效率。  '
- en: Addressing the Research Question
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '解答研究问题  '
- en: Now let’s address our original research question. How *does* the tree-cover
    data line up with low-income neighborhoods? Can you get a sense of the answer
    by looking at the map?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们来解答我们最初的研究问题。通过查看地图，你能感受到树木覆盖数据与低收入社区的联系吗？  '
- en: At a glance, the tree cover seems sparse in many of the low-income areas we’ve
    identified. Performing additional calculations of tree-cover density would be
    the next step in quantifying what we observe in the maps. Selecting one of the
    neighborhoods reveals the underlying data ([Figure 3-10](#selecting_a_neighborhood_and_exploring)).
    We won’t come to any formal conclusions here, but I encourage you to see how deep
    you can go.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，我们识别出的许多低收入地区的树木覆盖似乎稀疏。进一步计算树木覆盖密度将是量化我们在地图中观察到的内容的下一步。选择其中一个社区会显示底层数据（[图3-10](#selecting_a_neighborhood_and_exploring)）。我们不会在这里得出任何正式结论，但我鼓励你深入挖掘。
- en: '![Selecting a neighborhood and exploring the features](assets/pgda_0310.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![选择社区并探索功能](assets/pgda_0310.png)  '
- en: Figure 3-10\. Selecting a neighborhood and exploring the features
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '图3-10\. 选择社区并探索功能  '
- en: This exercise helped you get familiar with the QGIS workspace and the Python
    plug-in. You learned how to work with layers and add labels. You also learned
    about finding existing datasets that can serve as a proxy for something you want
    to measure, and you got a sense of how aligning two datasets on a map can help
    address research questions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '这个练习帮助你熟悉了QGIS工作空间和Python插件。你学会了如何处理图层和添加标签。你还学到了如何查找现有数据集，这些数据集可以作为你想要测量的东西的代理，你也能感受到在地图上对齐两个数据集如何帮助解决研究问题。  '
- en: 'Web Feature Service: Identifying Environmental Threats in Massachusetts'
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Web Feature Service: 马萨诸塞州的环境威胁识别  '
- en: In the next example, you will explore another open dataset. The Massachusetts
    state government’s [MassGIS Bureau of Geographic Information](https://oreil.ly/SNfaJ)
    provides a GIS tool called [MassMapper](https://oreil.ly/JickV). One of the many
    data layers provided within this tool is called [Areas of Critical Environmental
    Concern (ACECs)](https://oreil.ly/9Z3zd). This layer is developed and maintained
    by the Massachusetts Department of Conservation and Recreation (DCR). According
    to the site, this data provides information about places in Massachusetts selected
    for the “quality, uniqueness, and significance of their natural and cultural resources.”
    Using the ACECs data, we can build a map and see how these areas might be affected
    by local features, such as the density of nearby roadways and proximity to wetlands
    or airports.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，你将探索另一个开放数据集。马萨诸塞州政府的[马萨诸塞州地理信息局](https://oreil.ly/SNfaJ)提供了一个名为[MassMapper](https://oreil.ly/JickV)的
    GIS 工具。该工具中提供的许多数据层之一称为[关键环境关注区（ACECs）](https://oreil.ly/9Z3zd)。该图层由马萨诸塞州保护与娱乐部门（DCR）开发和维护。根据该网站，这些数据提供了有关麻省被选为“其自然和文化资源的质量、独特性和重要性”的地点信息。利用
    ACECs 数据，我们可以构建地图，查看这些区域可能受到当地特征（如附近道路密度、湿地或机场的接近度）的影响。
- en: Accessing the Data
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数据
- en: There are many ways to connect to data in QGIS, so here we’ll explore a new
    one.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多连接到 QGIS 数据的方法，所以这里我们将探索一个新的方法。
- en: The Web Feature Service (WFS) specification is a type of provider key that allows
    access to geographic features, with geometry and attributes available for your
    queries and analyses.  Connect to the data by selecting Layer >> Data Source Manager
    or by clicking the icon in the toolbar. Select WFS/OGC API - Features. You can
    also scroll vertically in your Browser panel. Click on the WFS/OGC API, and the
    pop-up in [Figure 3-11](#creating_a_new_wfs_connection) will become visible.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Web Feature Service（WFS）规范是一种允许访问地理要素的提供者关键字，其中包括几何和属性可用于您的查询和分析。通过选择“图层” >>
    “数据源管理器”或单击工具栏中的图标来连接数据。选择 WFS/OGC API - Features。您还可以在浏览器面板中垂直滚动。单击 WFS/OGC API，然后
    [图 3-11](#creating_a_new_wfs_connection) 中的弹出窗口将变为可见。
- en: '![Creating a new WFS connection](assets/pgda_0311.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个新的 WFS 连接](assets/pgda_0311.png)'
- en: Figure 3-11\. Creating a new WFS connection
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-11\. 创建一个新的 WFS 连接
- en: 'Connect to the service by entering the URL *http://giswebservices.massgis.state.ma.us/geoserver/wfs*
    into the dialog field ([Figure 3-12](#wfs_connection_details)). You’ll be prompted
    to create a name for the connection: use MASS_Sample and click OK. The defaults
    are fine.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 URL *http://giswebservices.massgis.state.ma.us/geoserver/wfs* 输入到对话框字段中（[图
    3-12](#wfs_connection_details)），连接到服务。您将提示创建连接的名称：使用 MASS_Sample 并单击“确定”。默认设置很好。
- en: '![WFS connection details](assets/pgda_0312.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![WFS 连接详细信息](assets/pgda_0312.png)'
- en: Figure 3-12\. WFS connection details
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-12\. WFS 连接详细信息
- en: The new connection appears in Server Connections. Click Connect and you will
    see the list of available layers, as pictured in [Figure 3-13](#data_source_manager_wfs_connection).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 新的连接出现在服务器连接中。点击连接，你将看到可用图层的列表，如图 [3-13](#data_source_manager_wfs_connection)
    所示。
- en: 'Scroll down to find and select the following layers, then click Add:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到底部找到并选择以下图层，然后单击添加：
- en: GISDATA.AIRPORTS_PT (locations of airports)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GISDATA.AIRPORTS_PT（机场位置）
- en: GISDATA.BM2_CH_BIOMAP2_WETLANDS (locations of wetlands)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GISDATA.BM2_CH_BIOMAP2_WETLANDS（湿地位置）
- en: GISDATA.ACECS_POLY (areas of critical environmental concern)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GISDATA.ACECS_POLY（关键环境关注区域）
- en: GISDATA.CENSUS2010TIGERROADS_ARC (locations of roads)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GISDATA.CENSUS2010TIGERROADS_ARC（道路位置）
- en: '![Data Source Manager WFS connection](assets/pgda_0313.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![数据源管理器 WFS 连接](assets/pgda_0313.png)'
- en: Figure 3-13\. Data Source Manager WFS connection
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-13\. 数据源管理器 WFS 连接
- en: Discovering Attributes
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现属性
- en: 'Enter the following code into the console and hit run (the green arrow):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入以下代码并点击运行（绿色箭头）：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This creates a reference to the active layer, in this case, GISDATA.AIRPORTS_PT.
    Once you create this reference, you can access the properties of the layer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建对活动图层的引用，在本例中为 GISDATA.AIRPORTS_PT。一旦创建了此引用，您可以访问图层的属性。
- en: Now you can explore a few of the options or access them directly in the console.
    First, select Open Attribute Table to view the attributes associated with the
    layer. You can do the same for any layer you want to explore.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以探索一些选项或直接在控制台中访问它们。首先，选择“打开属性表”以查看与图层相关的属性。您可以对任何要探索的图层执行相同操作。
- en: As you type code into the console, you may notice that suggestions appear, as
    shown in [Figure 3-14](#automatic_suggestions_in_the_qgis_pytho).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic suggestions in the QGIS Python Console](assets/pgda_0314.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Figure 3-14\. Automatic suggestions in the QGIS Python Console
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s look at the snippet that appears when opening the attribute table:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The yellow box contains the arguments you can supply to the `showAttributeTable`
    method and what will be delivered. Here you are calling the `QgsVectorLayer` object
    and a string that represents a filter expression, which you can use to filter
    the data by identifying a specific field, as shown in [Figure 3-15](#layers_and_attribute_table).
    The `filterExpression` is not required, which is indicated by the empty string:
    `=''''`. If left empty, it simply provides the default, an empty string in this
    case. The output `QDialog` constructs the actual attribute table. This is just
    a brief sample; to learn more about the full functionalities of this particular
    class, see the [`QgisInterface` documentation](https://oreil.ly/70feB).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Layers and attribute table](assets/pgda_0315.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Figure 3-15\. Layers and attribute table
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Working with Iterators
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let’s find the airports. Writing the following code directly into the
    console identifies the layer and feature count of the towns where airports are
    located:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And here is a snippet of the output:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An iterator is a type of Python object that contains items that can be iterated
    upon. Iterators give you a window into a larger dataset, one element at a time.
    They are similar to other objects, like lists, but with a key difference: when
    you create an iterator, you don’t store all the items in memory. The iterator
    loads a single item at a time and then fetches the next item when asked for it.
    This makes iterators very efficient. They can read large amounts of data without
    having to read the entire dataset. QGIS implements iterators for many different
    object types.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, the result of calling `layer.getFeatures()` is an iterator;
    the `next()` function is a manual iterator; and lists, tuples, and strings are
    iterables:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This outputs:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want a list of all the layers in your map, use the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It then outputs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Selecting Layer Properties will also open up tables, as shown in [Figure 3-16](#attributes_and_properties_of_the_select).
    Running the code `layer.featureCount()` earlier showed 42 features total, in this
    case, airports (the active layer) plus the 23 fields (columns) listed in the Layer
    Properties panel.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Attributes and properties of the selected layer, GISDATA.AIRPORTS_PT](assets/pgda_0316.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Figure 3-16\. Attributes and properties of the selected layer, GISDATA.AIRPORTS_PT
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Adding sample code to the Python Console will generate the information for
    the map layer. When running code a single line at a time, you can use the console
    and type your code at the >>> prompt. When running multiline scripts, you will
    want to use the editor: the panel on the right in [Figure 3-17](#running_python_code_in_the_console_to_a).
    Line numbers populate as the code runs. You will see this in the final example
    in the chapter.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![Running Python code in the console to add data to the canvas](assets/pgda_0317.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: Figure 3-17\. Running Python code in the console to add data to the canvas
  id: totrans-134
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Layer Styling
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The layers can now be modified to make features visible and clear so that your
    audience will understand them. The colors generated are often random, so I like
    to customize them using Layer Styling.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Now you can view the map ([Figure 3-18](#map_of_massachusetts_acecs_areas))
    and explore airport locations, roadways, and wetlands and how they relate to ACECs
    areas. Where do you see potential for these features to affect the health of these
    environmentally sensitive areas? What other features might you want to look for
    in answering this research question?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '![Map of Massachusetts ACECs areas](assets/pgda_0318.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: Figure 3-18\. Map of Massachusetts ACECs areas
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This exercise gave you some more practice with QGIS layers and introduced you
    to layer styling. You also learned how to work with iterators and discover attributes.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Using Processing Algorithms in the Python Console
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you’ve been learning about the capabilities of both the Python Console
    and QGIS in geospatial analysis. You are gaining familiarity with an information
    system that combines geographic data with robust software for managing, analyzing,
    and visualizing that data. By now, you’ve likely discovered even more plug-ins
    and powerful tools in the Processing Toolbox. You’ve got a great start on using
    Python for engaging with a system like QGIS.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'From here on, you can continue building your expertise by making use of help
    functions, QGIS documentation, and other resources. You’ll practice that in the
    following exercise. For this exercise, our research question will be: *which cities
    are located along the Amazonas River?* Perhaps you are hoping to focus your attention
    on how flooding or agricultural runoff affect local communities. The exercise
    is an opportunity to try filtering and analyzing a large open source dataset.
    Explore the attribute tables and customize a query!'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the biggest advantages of Python scripting is that your tasks can be
    flexible and easy to reproduce. In the final section of this chapter, you will
    learn how to use *processing algorithms:* algorithms that let you save your scripts
    and chain them together. Adapting existing scripts is one of the best ways to
    learn how Python operates. You’ll be working with a script adapted from Anita
    Graser^([1](ch03.xhtml#ch01fn8)) to build a workflow in the Python console. This
    workflow will use three processing algorithms:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: native:extractbyexpression
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: native:extractbyexpression
- en: native:buffer
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: native:buffer
- en: native:extractbylocation
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: native:extractbylocation
- en: 'As we did in [Chapter 2](ch02.xhtml#essential_facilities_for_spatial_analys),
    we’ll use data from Natural Earth Data. The canvas in [Figure 3-19](#exploring_the_area_of_interest_in_the_m)
    shows two kinds of data for Brazil: populated places and rivers and lakes. Download
    [GeoPackage](https://oreil.ly/IMccr), if you have not done so already. Select
    GeoPackage from Data Source Manager to upload the files.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第2章](ch02.xhtml#essential_facilities_for_spatial_analys)中所做的那样，我们将使用来自Natural
    Earth Data的数据。在[图3-19](#exploring_the_area_of_interest_in_the_m)中的画布显示了巴西的两种数据：人口聚集地和河流与湖泊。如果尚未下载，请下载[GeoPackage](https://oreil.ly/IMccr)。从数据源管理器选择GeoPackage以上传文件。
- en: '![Exploring the area of interest in the map canvas](assets/pgda_0319.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![在地图画布中探索感兴趣的区域](assets/pgda_0319.png)'
- en: Figure 3-19\. Exploring the area of interest in the map canvas
  id: totrans-150
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3-19. 在地图画布中探索感兴趣的区域
- en: Working with Algorithms
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用算法
- en: 'Before we start, you need to understand where these algorithms originate and
    how to work with the different parameters. Write the following code in your Python
    Console to get started:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，您需要了解这些算法的来源以及如何处理不同的参数。在您的Python控制台中写入以下代码来开始：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When working with functions, it’s important to call algorithms by name so that
    they execute reliably. The [`QgsProcessingRegistry`](https://oreil.ly/yXOkX) will
    list the algorithms correctly. Registries are where you can access algorithms,
    parameters, and different outputs. You can access the registry by writing this
    code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理函数时，重要的是按名称调用算法，以确保它们可靠执行。[`QgsProcessingRegistry`](https://oreil.ly/yXOkX)将正确列出算法。注册表是您可以访问算法、参数和不同输出的地方。您可以通过编写以下代码访问注册表：
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Algorithms with names starting with `native` are processing algorithms that
    still port to C++ and impart a speed advantage over other algorithms.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以`native`开头的算法是处理算法，仍然可以移植到C++，并具有速度优势。
- en: 'You can scroll through the long list in the output (excerpted below) to see
    the others, but you can also access them directly with a little bit of code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的长列表中（下面摘录了一部分），您可以滚动查看其他内容，但也可以使用一小段代码直接访问它们：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I counted more than two thousand algorithms when I ran this code. Each algorithm
    needs certain parameters to execute its code successfully. Use the parameter `processing.algorithmHelp("algorithmID")`
    with the name of the algorithm to output the characteristics of the syntax. This
    will help familiarize you with writing the code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行此代码时，我计算了超过两千个算法。每个算法都需要特定的参数来成功执行其代码。使用`processing.algorithmHelp("algorithmID")`和算法名称输出语法的特性将有助于您熟悉编写代码。
- en: 'First, let’s look at the script we’ll use. Don’t run it yet! Before you do,
    I’ll break down each piece:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看看我们将使用的脚本。但不要运行它！在您运行之前，我将逐个解释每个部分：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that it runs your three algorithms in order. First, you’ll extract by
    expression. The result is a layer that is stored in the `amazonas` variable and
    passed as input into the next algorithm. The buffer algorithm creates buffers
    that intersect with buffered river centerlines. The distance from the river, for
    example, should be within a certain distance of the city. The buffer sets this
    distance. Next, `extractbylocation` pulls your list of cities along the river.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它按顺序运行您的三个算法。首先，您将按表达式提取。结果是一个存储在`amazonas`变量中并作为输入传递到下一个算法的图层。缓冲算法创建与缓冲河流中心线相交的缓冲区。例如，从河流的距离应该在城市附近的一定距离内。缓冲区设置了此距离。接下来，`extractbylocation`提取沿河的城市列表。
- en: Extract by Expression
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据表达式提取
- en: 'Here’s how the `algorithmHelp()` function describes native:extractbyexpression:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`algorithmHelp()`函数如何描述native:extractbyexpression：
- en: This algorithm creates a new vector layer that only contains matching features
    from an input layer. The criteria for adding features to the resulting layer is
    based on a QGIS expression.
  id: totrans-165
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此算法创建一个仅包含来自输入图层的匹配要素的新向量图层。将要素添加到结果图层的标准基于QGIS表达式。
- en: Take a moment to run `processing.algorithmHelp("native:extractbyexpression")`
    and read the rest now. It will provide important details and describe the output
    you can anticipate. If you don’t list a parameter, the default will be applied
    and output is sent to memory.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停片刻，运行`processing.algorithmHelp("native:extractbyexpression")`并现在阅读。它将提供重要细节并描述您可以预期的输出。如果不列出参数，将应用默认值并将输出发送到内存。
- en: 'Here is the segment of the script that uses this algorithm, so you can examine
    it in more detail:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用此算法的脚本片段，所以你可以更详细地查看它：
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Buffer
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区
- en: 'Next, run:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来运行：
- en: '[PRE17]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s see what the [help documentation](https://oreil.ly/pNmzd) tells us about
    native:buffer:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 [帮助文档](https://oreil.ly/pNmzd) 告诉我们有关 native:buffer 的信息：
- en: This algorithm computes a buffer area for all the features in an input layer,
    using a fixed or dynamic distance.
  id: totrans-173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该算法为输入图层中的所有要素计算缓冲区，使用固定或动态距离。
- en: ''
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The segments parameter controls the number of line segments to use to approximate
    a quarter circle when creating rounded offsets.
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 段参数控制创建圆角偏移时使用的线段数目。
- en: ''
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The end cap style parameter controls how line endings are handled in the buffer.
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 端点样式参数控制缓冲区中如何处理线段的结束。
- en: ''
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The join style parameter specifies whether round, miter or beveled joins should
    be used when offsetting corners in a line.
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 连接样式参数指定在线段角点偏移时应使用圆角、斜接或斜角连接。
- en: ''
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The miter limit parameter is only applicable for miter join styles, and controls
    the maximum distance from the offset curve to use when creating a mitered join.
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 斜接限制参数仅适用于斜接连接样式，并控制创建斜接连接时偏移曲线使用的最大距离。
- en: Read the full output for the information you need to understand the algorithm
    and the inputs and outputs needed. In particular, you need to understand the parameters
    so you can include them in your query. You will see information for `INPUT`, `DISTANCE`,
    `SEGMENTS`, `END_CAP_STYLE`, `JOIN_STYLE`, `MITER_LIMIT`, `DISSOLVE`, and `OUTPUT`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完整输出以获取理解算法及所需输入和输出的信息。特别是，你需要理解这些参数，以便包含在你的查询中。你将看到`INPUT`、`DISTANCE`、`SEGMENTS`、`END_CAP_STYLE`、`JOIN_STYLE`、`MITER_LIMIT`、`DISSOLVE`和`OUTPUT`的信息。
- en: 'Here is the script segment that includes this algorithm:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含此算法的脚本段落：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What is this code doing? What can you tell from the syntax here? From reading
    the output of the `algorithmHelp` function, you can see that the location vector
    is now the input for the native.buffer. The buffer will be interested only in
    data within the buffer range. For example, the rivers and cities should be within
    10 kilometers.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在做什么？从这里的语法中你能得出什么结论？从`algorithmHelp`函数的输出中，你可以看到位置向量现在是 native.buffer 的输入。缓冲区只关心缓冲范围内的数据。例如，河流和城市应该在10公里范围内。
- en: Extract by Location
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据位置提取
- en: Our third algorithm is native:extractbylocation. Next, we’ll *intersect* the
    buffered Amazonas data–that is, compare the two sets of data we now have–to combine
    the rivers data with the places data. This will include the cities along the river
    we are interested in.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个算法是 native:extractbylocation。接下来，我们将 *交叉* Amazonas 缓冲数据——也就是说，比较我们现在拥有的两组数据——将河流数据与地点数据结合起来。这将包括我们感兴趣的河流沿岸的城市。
- en: 'First, run:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 首先运行：
- en: '[PRE19]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The help documentation again contains important information about the parameters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助文档再次包含关于参数的重要信息。
- en: 'Here is the section of our script that uses extract by location:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们脚本中使用 extract by location 的部分：
- en: '[PRE20]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The QGIS GUI contains similar tools in the Processing Toolbox functions ([Figure 3-20](#algorithms_in_the_qgis_gui)),
    but you need to run the processes separately and locate the suitable input and
    output parameters in output (which will resemble that in [Figure 3-21](#the_input_and_output_parameters_buried)).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: QGIS GUI 在 Processing Toolbox 功能中包含类似的工具（[图 3-20](#algorithms_in_the_qgis_gui)），但你需要分别运行这些过程，并找到输出中合适的输入和输出参数（这与
    [图 3-21](#the_input_and_output_parameters_buried) 中的类似）。
- en: '[PRE21]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Algorithms in the QGIS GUI](assets/pgda_0320.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![QGIS GUI 中的算法](assets/pgda_0320.png)'
- en: Figure 3-20\. Algorithms in the QGIS GUI
  id: totrans-196
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-20\. QGIS GUI 中的算法
- en: '![The input and output parameters buried in the QGIS GUI output](assets/pgda_0321.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![QGIS GUI 输出中埋藏的输入和输出参数](assets/pgda_0321.png)'
- en: Figure 3-21\. The input and output parameters buried in the QGIS GUI output
  id: totrans-198
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-21\. QGIS GUI 输出中埋藏的输入和输出参数
- en: Now that you’ve examined it, go ahead and run the script in the console. The
    output, shown in [Figure 3-22](#the_amazonas_river_with_cities_along_it), is a
    map of cities along the Amazonas river in Brazil. This exercise is an example
    of how creating algorithms to run on large datasets reinforces efficient and repeatable
    workflows. Now you can query the data with your own ideas. Use the attribute tables
    available for each dataset to note how the variables or column headings are listed.
    Saving your Python scripts will allow you to create templates to practice and
    update as your curiosity grows!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经检查过了，请继续在控制台中运行脚本。输出结果如[图 3-22](#the_amazonas_river_with_cities_along_it)，展示了巴西亚马逊河沿岸的城市地图。这个练习展示了如何创建算法以在大型数据集上运行，从而加强高效和可重复的工作流程。现在你可以根据自己的想法查询数据。使用每个数据集提供的属性表来注意变量或列标题的列出情况。保存你的Python脚本将允许你创建模板，随着你的好奇心增长而进行练习和更新！
- en: '![The Amazonas River with cities along its route](assets/pgda_0322.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![亚马逊河沿线的城市地图](assets/pgda_0322.png)'
- en: Figure 3-22\. The Amazonas River with cities along its route
  id: totrans-201
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-22\. 亚马逊河沿线的城市地图
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter showed you how to download QGIS, customize your workspace, and
    upload data from different provider keys, both within the Python Console and directly
    from the Browser. You also learned to customize your maps to increase their legibility
    and started becoming familiar with the canvas and layer styling. You were introduced
    to the Processing Tools. These are complex, but splitting the code into small
    sections and learning about the syntax is often perfect practice for gaining more
    advanced skills. You learned how to chain three algorithms together and store
    results in a variable, to be used as input.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你展示了如何下载QGIS，自定义你的工作空间，并从不同的提供商键中上传数据，既可以在Python控制台内部，也可以直接从浏览器中进行。你还学会了如何自定义你的地图以提高其可读性，并开始熟悉画布和图层样式。你被介绍了处理工具。这些工具很复杂，但将代码分成小节并学习语法通常是获得更高级技能的绝佳实践。你学会了如何将三个算法链接在一起并将结果存储在一个变量中，以供后续使用。
- en: In coming chapters, you will continue to build your Python skills by interacting
    with additional tools like Google Earth Engine and ArcGIS.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将继续通过与Google Earth Engine和ArcGIS等附加工具互动来构建你的Python技能。
- en: '^([1](ch03.xhtml#ch01fn8-marker)) This workflow is adapted from Anita Graser’s
    undated blog post [“PyQGIS 101: Chaining Processing Tools”](https://oreil.ly/RdQxx),
    a tutorial for working with processing tools.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](ch03.xhtml#ch01fn8-marker)) 这个工作流程改编自Anita Graser未标日期的博文[“PyQGIS 101:
    Chaining Processing Tools”](https://oreil.ly/RdQxx)，一个处理工具的使用教程。'
