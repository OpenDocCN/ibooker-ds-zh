- en: Chapter 20\. Visualizing Individual Winners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 20 章\. 可视化个别获奖者
- en: We want our Nobel Prize visualization (Nobel-viz) to include a list of currently
    selected winners and a biography box (aka bio-box) to display the details of an
    individual winner (see [Figure 20-1](#d3bio_target)). By clicking on a winner
    in the list, the user can see his or her details in the bio-box. In this chapter,
    we’ll see how to build the list and bio-box, how to repopulate the list when the
    user selects new data (with the menu bar filters), and how to make the list clickable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的诺贝尔奖可视化（Nobel-viz）包括一个当前选定获奖者列表和一个生物框（也称为 bio-box），用于显示个别获奖者的详细信息（参见[图 20-1](#d3bio_target)）。通过点击列表中的获奖者，用户可以在生物框中查看其详细信息。在本章中，我们将看到如何构建列表和生物框，如何在用户选择新数据时重新填充列表（通过菜单栏过滤器），以及如何使列表可点击。
- en: '![dpj2 2001](assets/dpj2_2001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 2001](assets/dpj2_2001.png)'
- en: Figure 20-1\. The chapter’s target elements
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 20-1\. 章节目标元素
- en: As this chapter will demonstrate, D3 isn’t just for building SVG visualizations.
    You can bind data to any DOM element and use it to change its attributes and properties
    or its event-handling callback functions. D3’s data joining and event handling
    (achieved via the `on` method) play very well with common user interfaces such
    as the clickable list of this chapter and selection boxes.^([1](ch20.xhtml#idm45607738336336))
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章所示，D3 不仅用于构建 SVG 可视化。您可以将数据绑定到任何 DOM 元素，并使用它来更改其属性和属性或其事件处理回调函数。D3 的数据连接和事件处理（通过`on`方法实现）非常适用于本章的可点击列表和选择框等常见用户界面。^([1](ch20.xhtml#idm45607738336336))
- en: Let’s deal first with the list of winners and how it is built with the dataset
    of currently selected winners.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先处理获奖者列表及其如何在当前选定获奖者数据集中构建。
- en: Building the List
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表
- en: 'We build our list of winners (see [Figure 20-1](#d3bio_target)) using an HTML
    table with Year, Category, and Name columns. The basic skeleton of this list is
    provided in the Nobel-viz’s *index.xhtml* file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 HTML 表格构建获奖者列表（参见[图 20-1](#d3bio_target)），其中包含年份、类别和姓名列。此列表的基本骨架在 Nobel-viz
    的 *index.xhtml* 文件中提供：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We’ll use a little CSS in *style.css* to style this table, adjusting the width
    of the columns and their font size:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 *style.css* 中使用少量 CSS 来样式化这个表格，调整列的宽度和字体大小：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO1-1)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO1-1)'
- en: '`overflow: scroll` clips the content of the list (keeping it within our `nobel-list`
    container) and adds a scroll bar so we can access all the winners. `overflow-x:
    hidden` inhibits the addition of a horizontal scroll bar.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`overflow: scroll` 将列表内容裁剪（保持在`nobel-list`容器内），并添加滚动条，以便访问所有获奖者。 `overflow-x:
    hidden` 抑制了水平滚动条的添加。'
- en: 'In order to create the list, we will add `<tr>` row elements (containing a
    `<td>` data tag for each column) to the table’s `<tbody>` element for each winner
    in the current dataset, producing something like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建列表，我们将为当前数据集中的每个获奖者向表格的`<tbody>`元素添加`<tr>`行元素（每列包含一个`<td>`数据标签），生成如下内容：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To create these rows, an `updateList` method will be called by our central
    `onDataChange` when the app is initialized and subsequently when the user applies
    a data filter and the list of winners changes (see [“Basic Data Flow”](ch16.xhtml#d3build_sect_components)).
    The data received by `updateList` will have the following structure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这些行，我们的中心`onDataChange`在应用初始化时将调用`updateList`方法，并在用户应用数据过滤器并更改获奖者列表时随后调用（参见[“基本数据流”](ch16.xhtml#d3build_sect_components)）。`updateList`接收到的数据将具有以下结构：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Example 20-1](#d3bio_list_code) shows the `updateList` method. The data received
    is first sorted by year and then, after any existing rows have been removed, used
    to build the table rows.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 20-1](#d3bio_list_code) 展示了`updateList`方法。首先按年份对接收到的数据进行排序，然后在移除任何现有行后，用于构建表格行。'
- en: Example 20-1\. Building the selected winners list
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-1\. 创建选定获奖者列表
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO2-1)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO2-1)'
- en: A now familiar join pattern, using the bound winners’ data to create and update
    list items.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个现在熟悉的连接模式，使用绑定的获奖者数据创建和更新列表项。
- en: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO2-2)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO2-2)'
- en: When the user clicks on a row, this click-handler function will pass the winner
    data bound to that row to a `displayWinner` method, which will update the bio-box
    accordingly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击一行时，此点击处理函数将将绑定到该行的获奖者数据传递给`displayWinner`方法，后者将相应地更新生物框。
- en: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO2-3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO2-3)'
- en: This custom `exit` function fades out any excess rows over the transition period
    of two seconds, reducing their opacity to zero before removing them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义的`exit`函数在两秒的过渡期内淡出任何多余的行，将它们的不透明度降低到零，然后移除它们。
- en: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO2-4)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO2-4)'
- en: First, we use a winner’s data to create an array of data with year, category,
    and name, which will be used to create the row’s `<td>` data cells…​
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用获奖者的数据创建一个包含年份、类别和姓名的数据数组，这些数据将用于创建行的`<td>`数据单元格…​
- en: '[![5](assets/5.png)](#co_visualizing_individual_winners_CO2-5)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_visualizing_individual_winners_CO2-5)'
- en: …​we then join this array to the row’s data cells (`td`) and use it to set their
    text.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: …​然后我们将这个数组与行的数据单元格（`td`）连接起来，并用它来设置它们的文本。
- en: '[![6](assets/6.png)](#co_visualizing_individual_winners_CO2-6)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_visualizing_individual_winners_CO2-6)'
- en: Each time the data is changed, we select a winner at random from the new dataset
    and display him or her in the bio-box.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每次数据更改时，我们从新数据集中随机选择一个获奖者，并在生物框中显示他或她。
- en: 'As the user moves the cursor over a row in our winners table, we want to highlight
    the row and also to change the style of pointer to `cursor` to indicate that the
    row is clickable. Both of these details are fixed by the following CSS, added
    to our *style.css* file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将光标移动到我们的获奖者表格中的一行上时，我们希望突出显示该行，并且还要更改指针的样式为`cursor`，以指示该行可以点击。以下CSS代码解决了这些细节问题，并添加到了我们的*style.css*文件中：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our `updateList` method calls a `displayWinner` method to build a winner’s biography
    box when a row is clicked or when the data changes (with a random choice). Let’s
    now see how the bio-box is built.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`updateList`方法在点击行或数据更改时（随机选择）调用`displayWinner`方法以构建获奖者的传记框。现在让我们看看如何构建生物框。
- en: Building the Bio-Box
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建生物框
- en: 'The bio-box uses a winner’s object to fill in the details of a little mini-biography.
    The bio-box’s HTML skeleton is provided in the *index.xhtml* file consisting of
    content blocks for the biographical elements and a `readmore` footer providing
    a Wikipedia link to further information on the winner:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 生物框使用获奖者对象填充一个小型传记的细节。生物框的HTML骨架提供在*index.xhtml*文件中，包括用于生物元素的内容块和一个`readmore`页脚，提供了一个指向获奖者更多信息的维基百科链接：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A little CSS in *style.css* sets the positions of the list and bio-box elements,
    sizes their content blocks, and provides borders and font specifics:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在*style.css*中的一点点CSS设置了列表和生物框元素的位置，调整了它们的内容块大小，并提供了边框和字体的具体设置：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With our content blocks in place, we need to make a callback to our data API
    to get the data needed to fill them. [Example 20-2](#d3bio_winner_code) shows
    the `displayWinner` method used to build the box.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确定我们的内容块就位后，我们需要回调我们的数据API以获取填充它们所需的数据。[示例 20-2](#d3bio_winner_code)展示了用于构建生物框的`displayWinner`方法。
- en: Example 20-2\. Updating a selected winner’s biography box
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 20-2\. 更新所选获奖者的传记框
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO3-1)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO3-1)'
- en: 'Our `nobel-winner` element has a top border (CSS: `border-top: 4px solid`),
    which we will color according to the winner’s category, using the `categoryFill`
    method defined in *nbviz_core.js*.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的`nobel-winner`元素有一个顶部边框（CSS: `border-top: 4px solid`），我们将根据获奖者的类别使用*nbviz_core.js*中定义的`categoryFill`方法来着色。'
- en: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO3-2)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO3-2)'
- en: We select the `<span>` tags of all the divs with class `property`. These are
    of the form `<span name=*category*></span>`. We use the span’s `name` attribute
    to retrieve the correct property from our Nobel winner’s data and use it to set
    the tag’s text.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择所有具有类名`property`的`div`的`<span>`标签。这些标签的形式是`<span name=*category*></span>`。我们使用span的`name`属性从我们的诺贝尔获奖者数据中检索正确的属性，并将其用于设置标签的文本。
- en: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO3-3)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO3-3)'
- en: Here we set the `src` (source) attribute on our winner’s image if one is available.
    We use the image tag’s `display` attribute to hide it (setting it to `none`) if
    no image is available or show it (the default `inline`) if one is.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果有获奖者的图片可用，我们会设置其`src`（源）属性。如果没有可用的图片，我们使用图像标签的`display`属性将其隐藏（设置为`none`），或者显示它（默认为`inline`）。
- en: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO3-4)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO3-4)'
- en: Our winner’s name was scraped from Wikipedia and can be used to retrieve their
    Wikipedia page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的获奖者姓名是从维基百科上获取的，可以用于检索他们的维基百科页面。
- en: Updating the Winners List
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新获奖者名单
- en: 'When the details (winners list and bio) module is imported, it appends a callback
    function to the callbacks array in the core module. When data is updated in response
    to user interaction, this callback function is called and the list updated with
    new country data, using Crossfilter’s country dimension:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当详细信息（获奖者名单和简介）模块被导入时，它会将回调函数附加到核心模块的回调数组中。当响应用户交互更新数据时，这个回调函数被调用，并且使用Crossfilter的国家维度更新列表，显示新的国家数据：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO4-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO4-1)'
- en: This anonymous function is called in the core module when data is updated.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据更新时，这个匿名函数在核心模块中被调用。
- en: Now that we’ve seen how we add a bit of personality to our Nobel-viz by allowing
    users to display a winner’s biography, let’s summarize this chapter before moving
    on to see how the menu bar is built.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何通过允许用户显示获奖者传记来为我们的Nobel-viz增添一些个性化内容，让我们在进入菜单栏构建的细节之前总结本章内容。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how D3 can be used to build conventional HTML constructions,
    not just SVG graphics. D3 is just as at home building lists, tables, and the like
    as it is displaying circles or changing the rotation of a line. Wherever there
    is changing data that needs to be reflected by elements of a web page, D3 is likely
    able to solve the problem elegantly and efficiently.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了D3如何用于构建传统的HTML结构，而不仅仅是SVG图形。D3不仅能够构建列表、表格等内容，就像显示圆圈或改变线条旋转一样自如。只要有需要通过网页元素反映的变化数据，D3通常能够优雅而高效地解决问题。
- en: With our winners list and biography box covered, we’ve seen how all the visual
    elements in our Nobel-viz are built. It only remains to see how the visualization’s
    menu bar is built and how the changes it enables, to both the dataset and the
    measure of prizes, are reflected by these visual elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成获奖者名单和传记框的介绍后，我们已经看到了如何构建Nobel-viz中的所有视觉元素。现在只剩下看看如何构建可视化菜单栏以及它如何通过这些视觉元素反映数据集和奖项度量的变化。
- en: ^([1](ch20.xhtml#idm45607738336336-marker)) We’ll cover selection boxes (as
    data filters) in [Chapter 21](ch21.xhtml#chapter_d3_ui).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch20.xhtml#idm45607738336336-marker)) 我们将在[第21章](ch21.xhtml#chapter_d3_ui)中介绍选择框（作为数据过滤器）。
