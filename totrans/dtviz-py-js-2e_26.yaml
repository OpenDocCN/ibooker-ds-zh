- en: Chapter 20\. Visualizing Individual Winners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want our Nobel Prize visualization (Nobel-viz) to include a list of currently
    selected winners and a biography box (aka bio-box) to display the details of an
    individual winner (see [Figure 20-1](#d3bio_target)). By clicking on a winner
    in the list, the user can see his or her details in the bio-box. In this chapter,
    we’ll see how to build the list and bio-box, how to repopulate the list when the
    user selects new data (with the menu bar filters), and how to make the list clickable.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 2001](assets/dpj2_2001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20-1\. The chapter’s target elements
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As this chapter will demonstrate, D3 isn’t just for building SVG visualizations.
    You can bind data to any DOM element and use it to change its attributes and properties
    or its event-handling callback functions. D3’s data joining and event handling
    (achieved via the `on` method) play very well with common user interfaces such
    as the clickable list of this chapter and selection boxes.^([1](ch20.xhtml#idm45607738336336))
  prefs: []
  type: TYPE_NORMAL
- en: Let’s deal first with the list of winners and how it is built with the dataset
    of currently selected winners.
  prefs: []
  type: TYPE_NORMAL
- en: Building the List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We build our list of winners (see [Figure 20-1](#d3bio_target)) using an HTML
    table with Year, Category, and Name columns. The basic skeleton of this list is
    provided in the Nobel-viz’s *index.xhtml* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use a little CSS in *style.css* to style this table, adjusting the width
    of the columns and their font size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`overflow: scroll` clips the content of the list (keeping it within our `nobel-list`
    container) and adds a scroll bar so we can access all the winners. `overflow-x:
    hidden` inhibits the addition of a horizontal scroll bar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create the list, we will add `<tr>` row elements (containing a
    `<td>` data tag for each column) to the table’s `<tbody>` element for each winner
    in the current dataset, producing something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To create these rows, an `updateList` method will be called by our central
    `onDataChange` when the app is initialized and subsequently when the user applies
    a data filter and the list of winners changes (see [“Basic Data Flow”](ch16.xhtml#d3build_sect_components)).
    The data received by `updateList` will have the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Example 20-1](#d3bio_list_code) shows the `updateList` method. The data received
    is first sorted by year and then, after any existing rows have been removed, used
    to build the table rows.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-1\. Building the selected winners list
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: A now familiar join pattern, using the bound winners’ data to create and update
    list items.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on a row, this click-handler function will pass the winner
    data bound to that row to a `displayWinner` method, which will update the bio-box
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: This custom `exit` function fades out any excess rows over the transition period
    of two seconds, reducing their opacity to zero before removing them.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: First, we use a winner’s data to create an array of data with year, category,
    and name, which will be used to create the row’s `<td>` data cells…​
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_visualizing_individual_winners_CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: …​we then join this array to the row’s data cells (`td`) and use it to set their
    text.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_visualizing_individual_winners_CO2-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Each time the data is changed, we select a winner at random from the new dataset
    and display him or her in the bio-box.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the user moves the cursor over a row in our winners table, we want to highlight
    the row and also to change the style of pointer to `cursor` to indicate that the
    row is clickable. Both of these details are fixed by the following CSS, added
    to our *style.css* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Our `updateList` method calls a `displayWinner` method to build a winner’s biography
    box when a row is clicked or when the data changes (with a random choice). Let’s
    now see how the bio-box is built.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Bio-Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The bio-box uses a winner’s object to fill in the details of a little mini-biography.
    The bio-box’s HTML skeleton is provided in the *index.xhtml* file consisting of
    content blocks for the biographical elements and a `readmore` footer providing
    a Wikipedia link to further information on the winner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A little CSS in *style.css* sets the positions of the list and bio-box elements,
    sizes their content blocks, and provides borders and font specifics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With our content blocks in place, we need to make a callback to our data API
    to get the data needed to fill them. [Example 20-2](#d3bio_winner_code) shows
    the `displayWinner` method used to build the box.
  prefs: []
  type: TYPE_NORMAL
- en: Example 20-2\. Updating a selected winner’s biography box
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `nobel-winner` element has a top border (CSS: `border-top: 4px solid`),
    which we will color according to the winner’s category, using the `categoryFill`
    method defined in *nbviz_core.js*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_visualizing_individual_winners_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We select the `<span>` tags of all the divs with class `property`. These are
    of the form `<span name=*category*></span>`. We use the span’s `name` attribute
    to retrieve the correct property from our Nobel winner’s data and use it to set
    the tag’s text.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_visualizing_individual_winners_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Here we set the `src` (source) attribute on our winner’s image if one is available.
    We use the image tag’s `display` attribute to hide it (setting it to `none`) if
    no image is available or show it (the default `inline`) if one is.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_visualizing_individual_winners_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Our winner’s name was scraped from Wikipedia and can be used to retrieve their
    Wikipedia page.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Winners List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the details (winners list and bio) module is imported, it appends a callback
    function to the callbacks array in the core module. When data is updated in response
    to user interaction, this callback function is called and the list updated with
    new country data, using Crossfilter’s country dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_visualizing_individual_winners_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This anonymous function is called in the core module when data is updated.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen how we add a bit of personality to our Nobel-viz by allowing
    users to display a winner’s biography, let’s summarize this chapter before moving
    on to see how the menu bar is built.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how D3 can be used to build conventional HTML constructions,
    not just SVG graphics. D3 is just as at home building lists, tables, and the like
    as it is displaying circles or changing the rotation of a line. Wherever there
    is changing data that needs to be reflected by elements of a web page, D3 is likely
    able to solve the problem elegantly and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: With our winners list and biography box covered, we’ve seen how all the visual
    elements in our Nobel-viz are built. It only remains to see how the visualization’s
    menu bar is built and how the changes it enables, to both the dataset and the
    measure of prizes, are reflected by these visual elements.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch20.xhtml#idm45607738336336-marker)) We’ll cover selection boxes (as
    data filters) in [Chapter 21](ch21.xhtml#chapter_d3_ui).
  prefs: []
  type: TYPE_NORMAL
