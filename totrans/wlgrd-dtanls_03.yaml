- en: 4 Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Defining metrics to set your projects up for success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying bad metrics that measure the wrong things
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the effects of your chosen metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At some point in your career, you will likely be asked to create and maintain
    a dashboard that tracks key performance indicators (KPIs) for the business. That’s
    because there is so much going on in a business that simple, summary-level metrics
    are the most common way to measure and analyze what is happening. Rather than
    getting detailed verbal summaries from every business unit or employee, executives
    look at which direction figures such as turnover, profit, or margin are trending.
  prefs: []
  type: TYPE_NORMAL
- en: 'Real business case: Defining key business metrics'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: An important metric in the used car auction domain, where I worked for years,
    is conversion. The business had multiple analyses and dashboards dedicated to
    questions about conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Conversion was used to measure the percentage of cars in an auction we were
    able to sell for our customers, the vendors. This seems straightforward, but it
    turned out that people across the business did not agree on a definition of conversion,
    especially when aggregating multiple auction events. There was also a separate
    but related metric called “first-time conversion,” which was even harder for stakeholders
    to agree on.
  prefs: []
  type: TYPE_NORMAL
- en: What started as a simple metric turned into a large project where multiple areas
    of the business were corralled to define these fundamental terms. Metric definitions
    are crucial, and they form the basis of this chapter’s project.
  prefs: []
  type: TYPE_NORMAL
- en: The metrics we choose define everything we do, from the executive board down
    to the individual analyst, so we need to be sure that they are well defined.
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 The importance of well-defined metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you will be asked to measure and track a metric that is insufficiently
    defined or ill suited to the problem. The first step in any analysis, and our
    results-driven approach, is to understand the problem—in this case, the metric
    we are being asked to measure. Words such as “best” (e.g., “what’s the best month
    to run an advertising campaign?”) are giveaways that something hasn’t been properly
    defined.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the common ways the use of metrics can go wrong are
  prefs: []
  type: TYPE_NORMAL
- en: Overreliance on a metric has unintended consequences. An example would be social
    media platforms trying to maximize users’ attention as their key metric. This
    incentivizes clickbait and content that elicits strong emotions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The metric doesn’t incorporate every important element of the business. Schools
    being incentivized to maximize student attendance rather than the quality of education
    is one example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The metric doesn’t measure the intended outcome. A common measure of customer
    satisfaction is the net promoter score or NPS. The way this score is calculated
    means only users who give a 9 or 10 out of 10 are deemed “promoters” and even
    scores of 8 out of 10 are discarded. This means it is possible to get a high average
    score but a low NPS, which can be misleading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In each of these cases, the solution is to either choose a metric that better
    captures all aspects of the problem, choose additional metrics to complement the
    single chosen metric, or, ideally, choose both. We should always be skeptical
    of single metrics that claim to perfectly summarize a complex problem and look
    at solutions from different angles instead.
  prefs: []
  type: TYPE_NORMAL
- en: Single metrics can give us at-a-glance views of an entire business’s operations,
    but the oversimplification often has consequences. A relevant aphorism, Goodhart’s
    law, states, “When a measure becomes a target, it ceases to be a good measure.”
    Once you start optimizing for a single metric, it becomes a bad metric to use
    as a measurement. This does not mean using simplifying metrics is wrong, but only
    that we should understand the consequences.
  prefs: []
  type: TYPE_NORMAL
- en: The project in this chapter explores this idea; it is all about defining metrics
    based on a vague stakeholder request, so let’s dive right in.
  prefs: []
  type: TYPE_NORMAL
- en: '4.2 Project 3: Defining precise metrics for better decision making'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take a look at the project, in which we will be asked to define and calculate
    metrics to find the best-performing products. The data is available for you to
    attempt it yourself at [https://davidasboth.com/book-code](https://davidasboth.com/book-code).
    You will find the datasets you can use to attempt the project, as well as the
    example solution in the form of a Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s look at the problem statement and examine the business context.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2.1 Problem statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this scenario, you are a junior analyst working for an e-commerce startup,
    Online Odyssey Outlet. If you have already attempted the project in chapter 3,
    it is in fact the same sort of startup. The data will be of a similar, if not
    identical, structure.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE  Thanks again to REES46 for providing the original transaction data ([https://mng.bz/6eZo](https://mng.bz/6eZo)),
    which has only been altered for this project by filtering it to a manageable size
    by removing “view” events and only keeping registered users (those with a valid
    `user_id`).
  prefs: []
  type: TYPE_NORMAL
- en: The date is January 2020, and the startup has just been through its first winter
    sale. Senior stakeholders are interested in knowing which products performed best
    during the Christmas period so that they can streamline the products they advertise
    in future sale periods. You will do this by analyzing up to two months of events
    data, presented as two separate data sources with identical structures. Events
    refer not just to sales but to more general customer actions, such as viewing
    a product on the website or placing it into their virtual cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The challenge is that, when pressed, stakeholders aren’t exactly sure what
    they mean by “best.” In an initial brainstorming session, they highlight some
    aspects they care about when ranking their products:'
  prefs: []
  type: TYPE_NORMAL
- en: Volume of sales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total revenue from a single product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Popularity, measured by the number of unique customers who bought a product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion, meaning the percentage of time a product is bought once it has been
    placed in the virtual shopping cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Products with increased performance from November to December
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your stakeholders do not assign weights to these factors, so their relative
    importance is unclear, but you should consider one or more of these metrics when
    presenting your findings. They are also open to suggestions for additional metrics
    that would help improve the performance of future sales.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2.2 Data dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Table 4.1 shows the data dictionary for the events data, and figure 4.1 shows
    some sample data. The November and December events are in separate tables but
    have the same structure and are therefore easily combined.
  prefs: []
  type: TYPE_NORMAL
- en: Table 4.1 Data dictionary for events data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| Column | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `event_time`  | The date and time of the transaction  |'
  prefs: []
  type: TYPE_TB
- en: '| `event_type`  | The type of the user event, either `cart` (the customer placed
    a product into their cart) or `purchase` (the customer bought the item)  |'
  prefs: []
  type: TYPE_TB
- en: '| `product_id`  | The unique identifier of the product  |'
  prefs: []
  type: TYPE_TB
- en: '| `category_id`  | The unique identifier of the product category  |'
  prefs: []
  type: TYPE_TB
- en: '| `category_code`  | A code that describes the product’s main and subcategories  |'
  prefs: []
  type: TYPE_TB
- en: '| `brand`  | The brand of the product (if applicable)  |'
  prefs: []
  type: TYPE_TB
- en: '| `price`  | The price of the product (listed price when adding to cart, or
    sold price when the event is `purchase`) in USD  |'
  prefs: []
  type: TYPE_TB
- en: '| `user_id`  | The unique identifier of the registered customer  |'
  prefs: []
  type: TYPE_TB
- en: '| `user_session`  | The unique identifier of the user’s browsing session  |'
  prefs: []
  type: TYPE_TB
- en: '![figure](../Images/4-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 A snapshot of the events data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 4.2.3 Desired outcomes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output of the analysis should be recommendations of the best-performing
    products on whichever dimension(s) you choose. The recommendation could be for
    single product IDs or broader ones relating to brands or product categories, as
    long as your choice of best product is justified in your analysis. The recommendation
    could be presented to a stakeholder in any format. This could be a whole presentation
    deck, some choice visualizations, or even just data tables produced by your analysis
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Presentation'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Think about how you would present your findings. What format would be most appropriate?
    What details would your stakeholders be most interested in hearing? Crucially,
    what unnecessary details would you want to leave out? Knowing how to summarize
    your work for the right audience is an important analyst skill to practice.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2.4 Required tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this chapter’s example solution, I will use the Python library `pandas`
    to read and manipulate the datasets, the `numpy` library for additional numerical
    computations, and `matplotlib` to create visualizations. As with each of the projects,
    the specific technology you use does not matter as long as it satisfies the criteria
    for each project. For this project, you need a tool that can
  prefs: []
  type: TYPE_NORMAL
- en: Load a dataset in the order of millions of rows from CSV files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create new columns and manipulate existing ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine (union) two datasets of the same structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform basic manipulation tasks such as sorting, grouping, and reshaping data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create data visualizations (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3 Applying the results-driven method to different metric definitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s use the results-driven approach again to break the problem down. In a
    problem that is as open ended as this one, it is particularly important to understand
    what our stakeholders want from the analysis. We need to understand the minimum
    viable answer that would be acceptable to present and could form the basis for
    future work iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-1.png)'
  prefs: []
  type: TYPE_IMG
- en: This step is always critical before starting the work itself, but even more
    so in open-ended questions like this one. What would it mean to focus on the different
    metrics the stakeholders have suggested?
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on volume alone could overinflate the importance of products that people
    simply buy in bulk more than others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focusing on total revenue alone could overemphasize expensive products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritizing popularity might simply reveal products that everyone buys, such
    as smartphones, clothes, or kitchen appliances. However, it might help distinguish
    the “better” products from similar ones in their category (i.e., we can assume
    almost everyone will buy a smartphone, but not the same one).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focusing on conversion would highlight products that people are less likely
    to change their minds on, but it is unclear if that has a direct relationship
    with “best performance” particularly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing performance between November and December specifically would target
    the stakeholders’ questions directly since they asked about best performers over
    the Christmas period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-2.png)'
  prefs: []
  type: TYPE_IMG
- en: This step forces us to think about the output of our work before we even begin.
    In this case, the output has not been explicitly defined. However, we know that
    our minimum viable answer should contain
  prefs: []
  type: TYPE_NORMAL
- en: Measurements of our chosen metrics at a product level (e.g., a table of total
    revenue in December by product, sorted in descending revenue order)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ranking so we can highlight top performers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Justifications for which metrics were chosen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A summary of our findings in tabular or visual form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations for further iterations (if requested)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These end goals help us identify what to focus on during our analysis, so we
    are less likely to unnecessarily go down rabbit holes.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-3.png)'
  prefs: []
  type: TYPE_IMG
- en: As in chapter 3, our data has been provided for us, and there is nothing to
    explicitly identify or obtain. However, one task we might want to perform here
    is to check whether all the possible metrics can be measured with the available
    data. This can be done by looking at the data dictionary and verifying our assumptions
    during the analysis. One choice to make is whether to focus on December’s events
    only or include the November data so that we can compare product performance before
    and during the Christmas period. In future iterations, we might also request data
    from the previous year to do a year-on-year comparison, which is not possible
    with the available data.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-4.png)'
  prefs: []
  type: TYPE_IMG
- en: During the analysis, some steps to consider are
  prefs: []
  type: TYPE_NORMAL
- en: Merge the November and December data if we decide to investigate those comparison
    metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the events data. We are specifically interested in questions like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What makes a product unique? Is its ID sufficient, and is the ID truly a unique
    identifier? Some product catalogs might have the same product ID listed multiple
    times for different color variants, in which case ID would not be sufficient as
    a unique identifier.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any gaps in our data (e.g., dates for which we do not have events)?
    Identifying gaps would help us understand the limitations of the available data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the generally best-performing categories/subcategories/brands? This
    will help determine if our later results make sense in context.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the distribution of product price? Are there outliers to investigate
    further? This is particularly important if we choose to explore product revenue.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What are some baselines for product popularity and conversion? Again, knowing
    the conversion rate for a typical product or how many people generally buy something
    will help put results into context.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregate the data to a product level since the raw data is at a transaction
    level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculate the chosen metrics for each product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare products across multiple metrics if we have chosen to measure more than
    one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summarize our findings in tabular or visual form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommend further work in case stakeholders want to dive deeper into the problem
    based on our findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-5.png)'
  prefs: []
  type: TYPE_IMG
- en: When presenting our findings, we want to focus on summarizing our method, our
    chosen metrics, and the resulting best products. The important aspect to focus
    on is “so what?” Our findings should be presented in a way that suggests concrete
    action that can be taken. Telling a stakeholder that socks tend to sell well all
    year round with a spike of sales around Christmas is unlikely to be news to them.
    If we choose to create slides, we should aim for three to four slides with a natural
    flow, succinct messages, and appropriate visualizations. In our code, that means
    we should create visualizations that most effectively communicate our findings.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-unnumb-6.png)'
  prefs: []
  type: TYPE_IMG
- en: We generally want to present our findings to a stakeholder as soon as we have
    a minimum viable answer. This might mean iterating before our analysis is complete.
    However, in this instance, the possible metrics to investigate are well defined,
    and we should have a value calculated for each metric across our products and
    perhaps summarized across categories and brands, too. That way, when discussing
    future iterations, we could focus on metrics beyond those already suggested.
  prefs: []
  type: TYPE_NORMAL
- en: 4.3.1 Questions to consider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During this analysis, you should always be thinking about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the definition of each chosen metric? Words like “volume” or “revenue”
    sound self-explanatory, but they need to be strictly defined before they are calculated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the effects of choosing a particular metric as the definition for “best”?
    What should “best” measure, and how will our definition be useful to our stakeholders?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4.4 An example solution: Finding the best performing products'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s go through an example solution to the problem. As with every project,
    I encourage you to attempt the project yourself before reviewing the solution
    and bear in mind this is one of many possible ways to tackle the problem. The
    order of the exploratory steps is not always important. You may choose to investigate
    different aspects of the data first compared to what I have chosen, and again,
    that is to be expected.
  prefs: []
  type: TYPE_NORMAL
- en: As for our action plan, we will first combine the November and December events
    and explore the combined data, resolving any data problems along the way. Next,
    we will aggregate the data to produce a product-level dataset. We can then define
    and calculate multiple metrics to see how product rankings differ among the different
    metrics. Finally, we will summarize our findings to see what initial recommendations
    we can make to our stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.1 Combining and exploring product data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because our two datasets, November and December events, are identical in structure,
    we will explore the data only once they have been combined. Let’s start there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the `pandas` library to concatenate the two datasets. If you are
    familiar with SQL, this is the equivalent of a union operation. The output of
    the code is `(7033125,` `9)`, meaning we have over 7 million rows and nine columns
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it’s time for some basic sanity checks of the data. Do we have any missing
    values? Figure 4.2 shows the output of looking for missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 The number of rows with missing values for each column in our events
    data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We have some user sessions missing, which means we don’t know which unique browsing
    session those 27 events belong to. That shouldn’t affect our analysis as we’re
    interested in products, so we can leave those rows in. The same goes for the `brand`
    column—missing values aren’t necessarily a worry at this stage because we don’t
    yet know to what extent we will use that information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start building our diagram to record our steps. So far, we completed the
    step shown in figure 4.3.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 The first step in our analysis, visualized
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: It’s time to move on and validate different assumptions in our data, including
    ones about the date range and product categorization.
  prefs: []
  type: TYPE_NORMAL
- en: Validating assumptions in the data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our next assumption is that we really do have November and December data, which
    we should verify independently. Figure 4.4 shows the output of checking for the
    date range in our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 The date range in our data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Our data is in the expected range (November 1 through December 31), but we
    still don’t know if we have event data for every single date in between. The following
    code calculates the number of unique days for each month, the output of which
    is shown in figure 4.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Using the assign function to create temporary columns for day and month'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 The nunique function calculates the number of unique days per month.'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 The unique number of days encountered per month
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The output is what we’d expect, so we have at least one event for each day
    in our data. Finally, we also want to know if the number of events is consistent
    across these days. The following code calculates and visualizes this, and the
    output chart is shown in figure 4.6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Creates custom axis labels based on dates in the data'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Formats labels as “month day” (e.g., “Nov 1”)'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-6.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 Number of events per calendar day, visualized
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Our data clearly shows a wide range of volumes across the days. What we’re interested
    in with this chart is whether there are any outliers in either direction. There
    are seven low-activity days, and they correspond to the first week of November.
    This could mean customers hadn’t been using the platform as often yet, and knowing
    exactly when the startup launched the website would help put this into context.
    There are also three days of particularly high activity in mid-November. Again,
    this could be because of an organic increase in user engagement or a social media
    post that went viral. It could be artificial due to an advertising campaign that
    ran at that time, or there could have been a sale on. Without further information,
    we are only speculating, but it is the kind of speculating we would need to do
    upon seeing these results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next column to turn our attention to is the event type. What is the proportion
    of the different events in our data? Figure 4.7 shows the output of the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-7.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 The proportion of different event types
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In a typical e-commerce environment, there is a funnel of events from users
    exploring, then placing items into a cart, and finally purchasing them. As expected,
    in this case, we observe that this funnel narrows, meaning we see much fewer purchase
    events than cart ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Time to turn our attention to the product catalog and investigate what kind
    of products the e-commerce platform offers. First, what is the typical price range
    for our products? Figure 4.8 shows the output of our investigation into prices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Disables scientific notation'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 The distribution of product prices
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This output is common in price data, that is, a clustering of small values and
    a long skew to the right. This means most of our products are listed or sold under
    $500, with some outliers up to $2,500.
  prefs: []
  type: TYPE_NORMAL
- en: 'What about brands? Figure 4.9 shows the top 10 brands obtained with the following
    code. Missing brands are intentionally not included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 Top 10 brands by number of events
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At a glance, this suggests most of our user events are focused on the technology
    category. The actual makeup of our unique product catalog might differ, as might
    the top 10 brands if we only look at purchase events. Now that we’ve looked at
    brands, let’s also take a look at product categories.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating consistency of product categories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Are our products correctly categorized? This is a question that we should ask
    every time we have a dataset with IDs and associated assigned categories. One
    way to check this is to ask, do we have any product IDs that are assigned to multiple
    categories? The following code investigates this, and the output is shown in figure
    4.10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '#1 First, counts the number of unique category codes encountered per product
    ID'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Finds instances where that count is more than 1'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 The result of investigating products assigned to multiple categories
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As we can see, almost 13,000 products are assigned to multiple categories.
    This suggests there is an error somewhere in our underlying product catalog. Let’s
    look at the top category codes to investigate further. Figure 4.11 shows the output
    of looking at the top 10 most common category codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-11.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 Top 10 category codes by number of rows
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This doesn’t necessarily mean most of our products are in the “light construction
    tools” category because this is the number of events, not the number of unique
    products, but it does suggest a problem similar to the one we uncovered in figure
    4.10\. Let’s look at how brand and category codes intersect by looking at the
    top 10 brands in this “light construction tools” category. The following code
    produces the output in figure 4.12:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-12.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 Top 10 brands in the `construction.tools.light` category
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Unless technology manufacturers have secretly branched out into construction
    tools, we have a problem with our product categories. Most of these brands are
    typically known for smartphones, and we can look at some examples to verify this.
    The following code finds all product IDs that have multiple codes against them
    so that we know which ones to focus on. Figure 4.13 shows a sample of this subset
    of product IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-13.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 A subset of product IDs with multiple assigned categories
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'From this subset of data, we can find instances where one category is “light
    construction tools” and see what other categories that product is assigned to.
    An example is shown in the following code and figure 4.14:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-14.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 Breakdown of categories for a particular erroneous product
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'In this instance, we have a smartphone that is also incorrectly categorized
    as a construction tool. We have a major decision to make now: How do we handle
    these products? We have several options:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ignore this problem* —The downside is we won’t be able to use the category
    code to investigate top-performing products since we know it is often incorrectly
    assigned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drop products that are incorrectly categorized* —The problem is this could
    be a significant portion of our data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Fix the product categorization* —This seems like the best approach, but we
    might not have enough information to find the correct category for each product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In reality, we would want more information about how these product categories
    came about and, ideally, fix the problem at the source. However, in this case,
    we only have this data to work with, so let’s attempt a fix using the data we
    have.
  prefs: []
  type: TYPE_NORMAL
- en: Correcting inconsistencies in data categories
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our plan of action is to find products with duplicate categories, and for cases
    where one category is `construction.tools.light`, we use the other category. In
    instances where we have duplication that doesn’t involve the `construction.tools.light`
    category, we would need to investigate accordingly or use the majority one. For
    example, if a product ID is mostly categorized as a refrigerator but is sometimes
    categorized as a smartphone, we overwrite the data so that the product ID is always
    in the refrigerator category. There is the danger that we incorrectly categorize
    some products, but we will also fix the problem with the construction tools category.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code defines a method to fix the category codes of a single product
    ID and applies it to all the duplicated product ID data. The output is a new category
    code for each of the affected product IDs, as shown in figure 4.15:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '#1 product_id_rows contains all rows for a product ID so we can find the two
    categories associated with this ID.'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 If one is construction.tools.light, return the other one.'
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Otherwise, return the majority category.'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-15.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 A preview of the data we will use to correct product ID categories
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'As figure 4.15 shows, we have plenty of products that should be smartphones
    but aren’t always categorized that way. Now, we will join this corrected category
    data to our original events dataset and overwrite the categories where the original
    and the corrected categories do not match. To verify our changes, we will look
    at the top category codes again and compare our results to figure 4.11\. The following
    code produces a similar result, as shown in figure 4.16:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 A breakdown of category codes after applying our fixes
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, our data mostly consists of smartphones, which is more in line with our
    findings around the most popular brands. It is important to note that we may have
    inflated the prevalence of smartphones because we made specific assumptions about
    how to fix our data, which may not be correct. However, we do not have enough
    information in the available data to investigate this further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon inspection, this category code column also contains a “main” category,
    corresponding to the first part of the string up to the first period character,
    that may be useful in our analysis, so let’s isolate it. The output of the following
    code shows the breakdown of this main category, as shown in figure 4.17:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-17.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 A breakdown of the “main” category of products
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This table further convinces us that most of our products are electronics of
    some kind. Before we continue to summarize our data at the product level, we will
    want to make sure that a particular product ID only ever refers to one product.
    We will come to this step soon. Before we move on, let’s summarize our work so
    far. Figure 4.18 shows the steps we have taken and where our decisions could have
    diverged.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-18.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 The steps in our analysis so far
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Another way products are categorized is with their brand. We should also investigate
    whether there are any product IDs that have multiple brands against them. Considering
    that we have missing data for the `brand` column, this seems like a relevant step
    to take.
  prefs: []
  type: TYPE_NORMAL
- en: Investigate consistency of brand labels
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, to investigate whether each product only has one brand attached to it,
    we follow a process very similar to when we did this for product categories. The
    output of the following code is shown in figure 4.19:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Temporarily fills missing brand data with a placeholder because the nunique
    function ignores missing values'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-19.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 The result of investigating products labeled with multiple brands
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are 1,245 products in our catalog that have either two different brands
    against them or have the `brand` column missing some of the time. To clean this
    data up, we will apply logic similar to what we used for categories: for products
    with multiple brands against them, we pick the majority non-null brand. The following
    code block implements this logic, and the output is a mapping of product IDs to
    the brand they should be assigned to. A subset of this output is shown in figure
    4.20:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '#1 product_id_rows contains all rows for a product ID, so we can find the brands
    associated with this ID. Using value_counts will give us only non-NA values.'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 If there are no NA values, just return the majority brand.'
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Now, if np.NaN is the only value, return it.'
  prefs: []
  type: TYPE_NORMAL
- en: '#4 Otherwise, return the second value (the majority non-null value).'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-20.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 Product IDs against the brand to which they should be allocated
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Similarly to how we handled categories, we can join these corrected brands to
    the original events data and overwrite the `brand` column where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Correcting inconsistencies in brand labels
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We do this with the following code, after which we verify whether there are
    any product IDs that still have multiple combinations of brand and category. The
    expected output is that there are no such product IDs, and the number of unique
    product ID, category, and brand combinations should match the number of unique
    product IDs. Running the following code block does not result in an assertion
    error, meaning the condition is met, and product IDs are finally categorized in
    a unique way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the remainder of the project, we will be working with product-level data,
    so a useful step is to give each product a more descriptive name, especially because
    we don’t have a “product name” column. Each product ID should have a unique name,
    meaning the product ID should be a part of the name since that’s what makes products
    unique in our dataset. We can combine the product’s ID, brand, and category code
    to get a more readable string for each product. The following code does this,
    and an output of the data with this additional column is shown in figure 4.21:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '#1 Only include brand if it''s available.'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-21.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 A snapshot of the new columns added to the events data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, we may wish to export this modified data to an intermediate dataset,
    which we can use for analysis. Some of the operations so far may take a few minutes
    due to the size of the data, and we do not want that to be a bottleneck every
    time we come back to work on our analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting an intermediate data model to separate data cleaning from analysis
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is good practice to separate the code that cleans the data from the code
    that analyzes it. One way to do this is to output the cleaned data to a separate
    file, which the analysis code can read directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The intermediate data can be any format, but *parquet* is useful because it
    is a compressed data format that stores type information, unlike other formats,
    such as CSVs. This means that when we read in a parquet file in the future, we
    do not have to convert date columns to date types as our code will already know
    about them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let’s summarize this part of the analysis before moving on. Figure 4.22 shows
    the steps we have taken so far, up to the point where we exported our intermediate
    dataset. Notice that our investigations into categories and brands are represented
    side by side because they are independent of each other and could have been done
    in any order.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-22.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 All the steps in part 1 of our analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, we are ready to move on to part 2 of our solution, which is summarizing
    data to the product level and calculating all the relevant metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.2 Calculating product-level metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have explored and cleaned our data and are now ready to start looking at
    our desired metrics. However, first we need to transform data to be at the right
    granularity.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the granularity of the data to suit the question
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The raw data is at the event level, and we are interested in products, so we
    should aggregate the data to be one row per product. In doing so, we need to define
    various aggregations to summarize data at the right level. To understand what
    aggregations we need, we must define our metrics precisely. Based on our project
    brief, the metrics we will calculate are
  prefs: []
  type: TYPE_NORMAL
- en: '*Volume* —The count of purchase events for a given product ID. We do not have
    a “quantity” column, meaning if a particular user bought the same product twice,
    there would be two separate rows in the data to indicate this. Therefore, counting
    rows that correspond to purchase events is how we can count the sales volume for
    a product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Revenue* —The sum of the `price` column. We have no information about shipping
    costs, wholesale cost of products, or the amount of tax, so we can only calculate
    the gross total income from each product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Popularity* —The number of unique users who bought a product. This will ignore
    cases where a single user bought multiples of a product but is a good proxy for
    popularity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Change in performance* —For this, we will simply calculate each metric separately
    for November and December events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conversion* —Given the data, it will be defined as the number of purchase
    events as a percentage of cart events in a given period. That is, out of all the
    times someone put an item into a cart, what percentage became a purchase event?
    Ideally, we would also consider what percentage of viewed items turned into sales,
    but we do not have the data to answer that question.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversion is a tricky metric because the denominator can be interpreted in
    multiple ways. For example, if a user puts an item into the cart, removes it,
    then adds it again, and finally purchases it, we may have two events contributing
    to the denominator instead of one. Our choice of whether to deduplicate these
    events as a single instance or to use both rows will affect our conversion figures.
    Here, when calculating conversion, we will keep things simple and count all cart
    events as our denominator and all purchase events as our numerator.
  prefs: []
  type: TYPE_NORMAL
- en: Given the kinds of metrics we are interested in, our aggregations at a product
    level will include
  prefs: []
  type: TYPE_NORMAL
- en: November and December data separately for month-on-month comparison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sum of the `price` column for revenue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Count of rows for volume
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of unique users for popularity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between the monthly figures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of cart and purchase events so we can calculate conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For all but the conversion metrics, we only need the purchase events. It is
    only when introducing conversion that we want to look at cart events as well.
    Therefore, to make our code more efficient, we will calculate most of the metrics
    on the purchases before calculating conversion metrics separately and joining
    them afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to separate the cart events data from the purchase events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s construct a league table (ranking system) of metrics at the individual
    product level step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating multiple metrics at once
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Creating this league table will be a dense piece of code because it is where
    we end up doing more of our calculations, so let’s deconstruct it into its individual
    steps. First, we create new indicator columns to calculate monthly values. Indicators
    are columns that contain either a value or a fallback value like 0 if a row of
    data does not meet the desired criteria. In this case, `november_revenue` will
    contain the value from the `price` column if the event is in November. Otherwise,
    it will contain 0\. Calculating the sum of this column for a given product ID
    will therefore give us the total revenue for November alone. The following code
    creates the indicator columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we group our data by product ID and summarize these new indicator columns
    to get monthly revenue, row count, and unique user ID count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create new columns that calculate the difference between November
    and December figures. This gives us all our desired metrics that only require
    the purchase events data. It is this dataset to which we will join our conversion
    metrics. Here is the final complete code block, and figure 4.23 shows a snapshot
    of the created league table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-23.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 A snapshot of the purchases league table data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: From this table, we get a lot of information at a glance, including
  prefs: []
  type: TYPE_NORMAL
- en: Products that sold more in November than in December and vice versa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Products that did not sell at all in November but did sell in December
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Products bought by more or fewer customers month-on-month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In some ways, we could even stop here and use this table to answer our questions
    by simply sorting it based on the column that we believe represents our metric
    for the best product. However, we also wanted to calculate conversion metrics
    first. The following code calculates the number of rows per event type for each
    product ID per month:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using the `pivot_table` function in `pandas` means this table would extend to
    counting any number of event types and could be used if we were to obtain data
    for view events as well. This isn’t strictly necessary here, but it requires a
    bit of prophylactic coding to prepare for future eventualities. Figure 4.24 shows
    a snapshot of this conversion league table.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-24.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 A snapshot of the conversion league table data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: From this snapshot, we have already found a problem; this data will contain
    missing values. Having no cart or purchase events results in a missing value,
    rather than a zero, because strictly speaking, 0 conversion would mean we had
    cart events, and none of them resulted in a purchase. Whenever you calculate a
    division, you should also be prepared to encounter infinity values, which happen
    when you try to divide by zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let’s merge these two product league tables and ensure that product
    IDs are unique. Figure 4.25 shows the output when we look at the columns in this
    merged metrics dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-25.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 Columns in our metrics table and their data types
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Let’s add these latest steps to our growing diagram to show our analytical steps.
    Figure 4.26 shows the latest version. I put the investigations of product brands
    and categories alongside one another to indicate that they happen independently
    and don’t necessarily follow each other in a specific order.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-26.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 Steps taken so far up to the creation of the metrics league table
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, we have all the metrics we could be interested in, and the next step is
    to look at products that perform well.
  prefs: []
  type: TYPE_NORMAL
- en: 4.4.3 Finding the best products using our defined metrics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With all these metrics in place, how do we use them to find the “best” product?
    The answer is, as is often the case, it depends.
  prefs: []
  type: TYPE_NORMAL
- en: Defining metrics based on the specific question
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have multiple options, such as
  prefs: []
  type: TYPE_NORMAL
- en: Picking a single metric to sort the league table by and thinking of the top
    *N* products as being the best.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could weight each metric by its relative importance, create a weighted combination
    of metric values to come up with a single value to define each product, and use
    that value to find the top *N*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we care specifically about December performers, we could look at outliers
    in our difference metrics, such as the difference in volume between November and
    December.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more options, but since the brief was specifically about the
    December sale period, we will focus our efforts on products that showed the biggest
    month-on-month increases. For which of the metrics should we focus on this difference?
    Our options are
  prefs: []
  type: TYPE_NORMAL
- en: '*Change in revenue* —Focusing on absolute revenue might mean expensive items
    skew our results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Change in the number of unique users* —This might be a good measure for products
    that perform better month-on-month.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Change in volume* —This seems like a solid, logical place to start as simply
    selling more of an item month-on-month is an indicator of good performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We should first understand the typical month-on-month change in volume. Figure
    4.27 shows the histogram produced by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-27.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 Histogram of month-on-month change in product sales volume
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Clearly, there are outliers that skew this histogram beyond usefulness. Let’s
    zoom into the middle to see if the month-on-month change is centered around zero.
    The following code produces the histogram in figure 4.28:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-28.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 A zoomed-in version of the histogram from figure 4.27
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Looking at this histogram more closely, we see that most products haven’t changed
    much in sales volume month-on-month, and some products sold more, while others
    sold less. However, these are absolute values. Products that generally sell only
    a handful per month would be underrepresented in these graphs. Therefore, we should
    really calculate and look at the percentage change in sales volume. The following
    code calculates this value and produces a histogram of percentage change, as shown
    in figure 4.29\. Note the code also removes missing percentage change values,
    as well as infinity values produced when dividing by zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-29.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 Distribution of percentage month-on-month change in sales volume
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This chart shows us that most products seem to have actually sold nothing in
    December versus November since a –100% change means zero items sold in December.
    There are also products that sold two, three, four, and five times more month-on-month.
    With percentage values, we need to be mindful of biases that can arise. For example,
    if we sold one of a product in November and five in December, that is a 500% change
    but is unlikely to be as significant as selling 1,000 of something when we sold
    only 500 in the previous month, although that is technically a smaller percentage
    change. One way to mitigate this problem is to exclude items that only typically
    sell a handful.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue our analysis, however, we should include additional product
    details in our league table so that when we identify high performers, we can look
    at what categories or brands they represent.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating on our metrics based on our findings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We could have enhanced our products with this additional data when creating
    the league table, but we are doing it at this stage of the analysis in response
    to our desire to investigate further. The following code creates a product catalog,
    which we can join to our league table to add additional product details. Figure
    4.30 shows a snapshot of this product catalog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-30.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 A snapshot of the product catalog
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Now, we continue our analysis by defining cutoffs for how many of a particular
    product we must have sold to consider it when we look for top performers. Discounting
    products that only sell a handful at a time means that high percentage change
    values are more likely to be meaningful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined some cutoffs that mean we only consider products that
  prefs: []
  type: TYPE_NORMAL
- en: Sold at least twice as many in December as November
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sold at least 10 in November
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sold at least 100 in December
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These cutoffs are somewhat arbitrary, and changing them will change our results,
    but they do ensure we only identify products that really did outperform themselves
    in December. Our particular choice of cutoffs resulted in 449 products. We could
    provide these directly to our stakeholders, or we could do further analysis to
    see what kinds of products show up more often as high performers. Let us look
    at the top categories, subcategories, and brands among these high-performing products.
    These are shown in figures 4.31 through 4.33, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-31.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 Top-performing product categories
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![figure](../Images/4-32.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 Top-performing product subcategories
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '![figure](../Images/4-33.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 Top-performing product brands
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'It appears that smartphones, various kinds of clothing, and products made by
    Lucente top the rankings in terms of December’s best performers. There are also
    some coffee grinders that appear to have performed well. In fact, digging into
    the results a bit more suggests that these coffee grinders account for most of
    Lucente’s success in the league table. The following code shows the top unique
    combinations of category, subcategory, and brand, as shown in figure 4.34:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-34.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 Top-performing products by category and brand
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: One aspect of this final table that might catch the eye is the presence of shoes
    made by Sony, which may warrant some investigation. They could be legitimate Sony-branded
    shoes or products categorized incorrectly.
  prefs: []
  type: TYPE_NORMAL
- en: We now have enough results to present to stakeholders. To recap, we have
  prefs: []
  type: TYPE_NORMAL
- en: Combined the events datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaned up incorrectly categorized product data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculated all possible metrics of interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decided what to use as a measure of “best”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracted the highest-performing products based on our chosen metric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigated these high performers in more detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whichever metric(s) you chose, the process would have been similar to that shown
    in this example solution. We are unlikely to have reached the same conclusions
    because those depend entirely on your analytical choices throughout.
  prefs: []
  type: TYPE_NORMAL
- en: Let us briefly look at what happens when we use a different metric to define
    the best product and how that affects our results.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating alternative metric definitions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'What happens if we decide the best products are the ones that converted the
    most cart events into purchase ones in the month of December? First, we use the
    following code to produce the histogram in figure 4.35, showing the distribution
    of December conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-35.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 Distribution of conversion percentage in December
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Most products convert at around the 30% mark, but a lot of products convert
    at 100% and even more. That latter option shouldn’t be possible since we should
    logically not have more products purchased than were put into a cart. Let’s investigate
    these records. The following code extracts only rows with over 99% conversion
    and excludes infinite values and other data errors. Using those results, we examine
    a single example of high conversion, shown in figure 4.36:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-36.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 An example of raw data leading to over 100% conversion
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: There is a scarf that was bought three times by the same user on two different
    dates but with only one associated cart event. This could mean either a data error
    where we are missing two cart events or that we made incorrect assumptions about
    the data-generating process. When we said conversion should not be over 100%,
    we assumed a linear process where a user cannot make a purchase without putting
    an item into their cart. However, it is possible there is an “orders” page where
    a user could review their past orders and reorder products, while bypassing the
    cart screens. If this were the case, the data shown in figure 4.35 would not be
    unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: 'As it stands, we have no way of knowing whether these instances are valid,
    so to get our top performers, we can simply restrict our data to under 100% conversion.
    Let us also stipulate some cutoffs and say that a product must have been bought
    by at least *N* users with a total of *M* sales to be included in our top conversion
    performers. The following code identifies the top performers, totaling 55 rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This means there are 55 products in total that were bought by at least five
    different users, totaling a minimum of 10 sales, and converted over 70% of their
    cart events to purchase ones. We could now look at what kinds of products these
    correspond to by looking at their categories. This output is shown in figure 4.37:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-37.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 Top-performing categories among highest-converting products
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The results are quite different from the volume-based rankings. When conversion
    is considered the key metric, furniture and construction items come up as the
    highest performers. Looking into this deeper, using the following code gives us
    the output in figure 4.38:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/4-38.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 Furniture and construction products that converted best in December
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: What this tells us is that once most people have identified a faucet, drill,
    or sofa, they will most likely go ahead and purchase it. Smartphones feature less
    in conversion-based rankings, perhaps indicating that people are unsure about
    their smartphone purchase even after placing the item in their cart.
  prefs: []
  type: TYPE_NORMAL
- en: Before summarizing our conclusions, let’s recap the entire analysis process
    as a diagram to remind ourselves of the steps we took and where our choices might
    have diverged. Figure 4.39 shows the final diagram.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/4-39.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.39 The final diagram showing all the steps and decision points in our
    analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We are now ready to summarize our results in preparation for presenting them
    to our stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Project outcomes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Based on these results, it looks like a safe bet to recommend to our stakeholders
    that classic Christmas present items like smartphones and kitchen appliances are
    likely to be high performers in December. The results based on conversion are
    less convincing since they only highlight products that people buy once they’ve
    added them to their cart, but they may not tell us anything about the success
    of those products.
  prefs: []
  type: TYPE_NORMAL
- en: As always, there are limitations to our analysis. We did not look at the correlation
    between product price and performance. It is possible that our data implicitly
    tells us when a sale was on, which we could identify by looking at products whose
    price suddenly dropped, and this could inform our decision about which products
    sell best during sale periods. We could also request additional pricing data,
    such as postage costs, tax, or item wholesale costs. This latter figure could
    tell us not just which products generate the most revenue but also which ones
    generate the highest profit.
  prefs: []
  type: TYPE_NORMAL
- en: Our restriction to two months of data also means our analysis is incomplete.
    Having more data would let us benchmark our products better and see which products
    deviate most from their average baseline performance. As it stands, we based this
    on a single month of data, which may be insufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Our initial findings warrant a further discussion with our stakeholders, and
    hopefully, showing them the effects of choosing different metrics will help focus
    them on the ones that truly matter to them. When choosing what to present to them,
    it is important to consider whether our recommendations are actionable. Telling
    stakeholders that people generally buy the faucets they have identified is less
    likely to result in them taking action than telling them that smartphones increase
    their sales the most in the December period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Further project ideas with this data'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The e-commerce data in this chapter gives you plenty of opportunities to practice
    calculating and reflecting on different metrics. As with all projects, I recommend
    considering different research questions, such as
  prefs: []
  type: TYPE_NORMAL
- en: What are some products whose prices fluctuate more than others? There is no
    reason to assume the same product ID sold for the same amount each time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there temporal patterns in the data (products that sell more or convert
    better on weekends than weekdays, for example)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You could go deeper into the product catalog and look for subcategories that
    perform better than others. What would “better” mean here?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.5 Closing thoughts on metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an analyst, you will encounter many projects like this one, where metrics
    will be insufficiently defined. Your job is not simply to perform the calculations
    given to you by a stakeholder, but to have a conversation with them to define
    metrics that are clear and measurable, given the available data, and that capture
    the right underlying concepts. We should generally be wary of summarizing complex
    problems into a single metric and should feel comfortable pushing back to help
    stakeholders create more usable problem definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two avenues to explore these concepts further: one is to understand
    different business metrics generally so that business terminology is more familiar
    to you, and the other is to research metrics specific to the industry you work
    in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'How do you know what to read on the topic? As it turns out, generating reading
    lists for a new topic is a great use of generative AI tools, for example, large
    language models such as Open AI’s ChatGPT. I gave it the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: Give me a reading list for someone who is interested in exploring different
    business metrics and their impact
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'ChatGPT was able to generate a reading list of books to explore metrics further.
    The list includes general works such as *The Balanced Scorecard: Translating Strategy
    into Action* (Harvard Business School Press, 1996) by Robert S. Kaplan and David
    P. Norton, which “goes beyond financial metrics to measure various dimensions
    of organizational performance,” or a title focusing on a more specific domain,
    social media, in *Measure What Matters: Online Tools For Understanding Customers,
    Social Media, Engagement, and Key Relationships* (Wiley, 2011) by Katie Delahaye
    Paine.'
  prefs: []
  type: TYPE_NORMAL
- en: While not all recommendations by the AI might be usable, employing it to kickstart
    the research process is one way in which it becomes a valuable tool in the analyst’s
    toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5.1 Skills for defining better metrics for any project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, our biggest challenge was turning a vague request into measurable
    metrics that we could analyze. The key skills learned for defining metrics that
    are applicable to any similar project include
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring that definitions within the data are consistent (e.g., the same product
    is always assigned to the same category)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting intermediate versions of the data to separate exploration and cleaning
    from analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the granularity of the data to suit the question (e.g., summarizing
    transaction-level data to the product level)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating multiple metrics to investigate the problem from different angles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating on our chosen metrics once we have some initial findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigating alternative metrics to present to our stakeholders for a more
    complete picture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choosing the right metric is a vital professional skill for analysts to develop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any metric you choose to measure performance will affect the entire analysis
    path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be wary of summarizing complex problems into a single metric.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definitions of key metrics should be unambiguous to avoid analytical errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
