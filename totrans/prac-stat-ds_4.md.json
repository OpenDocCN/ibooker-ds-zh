["```py\nmodel <- lm(PEFR ~ Exposure, data=lung)\n```", "```py\nPEFR ~ Exposure - 1\n```", "```py\nCall:\nlm(formula = PEFR ~ Exposure, data = lung)\n\nCoefficients:\n(Intercept)     Exposure\n    424.583       -4.185\n```", "```py\npredictors = ['Exposure']\noutcome = 'PEFR'\n\nmodel = LinearRegression()\nmodel.fit(lung[predictors], lung[outcome])\n\nprint(f'Intercept: {model.intercept_:.3f}')\nprint(f'Coefficient Exposure: {model.coef_[0]:.3f}')\n```", "```py\nfitted <- predict(model)\nresid <- residuals(model)\n```", "```py\nfitted = model.predict(lung[predictors])\nresiduals = lung[outcome] - fitted\n```", "```py\nhead(house[, c('AdjSalePrice', 'SqFtTotLiving', 'SqFtLot', 'Bathrooms',\n               'Bedrooms', 'BldgGrade')])\nSource: local data frame [6 x 6]\n\n  AdjSalePrice SqFtTotLiving SqFtLot Bathrooms Bedrooms BldgGrade\n         (dbl)         (int)   (int)     (dbl)    (int)     (int)\n1       300805          2400    9373      3.00        6         7\n2      1076162          3764   20156      3.75        4        10\n3       761805          2060   26036      1.75        4         8\n4       442065          3200    8618      3.75        5         7\n5       297065          1720    8620      1.75        4         7\n6       411781           930    1012      1.50        2         8\n```", "```py\nsubset = ['AdjSalePrice', 'SqFtTotLiving', 'SqFtLot', 'Bathrooms',\n          'Bedrooms', 'BldgGrade']\nhouse[subset].head()\n```", "```py\nhouse_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n               Bedrooms + BldgGrade,\n               data=house, na.action=na.omit)\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\noutcome = 'AdjSalePrice'\n\nhouse_lm = LinearRegression()\nhouse_lm.fit(house[predictors], house[outcome])\n```", "```py\nhouse_lm\n\nCall:\nlm(formula = AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n    Bedrooms + BldgGrade, data = house, na.action = na.omit)\n\nCoefficients:\n  (Intercept)  SqFtTotLiving        SqFtLot      Bathrooms\n   -5.219e+05      2.288e+02     -6.047e-02     -1.944e+04\n     Bedrooms      BldgGrade\n   -4.777e+04      1.061e+05\n```", "```py\nprint(f'Intercept: {house_lm.intercept_:.3f}')\nprint('Coefficients:')\nfor name, coef in zip(predictors, house_lm.coef_):\n    print(f' {name}: {coef}')\n```", "```py\nsummary(house_lm)\n\nCall:\nlm(formula = AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n    Bedrooms + BldgGrade, data = house, na.action = na.omit)\n\nResiduals:\n     Min       1Q   Median       3Q      Max\n-1199479  -118908   -20977    87435  9473035\n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)\n(Intercept)   -5.219e+05  1.565e+04 -33.342  < 2e-16 ***\nSqFtTotLiving  2.288e+02  3.899e+00  58.694  < 2e-16 ***\nSqFtLot       -6.047e-02  6.118e-02  -0.988    0.323\nBathrooms     -1.944e+04  3.625e+03  -5.363 8.27e-08 ***\nBedrooms      -4.777e+04  2.490e+03 -19.187  < 2e-16 ***\nBldgGrade      1.061e+05  2.396e+03  44.277  < 2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 261300 on 22681 degrees of freedom\nMultiple R-squared:  0.5406,\tAdjusted R-squared:  0.5405\nF-statistic:  5338 on 5 and 22681 DF,  p-value: < 2.2e-16\n```", "```py\nfitted = house_lm.predict(house[predictors])\nRMSE = np.sqrt(mean_squared_error(house[outcome], fitted))\nr2 = r2_score(house[outcome], fitted)\nprint(f'RMSE: {RMSE:.0f}')\nprint(f'r2: {r2:.4f}')\n```", "```py\nmodel = sm.OLS(house[outcome], house[predictors].assign(const=1))\nresults = model.fit()\nresults.summary()\n```", "```py\nhouse_full <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n                 Bedrooms + BldgGrade + PropertyType + NbrLivingUnits +\n                 SqFtFinBasement + YrBuilt + YrRenovated +\n                 NewConstruction,\n               data=house, na.action=na.omit)\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade',\n              'PropertyType', 'NbrLivingUnits', 'SqFtFinBasement', 'YrBuilt',\n              'YrRenovated', 'NewConstruction']\n\nX = pd.get_dummies(house[predictors], drop_first=True)\nX['NewConstruction'] = [1 if nc else 0 for nc in X['NewConstruction']]\n\nhouse_full = sm.OLS(house[outcome], X.assign(const=1))\nresults = house_full.fit()\nresults.summary()\n```", "```py\nlibrary(MASS)\nstep <- stepAIC(house_full, direction=\"both\")\nstep\n\nCall:\nlm(formula = AdjSalePrice ~ SqFtTotLiving + Bathrooms + Bedrooms +\n    BldgGrade + PropertyType + SqFtFinBasement + YrBuilt, data = house,\n    na.action = na.omit)\n\nCoefficients:\n              (Intercept)              SqFtTotLiving\n                6.179e+06                  1.993e+02\n                Bathrooms                   Bedrooms\n                4.240e+04                 -5.195e+04\n                BldgGrade  PropertyTypeSingle Family\n                1.372e+05                  2.291e+04\n    PropertyTypeTownhouse            SqFtFinBasement\n                8.448e+04                  7.047e+00\n                  YrBuilt\n               -3.565e+03\n```", "```py\ny = house[outcome]\n\ndef train_model(variables): ![1](Images/1.png)\n    if len(variables) == 0:\n        return None\n    model = LinearRegression()\n    model.fit(X[variables], y)\n    return model\n\ndef score_model(model, variables): ![2](Images/2.png)\n    if len(variables) == 0:\n        return AIC_score(y, [y.mean()] * len(y), model, df=1)\n    return AIC_score(y, model.predict(X[variables]), model)\n\nbest_model, best_variables = stepwise_selection(X.columns, train_model,\n                                                score_model, verbose=True)\n\nprint(f'Intercept: {best_model.intercept_:.3f}')\nprint('Coefficients:')\nfor name, coef in zip(best_variables, best_model.coef_):\n    print(f' {name}: {coef}')\n```", "```py\nlibrary(lubridate)\nhouse$Year = year(house$DocumentDate)\nhouse$Weight = house$Year - 2005\n```", "```py\nhouse['Year'] = [int(date.split('-')[0]) for date in house.DocumentDate]\nhouse['Weight'] = house.Year - 2005\n```", "```py\nhouse_wt <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n                 Bedrooms + BldgGrade,\n               data=house, weight=Weight)\nround(cbind(house_lm=house_lm$coefficients,\n            house_wt=house_wt$coefficients), digits=3)\n\n                 house_lm    house_wt\n(Intercept)   -521871.368 -584189.329\nSqFtTotLiving     228.831     245.024\nSqFtLot            -0.060      -0.292\nBathrooms      -19442.840  -26085.970\nBedrooms       -47769.955  -53608.876\nBldgGrade      106106.963  115242.435\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\noutcome = 'AdjSalePrice'\n\nhouse_wt = LinearRegression()\nhouse_wt.fit(house[predictors], house[outcome], sample_weight=house.Weight)\n```", "```py\nhead(house[, 'PropertyType'])\nSource: local data frame [6 x 1]\n\n   PropertyType\n         (fctr)\n1     Multiplex\n2 Single Family\n3 Single Family\n4 Single Family\n5 Single Family\n6     Townhouse\n```", "```py\nhouse.PropertyType.head()\n```", "```py\nprop_type_dummies <- model.matrix(~PropertyType -1, data=house)\nhead(prop_type_dummies)\n  PropertyTypeMultiplex PropertyTypeSingle Family PropertyTypeTownhouse\n1                     1                         0                     0\n2                     0                         1                     0\n3                     0                         1                     0\n4                     0                         1                     0\n5                     0                         1                     0\n6                     0                         0                     1\n```", "```py\npd.get_dummies(house['PropertyType']).head() ![1](Images/1.png)\npd.get_dummies(house['PropertyType'], drop_first=True).head() ![2](Images/2.png)\n```", "```py\nlm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n       Bedrooms + BldgGrade + PropertyType, data=house)\n\nCall:\nlm(formula = AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n    Bedrooms + BldgGrade + PropertyType, data = house)\n\nCoefficients:\n              (Intercept)              SqFtTotLiving\n               -4.468e+05                  2.234e+02\n                  SqFtLot                  Bathrooms\n               -7.037e-02                 -1.598e+04\n                 Bedrooms                  BldgGrade\n               -5.089e+04                  1.094e+05\nPropertyTypeSingle Family      PropertyTypeTownhouse\n               -8.468e+04                 -1.151e+05\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms',\n              'BldgGrade', 'PropertyType']\n\nX = pd.get_dummies(house[predictors], drop_first=True)\n\nhouse_lm_factor = LinearRegression()\nhouse_lm_factor.fit(X, house[outcome])\n\nprint(f'Intercept: {house_lm_factor.intercept_:.3f}')\nprint('Coefficients:')\nfor name, coef in zip(X.columns, house_lm_factor.coef_):\n    print(f' {name}: {coef}')\n```", "```py\ntable(house$ZipCode)\n\n98001 98002 98003 98004 98005 98006 98007 98008 98010 98011 98014 98019\n  358   180   241   293   133   460   112   291    56   163    85   242\n98022 98023 98024 98027 98028 98029 98030 98031 98032 98033 98034 98038\n  188   455    31   366   252   475   263   308   121   517   575   788\n98039 98040 98042 98043 98045 98047 98050 98051 98052 98053 98055 98056\n   47   244   641     1   222    48     7    32   614   499   332   402\n98057 98058 98059 98065 98068 98070 98072 98074 98075 98077 98092 98102\n    4   420   513   430     1    89   245   502   388   204   289   106\n98103 98105 98106 98107 98108 98109 98112 98113 98115 98116 98117 98118\n  671   313   361   296   155   149   357     1   620   364   619   492\n98119 98122 98125 98126 98133 98136 98144 98146 98148 98155 98166 98168\n  260   380   409   473   465   310   332   287    40   358   193   332\n98177 98178 98188 98198 98199 98224 98288 98354\n  216   266   101   225   393     3     4     9\n```", "```py\npd.DataFrame(house['ZipCode'].value_counts()).transpose()\n```", "```py\nzip_groups <- house %>%\n  mutate(resid = residuals(house_lm)) %>%\n  group_by(ZipCode) %>%\n  summarize(med_resid = median(resid),\n            cnt = n()) %>%\n  arrange(med_resid) %>%\n  mutate(cum_cnt = cumsum(cnt),\n         ZipGroup = ntile(cum_cnt, 5))\nhouse <- house %>%\n  left_join(select(zip_groups, ZipCode, ZipGroup), by='ZipCode')\n```", "```py\nzip_groups = pd.DataFrame([\n    *pd.DataFrame({\n        'ZipCode': house['ZipCode'],\n        'residual' : house[outcome] - house_lm.predict(house[predictors]),\n    })\n    .groupby(['ZipCode'])\n    .apply(lambda x: {\n        'ZipCode': x.iloc[0,0],\n        'count': len(x),\n        'median_residual': x.residual.median()\n    })\n]).sort_values('median_residual')\nzip_groups['cum_count'] = np.cumsum(zip_groups['count'])\nzip_groups['ZipGroup'] = pd.qcut(zip_groups['cum_count'], 5, labels=False,\n                                 retbins=False)\n\nto_join = zip_groups[['ZipCode', 'ZipGroup']].set_index('ZipCode')\nhouse = house.join(to_join, on='ZipCode')\nhouse['ZipGroup'] = house['ZipGroup'].astype('category')\n```", "```py\nstep_lm$coefficients\n              (Intercept)             SqFtTotLiving                 Bathrooms\n             6.178645e+06              1.992776e+02              4.239616e+04\n                 Bedrooms                 BldgGrade PropertyTypeSingle Family\n            -5.194738e+04              1.371596e+05              2.291206e+04\n    PropertyTypeTownhouse           SqFtFinBasement                   YrBuilt\n             8.447916e+04              7.046975e+00             -3.565425e+03\n```", "```py\nprint(f'Intercept: {best_model.intercept_:.3f}')\nprint('Coefficients:')\nfor name, coef in zip(best_variables, best_model.coef_):\n    print(f' {name}: {coef}')\n```", "```py\nupdate(step_lm, . ~ . - SqFtTotLiving - SqFtFinBasement - Bathrooms)\n\nCall:\nlm(formula = AdjSalePrice ~ Bedrooms + BldgGrade + PropertyType +\n    YrBuilt, data = house, na.action = na.omit)\n\nCoefficients:\n              (Intercept)                   Bedrooms\n                  4913973                      27151\n                BldgGrade  PropertyTypeSingle Family\n                   248998                     -19898\n    PropertyTypeTownhouse                    YrBuilt\n                   -47355                      -3212\n```", "```py\npredictors = ['Bedrooms', 'BldgGrade', 'PropertyType', 'YrBuilt']\noutcome = 'AdjSalePrice'\n\nX = pd.get_dummies(house[predictors], drop_first=True)\n\nreduced_lm = LinearRegression()\nreduced_lm.fit(X, house[outcome])\n```", "```py\nlm(formula = AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n    Bedrooms + BldgGrade + PropertyType + ZipGroup, data = house,\n    na.action = na.omit)\n\nCoefficients:\n              (Intercept)              SqFtTotLiving\n               -6.666e+05                  2.106e+02\n                  SqFtLot                  Bathrooms\n                4.550e-01                  5.928e+03\n                 Bedrooms                  BldgGrade\n               -4.168e+04                  9.854e+04\nPropertyTypeSingle Family      PropertyTypeTownhouse\n                1.932e+04                 -7.820e+04\n                ZipGroup2                  ZipGroup3\n                5.332e+04                  1.163e+05\n                ZipGroup4                  ZipGroup5\n                1.784e+05                  3.384e+05\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms',\n              'BldgGrade', 'PropertyType', 'ZipGroup']\noutcome = 'AdjSalePrice'\n\nX = pd.get_dummies(house[predictors], drop_first=True)\n\nconfounding_lm = LinearRegression()\nconfounding_lm.fit(X, house[outcome])\n\nprint(f'Intercept: {confounding_lm.intercept_:.3f}')\nprint('Coefficients:')\nfor name, coef in zip(X.columns, confounding_lm.coef_):\n    print(f' {name}: {coef}')\n```", "```py\nlm(formula = AdjSalePrice ~ SqFtTotLiving * ZipGroup + SqFtLot +\n    Bathrooms + Bedrooms + BldgGrade + PropertyType, data = house,\n    na.action = na.omit)\n\nCoefficients:\n              (Intercept)              SqFtTotLiving\n               -4.853e+05                  1.148e+02\n                ZipGroup2                  ZipGroup3\n               -1.113e+04                  2.032e+04\n                ZipGroup4                  ZipGroup5\n                2.050e+04                 -1.499e+05\n                  SqFtLot                  Bathrooms\n                6.869e-01                 -3.619e+03\n                 Bedrooms                  BldgGrade\n               -4.180e+04                  1.047e+05\nPropertyTypeSingle Family      PropertyTypeTownhouse\n                1.357e+04                 -5.884e+04\n  SqFtTotLiving:ZipGroup2    SqFtTotLiving:ZipGroup3\n                3.260e+01                  4.178e+01\n  SqFtTotLiving:ZipGroup4    SqFtTotLiving:ZipGroup5\n                6.934e+01                  2.267e+02\n```", "```py\nmodel = smf.ols(formula='AdjSalePrice ~ SqFtTotLiving*ZipGroup + SqFtLot + ' +\n     'Bathrooms + Bedrooms + BldgGrade + PropertyType', data=house)\nresults = model.fit()\nresults.summary()\n```", "```py\nhouse_98105 <- house[house$ZipCode == 98105,]\nlm_98105 <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +\n                 Bedrooms + BldgGrade, data=house_98105)\n```", "```py\nhouse_98105 = house.loc[house['ZipCode'] == 98105, ]\n\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms', 'Bedrooms', 'BldgGrade']\noutcome = 'AdjSalePrice'\n\nhouse_outlier = sm.OLS(house_98105[outcome],\n                       house_98105[predictors].assign(const=1))\nresult_98105 = house_outlier.fit()\n```", "```py\nsresid <- rstandard(lm_98105)\nidx <- order(sresid)\nsresid[idx[1]]\n    20429\n-4.326732\n```", "```py\ninfluence = OLSInfluence(result_98105)\nsresiduals = influence.resid_studentized_internal\nsresiduals.idxmin(), sresiduals.min()\n```", "```py\nhouse_98105[idx[1], c('AdjSalePrice', 'SqFtTotLiving', 'SqFtLot',\n              'Bathrooms', 'Bedrooms', 'BldgGrade')]\n\nAdjSalePrice SqFtTotLiving SqFtLot Bathrooms Bedrooms BldgGrade\n         (dbl)         (int)   (int)     (dbl)    (int)     (int)\n20429   119748          2900    7276         3        6         7\n```", "```py\noutlier = house_98105.loc[sresiduals.idxmin(), :]\nprint('AdjSalePrice', outlier[outcome])\nprint(outlier[predictors])\n```", "```py\nstd_resid <- rstandard(lm_98105)\ncooks_D <- cooks.distance(lm_98105)\nhat_values <- hatvalues(lm_98105)\nplot(subset(hat_values, cooks_D > 0.08), subset(std_resid, cooks_D > 0.08),\n     xlab='hat_values', ylab='std_resid',\n     cex=10*sqrt(subset(cooks_D, cooks_D > 0.08)), pch=16, col='lightgrey')\npoints(hat_values, std_resid, cex=10*sqrt(cooks_D))\nabline(h=c(-2.5, 2.5), lty=2)\n```", "```py\ninfluence = OLSInfluence(result_98105)\nfig, ax = plt.subplots(figsize=(5, 5))\nax.axhline(-2.5, linestyle='--', color='C1')\nax.axhline(2.5, linestyle='--', color='C1')\nax.scatter(influence.hat_matrix_diag, influence.resid_studentized_internal,\n           s=1000 * np.sqrt(influence.cooks_distance[0]),\n           alpha=0.5)\nax.set_xlabel('hat values')\nax.set_ylabel('studentized residuals')\n```", "```py\ndf <- data.frame(resid = residuals(lm_98105), pred = predict(lm_98105))\nggplot(df, aes(pred, abs(resid))) + geom_point() + geom_smooth()\n```", "```py\nfig, ax = plt.subplots(figsize=(5, 5))\nsns.regplot(result_98105.fittedvalues, np.abs(result_98105.resid),\n            scatter_kws={'alpha': 0.25}, line_kws={'color': 'C1'},\n            lowess=True, ax=ax)\nax.set_xlabel('predicted')\nax.set_ylabel('abs(residual)')\n```", "```py\nterms <- predict(lm_98105, type='terms')\npartial_resid <- resid(lm_98105) + terms\n```", "```py\ndf <- data.frame(SqFtTotLiving = house_98105[, 'SqFtTotLiving'],\n                 Terms = terms[, 'SqFtTotLiving'],\n                 PartialResid = partial_resid[, 'SqFtTotLiving'])\nggplot(df, aes(SqFtTotLiving, PartialResid)) +\n  geom_point(shape=1) + scale_shape(solid = FALSE) +\n  geom_smooth(linetype=2) +\n  geom_line(aes(SqFtTotLiving, Terms))\n```", "```py\nsm.graphics.plot_ccpr(result_98105, 'SqFtTotLiving')\n```", "```py\nlm(AdjSalePrice ~  poly(SqFtTotLiving, 2) + SqFtLot +\n                BldgGrade + Bathrooms + Bedrooms,\n                    data=house_98105)\n\nCall:\nlm(formula = AdjSalePrice ~ poly(SqFtTotLiving, 2) + SqFtLot +\n   BldgGrade + Bathrooms + Bedrooms, data = house_98105)\n\nCoefficients:\n           (Intercept)  poly(SqFtTotLiving, 2)1  poly(SqFtTotLiving, 2)2\n            -402530.47               3271519.49                776934.02\n               SqFtLot                BldgGrade                Bathrooms\n                 32.56                135717.06                 -1435.12\n              Bedrooms\n              -9191.94\n```", "```py\nmodel_poly = smf.ols(formula='AdjSalePrice ~  SqFtTotLiving + ' +\n                '+ I(SqFtTotLiving**2) + ' +\n                'SqFtLot + Bathrooms + Bedrooms + BldgGrade', data=house_98105)\nresult_poly = model_poly.fit()\nresult_poly.summary()  ![1](Images/1.png)\n```", "```py\nlibrary(splines)\nknots <- quantile(house_98105$SqFtTotLiving, p=c(.25, .5, .75))\nlm_spline <- lm(AdjSalePrice ~ bs(SqFtTotLiving, knots=knots, degree=3) +\n  SqFtLot + Bathrooms + Bedrooms + BldgGrade,  data=house_98105)\n```", "```py\nformula = 'AdjSalePrice ~ bs(SqFtTotLiving, df=6, degree=3) + ' +\n          'SqFtLot + Bathrooms + Bedrooms + BldgGrade'\nmodel_spline = smf.ols(formula=formula, data=house_98105)\nresult_spline = model_spline.fit()\n```", "```py\nlibrary(mgcv)\nlm_gam <- gam(AdjSalePrice ~ s(SqFtTotLiving) + SqFtLot +\n                    Bathrooms +  Bedrooms + BldgGrade,\n                    data=house_98105)\n```", "```py\npredictors = ['SqFtTotLiving', 'SqFtLot', 'Bathrooms',  'Bedrooms', 'BldgGrade']\noutcome = 'AdjSalePrice'\nX = house_98105[predictors].values\ny = house_98105[outcome]\n\ngam = LinearGAM(s(0, n_splines=12) + l(1) + l(2) + l(3) + l(4))  ![1](Images/1.png)\ngam.gridsearch(X, y)\n```"]