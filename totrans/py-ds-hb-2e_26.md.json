["```py\nIn [1]: from datetime import datetime\n        datetime(year=2021, month=7, day=4)\nOut[1]: datetime.datetime(2021, 7, 4, 0, 0)\n```", "```py\nIn [2]: from dateutil import parser\n        date = parser.parse(\"4th of July, 2021\")\n        date\nOut[2]: datetime.datetime(2021, 7, 4, 0, 0)\n```", "```py\nIn [3]: date.strftime('%A')\nOut[3]: 'Sunday'\n```", "```py\nIn [4]: import numpy as np\n        date = np.array('2021-07-04', dtype=np.datetime64)\n        date\nOut[4]: array('2021-07-04', dtype='datetime64[D]')\n```", "```py\nIn [5]: date + np.arange(12)\nOut[5]: array(['2021-07-04', '2021-07-05', '2021-07-06', '2021-07-07',\n               '2021-07-08', '2021-07-09', '2021-07-10', '2021-07-11',\n               '2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15'],\n              dtype='datetime64[D]')\n```", "```py\nIn [6]: np.datetime64('2021-07-04')\nOut[6]: numpy.datetime64('2021-07-04')\n```", "```py\nIn [7]: np.datetime64('2021-07-04 12:00')\nOut[7]: numpy.datetime64('2021-07-04T12:00')\n```", "```py\nIn [8]: np.datetime64('2021-07-04 12:59:59.50', 'ns')\nOut[8]: numpy.datetime64('2021-07-04T12:59:59.500000000')\n```", "```py\nIn [9]: import pandas as pd\n        date = pd.to_datetime(\"4th of July, 2021\")\n        date\nOut[9]: Timestamp('2021-07-04 00:00:00')\n```", "```py\nIn [10]: date.strftime('%A')\nOut[10]: 'Sunday'\n```", "```py\nIn [11]: date + pd.to_timedelta(np.arange(12), 'D')\nOut[11]: DatetimeIndex(['2021-07-04', '2021-07-05', '2021-07-06', '2021-07-07',\n                        '2021-07-08', '2021-07-09', '2021-07-10', '2021-07-11',\n                        '2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15'],\n                       dtype='datetime64[ns]', freq=None)\n```", "```py\nIn [12]: index = pd.DatetimeIndex(['2020-07-04', '2020-08-04',\n                                   '2021-07-04', '2021-08-04'])\n         data = pd.Series([0, 1, 2, 3], index=index)\n         data\nOut[12]: 2020-07-04    0\n         2020-08-04    1\n         2021-07-04    2\n         2021-08-04    3\n         dtype: int64\n```", "```py\nIn [13]: data['2020-07-04':'2021-07-04']\nOut[13]: 2020-07-04    0\n         2020-08-04    1\n         2021-07-04    2\n         dtype: int64\n```", "```py\nIn [14]: data['2021']\nOut[14]: 2021-07-04    2\n         2021-08-04    3\n         dtype: int64\n```", "```py\nIn [15]: dates = pd.to_datetime([datetime(2021, 7, 3), '4th of July, 2021',\n                                '2021-Jul-6', '07-07-2021', '20210708'])\n         dates\nOut[15]: DatetimeIndex(['2021-07-03', '2021-07-04', '2021-07-06', '2021-07-07',\n                        '2021-07-08'],\n                       dtype='datetime64[ns]', freq=None)\n```", "```py\nIn [16]: dates.to_period('D')\nOut[16]: PeriodIndex(['2021-07-03', '2021-07-04', '2021-07-06', '2021-07-07',\n                      '2021-07-08'],\n                     dtype='period[D]')\n```", "```py\nIn [17]: dates - dates[0]\nOut[17]: TimedeltaIndex(['0 days', '1 days', '3 days', '4 days', '5 days'],\n          > dtype='timedelta64[ns]', freq=None)\n```", "```py\nIn [18]: pd.date_range('2015-07-03', '2015-07-10')\nOut[18]: DatetimeIndex(['2015-07-03', '2015-07-04', '2015-07-05', '2015-07-06',\n                        '2015-07-07', '2015-07-08', '2015-07-09', '2015-07-10'],\n                       dtype='datetime64[ns]', freq='D')\n```", "```py\nIn [19]: pd.date_range('2015-07-03', periods=8)\nOut[19]: DatetimeIndex(['2015-07-03', '2015-07-04', '2015-07-05', '2015-07-06',\n                        '2015-07-07', '2015-07-08', '2015-07-09', '2015-07-10'],\n                       dtype='datetime64[ns]', freq='D')\n```", "```py\nIn [20]: pd.date_range('2015-07-03', periods=8, freq='H')\nOut[20]: DatetimeIndex(['2015-07-03 00:00:00', '2015-07-03 01:00:00',\n                        '2015-07-03 02:00:00', '2015-07-03 03:00:00',\n                        '2015-07-03 04:00:00', '2015-07-03 05:00:00',\n                        '2015-07-03 06:00:00', '2015-07-03 07:00:00'],\n                       dtype='datetime64[ns]', freq='H')\n```", "```py\nIn [21]: pd.period_range('2015-07', periods=8, freq='M')\nOut[21]: PeriodIndex(['2015-07', '2015-08', '2015-09',\n                      '2015-10', '2015-11', '2015-12',\n                      '2016-01', '2016-02'],\n                     dtype='period[M]')\n```", "```py\nIn [22]: pd.timedelta_range(0, periods=6, freq='H')\nOut[22]: TimedeltaIndex(['0 days 00:00:00', '0 days 01:00:00', '0 days 02:00:00',\n                         '0 days 03:00:00', '0 days 04:00:00', '0 days 05:00:00'],\n                        dtype='timedelta64[ns]', freq='H')\n```", "```py\nIn [23]: pd.timedelta_range(0, periods=6, freq=\"2H30T\")\nOut[23]: TimedeltaIndex(['0 days 00:00:00', '0 days 02:30:00', '0 days 05:00:00',\n                         '0 days 07:30:00', '0 days 10:00:00', '0 days 12:30:00'],\n                        dtype='timedelta64[ns]', freq='150T')\n```", "```py\nIn [24]: from pandas.tseries.offsets import BDay\n         pd.date_range('2015-07-01', periods=6, freq=BDay())\nOut[24]: DatetimeIndex(['2015-07-01', '2015-07-02', '2015-07-03', '2015-07-06',\n                        '2015-07-07', '2015-07-08'],\n                       dtype='datetime64[ns]', freq='B')\n```", "```py\nIn [25]: from pandas_datareader import data\n\n         sp500 = data.DataReader('^GSPC', start='2018', end='2022',\n                                 data_source='yahoo')\n         sp500.head()\nOut[25]:                    High          Low         Open        Close      Volume \\\n         Date\n         2018-01-02  2695.889893  2682.360107  2683.729980  2695.810059  3367250000\n         2018-01-03  2714.370117  2697.770020  2697.850098  2713.060059  3538660000\n         2018-01-04  2729.290039  2719.070068  2719.310059  2723.989990  3695260000\n         2018-01-05  2743.449951  2727.919922  2731.330078  2743.149902  3236620000\n         2018-01-08  2748.510010  2737.600098  2742.669922  2747.709961  3242650000\n\n                       Adj Close\n         Date\n         2018-01-02  2695.810059\n         2018-01-03  2713.060059\n         2018-01-04  2723.989990\n         2018-01-05  2743.149902\n         2018-01-08  2747.709961\n```", "```py\nIn [26]: sp500 = sp500['Close']\n```", "```py\nIn [27]: %matplotlib inline\n         import matplotlib.pyplot as plt\n         plt.style.use('seaborn-whitegrid')\n         sp500.plot();\n```", "```py\nIn [28]: sp500.plot(alpha=0.5, style='-')\n         sp500.resample('BA').mean().plot(style=':')\n         sp500.asfreq('BA').plot(style='--');\n         plt.legend(['input', 'resample', 'asfreq'],\n                    loc='upper left');\n```", "```py\nIn [29]: fig, ax = plt.subplots(2, sharex=True)\n         data = sp500.iloc[:20]\n\n         data.asfreq('D').plot(ax=ax[0], marker='o')\n\n         data.asfreq('D', method='bfill').plot(ax=ax[1], style='-o')\n         data.asfreq('D', method='ffill').plot(ax=ax[1], style='--o')\n         ax[1].legend([\"back-fill\", \"forward-fill\"]);\n```", "```py\nIn [30]: sp500 = sp500.asfreq('D', method='pad')\n\n         ROI = 100 * (sp500.shift(-365) - sp500) / sp500\n         ROI.plot()\n         plt.ylabel('% Return on Investment after 1 year');\n```", "```py\nIn [31]: rolling = sp500.rolling(365, center=True)\n\n         data = pd.DataFrame({'input': sp500,\n                              'one-year rolling_mean': rolling.mean(),\n                              'one-year rolling_median': rolling.median()})\n         ax = data.plot(style=['-', '--', ':'])\n         ax.lines[0].set_alpha(0.3)\n```", "```py\nIn [32]: # url = ('https://raw.githubusercontent.com/jakevdp/'\n         #        'bicycle-data/main/FremontBridge.csv')\n         # !curl -O {url}\n```", "```py\nIn [33]: data = pd.read_csv('FremontBridge.csv', index_col='Date', parse_dates=True)\n         data.head()\nOut[33]:                      Fremont Bridge Total  Fremont Bridge East Sidewalk  \\\n         Date\n         2019-11-01 00:00:00                  12.0                           7.0\n         2019-11-01 01:00:00                   7.0                           0.0\n         2019-11-01 02:00:00                   1.0                           0.0\n         2019-11-01 03:00:00                   6.0                           6.0\n         2019-11-01 04:00:00                   6.0                           5.0\n\n                              Fremont Bridge West Sidewalk\n         Date\n         2019-11-01 00:00:00                           5.0\n         2019-11-01 01:00:00                           7.0\n         2019-11-01 02:00:00                           1.0\n         2019-11-01 03:00:00                           0.0\n         2019-11-01 04:00:00                           1.0\n```", "```py\nIn [34]: data.columns = ['Total', 'East', 'West']\n```", "```py\nIn [35]: data.dropna().describe()\nOut[35]:                Total           East           West\n         count  147255.000000  147255.000000  147255.000000\n         mean      110.341462      50.077763      60.263699\n         std       140.422051      64.634038      87.252147\n         min         0.000000       0.000000       0.000000\n         25%        14.000000       6.000000       7.000000\n         50%        60.000000      28.000000      30.000000\n         75%       145.000000      68.000000      74.000000\n         max      1097.000000     698.000000     850.000000\n```", "```py\nIn [36]: data.plot()\n         plt.ylabel('Hourly Bicycle Count');\n```", "```py\nIn [37]: weekly = data.resample('W').sum()\n         weekly.plot(style=['-', ':', '--'])\n         plt.ylabel('Weekly bicycle count');\n```", "```py\nIn [38]: daily = data.resample('D').sum()\n         daily.rolling(30, center=True).sum().plot(style=['-', ':', '--'])\n         plt.ylabel('mean hourly count');\n```", "```py\nIn [39]: daily.rolling(50, center=True,\n                       win_type='gaussian').sum(std=10).plot(style=['-', ':', '--']);\n```", "```py\nIn [40]: by_time = data.groupby(data.index.time).mean()\n         hourly_ticks = 4 * 60 * 60 * np.arange(6)\n         by_time.plot(xticks=hourly_ticks, style=['-', ':', '--']);\n```", "```py\nIn [41]: by_weekday = data.groupby(data.index.dayofweek).mean()\n         by_weekday.index = ['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun']\n         by_weekday.plot(style=['-', ':', '--']);\n```", "```py\nIn [42]: weekend = np.where(data.index.weekday < 5, 'Weekday', 'Weekend')\n         by_time = data.groupby([weekend, data.index.time]).mean()\n```", "```py\nIn [43]: import matplotlib.pyplot as plt\n         fig, ax = plt.subplots(1, 2, figsize=(14, 5))\n         by_time.loc['Weekday'].plot(ax=ax[0], title='Weekdays',\n                                     xticks=hourly_ticks, style=['-', ':', '--'])\n         by_time.loc['Weekend'].plot(ax=ax[1], title='Weekends',\n                                     xticks=hourly_ticks, style=['-', ':', '--']);\n```"]