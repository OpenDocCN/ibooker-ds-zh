["```py\nIn [1]: def func1(a, b):\n            return a / b\n\n        def func2(x):\n            a = x\n            b = x - 1\n            return func1(a, b)\n\nIn [2]: func2(1)\nZeroDivisionError                         Traceback (most recent call last)\n<ipython-input-2-b2e110f6fc8f> in <module>()\n----> 1 func2(1)\n\n<ipython-input-1-d849e34d61fb> in func2(x)\n      5     a = x\n      6     b = x - 1\n----> 7     return func1(a, b)\n\n<ipython-input-1-d849e34d61fb> in func1(a, b)\n      1 def func1(a, b):\n----> 2     return a / b\n      3\n      4 def func2(x):\n      5     a = x\n\nZeroDivisionError: division by zero\n```", "```py\nIn [3]: %xmode Plain\nOut[3]: Exception reporting mode: Plain\n\nIn [4]: func2(1)\nTraceback (most recent call last):\n\n  File \"<ipython-input-4-b2e110f6fc8f>\", line 1, in <module>\n    func2(1)\n\n  File \"<ipython-input-1-d849e34d61fb>\", line 7, in func2\n    return func1(a, b)\n\n  File \"<ipython-input-1-d849e34d61fb>\", line 2, in func1\n    return a / b\n\nZeroDivisionError: division by zero\n```", "```py\nIn [5]: %xmode Verbose\nOut[5]: Exception reporting mode: Verbose\n\nIn [6]: func2(1)\nZeroDivisionError                         Traceback (most recent call last)\n<ipython-input-6-b2e110f6fc8f> in <module>()\n----> 1 func2(1)\n        global func2 = <function func2 at 0x103729320>\n\n<ipython-input-1-d849e34d61fb> in func2(x=1)\n      5     a = x\n      6     b = x - 1\n----> 7     return func1(a, b)\n        global func1 = <function func1 at 0x1037294d0>\n        a = 1\n        b = 0\n\n<ipython-input-1-d849e34d61fb> in func1(a=1, b=0)\n      1 def func1(a, b):\n----> 2     return a / b\n        a = 1\n        b = 0\n      3\n      4 def func2(x):\n      5     a = x\n\nZeroDivisionError: division by zero\n```", "```py\nIn [7]: %debug <ipython-input-1-d849e34d61fb>(2)func1()\n      1 def func1(a, b):\n----> 2     return a / b\n      3\n\nipdb> print(a)\n1\nipdb> print(b)\n0\nipdb> quit\n```", "```py\nIn [8]: %debug <ipython-input-1-d849e34d61fb>(2)func1()\n      1 def func1(a, b):\n----> 2     return a / b\n      3\n\nipdb> up <ipython-input-1-d849e34d61fb>(7)func2()\n      5     a = x\n      6     b = x - 1\n----> 7     return func1(a, b)\n\nipdb> print(x)\n1\nipdb> up <ipython-input-6-b2e110f6fc8f>(1)<module>()\n----> 1 func2(1)\n\nipdb> down <ipython-input-1-d849e34d61fb>(7)func2()\n      5     a = x\n      6     b = x - 1\n----> 7     return func1(a, b)\n\nipdb> quit\n```", "```py\nIn [9]: %xmode Plain\n        %pdb on\n        func2(1)\nException reporting mode: Plain\nAutomatic pdb calling has been turned ON\nZeroDivisionError: division by zero <ipython-input-1-d849e34d61fb>(2)func1()\n      1 def func1(a, b):\n----> 2     return a / b\n      3\n\nipdb> print(b)\n0\nipdb> quit\n```", "```py\nIn [1]: %timeit sum(range(100))\n1.53 µs ± 47.8 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n```", "```py\nIn [2]: %%timeit\n        total = 0\n        for i in range(1000):\n            for j in range(1000):\n                total += i * (-1) ** j\n536 ms ± 15.9 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn [3]: import random\n        L = [random.random() for i in range(100000)]\n        %timeit L.sort()\nOut[3]: 1.71 ms ± 334 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n```", "```py\nIn [4]: import random\n        L = [random.random() for i in range(100000)]\n        print(\"sorting an unsorted list:\")\n        %time L.sort()\nOut[4]: sorting an unsorted list:\n        CPU times: user 31.3 ms, sys: 686 µs, total: 32 ms\n        Wall time: 33.3 ms\n```", "```py\nIn [5]: print(\"sorting an already sorted list:\")\n        %time L.sort()\nOut[5]: sorting an already sorted list:\n        CPU times: user 5.19 ms, sys: 268 µs, total: 5.46 ms\n        Wall time: 14.1 ms\n```", "```py\nIn [6]: %%time\n        total = 0\n        for i in range(1000):\n            for j in range(1000):\n                total += i * (-1) ** j\nCPU times: user 655 ms, sys: 5.68 ms, total: 661 ms\nWall time: 710 ms\n```", "```py\nIn [7]: def sum_of_lists(N):\n            total = 0\n            for i in range(5):\n                L = [j ^ (j >> i) for j in range(N)]\n                total += sum(L)\n            return total\n```", "```py\nIn [8]: %prun sum_of_lists(1000000)\n14 function calls in 0.932 seconds\nOrdered by: internal time\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     5    0.808    0.162    0.808  0.162 <ipython-input-7-f105717832a2>:4(<listcomp>)\n     5    0.066    0.013    0.066  0.013 {built-in method builtins.sum}\n     1    0.044    0.044    0.918  0.918 <ipython-input-7-f105717832a2>:1\n     > (sum_of_lists)\n     1    0.014    0.014    0.932  0.932 <string>:1(<module>)\n     1    0.000    0.000    0.932  0.932 {built-in method builtins.exec}\n     1    0.000    0.000    0.000  0.000 {method 'disable' of '_lsprof.Profiler'\n     > objects}\n```", "```py\n$ pip install line_profiler\n\n```", "```py\nIn [9]: %load_ext line_profiler\n```", "```py\nIn [10]: %lprun -f sum_of_lists sum_of_lists(5000)\nTimer unit: 1e-06 s\n\nTotal time: 0.014803 s\nFile: <ipython-input-7-f105717832a2>\nFunction: sum_of_lists at line 1\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n      1                                           def sum_of_lists(N):\n      2         1          6.0      6.0      0.0      total = 0\n      3         6         13.0      2.2      0.1      for i in range(5):\n      4         5      14242.0   2848.4     96.2          L = [j ^ (j >> i) for j\n      5         5        541.0    108.2      3.7          total += sum(L)\n      6         1          1.0      1.0      0.0      return total\n```", "```py\n$ pip install memory_profiler\n\n```", "```py\nIn [11]: %load_ext memory_profiler\n```", "```py\nIn [12]: %memit sum_of_lists(1000000)\npeak memory: 141.70 MiB, increment: 75.65 MiB\n```", "```py\nIn [13]: %%file mprun_demo.py\n         def sum_of_lists(N):\n             total = 0\n             for i in range(5):\n                 L = [j ^ (j >> i) for j in range(N)]\n                 total += sum(L)\n                 del L # remove reference to L\n             return total\nOverwriting mprun_demo.py\n```", "```py\nIn [14]: from mprun_demo import sum_of_lists\n         %mprun -f sum_of_lists sum_of_lists(1000000)\n\nFilename: /Users/jakevdp/github/jakevdp/PythonDataScienceHandbook/notebooks_v2/\n> m prun_demo.py\n\nLine #    Mem usage    Increment  Occurrences   Line Contents\n============================================================\n     1     66.7 MiB     66.7 MiB           1   def sum_of_lists(N):\n     2     66.7 MiB      0.0 MiB           1       total = 0\n     3     75.1 MiB      8.4 MiB           6       for i in range(5):\n     4    105.9 MiB     30.8 MiB     5000015           L = [j ^ (j >> i) for j\n     5    109.8 MiB      3.8 MiB           5           total += sum(L)\n     6     75.1 MiB    -34.6 MiB           5           del L # remove reference to L\n     7     66.9 MiB     -8.2 MiB           1       return total\n```"]