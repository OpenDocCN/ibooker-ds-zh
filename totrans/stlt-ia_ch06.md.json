["```py\n@st.cache_data(show_spinner=\"Reading sales data...\", ttl=\"1d\")\ndef prep_data() -> pd.DataFrame:\n  df = clean_column_names(load_data())\n  df['Day'] = pd.to_datetime(df['Date'])\n  df['Week'] = df['Day'].dt.to_period('W').dt.to_timestamp()\n df['Month'] = df['Day'].dt.to_period('M').dt.to_timestamp()\n df['Year'] = df['Day'].dt.to_period('Y').dt.to_timestamp()\n  return df\n```", "```py\n df['Month'] = df['Day'].dt.to_period('M').dt.to_timestamp()\n```", "```py\ndef get_metric_time_series(df, metric, grain):\n  grouped = df.groupby(grain)\n  data = grouped.apply(metric.func, include_groups=False).reset_index()\n  data.columns = [grain, 'Value']\n  return data\n```", "```py\ndef get_time_series_chart(df, metric, grain):\n  data = get_metric_time_series(df, metric, grain)\n  fig = go.Figure()\n  fig.add_trace(\n    go.Scatter(x=data[grain], y=data['Value'], mode='lines+markers')\n  )\n\n  fig.update_layout(\n    title=f\"{metric.title}\",\n    xaxis_title=grain,\n    yaxis_title=metric.title\n  )\n  return fig\n```", "```py\ndef time_series_chart(df):\n  with st.container(border=True):\n    grain_options = [\"Day\", \"Week\", \"Month\", \"Year\"]\n grain = st.select_slider(\"Time grain\", grain_options)\n    chart_tabs = st.tabs(display_metrics)\n    for idx, met in enumerate(display_metrics):\n      with chart_tabs[idx]:\n        chart = get_time_series_chart(df, metrics[met], grain)\n        st.plotly_chart(chart, use_container_width=True)\n```", "```py\nimport streamlit as st\nfrom data_wrangling import get_unique_values, apply_filters\n\nfilter_dims = [\"Age group\", \"Gender\", \"Category\", \"Segment\",\n               \"Product name\", \"State\"]\n\ndef filter_panel(df):\n  filters = {}\n  with st.expander(\"Filters\"):\n    filter_cols = st.columns(len(filter_dims))\n    effective_df = df\n    for idx, dim in enumerate(filter_dims):\n      with filter_cols[idx]:\n        effective_df = apply_filters(effective_df, filters)\n        unique_vals = get_unique_values(effective_df, dim)\n        filters[dim] = st.multiselect(dim, unique_vals)\n  return filters\n```", "```py\n...\ndef date_range_panel():\n  start = st.date_input(\"Start date\", value=THIRTY_DAYS_AGO)\n  end = st.date_input(\"End date\", value=LATEST_DATE)\n  comparison = st.selectbox(\n \"Compare to\", [\"MoM\", \"QoQ\", \"YoY\", \"Previous period\"])\n  compare_start, compare_end = get_compare_range(start, end, comparison)\n  st.info(f\"Comparing with:  \\n{compare_start} - {compare_end}\")\n  return start, end, compare_start, compare_end\n```", "```py\ndef get_compare_range(start, end, comparison):\n  offsets = {\n    \"MoM\": pd.DateOffset(months=1),\n    \"QoQ\": pd.DateOffset(months=3),\n    \"YoY\": pd.DateOffset(years=1),\n    \"Previous period\": pd.DateOffset((end - start).days + 1)\n  }\n  offset = offsets[comparison]\n  return (start - offset).date(), (end - offset).date()\n```", "```py\nreturn (start - offset).date(), (end - offset).date()\n```", "```py\nwith st.sidebar:\n  start, end = date_range_panel()\n\nto:\n\nwith st.sidebar:\n  start, end, compare_start, compare_end = date_range_panel()\n```", "```py\nimport streamlit as st\n...\n\nwith st.sidebar:\n  start, end, compare_start, compare_end = date_range_panel()\n\n...\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\nif main_df.empty:\n  st.warning(\"No data to display\")\nelse:\n  compare_df = get_filtered_data_within_date_range(\n data, compare_start, compare_end, filters)\n  metric_bar(main_df, compare_df)\n  ...\n```", "```py\ndef metric_bar(main_df, compare_df):\n  with st.container(border=True):\n    metric_cols = st.columns(len(display_metrics))\n    for idx, metric_name in enumerate(display_metrics):\n      metric = metrics[metric_name]\n      with metric_cols[idx]:\n        value = get_metric(main_df, metric)\n        formatted_value = format_metric(value, metric.type)\n        formatted_delta = get_formatted_delta(value, compare_df, metric)\n        c1, c2, c3 = st.columns([1, 3, 1])\n        with c2:\n          st.metric(\n            metric.title, formatted_value, formatted_delta, \"normal\")\n```", "```py\nst.metric(metric.title, formatted_value)\n```", "```py\nst.metric(metric.title, formatted_value, formatted_delta, \"normal\")\n```", "```py\nformatted_delta = get_formatted_delta(value, compare_df, metric)\n```", "```py\ndef get_delta(value, compare_df, metric):\n  delta = None\n  if compare_df is not None:\n    compare_value = get_metric(compare_df, metric)\n    if compare_value != 0:\n      delta = (value - compare_value) / compare_value\n  return delta\n\ndef get_formatted_delta(value, compare_df, metric):\n  delta = get_delta(value, compare_df, metric)\n  formatted_delta = None\n  if delta is not None:\n    formatted_delta = format_metric(delta, \"percent\")\n  return formatted_delta\n```", "```py\ndelta = (value - compare_value) / compare_value\n```", "```py\nformatted_delta = format_metric(delta, \"percent\")\n```", "```py\nimport streamlit as st\n\n@st.dialog(\"Drilldown\", width=\"large\")\ndef drilldown(main_df, compare_df):\n  main_tab, compare_tab = st.tabs([\"Main\", \"Compare\"])\n  with main_tab:\n    st.dataframe(main_df, use_container_width=True)\n  with compare_tab:\n    st.dataframe(compare_df, use_container_width=True)\n```", "```py\n@st.dialog(\"Drilldown\", width=\"large\")\n```", "```py\n...\nwith st.sidebar:\n  start, end, compare_start, compare_end = date_range_panel()\n\n...\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\nif main_df.empty:\n  st.warning(\"No data to display\")\nelse:\n  compare_df = get_filtered_data_within_date_range(\n                  data, compare_start, compare_end, filters)\n  ...\n```", "```py\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\n```", "```py\nwith st.sidebar:\n  start, end, compare_start, compare_end = date_range_panel()\n```", "```py\n...\nfrom drilldown import drilldown\n\n...\nwith st.sidebar:\n  dd_button_container = st.container() #A\n  start, end, compare_start, compare_end = date_range_panel()\n\n...\nmain_df = get_filtered_data_within_date_range(data, start, end, filters)\nif main_df.empty:\n  st.warning(\"No data to display\")\nelse:\n  compare_df = get_filtered_data_within_date_range(\n                  data, compare_start, compare_end, filters)\n  if dd_button_container.button(\"Drilldown\", use_container_width=True):\n drilldown(main_df, compare_df)\n  ...\n```", "```py\ndef drilldown_dimensions():\n  return st.multiselect(\n    \"Drilldown fields\",\n    [\"Age group\", \"Gender\", \"Category\", \"Segment\", \"Product name\", \"State\"]\n  )\n```", "```py\nimport pandas as pd\nimport streamlit as st\nfrom metric_config import metrics\n\n...\ndef get_metric_cols(df):\n metrics_dict = {met: metric.func(df) for met, metric in metrics.items()}\n return pd.Series(metrics_dict)\n\n...\n```", "```py\ndef get_aggregate_metrics(df, dimensions):\n  if dimensions:\n    grouped = df.groupby(dimensions)\n    return grouped.apply(get_metric_cols).reset_index()\n  metric_cols = get_metric_cols(df)\n  return pd.DataFrame(metric_cols).T\n```", "```py\nreturn pd.DataFrame(metric_cols).T\n```", "```py\ndef get_drilldown_table(df, dimensions):\n  aggregated = get_aggregate_metrics(df, dimensions)\n  return aggregated\n```", "```py\ndef display_drilldown_table(df):\n  if df is None:\n    st.warning(\"No data available for selected filters and date range\")\n  else:\n    st.dataframe(df, use_container_width=True, hide_index=True)\n```", "```py\n@st.dialog(\"Drilldown\", width=\"large\")\ndef drilldown(main_df, compare_df):\n  dimensions = drilldown_dimensions()\n main_data = get_drilldown_table(main_df, dimensions)\n compare_data = get_drilldown_table(compare_df, dimensions)\n\n  main_tab, compare_tab = st.tabs([\"Main\", \"Compare\"])\n  with main_tab:\n    display_drilldown_table(main_data)\n  with compare_tab:\n    display_drilldown_table(compare_data)\n```", "```py\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n| Gender |    Segment     | Product name | Total sales | Gross margin | Margin % | ATV   |\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n|   M    | Fountain pens  | InkStream    |   $100,000  |   $60,000    |   60%    | $10   |\n|   M    | Fountain pens  | RoyalQuill   |   $200,000  |  $150,000    |   75%    | $40   |\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n```", "```py\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n| Gender |    Segment     | Product name | Total sales | Gross margin | Margin % | ATV   |\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n| Total  |                |              |   $300,000  |  $210,000    |   70%    | $20   |\n|   M    | Fountain pens  | InkStream    |   $100,000  |   $60,000    |   60%    | $10   |\n|   M    | Fountain pens  | RoyalQuill   |   $200,000  |  $150,000    |   75%    | $40   |\n+--------+----------------+--------------+-------------+--------------+----------+-------+\n```", "```py\ndef add_total_row(df, all_df, dimensions):\n  total_metrics = get_metric_cols(all_df)\n  if dimensions:\n    dim_vals = {dim: '' for dim in dimensions}\n    dim_vals[dimensions[0]] = 'Total'\n    total_row = pd.DataFrame({**dim_vals, **total_metrics}, index=[0])\n    return pd.concat([total_row, df], ignore_index=True)\n  total_row = pd.DataFrame({'': 'Total', **total_metrics}, index=[0])\n  return total_row\n```", "```py\ndim_vals = {dim: '' for dim in dimensions}\ndim_vals[dimensions[0]] = 'Total'\n```", "```py\ntotal_row = pd.DataFrame({**dim_vals, **total_metrics}, index=[0])\n```", "```py\nreturn pd.concat([total_row, df], ignore_index=True)\n```", "```py\ntotal_row = pd.DataFrame({'': 'Total', **total_metrics}, index=[0])\n```", "```py\ndef get_drilldown_table(df, dimensions):\n  aggregated = get_aggregate_metrics(df, dimensions)\n  with_total = add_total_row(aggregated, df, dimensions)\n return with_total\n```", "```py\nimport humanize\n\ndef format_metric(value, metric_type):\n  ...\n\ndef format_dataframe(df, metrics):\n cols = df.columns\n for col in cols:\n if col in metrics:\n df[col] = df[col].apply(format_metric, metric_type=metrics[col].type)\n return df\n```", "```py\ndf[col] = df[col].apply(format_metric, metric_type=metrics[col].type)\n```", "```py\ndef style_total_row(df):\n  def get_style(row):\n    first_col = row.index[0]\n    return [\n      'background-color: #d9d9d9' if row[first_col] == 'Total' else ''\n      for _ in row\n    ]\n  return df.style.apply(get_style, axis=1)\n```", "```py\nreturn [\n  'background-color: lightgray' if row[first_col] == 'Total' else ''\n  for _ in row\n]\n```", "```py\nreturn df.style.apply(get_style, axis=1)\n```", "```py\n...\nfrom formatting import format_dataframe\n\n...\ndef get_drilldown_table(df, dimensions):\n  aggregated = get_aggregate_metrics(df, dimensions)\n  with_total = add_total_row(aggregated, df, dimensions)\n  formatted = format_dataframe(with_total, metrics)\n styled = style_total_row(formatted)\n return styled\n```", "```py\nif dd_button_container.button(\"Drilldown\", use_container_width=True):\n  drilldown(main_df, compare_df)\n```", "```py\nhttps://duckduckgo.com/?t=h_&q=streamlit&ia=web\n```", "```py\nstart_date=2024-08-01&end_date=2024-08-31&product_name=RoyalQuill\n```", "```py\ndimension = st.query_params[\"pie_chart_dimension\"]\n```", "```py\nst.selectbox(\"Pick a field\", [\"Gender\", \"Product name\"], key=\"select_dim\")\n```", "```py\nst.session_state[\"select_dim\"] = \"Product name\"\n```", "```py\nimport streamlit as st\n\ndef get_param(key):\n  return st.query_params.get(key, None)\n\ndef set_widget_defaults():\n  for key in st.query_params:\n    if key.startswith('w:') and key not in st.session_state:\n      st.session_state[key] = get_param(key)\n\ndef set_params():\n  query_params_dict = {}\n  for key in st.session_state:\n    if key.startswith('w:'):\n      value = st.session_state[key]\n      query_params_dict[key] = value\n  st.query_params.from_dict(query_params_dict)\n```", "```py\nif key.startswith('w:') and key not in st.session_state:\n```", "```py\nstart = st.date_input(\"Start date\", value=THIRTY_DAYS_AGO, key=\"w:start\")\nend = st.date_input(\"End date\", value=LATEST_DATE, key=\"w:end\")\ncomparison = st.selectbox(\n    \"Compare to\", [\"MoM\", \"QoQ\", \"YoY\", \"Previous period\"], key=\"w:compare\")\n```", "```py\nif 'w:start' not in st.session_state:\n st.session_state['w:start'] = THIRTY_DAYS_AGO\nif 'w:end' not in st.session_state:\n st.session_state['w:end'] = LATEST_DATE\nstart = st.date_input(\"Start date\", key=\"w:start\")\nend = st.date_input(\"End date\", key=\"w:end\")\n```", "```py\n...\ndef date_range_panel():\n  if 'w:start' not in st.session_state:\n st.session_state['w:start'] = THIRTY_DAYS_AGO\n if 'w:end' not in st.session_state:\n st.session_state['w:end'] = LATEST_DATE\n  start = st.date_input(\"Start date\", key=\"w:start\")\n  end = st.date_input(\"End date\", key=\"w:end\")\n  comparison = st.selectbox(\n    \"Compare to\", [\"MoM\", \"QoQ\", \"YoY\", \"Previous period\"], key=\"w:compare\")\n  compare_start, compare_end = get_compare_range(start, end, comparison)\n  st.info(f\"Comparing with:  \\n{compare_start} - {compare_end}\")\n  return start, end, compare_start, compare_end\n```", "```py\n...\ndef filter_panel(df):\n  ...\n  with st.expander(\"Filters\"):\n    ...\n    for idx, dim in enumerate(filter_dims):\n      with filter_cols[idx]:\n        ...\n        filters[dim] = st.multiselect(\n            dim, unique_vals, key=f'w:filter|{dim}')\n  return filters\n```", "```py\n...\n    split_dimension = st.selectbox(\n      \"Group by\", pie_chart_dims, key=\"w:pie_split\")\n```", "```py\n...\ndef time_series_chart(df):\n  with st.container(border=True):\n    ...\n    grain = grain_col.select_slider(\n          \"Time grain\", grain_options, key=\"w:ts_grain\")\n    split_dimension = split_col.selectbox(\n      \"Group by\", [\"None\"] + time_chart_dims, key=\"w:ts_split\")\n    ………\n```", "```py\n...\nfrom query_params import set_widget_defaults, set_params\n\nst.set_page_config(layout='wide')\nset_widget_defaults()\n\n...\n\nset_params()\n```", "```py\nhttp://localhost:8501/?w%3Ats_grain=Week&w%3Acompare=YoY&w%3Aend=2024-08-31&w%3Astart=2024-07-01&w%3Apie_split=Age+group\n```", "```py\nw:start=2024-07-01\n```", "```py\nimport streamlit as st\nfrom datetime import date\n\n...\ndef set_params():\n  query_params_dict = {}\n  for key in st.session_state:\n    if key.startswith('w:'):\n      value = st.session_state[key]\n      if value:\n if isinstance(value, list):\n value = f'L#{','.join(value)}'\n elif isinstance(value, date):\n value = f'D#{value.isoformat()}'\n        query_params_dict[key] = value\n  st.query_params.from_dict(query_params_dict)\n```", "```py\ndef get_param(key):\n  if key not in st.query_params:\n    return None\n  value = st.query_params[key]\n  if value.startswith('L#'):\n    return value[2:].split(',')\n  if value.startswith('D#'):\n    return date.fromisoformat(value[2:])\n  return value\n```", "```py\n>>> import json\n>>> import toml\n>>> with open('sia-service-account.json') as json_file:\n...     config = json.load(json_file)\n...\n>>> obj_to_write = {'bigquery': config}\n>>> with open('.streamlit/secrets.toml', 'a') as toml_file:\n...     toml.dump(obj_to_write, toml_file)\n...\n'[bigquery]\\ntype = \"service_account\"\\nproject_id = \"dauntless-...'\n<Rest excluded for brevity>\n```", "```py\n[bigquery]\ntype = \"service_account\"\nproject_id = \"dauntless-brace-436702-q0\"\nprivate_key_id = ...\n...\n```", "```py\npip install google-cloud-bigquery\npip install google-cloud-bigquery-storage\npip install db-dtypes\n```", "```py\nimport streamlit as st\nfrom google.cloud import bigquery, bigquery_storage\n\nDATASET = \"sia_ceo_dashboard\"\nTABLE = \"sales_data\"\n\ndef load_data():\n  service_account_info = st.secrets[\"bigquery\"]\n  client = bigquery.Client.from_service_account_info(service_account_info)\n  creds = client._credentials\n  storage_client = bigquery_storage.BigQueryReadClient(credentials=creds)\n  project_id = service_account_info[\"project_id\"]\n  query = f\"SELECT * from `{project_id}.{DATASET}.{TABLE}`\"\n  query_job = client.query(query)\n  result = query_job.result()\n  return result.to_dataframe(bqstorage_client=storage_client)\n```", "```py\nclient = bigquery.Client.from_service_account_info(service_account_info)\n```", "```py\ncreds = client._credentials\nstorage_client = bigquery_storage.BigQueryReadClient(credentials=creds)\n```", "```py\ndauntless-brace-436702-q0.sia_ceo_dashboard.sales_data\n```", "```py\nquery = f\"SELECT * from `{project_id}.{DATASET}.{TABLE}`\"\n```", "```py\nquery_job = client.query(query)\nresult = query_job.result()\n```", "```py\nhumanize>=4.10.0\nstreamlit>=1.38.0\nplotly>=5.23.0\ngoogle-cloud-bigquery==3.25.0\ngoogle-cloud-bigquery-storage==2.26.0\ndb-dtypes==1.3.0\n```"]