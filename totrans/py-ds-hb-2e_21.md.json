["```py\nIn [1]: import pandas as pd\n        import numpy as np\n```", "```py\nIn [2]: def make_df(cols, ind):\n            \"\"\"Quickly make a DataFrame\"\"\"\n            data = {c: [str(c) + str(i) for i in ind]\n                    for c in cols}\n            return pd.DataFrame(data, ind)\n\n        # example DataFrame\n        make_df('ABC', range(3))\nOut[2]:     A   B   C\n        0  A0  B0  C0\n        1  A1  B1  C1\n        2  A2  B2  C2\n```", "```py\nIn [3]: class display(object):\n            \"\"\"Display HTML representation of multiple objects\"\"\"\n            template = \"\"\"<div style=\"float: left; padding: 10px;\">\n <p style='font-family:\"Courier New\", Courier, monospace'>{0}{1}\n \"\"\"\n            def __init__(self, *args):\n                self.args = args\n\n            def _repr_html_(self):\n                return '\\n'.join(self.template.format(a, eval(a)._repr_html_())\n                                 for a in self.args)\n\n            def __repr__(self):\n                return '\\n\\n'.join(a + '\\n' + repr(eval(a))\n                                   for a in self.args)\n```", "```py\nIn [4]: x = [1, 2, 3]\n        y = [4, 5, 6]\n        z = [7, 8, 9]\n        np.concatenate([x, y, z])\nOut[4]: array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nIn [5]: x = [[1, 2],\n             [3, 4]]\n        np.concatenate([x, x], axis=1)\nOut[5]: array([[1, 2, 1, 2],\n               [3, 4, 3, 4]])\n```", "```py\n# Signature in Pandas v1.3.5\npd.concat(objs, axis=0, join='outer', ignore_index=False, keys=None,\n          levels=None, names=None, verify_integrity=False,\n          sort=False, copy=True)\n```", "```py\nIn [6]: ser1 = pd.Series(['A', 'B', 'C'], index=[1, 2, 3])\n        ser2 = pd.Series(['D', 'E', 'F'], index=[4, 5, 6])\n        pd.concat([ser1, ser2])\nOut[6]: 1    A\n        2    B\n        3    C\n        4    D\n        5    E\n        6    F\n        dtype: object\n```", "```py\nIn [7]: df1 = make_df('AB', [1, 2])\n        df2 = make_df('AB', [3, 4])\n        display('df1', 'df2', 'pd.concat([df1, df2])')\nOut[7]: df1           df2           pd.concat([df1, df2])\n            A   B         A   B         A   B\n        1  A1  B1     3  A3  B3     1  A1  B1\n        2  A2  B2     4  A4  B4     2  A2  B2\n                                    3  A3  B3\n                                    4  A4  B4\n```", "```py\nIn [8]: df3 = make_df('AB', [0, 1])\n        df4 = make_df('CD', [0, 1])\n        display('df3', 'df4', \"pd.concat([df3, df4], axis='columns')\")\nOut[8]: df3           df4           pd.concat([df3, df4], axis='columns')\n            A   B         C   D         A   B   C   D\n        0  A0  B0     0  C0  D0     0  A0  B0  C0  D0\n        1  A1  B1     1  C1  D1     1  A1  B1  C1  D1\n```", "```py\nIn [9]: x = make_df('AB', [0, 1])\n        y = make_df('AB', [2, 3])\n        y.index = x.index  # make indices match\n        display('x', 'y', 'pd.concat([x, y])')\nOut[9]: x             y             pd.concat([x, y])\n            A   B         A   B         A   B\n        0  A0  B0     0  A2  B2     0  A0  B0\n        1  A1  B1     1  A3  B3     1  A1  B1\n                                    0  A2  B2\n                                    1  A3  B3\n```", "```py\nIn [10]: try:\n             pd.concat([x, y], verify_integrity=True)\n         except ValueError as e:\n             print(\"ValueError:\", e)\nValueError: Indexes have overlapping values: Int64Index([0, 1], dtype='int64')\n```", "```py\nIn [11]: display('x', 'y', 'pd.concat([x, y], ignore_index=True)')\nOut[11]: x              y             pd.concat([x, y], ignore_index=True)\n             A   B          A   B         A   B\n         0  A0  B0      0  A2  B2     0  A0  B0\n         1  A1  B1      1  A3  B3     1  A1  B1\n                                      2  A2  B2\n                                      3  A3  B3\n```", "```py\nIn [12]: display('x', 'y', \"pd.concat([x, y], keys=['x', 'y'])\")\nOut[12]: x              y             pd.concat([x, y], keys=['x', 'y'])\n             A   B          A   B           A   B\n         0  A0  B0      0  A2  B2     x 0  A0  B0\n         1  A1  B1      1  A3  B3       1  A1  B1\n                                      y 0  A2  B2\n                                        1  A3  B3\n```", "```py\nIn [13]: df5 = make_df('ABC', [1, 2])\n         df6 = make_df('BCD', [3, 4])\n         display('df5', 'df6', 'pd.concat([df5, df6])')\nOut[13]: df5                df6                pd.concat([df5, df6])\n             A   B   C          B   C   D         A   B   C    D\n         1  A1  B1  C1      3  B3  C3  D3      1   A1  B1  C1  NaN\n         2  A2  B2  C2      4  B4  C4  D4      2   A2  B2  C2  NaN\n                                               3  NaN  B3  C3   D3\n                                               4  NaN  B4  C4   D4\n```", "```py\nIn [14]: display('df5', 'df6',\n                 \"pd.concat([df5, df6], join='inner')\")\nOut[14]: df5                df6\n             A   B   C          B   C   D\n         1  A1  B1  C1      3  B3  C3  D3\n         2  A2  B2  C2      4  B4  C4  D4\n\n         pd.concat([df5, df6], join='inner')\n             B   C\n         1  B1  C1\n         2  B2  C2\n         3  B3  C3\n         4  B4  C4\n```", "```py\nIn [15]: pd.concat([df5, df6.reindex(df5.columns, axis=1)])\nOut[15]:      A   B   C\n         1   A1  B1  C1\n         2   A2  B2  C2\n         3  NaN  B3  C3\n         4  NaN  B4  C4\n```", "```py\nIn [16]: display('df1', 'df2', 'df1.append(df2)')\nOut[16]: df1            df2           df1.append(df2)\n             A   B          A   B         A   B\n         1  A1  B1      3  A3  B3     1  A1  B1\n         2  A2  B2      4  A4  B4     2  A2  B2\n                                      3  A3  B3\n                                      4  A4  B4\n```"]