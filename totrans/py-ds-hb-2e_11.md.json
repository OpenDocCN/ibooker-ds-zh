["```py\nIn [1]: import numpy as np\n        from vega_datasets import data\n\n        # Use DataFrame operations to extract rainfall as a NumPy array\n        rainfall_mm = np.array(\n            data.seattle_weather().set_index('date')['precipitation']['2015'])\n        len(rainfall_mm)\nOut[1]: 365\n```", "```py\nIn [2]: %matplotlib inline\n        import matplotlib.pyplot as plt\n        plt.style.use('seaborn-whitegrid')\n```", "```py\nIn [3]: plt.hist(rainfall_mm, 40);\n```", "```py\nIn [4]: x = np.array([1, 2, 3, 4, 5])\n```", "```py\nIn [5]: x < 3  # less than\nOut[5]: array([ True,  True, False, False, False])\n```", "```py\nIn [6]: x > 3  # greater than\nOut[6]: array([False, False, False,  True,  True])\n```", "```py\nIn [7]: x <= 3  # less than or equal\nOut[7]: array([ True,  True,  True, False, False])\n```", "```py\nIn [8]: x >= 3  # greater than or equal\nOut[8]: array([False, False,  True,  True,  True])\n```", "```py\nIn [9]: x != 3  # not equal\nOut[9]: array([ True,  True, False,  True,  True])\n```", "```py\nIn [10]: x == 3  # equal\nOut[10]: array([False, False,  True, False, False])\n```", "```py\nIn [11]: (2 * x) == (x ** 2)\nOut[11]: array([False,  True, False, False, False])\n```", "```py\nIn [12]: rng = np.random.default_rng(seed=1701)\n         x = rng.integers(10, size=(3, 4))\n         x\nOut[12]: array([[9, 4, 0, 3],\n                [8, 6, 3, 1],\n                [3, 7, 4, 0]])\n```", "```py\nIn [13]: x < 6\nOut[13]: array([[False,  True,  True,  True],\n                [False, False,  True,  True],\n                [ True, False,  True,  True]])\n```", "```py\nIn [14]: print(x)\nOut[14]: [[9 4 0 3]\n          [8 6 3 1]\n          [3 7 4 0]]\n```", "```py\nIn [15]: # how many values less than 6?\n         np.count_nonzero(x < 6)\nOut[15]: 8\n```", "```py\nIn [16]: np.sum(x < 6)\nOut[16]: 8\n```", "```py\nIn [17]: # how many values less than 6 in each row?\n         np.sum(x < 6, axis=1)\nOut[17]: array([3, 2, 3])\n```", "```py\nIn [18]: # are there any values greater than 8?\n         np.any(x > 8)\nOut[18]: True\n```", "```py\nIn [19]: # are there any values less than zero?\n         np.any(x < 0)\nOut[19]: False\n```", "```py\nIn [20]: # are all values less than 10?\n         np.all(x < 10)\nOut[20]: True\n```", "```py\nIn [21]: # are all values equal to 6?\n         np.all(x == 6)\nOut[21]: False\n```", "```py\nIn [22]: # are all values in each row less than 8?\n         np.all(x < 8, axis=1)\nOut[22]: array([False, False,  True])\n```", "```py\nIn [23]: np.sum((rainfall_mm > 10) & (rainfall_mm < 20))\nOut[23]: 16\n```", "```py\nrainfall_mm > (10 & rainfall_mm) < 20\n```", "```py\nIn [24]: np.sum(~( (rainfall_mm <= 10) | (rainfall_mm >= 20) ))\nOut[24]: 16\n```", "```py\nIn [25]: print(\"Number days without rain:  \", np.sum(rainfall_mm == 0))\n         print(\"Number days with rain:     \", np.sum(rainfall_mm != 0))\n         print(\"Days with more than 10 mm: \", np.sum(rainfall_mm > 10))\n         print(\"Rainy days with < 5 mm:    \", np.sum((rainfall_mm > 0) &\n                                                     (rainfall_mm < 5)))\nOut[25]: Number days without rain:   221\n         Number days with rain:      144\n         Days with more than 10 mm:  34\n         Rainy days with < 5 mm:     83\n```", "```py\nIn [26]: x\nOut[26]: array([[9, 4, 0, 3],\n                [8, 6, 3, 1],\n                [3, 7, 4, 0]])\n```", "```py\nIn [27]: x < 5\nOut[27]: array([[False,  True,  True,  True],\n                [False, False,  True,  True],\n                [ True, False,  True,  True]])\n```", "```py\nIn [28]: x[x < 5]\nOut[28]: array([4, 0, 3, 3, 1, 3, 4, 0])\n```", "```py\nIn [29]: # construct a mask of all rainy days\n         rainy = (rainfall_mm > 0)\n\n         # construct a mask of all summer days (June 21st is the 172nd day)\n         days = np.arange(365)\n         summer = (days > 172) & (days < 262)\n\n         print(\"Median precip on rainy days in 2015 (mm):   \",\n               np.median(rainfall_mm[rainy]))\n         print(\"Median precip on summer days in 2015 (mm):  \",\n               np.median(rainfall_mm[summer]))\n         print(\"Maximum precip on summer days in 2015 (mm): \",\n               np.max(rainfall_mm[summer]))\n         print(\"Median precip on non-summer rainy days (mm):\",\n               np.median(rainfall_mm[rainy & ~summer]))\nOut[29]: Median precip on rainy days in 2015 (mm):    3.8\n         Median precip on summer days in 2015 (mm):   0.0\n         Maximum precip on summer days in 2015 (mm):  32.5\n         Median precip on non-summer rainy days (mm): 4.1\n```", "```py\nIn [30]: bool(42), bool(0)\nOut[30]: (True, False)\n```", "```py\nIn [31]: bool(42 and 0)\nOut[31]: False\n```", "```py\nIn [32]: bool(42 or 0)\nOut[32]: True\n```", "```py\nIn [33]: bin(42)\nOut[33]: '0b101010'\n```", "```py\nIn [34]: bin(59)\nOut[34]: '0b111011'\n```", "```py\nIn [35]: bin(42 & 59)\nOut[35]: '0b101010'\n```", "```py\nIn [36]: bin(42 | 59)\nOut[36]: '0b111011'\n```", "```py\nIn [37]: A = np.array([1, 0, 1, 0, 1, 0], dtype=bool)\n         B = np.array([1, 1, 1, 0, 1, 1], dtype=bool)\n         A | B\nOut[37]: array([ True,  True,  True, False,  True,  True])\n```", "```py\nIn [38]: A or B\nValueError: The truth value of an array with more than one element is\n          > ambiguous.\n          a.any() or a.all()\n```", "```py\nIn [39]: x = np.arange(10)\n         (x > 4) & (x < 8)\nOut[39]: array([False, False, False, False, False,  True,  True,  True, False,\n                False])\n```", "```py\nIn [40]: (x > 4) and (x < 8)\nValueError: The truth value of an array with more than one element is\n          > ambiguous.\n          a.any() or a.all()\n```"]