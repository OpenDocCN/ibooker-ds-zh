["```py\n> state <- read.csv('state.csv')\n> mean(state[['Population']])\n[1] 6162876\n> mean(state[['Population']], trim=0.1)\n[1] 4783697\n> median(state[['Population']])\n[1] 4436370\n```", "```py\nstate = pd.read_csv('state.csv')\nstate['Population'].mean()\ntrim_mean(state['Population'], 0.1)\nstate['Population'].median()\n```", "```py\n> weighted.mean(state[['Murder.Rate']], w=state[['Population']])\n[1] 4.445834\n> library('matrixStats')\n> weightedMedian(state[['Murder.Rate']], w=state[['Population']])\n[1] 4.4\n```", "```py\nnp.average(state['Murder.Rate'], weights=state['Population'])\nwquantiles.median(state['Murder.Rate'], weights=state['Population'])\n```", "```py\n> sd(state[['Population']])\n[1] 6848235\n> IQR(state[['Population']])\n[1] 4847308\n> mad(state[['Population']])\n[1] 3849870\n```", "```py\nstate['Population'].std()\nstate['Population'].quantile(0.75) - state['Population'].quantile(0.25)\nrobust.scale.mad(state['Population'])\n```", "```py\nquantile(state[['Murder.Rate']], p=c(.05, .25, .5, .75, .95))\n   5%   25%   50%   75%   95%\n1.600 2.425 4.000 5.550 6.510\n```", "```py\nstate['Murder.Rate'].quantile([0.05, 0.25, 0.5, 0.75, 0.95])\n```", "```py\nboxplot(state[['Population']]/1000000, ylab='Population (millions)')\n```", "```py\nax = (state['Population']/1_000_000).plot.box()\nax.set_ylabel('Population (millions)')\n```", "```py\nbreaks <- seq(from=min(state[['Population']]),\n                to=max(state[['Population']]), length=11)\npop_freq <- cut(state[['Population']], breaks=breaks,\n                right=TRUE, include.lowest=TRUE)\ntable(pop_freq)\n```", "```py\nbinnedPopulation = pd.cut(state['Population'], 10)\nbinnedPopulation.value_counts()\n```", "```py\nhist(state[['Population']], breaks=breaks)\n```", "```py\nax = (state['Population'] / 1_000_000).plot.hist(figsize=(4, 4))\nax.set_xlabel('Population (millions)')\n```", "```py\nhist(state[['Murder.Rate']], freq=FALSE)\nlines(density(state[['Murder.Rate']]), lwd=3, col='blue')\n```", "```py\nax = state['Murder.Rate'].plot.hist(density=True, xlim=[0,12], bins=range(1,12))\nstate['Murder.Rate'].plot.density(ax=ax) ![1](Images/1.png)\nax.set_xlabel('Murder Rate (per 100,000)')\n```", "```py\nbarplot(as.matrix(dfw) / 6, cex.axis=0.8, cex.names=0.7,\n        xlab='Cause of delay', ylab='Count')\n```", "```py\nax = dfw.transpose().plot.bar(figsize=(4, 4), legend=False)\nax.set_xlabel('Cause of delay')\nax.set_ylabel('Count')\n```", "```py\netfs <- sp500_px[row.names(sp500_px) > '2012-07-01',\n                 sp500_sym[sp500_sym$sector == 'etf', 'symbol']]\nlibrary(corrplot)\ncorrplot(cor(etfs), method='ellipse')\n```", "```py\netfs = sp500_px.loc[sp500_px.index > '2012-07-01',\n                    sp500_sym[sp500_sym['sector'] == 'etf']['symbol']]\nsns.heatmap(etfs.corr(), vmin=-1, vmax=1,\n            cmap=sns.diverging_palette(20, 220, as_cmap=True))\n```", "```py\nplot(telecom$T, telecom$VZ, xlab='ATT (T)', ylab='Verizon (VZ)')\n```", "```py\nax = telecom.plot.scatter(x='T', y='VZ', figsize=(4, 4), marker='$\\u25EF$')\nax.set_xlabel('ATT (T)')\nax.set_ylabel('Verizon (VZ)')\nax.axhline(0, color='grey', lw=1)\nax.axvline(0, color='grey', lw=1)\n```", "```py\nkc_tax0 <- subset(kc_tax, TaxAssessedValue < 750000 &\n                  SqFtTotLiving > 100 &\n                  SqFtTotLiving < 3500)\nnrow(kc_tax0)\n432693\n```", "```py\nkc_tax0 = kc_tax.loc[(kc_tax.TaxAssessedValue < 750000) &\n                     (kc_tax.SqFtTotLiving > 100) &\n                     (kc_tax.SqFtTotLiving < 3500), :]\nkc_tax0.shape\n(432693, 3)\n```", "```py\nggplot(kc_tax0, (aes(x=SqFtTotLiving, y=TaxAssessedValue))) +\n  stat_binhex(color='white') +\n  theme_bw() +\n  scale_fill_gradient(low='white', high='black') +\n  labs(x='Finished Square Feet', y='Tax-Assessed Value')\n```", "```py\nax = kc_tax0.plot.hexbin(x='SqFtTotLiving', y='TaxAssessedValue',\n                         gridsize=30, sharex=False, figsize=(5, 4))\nax.set_xlabel('Finished Square Feet')\nax.set_ylabel('Tax-Assessed Value')\n```", "```py\nggplot(kc_tax0, aes(SqFtTotLiving, TaxAssessedValue)) +\n  theme_bw() +\n  geom_point(alpha=0.1) +\n  geom_density2d(color='white') +\n  labs(x='Finished Square Feet', y='Tax-Assessed Value')\n```", "```py\nax = sns.kdeplot(kc_tax0.SqFtTotLiving, kc_tax0.TaxAssessedValue, ax=ax)\nax.set_xlabel('Finished Square Feet')\nax.set_ylabel('Tax-Assessed Value')\n```", "```py\nlibrary(descr)\nx_tab <- CrossTable(lc_loans$grade, lc_loans$status,\n                    prop.c=FALSE, prop.chisq=FALSE, prop.t=FALSE)\n```", "```py\ncrosstab = lc_loans.pivot_table(index='grade', columns='status',\n                                aggfunc=lambda x: len(x), margins=True) ![1](Images/1.png)\n\ndf = crosstab.loc['A':'G',:].copy() ![2](Images/2.png)\ndf.loc[:,'Charged Off':'Late'] = df.loc[:,'Charged Off':'Late'].div(df['All'],\n                                                                    axis=0) ![3](Images/3.png)\ndf['All'] = df['All'] / sum(df['All']) ![4](Images/4.png)\nperc_crosstab = df\n```", "```py\nboxplot(pct_carrier_delay ~ airline, data=airline_stats, ylim=c(0, 50))\n```", "```py\nax = airline_stats.boxplot(by='airline', column='pct_carrier_delay')\nax.set_xlabel('')\nax.set_ylabel('Daily % of Delayed Flights')\nplt.suptitle('')\n```", "```py\nggplot(data=airline_stats, aes(airline, pct_carrier_delay)) +\n  ylim(0, 50) +\n  geom_violin() +\n  labs(x='', y='Daily % of Delayed Flights')\n```", "```py\nax = sns.violinplot(airline_stats.airline, airline_stats.pct_carrier_delay,\n                    inner='quartile', color='white')\nax.set_xlabel('')\nax.set_ylabel('Daily % of Delayed Flights')\n```", "```py\nggplot(subset(kc_tax0, ZipCode %in% c(98188, 98105, 98108, 98126)),\n         aes(x=SqFtTotLiving, y=TaxAssessedValue)) +\n  stat_binhex(color='white') +\n  theme_bw() +\n  scale_fill_gradient(low='white', high='blue') +\n  labs(x='Finished Square Feet', y='Tax-Assessed Value') +\n  facet_wrap('ZipCode') ![1](Images/1.png)\n```", "```py\nzip_codes = [98188, 98105, 98108, 98126]\nkc_tax_zip = kc_tax0.loc[kc_tax0.ZipCode.isin(zip_codes),:]\nkc_tax_zip\n\ndef hexbin(x, y, color, **kwargs):\n    cmap = sns.light_palette(color, as_cmap=True)\n    plt.hexbin(x, y, gridsize=25, cmap=cmap, **kwargs)\n\ng = sns.FacetGrid(kc_tax_zip, col='ZipCode', col_wrap=2) ![1](Images/1.png)\ng.map(hexbin, 'SqFtTotLiving', 'TaxAssessedValue',\n      extent=[0, 3500, 0, 700000]) ![2](Images/2.png)\ng.set_axis_labels('Finished Square Feet', 'Tax-Assessed Value')\ng.set_titles('Zip code {col_name:.0f}')\n```"]