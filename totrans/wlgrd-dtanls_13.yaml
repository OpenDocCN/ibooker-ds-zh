- en: appendix Python installation instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The projects in the book are technology agnostic, and the example solutions
    are mostly about the process, not the specifics of Python, which is my technology
    of choice. However, if you are a Python user like me, you might want to recreate
    my results on your machine and take my example solution as a starting point. This
    appendix explains how to install Python and set it up in a way that mimics the
    setup I used for the example solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, the Python libraries required for a project are listed in the accompanying
    Jupyter notebooks and can be inferred from the `import` statements. That is, if
    the code in a solution imports `pandas`, you will need to have installed the `pandas`
    library. However, to recreate my examples exactly, you need to have the same version
    of each library as functionality changes across versions. There are many ways
    to ensure your Python environment is set up the same as mine, but generally, this
    is done using virtual environments.
  prefs: []
  type: TYPE_NORMAL
- en: Note  It is not necessary to have exactly the same setup to recreate the solutions
    in the book. You can likely use a newer Python version and newer versions of libraries
    such as `pandas` and get the same results. However, the virtual environments are
    explicitly pinned to older versions of both Python and the necessary libraries
    to ensure compatibility with each other. An example is the `recordlinkage` library
    used in chapter 3, which at time of writing is incompatible with `pandas` version
    2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments let you have multiple combinations of Python libraries,
    even different versions of Python, on the same machine, usually one per project.
    I recommend creating a virtual environment in which you can run the accompanying
    code examples and ensure your libraries have the same versions as mine. Again,
    there are many ways to set up virtual environments. You may already have your
    favorite way to do this, or you may have never encountered virtual environments
    before. In this book, I use the `poetry` library, and the following sections include
    instructions to recreate my environment.
  prefs: []
  type: TYPE_NORMAL
- en: A.1 Installing Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Specifically, the projects in the book use Python 3.11, but that is only a requirement
    if you want to recreate the example solutions exactly. If you have a different
    version of Python already installed, but want to recreate my environment, you
    can install Python 3.11 anyway as it will be separate from other Python installations.
  prefs: []
  type: TYPE_NORMAL
- en: You can either install Python directly from Python.org ([https://www.python.org/downloads/](https://www.python.org/downloads/))
    or through a bundled version, such as Anaconda ([https://www.anaconda.com/download](https://www.anaconda.com/download)).
    You can also install Python through a minimal version of Anaconda, such as Miniconda
    ([https://docs.conda.io/en/latest/miniconda.xhtml](https://docs.conda.io/en/latest/miniconda.xhtml))
    or Miniforge ([https://github.com/conda-forge/miniforge](https://github.com/conda-forge/miniforge)).
  prefs: []
  type: TYPE_NORMAL
- en: I personally use Miniforge, but as long as the end result is that you have Python
    3.11 installed on your machine, it doesn’t matter where you got it from.
  prefs: []
  type: TYPE_NORMAL
- en: A.2 Installing poetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`poetry` is the package and dependency management system I chose to manage
    my virtual environments. You can install it with your Python installation using
    whichever in-built package manager you have (usually `pip` or `conda`). An example
    command, which should be run in a terminal or command prompt, is `pip` `install`
    `poetry`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note  If you use a different method for managing virtual environments, such
    as `virtualenv`, I have also included a `requirements.txt` file, which contains
    the same information as the `poetry` files, but it is the format required for
    these other tools. This will still require that you use Python 3.11\.
  prefs: []
  type: TYPE_NORMAL
- en: More information about `poetry` is available at [https://python-poetry.org/](https://python-poetry.org/).
  prefs: []
  type: TYPE_NORMAL
- en: A.3 Creating your virtual environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the materials for the book, I have supplied two files, `poetry.lock` and
    `pyproject .toml`, both of which you need to recreate my virtual environment with
    the same versions of all necessary libraries. At the time of writing, you simply
    need to have those two files in the root folder where you have downloaded the
    code for the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to your code folder where these files reside and run the following
    command to ensure `poetry` uses Python 3.11, regardless of what other versions
    exist on your machine. An example of a command prompt is shown in figure A.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![figure](../Images/A-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.1 Command to tell `poetry` where Python 3.11 is installed
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Next, run the command `poetry` `install` to create your virtual environment.
    The correct versions of the necessary libraries will be installed. Figure A.2
    shows what the output might look like.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/A-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.2 Installing the `poetry` environment and associated libraries
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: At this point, you have a virtual environment that is set up the same as mine.
    You can activate it by running the command `poetry` `shell`.
  prefs: []
  type: TYPE_NORMAL
- en: This will activate the environment, and any subsequent Python commands will
    run in this environment instead of the base one. From here, you can launch Jupyter
    using the command `jupyter` `notebook`. This will launch Jupyter, and you can
    interact with the code using the correct versions of Python and its libraries.
    Figure A.3 shows the final `poetry` commands before launching Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure](../Images/A-3.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.3 Launching Jupyter from the `poetry` environment
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
