["```py\nimport pandas as pd\n\nprices_2021 = pd.read_csv(\"./data/pp-2021.csv.gz\", nrows=1000)\nprices_2021.head()\n```", "```py\nannual_dfs = []\n\nfor year in [2021, 2022, 2023]:\n    print(f\"Parsing {year}\")\n    df = pd.read_csv(\n        f\"./data/pp-{year}.csv.gz\",\n        names=[\"transaction_id\", \"sale_price\", \"sale_date\", \"postcode\",\n               \"property_type\", \"old_new\", \"duration\", \"house_number_name\",\n               \"second_addressable_object_name\", \"street\", \"locality\",\n               \"town_city\", \"district\", \"county\",\n               \"category_type\", \"record_status\"],\n        parse_dates=[\"sale_date\"])\n    annual_dfs.append(df)\n\nprice_paid = pd.concat(annual_dfs, axis=0, ignore_index=True)\nprint(price_paid.shape)\nprice_paid.head()\n```", "```py\nprice_paid[\"sale_date\"].agg([\"min\", \"max\"])\n```", "```py\nprice_paid.to_csv(\"./data/price_paid.csv.gz\", index=False)\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.options.display.float_format = '{:.2f}'.format\n\nprice_paid = pd.read_csv(\"./data/price_paid.csv.gz\",\n                         parse_dates=[\"sale_date\"])\nprint(price_paid.shape)\nprice_paid.head()\n```", "```py\nprice_paid.isnull().sum()\n```", "```py\nprice_paid.loc[price_paid[\"street\"].isnull(),\n               [\"house_number_name\", \"second_addressable_object_name\",\n                \"street\", \"postcode\", \"locality\", \"town_city\",\n                \"district\", \"county\"]]\n```", "```py\nSTREET_PLACEHOLDER = \"-- NO STREET INFORMATION --\"\nprice_paid[\"street\"] = price_paid[\"street\"].fillna(STREET_PLACEHOLDER)\n```", "```py\nprice_paid.loc[price_paid[\"postcode\"].isnull(),\n               [\"house_number_name\", \"second_addressable_object_name\",\n                \"street\", \"postcode\", \"locality\", \"town_city\",\n                \"district\", \"county\"]]\n```", "```py\nprice_paid[\"sale_price\"].describe()\n```", "```py\n(\n    price_paid.loc[price_paid[\"sale_price\"] < 1000,\n    [\"sale_price\", \"house_number_name\",\n     \"street\", \"town_city\", \"postcode\",\n     \"district\", \"county\", \"category_type\"]\n    ]\n    .sample(10, random_state=42)\n)\n```", "```py\n(\n    price_paid.loc[price_paid[\"sale_price\"] < 10_000,\n                   \"category_type\"]\n    .value_counts()\n)\n```", "```py\nprice_paid[price_paid[\"sale_price\"] > 300_000_000]\n```", "```py\nprice_paid = price_paid[price_paid[\"sale_price\"] < 10_000_000]\n```", "```py\nproperty_type_map = {\n    \"D\": \"Detached\",\n    \"S\": \"Semi-Detached\",\n    \"T\": \"Terraced\",\n    \"F\": \"Flats\",\n    \"O\": \"Other\"\n}\n\nprice_paid[\"property_type\"] = (\n    price_paid[\"property_type\"]\n    .map(property_type_map)\n)\n\nfig, axis = plt.subplots()\n\n(\n    price_paid[\"property_type\"]\n    .value_counts()\n    .sort_values()\n    .plot\n    .barh(ax=axis)\n)\n\naxis.set(\n    title=\"Distribution of property type\",\n    xlabel=\"Count\",\n    ylabel=\"Property type\"\n)\n\nplt.show()\n```", "```py\nprice_paid[\"old_new\"] = (\n    price_paid[\"old_new\"]\n    .map(\n        {\n            \"Y\": \"New build\",\n            \"N\": \"Existing property\"\n        }\n    )\n)\nprice_paid[\"old_new\"].value_counts()\n```", "```py\nprice_paid[\"duration\"] = (\n    price_paid[\"duration\"]\n    .map(\n        {\n            \"F\": \"Freehold\",\n            \"L\": \"Leasehold\"\n        }\n    )\n)\n\nprice_paid[\"duration\"].value_counts()\n```", "```py\nprice_paid[\"town_city\"] = price_paid[\"town_city\"].str.upper()\nprice_paid[\"town_city\"].nunique()\n```", "```py\nprice_paid[\"county\"] = price_paid[\"county\"].str.upper()\nprice_paid[\"county\"].value_counts()\n```", "```py\n(\n    price_paid\n    .loc[price_paid[\"county\"].str.contains(\"NORTH\"), \"county\"]\n    .unique()\n)\n```", "```py\nwelsh_councils = [\n    c.upper() for c in [\"Blaenau Gwent\", \"Bridgend\", \"Caerphilly\",\n                        \"Cardiff\", \"Carmarthenshire\", \"Ceredigion\",\n                        \"Conwy\", \"Denbighshire\", \"Flintshire\",\n                        \"Gwynedd\", \"Isle of Anglesey\", \"Merthyr Tydfil\",\n                        \"Monmouthshire\", \"Neath Port Talbot\", \"Newport\",\n                        \"Pembrokeshire\", \"Powys\", \"Rhondda Cynon Taf\", \"Swansea\", \"The Vale of Glamorgan\", \"Torfaen\",\n                        \"Wrexham\"]\n]\n\nprice_paid[\"country\"] = (\n    np.where(\n        price_paid[\"county\"].isin(welsh_councils),\n        \"WALES\",\n        \"ENGLAND\"\n    )\n)\n\nprice_paid[\"country\"].value_counts(dropna=False)\n```", "```py\nprint(\n    sorted(\n        price_paid\n        .loc[price_paid[\"country\"] == \"ENGLAND\", \"county\"]\n        .unique()\n    )\n)\n```", "```py\nprice_paid.loc[price_paid[\"county\"] == \"RHONDDA CYNON TAFF\", \"country\"]\n↪ = \"WALES\"\n```", "```py\nwales = price_paid[price_paid[\"country\"] == \"WALES\"].copy()\n```", "```py\nfig, axis = plt.subplots(figsize=(6, 12))\n\n(\n    wales\n    .groupby(\"county\")\n    [\"sale_price\"]\n    .median()\n    .sort_values()\n    .plot\n    .barh(ax=axis)\n)\n\naxis.set(\n    title=\"Median sale price by county (Wales)\",\n    xlabel=\"Median sale price (£)\",\n    ylabel=\"County\"\n)\n\nfor label in axis.get_yticklabels():\n    label.set_fontsize(8)\n\nplt.show()\n```", "```py\nwales[\"year\"] = wales[\"sale_date\"].dt.year\n\nfig, axis = plt.subplots()\n\n(\n    wales\n    .set_index(\"sale_date\")\n    .resample(\"YS\")\n    .size()\n    .plot(ax=axis, color=\"gray\")\n)\n\naxis.set(\n    title=\"Transactions per year\",\n    xlabel=\"Year\",\n    ylabel=\"# of transactions\",\n    ylim=(0, 70_000)\n)\n\nplt.show()\n```", "```py\nby_county_and_year = (\n    wales\n    .pivot_table(\n        values=\"sale_price\",\n        index=\"county\",\n        columns=\"year\",\n        aggfunc=\"median\"\n    )\n)\n\nfig, axis = plt.subplots(figsize=(10, 10))\n\nsns.heatmap(\n    by_county_and_year / 1000,\n    annot=True,\n    cmap=\"Greys\",\n    fmt=\".1f\",\n    ax=axis\n)\n\naxis.set(\n    title=\"Median price by county and year (£ thousands)\",\n    xlabel=\"Year\",\n    ylabel=\"County\"\n)\n\nplt.show()\n```", "```py\nfig, axis = plt.subplots(figsize=(10, 10))\n\nsns.heatmap(\n    wales.pivot_table(\n        index=\"county\",\n        columns=\"property_type\",\n        values=\"sale_price\",\n        aggfunc=\"median\"\n    ) / 1000,\n    annot=True,\n    cmap=\"Greys\",\n    fmt=\".1f\",\n    ax=axis,\n    annot_kws={\"size\": 8}      #1\n)\naxis.set(\n    title=\"Median sale price (£ thousands) by county and property type\",\n    xlabel=\"Property type\",\n    ylabel=\"County\"\n)\n\nplt.show()\n```", "```py\nyears = sorted(wales[\"year\"].unique())\nannual_sales = []\n\nfor year in years:      #1\n    prices = (\n        wales.loc[(wales[\"year\"] == year)\n                  & (wales[\"sale_price\"] < 500_000),\n        \"sale_price\"]\n    )\n    annual_sales.append([prices])     #2\n\nfrom ridgeplot import ridgeplot      #3\n\nfig = ridgeplot(annual_sales,\n                labels=[str(y) for y in years],\n                colorscale=\"gray_r\")\n\nfig.update_layout(\n    title=\"Welsh property sale prices over time\",\n    xaxis_title=\"Price (£)\",\n    yaxis_title=\"Year\",\n    showlegend=False\n)\n\nfig.show()\n```", "```py\ncounties = sorted(wales[\"county\"].unique())\nsales_by_county = []\n\nfor county in counties:\n    prices = (\n        wales\n        .loc[(wales[\"county\"] == county)\n             & (wales[\"sale_price\"] < 500_000)\n             & (wales[\"year\"] == 2023),\n        \"sale_price\"]\n    )\n    sales_by_county.append([prices])\n\nfig = ridgeplot(sales_by_county,\n                labels=counties,\n                colorscale=\"gray\",\n                coloralpha=0.9,\n                colormode=\"mean-minmax\",\n                spacing=0.7)\n\nfig.update_layout(\n    title=\"Sale prices in Wales in 2023, by county\",\n    height=650,\n    width=950,\n    font_size=12,\n    plot_bgcolor=\"rgb(245, 245, 245)\",\n    xaxis_gridcolor=\"white\",\n    yaxis_gridcolor=\"white\",\n    xaxis_gridwidth=2,\n    yaxis_title=\"County\",\n    xaxis_title=\"Sale price (£)\",\n    showlegend=False\n)\n\nfig.show()\n```", "```py\nhierarchy = [\"county\", \"district\", \"town_city\", \"street\"]\nlevel_counts = []\n\nfor col in hierarchy:\n    num_values = wales[col].nunique()\n    level_counts.append(num_values)\n\nfor z in zip(hierarchy, level_counts):\n    print(z)\n```", "```py\nwales.groupby(\"county\")[\"district\"].nunique().loc[lambda x: x > 1]\nwales.groupby(\"district\")[\"county\"].nunique().loc[lambda x: x > 1]\n```", "```py\nwales.to_parquet(\"./data/wales.parquet\", index=False)\n```"]