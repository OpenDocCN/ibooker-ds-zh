["```py\nimport matplotlib.pyplot as plt\n\n# matplotlib works counterclockwise, so we need to essentially reverse\n# the order of our pie-value \"slices\"\ncandidate_names = ['Adams', 'Wiley', 'Garcia', 'Yang', 'Others']\ncandidate_names.reverse()\nvote_pct = [30.8, 21.3, 19.6, 12.2, 16.1]\nvote_pct.reverse()\n\ncolors = ['#006d2c','#006d2c', '#006d2c', '#31a354','#74c476']\ncolors.reverse()\n\nfig1, ax1 = plt.subplots()\n# by default, the starting axis is the x-axis; making this value 90 ensures\n# that it is a vertical line instead\nax1.pie(vote_pct, labels=candidate_names, autopct='%.1f%%', startangle=90,\n        colors=colors) ![1](assets/1.png)\nax1.axis('equal')  # equal aspect ratio ensures that pie is drawn as a circle.\n\n# show the plot!\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\n# (abbreviated) list of countries\ncountries = ['Japan', 'Iceland', 'Switzerland', 'France', 'Ireland', 'Germany',\n             'Italy', 'Belgium']\n\n# difference in years between official and actual retirement age\nretirement_gap = [9, 2, 2, -1, -2, -2, -7, -8]\n\n# zip the two lists together, and specify the column names as we make the DataFrame\nretirement_data = pd.DataFrame(list(zip(countries, retirement_gap)),\n               columns =['country', 'retirement_gap'])\n\n# in practice, we might prefer to write a function that generates this list,\n# based on our data values\nbar_colors = ['#d01c8b', '#d01c8b', '#d01c8b', '#4dac26','#4dac26','#4dac26',\n              '#4dac26','#4dac26']\n\n# pass our data and palette to the `seaborn` `barplot()` function\nax = sns.barplot(x=\"retirement_gap\", y=\"country\",\n                 data=retirement_data, palette=bar_colors) ![1](assets/1.png)\n\n# show the plot!\nplt.show()\n```", "```py\nax = sns.barplot(x=\"retirement_gap\", y=\"country\", data=retirement_data,\n                 palette=bar_colors)\n```", "```py\nax = sns.barplot(x=\"country\", y=\"retirement_gap\", data=retirement_data,\n                 palette=bar_colors)\n```", "```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\n# each individual array is a row of data\nFDI = np.array([[0.8, 0.7], [0.3, 0.6]])\n\nfdi_data = pd.DataFrame(data=FDI,\n              columns=['Developed', 'Developing'])\n\nax = sns.lineplot(data=fdi_data)\n\n# show the plot!\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# import the school test data\nschool_data = pd.read_csv(\"apib12tx.csv\")\n\n# plot test scores against the percentage of students receiving meal support\nsns.scatterplot(data=school_data, x=\"MEALS\", y=\"API12B\", alpha=0.6, linewidth=0) ![1](assets/1.png)\n\n# highlight a high-performing school\nhighlight_school = school_data[school_data['SNAME'] == \\\n                               \"Chin (John Yehall) Elementary\"]\nplt.scatter(highlight_school['MEALS'], highlight_school['API12B'],\n            color='orange', alpha=1.0) ![2](assets/2.png)\n\n# show the plot!\nplt.show()\n```", "```py\nCA    99478      VA    18682      CT    10197      NH     4197      AK     2076\nTX    60245      NC    18022      AL     9025      ID     3697      PR     2032\nNY    54199      MN    16473      OK     8598      NM     3524      VT     1918\nFL    46787      CO    15662      SC     8522      ME     3490      WY     1791\nIL    33614      MD    15170      UT     7729      HI     3414      GU      305\nPA    30768      WI    14729      KY     7623      DC     3175      VI      184\nOH    26379      IN    13820      IA     7003      RI     3012      MP       55\nNJ    24907      MO    13511      KS     6869      WV     2669      AS       18\nMI    24208      TN    12994      NV     6466      MT     2648\nMA    21734      AZ    12602      NE     4965      ND     2625\nGA    20069      OR    10899      AR     4841      DE     2384\nWA    18869      LA    10828      MS     4540      SD     2247\n```", "```py\n# `pandas` for data loading; `seaborn` and `matplotlib` for visuals\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# `FuncFormatter` to format axis labels\nfrom matplotlib.ticker import FuncFormatter\n\n# `datetime` to interpret and customize dates\nfrom datetime import datetime\n\n# load the data\nvaccine_data = pd.read_csv('owid-covid-data.csv')\n\n# convert the `date` column to a \"real\" date\nvaccine_data['date']= pd.to_datetime(vaccine_data['date'])\n\n# group the data by country and month\ncountry_and_month = vaccine_data.groupby('iso_code').resample('M',\n                                                              on='date').sum()\n\n# use `reset_index()` to \"flatten\" the DataFrame headers\ncountry_and_month_update = country_and_month.reset_index()\n\n# select just the United States' data\njust_USA = country_and_month_update[country_and_month_update['iso_code']=='USA']\n\n# make the foundational barplot with `seaborn`\nax = sns.barplot(x=\"date\", y=\"new_cases\", palette=['#bababa'], data=just_USA)\n\n# loop through the bars rectangles and set the color for the July 2020\n# bar to red\nfor i, bar in enumerate(ax.patches):\n    if i == 6:\n        bar.set_color('#ca0020')\n\n# set the maximum y-axis value to 7M\nax.set_ylim(0,7000000)\n\n# setting the axis labels\nplt.xlabel('Month')\nplt.ylabel('New cases (M)')\n\n# modify the color, placement and orientation of the \"tick labels\"\nax.tick_params(direction='out', length=5, width=1, color='#404040',\n               colors='#404040',pad=4, grid_color='#404040', grid_alpha=1,\n               rotation=45) ![1](assets/1.png)\n\n# functions for formatting the axis \"tick labels\"\n# `millions()` will convert the scientific notation to millions of cases\ndef millions(val, pos): ![2](assets/2.png)\n    modified_val = val*1e-6\n    formatted_val = str(modified_val)\n    if val == ax.get_ylim()[1]:\n        formatted_val = formatted_val+'M'\n    if val == 0:\n        formatted_val = \"0\"\n    return formatted_val\n\n# `custom_dates()` will abbreviate the dates to be more readable\ndef custom_dates(val, pos): ![2](assets/2.png)\n    dates_list = just_USA.date.tolist()\n    date_label = \"\"\n    if pos is not None: ![3](assets/3.png)\n        current_value = dates_list[pos]\n        current_month = datetime.strftime(current_value, '%b')\n        date_label = current_month\n        if date_label == 'Jan':\n            date_label = date_label + \" '\"+ datetime.strftime(current_value,\n                                                              '%y')\n    return date_label\n\n# assign formatter functions\ny_formatter = FuncFormatter(millions)\nx_formatter = FuncFormatter(custom_dates)\n\n# apply the formatter functions to the appropriate axis\nax.yaxis.set_major_formatter(y_formatter)\nax.xaxis.set_major_formatter(x_formatter)\n\n# create and position the annotation text\nax.text(4, 3000000, \"Confirmed cases\\noften lag infection\\nby several weeks.\") ![4](assets/4.png)\n\n# get the value of all bars as a list\nbar_value = just_USA.new_cases.tolist()\n\n# create the leader line\nax.vlines( x = 6, color='#404040', linewidth=1, alpha=.7,\n                         ymin = bar_value[6]+100000, ymax = 3000000-100000)\n\n# set the title of the chart\nplt.title(\"COVID-19 cases spike following relaxed restrictions\\n\" + \\\n          \"in the spring of 2020\", fontweight=\"bold\")\n\n# show the chart!\nplt.show()\n```"]