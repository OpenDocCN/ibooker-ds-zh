- en: Chapter 14\. Bringing Your Charts to the Web with Matplotlib and Plotly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。使用 Matplotlib 和 Plotly 将图表带到网络上
- en: In this chapter, we’ll see how to bring the fruits of your pandas data cleaning
    and exploration to the web. Often a good static visualization is a great way to
    present data, and we’ll start by showing how you can use Matplotlib to do just
    that. Sometimes user interaction can really enrich a data visualization—we’ll
    see how Python’s Plotly library can be used to create interactive visualizations
    in a Jupyter notebook and transfer these, user interactions (UI) and all, to a
    web page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何将您的 pandas 数据清理和探索成果带到网络上。通常，一个良好的静态可视化图是展示数据的好方法，我们将从展示如何使用 Matplotlib
    来实现这一点开始。有时，用户交互真的可以丰富数据可视化——我们将看到如何使用 Python 的 Plotly 库来创建交互式可视化图表，并将这些，包括用户交互
    (UI)，全部转移到网页上。
- en: We’ll also see how learning Plotly’s Python library gives you competence with
    a native JavaScript library, which can really extend the possibilities of your
    web dataviz. We’ll demonstrate this by creating some simple JS UIs to update our
    native Plotly charts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到学习 Plotly 的 Python 库如何使您具备使用本地 JavaScript 库的能力，这实际上可以扩展您的网络数据可视化的可能性。我们将通过创建一些简单的
    JS UI 来更新我们的本地 Plotly 图表来演示这一点。
- en: Static Charts with Matplotlib
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 创建静态图表
- en: Often the best chart for the job is a static chart where full editorial control
    lies with the creator. One of Matplotlib’s strengths is its ability to produce
    print-quality charts in a comprehensive range of formats, from high-definition
    web PNGs to SVG renderings, with vector primitives that scale perfectly with document
    size.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最适合工作的图表是静态图表，其中完全由创建者控制编辑。Matplotlib 的一个优点是它能够生成从高清网络 PNG 到 SVG 渲染的全面范围格式的印刷质量图表，具有与文档大小完美匹配的矢量基元。
- en: For web graphics the ubiquitous, recommended format is the portable network
    graphics (PNG) format which, as the name suggests, was designed for the job. Let’s
    select a few charts from our Nobel exploration (see [Chapter 11](ch11.xhtml#chapter_pandas_exploring))
    and deliver them to the web as PNGs, making a little presentation on the way.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Web 图形，无处不在且推荐的格式是便携式网络图形 (PNG) 格式，正如其名称所示，它是为此工作而设计的。让我们从我们的诺贝尔探索中选择几个图表
    (请参阅 [第 11 章](ch11.xhtml#chapter_pandas_exploring))，并将它们以 PNG 的形式提供到网络上，在此过程中做一个小展示。
- en: In [“National Trends”](ch11.xhtml#sect_national_trends), we saw that measuring
    national prize hauls by absolute numbers gave a very different picture of a per-capita
    measurement, taking into account population sizes. We produced a couple of bar
    charts showing this. Now let’s turn this exploratory find into a presentation.
    We’ll use vertical bar charts to make the country names easier to read.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [“国家趋势”](ch11.xhtml#sect_national_trends) 中，我们看到通过绝对数字衡量国家的奖项产出得到了一个非常不同的图片，考虑到人口规模的情况下，这是一个人均测量。我们制作了一些显示此内容的条形图。现在让我们将这个探索性发现转化为一个演示文稿。我们将使用垂直条形图来使国家名称更易
- en: 'We take the Matplotlib axis returned by the pandas plot method and use it to
    make a few adaptations, changing its face color to light gray (#eee) and adding
    a label or two:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取由 pandas 绘图方法返回的 Matplotlib 坐标轴，并对其进行一些调整，将其背景色更改为浅灰色（#eee），并添加一两个标签：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-1)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-1)'
- en: Threshold for countries with at least three prizes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 具有至少三个奖项的国家的阈值。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-2)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-2)'
- en: We want a horizontal bar chart of kind `barh`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要一个水平条形图，种类为 `barh`。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-3)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-3)'
- en: Using the `tight_layout` method reduces the chances of chart elements being
    lost in the saved figure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tight_layout` 方法可减少保存图形时丢失图表元素的可能性。
- en: 'We perform the same operation for the absolute numbers, producing two horizontal
    bar chart PNGs. To present these on the web, we’ll use some of the HTML and CSS
    taught in [Chapter 4](ch04.xhtml#chapter_webdev101):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对绝对数字执行相同的操作，生成两个水平条形图 PNG。为了在网络上展示这些，我们将使用一些在 [第 4 章](ch04.xhtml#chapter_webdev101)
    中学到的 HTML 和 CSS：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO2-1)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO2-1)'
- en: The images are in a subdirectory relative to *index.xhtml*
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图像位于相对于 *index.xhtml* 的子目录中
- en: After title, subtitle, and intro, we have a main container, within which there
    is a chart-wrapper `div` with two charts and an information box.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在标题、副标题和介绍之后，我们有一个主容器，在其中有一个包含两个图表和一个信息框的图表包装器`div`。
- en: 'We’ll use a little CSS to size, position, and style the content. The key CSS
    is the use of flex-boxes to distribute the charts and info-box in a row and make
    them of equal width by giving the chart-wrapper a flex weight of two and the info-box
    a flex weight of one:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些 CSS 来调整内容的大小、位置和样式。关键的 CSS 是使用 flex-box 将图表和信息框分布在一行中，并通过为图表包装器赋予两个权重和信息框赋予一个权重来使它们具有相等的宽度：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-1)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-1)'
- en: The chart and info-box children of this container are under flex control.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此容器的图表和信息框是通过 flex 控制的。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-2)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-2)'
- en: Chart-wrapper is twice the width of the info-box.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图表包装器的宽度是信息框的两倍。
- en: '[Figure 14-1](#webpres_nobel_pngs) (left) shows the resulting web page.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-1](#webpres_nobel_pngs)（左）显示了生成的网页。'
- en: '![dpj2 1401](assets/dpj2_1401.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1401](assets/dpj2_1401.png)'
- en: Figure 14-1\. A couple of static charts
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-1\. 两幅静态图表
- en: Adapting to Screen Sizes
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适应屏幕大小
- en: One challenge for modern web development and associated dataviz is adapting
    to the many devices now used to access the web. Much of the time the ability of
    smartphones and tablets to pan and pinch/zoom means the same visualization can
    be used on all devices. Making visualizations adaptable is not easy and suffers
    from combinatorial explosion quite quickly. Often a compromise composition is
    the best way to proceed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Web 开发及相关数据可视化面临的一个挑战是适应现在使用的众多设备。智能手机和平板电脑可以平移和捏/缩放，这意味着同样的可视化可以在所有设备上使用。使可视化具有适应性并不容易，并且很快就会遭遇组合爆炸问题。通常，妥协的组合是最佳方式。
- en: But there are occasions where an easy win is achievable using the CSS `media`
    property to adapt style to device screen size, usually using changing screen width
    to trigger the use of specialized styles. We’ll use the Nobel web page we just
    created to demonstrate this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在某些情况下，可以通过使用 CSS 的`media`属性来根据设备屏幕大小调整样式，通常使用变化的屏幕宽度来触发专用样式的使用，这是一种简单的胜利。我们将使用刚刚创建的
    Nobel 网页来演示这一点。
- en: The default chart layout in [Figure 14-1](#webpres_nobel_pngs) is fine for most
    laptop or PC screens, but as the width of the device is reduced, the charts and
    info-box become a little cluttered and the info-box elongates to contain the text.
    By triggering a flex-box change at a set width of 1,000 pixels, we can make the
    visualization easier to consume on a small screen device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的图表布局在大多数笔记本电脑或个人电脑屏幕上都很好，但设备宽度减小时，图表和信息框会变得有些混乱，信息框会变长以容纳文本内容。通过在设备宽度达到 1,000
    像素时触发 flex-box 的变化，我们可以使可视化在小屏设备上更易于消化。
- en: 'Here we add a media-screen trigger to apply a different `flex-direction` value
    to devices 1,000 or less pixels wide. Rather than displaying info-box and charts
    in a row, we display them in a column and reverse the order to put the info-box
    on the bottom. The result is shown in [Figure 14-1](#webpres_nobel_pngs) (right):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，我们添加了一个媒体屏幕触发器，将不超过 1,000 像素的设备应用不同的`flex-direction`值。与其在一行中显示信息框和图表，我们将它们显示在一列中，并反转顺序将信息框放在底部。结果显示在[图 14-1](#webpres_nobel_pngs)（右）中：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using Remote Images or Assets
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用远程图片或资源
- en: 'You can use remote assets such as Dropbox or Google-hosted images by getting
    their shared link and using it as the image source. For example, the following
    `img` tags use Dropbox images for [Figure 14-1](#webpres_nobel_pngs) rather than
    locally hosted ones:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用远程资源，例如 Dropbox 或 Google 托管的图像，通过获取它们的共享链接并将其用作图像源。例如，以下`img`标记使用 Dropbox
    图像而不是本地托管的图像作为[图 14-1](#webpres_nobel_pngs)的示例：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Charting with Plotly
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Plotly 进行图表化
- en: For static charts, presented as PNGs or SVGs, Matplotlib is eminently customizable,
    though its API could be more intuitive. But if you want your charts to have any
    dynamic/interactive elements, for example the ability to change or filter the
    dataset with buttons or selectors, then you will need a different charting library,
    and this is where Plotly^([1](ch14.xhtml#idm45607755786208)) comes in.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于以 PNG 或 SVG 格式呈现的静态图表，Matplotlib 具有极高的可定制性，尽管其 API 可能不够直观。但是，如果你希望你的图表具有任何动态/交互元素，例如使用按钮或选择器更改或过滤数据集的能力，则需要使用不同的图表库，这就是
    Plotly^([1](ch14.xhtml#idm45607755786208)) 的用武之地。
- en: '[Plotly](https://plotly.com/python) is a Python- (and other languages) based
    charting library that, like Matplotlib, can be used during interactive Jupyter
    notebook sessions. It offers a wide range of chart forms, some of which aren’t
    found in the Matplotlib stable, and is arguably easier to configure than Matploblib.
    For this reason alone it’s a useful tool to have, but where Plotly shines is its
    ability to export these charts, along with any scripted interactive widgets, to
    the web.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Plotly](https://plotly.com/python) 是一个基于 Python（以及其他语言）的图表库，类似于 Matplotlib，可以在交互式
    Jupyter 笔记本会话中使用。它提供了各种图表形式，其中一些在 Matplotlib 中找不到，并且配置起来比 Matplotlib 更容易。因此，单单因为这个原因它就是一个有用的工具，但
    Plotly 的亮点在于其能够将这些图表以及任何脚本化的交互式小部件导出到 Web 上。'
- en: As mentioned, user interactions and dynamic charts are often surplus to requirements,
    but even in this case Plotly has some nice value-adds like tool-tipped information
    which, for example, gives specific information about a bar-group on mouse-over.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，用户交互和动态图表通常是多余的，但即使在这种情况下，Plotly 也有一些不错的增值功能，比如鼠标悬停时提供特定的柱状组信息。
- en: Basic Charts
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本图表
- en: 'Let’s see how Plotly does things by replicating one of the Matploblib charts
    from [“Historical Trends in Prize Distribution”](ch11.xhtml#sect_hist_trends).
    First, we’ll create a DataFrame from the Nobel Prize dataset showing cumulative
    prizes for three geographical regions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Plotly 是如何操作的，通过复制 Matploblib 中的一个图表来展示[“奖励分布的历史趋势”](ch11.xhtml#sect_hist_trends)。首先，我们将从诺贝尔奖数据集创建一个
    DataFrame，显示三个地理区域的累积奖项：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This gives us a `df_regions` DataFrame with columnar cumulative sums:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们得到了一个名为 `df_regions` 的 DataFrame，其中包含列累积求和：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Plotly Express
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Plotly Express
- en: 'Plotly provides an [`express` module](https://oreil.ly/bJRlf) that enables
    fast chart sketches, great for exploratory iteration in a notebook. This module
    has high-level objects for line charts, bar charts, etc. and can take pandas DataFrames
    as arguments interpreting columnar data.^([2](ch14.xhtml#idm45607755562576)) The
    regional DataFrame we just created can be used directly by Plotly Express to build
    a line chart in a couple of lines. This produces the chart in [Figure 14-2](#plotly_lines)
    (left):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 提供了一个 [`express` 模块](https://oreil.ly/bJRlf)，可以快速绘制图表草图，非常适合在笔记本中进行探索性迭代。该模块为线图、条形图等提供了高级对象，并且可以接受
    pandas DataFrame 作为参数来解释列数据。^([2](ch14.xhtml#idm45607755562576)) 刚刚创建的区域 DataFrame
    可以直接被 Plotly Express 使用，用几行代码构建一条线图。这将生成图表 [图 14-2](#plotly_lines)（左侧）：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![dpj2 1402](assets/dpj2_1402.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1402](assets/dpj2_1402.png)'
- en: Figure 14-2\. Cumulative prizes with Plotly
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-2\. 使用 Plotly 的累积奖项
- en: Note the row index label that is used for the x-axis by default and the tooltip
    that appears on mouse-over showing, in this case, information about the line section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意默认情况下用于 x 轴的行索引标签，以及鼠标悬停时显示的工具提示，显示线段部分的信息。
- en: 'Another thing to note is that the legend label is taken from the grouping index,
    in this case `country`. We can easily fix this by relabeling it to something more
    sensible, in this case `Regions`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的是图例标签取自分组索引，这种情况下为 `country`。我们可以轻松地将其改为更合理的名称，例如 `Regions`：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO4-1)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO4-1)'
- en: Plotly colors the lines by default, but in order to distinguish them in the
    print version of this book, we can adjust their styles. To do this, we set the
    `line_dash` argument to the country group and the `line_dash_sequence` to the
    line styles we want.^([3](ch14.xhtml#idm45607755439968))
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Plotly 为线条着色，但为了在本书的印刷版本中区分它们，我们可以调整它们的样式。为此，我们将 `line_dash` 参数设置为国家组，并将
    `line_dash_sequence` 设置为我们想要的线条样式。^([3](ch14.xhtml#idm45607755439968))
- en: Plotly Express is easy to use and brings some novel charts into play.^([4](ch14.xhtml#idm45607755437280))
    For quick data sketches it competes with pandas’s Matplotlib wrapper, which works
    directly on DataFrames. But if you want more control over your plots and to really
    exploit Plotly’s advantages, I recommend focusing on using Plotly figures and
    graph-objects. This API is more complex but significantly more powerful. It is
    also mirrored by the JavaScript API, which means you’re essentially learning two
    libraries—a very useful thing as we’ll see later in the chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly Express 使用简单，并引入了一些新颖的图表^([4](ch14.xhtml#idm45607755437280))。对于快速数据草图，它与
    pandas 的 Matplotlib 包竞争，后者直接在 DataFrame 上运行。但如果您想对您的图表有更多控制，并真正利用 Plotly 的优势，我建议专注于使用
    Plotly 图表和图形对象。这个 API 更复杂，但显著更强大。它还有 JavaScript API 的镜像，这意味着您实际上正在学习两个库——这是一个非常有用的事情，我们将在本章后面看到。
- en: Plotly Graph-Objects
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Plotly 图形对象
- en: Using Plotly graph-objects involves a little more boilerplate code, but the
    pattern is essentially the same whether creating bar charts, violin plots, maps,
    etc. The idea is to use an array of graph-objects such as scattered points (lines
    in line mode), bars, candles, boxes, etc., as data for the figure. A `layout`
    object is used to provide other chart features.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Plotly 图形对象需要一些样板代码，但无论是创建条形图、小提琴图、地图等，模式基本相同。思路是使用图形对象数组，如散点（在线模式下的线）、条形、蜡烛、方框等，作为图表的数据。`layout`
    对象用于提供其他图表特性。
- en: 'The following code produces the chart in [Figure 14-2](#plotly_lines) (right).
    Note the customized tooltip on mouse-over:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成 [图 14-2](#plotly_lines)（右侧）的图表。请注意鼠标悬停时的自定义工具提示：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-1)'
- en: We’ll create an array of line graph-objects to use as our figure’s data.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个线图形对象数组，用作我们图表的数据。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-2)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-2)'
- en: In line mode scatter objects points are connected.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在线模式散点对象的点是连接的。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-3)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-3)'
- en: You can provide an HTML string template that will appear on mouse-hover. `x`
    and `y` variables at that point are provided.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提供一个 HTML 字符串模板，将出现在鼠标悬停时。在那一点上提供 `x` 和 `y` 变量。
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-4)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-4)'
- en: The `Scatter` object has a *line* property that allows you to set various line
    properties like color, line style, line shape, etc.^([5](ch14.xhtml#idm45607755224832))
    In order to distinguish our lines in the black-and-white print book, we want to
    set their style. To do this we use the size (`len`) of the `traces` array as an
    index to an array of styles, setting the line styles in sequence.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scatter` 对象有一个 *line* 属性，允许您设置各种线属性，如颜色、线样式、线形状等^([5](ch14.xhtml#idm45607755224832))
    为了在黑白印刷书中区分我们的线条，我们希望设置它们的样式。为此，我们使用 `traces` 数组的大小（`len`）作为样式数组的索引，按顺序设置线条样式。'
- en: '[![5](assets/5.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-5)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-5)'
- en: As well as data, we provide a `layout` object, defining things like the chart’s
    dimension, x-axis titles, and much more.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了数据外，我们还提供一个 `layout` 对象，定义了诸如图表尺寸、x 轴标题等内容。
- en: '[![6](assets/6.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-6)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-6)'
- en: Create a figure using our array of graph-objects and the layout.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的图形对象数组和布局创建图表。
- en: Mapping with Plotly
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Plotly 进行地图绘制
- en: Another of Plotly’s big strengths is its mapping libraries and particularly
    its ability to integrate the [Mapbox ecosystem](https://oreil.ly/965Zv), one of
    the most powerful tile-based mapping resources for the web. Mapbox’s tiling system
    is fast and efficient and opens up the possibility of ambitious mapping visualizations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 的另一个重要优势是其地图库，特别是其集成 [Mapbox 生态系统](https://oreil.ly/965Zv) 的能力，Mapbox
    是最强大的网络切片地图资源之一。 Mapbox 的切片系统快速高效，并且开启了雄心勃勃的地图可视化可能性。
- en: Let’s demonstrate some Plotly mapping using our Nobel Prize dataset and aiming
    to visualize the global distribution of prizes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们利用我们的诺贝尔奖数据集展示一些 Plotly 地图绘制，目标是可视化奖项的全球分布。
- en: 'First, we’ll make a DataFrame with the prizes tallies by category for the winning
    countries and add a `Total` column by aggregating the category numbers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用 DataFrame 制作各获奖国家按类别的奖项统计，并通过汇总类别数字添加一个 `Total` 列：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We’ll use that `Total` column to threshold the rows, limiting the countries
    to those that have won the Nobel at least three times. We’ll make a copy of this
    slice to avoid any pandas DataFrame errors if trying to change a view:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `Total` 列来筛选行，将国家限制为至少获得三次诺贝尔奖的国家。我们将复制此切片以避免任何 pandas DataFrame 错误，如果试图更改视图的话：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With the prize tallies by country to hand we need some geographical data, namely
    the coordinates of the centroids (centers) of the countries. This is an opportunity
    to demo [Geopy](https://github.com/geopy/geopy), a cool little Python library
    that does just that job, among many geographical others.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有按国家统计的奖项数量，我们需要一些地理数据，即各国的中心经纬度坐标。这是一个演示 [Geopy](https://github.com/geopy/geopy)
    的机会，这是一个很酷的小型 Python 库，可以执行这种工作，以及其他许多地理工作。
- en: 'First, install with `pip` or equivalent:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 `pip` 或类似工具进行安装：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can use the `Nominatim` module to provide locations based on our country
    name strings. We create a geolocator by providing a user-agent string:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `Nominatim` 模块基于国家名称字符串提供位置信息。我们通过提供用户代理字符串创建一个地理定位器：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Using the geolocator, we can loop through a few countries in the DataFrame
    index to show the geo date available:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用地理定位器，我们可以遍历数据框索引中的几个国家，以展示可用的地理数据：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s add geographic latitude (`Lat`) and longitude (`Lon`) columns to our
    DataFrame using our geolocator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 DataFrame 添加地理纬度 (`Lat`) 和经度 (`Lon`) 列，使用我们的地理定位器：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We’re going to use some map markers to reflect the prize numbers for various
    countries. We want the size of the circle to reflect the prize sum, so we will
    need a little function to get the appropriate radius. We’ll have a `scale` parameter
    to allow hand-tweaking of the marker size:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些地图标记来反映各国奖项数量。我们希望圆圈的大小反映奖项总数，因此我们需要一个小函数来获取适当的半径。我们将使用 `scale` 参数来允许手动调整标记大小：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As with the basic charts, there is a Plotly Express mapping option, which allows
    for fast map creation using a pandas DataFrame. Express has a dedicated `scatter_mapbox`
    method that returns a figure object. Here we use this figure to make some updates
    to the map layout, using one of the free map styles (carto-positron) provided
    by Plotly (see [Figure 14-3](#img_map_plotly_express)):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与基本图表一样，Plotly Express 提供了一种快速制图选项，使用 pandas DataFrame 可以快速创建地图。Express 有一个专门的
    `scatter_mapbox` 方法返回一个图表对象。这里我们使用该图表对象对地图布局进行一些更新，使用 Plotly 提供的免费地图样式之一（carto-positron）（参见
    [图 14-3](#img_map_plotly_express)）：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-1)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-1)'
- en: Create an array of sizes for the radii of the circular markers.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个用于圆形标记半径的大小数组。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-2)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-2)'
- en: The mapbox takes an array of latitudes and longitudes for marker placement,
    as well as our calculated `size` array. Zoom indicates the position of the camera
    above the Earth with 0.7 as a standard global default.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Mapbox 需要经纬度和我们计算出的 `size` 数组以放置标记。缩放参数表示相机在地球上的位置，默认为 0.7。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-3)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-3)'
- en: '`hover_name` gives the title of the mouse-over tooltip and data any extra info
    we want, in this case the `Total` column.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`hover_name` 提供了鼠标悬停提示的标题和我们想要的额外信息，本例中是 `Total` 列。'
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-4)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-4)'
- en: Plotly provides a number of free-to-use [mapping style tile-sets](https://oreil.ly/NbTg1).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 提供了许多免费使用的 [地图样式瓷砖集](https://oreil.ly/NbTg1)。
- en: '![dpj2 1403](assets/dpj2_1403.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1403](assets/dpj2_1403.png)'
- en: Figure 14-3\. Fast mapping with Plotly Express
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-3\. 使用 Plotly Express 快速制图
- en: 'As with basic charts Plotly also offers a more powerful data+layout mapping
    option that follows the familiar recipe, creating an array of charts *traces*
    and a layout to specify things like legend boxes, titles, map zoom, etc. Here’s
    how to make our Nobel map:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与基本图表一样，Plotly 还提供了一种更强大的数据+布局映射选项，遵循熟悉的配方，创建一个图表 *traces* 数组和一个布局以指定诸如图例框、标题、地图缩放等内容。以下是制作我们的诺贝尔地图的方法：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-1)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-1)'
- en: Plotly offers a number of free, open-streetmap-based mapsets, but to use Mapbox-specific
    layers, you need to get a [Mapbox access token](https://oreil.ly/7zzug). These
    tokens are free to use for personal use.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 提供了许多基于免费开放街地图的地图集，但要使用 Mapbox 特定的图层，您需要获取一个[Mapbox 访问令牌](https://oreil.ly/7zzug)。这些令牌可以免费用于个人用途。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-2)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-2)'
- en: We’ll store the DataFrame’s columns and index in a more user-friendly form.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 DataFrame 的列和索引存储在一个更用户友好的形式中。
- en: The map produced is shown in [Figure 14-4](#img_map_plotly) (left). Note the
    customized tooltip, produced on mouse-over. [Figure 14-4](#img_map_plotly) (right)
    shows the result of some user interaction, panning and zooming to highlight European
    prize distributions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 所生成的地图显示在[图 14-4](#img_map_plotly)（左侧）。请注意，在鼠标悬停时生成的自定义工具提示。[图 14-4](#img_map_plotly)（右侧）显示了一些用户交互的结果，平移和缩放以突出显示欧洲奖项分布。
- en: '![dpj2 1404](assets/dpj2_1404.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1404](assets/dpj2_1404.png)'
- en: Figure 14-4\. Mapping with Plotly’s graph-objects
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-4\. 使用 Plotly 的图形对象进行映射
- en: Let’s extend the map to add some custom controls, using buttons to select prize
    categories to visualize.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们扩展地图以添加一些自定义控件，使用按钮来选择奖项类别进行可视化。
- en: Adding Custom Controls with Plotly
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Plotly 添加自定义控件
- en: One of the cool features of Plotly’s interactive maps is the ability to add
    [custom controls](https://oreil.ly/xo62V) in Python that can be ported to the
    web as HTML+JS controls. The control API is a little clunky, in my opinion, and
    limited to a small set of controls, but the ability to add dataset selectors,
    sliders, filters, and the like is a great asset. Here we’ll add a few buttons
    to our Nobel map, allowing the user to filter the dataset by category.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 交互地图的一个很酷的功能之一是能够添加[自定义控件](https://oreil.ly/xo62V)，可以在 Python 中作为 HTML+JS
    控件进行移植到 Web 上。控件 API 在我看来有点笨拙，并且仅限于一小部分控件，但是能够添加数据集选择器、滑块、过滤器等功能是一个很大的优势。在这里，我们将在我们的诺贝尔奖地图上添加一些按钮，允许用户通过类别来筛选数据集。
- en: 'Before proceeding we need to replace the non-numbers from the prizes by country
    and category DataFrame with zero to avoid Plotly labeling errors. You can see
    these in the first two rows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要将奖项中的非数字替换为零，以避免 Plotly 标签错误的发生。你可以在前两行中看到这些情况：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A single line of pandas fills these `NaN`s with zero, making the change in
    place:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一行 Pandas 代码就可以将这些`NaN`替换为零，直接进行修改：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will involve a slightly different Plotly pattern than the one used up to
    now. We’ll first create our figure with `layout` and then add the data traces
    using `add_trace` by iterating through the Nobel categories, adding buttons to
    the `button` array as we go.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将涉及稍微不同的 Plotly 模式，与迄今为止使用的模式略有不同。我们将首先使用`layout`创建我们的图形，然后通过迭代诺贝尔类别使用`add_trace`添加数据跟踪，同时将按钮添加到`button`数组中。
- en: 'We’ll then add these buttons to the layout using its `update` method:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用其`update`方法将这些按钮添加到布局中：
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-1)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-1)'
- en: The category marker sets are initially invisible—only the default `Total` is
    shown.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 初始情况下，类别标记集是不可见的——只有默认的`Total`显示。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-2)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-2)'
- en: We use the mask to set a visibility array for this button that will only make
    the associated category data markers visible.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用掩码来设置一个可见性数组，用于该按钮，仅使相关类别的数据标记可见。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-3)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-3)'
- en: We now add the buttons to our layout, adjusting direction (down) and positioning
    using `x` and `y` to place the center of the button group vertically, with the
    button-box anchored on the left.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将这些按钮添加到我们的布局中，使用`x`和`y`来垂直放置按钮组的中心，并且按钮框锚定在左侧。
- en: Clicking on a button (see [Figure 14-5](#img_map_plotly_buttons)) shows the
    data markers associated with that category by applying the button’s visibility
    mask. While this feels a little awkward, it is a solid way to filter the data
    by button-press. Unlike the JavaScript+HTML controls we’ll look at later in the
    chapter, there’s not a lot you can do in the way of styling to the buttons.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 点击按钮（参见[图 14-5](#img_map_plotly_buttons)）会显示与该类别相关的数据标记，通过应用按钮的可见性掩码。虽然这感觉有点笨拙，但这是一种通过按钮按下来过滤数据的可靠方法。与本章稍后将介绍的JavaScript+HTML控件不同，按钮的样式化能力有限。
- en: '![dpj2 1405](assets/dpj2_1405.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1405](assets/dpj2_1405.png)'
- en: Figure 14-5\. Adding custom controls to a Plotly map
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-5\. 向Plotly地图添加自定义控件
- en: From Notebook to Web with Plotly
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从笔记本到Web的Plotly
- en: 'Now we’ve got our Plotly charts displaying in the notebook, let’s see how to
    transfer them to a little web presentation. We’re going to use the `plot` function
    from Plotly’s `offline` module to generated the embeddable HTML+JS required, so
    let’s first import it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在笔记本中显示了Plotly图表，让我们看看如何将它们转移到一个小的Web演示中。我们将使用Plotly的`offline`模块中的`plot`函数来生成所需的可嵌入HTML+JS，因此首先导入它：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using `plot`, we can create an embeddable string from the figure that can be
    lifted straight to the web. It contains the necessary HTML and JavaScript tags
    to bootstrap Plotly’s JavaScript library and create the chart:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`plot`，我们可以创建一个从图形生成的可嵌入字符串，可以直接提升到Web。它包含了启动Plotly的JavaScript库和创建图表所需的HTML和JavaScript标签：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we tidy up that string we see it breaks down to four components, an HTML
    `div` tag with the chart’s ID and some JavaScript, containing the `newPlot` call
    with data and layout passed in as parameters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们整理这个字符串，我们可以看到它分解为四个部分，一个带有图表ID的HTML `div`标签和一些JavaScript，其中包含通过参数传递的数据和布局的`newPlot`调用：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Although we could just paste the HTML+JS into a web page and see the chart
    rendered, it’s better practice to separate JS and HTML concerns. First, we place
    the chart div in a little web page with a few headers, add some containers for
    info-boxes, etc.:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以将HTML+JS直接粘贴到网页中查看渲染的图表，但将JS和HTML分开是更好的实践。首先，将图表div放入一个小的网页中，添加一些标题、信息框等容器：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-1)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-1)'
- en: The `div` container produced by Plotly with an ID corresponding to the JavaScripted
    chart.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly生成的`div`容器，其ID对应于JavaScript图表。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-2)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-2)'
- en: The `script` tag produced by Plotly to import the JS charting library.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly生成的`script`标签，用于导入JS图表库。
- en: 'We take the content of the remaining two JavaScript tags and place it in a
    *plotly_charts.js* JS file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将剩余的两个JavaScript标签的内容放入一个*plotly_charts.js*的JS文件中：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-1)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-1)'
- en: Checks that the `div` with correct ID is present.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 检查带有正确ID的`div`是否存在。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-2)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-2)'
- en: Plotly’s `newPlot` method will build the chart in the identified container.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly的`newPlot`方法将在指定的容器中构建图表。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-3)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-3)'
- en: An array of chart-objects, in this case containing all the data (`x` and `y`
    arrays) necessary to transfer the chart from notebook to web page.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含所有数据（`x`和`y`数组）的图表对象数组，这种情况下，可以将图表从笔记本转移到Web页面。
- en: On page load the Plotly library’s `newPlot` method is run using the embedding
    data and layout and the chart built with JS in the `div` container specified by
    ID. This produces the web page shown in [Figure 14-6](#img_plotly_to_web).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，使用Plotly库的`newPlot`方法，使用嵌入数据和布局构建图表，并在指定ID的`div`容器中通过JS生成Web页面。这产生了[图 14-6](#img_plotly_to_web)中显示的Web页面。
- en: '![dpj2 1406](assets/dpj2_1406.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1406](assets/dpj2_1406.png)'
- en: Figure 14-6\. From notebook to web with Plotly
  id: totrans-155
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-6\. 从笔记本到Web的Plotly
- en: All charts produced in Python with Plotly can be transferred to the web in this
    way. If you plan on using more than a couple, I recommend having separate JS files
    for each chart as the embedded data can lead to very long files.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Plotly在Python中生成的所有图表可以通过这种方式转移到Web。如果您计划使用多个图表，建议为每个图表准备单独的JS文件，因为嵌入数据可能导致文件非常长。
- en: Native JavaScript Charts with Plotly
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Plotly 的原生 JavaScript 图表
- en: Being able to easily shift a favored chart from notebook to web is great, but
    if you need to make refinements it involves moving back and forth from notebook
    to webdev. This can get annoying after a while. One really cool thing about Plotly
    is that you are learning a JavaScript charting library for free, as it were. The
    Python and JS figure patterns are very similar, so it’s easy to both convert chart
    code from Python to JS and start writing JS charts from scratch. Let’s demonstrate
    this by converting a seaborn chart to JavaScripted Plotly.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 能够轻松地将喜爱的图表从笔记本转移到 Web 是很棒的，但如果需要进行细微调整，则需要在笔记本和 Web 开发之间来回移动。这可能会在一段时间后变得很烦人。Plotly
    的一件非常酷的事情是，你可以免费学习一个 JavaScript 图表库。Python 和 JS 的图表模式非常相似，因此很容易将 Python 中的图表代码转换为
    JS，并从头开始编写 JS 图表。让我们通过将 seaborn 图表转换为 JavaScripted Plotly 来演示这一点。
- en: 'In [“Age at Time of Award”](ch11.xhtml#sect_age_at_time_of_award), we produced
    some violin plots using seaborn. To transfer these to the web, we’ll first need
    some data. One useful method for shifting small datasets is to convert a refined
    dataset to JSON and just copy the string produced, pasting it into a JS file and
    then parsing the string to a JS object. First, we use pandas to create a small
    dataset with only the `award_age` and `gender` columns, then produce the required
    JSON array of objects:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [“获奖时年龄”](ch11.xhtml#sect_age_at_time_of_award) 中，我们使用 seaborn 生成了一些小提琴图。要将这些图转移到
    Web，我们首先需要一些数据。将小数据集转换为 JSON 并仅复制生成的字符串，然后将其粘贴到 JS 文件中并将字符串解析为 JS 对象是移动小数据集的有用方法。首先，我们使用
    pandas 创建仅包含 `award_age` 和 `gender` 列的小数据集，然后生成所需的 JSON 对象数组：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can take the JSON string, paste it into a JS file, and use the built-in
    JSON library to parse the string into a JS array of objects:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 JSON 字符串复制到 JS 文件中，并使用内置的 JSON 库将字符串解析为 JS 对象数组：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With the data to hand, we’ll need a little HTML scaffold with a chart container,
    ID `award_age`, to contain the Plotly chart:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有了数据后，我们需要一些 HTML 结构来包含一个图表容器，ID 为 `'award_age'`，用于容纳 Plotly 图表：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO11-1)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO11-1)'
- en: We’ll use this container’s ID to tell Plotly where to build the chart.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用此容器的 ID 来告诉 Plotly 在何处构建图表。
- en: 'We can now build our first JS-native Plotly chart. The pattern matches that
    seen with the Python Plotly plots in our notebook. First, we create a data array
    (`traces`) with some chart-objects, then a layout to provide titles, labels, colors,
    etc. Then we use `newPlot` to build the chart. The main difference with Python
    is that the first parameter of `newPlot` is the ID of the container within which
    to build the chart:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以构建我们的第一个 JS 原生 Plotly 图表。该模式与我们笔记本中 Python Plotly 图表的模式相匹配。首先，我们创建一个包含一些图表对象的数据数组（`traces`），然后创建一个布局以提供标题、标签、颜色等。然后，我们使用
    `newPlot` 来构建图表。与 Python 的主要区别在于 `newPlot` 的第一个参数是容器的 ID，用于在其中构建图表：
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-1)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-1)'
- en: As per the usual Plotly pattern, we first create an array of chart-objects.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 根据通常的 Plotly 模式，我们首先创建一个图表对象数组。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-2)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-2)'
- en: We use the JS array’s `map` method with shorthand arrow functions to produce
    arrays of winners’ genders and ages.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 JS 数组的 `map` 方法和箭头函数的简写来生成获奖者性别和年龄的数组。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-3)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-3)'
- en: Plotly will render the chart to our `div` container with ID `'award_age'`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 将把图表渲染到我们的 `div` 容器中，其 ID 为 `'award_age'`。
- en: The violin chart produced is shown in [Figure 14-7](#img_plotly_violin).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 所生成的小提琴图显示在 [图 14-7](#img_plotly_violin) 中。
- en: '![dpj2 1407](assets/dpj2_1407.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1407](assets/dpj2_1407.png)'
- en: Figure 14-7\. Violin plot with Plotly JS
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-7\. 使用 Plotly JS 的小提琴图
- en: As you can see, the Plotly’s JS API matches the Python one and is, if anything,
    more succinct. Separating data delivery from chart construction makes the codebase
    much easier to work with and means tweaking and refinement don’t require a return
    to the Python API. For small data sketches, parsing JSON strings gets the job
    done fast.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Plotly 的 JS API 与 Python 的 API 相匹配，而且如果有什么不同的话，JS 更为简洁。将数据传递与图表构建分开使代码库易于处理，并且意味着调整和精炼不需要返回
    Python API。对于小数据快速查看，解析 JSON 字符串可以快速完成工作。
- en: But if you want to have larger datasets to hand and to really leverage the power
    of the JS web context, the standard data delivery is through JSON files.^([6](ch14.xhtml#idm45607752586880))
    For datasets of a few megabytes, this offers the most flexibility for datavizzers.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你想要有更大的数据集，并真正利用JS网络上下文的能力，标准的数据传递方式是通过JSON文件。对于几兆字节的数据集，这为数据可视化提供了最大的灵活性。
- en: Fetching JSON Files
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取JSON文件
- en: Another way of getting data to your web pages is to export a DataFrame to JSON
    and then use JavaScript to fetch it, do any necessary further processing, and
    then pass it on to a native JS chart library (or D3). This is a very flexible
    workflow and provides the most freedom for JS data visualizations.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将数据传递到网页的方式是将DataFrame导出为JSON，然后使用JavaScript获取它，进行任何必要的进一步处理，然后将其传递给本地JS图表库（或者D3）。这是一种非常灵活的工作流程，为JS数据可视化提供了最大的自由度。
- en: The separation of powers, allowing Python to focus on its data-processing strength
    and JavaScript its superior data-visualizing ability, provides a dataviz sweet
    spot and is the most common way of producing ambitious web dataviz.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 权力分离，允许Python专注于其数据处理能力，而JavaScript专注于其优越的数据可视化能力，提供了数据可视化的甜蜜点，是产生宏大网络数据可视化的最常见方式。
- en: 'First, we’ll save our Nobel winners DataFrame to JSON using the dedicated method.
    Generally we’ll want the data in the form of arrays of objects, which requires
    an `orient` parameter of `''records''`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将我们的诺贝尔获奖者DataFrame保存为JSON，使用专用方法。通常，我们希望数据以对象数组的形式出现，这需要一个`orient`参数为`'records'`：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With the JSON dataset to hand, lets use it to produce a Plotly chart using
    the JavaScript API as in the previous section. We’ll need a little HTML, including
    an ID’ed container to build the chart in and a script link to import our JS code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有JSON数据集后，让我们使用它来使用JavaScript API生成一个Plotly图表，就像前一节一样。我们需要一些HTML，包括一个带ID的容器来构建图表，并且一个脚本链接来导入我们的JS代码：
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-1)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-1)'
- en: We’ll use the ID to tell Plotly where to build the chart.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个ID告诉Plotly在哪里构建图表。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-2)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-2)'
- en: Import the index JS file from scripts folder.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 从scripts文件夹导入索引JS文件。
- en: 'In our JS entry point we use D3’s `json` utility method to import the Nobel
    winners dataset and convert it to an array of JS objects. We then hand off the
    data to a `makeChart` function where Plotly will work its magic:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的JS入口点，我们使用D3的`json`实用方法来导入诺贝尔获奖者数据集并将其转换为JS对象数组。然后我们将数据传递给`makeChart`函数，在那里Plotly将展示其魔力：
- en: '[PRE33]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The console shows our array of winners:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台显示我们的获奖者数组：
- en: '[PRE34]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `makeChart` function we use D3’s very handy [rollup method](https://oreil.ly/wLVAZ)
    to group our Nobel dataset by gender and category, and then provide the group
    sizes by taking the length of the arrays of members returned:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在`makeChart`函数中，我们使用D3非常方便的[rollup方法](https://oreil.ly/wLVAZ)来按性别和类别分组我们的诺贝尔数据集，然后通过返回的成员数组的长度来提供组大小：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-1)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-1)'
- en: 'From the array of winner objects, `rollup` groups by gender, then category,
    and then gives the array size/length of the resulting groups as a JS Map: `{male:
    {Physics: 199, Economics: 74, ...}, female: {...}}`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '从获奖者对象数组中，`rollup`按性别分组，然后按类别分组，然后将结果组的大小/长度作为JS Map返回：`{male: {Physics: 199,
    Economics: 74, ...}, female: {...}}`。'
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-2)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-2)'
- en: We use the JS `...` [spread operator](https://oreil.ly/ZsIzM) to produce an
    array from the category keys, which is then sorted to produce our horizontal bar
    chart’s y values.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用JS的`...` [扩展运算符](https://oreil.ly/ZsIzM) 来从类别键产生一个数组，然后进行排序以生成我们水平条形图的y值。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-3)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-3)'
- en: We map the sorted categories to their group values to provide the bar chart
    heights.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将排序后的类别映射到它们的组值，以提供条形图的高度。
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-4)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-4)'
- en: We increase the left margin for our horizontal bar chart to accommodate long
    labels.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们增加水平条形图的左边距，以容纳长标签。
- en: The bar chart produced is shown in [Figure 14-8](#img_plotly_barchart). With
    the full Nobel winners dataset available, it’s easy to spin off a whole range
    of charts without having to switch context from Python to JS. The Plotly API is
    pretty intuitive and discoverable, making it a great addition to the dataviz toolset.
    Let’s see how easy it is to extend it with a few HTML+JS custom controls.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所生成的条形图显示在[图14-8](#img_plotly_barchart)中。由于有完整的诺贝尔获奖者数据集可用，可以轻松生成一系列图表，无需从Python切换到JS。Plotly
    API相当直观和易于发现，使其成为数据可视化工具箱的重要补充。让我们看看如何通过一些HTML+JS自定义控件来扩展它。
- en: '![dpj2 1408](assets/dpj2_1408.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1408](assets/dpj2_1408.png)'
- en: Figure 14-8\. Bar chart with Plotly JS
  id: totrans-207
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图14-8. 使用Plotly JS绘制的条形图
- en: User-Driven Plotly with JavaScript and HTML
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript和HTML进行用户驱动的Plotly
- en: As we saw in [“Adding Custom Controls with Plotly”](#sect_plotly_ui), Plotly
    allows you to add custom controls such as buttons or dropdowns in Python, which
    can be transferred to the web as JS-driven HTML controls. Although this is a really
    useful feature of Plotly, it is a little limited, particularly in terms of placement
    and styling of these widgets. An alternative way to update Plotly web charts is
    to use native JS+HTML controls to change the charts, filtering the datasets or
    adapting the styling. It turns out this is pretty easy to do and, with a little
    JS know-how, it represents a more flexible and powerful control setup.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[“使用Plotly添加自定义控件”](#sect_plotly_ui)中看到的，Plotly允许您在Python中添加自定义控件，如按钮或下拉菜单，并将其转换为由JS驱动的HTML控件。虽然这是Plotly的一个非常有用的功能，但在控件的布置和样式方面有些局限。更新Plotly
    Web图表的另一种方式是使用本地的JS+HTML控件来修改图表，过滤数据集或调整样式。事实证明这样做非常简单，并且借助一些JS技巧，可以实现更灵活、功能强大的控件设置。
- en: Let’s demonstrate some JS custom control using one of the charts we just built
    in [“Native JavaScript Charts with Plotly”](#sect_native_JS_Plotly). We’ll add
    a dropdown to allow the user to change the x-axis group shown. The two obvious
    options are the existing breakdown by gender and one grouping the ages by prize
    category.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示一些JS自定义控件，使用我们刚刚在[“使用本地JavaScript创建Plotly图表”](#sect_native_JS_Plotly)中构建的图表之一。我们将添加一个下拉菜单，允许用户更改显示的x轴组。两个明显的选项是按性别分组和按奖项类别分组的年龄。
- en: 'First, we’ll add an HTML dropdown (`select`) to the page and center it using
    some flex-box CSS:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在页面上添加一个HTML下拉菜单（`select`），并使用一些flex-box CSS将其居中：
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO15-1)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO15-1)'
- en: This `select` tag with contain `option` tags that will be added with JS and
    D3.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`select`标签将包含通过JS和D3添加的`option`标签。
- en: 'A little CSS will center any controls in the `controls` container and adapt
    the font style:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一些CSS将使`controls`容器中的任何控件居中，并适应字体样式：
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now that we’ve some HTML to build upon, we’ll use some JS and D3 to add the
    `select` tags to our group controls. But first we’ll adapt the Plotly charting
    function to allow it to be updated with new groups. The JSON data is imported
    as before, but now the data is stored as a local variable and used to update a
    Plotly violin chart. This `updateChart` function uses Plotly’s [`update` method](https://oreil.ly/tayov)
    to create the plot. This works like `newPlot` but is intended to be called when
    data or layout changes, efficiently redrawing the plot to reflect any changes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一些HTML基础，我们将使用一些JS和D3来为我们的组控件添加`select`标签。但首先，我们将调整Plotly绘图函数，以允许其根据新组更新。JSON数据像以前一样导入，但现在数据存储为本地变量，并用于更新Plotly小提琴图。这个`updateChart`函数使用Plotly的[`update`方法](https://oreil.ly/tayov)来创建图表。它类似于`newPlot`，但旨在在数据或布局变化时调用，高效地重新绘制图表以反映任何更改。
- en: 'We also have a new `selectedGroup` variable, which will be used in the dropdown
    `select` to change the field being plotted:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个新的`selectedGroup`变量，它将用于下拉菜单`select`中，以更改正在绘制的字段：
- en: '[PRE38]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-1)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-1)'
- en: The `selectedGroup` variable allows the x-axis group to be changed by the user.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectedGroup`变量允许用户通过下拉菜单`select`更改x轴组。'
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-3)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-3)'
- en: We want the prize groups to be presented in alphabetical order (starting with
    *Chemistry*), so make this change to the layout.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望按字母顺序（从*化学*开始）呈现奖项组，因此对布局进行此更改。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-4)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-4)'
- en: In place of `newPlot` we call `update`, which has the same signature but is
    used to reflect changes to data (`traces`) or layout.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在`newPlot`的位置，我们调用`update`，它具有相同的签名，但用于反映数据（`traces`）或布局的更改。
- en: 'With the `updateChart` method to hand, we now need to add the select options
    and a callback function to be called when the user changes the prize group:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`updateChart`方法，我们现在需要添加选择选项和回调函数，以在用户更改奖项组时调用：
- en: '[PRE39]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-1)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-1)'
- en: For each of the available groups, we use D3 to select the dropdown by ID and
    append an `<option>` tag with text and value set to the group string.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个可用的组，我们使用D3通过ID选择下拉菜单，并附加一个文本和值设置为组字符串的`<option>`标签。
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-2)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-2)'
- en: This ensures that the initial selection is the value of `selectedGroup` by setting
    the `selected` attribute to true.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保初始选择是`selectedGroup`的值，通过将`selected`属性设置为true。
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-3)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-3)'
- en: We use D3 to add a callback function when a selection is made. Here we get the
    value of the option (*gender* or *category*) and use it to set the `selectedGroup`
    variable. We then update the chart to reflect this change.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用D3在进行选择时添加回调函数。在这里，我们获取选项（*性别*或*类别*）的值，并将其用于设置`selectedGroup`变量。然后，我们更新图表以反映这一变化。
- en: With the wiring now complete, we have a group dropdown that changes the violin
    plot to reflect the group chosen. [Figure 14-9](#img_plotly_controls_js) shows
    the result of selecting the prize category group. Note that Plotly helpfully rotates
    the category group labels to prevent overlap.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在连接完成，我们有一个组下拉菜单，可以更改小提琴图以反映所选组。[图 14-9](#img_plotly_controls_js)显示选择奖项类别组的结果。请注意，Plotly聪明地旋转类别组标签，以防止重叠。
- en: '![dpj2 1409](assets/dpj2_1409.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1409](assets/dpj2_1409.png)'
- en: Figure 14-9\. Adding a dropdown to control Plotly
  id: totrans-236
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 14-9\. 添加下拉菜单以控制Plotly
- en: We’ll be seeing more HTML controls in action in later chapters where buttons
    and radio-boxes are demoed. Creating controls in JS is a lot more flexible than
    the Python-driven options at the cost of a small amount of web-dev fu.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中看到更多HTML控件的实际应用，其中演示了按钮和单选框。使用JS创建控件比Python驱动的选项更加灵活，但也需要一些网络开发技能。
- en: Summary
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we’ve seen how to turn the best charts from your notebook explorations
    into a web presentation. There are many options available, from static PNGs, with
    maybe some extra Matplotlib styling, to interactive Plotly charts, using custom
    JavaScript controls. Data can be embedded in the Plotly chart calls, produced
    using Plotly’s offline library, or imported as a JSON string (nice for data sketches)
    or file.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到如何将笔记本探索中的最佳图表转换为网络演示。可用选项很多，从静态PNG图像（也许带有一些额外的Matplotlib样式）到使用自定义JavaScript控件的交互式Plotly图表。数据可以嵌入在Plotly图表调用中，使用Plotly的离线库生成，或作为JSON字符串（适用于数据草图）或文件导入。
- en: Plotly is a good charting library, and in learning the Python API you pretty
    much learn the JS API as well—a big plus. For conventional and some specialized
    (e.g., machine learning) charts, it’s a great option. For anything a little more
    bespoke or complex, D3 offers a lot more power, as we’ll see in the upcoming chapters.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly是一个很好的图表库，通过学习Python API，你基本上也学会了JS API——这是一个很大的优势。对于传统和一些专业（例如机器学习）图表，它是一个很好的选择。对于稍微复杂或特别定制的内容，D3提供了更多的功能，我们将在即将到来的章节中看到。
- en: ^([1](ch14.xhtml#idm45607755786208-marker)) [Bokeh](https://bokeh.org) is a
    worthy alternative.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch14.xhtml#idm45607755786208-marker)) [Bokeh](https://bokeh.org)是一个值得考虑的替代品。
- en: ^([2](ch14.xhtml#idm45607755562576-marker)) You can easily transpose your DataFrames
    to the required columnar form using the DataFrame’s `T` operator.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch14.xhtml#idm45607755562576-marker)) 您可以使用DataFrame的`T`运算符轻松将数据框转置为所需的列形式。
- en: ^([3](ch14.xhtml#idm45607755439968-marker)) See [*https://oreil.ly/zUyxK*](https://oreil.ly/zUyxK)
    for Plotly’s line style options.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch14.xhtml#idm45607755439968-marker)) 查看[*https://oreil.ly/zUyxK*](https://oreil.ly/zUyxK)了解Plotly的线型选项。
- en: ^([4](ch14.xhtml#idm45607755437280-marker)) See [the Plotly site](https://plotly.com/python)
    for some demos.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch14.xhtml#idm45607755437280-marker)) 查看[Plotly网站](https://plotly.com/python)获取一些演示。
- en: ^([5](ch14.xhtml#idm45607755224832-marker)) See [*https://oreil.ly/8UDgA*](https://oreil.ly/8UDgA)
    for further details.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch14.xhtml#idm45607755224832-marker)) 查看[*https://oreil.ly/8UDgA*](https://oreil.ly/8UDgA)获取更多详细信息。
- en: ^([6](ch14.xhtml#idm45607752586880-marker)) For more advanced, user-driven dataviz
    with large datasets, a data server with API is another route.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch14.xhtml#idm45607752586880-marker)) 对于更高级、用户驱动的大数据可视化，使用带有 API 的数据服务器是另一种选择。
