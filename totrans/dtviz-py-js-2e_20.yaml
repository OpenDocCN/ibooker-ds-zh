- en: Chapter 14\. Bringing Your Charts to the Web with Matplotlib and Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll see how to bring the fruits of your pandas data cleaning
    and exploration to the web. Often a good static visualization is a great way to
    present data, and we’ll start by showing how you can use Matplotlib to do just
    that. Sometimes user interaction can really enrich a data visualization—we’ll
    see how Python’s Plotly library can be used to create interactive visualizations
    in a Jupyter notebook and transfer these, user interactions (UI) and all, to a
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also see how learning Plotly’s Python library gives you competence with
    a native JavaScript library, which can really extend the possibilities of your
    web dataviz. We’ll demonstrate this by creating some simple JS UIs to update our
    native Plotly charts.
  prefs: []
  type: TYPE_NORMAL
- en: Static Charts with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often the best chart for the job is a static chart where full editorial control
    lies with the creator. One of Matplotlib’s strengths is its ability to produce
    print-quality charts in a comprehensive range of formats, from high-definition
    web PNGs to SVG renderings, with vector primitives that scale perfectly with document
    size.
  prefs: []
  type: TYPE_NORMAL
- en: For web graphics the ubiquitous, recommended format is the portable network
    graphics (PNG) format which, as the name suggests, was designed for the job. Let’s
    select a few charts from our Nobel exploration (see [Chapter 11](ch11.xhtml#chapter_pandas_exploring))
    and deliver them to the web as PNGs, making a little presentation on the way.
  prefs: []
  type: TYPE_NORMAL
- en: In [“National Trends”](ch11.xhtml#sect_national_trends), we saw that measuring
    national prize hauls by absolute numbers gave a very different picture of a per-capita
    measurement, taking into account population sizes. We produced a couple of bar
    charts showing this. Now let’s turn this exploratory find into a presentation.
    We’ll use vertical bar charts to make the country names easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'We take the Matplotlib axis returned by the pandas plot method and use it to
    make a few adaptations, changing its face color to light gray (#eee) and adding
    a label or two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Threshold for countries with at least three prizes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We want a horizontal bar chart of kind `barh`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `tight_layout` method reduces the chances of chart elements being
    lost in the saved figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform the same operation for the absolute numbers, producing two horizontal
    bar chart PNGs. To present these on the web, we’ll use some of the HTML and CSS
    taught in [Chapter 4](ch04.xhtml#chapter_webdev101):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The images are in a subdirectory relative to *index.xhtml*
  prefs: []
  type: TYPE_NORMAL
- en: After title, subtitle, and intro, we have a main container, within which there
    is a chart-wrapper `div` with two charts and an information box.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use a little CSS to size, position, and style the content. The key CSS
    is the use of flex-boxes to distribute the charts and info-box in a row and make
    them of equal width by giving the chart-wrapper a flex weight of two and the info-box
    a flex weight of one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The chart and info-box children of this container are under flex control.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Chart-wrapper is twice the width of the info-box.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 14-1](#webpres_nobel_pngs) (left) shows the resulting web page.'
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1401](assets/dpj2_1401.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-1\. A couple of static charts
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adapting to Screen Sizes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One challenge for modern web development and associated dataviz is adapting
    to the many devices now used to access the web. Much of the time the ability of
    smartphones and tablets to pan and pinch/zoom means the same visualization can
    be used on all devices. Making visualizations adaptable is not easy and suffers
    from combinatorial explosion quite quickly. Often a compromise composition is
    the best way to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: But there are occasions where an easy win is achievable using the CSS `media`
    property to adapt style to device screen size, usually using changing screen width
    to trigger the use of specialized styles. We’ll use the Nobel web page we just
    created to demonstrate this.
  prefs: []
  type: TYPE_NORMAL
- en: The default chart layout in [Figure 14-1](#webpres_nobel_pngs) is fine for most
    laptop or PC screens, but as the width of the device is reduced, the charts and
    info-box become a little cluttered and the info-box elongates to contain the text.
    By triggering a flex-box change at a set width of 1,000 pixels, we can make the
    visualization easier to consume on a small screen device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we add a media-screen trigger to apply a different `flex-direction` value
    to devices 1,000 or less pixels wide. Rather than displaying info-box and charts
    in a row, we display them in a column and reverse the order to put the info-box
    on the bottom. The result is shown in [Figure 14-1](#webpres_nobel_pngs) (right):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using Remote Images or Assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use remote assets such as Dropbox or Google-hosted images by getting
    their shared link and using it as the image source. For example, the following
    `img` tags use Dropbox images for [Figure 14-1](#webpres_nobel_pngs) rather than
    locally hosted ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Charting with Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For static charts, presented as PNGs or SVGs, Matplotlib is eminently customizable,
    though its API could be more intuitive. But if you want your charts to have any
    dynamic/interactive elements, for example the ability to change or filter the
    dataset with buttons or selectors, then you will need a different charting library,
    and this is where Plotly^([1](ch14.xhtml#idm45607755786208)) comes in.
  prefs: []
  type: TYPE_NORMAL
- en: '[Plotly](https://plotly.com/python) is a Python- (and other languages) based
    charting library that, like Matplotlib, can be used during interactive Jupyter
    notebook sessions. It offers a wide range of chart forms, some of which aren’t
    found in the Matplotlib stable, and is arguably easier to configure than Matploblib.
    For this reason alone it’s a useful tool to have, but where Plotly shines is its
    ability to export these charts, along with any scripted interactive widgets, to
    the web.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, user interactions and dynamic charts are often surplus to requirements,
    but even in this case Plotly has some nice value-adds like tool-tipped information
    which, for example, gives specific information about a bar-group on mouse-over.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see how Plotly does things by replicating one of the Matploblib charts
    from [“Historical Trends in Prize Distribution”](ch11.xhtml#sect_hist_trends).
    First, we’ll create a DataFrame from the Nobel Prize dataset showing cumulative
    prizes for three geographical regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us a `df_regions` DataFrame with columnar cumulative sums:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Plotly Express
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Plotly provides an [`express` module](https://oreil.ly/bJRlf) that enables
    fast chart sketches, great for exploratory iteration in a notebook. This module
    has high-level objects for line charts, bar charts, etc. and can take pandas DataFrames
    as arguments interpreting columnar data.^([2](ch14.xhtml#idm45607755562576)) The
    regional DataFrame we just created can be used directly by Plotly Express to build
    a line chart in a couple of lines. This produces the chart in [Figure 14-2](#plotly_lines)
    (left):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1402](assets/dpj2_1402.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-2\. Cumulative prizes with Plotly
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note the row index label that is used for the x-axis by default and the tooltip
    that appears on mouse-over showing, in this case, information about the line section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to note is that the legend label is taken from the grouping index,
    in this case `country`. We can easily fix this by relabeling it to something more
    sensible, in this case `Regions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly colors the lines by default, but in order to distinguish them in the
    print version of this book, we can adjust their styles. To do this, we set the
    `line_dash` argument to the country group and the `line_dash_sequence` to the
    line styles we want.^([3](ch14.xhtml#idm45607755439968))
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Express is easy to use and brings some novel charts into play.^([4](ch14.xhtml#idm45607755437280))
    For quick data sketches it competes with pandas’s Matplotlib wrapper, which works
    directly on DataFrames. But if you want more control over your plots and to really
    exploit Plotly’s advantages, I recommend focusing on using Plotly figures and
    graph-objects. This API is more complex but significantly more powerful. It is
    also mirrored by the JavaScript API, which means you’re essentially learning two
    libraries—a very useful thing as we’ll see later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Graph-Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Plotly graph-objects involves a little more boilerplate code, but the
    pattern is essentially the same whether creating bar charts, violin plots, maps,
    etc. The idea is to use an array of graph-objects such as scattered points (lines
    in line mode), bars, candles, boxes, etc., as data for the figure. A `layout`
    object is used to provide other chart features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code produces the chart in [Figure 14-2](#plotly_lines) (right).
    Note the customized tooltip on mouse-over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll create an array of line graph-objects to use as our figure’s data.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: In line mode scatter objects points are connected.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: You can provide an HTML string template that will appear on mouse-hover. `x`
    and `y` variables at that point are provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The `Scatter` object has a *line* property that allows you to set various line
    properties like color, line style, line shape, etc.^([5](ch14.xhtml#idm45607755224832))
    In order to distinguish our lines in the black-and-white print book, we want to
    set their style. To do this we use the size (`len`) of the `traces` array as an
    index to an array of styles, setting the line styles in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-5)'
  prefs: []
  type: TYPE_NORMAL
- en: As well as data, we provide a `layout` object, defining things like the chart’s
    dimension, x-axis titles, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO5-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Create a figure using our array of graph-objects and the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping with Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another of Plotly’s big strengths is its mapping libraries and particularly
    its ability to integrate the [Mapbox ecosystem](https://oreil.ly/965Zv), one of
    the most powerful tile-based mapping resources for the web. Mapbox’s tiling system
    is fast and efficient and opens up the possibility of ambitious mapping visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s demonstrate some Plotly mapping using our Nobel Prize dataset and aiming
    to visualize the global distribution of prizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll make a DataFrame with the prizes tallies by category for the winning
    countries and add a `Total` column by aggregating the category numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use that `Total` column to threshold the rows, limiting the countries
    to those that have won the Nobel at least three times. We’ll make a copy of this
    slice to avoid any pandas DataFrame errors if trying to change a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With the prize tallies by country to hand we need some geographical data, namely
    the coordinates of the centroids (centers) of the countries. This is an opportunity
    to demo [Geopy](https://github.com/geopy/geopy), a cool little Python library
    that does just that job, among many geographical others.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install with `pip` or equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use the `Nominatim` module to provide locations based on our country
    name strings. We create a geolocator by providing a user-agent string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the geolocator, we can loop through a few countries in the DataFrame
    index to show the geo date available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add geographic latitude (`Lat`) and longitude (`Lon`) columns to our
    DataFrame using our geolocator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re going to use some map markers to reflect the prize numbers for various
    countries. We want the size of the circle to reflect the prize sum, so we will
    need a little function to get the appropriate radius. We’ll have a `scale` parameter
    to allow hand-tweaking of the marker size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As with the basic charts, there is a Plotly Express mapping option, which allows
    for fast map creation using a pandas DataFrame. Express has a dedicated `scatter_mapbox`
    method that returns a figure object. Here we use this figure to make some updates
    to the map layout, using one of the free map styles (carto-positron) provided
    by Plotly (see [Figure 14-3](#img_map_plotly_express)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Create an array of sizes for the radii of the circular markers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The mapbox takes an array of latitudes and longitudes for marker placement,
    as well as our calculated `size` array. Zoom indicates the position of the camera
    above the Earth with 0.7 as a standard global default.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`hover_name` gives the title of the mouse-over tooltip and data any extra info
    we want, in this case the `Total` column.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO6-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly provides a number of free-to-use [mapping style tile-sets](https://oreil.ly/NbTg1).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1403](assets/dpj2_1403.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-3\. Fast mapping with Plotly Express
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As with basic charts Plotly also offers a more powerful data+layout mapping
    option that follows the familiar recipe, creating an array of charts *traces*
    and a layout to specify things like legend boxes, titles, map zoom, etc. Here’s
    how to make our Nobel map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly offers a number of free, open-streetmap-based mapsets, but to use Mapbox-specific
    layers, you need to get a [Mapbox access token](https://oreil.ly/7zzug). These
    tokens are free to use for personal use.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll store the DataFrame’s columns and index in a more user-friendly form.
  prefs: []
  type: TYPE_NORMAL
- en: The map produced is shown in [Figure 14-4](#img_map_plotly) (left). Note the
    customized tooltip, produced on mouse-over. [Figure 14-4](#img_map_plotly) (right)
    shows the result of some user interaction, panning and zooming to highlight European
    prize distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1404](assets/dpj2_1404.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-4\. Mapping with Plotly’s graph-objects
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s extend the map to add some custom controls, using buttons to select prize
    categories to visualize.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Custom Controls with Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the cool features of Plotly’s interactive maps is the ability to add
    [custom controls](https://oreil.ly/xo62V) in Python that can be ported to the
    web as HTML+JS controls. The control API is a little clunky, in my opinion, and
    limited to a small set of controls, but the ability to add dataset selectors,
    sliders, filters, and the like is a great asset. Here we’ll add a few buttons
    to our Nobel map, allowing the user to filter the dataset by category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before proceeding we need to replace the non-numbers from the prizes by country
    and category DataFrame with zero to avoid Plotly labeling errors. You can see
    these in the first two rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A single line of pandas fills these `NaN`s with zero, making the change in
    place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will involve a slightly different Plotly pattern than the one used up to
    now. We’ll first create our figure with `layout` and then add the data traces
    using `add_trace` by iterating through the Nobel categories, adding buttons to
    the `button` array as we go.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll then add these buttons to the layout using its `update` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The category marker sets are initially invisible—only the default `Total` is
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the mask to set a visibility array for this button that will only make
    the associated category data markers visible.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We now add the buttons to our layout, adjusting direction (down) and positioning
    using `x` and `y` to place the center of the button group vertically, with the
    button-box anchored on the left.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on a button (see [Figure 14-5](#img_map_plotly_buttons)) shows the
    data markers associated with that category by applying the button’s visibility
    mask. While this feels a little awkward, it is a solid way to filter the data
    by button-press. Unlike the JavaScript+HTML controls we’ll look at later in the
    chapter, there’s not a lot you can do in the way of styling to the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1405](assets/dpj2_1405.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-5\. Adding custom controls to a Plotly map
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From Notebook to Web with Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we’ve got our Plotly charts displaying in the notebook, let’s see how to
    transfer them to a little web presentation. We’re going to use the `plot` function
    from Plotly’s `offline` module to generated the embeddable HTML+JS required, so
    let’s first import it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `plot`, we can create an embeddable string from the figure that can be
    lifted straight to the web. It contains the necessary HTML and JavaScript tags
    to bootstrap Plotly’s JavaScript library and create the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we tidy up that string we see it breaks down to four components, an HTML
    `div` tag with the chart’s ID and some JavaScript, containing the `newPlot` call
    with data and layout passed in as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Although we could just paste the HTML+JS into a web page and see the chart
    rendered, it’s better practice to separate JS and HTML concerns. First, we place
    the chart div in a little web page with a few headers, add some containers for
    info-boxes, etc.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The `div` container produced by Plotly with an ID corresponding to the JavaScripted
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The `script` tag produced by Plotly to import the JS charting library.
  prefs: []
  type: TYPE_NORMAL
- en: 'We take the content of the remaining two JavaScript tags and place it in a
    *plotly_charts.js* JS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Checks that the `div` with correct ID is present.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly’s `newPlot` method will build the chart in the identified container.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: An array of chart-objects, in this case containing all the data (`x` and `y`
    arrays) necessary to transfer the chart from notebook to web page.
  prefs: []
  type: TYPE_NORMAL
- en: On page load the Plotly library’s `newPlot` method is run using the embedding
    data and layout and the chart built with JS in the `div` container specified by
    ID. This produces the web page shown in [Figure 14-6](#img_plotly_to_web).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1406](assets/dpj2_1406.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-6\. From notebook to web with Plotly
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: All charts produced in Python with Plotly can be transferred to the web in this
    way. If you plan on using more than a couple, I recommend having separate JS files
    for each chart as the embedded data can lead to very long files.
  prefs: []
  type: TYPE_NORMAL
- en: Native JavaScript Charts with Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to easily shift a favored chart from notebook to web is great, but
    if you need to make refinements it involves moving back and forth from notebook
    to webdev. This can get annoying after a while. One really cool thing about Plotly
    is that you are learning a JavaScript charting library for free, as it were. The
    Python and JS figure patterns are very similar, so it’s easy to both convert chart
    code from Python to JS and start writing JS charts from scratch. Let’s demonstrate
    this by converting a seaborn chart to JavaScripted Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [“Age at Time of Award”](ch11.xhtml#sect_age_at_time_of_award), we produced
    some violin plots using seaborn. To transfer these to the web, we’ll first need
    some data. One useful method for shifting small datasets is to convert a refined
    dataset to JSON and just copy the string produced, pasting it into a JS file and
    then parsing the string to a JS object. First, we use pandas to create a small
    dataset with only the `award_age` and `gender` columns, then produce the required
    JSON array of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We can take the JSON string, paste it into a JS file, and use the built-in
    JSON library to parse the string into a JS array of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'With the data to hand, we’ll need a little HTML scaffold with a chart container,
    ID `award_age`, to contain the Plotly chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use this container’s ID to tell Plotly where to build the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now build our first JS-native Plotly chart. The pattern matches that
    seen with the Python Plotly plots in our notebook. First, we create a data array
    (`traces`) with some chart-objects, then a layout to provide titles, labels, colors,
    etc. Then we use `newPlot` to build the chart. The main difference with Python
    is that the first parameter of `newPlot` is the ID of the container within which
    to build the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: As per the usual Plotly pattern, we first create an array of chart-objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the JS array’s `map` method with shorthand arrow functions to produce
    arrays of winners’ genders and ages.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO12-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Plotly will render the chart to our `div` container with ID `'award_age'`.
  prefs: []
  type: TYPE_NORMAL
- en: The violin chart produced is shown in [Figure 14-7](#img_plotly_violin).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1407](assets/dpj2_1407.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-7\. Violin plot with Plotly JS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see, the Plotly’s JS API matches the Python one and is, if anything,
    more succinct. Separating data delivery from chart construction makes the codebase
    much easier to work with and means tweaking and refinement don’t require a return
    to the Python API. For small data sketches, parsing JSON strings gets the job
    done fast.
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to have larger datasets to hand and to really leverage the power
    of the JS web context, the standard data delivery is through JSON files.^([6](ch14.xhtml#idm45607752586880))
    For datasets of a few megabytes, this offers the most flexibility for datavizzers.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching JSON Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way of getting data to your web pages is to export a DataFrame to JSON
    and then use JavaScript to fetch it, do any necessary further processing, and
    then pass it on to a native JS chart library (or D3). This is a very flexible
    workflow and provides the most freedom for JS data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: The separation of powers, allowing Python to focus on its data-processing strength
    and JavaScript its superior data-visualizing ability, provides a dataviz sweet
    spot and is the most common way of producing ambitious web dataviz.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll save our Nobel winners DataFrame to JSON using the dedicated method.
    Generally we’ll want the data in the form of arrays of objects, which requires
    an `orient` parameter of `''records''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'With the JSON dataset to hand, lets use it to produce a Plotly chart using
    the JavaScript API as in the previous section. We’ll need a little HTML, including
    an ID’ed container to build the chart in and a script link to import our JS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the ID to tell Plotly where to build the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Import the index JS file from scripts folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our JS entry point we use D3’s `json` utility method to import the Nobel
    winners dataset and convert it to an array of JS objects. We then hand off the
    data to a `makeChart` function where Plotly will work its magic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The console shows our array of winners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `makeChart` function we use D3’s very handy [rollup method](https://oreil.ly/wLVAZ)
    to group our Nobel dataset by gender and category, and then provide the group
    sizes by taking the length of the arrays of members returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the array of winner objects, `rollup` groups by gender, then category,
    and then gives the array size/length of the resulting groups as a JS Map: `{male:
    {Physics: 199, Economics: 74, ...}, female: {...}}`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the JS `...` [spread operator](https://oreil.ly/ZsIzM) to produce an
    array from the category keys, which is then sorted to produce our horizontal bar
    chart’s y values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We map the sorted categories to their group values to provide the bar chart
    heights.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO14-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We increase the left margin for our horizontal bar chart to accommodate long
    labels.
  prefs: []
  type: TYPE_NORMAL
- en: The bar chart produced is shown in [Figure 14-8](#img_plotly_barchart). With
    the full Nobel winners dataset available, it’s easy to spin off a whole range
    of charts without having to switch context from Python to JS. The Plotly API is
    pretty intuitive and discoverable, making it a great addition to the dataviz toolset.
    Let’s see how easy it is to extend it with a few HTML+JS custom controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1408](assets/dpj2_1408.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-8\. Bar chart with Plotly JS
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: User-Driven Plotly with JavaScript and HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in [“Adding Custom Controls with Plotly”](#sect_plotly_ui), Plotly
    allows you to add custom controls such as buttons or dropdowns in Python, which
    can be transferred to the web as JS-driven HTML controls. Although this is a really
    useful feature of Plotly, it is a little limited, particularly in terms of placement
    and styling of these widgets. An alternative way to update Plotly web charts is
    to use native JS+HTML controls to change the charts, filtering the datasets or
    adapting the styling. It turns out this is pretty easy to do and, with a little
    JS know-how, it represents a more flexible and powerful control setup.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s demonstrate some JS custom control using one of the charts we just built
    in [“Native JavaScript Charts with Plotly”](#sect_native_JS_Plotly). We’ll add
    a dropdown to allow the user to change the x-axis group shown. The two obvious
    options are the existing breakdown by gender and one grouping the ages by prize
    category.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll add an HTML dropdown (`select`) to the page and center it using
    some flex-box CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: This `select` tag with contain `option` tags that will be added with JS and
    D3.
  prefs: []
  type: TYPE_NORMAL
- en: 'A little CSS will center any controls in the `controls` container and adapt
    the font style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve some HTML to build upon, we’ll use some JS and D3 to add the
    `select` tags to our group controls. But first we’ll adapt the Plotly charting
    function to allow it to be updated with new groups. The JSON data is imported
    as before, but now the data is stored as a local variable and used to update a
    Plotly violin chart. This `updateChart` function uses Plotly’s [`update` method](https://oreil.ly/tayov)
    to create the plot. This works like `newPlot` but is intended to be called when
    data or layout changes, efficiently redrawing the plot to reflect any changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have a new `selectedGroup` variable, which will be used in the dropdown
    `select` to change the field being plotted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The `selectedGroup` variable allows the x-axis group to be changed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We want the prize groups to be presented in alphabetical order (starting with
    *Chemistry*), so make this change to the layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO16-4)'
  prefs: []
  type: TYPE_NORMAL
- en: In place of `newPlot` we call `update`, which has the same signature but is
    used to reflect changes to data (`traces`) or layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `updateChart` method to hand, we now need to add the select options
    and a callback function to be called when the user changes the prize group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: For each of the available groups, we use D3 to select the dropdown by ID and
    append an `<option>` tag with text and value set to the group string.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: This ensures that the initial selection is the value of `selectedGroup` by setting
    the `selected` attribute to true.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_bringing_your_charts_to_the_web_with_matplotlib_and_plotly_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We use D3 to add a callback function when a selection is made. Here we get the
    value of the option (*gender* or *category*) and use it to set the `selectedGroup`
    variable. We then update the chart to reflect this change.
  prefs: []
  type: TYPE_NORMAL
- en: With the wiring now complete, we have a group dropdown that changes the violin
    plot to reflect the group chosen. [Figure 14-9](#img_plotly_controls_js) shows
    the result of selecting the prize category group. Note that Plotly helpfully rotates
    the category group labels to prevent overlap.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1409](assets/dpj2_1409.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14-9\. Adding a dropdown to control Plotly
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We’ll be seeing more HTML controls in action in later chapters where buttons
    and radio-boxes are demoed. Creating controls in JS is a lot more flexible than
    the Python-driven options at the cost of a small amount of web-dev fu.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve seen how to turn the best charts from your notebook explorations
    into a web presentation. There are many options available, from static PNGs, with
    maybe some extra Matplotlib styling, to interactive Plotly charts, using custom
    JavaScript controls. Data can be embedded in the Plotly chart calls, produced
    using Plotly’s offline library, or imported as a JSON string (nice for data sketches)
    or file.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly is a good charting library, and in learning the Python API you pretty
    much learn the JS API as well—a big plus. For conventional and some specialized
    (e.g., machine learning) charts, it’s a great option. For anything a little more
    bespoke or complex, D3 offers a lot more power, as we’ll see in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch14.xhtml#idm45607755786208-marker)) [Bokeh](https://bokeh.org) is a
    worthy alternative.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch14.xhtml#idm45607755562576-marker)) You can easily transpose your DataFrames
    to the required columnar form using the DataFrame’s `T` operator.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch14.xhtml#idm45607755439968-marker)) See [*https://oreil.ly/zUyxK*](https://oreil.ly/zUyxK)
    for Plotly’s line style options.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch14.xhtml#idm45607755437280-marker)) See [the Plotly site](https://plotly.com/python)
    for some demos.
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch14.xhtml#idm45607755224832-marker)) See [*https://oreil.ly/8UDgA*](https://oreil.ly/8UDgA)
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: ^([6](ch14.xhtml#idm45607752586880-marker)) For more advanced, user-driven dataviz
    with large datasets, a data server with API is another route.
  prefs: []
  type: TYPE_NORMAL
