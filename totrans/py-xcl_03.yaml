- en: Chapter 2\. Development Environment
  prefs: []
  type: TYPE_NORMAL
- en: You probably can’t wait to learn the basics of Python but before we get there,
    you first need to set up your computer accordingly. To write VBA code or Power
    Queries, it’s enough to fire up Excel and open the VBA or Power Query editor,
    respectively. With Python, it’s a bit more work.
  prefs: []
  type: TYPE_NORMAL
- en: We will start this chapter by installing the Anaconda Python distribution. Besides
    installing Python, Anaconda will also give us access to the Anaconda Prompt and
    Jupyter notebooks, two essential tools that we will use throughout this book.
    The Anaconda Prompt is a special Command Prompt (Windows) or Terminal (macOS);
    it allows us to run Python scripts and other command line tools that we will meet
    in this book. Jupyter notebooks allow us to work with data, code, and charts in
    an interactive way, which makes them a serious competitor to Excel workbooks.
    After playing around with Jupyter notebooks, we will install Visual Studio Code
    (VS Code), a powerful text editor. VS Code works great for writing, running, and
    debugging Python scripts and comes with an integrated Terminal. [Figure 2-1](#filepos98642)
    summarizes what’s included in Anaconda and VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: As this book is about Excel, I am focusing on Windows and macOS in this chapter.
    However, everything up to and including [Part III](index_split_018.html#filepos863198)
    runs on Linux as well. Let’s get started by installing Anaconda!
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00063.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-1\. Development environment
  prefs: []
  type: TYPE_NORMAL
- en: The Anaconda Python Distribution
  prefs: []
  type: TYPE_NORMAL
- en: 'Anaconda is arguably the most popular Python distribution used for data science
    and comes with hundreds of third-party packages preinstalled: it includes Jupyter
    notebooks and most of the other packages that this book will use extensively,
    including pandas, OpenPyXL, and xlwings. The Anaconda Individual Edition is free
    for private use and guarantees that all the included packages are compatible with
    each other. It installs into a single folder and can easily be uninstalled again.
    After installing it, we will learn a few basic commands on the Anaconda Prompt
    and run an interactive Python session. We’ll then meet the package managers Conda
    and pip before wrapping this section up with Conda environments. Let’s get started
    by downloading and installing Anaconda!'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [Anaconda home page](https://oreil.ly/QV7Na) and download the latest
    version of the Anaconda installer (Individual Edition). Make sure to download
    the 64-bit graphical installer for the Python 3.x version.[1](index_split_009.html#filepos177589)
    Once downloaded, double-click the installer to start the installation process
    and make sure to accept all the defaults. For more detailed installation instructions,
    follow the [official documentation](https://oreil.ly/r01wn).
  prefs: []
  type: TYPE_NORMAL
- en: OTHER PYTHON DISTRIBUTIONS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While the instructions in this book assume that you have the Anaconda Individual
    Edition installed, the code and concepts shown will work with any other Python
    installation, too. In this case, however, you will have to install the required
    dependencies by following the instructions included in requirements.txt in the
    companion repository.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With Anaconda installed, we can now start using the Anaconda Prompt. Let’s see
    what this is and how it works!
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda Prompt
  prefs: []
  type: TYPE_NORMAL
- en: The Anaconda Prompt is really just a Command Prompt on Windows and a Terminal
    on macOS that have been set up to run with the correct Python interpreter and
    third-party packages. The Anaconda Prompt is the most basic tool to run Python
    code, and we will make extensive use of it in this book to run Python scripts
    and all sorts of command line tools that are offered by various packages.
  prefs: []
  type: TYPE_NORMAL
- en: ANACONDA PROMPT WITHOUT ANACONDA
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you don’t use the Anaconda Python distribution, you will have to use the
    Command Prompt on Windows and the Terminal on macOS whenever I instruct you to
    use the Anaconda Prompt.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you have never used a Command Prompt on Windows or a Terminal on macOS,
    don’t worry: you only need to know a handful of commands that will already give
    you a lot of power. Once you get used to it, using the Anaconda Prompt is often
    faster and more convenient than clicking your way through graphical user menus.
    Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Start menu button and start typing `Anaconda Prompt`. In the appearing
    entries, choose Anaconda Prompt, not Anaconda Powershell Prompt. Either select
    it with the arrow keys and hit Enter or use your mouse to click on it. If you
    prefer to open it via the Start menu, you will find it under Anaconda3\. It is
    a good idea to pin the Anaconda Prompt to your Windows taskbar as you will use
    it regularly throughout this book. The input line of the Anaconda Prompt will
    start with `(base)`:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base) C:\Users\felix>`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS, you won’t find an application called Anaconda Prompt. Instead, by
    Anaconda Prompt, I am referring to the Terminal that has been set up by the Anaconda
    installer to automatically activate a Conda environment (I will say more about
    Conda environments in a moment): press Command-Space bar or open the Launchpad,
    then type in `Terminal` and hit Enter. Alternatively, open the Finder and navigate
    to Applications > Utilities, where you will find the Terminal app that you can
    double-click. Once the Terminal appears, it should look something like this, i.e.,
    the input line has to start with `(base)`:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base) felix@MacBook-Pro ~ %`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you are on an older version of macOS, it looks rather like this:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base) MacBook-Pro:~ felix$`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlike the Command Prompt on Windows, the Terminal on macOS doesn’t show the
    full path of the current directory. Instead, the tilde stands for the home directory,
    which is usually /Users/<username>. To see the full path of your current directory,
    type `pwd` followed by Enter. `pwd` stands for print working directory.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If the input line in your Terminal doesn’t start with `(base)` after the installation
    of Anaconda, here is a common reason: if you had the Terminal running during the
    Anaconda installation, you will need to restart it. Note that clicking on the
    red cross on the top left of the Terminal window will only hide it but not quit
    it. Instead, right-click on the Terminal in the dock and select Quit or hit Command-Q
    while the Terminal is your active window. When you start it again and the Terminal
    shows `(base)` at the beginning of a new line, you are all set. It’s a good idea
    to keep the Terminal in your dock, as you will use it regularly throughout this
    book.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Having the Anaconda Prompt up and running, try out the commands outlined in
    [Table 2-1](#filepos106304). I am explaining each command in more detail after
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-1\. Commands for the Anaconda Prompt
  prefs: []
  type: TYPE_NORMAL
- en: '|  Command  |  Windows  |  macOS  |'
  prefs: []
  type: TYPE_TB
- en: '|  List files in current directory  |   `dir` |   `ls -la` |'
  prefs: []
  type: TYPE_TB
- en: '|  Change directory (relative)  |   `cd path\to\dir` |   `cd path/to/dir` |'
  prefs: []
  type: TYPE_TB
- en: '|  Change directory (absolute)  |   `cd C:\path\to\dir` |   `cd /path/to/dir`
    |'
  prefs: []
  type: TYPE_TB
- en: '|  Change to D drive  |   `D:` |  (doesn’t exist)  |'
  prefs: []
  type: TYPE_TB
- en: '|  Change to parent directory  |   `cd ..` |   `cd ..` |'
  prefs: []
  type: TYPE_TB
- en: '|  Scroll through previous commands  |  ↑ ( `up-arrow`) |  ↑ ( `up-arrow`)
    |'
  prefs: []
  type: TYPE_TB
- en: List files in current directory
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, type in `dir` for directory, then hit Enter. This will print the
    content of the directory you are currently in.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: On macOS, type in `ls -la` followed by Enter. `ls` is short for list directory
    contents, and `-la` will print the output in the long listing format and include
    all files, including hidden ones.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `cd Down` and hit the Tab key. `cd` stands for change directory. If you
    are in your home folder, the Anaconda Prompt should most likely be able to autocomplete
    it to `cd Downloads`. If you are in a different folder or don’t have a folder
    called Downloads, simply start to type the beginning of one of the directory names
    you saw with the previous command (`dir` or `ls -la`) before hitting the Tab key
    to autocomplete. Then hit Enter to change into the autocompleted directory. If
    you are on Windows and need to change your drive, you first need to type in the
    drive name before you can change into the correct directory:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`C:\Users\felix>` `D:` `D:\>` `cd data` `D:\data>`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that by starting your path with a directory or file name that is within
    your current directory, you are using a relative path, e.g., `cd Downloads`. If
    you would like to go outside of your current directory, you can type in an absolute
    path, e.g., `cd C:\Users` on Windows or `cd /Users` on macOS (mind the forward
    slash at the beginning).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Change to parent directory
  prefs: []
  type: TYPE_NORMAL
- en: To go to your parent directory, i.e., one level up in your directory hierarchy,
    type `cd ..` followed by Enter (make sure that there is a space between `cd` and
    the dots). You can combine this with a directory name, for example, if you want
    to go up one level, and then to change to the Desktop, enter `cd ..\Desktop`.
    On macOS, replace the backslash with a forward slash.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Scroll through previous commands
  prefs: []
  type: TYPE_NORMAL
- en: Use the up-arrow key to scroll through the previous commands. This will save
    you many keystrokes if you need to run the same commands over and over again.
    If you scroll too far, use the down-arrow key to scroll back.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: FILE EXTENSIONS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Unfortunately, Windows and macOS hide file extensions by default in the Windows
    Explorer or macOS Finder, respectively. This can make it harder to work with Python
    scripts and the Anaconda Prompt, as they will require you to refer to files including
    their extensions. When working with Excel, showing file extensions also helps
    you understand whether you’re dealing with the default xlsx file, a macro-enabled
    xlsm file, or any of the other Excel file formats. Here is how you make the file
    extensions visible:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Open a File Explorer and click on the View tab. Under the Show/Hide group, activate
    the “File name extensions” checkbox.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Open the Finder and go to Preferences by hitting Command-, (Command-comma).
    On the Advanced tab, check the box next to “Show all filename extensions.”
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: And that’s already it! You are now able to fire up the Anaconda Prompt and run
    commands in the desired directory. You’ll be using this right away in the next
    section, where I’ll show you how to start an interactive Python session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python REPL: An Interactive Python Session'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start an interactive Python session by running the `python` command
    on an Anaconda Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base) C:\Users\felix>``python` `Python 3.8.5 (default, Sep 3 2020, 21:29:08)
    [...] :: Anaconda, Inc. on win32 Type "help", "copyright", "credits" or "license"
    for more information. >>>`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The text that gets printed in a Terminal on macOS will slightly differ, but
    otherwise, it works the same. This book is based on Python 3.8—if you would like
    to use a newer version of Python, make sure to consult the [book’s home page](https://xlwings.org/book)
    for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: ANACONDA PROMPT NOTATION
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Going forward, I will start lines of code with `(base)>` to denote that they
    are typed into an Anaconda Prompt. For example, to launch an interactive Python
    interpreter, I will write:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `python`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'which on Windows will look similar to this:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base) C:\Users\felix>` `python`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and on macOS similar to this (remember, on macOS, the Terminal is your Anaconda
    Prompt):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base) felix@MacBook-Pro ~ %` `python`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s play around a bit! Note that `>>>` in an interactive session means that
    Python expects your input; you don’t have to type this in. Follow along by typing
    in each line that starts with `>>>` and confirm with the Enter key:'
  prefs: []
  type: TYPE_NORMAL
- en: '`>>>` `3 + 4` `7 >>>` `"python " * 3` `''python python python ''`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This interactive Python session is also referred to as Python REPL, which stands
    for read-eval-print loop: Python reads your input, evaluates it, and prints the
    result instantly while waiting for your next input. Remember the Zen of Python
    that I mentioned in the previous chapter? You can now read the full version to
    get some insight into the guiding principles of Python (smile included). Simply
    run this line by hitting Enter after typing it in:'
  prefs: []
  type: TYPE_NORMAL
- en: '`>>>` `import this`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To exit out of your Python session, type `quit()` followed by the Enter key.
    Alternatively, hit Ctrl+Z on Windows, then hit the Enter key. On macOS, simply
    hit Ctrl-D—no need to press Enter.
  prefs: []
  type: TYPE_NORMAL
- en: Having exited the Python REPL, it’s a good moment to play around with Conda
    and pip, the package managers that come with the Anaconda installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Package Managers: Conda and pip'
  prefs: []
  type: TYPE_NORMAL
- en: 'I already said a few words about pip, Python’s package manager in the previous
    chapter: pip takes care of downloading, installing, updating, and uninstalling
    Python packages as well as their dependencies and subdependencies. While Anaconda
    works with pip, it has a built-in alternative package manager called Conda. One
    advantage of Conda is that it can install more than just Python packages, including
    additional versions of the Python interpreter. As a short recap: packages add
    additional functionality to your Python installation that is not covered by the
    standard library. pandas, which I will properly introduce in [Chapter 5](index_split_015.html#filepos482650),
    is an example of such a package. Since it comes preinstalled in Anaconda’s Python
    installation, you don’t have to install it manually.'
  prefs: []
  type: TYPE_NORMAL
- en: CONDA VS. PIP
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With Anaconda, you should install everything you can via Conda and only use
    pip to install those packages that Conda can’t find. Otherwise, Conda may overwrite
    files that were previously installed with pip.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Table 2-2](#filepos120926) gives you an overview of the commands that you
    will use most often. These commands have to be typed into an Anaconda Prompt and
    will allow you to install, update, and uninstall your third-party packages.'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2-2\. Conda and pip commands
  prefs: []
  type: TYPE_NORMAL
- en: '|  Action  |  Conda  |  pip  |'
  prefs: []
  type: TYPE_TB
- en: '|  List all installed packages  |   `conda list` |   `pip freeze` |'
  prefs: []
  type: TYPE_TB
- en: '|  Install the latest package version  |   `conda install` `package` |   `pip
    install` `package` |'
  prefs: []
  type: TYPE_TB
- en: '|  Install a specific package version  |   `conda install` `package=1.0.0`
    |   `pip install` `package==1.0.0` |'
  prefs: []
  type: TYPE_TB
- en: '|  Update a package  |   `conda update` `package` |   `pip install --upgrade`
    `package` |'
  prefs: []
  type: TYPE_TB
- en: '|  Uninstall a package  |   `conda remove` `package` |   `pip uninstall` `package`
    |'
  prefs: []
  type: TYPE_TB
- en: 'For example, to see what packages are already available in your Anaconda distribution,
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda list`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Whenever this book requires a package that is not included in the Anaconda
    installation, I will point this out explicitly and show you how to install it.
    However, it may be a good idea to take care of installing the missing packages
    now so that you won’t need to deal with it later on. Let’s first install plotly
    and xlutils, the packages that are available via Conda:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `conda install plotly xlutils`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'After running this command, Conda will show you what it’s going to do and requires
    you to confirm by typing `y` and hitting Enter. Once done, you can install pyxlsb
    and pytrends with pip, as these packages are not available via Conda:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `pip install pyxlsb pytrends`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Unlike Conda, pip will install the packages right away when you hit Enter without
    the need to confirm.
  prefs: []
  type: TYPE_NORMAL
- en: PACKAGE VERSIONS
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Many Python packages are updated often and sometimes introduce changes that
    aren’t backward compatible. This will likely break some of the examples in this
    book. I will try to keep up with these changes and post fixes on the [book’s home
    page](https://xlwings.org/book), but you could also create a Conda environment
    that uses the same versions of the packages that I was using when writing this
    book. I will introduce Conda environments in the next section, and you will find
    detailed instructions on how to create a Conda environment with the specific packages
    in [Appendix A](index_split_029.html#filepos1810552).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You know now how to use the Anaconda Prompt to start a Python interpreter and
    install additional packages. In the next section, I’ll explain what `(base)` at
    the beginning of your Anaconda Prompt means.
  prefs: []
  type: TYPE_NORMAL
- en: Conda Environments
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have been wondering why the Anaconda Prompt shows `(base)` at the beginning
    of each input line. It’s the name of the active Conda environment. A Conda environment
    is a separate “Python world” with a specific version of Python and a set of installed
    packages with specific versions. Why is this necessary? When you start to work
    on different projects in parallel, they will have different requirements: one
    project may use Python 3.8 with pandas 0.25.0, while another project may use Python
    3.9 with pandas 1.0.0\. Code that is written for pandas 0.25.0 will often require
    changes to run with pandas 1.0.0, so you can’t just upgrade your Python and pandas
    versions without making changes to your code. Using a Conda environment for each
    project makes sure that every project runs with the correct dependencies. While
    Conda environments are specific to the Anaconda distribution, the concept exists
    with every Python installation under the name virtual environment. Conda environments
    are more powerful because they make it easier to deal with different versions
    of Python itself, not just packages.'
  prefs: []
  type: TYPE_NORMAL
- en: While you work through this book, you will not have to change your Conda environment,
    as we’ll always be using the default `base` environment. However, when you start
    building real projects, it’s good practice to use one Conda or virtual environment
    for each project to avoid any potential conflicts between their dependencies.
    Everything you need to know about dealing with multiple Conda environments is
    explained in [Appendix A](index_split_029.html#filepos1810552). There you will
    also find instructions on creating a Conda environment with the exact versions
    of the packages that I used to write this book. This will allow you to run the
    examples in this book as-is for many years to come. The other option is to watch
    the [book’s home page](https://xlwings.org/book) for potential changes required
    for newer versions of Python and the packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having resolved the mystery around Conda environments, it’s time to introduce
    the next tool, one that we will use intensely in this book: Jupyter notebooks!'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, I showed you how to start an interactive Python session
    from an Anaconda Prompt. This is useful if you want a bare-bones environment to
    test out something simple. For the majority of your work, however, you want an
    environment that is easier to use. For example, going back to previous commands
    and displaying charts is hard with a Python REPL running in an Anaconda Prompt.
    Fortunately, Anaconda comes with much more than just the Python interpreter: it
    also includes Jupyter notebooks, which have emerged as one of the most popular
    ways to run Python code in a data science context. Jupyter notebooks allow you
    to tell a story by combining executable Python code with formatted text, pictures,
    and charts into an interactive notebook that runs in your browser. They are beginner-friendly
    and thus especially useful for the first steps of your Python journey. They are,
    however, also hugely popular for teaching, prototyping, and researching, as they
    facilitate reproducible research.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Jupyter notebooks have become a serious competitor to Excel as they cover roughly
    the same use case as a workbook: you can quickly prepare, analyze, and visualize
    data. The difference to Excel is that all of it happens by writing Python code
    instead of clicking around in Excel with your mouse. Another advantage is that
    Jupyter notebooks don’t mix data and business logic: the Jupyter notebook holds
    your code and charts, whereas you typically consume data from an external CSV
    file or a database. Having Python code visible in your notebook makes it easy
    to see what’s going on compared to Excel, where the formulas are hidden away behind
    a cell’s value. Jupyter notebooks are also easy to run both locally and on a remote
    server. Servers usually have more power than your local machine and can run your
    code fully unattended, something that is hard to do with Excel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I’ll show you the very basics of how you run and navigate
    a Jupyter notebook: we will learn about notebook cells and see what the difference
    is between the edit and command mode. We’ll then understand why the run order
    of cells matters before we wrap this section up by learning how to properly shut
    down notebooks. Let’s get started with our first notebook!'
  prefs: []
  type: TYPE_NORMAL
- en: Running Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: 'On your Anaconda Prompt, change to the directory of your companion repository,
    then launch a Jupyter notebook server:'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `jupyter notebook`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This will automatically open your browser and show the Jupyter dashboard with
    the files in the directory from where you were running the command. On the top
    right of the Jupyter dashboard, click on New, then select Python 3 from the dropdown
    list (see [Figure 2-2](#filepos133397)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00071.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-2\. The Jupyter dashboard
  prefs: []
  type: TYPE_NORMAL
- en: This will open a new browser tab with your first empty Jupyter notebook as shown
    in [Figure 2-3](#filepos133850).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00079.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-3\. An empty Jupyter notebook
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good habit to click on Untitled1 next to the Jupyter logo to rename your
    workbook into something more meaningful, e.g., first_notebook. The lower part
    of [Figure 2-3](#filepos133850) shows a notebook cell—move on to the next section
    to learn more about them!
  prefs: []
  type: TYPE_NORMAL
- en: Notebook Cells
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Figure 2-3](index_split_008.html#filepos133850), you see an empty cell
    with a blinking cursor. If the cursor doesn’t blink, click into the cell with
    your mouse, i.e., to the right of `In [ ]`. Now repeat the exercise from the last
    section: type in `3 + 4` and run the cell by either clicking on the Run button
    in the menu bar at the top or—much easier—by hitting Shift+Enter. This will run
    the code in the cell, print the result below the cell and jump to the next cell.
    In this case, it inserts an empty cell below as we only have one cell so far.
    Going into a bit more detail: while a cell is calculating, it shows `In [*]` and
    when it’s done, the asterisk turns into a number, e.g., `In [1]`. Below the cell
    you will have the corresponding output labeled with the same number: `Out [1]`.
    Every time you run a cell, the counter increases by one, which helps you to see
    in which order the cells were executed. Going forward, I will show the code samples
    in this format, e.g., the REPL example from before looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``1``]:``3``+``4`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[1]: 7`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This notation allows you to follow along easily by typing `3 + 4` into a notebook
    cell. When running it by hitting Shift+Enter, you will get what I show as output
    under `Out[1]`. If you read this book in an electronic format supporting colors,
    you will notice that the input cell formats strings, numbers, and so on with different
    colors to make it easier to read. This is called syntax highlighting.
  prefs: []
  type: TYPE_NORMAL
- en: CELL OUTPUT
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If the last line in a cell returns a value, it is automatically printed by the
    Jupyter notebook under `Out [ ]`. However, when you use the `print` function or
    when you get an exception, it is printed directly below the `In` cell without
    the `Out [ ]` label. The code samples in this book are formatted to reflect this
    behavior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Cells can have different types, two of which are of interest to us:'
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs: []
  type: TYPE_NORMAL
- en: This is the default type. Use it whenever you want to run Python code.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Markdown
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is a syntax that uses standard text characters for formatting and can
    be used to include nicely formatted explanations and instructions in your notebook.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To change a cell’s type to Markdown, select the cell, then choose Markdown
    in the cell mode dropdown (see [Figure 2-3](index_split_008.html#filepos133850)).
    I’ll show you a keyboard shortcut to change the cell mode in [Table 2-3](#filepos141200).
    After changing an empty cell into a Markdown cell, type in the following text,
    which explains a few Markdown rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '``# This is a first-level heading  ## This is a second-level heading  You can
    make your text *italic* or **bold** or `monospaced`.  * This is a bullet point
    * This is another bullet point``'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After hitting Shift+Enter, the text will be rendered into nicely formatted HTML.
    At this point, your notebook should look like what’s in [Figure 2-4](#filepos139569).
    Markdown cells also allow you to include images, videos, or formulas; see the
    [Jupyter notebook docs](https://oreil.ly/elGTF).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-4\. The notebook after running a code cell and a Markdown cell
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know about the code and Markdown cell types, it’s time to learn
    an easier way to navigate between cells: the next section introduces the edit
    and command mode along with a few keyboard shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: Edit vs. Command Mode
  prefs: []
  type: TYPE_NORMAL
- en: 'When you interact with cells in a Jupyter notebook, you are either in the edit
    mode or in the command mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking into a cell starts the edit mode: the border around the selected cell
    turns green, and the cursor in the cell is blinking. Instead of clicking into
    a cell, you can also hit Enter when the cell is selected.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Command mode
  prefs: []
  type: TYPE_NORMAL
- en: To switch into command mode, hit the Escape key; the border around the selected
    cell will be blue, and there won’t be any blinking cursor. The most important
    keyboard shortcuts that you can use while being in command mode are shown in [Table 2-3](#filepos141200).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table 2-3\. Keyboard shortcuts (command mode)
  prefs: []
  type: TYPE_NORMAL
- en: '|  Shortcut  |  Action  |'
  prefs: []
  type: TYPE_TB
- en: '|  Shift+Enter  |  Run the cell (works also in edit mode)  |'
  prefs: []
  type: TYPE_TB
- en: '|  ↑ ( `up-arrow`) |  Move cell selector up  |'
  prefs: []
  type: TYPE_TB
- en: '|  ↓ ( `down-arrow`) |  Move cell selector down  |'
  prefs: []
  type: TYPE_TB
- en: '|   `b` |  Insert a new cell  below the current cell |'
  prefs: []
  type: TYPE_TB
- en: '|   `a` |  Insert a new cell  above the current cell |'
  prefs: []
  type: TYPE_TB
- en: '|   `dd` |  Delete the current cell (type two times the letter  `d`) |'
  prefs: []
  type: TYPE_TB
- en: '|   `m` |  Change cell type to Markdown  |'
  prefs: []
  type: TYPE_TB
- en: '|   `y` |  Change cell type to code  |'
  prefs: []
  type: TYPE_TB
- en: 'Knowing these keyboard shortcuts will allow you to work with notebooks efficiently
    without having to switch between keyboard and mouse all the time. In the next
    section, I’ll show you a common gotcha that you need to be aware of when using
    Jupyter notebooks: the importance of running cells in order.'
  prefs: []
  type: TYPE_NORMAL
- en: Run Order Matters
  prefs: []
  type: TYPE_NORMAL
- en: 'As easy and user-friendly notebooks are to get started, they also make it easy
    to get into confusing states if you don’t run cells sequentially. Assume you have
    the following notebook cells that are run from top to bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``2``]:``a``=``1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``3``]:``a`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[3]: 1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``4``]:``a``=``2`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Cell `Out[3]` prints the value `1` as expected. However, if you now go back
    and run `In[3]` again, you will end up in this situation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`In``[``2``]:``a``=``1`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``5``]:``a`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[5]: 2`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`In``[``4``]:``a``=``2`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Out[5]` shows now the value `2`, which is probably not what you would expect
    when you read the notebook from the top, especially if cell `In[4]` would be farther
    away, requiring you to scroll down. To prevent such cases, I would recommend that
    you rerun not just a single cell, but all of its previous cells, too. Jupyter
    notebooks offer you an easy way to accomplish this under the menu Cell > Run all
    above. After these words of caution, let’s see how you shut down a notebook properly!'
  prefs: []
  type: TYPE_NORMAL
- en: Shutting Down Jupyter Notebooks
  prefs: []
  type: TYPE_NORMAL
- en: Every notebook runs in a separate Jupyter kernel. A kernel is the “engine” that
    runs the Python code you type into a notebook cell. Every kernel uses resources
    from your operating system in the form of CPU and RAM. Therefore, when you close
    a notebook, you should also shut down its kernel so that the resources can be
    used again by other tasks—this will prevent your system from slowing down. The
    easiest way to accomplish this is by closing a notebook via File > Close and Halt.
    If you would just close the browser tab, the kernel will not be shut down automatically.
    Alternatively, on the Jupyter dashboard, you can close running notebooks from
    the tab Running.
  prefs: []
  type: TYPE_NORMAL
- en: To shut down the whole Jupyter server, click the Quit button at the top right
    of the Jupyter dashboard. If you have already closed your browser, you can type
    Ctrl+C twice in the Anaconda Prompt where the notebook server is running or close
    the Anaconda Prompt altogether.
  prefs: []
  type: TYPE_NORMAL
- en: JUPYTER NOTEBOOKS IN THE CLOUD
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Jupyter notebooks have become so popular that they are offered as a hosted solution
    by various cloud providers. I am introducing three services here that are all
    free to use. The advantage of these services is that they run instantly and everywhere
    you can access a browser, without the need to install anything locally. You could,
    for example, run the samples on a tablet while reading the first three parts.
    Since [Part IV](index_split_023.html#filepos1235617) requires a local installation
    of Excel, this won’t work there, though.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Binder
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Binder](https://mybinder.org) is a service provided by Project Jupyter, the
    organization behind Jupyter notebooks. Binder is meant to try out the Jupyter
    notebooks from public Git repositories—you don’t store anything on Binder itself
    and hence you don’t need to sign up or log in to use it.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Kaggle Notebooks
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Kaggle](https://kaggle.com) is a platform for data science. As it hosts data
    science competitions, you get easy access to a huge collection of datasets. Kaggle
    has been part of Google since 2017.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Google Colab
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Google Colab](https://oreil.ly/4PLcS) (short for Colaboratory) is Google’s
    notebook platform. Unfortunately, the majority of the Jupyter notebook keyboard
    shortcuts don’t work, but you can access files on your Google Drive, including
    Google Sheets.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: The easiest way to run the Jupyter notebooks of the companion repository in
    the cloud is by going to its [Binder URL](https://oreil.ly/MAjJK). You will be
    working on a copy of the companion repository, so feel free to edit and break
    stuff as you like!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that know how to work with Jupyter notebooks, let’s move on and learn about
    how to write and run standard Python scripts. To do this, we’ll use Visual Studio
    Code, a powerful text editor with great Python support.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll install and configure Visual Studio Code (VS Code), a
    free and open source text editor from Microsoft. After introducing its most important
    components, we’ll write a first Python script and run it in a few different ways.
    To begin with, however, I will explain when we’ll use Jupyter notebooks as opposed
    to running Python scripts and why I chose VS Code for this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Jupyter notebooks are amazing for interactive workflows like researching,
    teaching, and experimenting, they are less ideal if you want to write Python scripts
    geared toward a production environment that do not need the visualization capabilities
    of notebooks. Also, more complex projects that involve many files and developers
    are hard to manage with Jupyter notebooks. In this case, you want to use a proper
    text editor to write and run classic Python files. In theory, you could use just
    about any text editor (even Notepad would work), but in reality, you want one
    that “understands” Python. That is, a text editor that supports at least the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax highlighting
  prefs: []
  type: TYPE_NORMAL
- en: The editor colors words differently based on whether they represent a function,
    a string, a number, etc. This makes it much easier to read and understand the
    code.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Autocomplete
  prefs: []
  type: TYPE_NORMAL
- en: Autocomplete or IntelliSense, as Microsoft calls it, automatically suggests
    text components so that you have to type less, which leads to fewer errors.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And soon enough, you have other needs that you would like to access directly
    from within the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Run code
  prefs: []
  type: TYPE_NORMAL
- en: Switching back and forth between the text editor and an external Anaconda Prompt
    (i.e., Command Prompt or Terminal) to run your code can be a hassle.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Debugger
  prefs: []
  type: TYPE_NORMAL
- en: A debugger allows you to step through the code line by line to see what’s going
    on.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Version control
  prefs: []
  type: TYPE_NORMAL
- en: If you use Git to version control your files, it makes sense to handle the Git-related
    stuff directly in the editor so you don’t have to switch back and forth between
    two applications.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There is a wide spectrum of tools that can help you with all that, and as usual,
    every developer has different needs and preferences. Some may indeed want to use
    a no-frills text editor together with an external Command Prompt. Others may prefer
    an integrated development environment (IDE): IDEs try to put everything you’ll
    ever need into a single tool, which can make them bloated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I chose VS Code for this book as it has quickly become one of the most popular
    code editors among developers after its initial release in 2015: in the [StackOverflow
    Developer Survey 2019](https://oreil.ly/savHe), it came out as the most popular
    development environment. What makes VS Code such a popular tool? In essence, it’s
    the right mix between a bare-bones text editor and a full-blown IDE: VS Code is
    a mini IDE that comes with everything you need for programming out of the box,
    but not more:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform
  prefs: []
  type: TYPE_NORMAL
- en: VS Code runs on Windows, macOS, and Linux. There are also cloud-hosted versions
    like [GitHub Codespaces](https://oreil.ly/bDGWE).
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Integrated tools
  prefs: []
  type: TYPE_NORMAL
- en: VS Code comes with a debugger, support for Git version control, and has an integrated
    Terminal that you can use as Anaconda Prompt.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extensions
  prefs: []
  type: TYPE_NORMAL
- en: Everything else, e.g., Python support, is added via extensions that can be installed
    with a single click.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Lightweight
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your operating system, the VS Code installer is just 50–100 MB.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: VISUAL STUDIO CODE VS. VISUAL STUDIO
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Don’t confuse Visual Studio Code with Visual Studio, the IDE! While you could
    use Visual Studio for Python development (it comes with PTVS, the Python Tools
    for Visual Studio), it’s a really heavy installation and is traditionally used
    to work with .NET languages like C#.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To find out if you agree with my praise for VS Code, there is no better way
    than installing it and trying it out yourself. The next section gets you started!
  prefs: []
  type: TYPE_NORMAL
- en: Installation and Configuration
  prefs: []
  type: TYPE_NORMAL
- en: Download the installer from the [VS Code home page](https://oreil.ly/26Jfa).
    For the latest installation instructions, please always refer to the official
    docs.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs: []
  type: TYPE_NORMAL
- en: Double-click the installer and accept all defaults. Then open VS Code via Windows
    Start menu, where you will find it under Visual Studio Code.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click the ZIP file to unpack the app. Then drag and drop Visual Studio
    Code.app into the Applications folder: you can now start it from the Launchpad.
    If the application doesn’t start, go to System Preferences > Security & Privacy
    > General and choose Open Anyway.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you open VS Code for the first time, it looks like [Figure 2-5](#filepos160919).
    Note that I have switched from the default dark theme to a light theme to make
    the screenshots easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-5\. Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: Activity Bar
  prefs: []
  type: TYPE_NORMAL
- en: 'On the lefthand side, you see the Activity Bar with the following icons from
    top to bottom:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explorer
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Source Control
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Status Bar
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the editor, you have the Status Bar. Once you have the configuration
    complete and edit a Python file, you will see the Python interpreter show up there.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Command Palette
  prefs: []
  type: TYPE_NORMAL
- en: 'You can show the Command Palette via F1 or with the keyboard shortcut Ctrl+Shift+P
    (Windows) or Command-Shift-P (macOS). If you are unsure about something, your
    first stop should always be the Command Palette, as it gives you easy access to
    almost everything you can do with VS Code. For example, if you are looking for
    keyboard shortcuts, type in `keyboard shortcuts`, select the entry “Help: Keyboard
    Shortcuts Reference,” and hit Enter.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'VS Code is a great text editor out of the box, but to make it work nicely with
    Python, there are a few more things to configure: click on the Extensions icon
    on the Activity Bar and search for Python. Install the official Python extension
    that shows Microsoft as the author. It will take a moment to install and once
    done, you may need to click the Reload Required button to finish—alternatively,
    you could also restart VS Code completely. Finalize the configuration according
    to your platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Command Palette and type `default shell`. Select the entry that reads
    “Terminal: Select Default Shell” and hit Enter. In the dropdown menu, select Command
    Prompt and confirm by hitting Enter. This is required because otherwise VS Code
    can’t properly activate Conda environments.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: macOS
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Command Palette and type `shell command`. Select the entry that reads
    “Shell Command: Install ‘code’ command in PATH” and hit Enter. This is required
    so that you can start VS Code conveniently from the Anaconda Prompt (i.e., the
    Terminal).'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that VS Code is installed and configured, let’s use it to write and run
    our first Python script!
  prefs: []
  type: TYPE_NORMAL
- en: Running a Python Script
  prefs: []
  type: TYPE_NORMAL
- en: 'While you can open VS Code via the Start menu on Windows or Launchpad on macOS,
    it’s often faster to open VS Code from the Anaconda Prompt, where you are able
    to launch it via the `code` command. Therefore, open a new Anaconda Prompt and
    change into the directory where you want to work by using the `cd` command, then
    instruct VS Code to open the current directory (represented by the dot):'
  prefs: []
  type: TYPE_NORMAL
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `code .`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Starting VS Code this way will cause the Explorer on the Activity Bar to automatically
    show the contents of the directory you were in when you ran the `code` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you could also open a directory via File > Open Folder (on macOS:
    File > Open), but this might cause permission errors on macOS when we start using
    xlwings in Part IV. When you hover over the file list in the Explorer on the Activity
    Bar, you will see the New File button appear as shown in [Figure 2-6](#filepos167792).
    Click on New File and call your file hello_world.py, then hit Enter. Once it opens
    in the editor, write the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print``(``"hello world!"``)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Remember that Jupyter notebooks conveniently print the return value of the last
    line automatically? When you run a traditional Python script, you need to tell
    Python explicitly what to print, which is why you need to use the `print` function
    here. In the Status Bar, you should now see your Python version, e.g., “Python
    3.8.5 64-bit (conda).” If you click on it, the Command Palette will open and allow
    you to select a different Python interpreter if you have more than one (this includes
    Conda environments). Your set up should now look like the one in [Figure 2-6](#filepos167792).
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/00018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2-6\. VS Code with hello_world.py open
  prefs: []
  type: TYPE_NORMAL
- en: Before we can run the script, make sure to save it by hitting Ctrl+S on Windows
    or Command-S on macOS. With Jupyter notebooks, we could simply select a cell and
    hit Shift+Enter to run that cell. With VS Code, you can run your code from either
    the Anaconda Prompt or by clicking the Run button. Running Python code from the
    Anaconda Prompt is how you most likely run scripts that are on a server, so it’s
    important to know how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Anaconda Prompt
  prefs: []
  type: TYPE_NORMAL
- en: 'Open an Anaconda Prompt, `cd` into the directory with the script, then run
    the script like so:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `python hello_world.py`
    `hello world!`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The last line is the output that is printed by the script. Note that if you
    are not in the same directory as your Python file, you need to use the full path
    to your Python file:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `python C:\Users\``username``\python-for-excel\hello_world.py` `hello
    world!`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: LONG FILE PATHS ON THE ANACONDA PROMPT
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A convenient way to deal with long file paths is to drag and drop the file onto
    your Anaconda Prompt. This will write the full path wherever the cursor is.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Anaconda Prompt in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t need to switch away from VS Code to work with the Anaconda Prompt:
    VS Code has an integrated Terminal that you can show via the keyboard shortcut
    Ctrl+` or via View > Terminal. Since it opens in the project folder, you don’t
    need to change the directory first:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`(base)>` `python hello_world.py` `hello world!`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run Button in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: 'In VS code, there is an easy way to run your code without having to use the
    Anaconda Prompt: when you edit a Python file, you will see a green Play icon at
    the top right—this is the Run File button, as shown in [Figure 2-6](#filepos167792).
    Clicking it will open the Terminal at the bottom automatically and run the code
    there.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: OPENING FILES IN VS CODE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'VS Code has an unconventional default behavior when you single-click a file
    in the Explorer (Activity Bar): the file is opened in preview mode, which means
    that the next file that you single-click will replace it in the tab unless you
    have made some changes to the file. If you want to switch off the single-click
    behavior (so a single-click will select a file and a double-click will open it),
    go to Preferences > Settings (Ctrl+, on Windows or Command-, on macOS) and set
    the dropdown under Workbench > “List: Open Mode” to “doubleClick.”'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At this point, you know how to create, edit, and run Python scripts in VS Code.
    VS Code can do quite a bit more, though: in [Appendix B](index_split_030.html#filepos1820886),
    I explain how to use the debugger and how you can run Jupyter notebooks with VS
    Code.'
  prefs: []
  type: TYPE_NORMAL
- en: ALTERNATIVE TEXT EDITORS AND IDES
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tools are something individual, and just because this book is based on Jupyter
    notebooks and VS Code doesn’t mean you shouldn’t have a look at other options.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Some popular text editors include:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sublime](https://oreil.ly/9FVLD) is a fast commercial text editor.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Notepad++
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Notepad++](https://oreil.ly/7Ksk9) is free and has been around for a very
    long time but is Windows-only.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Vim or Emacs
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Vim](https://vim.org) or [Emacs](https://oreil.ly/z__Kz) may not be the best
    options for beginner programmers due to their steep learning curve, but they are
    very popular among professionals. The rivalry between the two free editors is
    so big that Wikipedia describes it as the “editor war.”'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Popular IDEs include:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PyCharm
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [PyCharm](https://oreil.ly/OrIj-) community edition is free and very powerful,
    while the professional edition is commercial and adds support for scientific tools
    and web development.
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spyder
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Spyder](https://spyder-ide.org) is similar to MATLAB’s IDE and comes with
    a variable explorer. Since it’s included in the Anaconda distribution, you can
    give it a try by running the following on an Anaconda Prompt: `(base)>` `spyder`.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: JupyterLab
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[JupyterLab](https://jupyter.org) is a web-based IDE developed by the team
    behind Jupyter notebooks and can, of course, run Jupyter notebooks. Other than
    that, it tries to integrate everything else you need for your data science tasks
    into a single tool.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wing Python IDE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Wing Python IDE](https://wingware.com) is an IDE that has been around for
    a long time. There are free simplified versions and a commercial version called
    Wing Pro.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Komodo IDE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Komodo IDE](https://oreil.ly/Cdtab) is a commercial IDE developed by ActiveState
    and supports many other languages apart from Python.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: PyDev
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PyDev](https://pydev.org) is a Python IDE based on the popular Eclipse IDE.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I showed you how to install and use the tools we will work
    with: the Anaconda Prompt, Jupyter notebooks, and VS Code. We also ran a tiny
    bit of Python code in a Python REPL, in a Jupyter notebook, and as script in VS
    Code.'
  prefs: []
  type: TYPE_NORMAL
- en: I do recommend you get comfortable with the Anaconda Prompt, as it will give
    you a lot of power once you get used to it. The ability to work with Jupyter notebooks
    in the cloud is also very comfortable, as it allows you to run the code samples
    of the first three parts of this book in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: With a working development environment, you are now ready to tackle the next
    chapter, where you’ll learn enough Python to be able to follow the rest of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: '[1  ](index_split_008.html#filepos100206) 32-bit systems only exist with Windows
    and have become rare. An easy way to find out which Windows version you have is
    by going to the C:\ drive in the File Explorer. If you can see both the Program
    Files and Program Files (x86) folders, you are on a 64-bit version of Windows.
    If you can only see the Program Files folder, you are on a 32-bit system.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
