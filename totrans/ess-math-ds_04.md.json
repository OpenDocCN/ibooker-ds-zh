["```py\nv = [3, 2]\nprint(v)\n```", "```py\nimport numpy as np\nv = np.array([3, 2])\nprint(v)\n```", "```py\nimport numpy as np\nv = np.array([4, 1, 2])\nprint(v)\n```", "```py\nimport numpy as np\nv = np.array([6, 1, 5, 8, 3])\nprint(v)\n```", "```py\nfrom numpy import array\n\nv = array([3,2])\nw = array([2,-1])\n\n# sum the vectors\nv_plus_w = v + w\n\n# display summed vector\nprint(v_plus_w) # [5, 1]\n```", "```py\nfrom numpy import array\n\nv = array([3,1])\n\n# scale the vector\nscaled_v = 2.0 * v\n\n# display scaled vector\nprint(scaled_v) # [6 2]\n```", "```py\nfrom numpy import array\n\n# compose basis matrix with i-hat and j-hat\nbasis = array(\n    [[3, 0],\n     [0, 2]]\n )\n\n# declare vector v\nv = array([1,1])\n\n# create new vector\n# by transforming v with dot product\nnew_v = basis.dot(v)\n\nprint(new_v) # [3, 2]\n```", "```py\nfrom numpy import array\n\n# Declare i-hat and j-hat\ni_hat = array([2, 0])\nj_hat = array([0, 3])\n\n# compose basis matrix using i-hat and j-hat\n# also need to transpose rows into columns\nbasis = array([i_hat, j_hat]).transpose()\n\n# declare vector v\nv = array([1,1])\n\n# create new vector\n# by transforming v with dot product\nnew_v = basis.dot(v)\n\nprint(new_v) # [2, 3]\n```", "```py\nfrom numpy import array\n\n# Declare i-hat and j-hat\ni_hat = array([2, 0])\nj_hat = array([0, 3])\n\n# compose basis matrix using i-hat and j-hat\n# also need to transpose rows into columns\nbasis = array([i_hat, j_hat]).transpose()\n\n# declare vector v 0\nv = array([2,1])\n\n# create new vector\n# by transforming v with dot product\nnew_v = basis.dot(v)\n\nprint(new_v) # [4, 3]\n```", "```py\nfrom numpy import array\n\n# Declare i-hat and j-hat\ni_hat = array([2, 3])\nj_hat = array([2, -1])\n\n# compose basis matrix using i-hat and j-hat\n# also need to transpose rows into columns\nbasis = array([i_hat, j_hat]).transpose()\n\n# declare vector v 0\nv = array([2,1])\n\n# create new vector\n# by transforming v with dot product\nnew_v = basis.dot(v)\n\nprint(new_v) # [6, 5]\n```", "```py\nfrom numpy import array\n\n# Transformation 1\ni_hat1 = array([0, 1])\nj_hat1 = array([-1, 0])\ntransform1 = array([i_hat1, j_hat1]).transpose()\n\n# Transformation 2\ni_hat2 = array([1, 0])\nj_hat2 = array([1, 1])\ntransform2 = array([i_hat2, j_hat2]).transpose()\n\n# Combine Transformations\ncombined = transform2 @ transform1\n\n# Test\nprint(\"COMBINED MATRIX:\\n {}\".format(combined))\n\nv = array([1, 2])\nprint(combined.dot(v))  # [-1, 1]\n```", "```py\nrotated = transform1.dot(v)\nsheered = transform2.dot(rotated)\nprint(sheered) # [-1, 1]\n```", "```py\nfrom numpy import array\n\n# Transformation 1\ni_hat1 = array([0, 1])\nj_hat1 = array([-1, 0])\ntransform1 = array([i_hat1, j_hat1]).transpose()\n\n# Transformation 2\ni_hat2 = array([1, 0])\nj_hat2 = array([1, 1])\ntransform2 = array([i_hat2, j_hat2]).transpose()\n\n# Combine Transformations, apply sheer first and then rotation\ncombined = transform1 @ transform2\n\n# Test\nprint(\"COMBINED MATRIX:\\n {}\".format(combined))\n\nv = array([1, 2])\nprint(combined.dot(v)) # [-2, 3]\n```", "```py\nfrom numpy.linalg import det\nfrom numpy import array\n\ni_hat = array([3, 0])\nj_hat = array([0, 2])\n\nbasis = array([i_hat, j_hat]).transpose()\n\ndeterminant = det(basis)\n\nprint(determinant) # prints 6.0\n```", "```py\nfrom numpy.linalg import det\nfrom numpy import array\n\ni_hat = array([1, 0])\nj_hat = array([1, 1])\n\nbasis = array([i_hat, j_hat]).transpose()\n\ndeterminant = det(basis)\n\nprint(determinant) # prints 1.0\n```", "```py\nfrom numpy.linalg import det\nfrom numpy import array\n\ni_hat = array([-2, 1])\nj_hat = array([1, 2])\n\nbasis = array([i_hat, j_hat]).transpose()\n\ndeterminant = det(basis)\n\nprint(determinant) # prints -5.0\n```", "```py\nfrom numpy.linalg import det\nfrom numpy import array\n\ni_hat = array([-2, 1])\nj_hat = array([3, -1.5])\n\nbasis = array([i_hat, j_hat]).transpose()\n\ndeterminant = det(basis)\n\nprint(determinant) # prints 0.0\n```", "```py\nfrom sympy import *\n\n# 4x + 2y + 4z = 44\n# 5x + 3y + 7z = 56\n# 9x + 3y + 6z = 72\n\nA = Matrix([\n    [4, 2, 4],\n    [5, 3, 7],\n    [9, 3, 6]\n])\n\n# dot product between A and its inverse\n# will produce identity function\ninverse = A.inv()\nidentity = inverse * A\n\n# prints Matrix([[-1/2, 0, 1/3], [11/2, -2, -4/3], [-2, 1, 1/3]])\nprint(\"INVERSE: {}\".format(inverse))\n\n# prints Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\nprint(\"IDENTITY: {}\".format(identity))\n```", "```py\nfrom numpy import array\nfrom numpy.linalg import inv\n\n# 4x + 2y + 4z = 44\n# 5x + 3y + 7z = 56\n# 9x + 3y + 6z = 72\n\nA = array([\n    [4, 2, 4],\n    [5, 3, 7],\n    [9, 3, 6]\n])\n\nB = array([\n    44,\n    56,\n    72\n])\n\nX = inv(A).dot(B)\n\nprint(X) # [ 2\\. 34\\. -8.]\n```", "```py\nfrom sympy import *\n\n# 4x + 2y + 4z = 44\n# 5x + 3y + 7z = 56\n# 9x + 3y + 6z = 72\n\nA = Matrix([\n    [4, 2, 4],\n    [5, 3, 7],\n    [9, 3, 6]\n])\n\nB = Matrix([\n    44,\n    56,\n    72\n])\n\nX = A.inv() * B\n\nprint(X) # Matrix([[2], [34], [-8]])\n```", "```py\nfrom numpy import array, diag\nfrom numpy.linalg import eig, inv\n\nA = array([\n    [1, 2],\n    [4, 5]\n])\n\neigenvals, eigenvecs = eig(A)\n\nprint(\"EIGENVALUES\")\nprint(eigenvals)\nprint(\"\\nEIGENVECTORS\")\nprint(eigenvecs)\n\n\"\"\"\nEIGENVALUES\n[-0.46410162  6.46410162]\n\nEIGENVECTORS\n[[-0.80689822 -0.34372377]\n [ 0.59069049 -0.9390708 ]]\n\"\"\"\n```", "```py\nfrom numpy import array, diag\nfrom numpy.linalg import eig, inv\n\nA = array([\n    [1, 2],\n    [4, 5]\n])\n\neigenvals, eigenvecs = eig(A)\n\nprint(\"EIGENVALUES\")\nprint(eigenvals)\nprint(\"\\nEIGENVECTORS\")\nprint(eigenvecs)\n\nprint(\"\\nREBUILD MATRIX\")\nQ = eigenvecs\nR = inv(Q)\n\nL = diag(eigenvals)\nB = Q @ L @ R\n\nprint(B)\n\n\"\"\"\nEIGENVALUES\n[-0.46410162  6.46410162]\n\nEIGENVECTORS\n[[-0.80689822 -0.34372377]\n [ 0.59069049 -0.9390708 ]]\n\nREBUILD MATRIX\n[[1\\. 2.]\n [4\\. 5.]]\n\"\"\"\n```"]