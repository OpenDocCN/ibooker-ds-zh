- en: Chapter 36\. Visualization with Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib has been at the core of scientific visualization in Python for decades,
    but even avid users will admit it often leaves much to be desired. There are several
    complaints about Matplotlib that often come up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A common early complaint, which is now outdated: prior to version 2.0, Matplotlib’s
    color and style defaults were at times poor and looked dated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib’s API is relatively low-level. Doing sophisticated statistical visualization
    is possible, but often requires a *lot* of boilerplate code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib predated Pandas by more than a decade, and thus is not designed for
    use with Pandas `DataFrame` objects. In order to visualize data from a `DataFrame`,
    you must extract each `Series` and often concatenate them together into the right
    format. It would be nicer to have a plotting library that can intelligently use
    the `DataFrame` labels in a plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An answer to these problems is [Seaborn](http://seaborn.pydata.org). Seaborn
    provides an API on top of Matplotlib that offers sane choices for plot style and
    color defaults, defines simple high-level functions for common statistical plot
    types, and integrates with the functionality provided by Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be fair, the Matplotlib team has adapted to the changing landscape: it added
    the `plt.style` tools discussed in [Chapter 34](ch34.xhtml#section-0411-settings-and-stylesheets),
    and Matplotlib is starting to handle Pandas data more seamlessly. But for all
    the reasons just discussed, Seaborn remains a useful add-on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By convention, Seaborn is often imported as `sns`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Full-color figures are available in the [supplemental materials on GitHub](https://oreil.ly/PDSH_GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Seaborn Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea of Seaborn is that it provides high-level commands to create a
    variety of plot types useful for statistical data exploration, and even some statistical
    model fitting.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at a few of the datasets and plot types available in Seaborn.
    Note that all of the following *could* be done using raw Matplotlib commands (this
    is, in fact, what Seaborn does under the hood), but the Seaborn API is much more
    convenient.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms, KDE, and Densities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often in statistical data visualization, all you want is to plot histograms
    and joint distributions of variables. We have seen that this is relatively straightforward
    in Matplotlib (see [Figure 36-1](#fig_0414-visualization-with-seaborn_files_in_output_5_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![output 5 0](assets/output_5_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-1\. Histograms for visualizing distributions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Rather than just providing a histogram as a visual output, we can get a smooth
    estimate of the distribution using kernel density estimation (introduced in [Chapter 28](ch28.xhtml#section-0404-density-and-contour-plots)),
    which Seaborn does with `sns.kdeplot` (see [Figure 36-2](#fig_0414-visualization-with-seaborn_files_in_output_7_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![output 7 0](assets/output_7_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-2\. Kernel density estimates for visualizing distributions
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If we pass `x` and `y` columns to `kdeplot`, we instead get a two-dimensional
    visualization of the joint density (see [Figure 36-3](#fig_0414-visualization-with-seaborn_files_in_output_9_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![output 9 0](assets/output_9_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-3\. A two-dimensional kernel density plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see the joint distribution and the marginal distributions together using
    `sns.jointplot`, which we’ll explore further later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Pair Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you generalize joint plots to datasets of larger dimensions, you end up
    with *pair plots*. These are very useful for exploring correlations between multidimensional
    data, when you’d like to plot all pairs of values against each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll demo this with the well-known Iris dataset, which lists measurements
    of petals and sepals of three Iris species:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the multidimensional relationships among the samples is as easy
    as calling `sns.pairplot` (see [Figure 36-4](#fig_0414-visualization-with-seaborn_files_in_output_14_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 14 0](assets/output_14_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-4\. A pair plot showing the relationships between four variables
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Faceted Histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes the best way to view data is via histograms of subsets, as shown in
    [Figure 36-5](#fig_0414-visualization-with-seaborn_files_in_output_17_0). Seaborn’s
    `FacetGrid` makes this simple. We’ll take a look at some data that shows the amount
    that restaurant staff receive in tips based on various indicator data:^([1](ch36.xhtml#idm45858747325904))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![output 17 0](assets/output_17_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-5\. An example of a faceted histogram
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The faceted chart gives us some quick insights into the dataset: for example,
    we see that it contains far more data on male servers during the dinner hour than
    other categories, and typical tip amounts appear to range from approximately 10%
    to 20%, with some outliers on either end.'
  prefs: []
  type: TYPE_NORMAL
- en: Categorical Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Categorical plots can be useful for this kind of visualization as well. These
    allow you to view the distribution of a parameter within bins defined by any other
    parameter, as shown in [Figure 36-6](#fig_0414-visualization-with-seaborn_files_in_output_19_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![output 19 0](assets/output_19_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-6\. An example of a factor plot, comparing distributions given various
    discrete factors
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Joint Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the pair plot we saw earlier, we can use `sns.jointplot` to show
    the joint distribution between different datasets, along with the associated marginal
    distributions (see [Figure 36-7](#fig_0414-visualization-with-seaborn_files_in_output_21_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 21 0](assets/output_21_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-7\. A joint distribution plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The joint plot can even do some automatic kernel density estimation and regression,
    as shown in [Figure 36-8](#fig_0414-visualization-with-seaborn_files_in_output_23_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![output 23 0](assets/output_23_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-8\. A joint distribution plot with a regression fit
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Bar Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Time series can be plotted using `sns.factorplot`. In the following example,
    we’ll use the Planets dataset that we first saw in [Chapter 20](ch20.xhtml#section-0308-aggregation-and-grouping);
    see [Figure 36-9](#fig_0414-visualization-with-seaborn_files_in_output_26_0) for
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![output 26 0](assets/output_26_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-9\. A histogram as a special case of a factor plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can learn more by looking at the *method* of discovery of each of these planets
    (see [Figure 36-10](#fig_0414-visualization-with-seaborn_files_in_output_28_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![output 28 0](assets/output_28_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-10\. Number of planets discovered by year and type
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For more information on plotting with Seaborn, see the [Seaborn documentation](https://oreil.ly/fCHxn),
    and particularly the [example gallery](https://oreil.ly/08xGE).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Exploring Marathon Finishing Times'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we’ll look at using Seaborn to help visualize and understand finishing
    results from a marathon.^([2](ch36.xhtml#idm45858746633600)) I’ve scraped the
    data from sources on the web, aggregated it and removed any identifying information,
    and put it on GitHub, where it can be downloaded.^([3](ch36.xhtml#idm45858746632288))
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by downloading the data and loading it into Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that Pandas loaded the time columns as Python strings (type `object`);
    we can see this by looking at the `dtypes` attribute of the `DataFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s fix this by providing a converter for the times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'That will make it easier to manipulate the temporal data. For the purpose of
    our Seaborn plotting utilities, let’s next add columns that give the times in
    seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To get an idea of what the data looks like, we can plot a `jointplot` over the
    data; [Figure 36-11](#fig_0414-visualization-with-seaborn_files_in_output_41_0)
    shows the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The dotted line shows where someone’s time would lie if they ran the marathon
    at a perfectly steady pace. The fact that the distribution lies above this indicates
    (as you might expect) that most people slow down over the course of the marathon.
    If you have run competitively, you’ll know that those who do the opposite—run
    faster during the second half of the race—are said to have “negative-split” the
    race.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 41 0](assets/output_41_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-11\. The relationship between the split for the first half-marathon
    and the fin‐ ishing time for the full marathon
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s create another column in the data, the split fraction, which measures
    the degree to which each runner negative-splits or positive-splits the race:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Where this split difference is less than zero, the person negative-split the
    race by that fraction. Let’s do a distribution plot of this split fraction (see
    [Figure 36-12](#fig_0414-visualization-with-seaborn_files_in_output_45_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![output 45 0](assets/output_45_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-12\. The distribution of split fractions; 0.0 indicates a runner who
    completed the first and second halves in identical times
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Out of nearly 40,000 participants, there were only 250 people who negative-split
    their marathon.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see whether there is any correlation between this split fraction and other
    variables. We’ll do this using a `PairGrid`, which draws plots of all these correlations
    (see [Figure 36-13](#fig_0414-visualization-with-seaborn_files_in_output_48_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![output 48 0](assets/output_48_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-13\. The relationship between quantities within the marathon dataset
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It looks like the split fraction does not correlate particularly with age,
    but does correlate with the final time: faster runners tend to have closer to
    even splits on their marathon time. Let’s zoom in on the histogram of split fractions
    separated by gender, shown in [Figure 36-14](#fig_0414-visualization-with-seaborn_files_in_output_50_0).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![output 50 0](assets/output_50_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-14\. The distribution of split fractions by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The interesting thing here is that there are many more men than women who are
    running close to an even split! It almost looks like a bimodal distribution among
    the men and women. Let’s see if we can suss out what’s going on by looking at
    the distributions as a function of age.
  prefs: []
  type: TYPE_NORMAL
- en: A nice way to compare distributions is to use a *violin plot*, shown in [Figure 36-15](#fig_0414-visualization-with-seaborn_files_in_output_52_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![output 52 0](assets/output_52_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-15\. A violin plot showing the split fraction by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s look a little deeper, and compare these violin plots as a function of
    age (see [Figure 36-16](#fig_0414-visualization-with-seaborn_files_in_output_55_0)).
    We’ll start by creating a new column in the array that specifies the age range
    that each person is in, by decade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![output 55 0](assets/output_55_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-16\. A violin plot showing the split fraction by gender and age
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can see where the distributions among men and women differ: the split distributions
    of men in their 20s to 50s show a pronounced overdensity toward lower splits when
    compared to women of the same age (or of any age, for that matter).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also surprisingly, it appears that the 80-year-old women seem to outperform
    *everyone* in terms of their split time, although this is likely a small number
    effect, as there are only a handful of runners in that range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Back to the men with negative splits: who are these runners? Does this split
    fraction correlate with finishing quickly? We can plot this very easily. We’ll
    use `regplot`, which will automatically fit a linear regression model to the data
    (see [Figure 36-17](#fig_0414-visualization-with-seaborn_files_in_output_59_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![output 59 0](assets/output_59_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 36-17\. Split fraction versus finishing time by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Apparently, among both men and women, the people with fast splits tend to be
    faster runners who are finishing within ~15,000 seconds, or about 4 hours. People
    slower than that are much less likely to have a fast second split.
  prefs: []
  type: TYPE_NORMAL
- en: Further Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single part of a book can never hope to cover all the available features and
    plot types available in Matplotlib. As with other packages we’ve seen, liberal
    use of IPython’s tab completion and help functions (see [Chapter 1](ch01.xhtml#section-0101-help-and-documentation))
    can be very helpful when exploring Matplotlib’s API. In addition, Matplotlib’s
    [online documentation](http://matplotlib.org) can be a helpful reference. See
    in particular the [Matplotlib gallery](https://oreil.ly/WNiHP), which shows thumbnails
    of hundreds of different plot types, each one linked to a page with the Python
    code snippet used to generate it. This allows you to visually inspect and learn
    about a wide range of different plotting styles and visualization techniques.
  prefs: []
  type: TYPE_NORMAL
- en: For a book-length treatment of Matplotlib, I would recommend *Interactive Applications
    Using Matplotlib* (Packt), written by Matplotlib core developer Ben Root.
  prefs: []
  type: TYPE_NORMAL
- en: Other Python Visualization Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although Matplotlib is the most prominent Python visualization library, there
    are other more modern tools that are worth exploring as well. I’ll mention a few
    of them briefly here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bokeh](http://bokeh.pydata.org) is a JavaScript visualization library with
    a Python frontend that creates highly interactive visualizations capable of handling
    very large and/or streaming datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plotly](http://plot.ly) is the eponymous open source product of the Plotly
    company, and is similar in spirit to Bokeh. It is actively developed and provides
    a wide range of interactive chart types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HoloViews](https://holoviews.org) is a more declarative, unified API for generating
    charts in a variety of backends, including Bokeh and Matplotlib.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vega](https://vega.github.io) and [Vega-Lite](https://vega.github.io/vega-lite)
    are declarative graphics representations, and are the product of years of research
    into how to think about data visualization and interaction. The reference rendering
    implementation is JavaScript, and the [Altair package](https://altair-viz.github.io)
    provides a Python API to generate these charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visualization landscape in the Python world is constantly evolving, and
    I expect that this list may be out of date by the time this book is published.
    Additionally, because Python is used in so many domains, you’ll find many other
    visualization tools built for more specific use cases. It can be hard to keep
    track of all of them, but a good resource for learning about this wide variety
    of visualization tools is [PyViz](https://pyviz.org), an open, community-driven
    site containing tutorials and examples of many different visualization tools.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](ch36.xhtml#idm45858747325904-marker)) The restaurant staff data used
    in this section divides employees into two sexes: female and male. Biological
    sex isn’t binary, but the following discussion and visualizations are limited
    by this data.'
  prefs: []
  type: TYPE_NORMAL
- en: '^([2](ch36.xhtml#idm45858746633600-marker)) The marathon data used in this
    section divides runners into two genders: men and women. While gender is a spectrum,
    the following discussion and visualizations use this binary because they depend
    on the data.'
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch36.xhtml#idm45858746632288-marker)) If you are interested in using Python
    for web scraping, I would recommend [*Web Scraping with Python*](https://oreil.ly/e3Xdg)
    by Ryan Mitchell, also from O’Reilly.
  prefs: []
  type: TYPE_NORMAL
