- en: Chapter 35\. Three-Dimensional Plotting in Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第35章。Matplotlib中的三维绘图
- en: 'Matplotlib was initially designed with only two-dimensional plotting in mind.
    Around the time of the 1.0 release, some three-dimensional plotting utilities
    were built on top of Matplotlib’s two-dimensional display, and the result is a
    convenient (if somewhat limited) set of tools for three-dimensional data visualization.
    Three-dimensional plots are enabled by importing the `mplot3d` toolkit, included
    with the main Matplotlib installation:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib最初仅设计用于二维绘图。在1.0版本发布时，一些三维绘图工具建立在Matplotlib的二维显示之上，结果是一组便利的（虽然有些受限）用于三维数据可视化的工具。通过导入`mplot3d`工具包，可以启用三维绘图，这个工具包已经包含在主Matplotlib安装中：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once this submodule is imported, a three-dimensional axes can be created by
    passing the keyword `projection='3d'` to any of the normal axes creation routines,
    as shown here (see [Figure 35-1](#fig_0412-three-dimensional-plotting_files_in_output_5_0)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 导入此子模块后，可以通过向任何常规坐标轴创建函数传递关键字`projection='3d'`来创建三维坐标轴，如下所示（见[Figure 35-1](#fig_0412-three-dimensional-plotting_files_in_output_5_0)）。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With this three-dimensional axes enabled, we can now plot a variety of three-dimensional
    plot types. Three-dimensional plotting is one of the functionalities that benefits
    immensely from viewing figures interactively rather than statically, in the notebook;
    recall that to use interactive figures, you can use `%matplotlib notebook` rather
    than `%matplotlib inline` when running this code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个三维坐标轴，我们现在可以绘制各种三维图类型。三维绘图是从交互式视图中查看图形而不是静态图像中受益良多的功能之一；请记住，在运行此代码时，要使用交互式图形，可以使用`%matplotlib
    notebook`而不是`%matplotlib inline`。
- en: '![output 5 0](assets/output_5_0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![output 5 0](assets/output_5_0.png)'
- en: Figure 35-1\. An empty three-dimensional axes
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 35-1\. 一个空的三维坐标轴
- en: Three-Dimensional Points and Lines
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三维点和线
- en: The most basic three-dimensional plot is a line or collection of scatter plots
    created from sets of (x, y, z) triples. In analogy with the more common two-dimensional
    plots discussed earlier, these can be created using the `ax.plot3D` and `ax.scatter3D`
    functions. The call signature for these is nearly identical to that of their two-dimensional
    counterparts, so you can refer to Chapters [26](ch26.xhtml#section-0401-simple-line-plots)
    and [27](ch27.xhtml#section-0402-simple-scatter-plots) for more information on
    controlling the output. Here we’ll plot a trigonometric spiral, along with some
    points drawn randomly near the line (see [Figure 35-2](#fig_0412-three-dimensional-plotting_files_in_output_8_0)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的三维图是由一组(x, y, z)三元组创建的线条或散点图集合。类比之前讨论的常见二维图，可以使用`ax.plot3D`和`ax.scatter3D`函数创建这些图。这些函数的调用签名几乎与它们的二维对应物完全相同，因此您可以参考第[26](ch26.xhtml#section-0401-simple-line-plots)章和第[27](ch27.xhtml#section-0402-simple-scatter-plots)章以获取有关控制输出的更多信息。在这里，我们将绘制一个三角螺旋线，以及一些随机绘制在该线附近的点（见[Figure 35-2](#fig_0412-three-dimensional-plotting_files_in_output_8_0)）。
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 8 0](assets/output_8_0.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![output 8 0](assets/output_8_0.png)'
- en: Figure 35-2\. Points and lines in three dimensions
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 35-2\. 三维中的点和线
- en: Notice that scatter points have their transparency adjusted to give a sense
    of depth on the page. While the three-dimensional effect is sometimes difficult
    to see within a static image, an interactive view can lead to some nice intuition
    about the layout of the points.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，散点的透明度已经调整，以便在页面上给人一种深度感。虽然在静态图像中有时难以看到三维效果，但交互式视图可以让您对点的布局有更好的直觉。
- en: Three-Dimensional Contour Plots
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三维等高线图
- en: Analogous to the contour plots we explored in [Chapter 28](ch28.xhtml#section-0404-density-and-contour-plots),
    `mplot3d` contains tools to create three-dimensional relief plots using the same
    inputs. Like `ax.contour`, `ax.contour3D` requires all the input data to be in
    the form of two-dimensional regular grids, with the *z* data evaluated at each
    point. Here we’ll show a three-dimensional contour diagram of a three-dimensional
    sinusoidal function (see [Figure 35-3](#fig_0412-three-dimensional-plotting_files_in_output_12_0)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们在[Chapter 28](ch28.xhtml#section-0404-density-and-contour-plots)中探讨的等高线图，`mplot3d`包含使用相同输入创建三维浮雕图的工具。与`ax.contour`类似，`ax.contour3D`要求所有输入数据都以二维规则网格的形式提供，*z*数据在每个点进行评估。在这里，我们将展示一个三维正弦函数的等高线图（见[Figure 35-3](#fig_0412-three-dimensional-plotting_files_in_output_12_0)）。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![output 12 0](assets/output_12_0.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![output 12 0](assets/output_12_0.png)'
- en: Figure 35-3\. A three-dimensional contour plot
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 35-3\. 一个三维等高线图
- en: 'Sometimes the default viewing angle is not optimal, in which case we can use
    the `view_init` method to set the elevation and azimuthal angles. In the following
    example, visualized in [Figure 35-4](#fig_0412-three-dimensional-plotting_files_in_output_14_0),
    we’ll use an elevation of 60 degrees (that is, 60 degrees above the x-y plane)
    and an azimuth of 35 degrees (that is, rotated 35 degrees counter-clockwise about
    the z-axis):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有时默认的视角不是最佳的，这时我们可以使用`view_init`方法来设置仰角和方位角。在下面的例子中，可视化效果见[图 35-4](#fig_0412-three-dimensional-plotting_files_in_output_14_0)，我们将使用仰角60度（即相对于
    x-y 平面上方60度）和方位角35度（即相对于 z 轴逆时针旋转35度）：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Again, note that this type of rotation can be accomplished interactively by
    clicking and dragging when using one of Matplotlib’s interactive backends.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，请注意，当使用Matplotlib的交互式后端时，可以通过点击和拖动来实现这种类型的旋转。
- en: '![output 14 0](assets/output_14_0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![output 14 0](assets/output_14_0.png)'
- en: Figure 35-4\. Adjusting the view angle for a three-dimensional plot
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 35-4\. 调整三维绘图的视角角度
- en: Wireframes and Surface Plots
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线框和表面绘图
- en: Two other types of three-dimensional plots that work on gridded data are wireframes
    and surface plots. These take a grid of values and project it onto the specified
    three-dimensional surface, and can make the resulting three-dimensional forms
    quite easy to visualize. Here’s an example of using a wireframe (see [Figure 35-5](#fig_0412-three-dimensional-plotting_files_in_output_17_0)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两种适用于网格数据的三维绘图类型是线框图和表面绘图。它们接受值网格并将其投影到指定的三维表面上，可以使得最终的三维形态非常易于可视化。这里有一个使用线框的例子（见[图 35-5](#fig_0412-three-dimensional-plotting_files_in_output_17_0)）。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 17 0](assets/output_17_0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![output 17 0](assets/output_17_0.png)'
- en: Figure 35-5\. A wireframe plot
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 35-5\. 一个线框图
- en: A surface plot is like a wireframe plot, but each face of the wireframe is a
    filled polygon. Adding a colormap to the filled polygons can aid perception of
    the topology of the surface being visualized, as you can see in [Figure 35-6](#fig_0412-three-dimensional-plotting_files_in_output_19_0).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表面绘图类似于线框图，但线框的每个面都是填充多边形。为填充的多边形添加颜色映射可以帮助感知所可视化表面的拓扑结构，正如您在[图 35-6](#fig_0412-three-dimensional-plotting_files_in_output_19_0)中看到的那样。
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 19 0](assets/output_19_0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![output 19 0](assets/output_19_0.png)'
- en: Figure 35-6\. A three-dimensional surface plot
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 35-6\. 一个三维表面绘图
- en: Though the grid of values for a surface plot needs to be two-dimensional, it
    need not be rectilinear. Here is an example of creating a partial polar grid,
    which when used with the `surface3D` plot can give us a slice into the function
    we’re visualizing (see [Figure 35-7](#fig_0412-three-dimensional-plotting_files_in_output_21_0)).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管表面绘图的值网格需要是二维的，但不一定是矩形的。这里有一个创建部分极坐标网格的例子，当与`surface3D`绘图结合使用时，可以为我们提供所可视化函数的一个切片（见[图 35-7](#fig_0412-three-dimensional-plotting_files_in_output_21_0)）。
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 21 0](assets/output_21_0.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![output 21 0](assets/output_21_0.png)'
- en: Figure 35-7\. A polar surface plot
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 35-7\. 一个极坐标表面绘图
- en: Surface Triangulations
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表面三角剖分
- en: For some applications, the evenly sampled grids required by the preceding routines
    are too restrictive. In these situations, triangulation-based plots can come in
    handy. What if rather than an even draw from a Cartesian or a polar grid, we instead
    have a set of random draws?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些应用程序，前述例程需要均匀采样的网格太过限制。在这些情况下，基于三角剖分的绘图就很有用了。如果我们不是从笛卡尔或极坐标网格中均匀绘制，而是有一组随机绘制呢？
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We could create a scatter plot of the points to get an idea of the surface we’re
    sampling from, as shown in [Figure 35-8](#fig_0412-three-dimensional-plotting_files_in_output_25_0).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个散点图来了解我们正在抽样的表面，如[图 35-8](#fig_0412-three-dimensional-plotting_files_in_output_25_0)所示。
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![output 25 0](assets/output_25_0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![output 25 0](assets/output_25_0.png)'
- en: Figure 35-8\. A three-dimensional sampled surface
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 35-8\. 一个三维采样表面
- en: 'This point cloud leaves a lot to be desired. The function that will help us
    in this case is `ax.plot_trisurf`, which creates a surface by first finding a
    set of triangles formed between adjacent points (remember that `x`, `y`, and `z`
    here are one-dimensional arrays); [Figure 35-9](#fig_0412-three-dimensional-plotting_files_in_output_27_0)
    shows the result:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个点云留下了许多问题。在这种情况下帮助我们的函数是`ax.plot_trisurf`，它通过首先在相邻点之间找到一组三角形来创建表面（请记住这里的`x`、`y`和`z`是一维数组）；结果如图 35-9 所示（见[图 35-9](#fig_0412-three-dimensional-plotting_files_in_output_27_0)）：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The result is certainly not as clean as when it is plotted with a grid, but
    the flexibility of such a triangulation allows for some really interesting three-dimensional
    plots. For example, it is actually possible to plot a three-dimensional Möbius
    strip using this, as we’ll see next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果当然不像使用网格绘制时那么干净，但这种三角剖分的灵活性允许一些非常有趣的三维绘图。例如，实际上可以使用这种方法绘制一个三维莫比乌斯带，我们接下来会看到。
- en: '![output 27 0](assets/output_27_0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![output 27 0](assets/output_27_0.png)'
- en: Figure 35-9\. A triangulated surface plot
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 第 35-9 图。一个三角形表面绘图
- en: 'Example: Visualizing a Möbius Strip'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：可视化莫比乌斯带
- en: 'A Möbius strip is similar to a strip of paper glued into a loop with a half-twist,
    resulting in an object with only a single side! Here we will visualize such an
    object using Matplotlib’s three-dimensional tools. The key to creating the Möbius
    strip is to think about its parametrization: it’s a two-dimensional strip, so
    we need two intrinsic dimensions. Let’s call them <math alttext="theta"><mi>θ</mi></math>
    , which ranges from 0 to <math alttext="2 pi"><mrow><mn>2</mn> <mi>π</mi></mrow></math>
    around the loop, and <math alttext="w"><mi>w</mi></math> , which ranges from –1
    to 1 across the width of the strip:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个莫比乌斯带类似于一条纸条在环上粘贴成一个半扭曲的带子，结果是一个只有一个面的对象！在这里，我们将使用 Matplotlib 的三维工具可视化这样的对象。创建莫比乌斯带的关键是考虑它的参数化：它是一个二维带子，所以我们需要两个内在维度。让我们称之为
    <math alttext="theta"><mi>θ</mi></math>，它在环周围从 0 到 <math alttext="2 pi"><mrow><mn>2</mn>
    <mi>π</mi></mrow></math>，以及 <math alttext="w"><mi>w</mi></math>，它在带子宽度上从 -1 到
    1：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now from this parametrization, we must determine the (*x*, *y*, *z*) positions
    of the embedded strip.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从这个参数化中，我们必须确定嵌入带的 (*x*, *y*, *z*) 位置。
- en: 'Thinking about it, we might realize that there are two rotations happening:
    one is the position of the loop about its center (what we’ve called <math alttext="theta"><mi>θ</mi></math>
    ), while the other is the twisting of the strip about its axis (we’ll call this
    <math alttext="phi"><mi>φ</mi></math> ). For a Möbius strip, we must have the
    strip make half a twist during a full loop, or <math alttext="normal upper Delta
    phi equals normal upper Delta theta slash 2"><mrow><mi>Δ</mi> <mi>φ</mi> <mo>=</mo>
    <mi>Δ</mi> <mi>θ</mi> <mo>/</mo> <mn>2</mn></mrow></math> :'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 思考一下，我们可能会意识到有两个旋转正在发生：一个是环绕其中心的位置旋转（我们称之为 <math alttext="theta"><mi>θ</mi></math>），而另一个是带子围绕其轴线的扭曲（我们将其称为
    <math alttext="phi"><mi>φ</mi></math>）。对于一个莫比乌斯带，我们必须使带子在完整环的过程中进行半扭曲，即 <math
    alttext="normal upper Delta phi equals normal upper Delta theta slash 2"><mrow><mi>Δ</mi>
    <mi>φ</mi> <mo>=</mo> <mi>Δ</mi> <mi>θ</mi> <mo>/</mo> <mn>2</mn></mrow></math>：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we use our recollection of trigonometry to derive the three-dimensional
    embedding. We’ll define <math alttext="r"><mi>r</mi></math> , the distance of
    each point from the center, and use this to find the embedded <math alttext="left-parenthesis
    x comma y comma z right-parenthesis"><mrow><mo>(</mo> <mi>x</mi> <mo>,</mo> <mi>y</mi>
    <mo>,</mo> <mi>z</mi> <mo>)</mo></mrow></math> coordinates:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们利用我们对三角函数的记忆来推导三维嵌入。我们定义 <math alttext="r"><mi>r</mi></math>，每个点到中心的距离，并使用它来找到嵌入的
    <math alttext="left-parenthesis x comma y comma z right-parenthesis"><mrow><mo>(</mo>
    <mi>x</mi> <mo>,</mo> <mi>y</mi> <mo>,</mo> <mi>z</mi> <mo>)</mo></mrow></math>
    坐标：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally, to plot the object, we must make sure the triangulation is correct.
    The best way to do this is to define the triangulation *within the underlying
    parametrization*, and then let Matplotlib project this triangulation into the
    three-dimensional space of the Möbius strip. This can be accomplished as follows
    (see [Figure 35-10](#fig_0412-three-dimensional-plotting_files_in_output_36_0)).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了绘制这个对象，我们必须确保三角剖分是正确的。最好的方法是在基本参数化内定义三角剖分，然后让 Matplotlib 将这个三角剖分投影到莫比乌斯带的三维空间中。可以通过以下方式实现这一点（见
    [第 35-10 图](#fig_0412-three-dimensional-plotting_files_in_output_36_0)）。
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![output 36 0](assets/output_36_0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![output 36 0](assets/output_36_0.png)'
- en: Figure 35-10\. Visualizing a Möbius strip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 第 35-10 图。可视化莫比乌斯带
- en: Combining all of these techniques, it is possible to create and display a wide
    variety of three-dimensional objects and patterns in Matplotlib.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结合所有这些技术，可以在 Matplotlib 中创建和显示各种三维对象和图案。
