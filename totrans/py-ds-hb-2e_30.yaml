- en: Chapter 26\. Simple Line Plots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 26 章\. 简单线图
- en: 'Perhaps the simplest of all plots is the visualization of a single function
    <math alttext="y equals f left-parenthesis x right-parenthesis"><mrow><mi>y</mi>
    <mo>=</mo> <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>)</mo></mrow></math> . Here we
    will take a first look at creating a simple plot of this type. As in all the following
    chapters, we’ll start by setting up the notebook for plotting and importing the
    packages we will use:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可能所有绘图中最简单的是单个函数 <math alttext="y equals f left-parenthesis x right-parenthesis"><mrow><mi>y</mi>
    <mo>=</mo> <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>)</mo></mrow></math> 的可视化。在这里，我们将首次创建这种类型的简单绘图。如同接下来的所有章节一样，我们将从设置用于绘图的笔记本开始，并导入我们将使用的包：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For all Matplotlib plots, we start by creating a figure and axes. In their simplest
    form, this can be done as follows (see [Figure 26-1](#fig_0401-simple-line-plots_files_in_output_4_0)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的 Matplotlib 图，我们首先创建一个图形和坐标轴。在它们最简单的形式下，可以像下面这样做（见[图 26-1](#fig_0401-simple-line-plots_files_in_output_4_0)）。
- en: '[PRE1]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In Matplotlib, the *figure* (an instance of the class `plt.Figure`) can be
    thought of as a single container that contains all the objects representing axes,
    graphics, text, and labels. The *axes* (an instance of the class `plt.Axes`) is
    what we see above: a bounding box with ticks, grids, and labels, which will eventually
    contain the plot elements that make up our visualization. Throughout this part
    of the book, I’ll commonly use the variable name `fig` to refer to a figure instance
    and `ax` to refer to an axes instance or group of axes instances.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 中，*figure*（一个 `plt.Figure` 类的实例）可以被视为一个包含所有代表坐标轴、图形、文本和标签的对象的单个容器。*axes*（一个
    `plt.Axes` 类的实例）就是我们看到的上述内容：一个带有刻度、网格和标签的边界框，最终将包含构成我们可视化的绘图元素。在本书的这一部分，我通常使用变量名
    `fig` 表示一个图形实例，使用 `ax` 表示一个坐标轴实例或一组坐标轴实例。
- en: '![output 4 0](assets/output_4_0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![output 4 0](assets/output_4_0.png)'
- en: Figure 26-1\. An empty gridded axes
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-1\. 一个空的网格坐标轴
- en: Once we have created an axes, we can use the `ax.plot` method to plot some data.
    Let’s start with a simple sinusoid, as shown in [Figure 26-2](#fig_0401-simple-line-plots_files_in_output_6_0).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个坐标轴，就可以使用 `ax.plot` 方法绘制一些数据。让我们从一个简单的正弦波开始，如 [图 26-2](#fig_0401-simple-line-plots_files_in_output_6_0)
    所示。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![output 6 0](assets/output_6_0.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![output 6 0](assets/output_6_0.png)'
- en: Figure 26-2\. A simple sinusoid
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-2\. 一个简单的正弦波
- en: 'Note that the semicolon at the end of the last line is intentional: it suppresses
    the textual representation of the plot from the output.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一行末尾的分号是有意为之：它抑制了从输出中显示绘图的文本表示。
- en: Alternatively, we can use the PyLab interface and let the figure and axes be
    created for us in the background (see [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib)
    for a discussion of these two interfaces); as [Figure 26-3](#fig_0401-simple-line-plots_files_in_output_8_0)
    shows, the result is the same.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用 PyLab 接口，让图形和坐标轴在后台自动创建（参见 [第 IV 部分](part04.xhtml#section-0400-introduction-to-matplotlib)
    讨论这两种接口）；如 [图 26-3](#fig_0401-simple-line-plots_files_in_output_8_0) 所示，结果是相同的。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 8 0](assets/output_8_0.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![output 8 0](assets/output_8_0.png)'
- en: Figure 26-3\. A simple sinusoid via the object-oriented interface
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-3\. 通过面向对象接口的简单正弦波
- en: 'If we want to create a single figure with multiple lines (see [Figure 26-4](#fig_0401-simple-line-plots_files_in_output_10_0)),
    we can simply call the `plot` function multiple times:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个包含多条线的单个图形（参见 [图 26-4](#fig_0401-simple-line-plots_files_in_output_10_0)），我们可以简单地多次调用
    `plot` 函数：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s all there is to plotting simple functions in Matplotlib! We’ll now dive
    into some more details about how to control the appearance of the axes and lines.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 Matplotlib 中绘制简单函数的全部内容！现在我们将深入了解如何控制坐标轴和线条的外观的更多细节。
- en: '![output 10 0](assets/output_10_0.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![output 10 0](assets/output_10_0.png)'
- en: Figure 26-4\. Overplotting multiple lines
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-4\. 多条线的重叠绘图
- en: 'Adjusting the Plot: Line Colors and Styles'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整绘图：线条颜色和样式
- en: 'The first adjustment you might wish to make to a plot is to control the line
    colors and styles. The `plt.plot` function takes additional arguments that can
    be used to specify these. To adjust the color, you can use the `color` keyword,
    which accepts a string argument representing virtually any imaginable color. The
    color can be specified in a variety of ways; see [Figure 26-5](#fig_0401-simple-line-plots_files_in_output_14_0)
    for the output of the following examples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望对图表进行的第一个调整是控制线条的颜色和样式。`plt.plot` 函数接受额外的参数来指定这些内容。要调整颜色，可以使用 `color` 关键字，接受一个表示几乎任何想象的颜色的字符串参数。颜色可以以多种方式指定；参见
    [图 26-5](#fig_0401-simple-line-plots_files_in_output_14_0) 来查看以下示例的输出：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![output 14 0](assets/output_14_0.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![output 14 0](assets/output_14_0.png)'
- en: Figure 26-5\. Controlling the color of plot elements
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-5\. 控制绘图元素的颜色
- en: If no color is specified, Matplotlib will automatically cycle through a set
    of default colors for multiple lines.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定颜色，则Matplotlib将自动循环使用一组默认颜色来绘制多条线。
- en: Similarly, the line style can be adjusted using the `linestyle` keyword (see
    [Figure 26-6](#fig_0401-simple-line-plots_files_in_output_16_0)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，可以使用 `linestyle` 关键字来调整线条样式（参见 [图 26-6](#fig_0401-simple-line-plots_files_in_output_16_0)）。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 16 0](assets/output_16_0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![output 16 0](assets/output_16_0.png)'
- en: Figure 26-6\. Examples of various line styles
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-6\. 各种线条样式的示例
- en: Though it may be less clear to someone reading your code, you can save some
    keystrokes by combining these `linestyle` and `color` codes into a single non-keyword
    argument to the `plt.plot` function; [Figure 26-7](#fig_0401-simple-line-plots_files_in_output_18_0)
    shows the result.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于阅读你的代码的人来说可能不太清晰，但你可以通过将 `linestyle` 和 `color` 代码合并为单个非关键字参数传递给 `plt.plot`
    函数来节省一些按键。 [图 26-7](#fig_0401-simple-line-plots_files_in_output_18_0) 显示了结果。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 18 0](assets/output_18_0.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![output 18 0](assets/output_18_0.png)'
- en: Figure 26-7\. Controlling colors and styles with the shorthand syntax
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-7\. 使用简写语法控制颜色和样式
- en: These single-character color codes reflect the standard abbreviations in the
    RGB (Red/Green/Blue) and CMYK (Cyan/Magenta/Yellow/blacK) color systems, commonly
    used for digital color graphics.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些单字符颜色代码反映了RGB（红/绿/蓝）和CMYK（青/洋红/黄/黑）颜色系统中的标准缩写，通常用于数字彩色图形。
- en: There are many other keyword arguments that can be used to fine-tune the appearance
    of the plot; for details, read through the docstring of the `plt.plot` function
    using IPython’s help tools (see [Chapter 1](ch01.xhtml#section-0101-help-and-documentation)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他关键字参数可用于微调图表的外观；有关详细信息，请通过IPython的帮助工具阅读 `plt.plot` 函数的文档字符串（参见 [第 1 章](ch01.xhtml#section-0101-help-and-documentation)）。
- en: 'Adjusting the Plot: Axes Limits'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整图表：坐标轴限制
- en: Matplotlib does a decent job of choosing default axes limits for your plot,
    but sometimes it’s nice to have finer control. The most basic way to adjust the
    limits is to use the `plt.xlim` and `plt.ylim` functions (see [Figure 26-8](#fig_0401-simple-line-plots_files_in_output_21_0)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib在为你的图表选择默认的轴限制方面做得相当不错，但有时更精细的控制会更好。调整限制的最基本方法是使用 `plt.xlim` 和 `plt.ylim`
    函数（参见 [图 26-8](#fig_0401-simple-line-plots_files_in_output_21_0)）。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 21 0](assets/output_21_0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![output 21 0](assets/output_21_0.png)'
- en: Figure 26-8\. Example of setting axis limits
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-8\. 设置坐标轴限制的示例
- en: If for some reason you’d like either axis to be displayed in reverse, you can
    simply reverse the order of the arguments (see [Figure 26-9](#fig_0401-simple-line-plots_files_in_output_23_0)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因某种原因你希望任一轴显示反向，只需反转参数的顺序（参见 [图 26-9](#fig_0401-simple-line-plots_files_in_output_23_0)）。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 23 0](assets/output_23_0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![output 23 0](assets/output_23_0.png)'
- en: Figure 26-9\. Example of reversing the y-axis
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-9\. 反转y轴的示例
- en: A useful related method is `plt.axis` (note here the potential confusion between
    *axes* with an *e*, and *axis* with an *i*), which allows more qualitative specifications
    of axis limits. For example, you can automatically tighten the bounds around the
    current content, as shown in [Figure 26-10](#fig_0401-simple-line-plots_files_in_output_25_0).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的相关方法是 `plt.axis`（请注意这里可能会导致 *axes*（带有 *e*）和 *axis*（带有 *i*）之间的潜在混淆），它允许更质量化地指定轴限制。例如，你可以自动收紧当前内容周围的边界，如
    [图 26-10](#fig_0401-simple-line-plots_files_in_output_25_0) 所示。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![output 25 0](assets/output_25_0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![output 25 0](assets/output_25_0.png)'
- en: Figure 26-10\. Example of a “tight” layout
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 26-10\. “紧凑”布局的示例
- en: Or you can specify that you want an equal axis ratio, such that one unit in
    `x` is visually equivalent to one unit in `y`, as seen in [Figure 26-11](#fig_0401-simple-line-plots_files_in_output_27_0).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以指定希望有一个相等的轴比率，这样 `x` 中的一个单位在视觉上等同于 `y` 中的一个单位，如 [Figure 26-11](#fig_0401-simple-line-plots_files_in_output_27_0)
    所示。
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![output 27 0](assets/output_27_0.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![output 27 0](assets/output_27_0.png)'
- en: Figure 26-11\. Example of an “equal” layout, with units matched to the output
    resolution
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 26-11\. “equal” 布局示例，单位与输出分辨率匹配
- en: Other axis options include `'on'`, `'off'`, `'square'`, `'image'`, and more.
    For more information on these, refer to the `plt.axis` docstring.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 其他轴选项包括 `'on'`、`'off'`、`'square'`、`'image'` 等。有关更多信息，请参阅 `plt.axis` 文档字符串。
- en: Labeling Plots
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图标签
- en: 'As the last piece of this chapter, we’ll briefly look at the labeling of plots:
    titles, axis labels, and simple legends. Titles and axis labels are the simplest
    such labels—there are methods that can be used to quickly set them (see [Figure 26-12](#fig_0401-simple-line-plots_files_in_output_30_0)).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的最后一部分，我们将简要讨论绘图的标签：标题、坐标轴标签和简单图例。标题和坐标轴标签是最简单的标签——有方法可以快速设置它们（见 [Figure 26-12](#fig_0401-simple-line-plots_files_in_output_30_0)）。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![output 30 0](assets/output_30_0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![output 30 0](assets/output_30_0.png)'
- en: Figure 26-12\. Examples of axis labels and title
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 26-12\. 坐标轴标签和标题示例
- en: The position, size, and style of these labels can be adjusted using optional
    arguments to the functions, described in the docstrings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用函数的可选参数调整这些标签的位置、大小和样式，这些参数在文档字符串中有描述。
- en: When multiple lines are being shown within a single axes, it can be useful to
    create a plot legend that labels each line type. Again, Matplotlib has a built-in
    way of quickly creating such a legend; it is done via the (you guessed it) `plt.legend`
    method. Though there are several valid ways of using this, I find it easiest to
    specify the label of each line using the `label` keyword of the `plot` function
    (see [Figure 26-13](#fig_0401-simple-line-plots_files_in_output_33_0)).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当在单个坐标轴中显示多行时，创建一个标签每种线型的图例是非常有用的。再次强调，Matplotlib 提供了一种内置的快速创建这种图例的方法；通过（你猜对了）`plt.legend`
    方法来实现。虽然有几种有效的使用方法，但我发现最简单的方法是使用 `plot` 函数的 `label` 关键字来指定每条线的标签（见 [Figure 26-13](#fig_0401-simple-line-plots_files_in_output_33_0)）。
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![output 33 0](assets/output_33_0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![output 33 0](assets/output_33_0.png)'
- en: Figure 26-13\. Plot legend example
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 26-13\. 绘图图例示例
- en: As you can see, the `plt.legend` function keeps track of the line style and
    color, and matches these with the correct label. More information on specifying
    and formatting plot legends can be found in the `plt.legend` docstring; additionally,
    we will cover some more advanced legend options in [Chapter 29](ch29.xhtml#section-0406-customizing-legends).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`plt.legend` 函数跟踪线型和颜色，并将其与正确的标签匹配。有关指定和格式化绘图图例的更多信息，请参阅 `plt.legend` 文档字符串；此外，我们将在
    [第29章](ch29.xhtml#section-0406-customizing-legends) 中涵盖一些更高级的图例选项。
- en: Matplotlib Gotchas
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib 的一些注意事项
- en: 'While most `plt` functions translate directly to `ax` methods (`plt.plot` →
    `ax.plot`, `plt.legend` → `ax.legend`, etc.), this is not the case for all commands.
    In particular, functions to set limits, labels, and titles are slightly modified.
    For transitioning between MATLAB-style functions and object-oriented methods,
    make the following changes:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数 `plt` 函数可以直接转换为 `ax` 方法（`plt.plot` → `ax.plot`，`plt.legend` → `ax.legend`
    等），但并非所有命令都是如此。特别是用于设置限制、标签和标题的功能略有修改。为了在 MATLAB 风格函数和面向对象方法之间进行过渡，请进行以下更改：
- en: '`plt.xlabel` → `ax.set_xlabel`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.xlabel` → `ax.set_xlabel`'
- en: '`plt.ylabel` → `ax.set_ylabel`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.ylabel` → `ax.set_ylabel`'
- en: '`plt.xlim` → `ax.set_xlim`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.xlim` → `ax.set_xlim`'
- en: '`plt.ylim` → `ax.set_ylim`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.ylim` → `ax.set_ylim`'
- en: '`plt.title` → `ax.set_title`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plt.title` → `ax.set_title`'
- en: In the object-oriented interface to plotting, rather than calling these functions
    individually, it is often more convenient to use the `ax.set` method to set all
    these properties at once (see [Figure 26-14](#fig_0401-simple-line-plots_files_in_output_36_0)).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象的绘图接口中，与单独调用这些函数不同，通常更方便使用 `ax.set` 方法一次性设置所有这些属性（见 [Figure 26-14](#fig_0401-simple-line-plots_files_in_output_36_0)）。
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![output 36 0](assets/output_36_0.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![output 36 0](assets/output_36_0.png)'
- en: Figure 26-14\. Example of using `ax.set` to set multiple properties at once
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 26-14\. 使用 `ax.set` 一次性设置多个属性的示例
