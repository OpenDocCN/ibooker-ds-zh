- en: Chapter 26\. Simple Line Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perhaps the simplest of all plots is the visualization of a single function
    <math alttext="y equals f left-parenthesis x right-parenthesis"><mrow><mi>y</mi>
    <mo>=</mo> <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>)</mo></mrow></math> . Here we
    will take a first look at creating a simple plot of this type. As in all the following
    chapters, we’ll start by setting up the notebook for plotting and importing the
    packages we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For all Matplotlib plots, we start by creating a figure and axes. In their simplest
    form, this can be done as follows (see [Figure 26-1](#fig_0401-simple-line-plots_files_in_output_4_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In Matplotlib, the *figure* (an instance of the class `plt.Figure`) can be
    thought of as a single container that contains all the objects representing axes,
    graphics, text, and labels. The *axes* (an instance of the class `plt.Axes`) is
    what we see above: a bounding box with ticks, grids, and labels, which will eventually
    contain the plot elements that make up our visualization. Throughout this part
    of the book, I’ll commonly use the variable name `fig` to refer to a figure instance
    and `ax` to refer to an axes instance or group of axes instances.'
  prefs: []
  type: TYPE_NORMAL
- en: '![output 4 0](assets/output_4_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-1\. An empty gridded axes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Once we have created an axes, we can use the `ax.plot` method to plot some data.
    Let’s start with a simple sinusoid, as shown in [Figure 26-2](#fig_0401-simple-line-plots_files_in_output_6_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![output 6 0](assets/output_6_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-2\. A simple sinusoid
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note that the semicolon at the end of the last line is intentional: it suppresses
    the textual representation of the plot from the output.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can use the PyLab interface and let the figure and axes be
    created for us in the background (see [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib)
    for a discussion of these two interfaces); as [Figure 26-3](#fig_0401-simple-line-plots_files_in_output_8_0)
    shows, the result is the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![output 8 0](assets/output_8_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-3\. A simple sinusoid via the object-oriented interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we want to create a single figure with multiple lines (see [Figure 26-4](#fig_0401-simple-line-plots_files_in_output_10_0)),
    we can simply call the `plot` function multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That’s all there is to plotting simple functions in Matplotlib! We’ll now dive
    into some more details about how to control the appearance of the axes and lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![output 10 0](assets/output_10_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-4\. Overplotting multiple lines
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Adjusting the Plot: Line Colors and Styles'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first adjustment you might wish to make to a plot is to control the line
    colors and styles. The `plt.plot` function takes additional arguments that can
    be used to specify these. To adjust the color, you can use the `color` keyword,
    which accepts a string argument representing virtually any imaginable color. The
    color can be specified in a variety of ways; see [Figure 26-5](#fig_0401-simple-line-plots_files_in_output_14_0)
    for the output of the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![output 14 0](assets/output_14_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-5\. Controlling the color of plot elements
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If no color is specified, Matplotlib will automatically cycle through a set
    of default colors for multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the line style can be adjusted using the `linestyle` keyword (see
    [Figure 26-6](#fig_0401-simple-line-plots_files_in_output_16_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![output 16 0](assets/output_16_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-6\. Examples of various line styles
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Though it may be less clear to someone reading your code, you can save some
    keystrokes by combining these `linestyle` and `color` codes into a single non-keyword
    argument to the `plt.plot` function; [Figure 26-7](#fig_0401-simple-line-plots_files_in_output_18_0)
    shows the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![output 18 0](assets/output_18_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-7\. Controlling colors and styles with the shorthand syntax
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These single-character color codes reflect the standard abbreviations in the
    RGB (Red/Green/Blue) and CMYK (Cyan/Magenta/Yellow/blacK) color systems, commonly
    used for digital color graphics.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other keyword arguments that can be used to fine-tune the appearance
    of the plot; for details, read through the docstring of the `plt.plot` function
    using IPython’s help tools (see [Chapter 1](ch01.xhtml#section-0101-help-and-documentation)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjusting the Plot: Axes Limits'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib does a decent job of choosing default axes limits for your plot,
    but sometimes it’s nice to have finer control. The most basic way to adjust the
    limits is to use the `plt.xlim` and `plt.ylim` functions (see [Figure 26-8](#fig_0401-simple-line-plots_files_in_output_21_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![output 21 0](assets/output_21_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-8\. Example of setting axis limits
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If for some reason you’d like either axis to be displayed in reverse, you can
    simply reverse the order of the arguments (see [Figure 26-9](#fig_0401-simple-line-plots_files_in_output_23_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![output 23 0](assets/output_23_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-9\. Example of reversing the y-axis
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A useful related method is `plt.axis` (note here the potential confusion between
    *axes* with an *e*, and *axis* with an *i*), which allows more qualitative specifications
    of axis limits. For example, you can automatically tighten the bounds around the
    current content, as shown in [Figure 26-10](#fig_0401-simple-line-plots_files_in_output_25_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![output 25 0](assets/output_25_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-10\. Example of a “tight” layout
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Or you can specify that you want an equal axis ratio, such that one unit in
    `x` is visually equivalent to one unit in `y`, as seen in [Figure 26-11](#fig_0401-simple-line-plots_files_in_output_27_0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![output 27 0](assets/output_27_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-11\. Example of an “equal” layout, with units matched to the output
    resolution
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Other axis options include `'on'`, `'off'`, `'square'`, `'image'`, and more.
    For more information on these, refer to the `plt.axis` docstring.
  prefs: []
  type: TYPE_NORMAL
- en: Labeling Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the last piece of this chapter, we’ll briefly look at the labeling of plots:
    titles, axis labels, and simple legends. Titles and axis labels are the simplest
    such labels—there are methods that can be used to quickly set them (see [Figure 26-12](#fig_0401-simple-line-plots_files_in_output_30_0)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![output 30 0](assets/output_30_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-12\. Examples of axis labels and title
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The position, size, and style of these labels can be adjusted using optional
    arguments to the functions, described in the docstrings.
  prefs: []
  type: TYPE_NORMAL
- en: When multiple lines are being shown within a single axes, it can be useful to
    create a plot legend that labels each line type. Again, Matplotlib has a built-in
    way of quickly creating such a legend; it is done via the (you guessed it) `plt.legend`
    method. Though there are several valid ways of using this, I find it easiest to
    specify the label of each line using the `label` keyword of the `plot` function
    (see [Figure 26-13](#fig_0401-simple-line-plots_files_in_output_33_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![output 33 0](assets/output_33_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-13\. Plot legend example
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see, the `plt.legend` function keeps track of the line style and
    color, and matches these with the correct label. More information on specifying
    and formatting plot legends can be found in the `plt.legend` docstring; additionally,
    we will cover some more advanced legend options in [Chapter 29](ch29.xhtml#section-0406-customizing-legends).
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib Gotchas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While most `plt` functions translate directly to `ax` methods (`plt.plot` →
    `ax.plot`, `plt.legend` → `ax.legend`, etc.), this is not the case for all commands.
    In particular, functions to set limits, labels, and titles are slightly modified.
    For transitioning between MATLAB-style functions and object-oriented methods,
    make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.xlabel` → `ax.set_xlabel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.ylabel` → `ax.set_ylabel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.xlim` → `ax.set_xlim`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.ylim` → `ax.set_ylim`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.title` → `ax.set_title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the object-oriented interface to plotting, rather than calling these functions
    individually, it is often more convenient to use the `ax.set` method to set all
    these properties at once (see [Figure 26-14](#fig_0401-simple-line-plots_files_in_output_36_0)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![output 36 0](assets/output_36_0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 26-14\. Example of using `ax.set` to set multiple properties at once
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
