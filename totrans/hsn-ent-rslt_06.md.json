["```py\nimport matplotlib.pyplot as plt\nplt.hist(df_m.apply(lambda row: len(row['ADDRESS & CONTACT\n   DETAILS'].split(',')), axis=1).tolist())\n```", "```py\ndef strip_stopwords(raw_name):\n   company_stopwords = { 'LIMITED', 'LTD', 'SERVICES', 'COMPANY',\n      'GROUP', 'PROPERTIES', 'CONSULTING', 'HOLDINGS', 'UK',\n      'TRADING', 'LTD.', 'PLC','LLP' }\n   name_without_stopwords = []\n   stopwords = []\n   for raw_name_part in raw_name.split():\n      if raw_name_part in company_stopwords:\n         stopwords.append(raw_name_part)\n      else:\n         name_without_stopwords.append(raw_name_part)\n   return(' '.join(name_without_stopwords),\n          ' '.join(stopwords))\n```", "```py\ndf_c[['CompanyName','Stopwords']] =  pd.DataFrame(\n   zip(*df_c['CompanyName'].apply(strip_stopwords))).T\n```", "```py\ndf_c = df_c.rename(columns={\"RegAddress.PostCode\": \"Postcode\"})\n```", "```py\ndf_m['CompanyName'] = df_m['COMPANY'].str.upper()\n```", "```py\nr'([A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2})'\n```", "```py\nimport re\ndef extract_postcode(address):\n   pattern = re.compile(r'([A-Z]{1,2}[0-9][A-Z0-9]?\n      [0-9][ABD-HJLNP-UW-Z]{2})')\n   postcode = pattern.search(address)\n   if(postcode is not None):\n   return postcode.group()\n      else:\n   return None\n```", "```py\ndf_m['Postcode'] = df_m.apply(lambda row:\n   extract_postcode(row['ADDRESS & CONTACT DETAILS']), axis=1)\n```", "```py\n \"blocking_rules_to_generate_predictions\":\n   [\"l.Postcode = r.Postcode\",\n    \"l.CompanyName = r.CompanyName\", ],\n```", "```py\nlinker.cumulative_num_comparisons_from_blocking_rules_chart()\n```", "```py\n\"comparisons\": [\n   cl.jaro_winkler_at_thresholds(\"CompanyName\", [0.9,0.8]),\n   cl.jaro_winkler_at_thresholds(\"Stopwords\",[0.9]),\n], \n```", "```py\nlinker.estimate_u_using_random_sampling(max_pairs=5e7)\n```", "```py\nlinker.estimate_parameters_using_expectation_maximisation(\n   \"l.Postcode = r.Postcode\")\n```", "```py\nlinker.match_weights_chart()\n```", "```py\nlinker.m_u_parameters_chart()\n```", "```py\ndf_pred = linker.predict(threshold_match_probability=0.05)\n   .as_pandas_dataframe()\n```", "```py\nresults = df_m.merge(df_pred,left_on=['unique_id'], right_on=\n   ['unique_id_r'],how='left', suffixes=('_m', '_p'))\nresults[results['match_weight'].isnull()]\n```", "```py\nlinker.waterfall_chart(df_pred.to_dict(orient=\"records\"))\n```", "```py\nrecord = {\n   'unique_id': 1,\n   'Postcode': \"BH15 4QE\",\n   'CompanyName':\"VANTAGE YACHT RECRUITMENT\",\n   'Stopwords':\"\"\n}\n\ndf_new = linker.find_matches_to_new_records([record],\n   match_weight_threshold=0).as_pandas_dataframe()\ndf_new.sort_values(\"match_weight\", ascending=False)\n```"]