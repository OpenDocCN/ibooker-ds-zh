["```py\nIn [1]: import numpy as np\n        import pandas as pd\n```", "```py\nIn [2]: vals1 = np.array([1, None, 2, 3])\n        vals1\nOut[2]: array([1, None, 2, 3], dtype=object)\n```", "```py\nIn [3]: %timeit np.arange(1E6, dtype=int).sum()\nOut[3]: 2.73 ms ± 288 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```", "```py\nIn [4]: %timeit np.arange(1E6, dtype=object).sum()\nOut[4]: 92.1 ms ± 3.42 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [5]: vals1.sum()\nTypeError: unsupported operand type(s) for +: 'int' and 'NoneType'\n```", "```py\nIn [6]: vals2 = np.array([1, np.nan, 3, 4])\n        vals2\nOut[6]: array([ 1., nan,  3.,  4.])\n```", "```py\nIn [7]: 1 + np.nan\nOut[7]: nan\n```", "```py\nIn [8]: 0 * np.nan\nOut[8]: nan\n```", "```py\nIn [9]: vals2.sum(), vals2.min(), vals2.max()\nOut[9]: (nan, nan, nan)\n```", "```py\nIn [10]: np.nansum(vals2), np.nanmin(vals2), np.nanmax(vals2)\nOut[10]: (8.0, 1.0, 4.0)\n```", "```py\nIn [11]: pd.Series([1, np.nan, 2, None])\nOut[11]: 0    1.0\n         1    NaN\n         2    2.0\n         3    NaN\n         dtype: float64\n```", "```py\nIn [12]: x = pd.Series(range(2), dtype=int)\n         x\nOut[12]: 0    0\n         1    1\n         dtype: int64\n```", "```py\nIn [13]: x[0] = None\n         x\nOut[13]: 0    NaN\n         1    1.0\n         dtype: float64\n```", "```py\nIn [14]: pd.Series([1, np.nan, 2, None, pd.NA], dtype='Int32')\nOut[14]: 0       1\n         1    <NA>\n         2       2\n         3    <NA>\n         4    <NA>\n         dtype: Int32\n```", "```py\nIn [15]: data = pd.Series([1, np.nan, 'hello', None])\n```", "```py\nIn [16]: data.isnull()\nOut[16]: 0    False\n         1     True\n         2    False\n         3     True\n         dtype: bool\n```", "```py\nIn [17]: data[data.notnull()]\nOut[17]: 0        1\n         2    hello\n         dtype: object\n```", "```py\nIn [18]: data.dropna()\nOut[18]: 0        1\n         2    hello\n         dtype: object\n```", "```py\nIn [19]: df = pd.DataFrame([[1,      np.nan, 2],\n                            [2,      3,      5],\n                            [np.nan, 4,      6]])\n         df\nOut[19]:      0    1  2\n         0  1.0  NaN  2\n         1  2.0  3.0  5\n         2  NaN  4.0  6\n```", "```py\nIn [20]: df.dropna()\nOut[20]:      0    1  2\n         1  2.0  3.0  5\n```", "```py\nIn [21]: df.dropna(axis='columns')\nOut[21]:    2\n         0  2\n         1  5\n         2  6\n```", "```py\nIn [22]: df[3] = np.nan\n         df\nOut[22]:      0    1  2   3\n         0  1.0  NaN  2 NaN\n         1  2.0  3.0  5 NaN\n         2  NaN  4.0  6 NaN\n```", "```py\nIn [23]: df.dropna(axis='columns', how='all')\nOut[23]:      0    1  2\n         0  1.0  NaN  2\n         1  2.0  3.0  5\n         2  NaN  4.0  6\n```", "```py\nIn [24]: df.dropna(axis='rows', thresh=3)\nOut[24]:      0    1  2   3\n         1  2.0  3.0  5 NaN\n```", "```py\nIn [25]: data = pd.Series([1, np.nan, 2, None, 3], index=list('abcde'),\n                           dtype='Int32')\n         data\nOut[25]: a       1\n         b    <NA>\n         c       2\n         d    <NA>\n         e       3\n         dtype: Int32\n```", "```py\nIn [26]: data.fillna(0)\nOut[26]: a    1\n         b    0\n         c    2\n         d    0\n         e    3\n         dtype: Int32\n```", "```py\nIn [27]: # forward fill\n         data.fillna(method='ffill')\nOut[27]: a    1\n         b    1\n         c    2\n         d    2\n         e    3\n         dtype: Int32\n```", "```py\nIn [28]: # back fill\n         data.fillna(method='bfill')\nOut[28]: a    1\n         b    2\n         c    2\n         d    3\n         e    3\n         dtype: Int32\n```", "```py\nIn [29]: df\nOut[29]:      0    1  2   3\n         0  1.0  NaN  2 NaN\n         1  2.0  3.0  5 NaN\n         2  NaN  4.0  6 NaN\n```", "```py\nIn [30]: df.fillna(method='ffill', axis=1)\nOut[30]:      0    1    2    3\n         0  1.0  1.0  2.0  2.0\n         1  2.0  3.0  5.0  5.0\n         2  NaN  4.0  6.0  6.0\n```"]