- en: Chapter 15\. Operating on Data in Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 15 章。在 Pandas 中操作数据
- en: One of the strengths of NumPy is that it allows us to perform quick element-wise
    operations, both with basic arithmetic (addition, subtraction, multiplication,
    etc.) and with more complicated operations (trigonometric functions, exponential
    and logarithmic functions, etc.). Pandas inherits much of this functionality from
    NumPy, and the ufuncs introduced in [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)
    are key to this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 的一个优点是它允许我们执行快速的逐元素操作，包括基本算术（加法、减法、乘法等）和更复杂的操作（三角函数、指数和对数函数等）。Pandas 从
    NumPy 继承了许多这些功能，并且在[第 6 章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)介绍的
    ufuncs 对此至关重要。
- en: 'Pandas includes a couple of useful twists, however: for unary operations like
    negation and trigonometric functions, these ufuncs will *preserve index and column
    labels* in the output, and for binary operations such as addition and multiplication,
    Pandas will automatically *align indices* when passing the objects to the ufunc.
    This means that keeping the context of data and combining data from different
    sources—both potentially error-prone tasks with raw NumPy arrays—become essentially
    foolproof with Pandas. We will additionally see that there are well-defined operations
    between one-dimensional `Series` structures and two-dimensional `DataFrame` structures.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Pandas 还包括一些有用的技巧：对于像否定和三角函数这样的一元操作，这些 ufuncs 将在输出中 *保留索引和列标签*；对于像加法和乘法这样的二元操作，当将对象传递给
    ufunc 时，Pandas 将自动 *对齐索引*。这意味着保持数据的上下文和组合来自不同来源的数据（这两个任务对于原始 NumPy 数组来说可能是错误的）在
    Pandas 中基本上变得十分简单。我们还将看到在一维 `Series` 结构和二维 `DataFrame` 结构之间存在着明确定义的操作。
- en: 'Ufuncs: Index Preservation'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ufuncs：索引保留
- en: 'Because Pandas is designed to work with NumPy, any NumPy ufunc will work on
    Pandas `Series` and `DataFrame` objects. Let’s start by defining a simple `Series`
    and `DataFrame` on which to demonstrate this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Pandas 是设计用于与 NumPy 协作的，任何 NumPy 的 ufunc 都可以在 Pandas 的 `Series` 和 `DataFrame`
    对象上使用。让我们先定义一个简单的 `Series` 和 `DataFrame` 来演示这一点：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we apply a NumPy ufunc on either of these objects, the result will be another
    Pandas object *with the indices preserved:*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这些对象中的任一对象上应用 NumPy 的 ufunc，结果将是另一个 Pandas 对象 *并保留索引*：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is true also for more involved sequences of operations:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的操作序列，情况也是如此：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Any of the ufuncs discussed in [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)
    can be used in a similar manner.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在[第 6 章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)中讨论过的 ufunc
    都可以以类似的方式使用。
- en: 'Ufuncs: Index Alignment'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ufuncs：索引对齐
- en: For binary operations on two `Series` or `DataFrame` objects, Pandas will align
    indices in the process of performing the operation. This is very convenient when
    working with incomplete data, as we’ll see in some of the examples that follow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于两个 `Series` 或 `DataFrame` 对象的二元操作，Pandas 将在执行操作的过程中对齐索引。这在处理不完整数据时非常方便，我们将在接下来的一些示例中看到。
- en: Index Alignment in Series
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Series 中的索引对齐
- en: 'As an example, suppose we are combining two different data sources and wish
    to find only the top three US states by *area* and the top three US states by
    *population*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们正在结合两个不同的数据源，并希望仅找到按 *面积* 排名前三的美国州和按 *人口* 排名前三的美国州：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s see what happens when we divide these to compute the population density:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看在进行人口密度计算时会发生什么：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The resulting array contains the *union* of indices of the two input arrays,
    which could be determined directly from these indices:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数组包含两个输入数组的索引的 *并集*，这可以直接从这些索引中确定：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Any item for which one or the other does not have an entry is marked with `NaN`,
    or “Not a Number,” which is how Pandas marks missing data (see further discussion
    of missing data in [Chapter 16](ch16.xhtml#section-0304-missing-values)). This
    index matching is implemented this way for any of Python’s built-in arithmetic
    expressions; any missing values are marked by `NaN`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任何其中一个没有条目的项目都标记有 `NaN`，即“不是数字”，这是 Pandas 标记缺失数据的方式（详见[第 16 章](ch16.xhtml#section-0304-missing-values)对缺失数据的进一步讨论）。对于
    Python 内置的任何算术表达式，都会实现这种索引匹配；任何缺失值都将被 `NaN` 标记：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If using `NaN` values is not the desired behavior, the fill value can be modified
    using appropriate object methods in place of the operators. For example, calling
    `A.add(B)` is equivalent to calling `A + B`, but allows optional explicit specification
    of the fill value for any elements in `A` or `B` that might be missing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不希望使用`NaN`值，可以使用适当的对象方法修改填充值，而不是使用操作符。例如，调用`A.add(B)`等效于调用`A + B`，但允许可选地显式指定`A`或`B`中可能缺失元素的填充值：
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Index Alignment in DataFrames
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据帧中的索引对齐
- en: 'A similar type of alignment takes place for *both* columns and indices when
    performing operations on `DataFrame` objects:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当对`DataFrame`对象进行操作时，*同时*在列和索引上进行类似的对齐：
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that indices are aligned correctly irrespective of their order in the
    two objects, and indices in the result are sorted. As was the case with `Series`,
    we can use the associated object’s arithmetic methods and pass any desired `fill_value`
    to be used in place of missing entries. Here we’ll fill with the mean of all values
    in `A`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无论这两个对象中的顺序如何，索引都正确对齐，并且结果中的索引是排序的。与`Series`一样，我们可以使用关联对象的算术方法，并传递任何希望用于替代缺失条目的`fill_value`。这里我们将用`A`中所有值的平均值填充：
- en: '[PRE13]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Table 15-1](#table-15-1) lists Python operators and their equivalent Pandas
    object methods.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[表15-1](#table-15-1)列出了Python运算符及其相应的Pandas对象方法。'
- en: Table 15-1\. Mapping between Python operators and Pandas methods
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 表15-1。Python运算符与Pandas方法的映射
- en: '| Python operator | Pandas method(s) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Python运算符 | Pandas方法 |'
- en: '| --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `+` | `add` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `+` | `add` |'
- en: '| `-` | `sub`, `subtract` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `-` | `sub`, `subtract` |'
- en: '| `*` | `mul`, `multiply` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `*` | `mul`, `multiply` |'
- en: '| `/` | `truediv`, `div`, `divide` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `/` | `truediv`, `div`, `divide` |'
- en: '| `//` | `floordiv` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `//` | `floordiv` |'
- en: '| `%` | `mod` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `%` | `mod` |'
- en: '| `**` | `pow` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `**` | `pow` |'
- en: 'Ufuncs: Operations Between DataFrames and Series'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ufuncs：DataFrame与Series之间的操作
- en: 'When performing operations between a `DataFrame` and a `Series`, the index
    and column alignment is similarly maintained, and the result is similar to operations
    between a two-dimensional and one-dimensional NumPy array. Consider one common
    operation, where we find the difference of a two-dimensional array and one of
    its rows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当对`DataFrame`和`Series`进行操作时，索引和列的对齐方式类似地保持，并且结果类似于二维数组和一维NumPy数组之间的操作。考虑一种常见的操作，即查找二维数组与其一行之间的差异：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: According to NumPy’s broadcasting rules (see [Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)),
    subtraction between a two-dimensional array and one of its rows is applied row-wise.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据NumPy的广播规则（参见[第8章](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)），二维数组与其一行之间的减法操作是逐行应用的。
- en: 'In Pandas, the convention similarly operates row-wise by default:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pandas中，默认情况下也是逐行操作的约定：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you would instead like to operate column-wise, you can use the object methods
    mentioned earlier, while specifying the `axis` keyword:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望以列为单位进行操作，可以使用前面提到的对象方法，并指定`axis`关键字：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that these `DataFrame`/`Series` operations, like the operations discussed
    previously, will automatically align indices between the two elements:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，像前面讨论过的操作一样，这些`DataFrame`/`Series`操作会自动对齐两个元素之间的索引：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This preservation and alignment of indices and columns means that operations
    on data in Pandas will always maintain the data context, which prevents the common
    errors that might arise when working with heterogeneous and/or misaligned data
    in raw NumPy arrays.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种索引和列的保留与对齐意味着在Pandas中对数据进行的操作将始终保持数据上下文，这可以防止在原始NumPy数组中处理异构和/或不对齐数据时可能出现的常见错误。
