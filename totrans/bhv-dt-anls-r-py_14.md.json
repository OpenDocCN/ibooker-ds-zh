["```py\n## R\nlibrary(blockTools) # For function block()\nlibrary(caret) # For one-hot encoding function dummyVars()\nlibrary(scales) # For function rescale()\nlibrary(lme4) # For hierarchical modeling\nlibrary(lmerTest) # For additional diagnostics of hierarchical modeling\nlibrary(nbpMatching) # To use 'optimal' algorithm in stratified randomization\nlibrary(binaryLogic) # For function as.binary()\n```", "```py\n## Python\n\"# To rescale numeric variables\nfrom sklearn.preprocessing import MinMaxScaler\n# To one-hot encode cat. variables\nfrom sklearn.preprocessing import OneHotEncoder\"\n```", "```py\n## R\n> hlm_mod <- lmer(data=hist_data, call_CSAT ~ reason + age + (1|center_ID))\n> summary(hlm_mod)\nLinear mixed model fit by REML. t-tests use Satterthwaite's method\n ['lmerModLmerTest']\nFormula: call_CSAT ~ reason + age + (1 | center_ID)\n   Data: hist_data\n\nREML criterion at convergence: 2052855\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-4.3238 -0.6627 -0.0272  0.6351  4.3114 \n\nRandom effects:\n Groups    Name        Variance Std.Dev.\n center_ID (Intercept) 1.406    1.186   \n Residual              1.122    1.059   \nNumber of obs: 695205, groups:  center_ID, 10\n\nFixed effects:\n                   Estimate     Std. Error       df      t value   Pr(>|t|)    \n(Intercept)       3.8990856    0.3749857      9.0938797   10.40 0.00000238 ***\nreasonproperty    0.1994487    0.0026669 695193.0006122   74.79    < 2e-16 ***\nage               0.0200043    0.0001132 695193.0008798  176.75    < 2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nCorrelation of Fixed Effects:\n            (Intr) rsnprp\nreasnprprty  0.000       \nage         -0.011 -0.236\n```", "```py\n## R\n> hist_data %>%\n    group_by(center_ID)%>%\n    summarize(call_CSAT = mean(call_CSAT)) %>%\n    summarize(sd = sd(call_CSAT))\n`summarise()` ungrouping output (override with `.groups` argument)\n# A tibble: 1 x 1\n     sd\n  <dbl>\n1  1.18\n```", "```py\n## R\n> hlm_mod2 <- lmer(data=hist_data, \n                   call_CSAT ~ reason + age + (1|center_ID/rep_ID),\n                   control = lmerControl(optimizer =\"Nelder_Mead\"))\n> summary(hlm_mod2)\nLinear mixed model fit by REML. t-tests use Satterthwaite's method\n ['lmerModLmerTest']\nFormula: call_CSAT ~ reason + age + (1 | center_ID/rep_ID)\n   Data: hist_data\nControl: lmerControl(optimizer = \"Nelder_Mead\")\n\nREML criterion at convergence: 1320850\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-5.0373 -0.6712 -0.0003  0.6708  4.6878 \n\nRandom effects:\n Groups           Name        Variance Std.Dev.\n rep_ID:center_ID (Intercept) 0.7696   0.8772  \n center_ID (Intercept) 1.3582   1.1654  \n Residual                     0.3904   0.6249  \nNumber of obs: 695205, groups:  rep_ID:center_ID, 193; center_ID, 10\n\nFixed effects:\n                  Estimate   Std. Error            df t value   Pr(>|t|)    \n(Intercept)     3.90099487   0.37397956      8.73974599   10.43 0.00000316 ***\nreasonproperty  0.19952547   0.00157368 695010.05594912  126.79    < 2e-16 ***\nage             0.01992162   0.00006678 695010.05053170  298.30    < 2e-16 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nCorrelation of Fixed Effects:\n            (Intr) rsnprp\nreasnprprty  0.000       \nage         -0.007 -0.236\n```", "```py\n## Python \nmixed = smf.mixedlm(\"call_CSAT ~ reason + age\", data = hist_data_df, \n                   groups = hist_data_df[\"center_ID\"])\nprint(mixed.fit().summary())\n            Mixed Linear Model Regression Results\n=============================================================\nModel:              MixedLM Dependent Variable: call_CSAT    \nNo. Observations:   695205  Method:             REML         \nNo. Groups:         10      Scale:              1.1217       \nMin. group size:    54203   Log-Likelihood:     -1026427.7247\nMax. group size:    79250   Converged:          Yes          \nMean group size:    69520.5                                  \n-------------------------------------------------------------\n                   Coef. Std.Err.    z    P>|z| [0.025 0.975]\n-------------------------------------------------------------\nIntercept          3.899    0.335  11.641 0.000  3.243  4.556\nreason[T.property] 0.199    0.003  74.786 0.000  0.194  0.205\nage                0.020    0.000 176.747 0.000  0.020  0.020\nGroup Var          1.122    0.407                            \n=============================================================\n```", "```py\n## Python\nvcf = {\"rep_ID\": \"0+C(rep_ID)\"}\nmixed2 = smf.mixedlm(\"call_CSAT ~ reason + age\", \n                   data = hist_data_df, \n                   groups = hist_data_df[\"center_ID\"],\n                   vc_formula=vcf)\nprint(mixed2.fit().summary())\n            Mixed Linear Model Regression Results\n=============================================================\nModel:             MixedLM  Dependent Variable:  call_CSAT   \nNo. Observations:  695205   Method:              REML        \nNo. Groups:        10       Scale:               0.3904      \nMin. group size:   54203    Log-Likelihood:      -660498.6462\nMax. group size:   79250    Converged:           Yes         \nMean group size:   69520.5                                   \n-------------------------------------------------------------\n                   Coef. Std.Err.    z    P>|z| [0.025 0.975]\n-------------------------------------------------------------\nIntercept          3.874    0.099  38.992 0.000  3.679  4.069\nreason[T.property] 0.200    0.002 126.789 0.000  0.196  0.203\nage                0.020    0.000 298.301 0.000  0.020  0.020\nrep_ID Var         1.904    0.303                            \n=============================================================\n```", "```py\n## R\n\n# Function to prep the data\nstrat_prep_fun <- function(dat){\n  # Extracting property-level variables\n  dat <- dat %>%\n    group_by(center_ID) %>%   ![1](Images/1.png)                                  \n    summarise(nreps = n_distinct(rep_ID),\n              avg_call_CSAT = mean(call_CSAT), \n              avg_age = mean(age),\n              pct_reason_pmt = sum(reason == 'payment')/n()) %>%\n    ungroup()\n\n  #Isolating the different components of our data\n  center_ID <- dat$center_ID  # Center identifier\n  dat <- dat %>% select(-center_ID)\n  num_vars <- dat %>%\n    #Selecting numeric variables\n    select_if(function(x) is.numeric(x)|is.integer(x)) \n\n  #Normalizing numeric variables ![2](Images/2.png)                                  \n  num_vars_out <- num_vars %>%\n    mutate_all(rescale)\n\n  #Putting the variables back together\n  dat_out <- cbind(center_ID, num_vars_out)  %>%\n    mutate(center_ID = as.character(center_ID)) %>%\n    mutate_if(is.numeric, function(x) round(x, 4)) #Rounding for readability\n  return(dat_out)}\n\nblock_wrapper_fun <- function(dat){\n\n  prepped_data <- strat_prep_fun(dat)\n\n  #Getting stratified assignment\n  assgt <- prepped_data %>% ![3](Images/3.png)                                  \n    block(id.vars = c(\"center_ID\"), n.tr = 2, \n          algorithm = \"optimal\", distance = \"euclidean\") %>%\n    assignment() \n  assgt <- assgt$assg$`1` \n  assgt <- assgt %>%\n    select(-'Distance')\n\n  assgt <- as.matrix(assgt) %>% apply(2, function(x) as.integer(x))\n  return(assgt)} ![4](Images/4.png) \n```", "```py\n## R\n     Treatment 1 Treatment 2\n[1,]           2           3\n[2,]           8           9\n[3,]           7           6\n[4,]           1           5\n[5,]          10           4\n```", "```py\n## Python\ndef strat_prep_fun(dat_df):\n  ...\n\ndef stratified_assgnt_fun(dat_df, K = 2):\n  ...\n\nstratified_assgnt_df = stratified_assgnt_fun(hist_data_df, K=2)\n```", "```py\n## R\nhlm_metric_fun <- function(dat){\n  #Estimating treatment coefficient with hierarchical regression\n  hlm_mod <- lmer(data=dat, \n                  call_CSAT ~ reason + age + group + (1|center_ID/rep_ID)\n                  ,control = lmerControl(optimizer =\"Nelder_Mead\")\n                  )\n  metric <- fixef(hlm_mod)[\"grouptreat\"]\n  return(metric)}\n```", "```py\n## Python\ndef hlm_metric_fun(dat_df):\n    vcf = {\"rep_ID\": \"0+C(rep_ID)\"}\n    h_mod = smf.mixedlm(\"call_CSAT ~ reason + age + group\", \n                    data = dat_df, \n                    groups = dat_df[\"center_ID\"],\n                    re_formula='1',\n                    vc_formula=vcf)\n    coeff = h_mod.fit().fe_params.values[2]\n    return coeff\n```", "```py\n## R\nsample_data %<%- filter(dat, month==m) %>%dplyr::group_by(rep_ID) %>%\n      slice_sample(n = Nexp) %>% dplyr::ungroup()\n```", "```py\n## Python\nsample_data_df = sample_data_df.groupby('rep_ID').sample(n=Ncalls_rep)\\\n            .reset_index(drop = True)\n```", "```py\n## Python\nfor perm in range(Nperm):\n    bin_str = f'{perm:0{Npairs}b}'   ![1](Images/1.png)         \n    idx = np.array([[i for i in range(Npairs)], ![2](Images/2.png)                    \n                    [int(d) for d in bin_str]]).T\n    treat = [stratified_pairs[tuple(idx[i])] for i in range(Npairs)] ![3](Images/3.png)\n\n    sim_data_df = sample_data_df.copy()\n    sim_data_df['group'] = 'ctrl' ![4](Images/4.png)   \n    sim_data_df.loc[(sim_data_df.center_ID.isin(treat)),'group']\\\n        = 'treat'\n```", "```py\n## R\npermutation_gen_fun <- function(i, stratified_pairs){\n  Npairs <- nrow(stratified_pairs)\n  bin_str <- as.binary(i, n=Npairs) ![1](Images/1.png)  \n  idx <- matrix(c(1:Npairs, bin_str), nrow = Npairs)\n  idx[,2] <- idx[,2] + 1  ![2](Images/2.png)                                        \n  treat <- stratified_pairs[idx] ![3](Images/3.png)                           \n  return(treat)}\n```", "```py\n## R (output not shown)\n> coeff <- hlm_metric_fun(exp_data)\n> print(coeff)\n> hlm_CI <- boot_CI_fun(exp_data, hlm_metric_fun)\n> print(hlm_CI)\n```", "```py\n## Python\ncoeff = hlm_metric_fun(exp_data_df)\nprint(coeff)\nhlm_CI = boot_CI_fun(exp_data_df, hlm_metric_fun)\nprint(hlm_CI)\n0.477903237163797\n[0.47434045128179986, 0.4815858577196438]\n```"]