- en: Chapter 11\. Sorting Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 数组排序
- en: 'Up to this point we have been concerned mainly with tools to access and operate
    on array data with NumPy. This chapter covers algorithms related to sorting values
    in NumPy arrays. These algorithms are a favorite topic in introductory computer
    science courses: if you’ve ever taken one, you probably have had dreams (or, depending
    on your temperament, nightmares) about *insertion sorts*, *selection sorts*, *merge
    sorts*, *quick sorts*, *bubble sorts*, and many, many more. All are means of accomplishing
    a similar task: sorting the values in a list or array.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要关注使用NumPy访问和操作数组数据的工具。本章涵盖了与NumPy数组中值排序相关的算法。这些算法是计算机科学导论课程的热门话题：如果你曾经参加过这样的课程，你可能曾经梦想过（或者，根据你的性格，噩梦）*插入排序*、*选择排序*、*归并排序*、*快速排序*、*冒泡排序*等等。所有这些方法都是完成相似任务的手段：对列表或数组中的值进行排序。
- en: 'Python has a couple of built-in functions and methods for sorting lists and
    other iterable objects. The `sorted` function accepts a list and returns a sorted
    version of it:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python有几个用于排序列表和其他可迭代对象的内置函数和方法。`sorted`函数接受一个列表并返回其排序版本：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By contrast, the `sort` method of lists will sort the list in-place:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，列表的`sort`方法会就地对列表进行排序：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Python’s sorting methods are quite flexible, and can handle any iterable object.
    For example, here we sort a string:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Python的排序方法非常灵活，可以处理任何可迭代对象。例如，这里我们对一个字符串进行排序：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These built-in sorting methods are convenient, but as previously discussed,
    the dynamism of Python values means that they are less performant than routines
    designed specifically for uniform arrays of numbers. This is where NumPy’s sorting
    routines come in.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内置的排序方法很方便，但正如前面讨论的那样，Python值的动态性意味着它们的性能比专门设计用于均匀数组的例程要差。这就是NumPy排序例程的用武之地。
- en: 'Fast Sorting in NumPy: np.sort and np.argsort'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'NumPy中的快速排序: np.sort 和 np.argsort'
- en: 'The `np.sort` function is analogous to Python’s built-in `sorted` function,
    and will efficiently return a sorted copy of an array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.sort`函数类似于Python的内置`sorted`函数，并且能够高效地返回数组的排序副本：'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Similarly to the `sort` method of Python lists, you can also sort an array
    in-place using the array `sort` method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于Python列表的`sort`方法，你也可以使用数组的`sort`方法原地对数组进行排序：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A related function is `argsort`, which instead returns the *indices* of the
    sorted elements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的函数是`argsort`，它返回排序元素的*索引*：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The first element of this result gives the index of the smallest element, the
    second value gives the index of the second smallest, and so on. These indices
    can then be used (via fancy indexing) to construct the sorted array if desired:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的第一个元素给出了最小元素的索引，第二个值给出了第二小的索引，依此类推。如果需要的话，这些索引可以用（通过花式索引）来构造排序后的数组：
- en: '[PRE6]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You’ll see an application of `argsort` later in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本章后面看到`argsort`的应用。
- en: Sorting Along Rows or Columns
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 沿行或列排序
- en: 'A useful feature of NumPy’s sorting algorithms is the ability to sort along
    specific rows or columns of a multidimensional array using the `axis` argument.
    For example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy排序算法的一个有用特性是可以使用`axis`参数沿着多维数组的特定行或列进行排序。例如：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Keep in mind that this treats each row or column as an independent array, and
    any relationships between the row or column values will be lost!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这将把每行或列视为独立的数组，行或列值之间的任何关系都将丢失！
- en: 'Partial Sorts: Partitioning'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '部分排序: 分区'
- en: 'Sometimes we’re not interested in sorting the entire array, but simply want
    to find the *k* smallest values in the array. NumPy enables this with the `np.partition`
    function. `np.partition` takes an array and a number *k*; the result is a new
    array with the smallest *k* values to the left of the partition and the remaining
    values to the right:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们并不想对整个数组进行排序，而只是想找出数组中最小的*k*个值。NumPy通过`np.partition`函数实现了这一点。`np.partition`接受一个数组和一个数*k*；结果是一个新数组，最小的*k*个值位于分区的左侧，剩余的值位于右侧：
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that the first three values in the resulting array are the three smallest
    in the array, and the remaining array positions contain the remaining values.
    Within the two partitions, the elements have arbitrary order.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意结果数组中的前三个值是数组中最小的三个值，剩下的数组位置包含剩余的值。在这两个分区中，元素的顺序是任意的。
- en: 'Similarly to sorting, we can partition along an arbitrary axis of a multidimensional
    array:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于排序，我们也可以沿着多维数组的任意轴进行分区：
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The result is an array where the first two slots in each row contain the smallest
    values from that row, with the remaining values filling the remaining slots.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个数组，其中每行的前两个槽包含该行的最小值，其余值填充其余槽位。
- en: Finally, just as there is an `np.argsort` function that computes indices of
    the sort, there is an `np.argpartition` function that computes indices of the
    partition. We’ll see both of these in action in the following section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，就像有一个计算排序索引的`np.argsort`函数一样，有一个计算分区索引的`np.argpartition`函数。我们将在接下来的部分中看到这两者的作用。
- en: 'Example: k-Nearest Neighbors'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：k-最近邻算法
- en: 'Let’s quickly see how we might use the `argsort` function along multiple axes
    to find the nearest neighbors of each point in a set. We’ll start by creating
    a random set of 10 points on a two-dimensional plane. Using the standard convention,
    we’ll arrange these in a <math alttext="10 times 2"><mrow><mn>10</mn> <mo>×</mo>
    <mn>2</mn></mrow></math> array:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看如何沿着多个轴使用`argsort`函数来找到集合中每个点的最近邻居。我们将从在二维平面上创建的随机10个点集开始。按照标准约定，我们将这些点排列在一个<math
    alttext="10 times 2"><mrow><mn>10</mn> <mo>×</mo> <mn>2</mn></mrow></math>数组中：
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To get an idea of how these points look, let’s generate a quick scatter plot
    (see [Figure 11-1](#fig_0208-sorting_files_in_output_30_0)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解这些点的外观，让我们生成一个快速的散点图（见[图11-1](#fig_0208-sorting_files_in_output_30_0)）。
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![output 30 0](assets/output_30_0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![output 30 0](assets/output_30_0.png)'
- en: Figure 11-1\. Visualization of points in the k-neighbors example
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-1\. k-最近邻示例中的点的可视化
- en: 'Now we’ll compute the distance between each pair of points. Recall that the
    squared distance between two points is the sum of the squared differences in each
    dimension; using the efficient broadcasting ([Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting))
    and aggregation ([Chapter 7](ch07.xhtml#section-0204-computation-on-arrays-aggregates))
    routines provided by NumPy we can compute the matrix of square distances in a
    single line of code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将计算每对点之间的距离。回想一下，两点之间的平方距离是每个维度上平方差的和；使用NumPy提供的高效广播（[第8章](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)）和聚合（[第7章](ch07.xhtml#section-0204-computation-on-arrays-aggregates)）例程，我们可以在一行代码中计算出平方距离矩阵：
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This operation has a lot packed into it, and it might be a bit confusing if
    you’re unfamiliar with NumPy’s broadcasting rules. When you come across code like
    this, it can be useful to break it down into its component steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作包含了很多内容，如果你不熟悉NumPy的广播规则，可能会感到有些困惑。当你遇到这样的代码时，将其分解为各个步骤可能会很有用：
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As a quick check of our logic, we should see that the diagonal of this matrix
    (i.e., the set of distances between each point and itself) is all zeros:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们逻辑的快速检查，我们应该看到这个矩阵的对角线（即每个点与自身之间的距离集合）全为零：
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With the pairwise square distances converted, we can now use `np.argsort` to
    sort along each row. The leftmost columns will then give the indices of the nearest
    neighbors:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦转换为成对的平方距离，我们现在可以使用`np.argsort`沿着每一行排序。最左边的列将给出最近邻居的索引：
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Notice that the first column gives the numbers 0 through 9 in order: this is
    due to the fact that each point’s closest neighbor is itself, as we would expect.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第一列按顺序给出了数字0到9：这是因为每个点的最近邻居是它自己，这是我们预期的结果。
- en: 'By using a full sort here, we’ve actually done more work than we need to in
    this case. If we’re simply interested in the nearest <math alttext="k"><mi>k</mi></math>
    neighbors, all we need to do is partition each row so that the smallest <math
    alttext="k plus 1"><mrow><mi>k</mi> <mo>+</mo> <mn>1</mn></mrow></math> squared
    distances come first, with larger distances filling the remaining positions of
    the array. We can do this with the `np.argpartition` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用完全排序，实际上做了比需要的更多的工作。如果我们只是对最近的<math alttext="k"><mi>k</mi></math>个邻居感兴趣，我们只需对每一行进行分区，使得最小的<math
    alttext="k plus 1"><mrow><mi>k</mi> <mo>+</mo> <mn>1</mn></mrow></math>个平方距离首先出现，剩余的距离填充数组的其余位置。我们可以使用`np.argpartition`函数实现这一点：
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In order to visualize this network of neighbors, let’s quickly plot the points
    along with lines representing the connections from each point to its two nearest
    neighbors (see [Figure 11-2](#fig_0208-sorting_files_in_output_44_0)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化这些邻居的网络，让我们快速绘制这些点以及代表从每个点到其两个最近邻居的连接的线条（见[图11-2](#fig_0208-sorting_files_in_output_44_0)）。
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![output 44 0](assets/output_44_0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![output 44 0](assets/output_44_0.png)'
- en: Figure 11-2\. Visualization of the nearest neighbors of each point
  id: totrans-56
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11-2\. 每个点的最近邻居的可视化
- en: 'Each point in the plot has lines drawn to its two nearest neighbors. At first
    glance, it might seem strange that some of the points have more than two lines
    coming out of them: this is due to the fact that if point A is one of the two
    nearest neighbors of point B, this does not necessarily imply that point B is
    one of the two nearest neighbors of point A.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图中的点都有线连接到其两个最近的邻居。乍一看，一些点有超过两条线连接可能会显得奇怪：这是因为如果点A是点B的两个最近邻之一，这并不一定意味着点B是点A的两个最近邻之一。
- en: 'Although the broadcasting and row-wise sorting of this approach might seem
    less straightforward than writing a loop, it turns out to be a very efficient
    way of operating on this data in Python. You might be tempted to do the same type
    of operation by manually looping through the data and sorting each set of neighbors
    individually, but this would almost certainly lead to a slower algorithm than
    the vectorized version we used. The beauty of this approach is that it’s written
    in a way that’s agnostic to the size of the input data: we could just as easily
    compute the neighbors among 100 or 1,000,000 points in any number of dimensions,
    and the code would look the same.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法的广播和行排序可能比编写循环不那么直观，但事实证明这是一种非常高效的在Python中处理这些数据的方法。您可能会尝试通过手动循环遍历数据并逐个排序每组邻居来执行相同类型的操作，但这几乎肯定会导致比我们使用的向量化版本更慢的算法。这种方法的美妙之处在于它以一种对输入数据大小不可知的方式编写：我们可以轻松地在任意维度中计算100个或1,000,000个点之间的邻居，代码看起来都一样。
- en: Finally, I’ll note that when doing very large nearest neighbor searches, there
    are tree-based and/or approximate algorithms that can scale as <math alttext="script
    upper O left-bracket upper N log upper N right-bracket"><mrow><mi>𝒪</mi> <mo>[</mo>
    <mi>N</mi> <mo form="prefix">log</mo> <mi>N</mi> <mo>]</mo></mrow></math> or better
    rather than the <math alttext="script upper O left-bracket upper N squared right-bracket"><mrow><mi>𝒪</mi>
    <mo>[</mo> <msup><mi>N</mi> <mn>2</mn></msup> <mo>]</mo></mrow></math> of the
    brute-force algorithm. One example of this is the KD-Tree, [implemented in Scikit-Learn](https://oreil.ly/lUFb8).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我要注意的是，在进行非常大的最近邻搜索时，有基于树的和/或近似算法可以扩展为<math alttext="script upper O left-bracket
    upper N log upper N right-bracket"><mrow><mi>𝒪</mi> <mo>[</mo> <mi>N</mi> <mo
    form="prefix">log</mo> <mi>N</mi> <mo>]</mo></mrow></math>或更好，而不是粗暴算法的<math alttext="script
    upper O left-bracket upper N squared right-bracket"><mrow><mi>𝒪</mi> <mo>[</mo>
    <msup><mi>N</mi> <mn>2</mn></msup> <mo>]</mo></mrow></math>。这种算法的一个例子是KD-Tree，[在Scikit-Learn中实现](https://oreil.ly/lUFb8)。
