- en: Chapter 13\. Introducing Pandas Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章. 介绍 Pandas 对象
- en: 'At a very basic level, Pandas objects can be thought of as enhanced versions
    of NumPy structured arrays in which the rows and columns are identified with labels
    rather than simple integer indices. As we will see during the course of this chapter,
    Pandas provides a host of useful tools, methods, and functionality on top of the
    basic data structures, but nearly everything that follows will require an understanding
    of what these structures are. Thus, before we go any further, let’s take a look
    at these three fundamental Pandas data structures: the `Series`, `DataFrame`,
    and `Index`.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常基本的层面上，Pandas 对象可以被认为是 NumPy 结构化数组的增强版本，其中的行和列被标签而不是简单的整数索引所标识。正如我们将在本章课程中看到的那样，Pandas
    在基本数据结构之上提供了一系列有用的工具、方法和功能，但几乎所有接下来的内容都需要理解这些结构。因此，在我们继续之前，让我们看看这三种基本的 Pandas
    数据结构：`Series`、`DataFrame` 和 `Index`。
- en: 'We will start our code sessions with the standard NumPy and Pandas imports:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从标准的 NumPy 和 Pandas 导入开始我们的代码会话：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Pandas Series Object
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas Series 对象
- en: 'A Pandas `Series` is a one-dimensional array of indexed data. It can be created
    from a list or array as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas `Series` 是一个索引数据的一维数组。它可以从列表或数组创建如下：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Series` combines a sequence of values with an explicit sequence of indices,
    which we can access with the `values` and `index` attributes. The `values` are
    simply a familiar NumPy array:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series` 将一系列值与显式的索引序列结合在一起，我们可以使用 `values` 和 `index` 属性来访问。`values` 简单地是一个熟悉的
    NumPy 数组：'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `index` is an array-like object of type `pd.Index`, which we’ll discuss
    in more detail momentarily:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`index` 是一个 `pd.Index` 类型的类似数组的对象，我们稍后会更详细地讨论：'
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Like with a NumPy array, data can be accessed by the associated index via the
    familiar Python square-bracket notation:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 数组类似，数据可以通过相关的索引使用熟悉的 Python 方括号符号进行访问：
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we will see, though, the Pandas `Series` is much more general and flexible
    than the one-dimensional NumPy array that it emulates.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将看到的，Pandas `Series` 比它模拟的一维 NumPy 数组要更加一般化和灵活。
- en: Series as Generalized NumPy Array
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为广义的 NumPy 数组的 Series
- en: From what we’ve seen so far, the `Series` object may appear to be basically
    interchangeable with a one-dimensional NumPy array. The essential difference is
    that while the NumPy array has an *implicitly defined* integer index used to access
    the values, the Pandas `Series` has an *explicitly defined* index associated with
    the values.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从目前我们所见，`Series` 对象可能看起来基本上可以与一维 NumPy 数组互换。本质上的区别在于，虽然 NumPy 数组具有用于访问值的*隐式定义*整数索引，但
    Pandas `Series` 具有与值关联的*显式定义*索引。
- en: 'This explicit index definition gives the `Series` object additional capabilities.
    For example, the index need not be an integer, but can consist of values of any
    desired type. So, if we wish, we can use strings as an index:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种显式索引定义赋予了 `Series` 对象额外的能力。例如，索引不必是整数，而可以是任何所需类型的值。所以，如果我们希望，我们可以使用字符串作为索引：
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And the item access works as expected:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 并且项目访问按预期工作：
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can even use noncontiguous or nonsequential indices:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用非连续或非顺序的索引：
- en: '[PRE8]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Series as Specialized Dictionary
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为专用字典的 Series
- en: 'In this way, you can think of a Pandas `Series` a bit like a specialization
    of a Python dictionary. A dictionary is a structure that maps arbitrary keys to
    a set of arbitrary values, and a `Series` is a structure that maps typed keys
    to a set of typed values. This typing is important: just as the type-specific
    compiled code behind a NumPy array makes it more efficient than a Python list
    for certain operations, the type information of a Pandas `Series` makes it more
    efficient than Python dictionaries for certain operations.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，你可以把 Pandas 的 `Series` 想象成 Python 字典的一个特殊版本。字典是一个将任意键映射到一组任意值的结构，而 `Series`
    是一个将类型化键映射到一组类型化值的结构。这种类型化很重要：正如 NumPy 数组背后的特定类型的编译代码使其在某些操作上比 Python 列表更高效一样，Pandas
    `Series` 的类型信息使其在某些操作上比 Python 字典更高效。
- en: 'The `Series`-as-dictionary analogy can be made even more clear by constructing
    a `Series` object directly from a Python dictionary, here the five most populous
    US states according to the 2020 census:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`-作为字典的类比可以通过直接从 Python 字典构造 `Series` 对象来更清晰地解释，例如根据 2020 年人口普查得到的五个最多人口的美国州：'
- en: '[PRE10]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From here, typical dictionary-style item access can be performed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，可以执行典型的字典式项目访问：
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Unlike a dictionary, though, the `Series` also supports array-style operations
    such as slicing:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于字典，`Series` 也支持数组式的操作，比如切片：
- en: '[PRE12]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We’ll discuss some of the quirks of Pandas indexing and slicing in [Chapter 14](ch14.xhtml#section-0302-data-indexing-and-selection).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第14章](ch14.xhtml#section-0302-data-indexing-and-selection)讨论Pandas索引和切片的一些怪癖。
- en: Constructing Series Objects
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建Series对象
- en: 'We’ve already seen a few ways of constructing a Pandas `Series` from scratch.
    All of them are some version of the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了几种从头开始构建Pandas `Series`的方法。所有这些方法都是以下版本的某种形式：
- en: '[PRE13]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: where `index` is an optional argument, and `data` can be one of many entities.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`index`是一个可选参数，`data`可以是多个实体之一。
- en: 'For example, `data` can be a list or NumPy array, in which case `index` defaults
    to an integer sequence:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`data`可以是一个列表或NumPy数组，此时`index`默认为整数序列：
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or `data` can be a scalar, which is repeated to fill the specified index:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 或者`data`可以是一个标量，它被重复以填充指定的索引：
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Or it can be a dictionary, in which case `index` defaults to the dictionary
    keys:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它可以是一个字典，此时`index`默认为字典的键：
- en: '[PRE16]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In each case, the index can be explicitly set to control the order or the subset
    of keys used:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，都可以显式设置索引以控制使用的键的顺序或子集：
- en: '[PRE17]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The Pandas DataFrame Object
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas DataFrame对象
- en: The next fundamental structure in Pandas is the `DataFrame`. Like the `Series`
    object discussed in the previous section, the `DataFrame` can be thought of either
    as a generalization of a NumPy array, or as a specialization of a Python dictionary.
    We’ll now take a look at each of these perspectives.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas中的下一个基本结构是`DataFrame`。与前一节讨论的`Series`对象类似，`DataFrame`可以被视为NumPy数组的泛化，或者Python字典的特殊化。我们现在将看看每种观点。
- en: DataFrame as Generalized NumPy Array
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame作为广义的NumPy数组
- en: If a `Series` is an analog of a one-dimensional array with explicit indices,
    a `DataFrame` is an analog of a two-dimensional array with explicit row and column
    indices. Just as you might think of a two-dimensional array as an ordered sequence
    of aligned one-dimensional columns, you can think of a `DataFrame` as a sequence
    of aligned `Series` objects. Here, by “aligned” we mean that they share the same
    index.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Series`是具有显式索引的一维数组的类比，那么`DataFrame`就是具有显式行和列索引的二维数组的类比。正如你可能把二维数组看作一系列对齐的一维列的有序序列一样，你可以把`DataFrame`看作一系列对齐的`Series`对象。这里，“对齐”意味着它们共享相同的索引。
- en: 'To demonstrate this, let’s first construct a new `Series` listing the area
    of each of the five states discussed in the previous section (in square kilometers):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们首先构建一个新的`Series`，列出前一节讨论的五个州的面积（以平方公里为单位）：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have this along with the `population` Series from before, we can
    use a dictionary to construct a single two-dimensional object containing this
    information:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了与之前的`population`系列一起的信息，我们可以使用字典构造一个包含此信息的单个二维对象：
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Like the `Series` object, the `DataFrame` has an `index` attribute that gives
    access to the index labels:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Series`对象类似，`DataFrame`还有一个`index`属性，用于访问索引标签：
- en: '[PRE20]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Additionally, the `DataFrame` has a `columns` attribute, which is an `Index`
    object holding the column labels:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`DataFrame`还有一个`columns`属性，它是一个`Index`对象，保存列标签：
- en: '[PRE21]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Thus the `DataFrame` can be thought of as a generalization of a two-dimensional
    NumPy array, where both the rows and columns have a generalized index for accessing
    the data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`DataFrame`可以被视为二维NumPy数组的泛化，其中行和列都有用于访问数据的泛化索引。
- en: DataFrame as Specialized Dictionary
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame作为特殊的字典
- en: 'Similarly, we can also think of a `DataFrame` as a specialization of a dictionary.
    Where a dictionary maps a key to a value, a `DataFrame` maps a column name to
    a `Series` of column data. For example, asking for the `''area''` attribute returns
    the `Series` object containing the areas we saw earlier:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以把`DataFrame`视为字典的特殊情况。在字典将键映射到值的情况下，`DataFrame`将列名映射到包含列数据的`Series`。例如，请求`'area'`属性将返回包含我们之前看到的面积的`Series`对象：
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Notice the potential point of confusion here: in a two-dimensional NumPy array,
    `data[0]` will return the first *row*. For a `DataFrame`, `data[''col0'']` will
    return the first *column*. Because of this, it is probably better to think about
    `DataFrame`s as generalized dictionaries rather than generalized arrays, though
    both ways of looking at the situation can be useful. We’ll explore more flexible
    means of indexing `DataFrame`s in [Chapter 14](ch14.xhtml#section-0302-data-indexing-and-selection).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里可能的混淆点：在一个二维 NumPy 数组中，`data[0]` 将返回第一行。对于 `DataFrame`，`data['col0']` 将返回第一列。因此，最好将
    `DataFrame` 视为广义的字典，而不是广义的数组，尽管两种视角都是有用的。我们将在 [第 14 章](ch14.xhtml#section-0302-data-indexing-and-selection)
    探讨更灵活的 `DataFrame` 索引方式。
- en: Constructing DataFrame Objects
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造 DataFrame 对象
- en: A Pandas `DataFrame` can be constructed in a variety of ways. Here we’ll explore
    several examples.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas `DataFrame` 可以以多种方式构建。这里我们将探讨几个例子。
- en: From a single Series object
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从单个 Series 对象
- en: 'A `DataFrame` is a collection of `Series` objects, and a single-column `DataFrame`
    can be constructed from a single `Series`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame` 是 `Series` 对象的集合，一个单列的 `DataFrame` 可以从一个单独的 `Series` 构建出来：'
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: From a list of dicts
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字典列表
- en: 'Any list of dictionaries can be made into a `DataFrame`. We’ll use a simple
    list comprehension to create some data:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 任何字典列表都可以转换成 `DataFrame`。我们将使用一个简单的列表推导来创建一些数据：
- en: '[PRE24]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Even if some keys in the dictionary are missing, Pandas will fill them in with
    `NaN` values (i.e., “Not a Number”; see [Chapter 16](ch16.xhtml#section-0304-missing-values)):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 即使字典中有些键是缺失的，Pandas 也会用 `NaN` 值（即“Not a Number”；参见 [第 16 章](ch16.xhtml#section-0304-missing-values)）来填充它们：
- en: '[PRE25]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: From a dictionary of Series objects
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从字典的 Series 对象
- en: 'As we saw before, a `DataFrame` can be constructed from a dictionary of `Series`
    objects as well:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，一个 `DataFrame` 也可以从一个字典的 `Series` 对象构建出来：
- en: '[PRE26]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: From a two-dimensional NumPy array
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从二维 NumPy 数组
- en: 'Given a two-dimensional array of data, we can create a `DataFrame` with any
    specified column and index names. If omitted, an integer index will be used for
    each:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个二维数据数组，我们可以创建一个带有指定列和索引名称的 `DataFrame`。如果省略，将使用整数索引：
- en: '[PRE27]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: From a NumPy structured array
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 NumPy 结构化数组
- en: 'We covered structured arrays in [Chapter 12](ch12.xhtml#section-0209-structured-data-numpy).
    A Pandas `DataFrame` operates much like a structured array, and can be created
    directly from one:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [第 12 章](ch12.xhtml#section-0209-structured-data-numpy) 中讨论了结构化数组。Pandas
    `DataFrame` 的操作方式与结构化数组非常相似，可以直接从结构化数组创建一个：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The Pandas Index Object
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas Index 对象
- en: 'As you’ve seen, the `Series` and `DataFrame` objects both contain an explicit
    *index* that lets you reference and modify data. This `Index` object is an interesting
    structure in itself, and it can be thought of either as an *immutable array* or
    as an *ordered set* (technically a multiset, as `Index` objects may contain repeated
    values). Those views have some interesting consequences in terms of the operations
    available on `Index` objects. As a simple example, let’s construct an `Index`
    from a list of integers:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`Series` 和 `DataFrame` 对象都包含了一个明确的*索引*，让你可以引用和修改数据。这个 `Index` 对象本身就是一个有趣的结构，它可以被看作是一个*不可变数组*或者一个*有序集合*（技术上是一个多重集合，因为
    `Index` 对象可能包含重复的值）。这些视角在 `Index` 对象上的操作上产生了一些有趣的后果。举个简单的例子，让我们从一个整数列表构造一个 `Index`：
- en: '[PRE30]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Index as Immutable Array
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为不可变数组的 Index
- en: 'The `Index` in many ways operates like an array. For example, we can use standard
    Python indexing notation to retrieve values or slices:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index` 在许多方面都像一个数组。例如，我们可以使用标准的 Python 索引表示法来检索值或切片：'
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`Index` objects also have many of the attributes familiar from NumPy arrays:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index` 对象也具有许多与 NumPy 数组相似的属性：'
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'One difference between `Index` objects and NumPy arrays is that the indices
    are immutable—that is, they cannot be modified via the normal means:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index` 对象和 NumPy 数组之间的一个区别是索引是不可变的——也就是说，它们不能通过正常的方式修改：'
- en: '[PRE34]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This immutability makes it safer to share indices between multiple `DataFrame`s
    and arrays, without the potential for side effects from inadvertent index modification.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这种不可变性使得在多个 `DataFrame` 和数组之间共享索引更加安全，避免了因无意中修改索引而产生的副作用。
- en: Index as Ordered Set
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为有序集合的 Index
- en: 'Pandas objects are designed to facilitate operations such as joins across datasets,
    which depend on many aspects of set arithmetic. The `Index` object follows many
    of the conventions used by Python’s built-in `set` data structure, so that unions,
    intersections, differences, and other combinations can be computed in a familiar
    way:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 对象旨在简化诸如跨数据集连接等操作，这些操作依赖于集合算术的许多方面。`Index` 对象遵循 Python 内置 `set` 数据结构使用的许多约定，因此可以以熟悉的方式计算并集、交集、差集和其他组合：
- en: '[PRE35]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
