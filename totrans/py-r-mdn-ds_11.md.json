["```py\n---\ntitle: \"R & Python Case Study\"\nauthor: \"Python & R for the modern data scientist\"\nruntime: shiny\n---\n```", "```py\nlibrary(tidyverse)\nlibrary(RSQLite) # SQLite\nlibrary(DBI) # R Database Interface\n```", "```py\n# Connect to an in-memory RSQLite database\ncon <- dbConnect(SQLite(), \"ch07/data/FPA_FOD_20170508.sqlite\")\n\n# Show all tables\ndbListTables(con)\n```", "```py\nfires <- dbGetQuery(con, \"\n SELECT\n STAT_CAUSE_DESCR, OWNER_CODE, DISCOVERY_DOY,\n FIRE_SIZE, LATITUDE, LONGITUDE\n FROM Fires\n WHERE (FIRE_YEAR=2015 AND STATE != 'AK' AND STATE != 'HI');\")\ndbDisconnect(con)\n\ndim(fires)\n```", "```py\nglimpse(fires)\n```", "```py\nRows: 73,688\nColumns: 6\n$ STAT_CAUSE_DESCR <chr> \"Lightning\", \"Lightning\", \"Lightning\", \"Lightning\", \"Misc…\n$ OWNER_CODE       <dbl> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 8, 5, 5, 5, …\n$ DISCOVERY_DOY    <int> 226, 232, 195, 226, 272, 181, 146, 219, 191, 192, 191, 19…\n$ FIRE_SIZE        <dbl> 0.10, 6313.00, 0.25, 0.10, 0.10, 0.25, 0.10, 0.10, 0.50, …\n$ LATITUDE         <dbl> 45.93417, 45.51528, 45.72722, 45.45556, 44.41667, 46.0522…\n$ LONGITUDE        <dbl> -113.0208, -113.2453, -112.9439, -113.7497, -112.8433, -1…\n```", "```py\ng <- ggplot(fires, aes(x = LONGITUDE,\n                  y = LATITUDE,\n                  size = FIRE_SIZE,\n                  color = factor(OWNER_CODE))) +\n  geom_point(alpha = 0.15, shape = 16) +\n  scale_size(range = c(0.5, 10)) +\n  theme_classic() +\n  theme(legend.position = \"bottom\",\n        panel.background = element_rect(fill = \"grey10\"))\n\ng\n```", "```py\ng +\n  facet_wrap(facets = vars(STAT_CAUSE_DESCR), nrow = 4)\n```", "```py\nlibrary(GGally)\nfires %>%\n  ggpairs()\n```", "```py\nggplot(fires, aes(FIRE_SIZE)) +\n  geom_density() +\n  scale_x_log10()\n```", "```py\nlibrary(leaflet)\n\nleaflet() %>%\n  addTiles() %>%\n  addMarkers(lng = df$LONGITUDE, lat = df$LATITUDE,\n  clusterOptions = markerClusterOptions()\n)\n```", "```py\nlibrary(reticulate)\n\n# Create a new virtualenv\nvirtualenv_create(\"modern_data\")\n\n# Install Python packages into this virtualenv\nlibrary(tidyverse)\nc(\"scikit-learn\", \"pandas\", \"seaborn\") %>%\n  purrr::map(~ virtualenv_install(\"modern_data\", .))\n```", "```py\n# Activate virtual environment\nuse_virtualenv(\"modern_data\", required = TRUE)\n\n# If using miniconda (windows)\n# use_condaenv(\"modern_data\")\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn. preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n```", "```py\nfeatures = [\"OWNER_CODE\", \"DISCOVERY_DOY\", \"FIRE_SIZE\", \"LATITUDE\", \"LONGITUDE\"]\nX = df[features]\ny = df[\"STAT_CAUSE_DESCR\"]\n```", "```py\nle = LabelEncoder()\ny = le.fit_transform(y)\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,\n                                                    random_state=42, stratify=y)\n```", "```py\nclf = RandomForestClassifier()\n\nclf.fit(X_train, y_train)\n\npreds = clf.predict(X_test)\n```", "```py\nconmat = metrics.confusion_matrix(y_test, preds)\nacc = metrics.accuracy_score(y_test, preds)\n```", "```py\nsource_python(\"ml.py\")\n```", "```py\nlibrary(ggplot2)\npy$conmat %>%\n  as.data.frame.table(responseName = \"value\") %>%\n  ggplot(aes(Var1, Var2, size = value)) +\n  geom_point(shape = 1)\n```", "```py\nsliderInput(\"OWNER_CODE\", \"Owner code:\",\n            min = 1, max = 15, value = 1)\nsliderInput(\"DISCOVERY_DOY\", \"Day of the year:\",\n            min = 1, max = 365, value = 36)\nsliderInput(\"FIRE_SIZE\", \"Number of bins (log10):\",\n            min = -4, max = 6, value = 1)\nsliderInput(\"LATITUDE\", \"latitude:\",\n            min = 17.965571, max = 48.9992, value = 30)\nsliderInput(\"LONGITUDE\", \"Longitude:\",\n            min = -124.6615, max = -65.321389, value = 30)\n```", "```py\nprediction <- renderText({\n  input_df <- data.frame(OWNER_CODE = input$OWNER_CODE,\n                         DISCOVERY_DOY = input$DISCOVERY_DOY,\n                         FIRE_SIZE = input$FIRE_SIZE,\n                         LATITUDE = input$LATITUDE,\n                         LONGITUDE = input$LONGITUDE)\n\n  clf$predict(r_to_py(input_df))\n})\n```"]