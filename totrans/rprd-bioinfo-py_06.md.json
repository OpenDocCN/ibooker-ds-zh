["```py\n$ cp solution1_list.py cgc.py\n$ ./cgc.py -h\nusage: cgc.py [-h] [FILE] ![1](assets/1.png)\n\nCompute GC content\n\npositional arguments:\n  FILE        Input sequence file (default: <_io.TextIOWrapper ![2](assets/2.png)\n              name='<stdin>' mode='r' encoding='utf-8'>)\n\noptional arguments:\n  -h, --help  show this help message and exit\n```", "```py\n$ touch cant-touch-this\n$ chmod 000 cant-touch-this\n```", "```py\n$ ./cgc.py cant-touch-this\nusage: cgc.py [-h] [FILE]\ncgc.py: error: argument FILE: can't open 'cant-touch-this': [Errno 13]\nPermission denied: 'cant-touch-this'\n```", "```py\n$ ./cgc.py tests/inputs/1.fa\nRosalind_0808 60.919540\n```", "```py\n$ cat tests/inputs/1.fa\n>Rosalind_6404\nCCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC\nTCCCACTAATAATTCTGAGG\n>Rosalind_5959\nCCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\nATATCCATTTGTCAGCAGACACGC\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT\n```", "```py\n$ cat tests/inputs/1.fa | ./cgc.py\nRosalind_0808 60.919540\n```", "```py\n$ ./cgc.py < tests/inputs/1.fa\nRosalind_0808 60.919540\n```", "```py\n$ new.py -fp 'Compute GC content' cgc.py\nDone, see new script \"cgc.py\".\n```", "```py\nimport argparse\nimport sys\nfrom typing import NamedTuple, TextIO, List, Tuple\nfrom Bio import SeqIO\n\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    file: TextIO ![1](assets/1.png)\n\ndef get_args() -> Args:\n    \"\"\" Get command-line arguments \"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Compute GC content',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        metavar='FILE',\n                        type=argparse.FileType('rt'), ![2](assets/2.png)\n                        nargs='?',\n                        default=sys.stdin,\n                        help='Input sequence file')\n\n    args = parser.parse_args()\n\n    return Args(args.file)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    print(args.file.name)\n```", "```py\n$ ./cgc.py tests/inputs/1.fa\ntests/inputs/1.fa\n```", "```py\n$ pytest -xv\n============================ test session starts ============================\n....\n\ntests/cgc_test.py::test_exists PASSED                                 [ 20%]\ntests/cgc_test.py::test_usage PASSED                                  [ 40%]\ntests/cgc_test.py::test_bad_input PASSED                              [ 60%]\ntests/cgc_test.py::test_good_input1 FAILED                            [ 80%]\n\n================================= FAILURES ==================================\n_____________________________ test_good_input1 ______________________________\n\n    def test_good_input1():\n        \"\"\" Works on good input \"\"\"\n\n        rv, out = getstatusoutput(f'{RUN} {SAMPLE1}') ![1](assets/1.png)\n        assert rv == 0\n>       assert out == 'Rosalind_0808 60.919540' ![2](assets/2.png)\nE       AssertionError: assert './tests/inputs/1.fa' == 'Rosalind_0808 60.919540'\nE         - Rosalind_0808 60.919540 ![3](assets/3.png)\nE         + ./tests/inputs/1.fa ![4](assets/4.png)\n\ntests/cgc_test.py:48: AssertionError\n========================== short test summary info ==========================\nFAILED tests/cgc_test.py::test_good_input1 - AssertionError: assert './tes...\n!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!\n======================== 1 failed, 3 passed in 0.34s ========================\n```", "```py\n$ cat tests/inputs/1.fa\n>Rosalind_6404 ![1](assets/1.png)\nCCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC ![2](assets/2.png)\nTCCCACTAATAATTCTGAGG\n>Rosalind_5959\nCCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCT\nATATCCATTTGTCAGCAGACACGC\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGAC\nTGGGAACCTGCGGGCAGTAGGTGGAAT\n```", "```py\n>>> from Bio import SeqIO\n>>> recs = SeqIO.parse('tests/inputs/1.fa', 'fasta') ![1](assets/1.png)\n```", "```py\n>>> type(recs)\n<class 'Bio.SeqIO.FastaIO.FastaIterator'>\n```", "```py\n>>> rec = next(recs)\n>>> type(rec)\n<class 'Bio.SeqRecord.SeqRecord'>\n```", "```py\nSeqRecord(\n  seq=Seq('CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGC...AGG'), ![1](assets/1.png)\n  id='Rosalind_6404', ![2](assets/2.png)\n  name='Rosalind_6404', ![3](assets/3.png)\n  description='Rosalind_6404',\n  dbxrefs=[])\n```", "```py\n>>> print(rec)\nID: Rosalind_6404\nName: Rosalind_6404\nDescription: Rosalind_6404\nNumber of features: 0\nSeq('CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGC...AGG')\n```", "```py\n>>> type(rec.seq)\n<class 'Bio.Seq.Seq'>\n```", "```py\n>>> str(rec.seq)\n'CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTT...AGG'\n```", "```py\n>>> rec.seq.reverse_complement()\nSeq('CCTCAGAATTATTAGTGGGAGGGAAGGCCGGAAGCCTCAGAGAAACGGTTCTGG...AGG')\n```", "```py\n>>> from Bio import SeqIO\n>>> recs = SeqIO.parse(open('./tests/inputs/1.fa'), 'fasta')\n```", "```py\n>>> for rec in recs:\n...     print(rec.id, rec.seq[:10])\n...\nRosalind_6404 CCTGCGGAAG\nRosalind_5959 CCATCGGTAG\nRosalind_0808 CCACCCTCGT\n```", "```py\n>>> for rec in recs:\n...     print(rec.id, rec.seq[:10])\n...\n```", "```py\n>>> seq = 'CCACCCTCGTGGTATGGCT'\n```", "```py\ngc = 0 ![1](assets/1.png)\nfor base in seq: ![2](assets/2.png)\n    if base in ('G', 'C'): ![3](assets/3.png)\n        gc += 1 ![4](assets/4.png)\n```", "```py\n>>> gc\n12\n>>> len(seq)\n19\n>>> gc / len(seq)\n0.631578947368421\n```", "```py\n>>> '{:0.6f}'.format(gc * 100 / len(seq))\n'63.157895'\n```", "```py\n>>> f'{gc * 100 / len(seq):0.06f}'\n'63.157895'\n```", "```py\n$ make test\npython3 -m pytest -xv --disable-pytest-warnings --flake8 --pylint\n--pylint-rcfile=../pylintrc --mypy cgc.py tests/cgc_test.py\n=========================== test session starts ===========================\n...\ncollected 10 items\n\ncgc.py::FLAKE8 SKIPPED                                              [  9%]\ncgc.py::mypy PASSED                                                 [ 18%]\ntests/cgc_test.py::FLAKE8 SKIPPED                                   [ 27%]\ntests/cgc_test.py::mypy PASSED                                      [ 36%]\ntests/cgc_test.py::test_exists PASSED                               [ 45%]\ntests/cgc_test.py::test_usage PASSED                                [ 54%]\ntests/cgc_test.py::test_bad_input PASSED                            [ 63%]\ntests/cgc_test.py::test_good_input1 PASSED                          [ 72%]\ntests/cgc_test.py::test_good_input2 PASSED                          [ 81%]\ntests/cgc_test.py::test_stdin PASSED                                [ 90%]\n::mypy PASSED                                                       [100%]\n================================== mypy ===================================\n\nSuccess: no issues found in 2 source files\n====================== 9 passed, 2 skipped in 1.67s =======================\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seqs: List[Tuple[float, str]] = [] ![1](assets/1.png)\n\n    for rec in SeqIO.parse(args.file, 'fasta'): ![2](assets/2.png)\n        gc = 0 ![3](assets/3.png)\n        for base in rec.seq.upper(): ![4](assets/4.png)\n            if base in ('C', 'G'): ![5](assets/5.png)\n                gc += 1 ![6](assets/6.png)\n        pct = (gc * 100) / len(rec.seq) ![7](assets/7.png)\n        seqs.append((pct, rec.id)) ![8](assets/8.png)\n\n    high = max(seqs) ![9](assets/9.png)\n    print(f'{high[1]} {high[0]:0.6f}') ![10](assets/10.png)\n```", "```py\n>>> sorted(['McClintock', 'Curie', 'Doudna', 'Charpentier'])\n['Charpentier', 'Curie', 'Doudna', 'McClintock']\n```", "```py\n>>> sorted([2, 10, 1])\n[1, 2, 10]\n```", "```py\n>>> sorted(['2', '10', '1'])\n['1', '10', '2']\n```", "```py\n>>> sorted([(0.2, 'foo'), (.01, 'baz'), (.01, 'bar')])\n[(0.01, 'bar'), (0.01, 'baz'), (0.2, 'foo')]\n```", "```py\n>>> high = sorted(seqs)[-1]\n```", "```py\n>>> high = max(seqs)\n```", "```py\nprint(f'{high[1]} {high[0]:0.6f}')\n```", "```py\ndef find_gc(seq: str) -> float: ![1](assets/1.png)\n    \"\"\" Calculate GC content \"\"\"\n\n    return 0\\. ![2](assets/2.png)\n```", "```py\ndef test_find_gc():\n    \"\"\" Test find_gc \"\"\"\n\n    assert find_gc('') == 0\\. ![1](assets/1.png)\n    assert find_gc('C') == 100\\. ![2](assets/2.png)\n    assert find_gc('G') == 100\\. ![3](assets/3.png)\n    assert find_gc('CGCCG') == 100\\. ![4](assets/4.png)\n    assert find_gc('ATTAA') == 0.\n    assert find_gc('ACGT') == 50.\n```", "```py\n$ pytest -v cgc.py\n============================ test session starts ============================\n...\n\ncgc.py::test_find_gc FAILED                                           [100%] ![1](assets/1.png)\n\n================================= FAILURES ==================================\n__________________________________ test_gc __________________________________\n\n    def test_find_gc():\n        \"\"\" Test find_gc \"\"\"\n\n        assert find_gc('') == 0\\. ![2](assets/2.png)\n>       assert find_gc('C') == 100\\. ![3](assets/3.png)\nE       assert 0 == 100.0\nE         +0\nE         -100.0\n\ncgc.py:74: AssertionError\n========================== short test summary info ==========================\nFAILED cgc.py::test_gc - assert 0 == 100.0\n============================= 1 failed in 0.32s =============================\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    if not seq: ![1](assets/1.png)\n        return 0 ![2](assets/2.png)\n\n    gc = 0 ![3](assets/3.png)\n    for base in seq.upper():\n        if base in ('C', 'G'):\n            gc += 1\n\n    return (gc * 100) / len(seq)\n```", "```py\n$ pytest -v cgc.py\n============================ test session starts ============================\n...\n\ncgc.py::test_gc PASSED                                                [100%]\n\n============================= 1 passed in 0.30s =============================\n```", "```py\nclass MySeq(NamedTuple):\n    \"\"\" Sequence \"\"\"\n    gc: float ![1](assets/1.png)\n    name: str ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    seqs: List[MySeq] = [] ![1](assets/1.png)\n\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        seqs.append(MySeq(find_gc(rec.seq), rec.id)) ![2](assets/2.png)\n\n    high = sorted(seqs)[-1] ![3](assets/3.png)\n    print(f'{high.name} {high.gc:0.6f}') ![4](assets/4.png)\n```", "```py\ndef main():\n    args = get_args()\n    high = MySeq(0., '') ![1](assets/1.png)\n\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        pct = find_gc(rec.seq) ![2](assets/2.png)\n        if pct > high.gc: ![3](assets/3.png)\n            high = MySeq(pct, rec.id) ![4](assets/4.png)\n\n    print(f'{high.name} {high.gc:0.6f}') ![5](assets/5.png)\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    return (seq.upper().count('C') + ![1](assets/1.png)\n            seq.upper().count('G')) * 100 / len(seq) if seq else 0 ![2](assets/2.png)\n```", "```py\n$ ./genseq.py -h\nusage: genseq.py [-h] [-l int] [-n int] [-s sigma] [-o FILE]\n\nGenerate long sequence\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l int, --len int     Average sequence length (default: 500)\n  -n int, --num int     Number of sequences (default: 1000)\n  -s sigma, --sigma sigma\n                        Sigma/STD (default: 0.1)\n  -o FILE, --outfile FILE\n                        Output file (default: seqs.fa)\n```", "```py\n$ ./genseq.py -n 10000 -o 10K.fa\nWrote 10,000 sequences of avg length 500 to \"10K.fa\".\n```", "```py\n$ hyperfine -L prg ./solution2_unit_test.py,./solution3_max_var.py '{prg} 10K.fa'\nBenchmark #1: ./solution2_unit_test.py 10K.fa\n  Time (mean ± σ):      1.546 s ±  0.035 s    [User: 2.117 s, System: 0.147 s]\n  Range (min … max):    1.511 s …  1.625 s    10 runs\n\nBenchmark #2: ./solution3_max_var.py 10K.fa\n  Time (mean ± σ):     368.7 ms ±   3.0 ms    [User: 957.7 ms, System: 137.1 ms]\n  Range (min … max):   364.9 ms … 374.7 ms    10 runs\n\nSummary\n  './solution3_max_var.py 10K.fa' ran\n    4.19 ± 0.10 times faster than './solution2_unit_test.py 10K.fa'\n```", "```py\n>>> gc = [base for base in 'CCACCCTCGTGGTATGGCT' if base in 'CG']\n>>> gc\n['C', 'C', 'C', 'C', 'C', 'C', 'G', 'G', 'G', 'G', 'G', 'C']\n```", "```py\n>>> len(gc)\n12\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    if not seq:\n        return 0\n\n    gc = len([base for base in seq.upper() if base in 'CG']) ![1](assets/1.png)\n    return (gc * 100) / len(seq)\n```", "```py\n>>> list(filter(lambda base: base in 'CG', 'CCACCCTCGTGGTATGGCT'))\n['C', 'C', 'C', 'C', 'C', 'C', 'G', 'G', 'G', 'G', 'G', 'C']\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    if not seq:\n        return 0\n\n    gc = len(list(filter(lambda base: base in 'CG', seq.upper()))) ![1](assets/1.png)\n    return (gc * 100) / len(seq)\n```", "```py\n>>> seq = 'CCACCCTCGTGGTATGGCT'\n>>> list(map(lambda base: 1 if base in 'CG' else 0, seq))\n[1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0]\n```", "```py\n>>> sum(map(lambda base: 1 if base in 'CG' else 0, seq))\n12\n```", "```py\n>>> sum(map(lambda base: base in 'CG', seq))\n12\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    if not seq:\n        return 0\n\n    gc = sum(map(lambda base: base in 'CG', seq.upper())) ![1](assets/1.png)\n    return (gc * 100) / len(seq)\n```", "```py\n>>> import re\n```", "```py\n>>> re.findall('[GC]', 'CCACCCTCGTGGTATGGCT')\n['C', 'C', 'C', 'C', 'C', 'C', 'G', 'G', 'G', 'G', 'G', 'C']\n```", "```py\ndef find_gc(seq: str) -> float:\n    \"\"\" Calculate GC content \"\"\"\n\n    return len(re.findall('[GC]', seq.upper()) * 100) / len(seq) if seq else 0\n```", "```py\ndef main() -> None:\n    args = get_args()\n    high = MySeq(0., '')\n\n    for rec in SeqIO.parse(args.file, 'fasta'):\n        pct = find_gc(str(rec.seq)) ![1](assets/1.png)\n        if pct > high.gc:\n            high = MySeq(pct, rec.id)\n\n    print(f'{high.name} {high.gc:0.6f}')\n```", "```py\ndef test_find_gc() -> None:\n    \"\"\" Test find_gc \"\"\"\n\n    assert find_gc(SeqRecord(Seq(''), id='123')) == (0.0, '123')\n    assert find_gc(SeqRecord(Seq('C'), id='ABC')) == (100.0, 'ABC')\n    assert find_gc(SeqRecord(Seq('G'), id='XYZ')) == (100.0, 'XYZ')\n    assert find_gc(SeqRecord(Seq('ACTG'), id='ABC')) == (50.0, 'ABC')\n    assert find_gc(SeqRecord(Seq('GGCC'), id='XYZ')) == (100.0, 'XYZ')\n```", "```py\n>>> from Bio.Seq import Seq\n>>> from Bio.SeqRecord import SeqRecord\n>>> seq = SeqRecord(Seq('ACTG'), id='ABC')\n```", "```py\nSeqRecord(seq=Seq('ACTG'),\n  id='ABC',\n  name='<unknown name>',\n  description='<unknown description>',\n  dbxrefs=[])\n```", "```py\ndef find_gc(rec: SeqRecord) -> MySeq: ![1](assets/1.png)\n    \"\"\" Return the GC content, record ID for a sequence \"\"\"\n\n    pct = 0\\. ![2](assets/2.png)\n    if seq := str(rec.seq): ![3](assets/3.png)\n        gc = len(re.findall('[GC]', seq.upper())) ![4](assets/4.png)\n        pct = (gc * 100) / len(seq)\n\n    return MySeq(pct, rec.id) ![5](assets/5.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    high = MySeq(0., '') ![1](assets/1.png)\n    for seq in map(find_gc, SeqIO.parse(args.file, 'fasta')): ![2](assets/2.png)\n        if seq.gc > high.gc: ![3](assets/3.png)\n            high = seq ![4](assets/4.png)\n\n    print(f'{high.name} {high.gc:0.6f}') ![5](assets/5.png)\n```", "```py\nSummary\n  './solution3_max_var.py seqs.fa' ran\n    2.15 ± 0.03 times faster than './solution8_list_comp_map.py seqs.fa'\n    3.88 ± 0.05 times faster than './solution7_re.py seqs.fa'\n    5.38 ± 0.11 times faster than './solution2_unit_test.py seqs.fa'\n    5.45 ± 0.18 times faster than './solution4_list_comp.py seqs.fa'\n    5.46 ± 0.14 times faster than './solution1_list.py seqs.fa'\n    6.22 ± 0.08 times faster than './solution6_map.py seqs.fa'\n    6.29 ± 0.14 times faster than './solution5_filter.py seqs.fa'\n```", "```py\n$ mkdir faparser\n```", "```py\n$ cd faparser/\n$ new.py -t faparser.py\nDone, see new script \"faparser.py\".\n```", "```py\n$ tree\n.\n├── Makefile\n├── faparser.py\n└── tests\n    └── faparser_test.py\n\n1 directory, 3 files\n```"]