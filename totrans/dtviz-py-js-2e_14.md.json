["```py\n$ jupyter notebook\n```", "```py\n%matplotlib [qt | osx | wx ...]\n```", "```py\n%matplotlib inline\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\nIn [0]: %matplotlib inline\n```", "```py\nfrom datetime import datetime\n\nx = pd.period_range(datetime.now(), periods=200, freq='d')![1](assets/1.png)\nx = x.to_timestamp().to_pydatetime() ![2](assets/2.png)\ny = np.random.randn(200, 3).cumsum(0) ![3](assets/3.png)\n```", "```py\nplt.plot(x, y)\n```", "```py\nimport matplotlib as mpl\nmpl.rcParams['lines.linewidth'] = 2\nmpl.rcParams['lines.color'] = 'r' # red\n```", "```py\n# Two ways to set the figure size to 8 by 4 inches\nplt.rcParams['figure.figsize'] = (8,4)\nplt.gcf().set_size_inches(8, 4)\n```", "```py\n#plots = plt.plot(x,y)\nplots = plt.plot(x, y[:,0], '-', x, y[:,1], '--', x, y[:,2], '-.')\nplots\nOut:\n[<matplotlib.lines.Line2D at 0x9b31a90>,\n <matplotlib.lines.Line2D at 0x9b4da90>,\n <matplotlib.lines.Line2D at 0x9b4dcd0>]\n```", "```py\nplt.legend(plots, ('foo', 'bar', 'baz'), ![1](assets/1.png)\n           loc='best', ![2](assets/2.png)\n           framealpha=0.5, ![3](assets/3.png)\n           prop={'size':'small', 'family':'monospace'}) ![4](assets/4.png)\n```", "```py\nplt.title('Random trends')\nplt.xlabel('Date')\nplt.ylabel('Cum. sum')\n```", "```py\nplt.figtext(0.995, 0.01, ![1](assets/1.png)\n            '© Acme designs 2022',\n            ha='right', va='bottom') ![2](assets/2.png)\n```", "```py\nplots = plt.plot(x, y[:,0], '-', x, y[:,1], '--', x, y[:,2], '-.')\nplt.legend(plots, ('foo', 'bar', 'baz'), loc='best,\n                    framealpha=0.25,\n                    prop={'size':'small', 'family':'monospace'})\nplt.gcf().set_size_inches(8, 4)\nplt.title('Random trends')\nplt.xlabel('Date')\nplt.ylabel('Cum. sum')\nplt.grid(True) ![1](assets/1.png)\nplt.figtext(0.995, 0.01, '© Acme Designs 2021',\nha='right', va='bottom')\nplt.tight_layout() ![2](assets/2.png)\n```", "```py\nplt.gcf().set_tight_layout(True)\n```", "```py\nplt.tight_layout() # force plot into figure dimensions\nplt.savefig('mpl_3lines_custom.svg')\n```", "```py\nfig = plt.figure(\n          figsize=(8, 4), # figure size in inches\n          dpi=200, # dots per inch\n          tight_layout=True, # fit axes, labels, etc. to canvas\n          linewidth=1, edgecolor='r' # 1 pixel wide, red border\n          )\n```", "```py\n# h = height, w = width\nfig.add_axes([0.2, 0.2, #[bottom(h*0.2), left(w*0.2),\n              0.8, 0.8])# top(h*0.8), right(w*0.8)]\n```", "```py\nfig = plt.figure(figsize=(8,4))\n# --- Main Axes\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\nax.set_title('Main Axes with Insert Child Axes')\nax.plot(x, y[:,0]) ![1](assets/1.png)\nax.set_xlabel('Date')\nax.set_ylabel('Cum. sum')\n# --- Inserted Axes\nax = fig.add_axes([0.15, 0.15, 0.3, 0.3])\nax.plot(x, y[:,1], color='g') # 'g' for green\nax.set_xticks([]); ![2](assets/2.png)\n```", "```py\nfigure, ax = plt.subplots()\nplots = ax.plot(x, y, label='')\nfigure.set_size_inches(8, 4)\nax.legend(plots, ('foo', 'bar', 'baz'), loc='best', framealpha=0.25,\n          prop={'size':'small', 'family':'monospace'})\nax.set_title('Random trends')\nax.set_xlabel('Date')\nax.set_ylabel('Cum. sum')\nax.grid(True)\nfigure.text(0.995, 0.01, '©  Acme Designs 2022',\n            ha='right', va='bottom')\nfigure.tight_layout()\n```", "```py\nfig, axes = plt.subplots(\n                    nrows=3, ncols=1, ![1](assets/1.png)\n                    sharex=True, sharey=True, ![2](assets/2.png)\n                    figsize=(8, 8))\nlabelled_data = zip(y.transpose(), ![3](assets/3.png)\n                    ('foo', 'bar', 'baz'), ('b', 'g', 'r'))\nfig.suptitle('Three Random Trends', fontsize=16)\nfor i, ld in enumerate(labelled_data):\n    ax = axes[i]\n    ax.plot(x, ld[0], label=ld[1], color=ld[2])\n    ax.set_ylabel('Cum. sum')\n    ax.legend(loc='upper left', framealpha=0.5,\n              prop={'size':'small'})\naxes[-1].set_xlabel('Date') ![4](assets/4.png)\n```", "```py\nletters = ['a', 'b']\nnumbers = [1, 2]\nzip(letters, numbers)\nOut:\n[('a', 1), ('b', 2)]\n```", "```py\nlabels = [\"Physics\", \"Chemistry\", \"Literature\", \"Peace\"]\nfoo_data =   [3, 6, 10, 4]\n\nbar_width = 0.5\nxlocations = np.array(range(len(foo_data))) + bar_width ![1](assets/1.png)\nplt.bar(xlocations, foo_data, width=bar_width)\nplt.yticks(range(0, 12)) ![2](assets/2.png)\nplt.xticks(xlocations, labels) ![3](assets/3.png)\nplt.title(\"Prizes won by Fooland\")\nplt.gca().get_xaxis().tick_bottom()\nplt.gca().get_yaxis().tick_left()\nplt.gcf().set_size_inches((8, 4))\n```", "```py\nax.get_xlim()\n# Out: (-0.5, 3.5)\n```", "```py\nlabels = [\"Physics\", \"Chemistry\", \"Literature\", \"Peace\"]\nfoo_data = [3, 6, 10, 4]\nbar_data = [8, 3, 6, 1]\n\nfig, ax = plt.subplots(figsize=(8, 4))\nbar_width = 0.4 ![1](assets/1.png)\nxlocs = np.arange(len(foo_data))\nax.bar(xlocs-bar_width, foo_data, bar_width,\n       color='#fde0bc', label='Fooland') ![2](assets/2.png)\nax.bar(xlocs, bar_data, bar_width, color='peru', label='Barland')\n#--- ticks, labels, grids, and title\nax.set_yticks(range(12))\nax.set_xticks(ticks=range(len(foo_data)))\nax.set_xticklabels(labels)\nax.yaxis.grid(True)\nax.legend(loc='best')\nax.set_ylabel('Number of prizes')\nfig.suptitle('Prizes by country')\nfig.tight_layout(pad=2) ![3](assets/3.png)\nfig.savefig('mpl_barchart_multi.png', dpi=200) ![4](assets/4.png)\n```", "```py\n# ...\nylocs = np.arange(len(foo_data))\nax.barh(ylocs-bar_width, foo_data, bar_width, color='#fde0bc',\n        label='Fooland') ![1](assets/1.png)\nax.barh(ylocs, bar_data, bar_width, color='peru', label='Barland')\n# --- labels, grids and title, then save\nax.set_xticks(range(12)) ![2](assets/2.png)\nax.set_yticks(ticks=ylocs-bar_width/2)\nax.set_yticklabels(labels)\nax.xaxis.grid(True)\nax.legend(loc='best')\nax.set_xlabel('Number of prizes')\n# ...\n```", "```py\n# ...\nbar_width = 0.8\nxlocs = np.arange(len(foo_data))\nax.bar(xlocs, foo_data, bar_width, color='#fde0bc', ![1](assets/1.png)\n       label='Fooland')\nax.bar(xlocs, bar_data, bar_width, color='peru',    ![2](assets/2.png)\n       label='Barland', bottom=foo_data)\n# --- labels, grids and title, then save\nax.set_yticks(range(18))\nax.set_xticks(ticks=xlocs)\nax.set_xticklabels(labels)\n# ...\n```", "```py\nnum_points = 100\ngradient = 0.5\nx = np.array(range(num_points))\ny = np.random.randn(num_points) * 10 + x*gradient ![1](assets/1.png)\nfig, ax = plt.subplots(figsize=(8, 4))\nax.scatter(x, y) ![2](assets/2.png)\n\nfig.suptitle('A Simple Scatterplot')\n```", "```py\nnum_points = 100\ngradient = 0.5\nx = np.array(range(num_points))\ny = np.random.randn(num_points) * 10 + x*gradient\nfig, ax = plt.subplots(figsize=(8, 4))\ncolors = np.random.rand(num_points) ![1](assets/1.png)\nsize = np.pi * (2 + np.random.rand(num_points) * 8) ** 2 ![2](assets/2.png)\nax.scatter(x, y, s=size, c=colors, alpha=0.5) ![3](assets/3.png)\nfig.suptitle('Scatterplot with Color and Size Specified')\n```", "```py\nnum_points = 100\ngradient = 0.5\nx = np.array(range(num_points))\ny = np.random.randn(num_points) * 10 + x*gradient\nfig, ax = plt.subplots(figsize=(8, 4))\nax.scatter(x, y)\nm, c = np.polyfit(x, y ,1) ![1](assets/1.png)\nax.plot(x, m*x + c) ![2](assets/2.png)\nfig.suptitle('Scatterplot With Regression-line')\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns # relies on matplotlib\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```", "```py\nmatplotlib.style.use('seaborn')\n```", "```py\ndata = pd.DataFrame({'dummy x':x, 'dummy y':y})\n```", "```py\ndata = pd.DataFrame({'dummy x':x, 'dummy y':y})\nsns.lmplot(data=data, x='dummy x', y='dummy y', ![1](assets/1.png)\n           height=4, aspect=2) ![2](assets/2.png)\nplt.tight_layout() ![3](assets/3.png)\nplt.savefig('mpl_scatter_seaborn.png') ![3](assets/3.png)\n```", "```py\nsns.lmplot(data=data, x='dummy x', y='dummy y', height=4, aspect=2,\n           scatter_kws={\"color\": \"slategray\"}, ![1](assets/1.png)\n           line_kws={\"linewidth\": 2, \"linestyle\":'--', ![2](assets/2.png)\n                     \"color\": \"seagreen\"},\n           markers='D', ![3](assets/3.png)\n           ci=68) ![4](assets/4.png)\n```", "```py\nIn [0]: tips = sns.load_dataset('tips')\nOut[0]:\n     total_bill   tip     sex smoker   day    time  size\n0         16.99  1.01  Female     No   Sun  Dinner     2\n1         10.34  1.66    Male     No   Sun  Dinner     3\n2         21.01  3.50    Male     No   Sun  Dinner     3\n3         23.68  3.31    Male     No   Sun  Dinner     2\n...\n```", "```py\ng = sns.FacetGrid(tips, col=\"smoker\", height=4, aspect=1)\ng.map(plt.scatter, \"total_bill\", \"tip\") ![1](assets/1.png)\n```", "```py\npal = dict(Female='red', Male='blue')\ng = sns.FacetGrid(tips, col=\"smoker\",\n                  hue=\"sex\", hue_kws={\"marker\": [\"D\", \"s\"]}, ![1](assets/1.png)\n                  palette=pal, height=4, aspect=1, )\ng.map(plt.scatter, \"total_bill\", \"tip\", alpha=.4)\ng.add_legend();\n```", "```py\npal = dict(Female='red', Male='blue')\ng = sns.FacetGrid(tips, col=\"smoker\", row=\"time\", ![1](assets/1.png)\n                  hue=\"sex\", hue_kws={\"marker\": [\"D\", \"s\"]},\n                  palette=pal, height=4, aspect=1, )\ng.map(sns.regplot, \"total_bill\", \"tip\", alpha=.4)\ng.add_legend();\n```", "```py\npal = dict(Female='red', Male='blue')\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"sex\",\n           markers=[\"D\", \"s\"], ![1](assets/1.png)\n           col=\"smoker\", row=\"time\", data=tips, palette=pal,\n           height=4, aspect=1\n           );\n```", "```py\nIn [0]: iris = sns.load_dataset('iris')\nIn [1]: iris.head()\nOut[1]:\n   sepal_length sepal_width  petal_length  petal_width  species\n0           5.1         3.5           1.4          0.2   setosa\n1           4.9         3.0           1.4          0.2   setosa\n2           4.7         3.2           1.3          0.2   setosa\n...\n```", "```py\nsns.set_theme(font_scale=1.5) ![1](assets/1.png)\ng = sns.PairGrid(iris, hue=\"species\") ![2](assets/2.png)\ng.map_diag(plt.hist) ![3](assets/3.png)\ng.map_offdiag(plt.scatter) ![4](assets/4.png)\ng.add_legend();\n```"]