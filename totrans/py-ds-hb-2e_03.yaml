- en: Chapter 2\. Enhanced Interactive Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much of the power of IPython and Jupyter comes from the additional interactive
    tools they make available. This chapter will cover a number of those tools, including
    so-called magic commands, tools for exploring input and output history, and tools
    to interact with the shell.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: IPython Magic Commands
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapter showed how IPython lets you use and explore Python efficiently
    and interactively. Here we’ll begin discussing some of the enhancements that IPython
    adds on top of the normal Python syntax. These are known in IPython as *magic
    commands*, and are prefixed by the `%` character. These magic commands are designed
    to succinctly solve various common problems in standard data analysis. Magic commands
    come in two flavors: *line magics*, which are denoted by a single `%` prefix and
    operate on a single line of input, and *cell magics*, which are denoted by a double
    `%%` prefix and operate on multiple lines of input. I’ll demonstrate and discuss
    a few brief examples here, and come back to a more focused discussion of several
    useful magic commands later.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Running External Code: %run'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you begin developing more extensive code, you will likely find yourself working
    in IPython for interactive exploration, as well as a text editor to store code
    that you want to reuse. Rather than running this code in a new window, it can
    be convenient to run it within your IPython session. This can be done with the
    `%run` magic command.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine you’ve created a *myscript.py* file with the following
    contents:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can execute this from your IPython session as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note also that after you’ve run this script, any functions defined within it
    are available for use in your IPython session:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are several options to fine-tune how your code is run; you can see the
    documentation in the normal way, by typing **`%run?`** in the IPython interpreter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Timing Code Execution: %timeit'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another example of a useful magic function is `%timeit`, which will automatically
    determine the execution time of the single-line Python statement that follows
    it. For example, we may want to check the performance of a list comprehension:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The benefit of `%timeit` is that for short commands it will automatically perform
    multiple runs in order to attain more robust results. For multiline statements,
    adding a second `%` sign will turn this into a cell magic that can handle multiple
    lines of input. For example, here’s the equivalent construction with a `for` loop:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can immediately see that list comprehensions are about 10% faster than the
    equivalent `for` loop construction in this case. We’ll explore `%timeit` and other
    approaches to timing and profiling code in [“Profiling and Timing Code”](ch03.xhtml#section-0107-timing-and-profiling).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Help on Magic Functions: ?, %magic, and %lsmagic'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like normal Python functions, IPython magic functions have docstrings, and
    this useful documentation can be accessed in the standard manner. So, for example,
    to read the documentation of the `%timeit` magic function, simply type this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Documentation for other functions can be accessed similarly. To access a general
    description of available magic functions, including some examples, you can type
    this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For a quick and simple list of all available magic functions, type this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, I’ll mention that it is quite straightforward to define your own magic
    functions if you wish. I won’t discuss it here, but if you are interested, see
    the references listed in [“More IPython Resources”](ch03.xhtml#section-0108-more-ipython-resources).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Input and Output History
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously you saw that the IPython shell allows you to access previous commands
    with the up and down arrow keys, or equivalently the Ctrl-p/Ctrl-n shortcuts.
    Additionally, in both the shell and notebooks, IPython exposes several ways to
    obtain the output of previous commands, as well as string versions of the commands
    themselves. We’ll explore those here.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: IPython’s In and Out Objects
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now I imagine you’re becoming familiar with the `In [1]:`/`Out[1]:` style
    of prompts used by IPython. But it turns out that these are not just pretty decoration:
    they give a clue as to how you can access previous inputs and outputs in your
    current session. Suppose we start a session that looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We’ve imported the built-in `math` package, then computed the sine and the
    cosine of the number 2\. These inputs and outputs are displayed in the shell with
    `In`/`Out` labels, but there’s more—IPython actually creates some Python variables
    called `In` and `Out` that are automatically updated to reflect this history:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `In` object is a list, which keeps track of the commands in order (the
    first item in the list is a placeholder so that `In [1]` can refer to the first
    command):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `Out` object is not a list but a dictionary mapping input numbers to their
    outputs (if any):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that not all operations have outputs: for example, `import` statements
    and `print` statements don’t affect the output. The latter may be surprising,
    but makes sense if you consider that `print` is a function that returns `None`;
    for brevity, any command that returns `None` is not added to `Out`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be useful when you want to interact with past results. For example,
    let’s check the sum of `sin(2) ** 2` and `cos(2) ** 2` using the previously computed
    results:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The result is `1.0`, as we’d expect from the well-known trigonometric identity.
    In this case, using these previous results probably is not necessary, but it can
    become quite handy if you execute a very expensive computation and forget to assign
    the result to a variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Underscore Shortcuts and Previous Outputs
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standard Python shell contains just one simple shortcut for accessing previous
    output: the variable `_` (i.e., a single underscore) is kept updated with the
    previous output. This works in IPython as well:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 标准 Python shell 仅包含一种简单的快捷方式用于访问先前的输出：变量 `_`（即一个下划线）会随先前的输出更新。这在 IPython 中也适用：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'But IPython takes this a bit further—you can use a double underscore to access
    the second-to-last output, and a triple underscore to access the third-to-last
    output (skipping any commands with no output):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 IPython 进一步扩展了这一点 — 您可以使用双下划线访问倒数第二个输出，并使用三个下划线访问倒数第三个输出（跳过任何没有输出的命令）：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'IPython stops there: more than three underscores starts to get a bit hard to
    count, and at that point it’s easier to refer to the output by line number.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: IPython 到此为止：超过三个下划线开始变得有点难以计数，此时通过行号更容易引用输出。
- en: 'There is one more shortcut I should mention, however—a shorthand for `Out[*X*]`
    is `_*X*` (i.e., a single underscore followed by the line number):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我还应该提一下另一个快捷方式 — `Out[*X*]` 的简写是 `_*X*`（即一个下划线后跟行号）：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Suppressing Output
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁止输出
- en: 'Sometimes you might wish to suppress the output of a statement (this is perhaps
    most common with the plotting commands that we’ll explore in [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib)).
    Or maybe the command you’re executing produces a result that you’d prefer not
    to store in your output history, perhaps so that it can be deallocated when other
    references are removed. The easiest way to suppress the output of a command is
    to add a semicolon to the end of the line:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您可能希望抑制语句的输出（这在我们将在[第四部分](part04.xhtml#section-0400-introduction-to-matplotlib)探索的绘图命令中可能最常见）。或者，您执行的命令会产生一个您不希望存储在输出历史记录中的结果，也许是因为在其他引用被移除时它可以被释放。抑制命令的输出最简单的方法是在行尾添加分号：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result is computed silently, and the output is neither displayed on the
    screen nor stored in the `Out` dictionary:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将在不显示在屏幕上或存储在 `Out` 字典中的情况下计算：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Related Magic Commands
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关的魔术命令
- en: 'For accessing a batch of previous inputs at once, the `%history` magic command
    is very helpful. Here is how you can print the first four inputs:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要一次访问一批先前的输入，`%history` 魔术命令非常有帮助。以下是如何打印前四个输入：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As usual, you can type `%history?` for more information and a description of
    options available (see [Chapter 1](ch01.xhtml#section-0101-help-and-documentation)
    for details on the `?` functionality). Other useful magic commands are `%rerun`,
    which will re-execute some portion of the command history, and `%save`, which
    saves some set of the command history to a file).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，您可以输入 `%history?` 以获取更多信息并查看可用选项的描述（有关 `?` 功能的详细信息，请参见[第一章](ch01.xhtml#section-0101-help-and-documentation)）。其他有用的魔术命令包括
    `%rerun`，它将重新执行命令历史记录的某些部分，以及 `%save`，它将命令历史记录的某个集合保存到文件中。
- en: IPython and Shell Commands
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPython 和 Shell 命令
- en: 'When working interactively with the standard Python interpreter, one of the
    frustrations is the need to switch between multiple windows to access Python tools
    and system command-line tools. IPython bridges this gap and gives you a syntax
    for executing shell commands directly from within the IPython terminal. The magic
    happens with the exclamation point: anything appearing after `!` on a line will
    be executed not by the Python kernel, but by the system command line.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在与标准 Python 解释器的交互工作时，一个令人沮丧的地方是需要在多个窗口之间切换以访问 Python 工具和系统命令行工具。IPython 弥合了这一差距，并为您提供了在
    IPython 终端内直接执行 shell 命令的语法。这是通过感叹号实现的：在 `!` 后出现的任何内容将不会由 Python 内核执行，而是由系统命令行执行。
- en: The following discussion assumes you’re on a Unix-like system, such as Linux
    or macOS. Some of the examples that follow will fail on Windows, which uses a
    different type of shell by default, though if you use the [*Windows Subsystem
    for Linux*](https://oreil.ly/H5MEE) the examples here should run correctly. If
    you’re unfamiliar with shell commands, I’d suggest reviewing the [Unix shell tutorial](https://oreil.ly/RrD2Y)
    put together by the always excellent Software Carpentry Foundation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下讨论假定您正在使用类 Unix 系统，如 Linux 或 macOS。接下来的一些示例在 Windows 上会失败，因为 Windows 默认使用不同类型的
    shell，但如果您使用[*Windows 子系统 for Linux*](https://oreil.ly/H5MEE)，这里的示例应该能正常运行。如果您对
    shell 命令不熟悉，我建议您查看由始终优秀的软件教程基金会组织的[Unix shell 教程](https://oreil.ly/RrD2Y)。
- en: Quick Introduction to the Shell
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell 快速入门
- en: 'A full introduction to using the shell/terminal/command line is well beyond
    the scope of this chapter, but for the uninitiated I will offer a quick introduction
    here. The shell is a way to interact textually with your computer. Ever since
    the mid-1980s, when Microsoft and Apple introduced the first versions of their
    now ubiquitous graphical operating systems, most computer users have interacted
    with their operating systems through the familiar menu selections and drag-and-drop
    movements. But operating systems existed long before these graphical user interfaces,
    and were primarily controlled through sequences of text input: at the prompt,
    the user would type a command, and the computer would do what the user told it
    to. Those early prompt systems were the precursors of the shells and terminals
    that most data scientists still use today.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于如何使用shell/终端/命令行的全面介绍远远超出了本章的范围，但对于未接触过的人，我将在这里进行一个快速介绍。shell是一种与计算机进行文本交互的方式。自从20世纪80年代中期以来，当微软和苹果推出了他们现在无处不在的图形操作系统的第一个版本时，大多数计算机用户通过熟悉的菜单选择和拖放操作与他们的操作系统交互。但是操作系统在这些图形用户界面之前就存在，主要通过文本输入的序列来控制：在提示符下，用户会输入一个命令，计算机会执行用户告诉它做的事情。那些早期的提示系统是今天大多数数据科学家仍在使用的shell和终端的前身。
- en: 'Someone unfamiliar with the shell might ask why you would bother with this,
    when many of the same results can be accomplished by simply clicking on icons
    and menus. A shell user might reply with another question: why hunt for icons
    and menu items when you can accomplish things much more easily by typing? While
    it might sound like a typical tech preference impasse, when moving beyond basic
    tasks it quickly becomes clear that the shell offers much more control of advanced
    tasks—though admittedly the learning curve can be intimidating.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉shell的人可能会问，为什么要费这个劲，当很多相同的结果可以通过简单点击图标和菜单来实现呢？一个shell用户可能会反问：为什么要去寻找图标和菜单项，而不是通过输入命令来更轻松地完成任务呢？虽然这听起来像是典型的技术偏好僵局，但当超越基本任务时，很快就会明显地感觉到shell在控制高级任务方面提供了更多的控制权——尽管学习曲线确实可能令人望而生畏。
- en: 'As an example, here is a sample of a Linux/macOS shell session where a user
    explores, creates, and modifies directories and files on their system (`osx:~
    $` is the prompt, and everything after the `$` is the typed command; text that
    is preceded by a `#` is meant just as description, rather than something you would
    actually type in):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里是一个Linux/macOS shell会话的示例，用户在其系统上探索、创建和修改目录和文件（`osx:~ $`是提示符，`$`之后的所有内容是键入的命令；以`#`开头的文本仅用作描述，而不是您实际要键入的内容）：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that all of this is just a compact way to do familiar operations (navigating
    a directory structure, creating a directory, moving a file, etc.) by typing commands
    rather than clicking icons and menus. With just a few commands (`pwd`, `ls`, `cd`,
    `mkdir`, and `cp`) you can do many of the most common file operations, but it’s
    when you go beyond these basics that the shell approach becomes really powerful.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有这些只是通过键入命令而不是点击图标和菜单来执行熟悉操作（导航目录结构、创建目录、移动文件等）的一种紧凑方式。仅仅几个命令（`pwd`、`ls`、`cd`、`mkdir`和`cp`）就可以完成许多最常见的文件操作，但当您超越这些基础操作时，shell方法真正显示其强大之处。
- en: Shell Commands in IPython
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IPython中的Shell命令
- en: 'Any standard shell command can be used directly in IPython by prefixing it
    with the `!` character. For example, the `ls`, `pwd`, and `echo` commands can
    be run as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 任何标准的shell命令都可以通过在其前面加上`!`字符直接在IPython中使用。例如，`ls`、`pwd`和`echo`命令可以如下运行：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Passing Values to and from the Shell
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向Shell传递值和从Shell获取值
- en: 'Shell commands can not only be called from IPython, but can also be made to
    interact with the IPython namespace. For example, you can save the output of any
    shell command to a Python list using the assignment operator, `=`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Shell命令不仅可以从IPython中调用，还可以与IPython命名空间交互。例如，您可以使用赋值操作符`=`将任何shell命令的输出保存到Python列表中：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'These results are not returned as lists, but as a special shell return type
    defined in IPython:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果不会以列表的形式返回，而是以IPython中定义的特殊的shell返回类型返回：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This looks and acts a lot like a Python list but has additional functionality,
    such as the `grep` and `fields` methods and the `s`, `n`, and `p` properties that
    allow you to search, filter, and display the results in convenient ways. For more
    information on these, you can use IPython’s built-in help features.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来和行为很像Python列表，但具有额外的功能，比如`grep`和`fields`方法以及允许您以方便的方式搜索、过滤和显示结果的`s`、`n`和`p`属性。有关这些信息，您可以使用IPython内置的帮助功能。
- en: 'Communication in the other direction—passing Python variables into the shell—is
    possible using the `{*varname*}` syntax:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `{*varname*}` 语法将 Python 变量传递到 shell 中，实现双向通信：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The curly braces contain the variable name, which is replaced by the variable’s
    contents in the shell command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号中包含变量名，这个变量名在 shell 命令中会被替换为变量的内容。
- en: Shell-Related Magic Commands
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Shell 相关的魔术命令
- en: 'If you play with IPython’s shell commands for a while, you might notice that
    you cannot use `!cd` to navigate the filesystem:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 IPython 的 shell 命令中尝试了一段时间，你可能会注意到无法使用 `!cd` 来导航文件系统：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The reason is that shell commands in the notebook are executed in a temporary
    subshell that does not maintain state from command to command. If you’d like to
    change the working directory in a more enduring way, you can use the `%cd` magic
    command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为笔记本中的 shell 命令是在一个临时子 shell 中执行的，这个 shell 并不保留命令之间的状态。如果你想更持久地改变工作目录，可以使用
    `%cd` 魔术命令：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In fact, by default you can even use this without the `%` sign:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，默认情况下你甚至可以不带 `%` 符号使用这些功能：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is known as an *automagic* function, and the ability to execute such commands
    without an explicit `%` can be toggled with the `%automagic` magic function.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为*自动魔术*函数，可以通过 `%automagic` 魔术函数切换执行这些命令时是否需要显式 `%` 符号。
- en: 'Besides `%cd`, other available shell-like magic functions are `%cat`, `%cp`,
    `%env`, `%ls`, `%man`, `%mkdir`, `%more`, `%mv`, `%pwd`, `%rm`, and `%rmdir`,
    any of which can be used without the `%` sign if `automagic` is on. This makes
    it so that you can almost treat the IPython prompt as if it’s a normal shell:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `%cd`，还有其他可用的类似 shell 的魔术函数，如 `%cat`、`%cp`、`%env`、`%ls`、`%man`、`%mkdir`、`%more`、`%mv`、`%pwd`、`%rm`
    和 `%rmdir`，如果 `automagic` 打开，这些命令都可以不带 `%` 符号使用。这使得你几乎可以像处理普通 shell 一样处理 IPython
    提示符：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This access to the shell from within the same terminal window as your Python
    session lets you more naturally combine Python and the shell in your workflows
    with fewer context switches.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个终端窗口中访问 shell，与你的 Python 会话结合得更自然，减少了上下文切换。
