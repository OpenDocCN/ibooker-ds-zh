- en: Chapter 11\. Exploring Data with pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we cleaned the Nobel Prize dataset that we scraped
    from Wikipedia in [Chapter 6](ch06.xhtml#chapter_heavy_scraping). Now it’s time
    to start exploring our shiny new dataset, looking for interesting patterns, stories
    to tell, and anything else that could form the basis for an interesting visualization.
  prefs: []
  type: TYPE_NORMAL
- en: First off, let’s try to clear our minds and take a long, hard look at the data
    to hand to get a broad idea of the visualizations suggested. [Example 11-1](#explore_JSON)
    shows the form of the Nobel dataset, with categorical, temporal, and geographical
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-1\. Our cleaned Nobel Prize dataset
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The data in [Example 11-1](#explore_JSON) suggests a number of *stories* we
    might want to investigate, among them:'
  prefs: []
  type: TYPE_NORMAL
- en: Gender disparities among the prize winners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: National trends (e.g., which country has most prizes in Economics)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details about individual winners, such as their average age on receiving the
    prize or life expectancy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geographical journey from place of birth to adopted country using the `born_in`
    and `country` fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These investigative lines form the basis for the coming sections, which will
    probe the dataset by asking questions of it, such as “How many women other than
    Marie Curie have won the Nobel Prize for Physics?”, “Which countries have the
    most prizes per capita rather than absolute?”, and “Is there a historical trend
    to prizes by nation, a changing of the guard from old (science) world (big European
    nations) to new (US and upcoming Asian nations)?” Before beginning our explorations,
    let’s ready our tools and load our Nobel Prize dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Starting to Explore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start our exploration, let’s fire up a Jupyter notebook from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll use the *magic* `matplotlib` command to enable inline plotting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then import the standard set of data exploration modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’ll make a few adjustments to the plotting parameters and the general
    look and feel of the charts. Make sure to change the style *before* adjusting
    figure sizes, fonts, and the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use the seaborn theming for our charts, arguably more attractive than
    Matplotlib’s default.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the default plotting size to eight inches by four.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of [Chapter 9](ch09.xhtml#chapter_cleaning), we saved our clean dataset
    as a JSON file. Let’s load the clean data into a pandas DataFrame, ready to begin
    exploring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s get some basic information about our dataset’s structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that our dates of birth and death columns have the standard pandas datatype
    of `object`. In order to make date comparisons, we’ll need to convert those to
    the datetime type, `datetime64`. We can use pandas’s [`to_datetime` method](https://oreil.ly/jjcoR)
    to achieve this conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `df.info()` should now show two datetime columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[UTC](https://oreil.ly/ZzSOR) (Coordinated Universal Time in English) is the
    primary time standard by which the world regulates clocks and time. It’s almost
    always desirable to work to this standard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to_datetime` usually works without needing extra arguments and should throw
    an error if given non time-based data, but it’s worth checking the converted columns
    to make sure. In the case of our Nobel Prize dataset, everything checks out.'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both pandas Series and DataFrames have integrated plotting, which wraps the
    most common Matplotlib charts, a few of which we explored in the last chapter.
    This makes it easy to get quick visual feedback as you interact with your DataFrame.
    And if you want to visualize something a little more complicated, the pandas containers
    will play nicely with vanilla Matplotlib. You can also adapt the plots produced
    by pandas using standard Matplotlib customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example of pandas’s integrated plotting, starting with a basic
    plot of gender disparity in Nobel Prize wins. Notoriously, the Nobel Prize has
    been distributed unequally among the genders. Let’s get a quick feel for that
    disparity by using a bar plot on the *gender* category. [Example 11-2](#explore_gender_code)
    produces [Figure 11-1](#explore_gender), showing the huge difference, with males
    receiving 811 of the 858 prizes in our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-2\. Using pandas’s integrated plotting to see gender disparities
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1101](assets/dpj2_1101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-1\. Prize counts by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In [Example 11-2](#explore_gender_code), the Series produced by the gender
    group’s `size` method has its own integrated `plot` method, which turns the raw
    numbers into a chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the default line plot, the pandas `plot` method takes a `kind`
    argument to select among other possible plots. Among the more commonly used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bar` or `barh` (*h* for horizontal) for bar plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hist` for a histogram'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`box` for a box plot'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scatter` for scatter plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find a full list of pandas’s integrated plots [in the docs](https://oreil.ly/Zeo9f)
    as well as some pandas plotting functions that take DataFrames and Series as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s extend our investigation into gender disparities and start extending our
    plotting know-how.
  prefs: []
  type: TYPE_NORMAL
- en: Gender Disparities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s break down the gender numbers shown in [Figure 11-1](#explore_gender)
    by category of prize. pandas’s `groupby` method can take a list of columns to
    group by, with each group being accessed by multiple keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gets a group using a `category` and `gender` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `size` method to get the size of these groups returns a Series with
    a `MultiIndex` that labels the values by both category and gender:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can plot this multi-indexed Series directly, using `hbar` as the `kind` argument
    to produce a horizontal bar chart. This code produces [Figure 11-2](#explore_cat_gen).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1102](assets/dpj2_1102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-2\. Plotting multikey groups
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 11-2](#explore_cat_gen) is a little crude and makes comparing gender
    disparities harder than it should be. Let’s go about refining our charts to make
    those disparities clearer.'
  prefs: []
  type: TYPE_NORMAL
- en: Unstacking Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Figure 11-2](#explore_cat_gen) isn’t the easiest chart to read, even were
    we to improve the sorting of the bars. Handily, pandas Series has a cool `unstack`
    method that takes the multiple indices—​in this case, gender and category—​and
    uses them as columns and indices, respectively, to create a new DataFrame. Plotting
    this DataFrame gives a much more usable plot, as it compares prize wins by gender.
    The following code produces [Figure 11-3](#explore_cat_gen_unstack):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1103](assets/dpj2_1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-3\. Unstacked Series of group sizes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 11-3](#explore_cat_gen_unstack) shows a huge discrepancy between male
    and female prize numbers. Let’s make the data a little more concrete by using
    pandas to produce a chart showing the percentage of female winners by category.
    We’ll also order the category bars by prize haul.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll unstack the `by_cat_gen` group to produce a `cat_gen_sz` DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll do the pandas manipulation in two stages for demonstration purposes,
    using two new columns to store our new data. First, we’ll make a column containing
    the ratio of female winners to the total number of winners:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The awkward forward slash stops Python breaking, but this is a division operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'With the ratio column in place, we can create a column containing percentage
    of female winners by multiplying that ratio by 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s plot these female percentages on a horizontal bar chart, setting an x-limit
    of 100 (%) and sorting the categories by prize number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new plot in [Figure 11-4](#img_female_pc), clearly showing the
    discrepancy in prize totals by gender.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1104](assets/dpj2_1104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-4\. Percentage of winning females by prize category
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Ignoring Economics, a recent and contentious addition to the Nobel Prize categories,
    [Figure 11-4](#img_female_pc) shows that the largest discrepancy in the number
    of male and female prize winners is in Physics, with only two female winners.
    Let’s remind ourselves who they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: While most people will have heard of Marie Curie, who is actually one of the
    four illustrious winners of two Nobel Prizes, few have heard of Maria Goeppert-Mayer.^([1](ch11.xhtml#idm45607764293184))
    This ignorance is surprising, given the drive to encourage women into science.
    I would want my visualization to enable people to discover and learn a little
    about Maria Goeppert-Mayer.
  prefs: []
  type: TYPE_NORMAL
- en: Historical Trends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would be interesting to see if there has been any increase in female prize
    allocation in recent years. One way to visualize this would be as grouped bars
    over time. Let’s run up a quick plot, using `unstack` as in [Figure 11-3](#explore_cat_gen_unstack)
    but using the year and gender columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 11-5](#explore_year_gen), the hard-to-read plot produced, is only functional.
    The trend of female prize distributions can be observed, but the plot has many
    problems. Let’s use Matplotlib’s and pandas’s eminent flexibility to fix them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1105](assets/dpj2_1105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-5\. Prizes by year and gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The first thing we need to do is reduce the number of x-axis labels. By default,
    Matplotlib will label each bar or bar group of a bar plot, which in the case of
    our hundred years of prizes creates a mess of labels. What we need is the ability
    to thin out the number of axis labels as desired. There are various ways to do
    this in Matplotlib; I’ll demonstrate the one I’ve found to be most reliable. It’s
    the sort of thing you’re going to want to reuse, so it makes sense to stick it
    in a dedicated function. [Example 11-3](#explore_thin_axis) shows a function to
    reduce the number of ticks on our x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-3\. Reducing the number of x-axis labels
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets the existing locations and labels of the x-ticks, currently one per bar.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Rotates the labels for readability, by default on an upward diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: As well as needing to reduce the number of ticks, the x-axis in [Figure 11-5](#explore_year_gen)
    has a discontinuous range, missing the years 1939–1945 of WWII, during which no
    Nobel Prizes were presented. We want to see such gaps, so we need to set the x-axis
    range manually to include all years from the start of the Nobel Prize to the current
    day.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current unstacked group sizes use an automatic year index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to see any gaps in the prize distribution, all we have to do is reindex
    this Series with one containing the full range of years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Here we create a full-range index named `year`, covering all the Nobel Prize
    years.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We replace our discontinuous index with the new continuous one.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem with [Figure 11-5](#explore_year_gen) is the excessive number
    of bars. Although we do get male and female bars side by side, it looks messy
    and has aliasing artifacts too. It’s better to have dedicated male and female
    plots but stacked so as to allow easy comparison. We can achieve this using the
    subplotting method we saw in [“Axes and Subplots”](ch10.xhtml#mpl_axes_subplots),
    using the pandas data but customizing the plot using our Matplotlib know-how.
    [Example 11-4](#explore_year_gen_stack_code) shows how to do this, producing the
    plot in [Figure 11-6](#explore_year_gen_stack).
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-4\. Stacked gender prizes by year
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates two axes, on a two (row) by one (column) grid.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll share the x- and y-axes, which will make comparisons between the two plots
    sensible.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: We provide the axis’s bar chart (`bar`) method with the continuous year index
    and the unstacked gender columns.
  prefs: []
  type: TYPE_NORMAL
- en: The take-home from our investigation into gender distributions is that there
    is a huge discrepancy but, as shown by [Figure 11-6](#explore_year_gen_stack),
    a slight improvement in recent years. Moreover, with Economics being an outlier,
    the difference is greatest in the sciences. Given the fairly small number of female
    prize winners, there’s not a lot more to be seen here.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1106](assets/dpj2_1106.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-6\. Prizes by year and gender, on two stacked axes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let’s now take a look at national trends in prize wins and see if there are
    any interesting nuggets for visualization.
  prefs: []
  type: TYPE_NORMAL
- en: National Trends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The obvious starting point in looking at national trends is to plot the absolute
    number of prize winners. This is easily done in one line of pandas, broken up
    here for ease of reading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This produces [Figure 11-7](#explore_nat_abs), showing the United States with
    the lion’s share of prizes.
  prefs: []
  type: TYPE_NORMAL
- en: The absolute number of prizes will be bound to favor countries with large populations.
    Let’s look at a fairer comparison, visualizing prizes per capita.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1107](assets/dpj2_1107.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-7\. Absolute prize wins by country
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Prize Winners Per Capita
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The absolute number of prize winners is bound to favor larger countries, which
    raises the question, how do the numbers stack up if we account for population
    sizes? In order to test prize haul per capita, we need to divide the absolute
    prize numbers by population size. In [“Getting Country Data for the Nobel Dataviz”](ch05.xhtml#country_data),
    we downloaded some country data from the web and stored it as a JSON file. Let’s
    retrieve it now and use it to produce a plot of prizes relative to population
    size.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s get the national group sizes, with country names as index labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s load our country data into a DataFrame and remind ourselves of the
    data it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Our country dataset is already indexed to its `name` column. If we add to it
    the `ngsz` national group-size Series, which also has a country name index, the
    two will combine on the shared indices, giving our country data a new `nobel_wins`
    column. We can then use this new column to create a `nobel_wins_per_capita` by
    dividing it by population size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need only to sort the `df_countries` DataFrame by its new `nobel_wins_per_cap`
    column and plot the Nobel Prize wins per capita, producing [Figure 11-8](#explore_per_cap):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1108](assets/dpj2_1108.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-8\. National prize numbers per capita
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This shows the Caribbean island of Saint Lucia taking top place. Home to the
    Nobel Prize–winning poet [Derek Walcott](https://oreil.ly/OOYBc), its small population
    of 175,000 gives it a high Nobel Prizes per capita.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how things stack up with the larger countries by filtering the results
    for countries that have won more than two Nobel Prizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The results in [Figure 11-9](#explore_per_cap_filter) show the Scandinavian
    countries and Switzerland punching above their weight.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1109](assets/dpj2_1109.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-9\. National prize numbers per capita, filtered for three or more
    wins
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Changing the metric for national prize counts from absolute to per capita makes
    a big difference. Let’s now refine our search a little and focus on the prize
    categories, looking for interesting nuggets there.
  prefs: []
  type: TYPE_NORMAL
- en: Prizes by Category
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s drill down a bit into the absolute prize data and look at wins by category.
    This will require grouping by country and category columns, getting the size of
    those groups, unstacking the resulting Series and then plotting the columns of
    the resulting DataFrame. First, we get our categories with country group sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the `nat_cat_sz` DataFrame to produce subplots for the six Nobel
    Prize categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`items` returns an iterator for the DataFrames columns in form of (column_label,
    column) tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3 acquired the handy [integer division](https://oreil.ly/X6QGK) operator
    `//`, which returns the rounded-down integer value of the division.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: '`order` orders the column’s Series by first making a copy. It is the equivalent
    of `sort(inplace=False)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_exploring_data_with_pandas_CO8-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Having sliced off the largest 10 countries, we now reverse the order to make
    the bar chart, which plots from bottom to top, presenting the largest countries
    at the top.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_exploring_data_with_pandas_CO8-5)'
  prefs: []
  type: TYPE_NORMAL
- en: '`tight_layout` should prevent label overlaps among the subplots. If you have
    any problems with `tight_layout`, see the end of [“Titles and Axes Labels”](ch10.xhtml#sect_mpl_titles).'
  prefs: []
  type: TYPE_NORMAL
- en: This produces the plots in [Figure 11-10](#explore_nat_cat).
  prefs: []
  type: TYPE_NORMAL
- en: A couple of interesting nuggets from [Figure 11-10](#explore_nat_cat) are the
    United States’ overwhelming dominance of the Economics prize, reflecting a post-WWII
    economic consensus, and France’s leadership of the Literature prize.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1110](assets/dpj2_1110.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-10\. Prizes by country and category
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Historical Trends in Prize Distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know the aggregate prize stats by country, are there any interesting
    historical trends to the prize distribution? Let’s explore this with some line
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s increase the default font size to 20 points to make the plot labels
    more legible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re going to be looking at prize distribution by year and country, so we’ll
    need a new unstacked DataFrame based on these two columns. As previously, we add
    a `new_index` to give continuous years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The trend we’re interested in is the cumulative sum of Nobel Prizes by country
    over its history. We can further explore trends in individual categories, but
    for now we’ll look at the total for all. pandas has a handy `cumsum` method for
    just this. Let’s take the United States column and plot it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This produces the chart in [Figure 11-11](#explore_cumsum_us).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1111](assets/dpj2_1111.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-11\. Cumulative sum of US prize winners over time
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The gaps in the line plot are where the fields are `NaN`, years when the US
    won no prizes. The `cumsum` algorithm returns `NaN` here. Let’s fill those in
    with a zero to remove the gaps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This produces the cleaner chart shown in [Figure 11-12](#explore_cumsum_us_gapless).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1112](assets/dpj2_1112.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-12\. Cumulative sum of US prize winners over time
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s compare the US prize rate with that of the rest of the world:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets the list of country column names and removes United States.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses our list of non-US country names to create a `'Not_US'` column, the sum
    of all the prizes for countries in the `not_US` list.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO9-3)'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the lines in pandas plots are colored. In order to distinguish them
    in the printed book, we can use the `style` argument to make one line solid (*-*)
    and the other dashed (*--*), using the Matplotlib line styles (see [the docs](https://oreil.ly/dUw3x)
    for details).
  prefs: []
  type: TYPE_NORMAL
- en: This code produces the chart shown in [Figure 11-13](#explore_cumsum_us_notus).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1113](assets/dpj2_1113.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-13\. United States versus rest of world prize hauls
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Where the `''Not_US''` haul shows a steady increase over the years of the prize,
    the US shows a rapid increase around the end of World War II. Let’s investigate
    that further, looking at regional differences. We’ll focus on the two or three
    largest winners for North America, Europe, and Asia:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Our continental country list created by selecting the biggest two or three winners
    in the three continents compared.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new column with a region label for each `dict` in the `regions` list,
    summing its `countries` members.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO10-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the cumulative sum of all the new region columns.
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the plot in [Figure 11-14](#explore_cumsum_regions). The rate
    of Asia’s prize haul has increased slightly over the years, but the main point
    of note is North America’s huge increase in prizes around the mid-1940s, overtaking
    a declining Europe in total prizes around the mid-1980s.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1114](assets/dpj2_1114.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-14\. Historical prize trends by region
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let’s expand the detail of the previous national plots by summarizing the prize
    rates for the 16 biggest winners, excluding the outlying United States:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts our country groups from highest to lowest win-hauls.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets a 4×4 grid of axes with shared x- and y-axes for normalized comparison.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO11-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Enumerates over the sorted index from the second row (1), excluding the US (0).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_exploring_data_with_pandas_CO11-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects the `nat` country name column and plots its cumulative sum of prizes
    on the grid axis `ax`.
  prefs: []
  type: TYPE_NORMAL
- en: This produces [Figure 11-15](#explore_nat_grid), which shows some nations like
    Japan, Australia, and Israel on the rise historically, while others flatten off.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1115](assets/dpj2_1115.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-15\. Prize rates for the 16 largest national winners after the US
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Another good way to summarize national prize rates over time is by using a
    heatmap and dividing the totals by decade. The seaborn library provides a good
    heatmap. Let’s import it and use its `set` method to increase the font size of
    its labels by scaling them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The division of data into chunks is also known as [*binning*](https://oreil.ly/SkFSj),
    as it creates *bins* of data. pandas has a handy `cut` method for just this job,
    taking a column of continuous values—​in our case, Nobel Prize years—​and returning
    ranges of a specified size. You can supply the DataFrame’s `groupby` method with
    the result of `cut` and it will group by the range of indexed values. The following
    code produces [Figure 11-16](#explore_heatmap_nat_year):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Gets our bin ranges for the decades from 1901 (1901, 1911, 1921…​).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Cuts our Nobel Prize years into decades using the `bins` ranges with `precision`
    set to `0`, to give integer years.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO12-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Before heatmapping, we filter for those countries with over two Nobel Prizes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_exploring_data_with_pandas_CO12-4)'
  prefs: []
  type: TYPE_NORMAL
- en: We use the continuous `rocket_r` heatmap to highlight the differences. Check
    out all the pandas color palettes in the [seaborn documentation](https://oreil.ly/3FmHj).
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11-16](#explore_heatmap_nat_year) captures some interesting trends,
    such as Russia’s brief flourishing in the 1950s, which petered out around the
    1980s.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve investigated the Nobel Prize nations, let’s turn our attention
    to the individual winners. Are there any interesting things we can discover about
    them using the data at hand?
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1116](assets/dpj2_1116.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-16\. Nations’ Nobel Prize hauls by decade
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Age and Life Expectancy of Winners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the date of birth for all our winners and the date of death for 559
    of them. Combined with the year in which they won their prizes, we have a fair
    amount of individual data to mine. Let’s investigate the age distribution of winners
    and try to glean some idea of the winners’ longevity.
  prefs: []
  type: TYPE_NORMAL
- en: Age at Time of Award
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 9](ch09.xhtml#chapter_cleaning), we added an `''award_age''` column
    to our Nobel Prize dataset by subtracting the winners’ ages from their prize years.
    A quick and easy win is to use pandas’s histogram plot to assess this distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Here we require that the age data be divided into 20 bins. This produces [Figure 11-17](#explore_hist_award_age),
    showing that the early ’60s is a sweet spot for the prize and if you haven’t achieved
    it by 100, it probably isn’t going to happen. Note the outlier around 20, which
    is the 17-year-old recipient of the Peace Prize, [Malala Yousafzai](https://oreil.ly/8ft8y).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1117](assets/dpj2_1117.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-17\. Distribution of ages at time of award
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can use seaborn’s `displot` to get a better feel for the distribution, adding
    a kernel density estimate (KDE)^([2](ch11.xhtml#idm45607761940144)) to the histogram.
    The following one-liner produces [Figure 11-18](#explore_hist_award_age_kde),
    showing that our sweet spot is around 60 years of age:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1118](assets/dpj2_1118.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-18\. Distribution of ages at time of award with KDE superimposed
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A [box plot](https://oreil.ly/EWFhx) is a good way of visualizing continuous
    data, showing the quartiles, the first and third marking the edges of the box
    and the second quartile (or median average) marking the line in the box. Generally,
    as in [Figure 11-19](#explore_boxplot_age_gen), the horizontal end lines (known
    as the whisker ends) indicate the max and min of the data. Let’s use a seaborn
    box plot and divide the prizes by gender:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This produces [Figure 11-19](#explore_boxplot_age_gen), which shows that the
    distributions by gender are similar, with women having a slightly lower average
    age. Note that with far fewer female prize winners, their statistics are subject
    to a good deal more uncertainty.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1119](assets/dpj2_1119.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-19\. Ages of prize winners by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'seaborn’s rather nice violin plot combines the conventional box plot with a
    kernel density estimation to give a more refined view of the breakdown by age
    and gender. The following code produces [Figure 11-20](#explore_violin_age_gen):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1120](assets/dpj2_1120.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-20\. Violin plots of prize-age distribution by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Life Expectancy of Winners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s look at the longevity of Nobel Prize winners, by subtracting the
    available dates of death from their respective dates of birth. We’ll store this
    data in a new `''age_at_death''` column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '`datetime64` data can be added and subtracted in a sensible fashion, producing
    a pandas `timedelta` column. We can use its `dt` method to get the interval in
    days, dividing this by 365 to get the age at death as a float.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We make a copy of the `''age_at_death''` column,^([3](ch11.xhtml#idm45607761762448))
    removing all empty `NaN` rows. This can then be used to make the histogram and
    KDE shown in [Figure 11-21](#explore_hist_aad):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Removes all `NaN`s to clean the data and reduce plotting errors (e.g., `distplot`
    fails with `NaN`s).
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1121](assets/dpj2_1121.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-21\. Life expectancy of the Nobel Prize winners
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 11-21](#explore_hist_aad) shows the Nobel Prize winners to be a remarkably
    long-lived bunch, with an average age in the early 80s. This is all the more impressive
    given that the large majority of winners are men, who have significantly lower
    average life expectancies^([4](ch11.xhtml#idm45607761692592)) in the general population
    than women. One contributary factor to this longevity is the selection bias we
    saw earlier. Nobel Prize winners aren’t generally honored until they’re in their
    late 50s and 60s, which removes the subpopulation who died before having the chance
    to be acknowledged, pushing up the longevity figures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 11-21](#explore_hist_aad) shows some centenarians among the prize winners.
    Let’s find them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s superimpose a couple of KDEs to show differences in mortality for
    male and female recipients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a DataFrame with only valid `'age_at_death'` fields.
  prefs: []
  type: TYPE_NORMAL
- en: This produces [Figure 11-22](#explore_aad_kde), which, allowing for the small
    number of female winners and flatter distribution, shows the male and female averages
    to be close. Female Nobel Prize winners seem to live relatively shorter lives
    than their counterparts in the general population.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1122](assets/dpj2_1122.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-22\. Nobel Prize winner life expectancies by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'A violin plot provides another perspective, shown in [Figure 11-23](#explore_aad_violin):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '![dpj2 1123](assets/dpj2_1123.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-23\. Winner life expectancies by gender
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Increasing Life Expectancies over Time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s do a little historical demographic analysis by seeing if there’s a correlation
    between the date of birth of our Nobel Prize winners and their life expectancy.
    We’ll use one of seaborn’s `lmplot`s to provide a scatter plot and line-fitting
    with confidence intervals (see [“seaborn”](ch10.xhtml#mpl_seaborn)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a temporary DataFrame, removing all the rows with no `'age_at_death'`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO16-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new DataFrame with only the two columns of interest from the refined
    `df_temp`. We grab only the year from the `date_of_birth`, using its [`dt` accessor](https://oreil.ly/hGULX).
  prefs: []
  type: TYPE_NORMAL
- en: This produces [Figure 11-24](#explore_birth_death), showing an increase in life
    expectancy of a decade or so over the prize’s duration.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1124](assets/dpj2_1124.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-24\. Correlating date of birth with age at death
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Nobel Diaspora
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While cleaning our Nobel Prize dataset in [Chapter 9](ch09.xhtml#chapter_cleaning),
    we found duplicate entries recording the winner’s place of birth and country at
    time of winning. We preserved these, giving us 104 winners whose country at time
    of winning was different from their country of birth. Is there a story to tell
    here?
  prefs: []
  type: TYPE_NORMAL
- en: 'A good way to visualize the movement patterns from the winners’ country of
    birth to their adopted country is by using a heatmap to show all `born_in`/`country`
    pairs. The following code produces the heatmap in [Figure 11-25](#explore_diaspora):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_exploring_data_with_pandas_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects all rows with a `'born_in'` field, and forms groups on this and the
    country column.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_exploring_data_with_pandas_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: We rename the row index and column names to make them more descriptive.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_exploring_data_with_pandas_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: seaborn’s `heatmap` attempts to set the correct bounds for the data, but in
    this case, we must manually adjust the limits (`vmin` and `vmax`) to see all the
    cells.
  prefs: []
  type: TYPE_NORMAL
- en: '![dpj2 1125](assets/dpj2_1125.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11-25\. The Nobel Prize diaspora
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 11-25](#explore_diaspora) shows some interesting patterns, which tell
    a tale of persecution and sanctuary. First, the United States is the overwhelming
    recipient of relocated Nobel winners, followed by the United Kingdom. Note that
    the biggest contingents for both (except cross-border traffic from Canada) are
    from Germany. Italy, Hungary, and Austria are the next largest groups. Examining
    the individuals in these groups shows that the majority were displaced as a result
    of the rise of antisemitic fascist regimes in the run-up to World War II and the
    increasing persecution of Jewish minorities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To take an example, all four of the Nobel winners who moved from Germany to
    the United Kingdom were German research scientists with Jewish ancestry who moved
    in response to the Nazis’ rise to power:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Ernst Chain pioneered the industrial production of penicillin. Hans Krebs discovered
    the Krebs cycle, one of the most important discoveries in biochemistry, which
    regulates the energy production of cells. Max Born was one of the pioneers of
    quantum mechanics, and Bernard Katz uncovered the fundamental properties of synaptic
    junctions in neurons.
  prefs: []
  type: TYPE_NORMAL
- en: There are many such illustrious names among the winning emigrants. One interesting
    discovery is the number of prize winners who were part of the famous [Kindertransport](https://oreil.ly/tIzjj),
    an organized rescue effort that took place nine months before the outbreak of
    WWII and saw ten thousand Jewish children from Germany, Austria, Czechoslovakia,
    and Poland transported to the United Kingdom. Of these children, four went on
    to win a Nobel Prize.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored our Nobel Prize dataset, probing the key fields
    of gender, category, country, and year (of prize) looking for interesting trends
    and stories we can tell or enable visually. We used a fair number of Matplotlib
    (by way of pandas) and seaborn’s plots, from basic bar charts to more complicated
    statistical summaries like violin plots and heatmaps. Mastery of these tools and
    the others in the Python chart armory will allow you to quickly get the feel of
    your datasets, which is a prerequisite to building a visualization around them.
    We found more than enough stories in the data to suggest a web visualization.
    In the next chapter, we will imagine and design just such a Nobel Prize winner
    visualization, cherry-picking the nuggets gained in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch11.xhtml#idm45607764293184-marker)) Anecdotally, no one I have asked
    in person or in talk audiences has known the name of the *other* female Nobel
    Prize winner for Physics.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch11.xhtml#idm45607761940144-marker)) See [Wikipedia](https://oreil.ly/DUd3e)
    for details. Essentially the data is smoothed and a probability density function
    derived.
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch11.xhtml#idm45607761762448-marker)) We are ignoring leap years and other
    subtle, complicating factors in deriving years from days.
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch11.xhtml#idm45607761692592-marker)) Depending on the country, this is
    around five to six years. See [Our World in Data](https://oreil.ly/6xY9W) for
    some stats.
  prefs: []
  type: TYPE_NORMAL
