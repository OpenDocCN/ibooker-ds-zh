- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'This book aims to get you up to speed with what is, in my opinion, the most
    powerful data visualization stack going: Python and JavaScript. You’ll learn enough
    about big libraries like pandas and D3 to start crafting your own web data visualizations
    and refining your own toolchain. Expertise will come with practice, but this book
    presents a shallow learning curve to basic competence.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的目标是让你快速掌握我认为最强大的数据可视化堆栈：Python和JavaScript。你将学习足够的关于像pandas和D3这样的大型库，开始打造自己的网络数据可视化并完善自己的工具链。专业知识将随着实践而来，但是这本书提供了一个基础能力的浅学习曲线。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re reading this, I’d love to hear any feedback you have. Please post
    it to [pyjsdataviz@kyrandale.com](mailto:pyjsdataviz@kyrandale.com). Thanks a
    lot.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，我很乐意听取你的任何反馈意见。请发送至[pyjsdataviz@kyrandale.com](mailto:pyjsdataviz@kyrandale.com)。非常感谢。
- en: You’ll also find a working copy of the Nobel visualization the book literally
    and figuratively builds toward at [my website](https://www.kyrandale.com/viz/nobel_viz_v2).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[我的网站](https://www.kyrandale.com/viz/nobel_viz_v2)找到诺贝尔奖可视化的工作副本，这本书在字面和象征意义上都是在构建这一可视化。
- en: The bulk of this book tells one of the innumerable tales of data visualization,
    one carefully selected to showcase some powerful Python and JavaScript libraries
    and tools which together form a toolchain. This toolchain gathers raw, unrefined
    data at its start and delivers a rich, engaging web visualization at its end.
    Like all tales of data visualization, it is a tale of transformation—in this case,
    transforming a basic Wikipedia list of Nobel Prize winners into an interactive
    visualization, bringing the data to life and making exploration of the prize’s
    history easy and fun.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的大部分内容讲述了无数数据可视化故事之一，精心选择以展示一些强大的Python和JavaScript库和工具，这些库和工具一起形成了一个工具链。这个工具链在其起点收集原始未加工数据，在其终点提供丰富而引人入胜的网络可视化。像所有的数据可视化故事一样，这是一个转变的故事——在这种情况下，将一个基本的维基百科诺贝尔奖获奖者列表转化为互动可视化，使得探索奖项历史变得轻松而有趣。
- en: Whatever data you have and whatever story you want to tell with it, the natural
    home for the visualizations you transform it into is the web. As a delivery platform,
    it is orders of magnitude more powerful than what came before, and this book aims
    to smooth the passage from desktop- or server-based data analysis and processing
    to the web.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你有什么样的数据，想用它讲述什么样的故事，将其转化为可视化后的自然家园就是网络。作为一个交付平台，它比以往任何一个平台都更加强大，而这本书旨在使得从基于桌面或服务器的数据分析和处理过渡到网络变得更加顺畅。
- en: Working with these two powerful languages doesn’t only deliver powerful web
    visualizations—it’s also fun and engaging.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两种强大语言不仅能够提供强大的网络可视化，而且还充满乐趣和吸引力。
- en: 'Many potential dataviz programmers assume there is a big divide between *web
    development* and doing what they would like to do, which is program in Python
    and JavaScript. Web development involves loads of arcane knowledge about markup
    languages, style scripts, and administration, and can’t be done without tools
    with strange names like *Webpack* or *Gulp*. These days, that big divide can be
    collapsed to a thin and very permeable membrane, allowing you to focus on what
    you do well: programming stuff (see [Figure I-1](#webdev_dragons)) with minimal
    effort, relegating the web servers to data delivery.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多潜在的数据可视化程序员认为*网页开发*和他们想做的事情之间存在很大的分歧，他们想做的是使用Python和JavaScript进行编程。网页开发涉及大量关于标记语言、样式脚本和管理的深奥知识，并且不能没有像*Webpack*或*Gulp*这样奇怪命名的工具。如今，这种巨大分歧可以被缩小到一层薄薄的、非常可渗透的膜，使你能够专注于你擅长的事情：用最少的功夫编程（见[图I-1](#webdev_dragons)），将网页服务器降低到数据交付的级别。
- en: '![dpj2 01](assets/dpj2_01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 01](assets/dpj2_01.png)'
- en: Figure I-1\. Here be webdev dragons
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图I-1\. 这里是网页开发的巨龙
- en: Who This Book Is For
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书适合读者
- en: 'First off, this book is for anyone with a reasonable grasp of Python or JavaScript
    who wants to explore one of the most exciting areas in the data-processing ecosystem
    right now: the exploding field of data visualization for the web. It’s also about
    addressing some specific challenges that, in my experience, are quite common.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这本书适合所有对Python或JavaScript有合理掌握的人，他们希望探索当前数据处理生态系统中最令人兴奋的领域之一：数据可视化的爆炸性增长。同时，它也解决了一些根据我的经验相当普遍的具体挑战。
- en: When you get commissioned to write a technical book, chances are your editor
    will sensibly caution you to think in terms of *pain points* that your book could
    address. The two key pain points of this book are best illustrated by way of a
    couple of stories, including one of my own and one that has been told to me in
    various guises by JavaScripters I know.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你被委托写技术书籍时，编辑通常会明智地提醒你，要考虑你的书能解决的*痛点*。这本书的两个关键痛点最好通过一些故事来说明，包括我自己的故事和一些JavaScript开发者向我讲述的故事的各种变体。
- en: Many years ago, as an academic researcher, I came across Python and fell in
    love. I had been writing some fairly complex simulations in C++, and Python’s
    simplicity and power was a breath of fresh air from all the boilerplate Makefiles,
    declarations, definitions, and the like. Programming became fun. Python was the
    perfect glue, playing nicely with my C++ libraries (Python wasn’t then and still
    isn’t a speed demon) and doing, with consummate ease, all the stuff that is such
    a pain in low-level languages (e.g., file I/O, database access, and serialization).
    I started to write all my graphical user interfaces (GUIs) and visualizations
    in Python, using wxPython, PyQt, and a whole load of other refreshingly easy toolsets.
    Unfortunately, although some of these tools are pretty cool and I would love to
    share them with the world, the effort required to package them, distribute them,
    and make sure they still work with modern libraries represents a hurdle I’m unlikely
    to overcome.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，作为一名学术研究员，我接触到Python并爱上了它。我之前在C++中写了一些相当复杂的模拟程序，Python的简洁和强大为我带来了一股清新的空气，远离了所有样板文件、声明、定义等等。编程变得有趣起来。Python是完美的粘合剂，与我的C++库良好配合（当时Python并不是速度飞快的语言，现在也不是），并且毫不费力地执行低级语言中让人头疼的所有操作（例如文件I/O、数据库访问和序列化）。我开始用Python编写所有的图形用户界面（GUI）和可视化工具，使用wxPython、PyQt以及其他许多简单易用的工具集。不幸的是，尽管其中一些工具非常酷，我很想与世界分享，但需要打包、分发并确保它们仍然与现代库兼容的努力代表了我难以克服的障碍。
- en: 'At the time, there existed what in theory was the perfect universal distribution
    system for the software I’d so lovingly crafted—namely, the web browser. Web browsers
    were (and are) available on pretty much every computer on Earth, with their own
    built-in, interpreted programming language: write once, run everywhere. But Python
    didn’t play in the web browsers’ sandpit, and browsers were incapable of ambitious
    graphics and visualizations, being pretty much limited to static images and the
    odd [jQuery transformation](https://jquery.com). JavaScript was a “toy” language
    tied to a very slow interpreter that was good for little [DOM](https://oreil.ly/QnE0a)
    tricks but certainly nothing approaching what I could do on the desktop with Python.
    So that route was discounted, out of hand. My visualizations wanted to be on the
    web, but there was no route to it.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那时候，有一个在理论上是完美的软件通用分发系统存在，那就是网页浏览器。网页浏览器几乎在地球上每台计算机上都可以找到，并且具有自己的内置解释型编程语言：一次编写，到处运行。但是Python不能在网页浏览器的沙盒中运行，而且浏览器对于宏大的图形和可视化是无能为力的，基本上只能处理静态图像和偶尔的[jQuery转换](https://jquery.com)。JavaScript是一种“玩具”语言，与非常慢的解释器绑定，只适合做一些[DOM](https://oreil.ly/QnE0a)小技巧，但绝对无法与我在桌面上使用Python所能做的相提并论。因此，这条路线被毫不留情地排除了。我的可视化想要呈现在网络上，但却没有办法去实现它。
- en: Fast forward a decade or so and, thanks to an arms race initiated by Google
    and their V8 engine, JavaScript is now orders of magnitude faster; in fact, it’s
    now an awful lot faster than Python.^([1](introduction01.xhtml#idm45607823100368))
    HTML has also tidied up its act a bit, in the guise of HTML5\. It’s a lot nicer
    to work with, with much less boilerplate code. What were loosely followed and
    distinctly shaky protocols like Scalable Vector Graphics (SVG) have firmed up
    nicely, thanks to powerful visualization libraries, D3 in particular. Modern browsers
    are obliged to work nicely with SVG and, increasingly, 3D in the form of WebGL
    and its children such as THREE.js. The visualizations I was doing in Python are
    now possible on your local web browser, and the payoff is that, with very little
    effort, they can be made accessible to every desktop, laptop, smartphone, and
    tablet in the world.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 十年左右过去了，多亏了由Google及其V8引擎发起的竞争激化，JavaScript现在的速度已经快了几个数量级；事实上，它现在比Python快得多。^([1](introduction01.xhtml#idm45607823100368))
    HTML 也通过HTML5的形式稍作整理。现在使用起来更加舒适，减少了大量样板代码。像可伸缩矢量图形（SVG）这样宽松跟进、不太稳定的协议已经得到了很好的加固，得益于强大的可视化库，尤其是D3。现代浏览器被要求与SVG和越来越多的3D技术如WebGL及其衍生库（如THREE.js）良好协作。我以前在Python中做的可视化现在可以在你的本地网页浏览器上实现，而且最大的好处是，只需很少的努力，就能让它们适用于全世界的每台台式机、笔记本电脑、智能手机和平板电脑。
- en: So why aren’t Pythonistas flocking to get their data out there in a form they
    dictate? After all, the alternative to crafting it yourself is leaving it to somebody
    else, something most data scientists I know would find far from ideal. Well, first
    there’s that term *web development*, connoting complicated markup, opaque stylesheets,
    a whole slew of new tools to learn, IDEs to master. And then there’s JavaScript
    itself, a strange language, thought of as little more than a toy until recently
    and having something of the neither fish nor fowl to it. I aim to take those pain
    points head-on and show that you can craft modern web visualizations (often single-page
    apps) with a very minimal amount of HTML and CSS boilerplate, allowing you to
    focus on the programming, and that JavaScript is an easy leap for the Pythonista.
    But you don’t have to leap; [Chapter 2](ch02.xhtml#chapter_language_bridge) is
    a language bridge that aims to help Pythonistas and JavaScripters bridge the divide
    between the languages by highlighting common elements and providing simple translations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么Python爱好者们不纷纷将他们的数据以他们指定的形式发布出去呢？毕竟，除了自己精心制作之外，别无选择，这对我认识的大多数数据科学家来说都远非理想。首先，有那个术语*web
    development*，暗示着复杂的标记、难以理解的样式表，以及一大堆新工具需要学习，需要掌握的IDE。然后是JavaScript本身，这是一种奇怪的语言，直到最近被认为不过是一种玩具，而且在某种程度上难以归类。我打算直面这些痛点，并展示，你可以使用极少量的HTML和CSS样板代码制作现代的Web可视化（通常是单页应用程序），让你专注于编程，而JavaScript对于Python爱好者来说并不难上手。但你并不需要跳跃；[第二章](ch02.xhtml#chapter_language_bridge)
    是一个语言桥梁，旨在帮助Python爱好者和JavaScript开发者通过突出共同元素和提供简单的转换来弥合语言之间的鸿沟。
- en: The second story is a common one among JavaScript data visualizers I know. Processing
    data in JavaScript is far from ideal. There are few heavyweight libraries, and
    although recent functional enhancements to the language make data munging much
    more pleasant, there’s still no real data-processing ecosystem to speak of. So,
    there’s a distinct asymmetry between the hugely powerful visualization libraries
    available (D3, as ever, is the paramount library), and the ability to clean and
    process any data delivered to the browser. All of this mandates doing your data
    cleaning, processing, and exploring in another language or with a toolkit like
    Tableau, and this often devolves into piecemeal forays into vaguely remembered
    Matlab, the steepish learning curve that is R, or a Java library or two.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个故事在我认识的JavaScript数据可视化者中很普遍。在JavaScript中处理数据远非理想。虽然语言最近的功能增强使得数据整理变得更加愉快，但仍然没有真正的数据处理生态系统可言。因此，现有的强大可视化库（D3仍然是最重要的库）和浏览器提供的清洁和处理任何传输到浏览器的数据的能力之间存在明显的不对称。所有这些都要求你在另一种语言中进行数据清洗、处理和探索，或者使用像Tableau这样的工具包，这通常会演变为零散的探索，模糊记忆的Matlab，陡峭学习曲线的R，或者一两个Java库。
- en: Toolkits like [Tableau](https://www.tableau.com), although very impressive,
    are often ultimately frustrating for programmers. There’s no way to replicate
    in a GUI the expressive power of a good, general-purpose programming language.
    Plus, what if you want to create a little web server to deliver your processed
    data? That means learning at least one new web development-capable language.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像[Tableau](https://www.tableau.com)这样的工具包尽管非常令人印象深刻，但对程序员来说常常令人沮丧。在GUI中无法复制一个好的、通用编程语言的表现力。此外，如果您想创建一个小型的Web服务器来传递处理过的数据，那就意味着至少要学习一种新的Web开发能力语言。
- en: In other words, JavaScripters starting to stretch their data visualization are
    looking for a complementary data-processing stack that requires the least investment
    of time and has the shallowest learning curve.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，开始拓展其数据可视化的JavaScript开发者，正在寻找一个需要时间投入最少、学习曲线最浅的互补数据处理栈。
- en: Minimal Requirements to Use This Book
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用本书的最低要求
- en: I always feel reluctant to place restrictions on people’s explorations, particularly
    in the context of programming and the web, which is chock-full of autodidacts
    (how else would one learn with the halls of academia being light years behind
    the trends?), learning fast and furiously, gloriously uninhibited by the formal
    constraints that used to apply to learning. Python and JavaScript are pretty much
    as simple as it gets, programming-language-wise, and are both top candidates for
    best first language. There isn’t a huge cognitive load in interpreting the code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是对限制人们探索的行为感到不情愿，特别是在编程和网络的背景下，充斥着自学者（否则人们如何在学术界落后于潮流的情况下学习呢？），他们快速而狂热地学习，光彩夺目地不受曾经适用于学习的正式限制的约束。从编程语言的角度来看，Python和JavaScript几乎是最简单的，并且都是最佳首选语言的主要候选者。在解释代码时，没有太大的认知负荷。
- en: In that spirit, there are expert programmers who, without any experience of
    Python and JavaScript, could consume this book and be writing custom libraries
    within a week.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这种精神，有些专家程序员，即使没有Python和JavaScript的任何经验，也可以在一周内消化这本书，并且能够编写自定义库。
- en: For beginner programmers, fresh to Python or JavaScript, this book is probably
    too advanced for you, and I recommend taking advantage of the plethora of books,
    web resources, screencasts, and the like that make learning so easy these days.
    Focus on a personal itch, a problem you want to solve, and learn to program by
    doing—it’s the only way.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者程序员来说，对Python或JavaScript新手来说，这本书可能太高级了，我建议您利用当前大量的书籍、网络资源、录屏和其他资源，这些资源使学习变得如此简单。专注于个人的兴趣点，一个您想解决的问题，并通过实践学习编程——这是唯一的方式。
- en: For people who have programmed a bit in either Python or JavaScript, my advised
    threshold to entry is that you have used a few libraries together, understand
    the basic idioms of your language, and can look at a piece of novel code and generally
    get a hook on what’s going on—​in other words, Pythonistas who can use a few modules
    of the standard library, and JavaScripters who have used the odd library and would
    understand a few lines of its source code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经在Python或JavaScript中编程过一点的人，我建议入门的门槛是您已经一起使用了几个库，了解了您语言的基本习惯，并且能够看一段新代码，并大致了解其中的运行机制——换句话说，可以使用标准库的几个模块的Python开发者，以及已经使用过一些库并理解其源代码几行的JavaScript开发者。
- en: Why Python and JavaScript?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Python和JavaScript？
- en: Why JavaScript is an easy question to answer. For now and the foreseeable future,
    there is only one first-class, browser-based programming language. There have
    been various attempts to extend, augment, and usurp, but good old, plain-vanilla
    JS is still preeminent. If you want to craft modern, dynamic, interactive visualizations
    and, at the touch of a button, deliver them to the world, at some point you are
    going to run into JavaScript. You might not need to achieve mastery, but basic
    competence is a fundamental price of entry into one of the most exciting areas
    of modern data science. This book will get you into the ballpark.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择JavaScript是一个容易回答的问题。在现在和可预见的未来，只有一种一流的、基于浏览器的编程语言。虽然曾经有过各种扩展、增强和篡改的尝试，但好旧的、普通的JavaScript仍然是首屈一指的。如果您想制作现代、动态、交互式的可视化，并且在点击按钮时将它们传递给世界，那么迟早您会遇到JavaScript。您可能不需要掌握它，但基本的能力是进入现代数据科学中最激动人心的领域的基本门槛。这本书将带您进入这个领域。
- en: Why Not Python in the Browser?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不在浏览器中使用Python？
- en: There have been recent initiatives to run a limited version of Python in the
    browser. For example, [Pyodide](https://github.com/pyodide/pyodide) is a port
    of CPython to WebAssembly. These are impressive and interesting, but right now
    the main way to make web charts in Python is to have them automatically converted
    by an intermediate library.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最近有一些倡议旨在在浏览器中运行Python的有限版本。例如，[Pyodide](https://github.com/pyodide/pyodide)是将CPython移植到WebAssembly的一个项目。这些项目令人印象深刻且有趣，但目前在Python中生成网页图表的主要方式是通过中间库自动转换它们。
- en: There are currently some very impressive initiatives aimed at enabling Python-produced
    visualizations, often built on [Matplotlib](https://matplotlib.org), to run in
    the browser. They achieve this by converting the Python code into JavaScript based
    on the `canvas` or `svg` drawing contexts. The most popular and mature of these
    are [Plotly](https://plot.ly) and [Bokeh](https://bokeh.pydata.org/en/latest).
    In [Chapter 14](ch14.xhtml#chapter_web_presentations), you’ll see how to use Plotly
    to generate charts in a Jupyter notebook and transfer them to a web page. For
    many use cases this is a great dataviz tool to have in your toolbox.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有一些非常令人印象深刻的倡议，旨在使Python生成的可视化效果能够在浏览器中运行。它们通过将Python代码转换为基于`canvas`或`svg`绘图上下文的JavaScript来实现。其中最受欢迎和成熟的是[Plotly](https://plot.ly)和[Bokeh](https://bokeh.pydata.org/en/latest)。在[第14章](ch14.xhtml#chapter_web_presentations)中，您将看到如何在Jupyter笔记本中使用Plotly生成图表，并将其转移到网页上。对于许多用例来说，这是一个很好的数据可视化工具。
- en: 'While there is some brilliant coding behind these JavaScript converters and
    many solid use cases, they do have big limitations:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些JavaScript转换器背后有一些精彩的编码和许多实际用例，但它们确实有很大的局限性：
- en: Automated code conversion may well do the job, but the code produced is usually
    pretty impenetrable for a human being.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动代码转换可能能完成任务，但生成的代码通常对人类来说很难理解。
- en: Adapting and customizing the resulting plots using the powerful browser-based
    JavaScript development environment can be painful. We’ll see how this pain can
    be mitigated in [Chapter 14](ch14.xhtml#chapter_web_presentations) by using Plotly’s
    JS API.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用强大的基于浏览器的JavaScript开发环境调整和定制生成的图表可能会很痛苦。在[第14章](ch14.xhtml#chapter_web_presentations)中，我们将看到如何通过使用Plotly的JS
    API来减轻这种痛苦。
- en: You are limited to the subset of plot types currently available in the libraries.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您目前只能使用这些库中当前可用的图表类型的子集。
- en: Interactivity is very basic at the moment. Customizing user controls is best
    done in JavaScript, using the browser’s developer tools.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的交互性非常基础。最好使用浏览器的开发工具，在JavaScript中定制用户控件。
- en: Bear in mind that the people building these libraries have to be JavaScript
    experts, so if you want to understand anything of what they’re doing and eventually
    express yourself, then you’ll have to get up to scratch with some JavaScript.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，构建这些库的人必须是JavaScript专家，因此如果您希望理解他们正在做的事情并最终表达自己，那么您必须学习一些JavaScript。
- en: Why Python for Data Processing
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么选择Python进行数据处理
- en: Why you should choose Python for your data-processing needs is a little more
    involved. For a start, there are good alternatives as far as data processing is
    concerned. Let’s deal with a few candidates for the job, starting with the enterprise
    behemoth Java.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据处理，选择Python的原因更加复杂一些。首先，在数据处理方面有很多良好的替代方案。让我们从企业巨头Java开始，逐一探讨一些候选方案。
- en: Java
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java
- en: Among the other main, general-purpose programming languages, only Java offers
    anything like the rich ecosystem of libraries that Python does, with considerably
    more native speed too. But while Java is a lot easier to program in than languages
    like C++, it isn’t, in my opinion, a particularly nice language to program in,
    having rather too much in the way of tedious boilerplate code and excessive verbiage.
    This sort of thing starts to weigh heavily after a while and makes for a hard
    slog at the code face. As for speed, Python’s default interpreter is slow, but
    Python is a great *glue* language that plays nicely with other languages. This
    ability is demonstrated by the big Python data-processing libraries like NumPy
    (and its dependent, pandas), SciPy, and the like, which use C++ and Fortran libraries
    to do the heavy lifting while providing the ease of use of a simple scripting
    language.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他主要的通用编程语言中，只有Java提供了类似Python丰富库生态系统的东西，并且速度更快。但是虽然Java比如C++之类的语言更容易编程，但在我看来，它并不是一种特别好的编程语言，因为它有太多的乏味样板代码和过度冗长的言辞。这种事情在一段时间后开始变得沉重，并使编程变得非常困难。至于速度，Python的默认解释器速度较慢，但Python是一种很好的“胶水”语言，可以与其他语言很好地协作。这种能力由大型Python数据处理库如NumPy（及其依赖项pandas）、SciPy等所展示，它们使用C++和Fortran库来进行重型计算，同时提供简单脚本语言的易用性。
- en: R
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: R
- en: The venerable R has, until recently, been the tool of choice for many data scientists
    and is probably Python’s main competitor in the space. Like Python, R benefits
    from a very active community, some great tools like the plotting library ggplot2,
    and a syntax specially crafted for data science and statistics. But this specialism
    is a double-edged sword. Because R was developed for a specific purpose, it means
    that if, for example, you wish to write a web server to serve your R-processed
    data, you have to skip out to another language with all the attendant learning
    overheads, or try to hack something together in a round-hole/square-peg sort of
    way. Python’s general-purpose nature and its rich ecosystem mean one can do pretty
    much everything required of a data-processing pipeline (JS visuals aside) without
    having to leave its comfort zone. Personally, it is a small sacrifice to pay for
    a little syntactic clunkiness.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 备受尊敬的R直到最近一直是许多数据科学家的首选工具，也许是Python在这一领域的主要竞争对手。像Python一样，R受益于一个非常活跃的社区，一些很棒的工具如绘图库ggplot2，以及专门为数据科学和统计学设计的语法。但这种专业性是一把双刃剑。因为R是为特定目的开发的，这意味着如果你想写一个用于提供R处理数据的Web服务器，你必须跳出去使用另一种语言，带来了所有相关的学习开销，或者尝试以一种圆孔/方钉的方式粗略地组合。Python的通用性质和其丰富的生态系统意味着可以在不离开其舒适区的情况下完成几乎所有数据处理流水线所需的一切（除了JS视觉）。对我个人而言，这是为了一点点语法笨拙而付出的小小牺牲。
- en: Others
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: There are other alternatives to doing your data processing with Python, but
    none of them come close to the flexibility and power afforded by a general-purpose,
    easy-to-use programming language with a rich ecosystem of libraries. For example,
    mathematical programming environments such as Matlab and Mathematica have active
    communities and a plethora of great libraries, but they hardly count as general
    purpose, because they are designed to be used within a closed garden. They are
    also proprietary, which means a significant initial investment and a different
    vibe to Python’s resoundingly open source environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他选择可以用Python进行数据处理，但它们都无法与一种通用、易于使用的编程语言及其丰富的库生态系统所带来的灵活性和能力相比。例如，像Matlab和Mathematica这样的数学编程环境有着活跃的社区和大量优秀的库，但它们几乎不能算作通用目的，因为它们设计用于在封闭的环境中使用。它们也是专有的，这意味着需要显著的初始投资，并且与Python显然开放源代码的环境不同。
- en: GUI-driven dataviz tools like [Tableau](https://www.tableau.com) are great creations
    but will quickly frustrate someone used to freedom in programming. They tend to
    work great as long as you are singing from their songsheet, as it were. Deviations
    from the designated path get painful very quickly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 像[Tableau](https://www.tableau.com)这样由GUI驱动的数据可视化工具是伟大的创造，但对于习惯了编程自由的人来说，它们很快会感到沮丧。只要你按照它们的乐谱唱歌，它们通常运行良好。一旦偏离指定路径，情况就会迅速恶化。
- en: Python’s Getting Better All the Time
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python的日益改进
- en: As things stand, I think a very good case can be made for Python being the budding
    data scientist’s language of choice. But things are not standing still; in fact,
    Python’s capabilities in this area are growing at an astonishing rate. To put
    it in perspective, I have been programming in Python for over 20 years and have
    grown used to being surprised if I can’t find a Python module to help solve a
    problem at hand, but I find myself surprised at the growth of Python’s data-processing
    abilities, with a new, powerful library appearing weekly. To give an example,
    Python has traditionally been weak on statistical analysis libraries, with R being
    far ahead. Recently a number of powerful modules, such as statsmodels, have started
    to close this gap fast.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前情况而言，我认为可以充分证明 Python 是新兴数据科学家的首选语言。但事情并未停滞不前；事实上，Python 在这一领域的能力正以惊人的速度增长。举个例子，我已经使用
    Python 编程超过 20 年了，并且习惯于惊讶于如果找不到一个 Python 模块来帮助解决手头的问题，但我发现 Python 在数据处理能力方面的增长让我感到惊讶，每周都会出现一个新的强大库。例如，Python
    传统上在统计分析库方面表现较弱，而 R 则遥遥领先。最近，一些强大的模块，如 statsmodels，开始迅速弥补这一差距。
- en: Python is a thriving data-processing ecosystem with a pretty much unmatched
    general purpose, and it’s getting better week by week. It’s understandable why
    so many in the community are in a state of such excitement—it’s pretty exhilarating.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一个繁荣的数据处理生态系统，几乎无与伦比的通用性，并且它每周都在变得更好。可以理解为什么社区中有这么多人处于如此兴奋的状态——这确实令人振奋。
- en: As far as visualization in the browser, the good news is that there’s more to
    JavaScript than its privileged, nay, exclusive place in the web ecosystem. Thanks
    to an interpreter arms race that has seen performance increase in staggering leaps
    and bounds and some powerful visualization libraries such as D3, which would complement
    any language out there, JavaScript now has serious chops.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 至于在浏览器中的可视化，好消息是 JavaScript 并不仅限于它在网络生态系统中的特权，相反，由于解释器的竞争战，性能大幅提升，以及一些强大的可视化库，比如
    D3，这些都能与任何语言完美配合，JavaScript 现在拥有了真正的实力。
- en: In short, Python and JavaScript are wonderful complements for data visualization
    on the web, each needing the other to provide a vital missing component.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Python 和 JavaScript 是网络数据可视化的绝佳补充，彼此需要对方来提供至关重要的缺失组件。
- en: What You’ll Learn
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**你将学到什么**'
- en: There are some big Python and JavaScript libraries in our dataviz toolchain,
    and comprehensive coverage of them all would require a number of books. Nevertheless,
    I think that the fundamentals of most libraries, and certainly the ones covered
    here, can be grasped fairly quickly. Expertise takes time and practice but the
    basic knowledge needed to be productive is, so to speak, low-hanging fruit.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据可视化工具链中，有一些重要的 Python 和 JavaScript 库，要全面覆盖它们需要多本书。然而，我认为大多数库的基础知识，尤其是本书涵盖的那些，可以相当快地掌握。专业知识需要时间和实践，但要成为高效工作所需的基础知识，可以说是“易如反掌”。
- en: In that sense, this book aims to give you a solid backbone of practical knowledge,
    strong enough to take the weight of future development. I aim to make the learning
    curve as shallow as possible and get you over the initial climb with the practical
    skills needed to start refining your art.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个意义上说，本书旨在为您提供坚实的实用知识基础，足以支撑未来发展的重任。我旨在尽可能地降低学习曲线，并通过实际技能帮助您克服最初的障碍，开始精炼您的技艺。
- en: This book emphasizes pragmatism and best practice. It’s going to cover a fair
    amount of ground, and there isn’t enough space for many theoretical diversions.
    I cover those aspects of the libraries in the toolchain that are most commonly
    used, and point you to resources for the other issues. Most libraries have a hard
    core of functions, methods, classes, and the like that are the chief, functional
    subset. With these at your disposal, you can actually do stuff. Eventually, you’ll
    find an itch you can’t scratch with those, at which time good books, documentation,
    and online forums will be your friend.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本书强调实用主义和最佳实践。它将涵盖大量内容，没有足够的空间进行许多理论上的分歧。我涵盖了工具链中最常用的库的方面，并指引您去了解其他问题的资源。大多数库都有一些核心的函数、方法、类等，这些是主要的、功能性的子集。有了这些工具，您实际上可以做一些事情。最终，您会发现有些问题您无法仅凭这些工具解决，这时好书、文档和在线论坛将成为您的朋友。
- en: The Choice of Libraries
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**库的选择**'
- en: 'I had three things in mind while choosing the libraries used in the book:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择本书中使用的库时，我有三个考虑因素：
- en: Open source and [free as in beer](https://oreil.ly/WwriM)—you shouldn’t have
    to invest any extra money to learn with this book.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源和 [免费（如啤酒一样）](https://oreil.ly/WwriM) —— 您无需额外投资任何费用就可以使用本书进行学习。
- en: Longevity—generally well-established, community-driven, and popular.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史悠久 —— 通常是经过良好建立、由社区驱动和流行的。
- en: Best of breed (assuming good support and an active community), at the sweet
    spot between popularity and utility.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设有良好的支持和活跃的社区，**最佳实践**处于流行度和实用性的甜蜜点。
- en: The skills you learn here should be relevant for a long time. Generally, the
    obvious candidates have been chosen—libraries that write their own ticket, as
    it were. Where appropriate, I will highlight the alternative choices and give
    a rationale for my selection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您在此学到的技能应该会长期保持相关性。通常情况下，已经选择了明显的候选库——这些库可以自行编写它们的票据。在适当的情况下，我将突出显示替代选择，并对我选择的理由进行说明。
- en: Preliminaries
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开篇
- en: 'A few preliminary chapters are needed before beginning the transformative journey
    of our Nobel dataset through the toolchain. These cover the basic skills necessary
    to make the rest of the toolchain chapters run more fluidly. The first few chapters
    cover the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的诺贝尔奖数据集通过工具链进行转换之旅开始之前，需要一些初步章节。这些章节涵盖了使得后续工具链章节更流畅运行所需的基本技能。前几章包括以下内容：
- en: '[Chapter 2, “A Language-Learning Bridge Between Python and JavaScript”](ch02.xhtml#chapter_language_bridge)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二章，“Python 和 JavaScript 之间的语言学习桥梁”](ch02.xhtml#chapter_language_bridge)'
- en: Building a language bridge between Python and JavaScript
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 搭建 Python 和 JavaScript 之间的语言桥梁
- en: '[Chapter 3, “Reading and Writing Data with Python”](ch03.xhtml#chapter_read_write)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三章，“使用 Python 读写数据”](ch03.xhtml#chapter_read_write)'
- en: How to pass around data with Python, through various file formats and databases
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如何通过 Python 在各种文件格式和数据库中传递数据
- en: '[Chapter 4, “Webdev 101”](ch04.xhtml#chapter_webdev101)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[第四章，“Webdev 101”](ch04.xhtml#chapter_webdev101)'
- en: Covering the basic web development needed by the book
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 涵盖本书所需的基本网页开发
- en: These chapters are part tutorial, part reference, and it’s fine to skip straight
    to the beginning of the toolchain, dipping back where needed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些章节既是教程又是参考，可以直接跳到工具链的开始部分，需要时再回头查看。
- en: The Dataviz Toolchain
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据可视化工具链
- en: 'The main part of the book demonstrates the data visualization toolchain, following
    the journey of a dataset of Nobel Prize winners from raw, freshly scraped data
    to engaging, interactive JavaScript visualization. During the collection process,
    the refinement and transformation of a number of big libraries are demonstrated,
    summarized in [Figure I-2](#toolchain). These libraries are the industrial lathes
    of our toolchain: rich, mature tools that demonstrate the power of the Python+JavaScript
    dataviz stack. The following sections contain a brief introduction to the five
    stages of our toolchain and their major libraries.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的主要部分展示了数据可视化工具链，跟随诺贝尔奖获得者数据集从原始的、刚刮取下来的数据到引人入胜的、交互式的 JavaScript 可视化的过程。在收集过程中，展示了多个大型库的精炼和转换，总结在
    [图 I-2](#toolchain) 中。这些库是我们工具链的工业车床：丰富、成熟的工具展示了 Python+JavaScript 数据可视化堆栈的力量。接下来的章节包含了对我们工具链五个阶段及其主要库的简要介绍。
- en: '![dpj2 02](assets/dpj2_02.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 02](assets/dpj2_02.png)'
- en: Figure I-2\. The dataviz toolchain
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 I-2\. 数据可视化工具链
- en: 1\. Scraping Data with Scrapy
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 使用 Scrapy 抓取数据
- en: The first challenge for any data visualizer is getting hold of the data they
    need, whether inspired by a request or to scratch a personal itch. If you’re very
    lucky, this will be delivered to you in pristine form, but more often than not
    you have to go find it. I’ll cover the various ways you can use Python to get
    data off the web (e.g., web APIs or Google spreadsheets). The Nobel Prize dataset
    for the toolchain demonstration is scraped from its Wikipedia pages using Scrapy.^([2](introduction01.xhtml#idm45607823126112))
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 任何数据可视化工作者的第一个挑战是获得他们需要的数据，无论是受到请求的启发还是为了解决个人问题。如果非常幸运，这些数据会以原始形式交付给您，但更多时候您需要自己去寻找。我将介绍您可以使用
    Python 从网络获取数据的各种方法（例如，web API 或 Google 电子表格）。用于工具链演示的诺贝尔奖数据集是通过使用 Scrapy 从维基百科页面抓取的。^([2](introduction01.xhtml#idm45607823126112))
- en: Python’s Scrapy is an industrial-strength scraper that does all the data throttling
    and media pipelining, which are indispensable if you plan on scraping significant
    amounts of data. Scraping is often the only way to get the data you are interested
    in, and once you’ve mastered Scrapy’s workflow, all those previously off-limits
    datasets are only a spider away.^([3](introduction01.xhtml#idm45607823124512))
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 Scrapy 是一个工业强度的爬虫程序，可以处理所有的数据节流和媒体管道，如果您计划抓取大量数据，这些功能是不可或缺的。抓取数据通常是获取您感兴趣数据的唯一途径，一旦掌握了
    Scrapy 的工作流程，之前无法访问的数据集只隔一只蜘蛛之遥。^([3](introduction01.xhtml#idm45607823124512))
- en: 2\. Cleaning Data with pandas
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 使用 pandas 清洗数据
- en: The dirty secret of dataviz is that pretty much all data is dirty, and turning
    it into something you can use may well occupy a lot more time than anticipated.
    This is an unglamorous process that can easily steal over half your time, which
    is all the more reason to get good at it and use the right tools.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化的不为人知的秘密是，几乎所有的数据都是不干净的，将其转化为可用的数据可能会比预期花费更多时间。这是一个不起眼的过程，很容易占用超过一半的时间，这也是掌握它并使用正确工具的更多理由。
- en: '*pandas* is a huge player in the Python data-processing ecosystem. It’s a Python
    data-analysis library whose chief component is the DataFrame, essentially a programmatic
    spreadsheet. pandas extends NumPy, Python’s powerful numeric library, into the
    realm of heterogeneous datasets, the kind of categorical, temporal, and ordinal
    information that data visualizers have to deal with.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*pandas* 在 Python 数据处理生态系统中扮演着重要角色。它是一个 Python 数据分析库，其主要组件是 DataFrame，本质上是一个编程化的电子表格。pandas
    将 NumPy（Python 强大的数值计算库）扩展到了异构数据集的领域，这些数据集包括分类、时间序列和顺序信息，这些是数据可视化者必须处理的类型。'
- en: As well as being great for interactively exploring your data (using its built-in
    Matplotlib plots), pandas is well suited to the drudge work of cleaning data,
    making it easy to locate duplicate records, fix dodgy date-strings, find missing
    fields, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了适合交互式探索数据（使用其内置的 Matplotlib 绘图），pandas 还非常适合清理数据的苦活，可以轻松定位重复记录，修复不规范的日期字符串，找到丢失的字段等等。
- en: 3\. Exploring Data with pandas and Matplotlib
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用 pandas 和 Matplotlib 探索数据
- en: Before beginning the transformation of your data into a visualization, you need
    to understand it. The patterns, trends, and anomalies hidden in the data will
    inform the stories you are trying to tell with it, whether that’s explaining a
    recent rise in year-by-year widget sales or demonstrating global climate change.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始将数据转换为可视化之前，您需要对数据有深入的理解。数据中隐藏的模式、趋势和异常将决定您试图通过数据传达的故事，无论是解释年度小部件销售的最近增长还是展示全球气候变化。
- en: In conjunction with *IPython*, the Python interpreter on steroids, pandas and
    Matplotlib (with additions such as seaborn) provide a great way to explore your
    data interactively, generating rich, inline plots from the command line, slicing
    and dicing your data to reveal interesting patterns. The results of these explorations
    can then be easily saved to file or database to be passed on to your JavaScript
    visualization.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与*IPython*一起，作为强化版的 Python 解释器，pandas 和 Matplotlib（包括 seaborn 等附加组件）提供了一种很好的交互式数据探索方式，可以从命令行生成丰富的内联图表，通过切片和切块数据来揭示有趣的模式。这些探索的结果可以轻松保存到文件或数据库，供
    JavaScript 可视化使用。
- en: 4\. Delivering Your Data with Flask
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 使用 Flask 传递您的数据
- en: Once you’ve explored and refined your data, you’ll need to serve it to the web
    browser, where a JavaScript library like D3 can transform it. One of the great
    strengths of using a general-purpose language like Python is that it’s as comfortable
    rolling a web server in a few lines of code as it is crunching through large datasets
    with special-purpose libraries like NumPy and SciPy.^([4](introduction01.xhtml#idm45607823116480))
    *Flask* is Python’s most popular lightweight server and is perfect for creating
    small, RESTful^([5](introduction01.xhtml#idm45607823115264)) APIs that can be
    used by JavaScript to get data from the server, in files or databases, to the
    browser. As I’ll demonstrate, you can roll a RESTful API in a few lines of code,
    capable of delivering data from SQL or NoSQL databases.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您探索和完善了您的数据，您将需要将其提供给 Web 浏览器，其中像 D3 这样的 JavaScript 库可以转换它。使用像 Python 这样的通用语言的一个伟大优势是，它像通过几行代码滚动一个
    Web 服务器一样轻松，它像使用 NumPy 和 SciPy 这样的特定目的库一样轻松处理大型数据集。^([4](introduction01.xhtml#idm45607823116480))
    *Flask* 是 Python 最流行的轻量级服务器，非常适合创建小型的、RESTful^([5](introduction01.xhtml#idm45607823115264))
    API，JavaScript 可以使用它从服务器、文件或数据库中获取数据到浏览器。正如我将演示的那样，您可以用几行代码来创建一个 RESTful API，能够从
    SQL 或 NoSQL 数据库中提供数据。
- en: 5\. Transforming Data into Interactive Visualizations with Plotly and D3
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 使用 Plotly 和 D3 将数据转换为交互式可视化
- en: Once the data is cleaned and refined, we have the visualization phase, where
    selected reflections of the dataset are presented, perhaps allowing the user to
    explore them interactively. Depending on the data, this might involve conventional
    charts, maps, or novel visualizations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清洗和精炼完成后，我们进入可视化阶段，展示数据集的精选反映，可能允许用户进行交互式探索。根据数据的不同，这可能涉及传统图表、地图或新颖的可视化方式。
- en: Plotly is a brilliant charting library that allows you to develop your charts
    in Python and transfer them to the web. As we’ll see in [Chapter 14](ch14.xhtml#chapter_web_presentations),
    it also has a JavaScript API that mimics the Python one, giving you a native JS
    charting library for free.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Plotly 是一个出色的图表库，允许您在 Python 中开发图表并将其转移到 Web 上。正如我们将在[第 14 章](ch14.xhtml#chapter_web_presentations)中看到的那样，它还具有一个
    JavaScript API，模仿 Python API，为您提供一个免费的本地 JS 图表库。
- en: '*D3* is JavaScript’s powerhouse visualization library, arguably one of the
    most powerful visualization tools irrespective of language. We’ll use D3 to create
    a novel Nobel Prize visualization with multiple elements and user interaction,
    allowing people to explore the dataset for items of interest. D3 can be challenging
    to learn, but I’ll bring you quickly up to speed and get you ready to start honing
    your skills in the doing.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*D3* 是 JavaScript 强大的可视化库，无论语言如何，都是最强大的可视化工具之一。我们将使用 D3 创建一个包含多个元素和用户交互的新颖的诺贝尔奖可视化，允许人们探索数据集中的感兴趣项。学习
    D3 可能具有挑战性，但我将迅速带您了解并准备好开始磨练您的技能。'
- en: Smaller Libraries
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更小的库
- en: 'In addition to the big libraries covered, there is a large supporting cast
    of smaller libraries. These are the indispensable smaller tools, the hammers and
    spanners of the toolchain. Python in particular has an incredibly rich ecosystem,
    with small, specialized libraries for almost every conceivable job. Among the
    strong supporting cast, some particularly deserving of mention are:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 除了涵盖的大型库外，还有一个大量的小型库支持群体。这些是不可或缺的小工具，是工具链的锤子和扳手。特别值得一提的是 Python 生态系统非常丰富，几乎为每个可想象的任务提供了小型专业库。在强大的支持阵容中，特别值得一提的是：
- en: Requests
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Requests
- en: Python’s go-to HTTP library, fully deserving its motto “HTTP for humans.” Requests
    is far superior to urllib2, one of Python’s included batteries.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的首选 HTTP 库，完全配得上其口号“人类的 HTTP”。Requests 比 Python 自带的 urllib2 要好得多。
- en: SQLAlchemy
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy
- en: The best Python SQL toolkit and object-relational mapper (ORM) there is. It’s
    feature-rich and makes working with the various SQL-based databases a relative
    breeze.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的 Python SQL 工具包和对象关系映射器（ORM）。它功能丰富，使得与各种基于 SQL 的数据库的工作相对轻松。
- en: seaborn
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn
- en: A great addition to Python’s plotting powerhouse Matplotlib, it adds some very
    useful plot types including some statistical ones of particular use to data visualizers.
    It also adds arguably superior aesthetics, overriding the Matplotlib defaults.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Python 绘图强大工具 Matplotlib 的重要补充，它添加了一些非常有用的图形类型，特别适用于数据可视化者。它还增加了更出色的美学效果，覆盖了
    Matplotlib 的默认设置。
- en: Crossfilter
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Crossfilter
- en: Even though JavaScript’s data-processing libraries are a work in progress, a
    few really useful ones have emerged recently, with Crossfilter being a standout.
    It enables very fast filtering of row-columnar datasets and is ideally suited
    to dataviz work, which is unsurprising because one of its creators is Mike Bostock,
    the father of D3.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 JavaScript 的数据处理库还在不断发展中，但最近出现了一些非常有用的库，其中 Crossfilter 是一个突出的例子。它能够非常快速地对行列数据集进行过滤，非常适合数据可视化工作，这一点并不令人意外，因为它的创始人之一是
    D3 的创始人 Mike Bostock。
- en: marshmallow
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: marshmallow
- en: A brilliant and very handy library that converts complex datatypes like objects
    to and from native Python datatypes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常出色且非常方便的库，可以将诸如对象之类的复杂数据类型转换为原生 Python 数据类型。
- en: Using the Book
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本书
- en: Although the book’s different parts follow a process of data transformation,
    this book doesn’t need to be read cover to cover. The first part provides a basic
    toolkit for Python- and JavaScript-based web dataviz and will inevitably have
    content that is familiar to many readers. Cherry-pick for the stuff you don’t
    know and dip back as required (there will be link-backs further on, as required).
    The language-learning bridge between Python and JavaScript will be unnecessary
    for those seasoned in both languages, although there may still be some useful
    nuggets.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书的不同部分遵循数据转换的过程，但不必从头到尾一次性阅读。第一部分提供了一个基本工具包，用于基于 Python 和 JavaScript 的 web
    数据可视化，并且其中的内容对许多读者来说可能是熟悉的。挑选你不了解的内容，并根据需要进行回溯（根据需要将会有链接回溯）。对于那些精通这两种语言的人来说，Python
    和 JavaScript 之间的语言学习桥梁是不必要的，尽管仍然可能有一些有用的信息。
- en: The remaining parts of the book, following our toolchain as it transforms a
    fairly uninspiring web list into a fully fledged, interactive D3 visualization,
    are essentially self-contained. If you want to dive immediately into [Part III](part03.xhtml#part_clean_explore)
    and some data cleaning and exploration with pandas, go right ahead, but be aware
    that it assumes the existence of a dirty Nobel Prize dataset. You can see how
    that was produced by Scrapy later if that fits your schedule. Equally, if you
    want to dive straight into creating the Nobel-viz app in parts [Part IV](part04.xhtml#part_delivery)
    and [Part V](part05.xhtml#part_viz), be aware that they assume a clean Nobel Prize
    dataset.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的其余部分遵循我们的工具链，将一个相当乏味的 web 列表转化为一个完全成熟、交互式的 D3 可视化，本质上是相互独立的。如果你想立即深入到 [第三部分](part03.xhtml#part_clean_explore)
    并使用 pandas 进行一些数据清理和探索，可以直接进行，但要注意它假定存在一个脏的诺贝尔奖数据集。如果这符合你的计划，稍后可以看看 Scrapy 是如何产生它的。同样，如果你想直接开始创建诺贝尔可视化应用的第四部分和第五部分，请注意它们假设有一个干净的诺贝尔奖数据集。
- en: Whatever route you take, I suggest eventually aiming to acquire all the basic
    skills covered in the book if you intend to make dataviz your profession.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪条路径，我建议最终目标是掌握书中涵盖的所有基本技能，如果你打算把数据可视化作为你的职业。
- en: A Little Bit of Context
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点背景信息
- en: This is a practical book and assumes that the reader has a pretty good idea
    of what he or she wants to visualize and how that visualization should look and
    feel, as well as a desire to get cracking on it, unencumbered by too much theory.
    Nevertheless, drawing on the history of data visualization can both clarify the
    central themes of the book and add valuable context. It can also help explain
    why now is such an exciting time to be entering the field, as technological innovation
    is driving novel dataviz forms, and people are grappling with the problem of presenting
    the increasing amount of multidimensional data generated by the internet.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本实用的书，假设读者对自己想要可视化的内容有一个相当清晰的想法，以及这种可视化应该看起来和感觉如何，并且渴望开始行动，不受太多理论的约束。然而，借鉴数据可视化的历史既可以澄清本书的中心主题，也可以增加宝贵的背景知识。它还可以帮助解释为什么现在是进入这个领域的如此激动人心的时刻，因为技术创新正在推动新型数据可视化形式的发展，人们正在努力解决因互联网生成的多维数据量不断增加而带来的问题。
- en: Data visualization has an impressive body of theory behind it, and there are
    some great books out there that I recommend you read (see [“Recommended Books”](#rec_books)
    for a little selection). The practical benefit of understanding the way humans
    visually harvest information cannot be overstated. It can be easily demonstrated,
    for example, that a pie chart is almost always a bad way of presenting comparative
    data and a simple bar chart is far preferable. By conducting psychometric experiments,
    we now have a pretty good idea of how to trick the human visual system and make
    relationships in the data harder to grasp. Conversely, we can show that some visual
    forms are close to optimal for amplifying contrast. The literature, at its very
    least, provides some useful rules of thumb that suggest good candidates for any
    particular data narrative.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化背后有着一整套令人印象深刻的理论体系，而且有一些我建议你阅读的好书（参见[“推荐书籍”](#rec_books)）。理解人类视觉收集信息的方式的实际好处不言而喻。例如，通过心理测量实验，我们现在已经相当清楚如何欺骗人类视觉系统，使数据中的关系更难理解。相反，我们可以展示一些视觉形式几乎最优化地增强对比度。至少从文献上来看，这些提供了一些有用的经验法则，建议了解任何特定数据叙事的良好候选人。
- en: In essence, good dataviz tries to present data, collected from measurements
    in the world (empirical) or as the product of abstract mathematical explorations
    (e.g., the beautiful fractal patterns of the [Mandelbrot set](https://oreil.ly/w5BIV)),
    in such a way as to draw out or emphasize any patterns or trends that might exist.
    These patterns can be simple (e.g., average weight by country), or the product
    of sophisticated statistical analysis (e.g., data clustering in a higher dimensional
    space).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，良好的数据可视化试图以一种能够揭示或强调可能存在的任何模式或趋势的方式呈现数据，这些数据可能是从世界上的测量（经验性）中收集的，或者作为抽象数学探索的产物（例如，[Mandelbrot集](https://oreil.ly/w5BIV)的美丽分形图案）。这些模式可以是简单的（例如，按国家平均体重），也可以是复杂统计分析的产物（例如，在更高维度空间中的数据聚类）。
- en: In its untransformed state, we can imagine this data floating as a nebulous
    cloud of numbers or categories. Any patterns or correlations are entirely obscure.
    It’s easy to forget, but the humble spreadsheet ([Figure I-3](#dev_of_viz) a)
    is a data visualization—the ordering of data into row-columnar form is an attempt
    to tame it, make its manipulation easier, and highlight discrepancies (e.g., actuarial
    bookkeeping). Of course, most people are not adept at spotting patterns in rows
    of numbers, so more accessible, visual forms were developed to engage with our
    visual cortex, the prime human conduit for information about the world. Enter
    the bar chart, pie chart,^([6](introduction01.xhtml#idm45607823376576)) and line
    chart. More imaginative ways were employed to distill statistical data in a more
    accessible form, one of the most famous being Charles Joseph Minard’s visualization
    of Napoleon’s disastrous Russian campaign of 1812 ([Figure I-3](#dev_of_viz) b).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在其未转换的状态下，我们可以想象这些数据漂浮为一个模糊的数字或类别云团。任何模式或相关性都完全隐晦。很容易忘记，但是卑微的电子表格（[图 I-3](#dev_of_viz)
    a）就是数据可视化——数据排列成行列形式是为了驯服它，使其操作更容易，并突出差异（例如，精算簿记）。当然，大多数人并不擅长在数字行中发现模式，因此开发了更易于理解的视觉形式来与我们的视觉皮层互动，这是人类获取关于世界信息的主要通道。于是便有了条形图、饼图^([6](introduction01.xhtml#idm45607823376576))和折线图的出现。更富想象力的方法被用来将统计数据提炼成更易理解的形式，其中最著名的之一是查尔斯·约瑟夫·米纳德对1812年拿破仑灾难性俄罗斯战役的可视化（[图
    I-3](#dev_of_viz) b）。
- en: 'The lighter tan-colored stream in [Figure I-3](#dev_of_viz) b shows the advance
    of Napoleon’s army on Moscow; the black line shows the retreat. The thickness
    of the stream represents the size of Napoleon’s army, thinning as casualties mounted.
    A temperature chart below is used to indicate the temperature at locations along
    the way. Note the elegant way in which Minard has combined multidimensional data
    (casualty statistics, geographical location, and temperature) to give an impression
    of the carnage, which would be hard to grasp in any other way (imagine trying
    to jump from a chart of casualties to a list of locations and making the necessary
    connections). I would argue that the chief problem of modern interactive dataviz
    is exactly the same as that faced by Minard: how to move beyond conventional one-dimensional
    bar charts (perfectly good for many things) and develop new ways to communicate
    cross-dimensional patterns effectively.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 I-3](#dev_of_viz) 中的浅棕色流表示拿破仑军队向莫斯科进发；黑线表示撤退。流的粗细代表拿破仑军队规模，随伤亡增加而变薄。下方的温度图表用于指示沿途位置的温度。请注意Minard如何巧妙地结合多维数据（伤亡统计、地理位置和温度），以展现战争的惨状，这在其他方式下很难理解（想象试图从伤亡图表跳转到位置列表并进行必要的联系）。我认为现代交互式数据可视化的主要问题与Minard面临的问题完全相同：如何超越传统的一维条形图（对于许多事情来说完全有效）并开发新的有效传达跨维度模式的方式。'
- en: '![dpj2 03](assets/dpj2_03.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 03](assets/dpj2_03.png)'
- en: Figure I-3\. (a) An early spreadsheet and (b) Charles Joseph Minard’s visualization
    of Napoleon’s Russian campaign of 1812
  id: totrans-113
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 I-3\. (a) 早期电子表格和 (b) Charles Joseph Minard 对1812年拿破仑俄罗斯战役的可视化
- en: Until quite recently, most of our experience of charts was not much different
    from those of Charles Joseph Minard’s audience. They were pre-rendered and inert,
    and showed one reflection of the data, hopefully an important and insightful one
    but nevertheless under total control of the author. In this sense, the replacement
    of real ink points with computer screen pixels was only a change in the scale
    of distribution.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，我们对图表的大部分体验与Charles Joseph Minard的观众并无多大不同。它们都是预渲染和惰性的，展示的只是数据的一个反映，希望是一个重要且有洞察力的反映，但仍然完全受作者控制。在这个意义上，将真实的墨水点替换为计算机屏幕像素只是分布规模的改变。
- en: The leap to the internet just replaced newsprint with pixels, the visualization
    still being unclickable and static. Recently, the combination of some powerful
    visualization libraries (D3 being preeminent among them) and a massive improvement
    in JavaScript’s performance have opened the way to a new type of visualization,
    one that is easily accessible and dynamic, and actually encourages exploration
    and discovery. The clear distinction between data exploration and presentation
    is blurred. This new type of data visualization is the focus of this book and
    the reason why dataviz for the web is such an exciting area right now. People
    are trying to create new ways to visualize data and make it more accessible/useful
    to the end user. This is nothing short of a revolution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的发展只是用像素取代了新闻纸，可视化仍然是不可点击且静态的。最近，一些强大的可视化库（其中以D3为首）和JavaScript性能的大幅提升开辟了一条新的可视化路径，这种可视化方式易于访问和动态，并实际上鼓励探索和发现。数据探索和展示之间的明确界限变得模糊。这种新型数据可视化是本书的重点，也是为什么Web数据可视化现在如此令人兴奋的原因。人们正在尝试创造新的数据可视化方式，使其对最终用户更加可访问和有用。这简直是一场革命。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Dataviz on the web is an exciting place to be right now, with innovations in
    interactive visualizations coming thick and fast, and many (if not most) of them
    being developed with D3\. JavaScript is the only browser-based language, so the
    cool visuals are by necessity being coded in it (or converted into it). But JavaScript
    lacks the tools or environment necessary for the less dramatic but just as vital
    element of modern dataviz: the aggregation, curation, and processing of the data.
    This is where Python rules the roost, providing a general-purpose, concise, and
    eminently readable programming language with access to an increasing stable of
    first-class data-processing tools. Many of these tools leverage the power of very
    fast, low-level libraries, making Python data processing fast as well as easy.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，数据可视化在网络上是一个令人兴奋的领域，交互式可视化的创新层出不穷，许多（如果不是大多数）都是用 D3 开发的。 JavaScript 是唯一的基于浏览器的语言，因此酷炫的视觉效果必然是用它（或转换为它）。但是
    JavaScript 缺乏进行数据聚合、筛选和处理的工具或环境，这是现代数据可视化同样重要但不那么引人注目的部分。这就是 Python 的优势所在，它提供了一种通用、简洁和极易阅读的编程语言，并且可以访问日益稳定的一流数据处理工具。其中许多工具利用了非常快速的低级别库的强大功能，使
    Python 数据处理既快速又简单。
- en: This book introduces some of those heavyweight tools, as well as a host of other
    smaller but equally vital tools. It also shows how Python and JavaScript in concert
    represent the best dataviz stack out there for anyone wishing to deliver their
    visualizations to the internet.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本书介绍了一些重量级工具，以及一系列其他较小但同样重要的工具。它还展示了 Python 和 JavaScript 结合使用是最佳数据可视化堆栈，任何希望将他们的可视化作品发布到互联网上的人都可以使用。
- en: Up next is the first part of the book, covering the preliminary skills needed
    for the toolchain. You can work through it now or skip ahead to [Part II](part02.xhtml#part_getting_data)
    and the start of the toolchain, referring back when needed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是本书的第一部分，涵盖了工具链所需的初步技能。您现在可以开始学习，或者直接跳到 [第 II 部分](part02.xhtml#part_getting_data)
    和工具链的开始部分，在需要时参考之前的内容。
- en: Recommended Books
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐书籍
- en: Here are a few key data visualization books to whet your appetite, covering
    the gamut from interactive dashboards to beautiful and insightful infographics.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关键的数据可视化书籍，以满足您的胃口，涵盖从交互式仪表板到美丽而富有洞见的信息图表的方方面面。
- en: 'Bertin, Jacques. *Semiology of Graphics: Diagrams, Networks, Maps*. Esri Press,
    2010.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Bertin, Jacques. *Semiology of Graphics: Diagrams, Networks, Maps*. Esri Press,
    2010.'
- en: Cairo, Alberto. *The Functional Art*. New Riders, 2012.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cairo, Alberto. *The Functional Art*. New Riders, 2012.
- en: 'Few, Stephen. *Information Dashboard Design: Displaying Data for At-a-Glance
    Monitoring*, 2nd Ed. Analytics Press, 2013.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Few, Stephen. *Information Dashboard Design: Displaying Data for At-a-Glance
    Monitoring*, 2nd Ed. Analytics Press, 2013.'
- en: 'Rosenberg, Daniel and Anthony Grafton. *Cartographies of Time: A History of
    the Timeline*. Princeton Architectural Press, 2012.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Rosenberg, Daniel and Anthony Grafton. *Cartographies of Time: A History of
    the Timeline*. Princeton Architectural Press, 2012.'
- en: Tufte, Edward. *The Visual Display of Quantitative Information*, 2nd Ed. Graphics
    Press, 2001.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tufte, Edward. *The Visual Display of Quantitative Information*, 2nd Ed. Graphics
    Press, 2001.
- en: Wexler, Steve. *The Big Book of Dashboards*. Wiley, 2017.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wexler, Steve. *The Big Book of Dashboards*. Wiley, 2017.
- en: Wilke, Claus. *Fundamentals of Data Visualization*. O’Reilly, 2019\. ([Free
    online version](https://clauswilke.com/dataviz).)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wilke, Claus. *Fundamentals of Data Visualization*. O’Reilly, 2019\. ([免费在线版本](https://clauswilke.com/dataviz).)
- en: ^([1](introduction01.xhtml#idm45607823100368-marker)) See the [Benchmarks Game
    website](https://oreil.ly/z6T6R) for a fairly jaw-dropping comparison.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](introduction01.xhtml#idm45607823100368-marker)) 参见 [Benchmarks Game 网站](https://oreil.ly/z6T6R)
    进行相当令人瞠目结舌的比较。
- en: ^([2](introduction01.xhtml#idm45607823126112-marker)) [Web scraping](https://oreil.ly/g3LPa)
    is a computer software technique to extract information from websites, usually
    involving getting and parsing web pages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](introduction01.xhtml#idm45607823126112-marker)) [网页抓取](https://oreil.ly/g3LPa)
    是一种从网站提取信息的计算机软件技术，通常涉及获取和解析网页。
- en: ^([3](introduction01.xhtml#idm45607823124512-marker)) Scrapy’s controllers are
    called spiders.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](introduction01.xhtml#idm45607823124512-marker)) Scrapy 的控制器被称为爬虫。
- en: ^([4](introduction01.xhtml#idm45607823116480-marker)) The scientific Python
    library, part of the NumPy ecosystem.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](introduction01.xhtml#idm45607823116480-marker)) 这是 NumPy 生态系统的一部分的科学 Python
    库。
- en: ^([5](introduction01.xhtml#idm45607823115264-marker)) REST is short for Representational
    State Transfer, the dominant style for HTTP-based web APIs and much recommended.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](introduction01.xhtml#idm45607823115264-marker)) REST 是 Representational
    State Transfer 的缩写，是基于 HTTP 的 Web API 的主导风格，并且强烈推荐使用。
- en: ^([6](introduction01.xhtml#idm45607823376576-marker)) William Playfair’s *Statistical
    Breviary* of 1801 having the dubious distinction of originating the pie chart.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](introduction01.xhtml#idm45607823376576-marker)) 威廉·普莱费尔于1801年创作的*统计摘要*因创造了饼图而获得了可疑的荣誉。
