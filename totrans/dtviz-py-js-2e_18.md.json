["```py\n$ pip install Flask-SQLALchemy flask-marshmallow marshmallow-sqlalchemy\n```", "```py\nfrom sqlalchemy import Column, Integer, String, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass Winner(Base):\n    __tablename__ = 'winners'\n    id = Column(Integer, primary_key=True) ![1](assets/1.png)\n    category = Column(String)\n    country = Column(String)\n    date_of_birth = Column(String) # string form dates\n    date_of_death = Column(String)\n    # ...\n\n# create SQLite database and start a session\nengine = sqlalchemy.create_engine('sqlite:///data/nobel_winners_cleaned_api.db')\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n```", "```py\ndf['date_of_birth'] = df['date_of_birth'].astype(str)\ndf['date_of_death'] = dl['date_of_death'].astype(str)\ndf.date_of_birth\n#0      1927-10-08\n#4      1829-07-26\n#5      1862-08-29\n..\n```", "```py\nfor d in df_tosql.to_dict(orient='records'):\n    session.add(Winner(**d))\nsession.commit()\n```", "```py\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_marshmallow import Marshmallow\n\n# Init app\napp = Flask(__name__)\n```", "```py\napp.config['SQLALCHEMY_DATABASE_URI'] =\\\n    'sqlite:///data/nobel_winners_cleaned_api_test.db'\n\ndb = SQLAlchemy(app)\n```", "```py\nclass Winner(db.Model):\n    __tablename__ = 'winners'\n    id = db.Column(db.Integer, primary_key=True)\n    category = db.Column(db.String)\n    country = db.Column(db.String)\n    date_of_birth = db.Column(db.String)\n    date_of_death = db.Column(db.String)\n    gender = db.Column(db.String)\n    link = db.Column(db.String)\n    name = db.Column(db.String)\n    place_of_birth = db.Column(db.String)\n    place_of_death = db.Column(db.String)\n    text = db.Column(db.Text)\n    year = db.Column(db.Integer)\n    award_age = db.Column(db.Integer)\n\n    def __repr__(self):\n        return \"<Winner(name='%s', category='%s', year='%s')>\"\\\n            % (self.name, self.category, self.year)\n```", "```py\nma = Marshmallow(app)\n\nclass WinnerSchema(ma.Schema):\n    class Meta:\n        model = Winner\n        fields = ('category', 'country', 'date_of_birth', 'date_of_death', ![1](assets/1.png)\n                  'gender', 'link', 'name', 'place_of_birth', 'place_of_death',\n                  'text', 'year', 'award_age')\n\nwinner_schema = WinnerSchema() ![2](assets/2.png)\nwinners_schema = WinnerSchema(many=True)\n```", "```py\n@app.route('/winners/')\ndef winner_list():\n    all_winners = Winner.query.all() ![1](assets/1.png)\n    result = winners_schema.jsonify(all_winners) ![2](assets/2.png)\n    return result\n```", "```py\n$ curl http://localhost:5000/winners/\n[\n  {\n    \"award_age\": 57,\n    \"category\": \"Physiology or Medicine\",\n    \"country\": \"Argentina\",\n    \"date_of_birth\": \"1927-10-08\",\n    \"date_of_death\": \"2002-03-24\",\n    \"gender\": \"male\",\n    \"link\": \"http://en.wikipedia.org/wiki/C%C3%A9sar_Milstein\",\n    \"name\": \"C\\u00e9sar Milstein\",\n    \"place_of_birth\": \"Bah\\u00eda Blanca ,  Argentina\",\n    \"place_of_death\": \"Cambridge , England\",\n    \"text\": \"C\\u00e9sar Milstein , Physiology or Medicine, 1984\",\n    \"year\": 1984\n  },\n  {\n    \"award_age\": 80,\n    \"category\": \"Peace\",  ...\n  }...\n]\n```", "```py\n@app.route('/winners/<id>/')\ndef winner_detail(id):\n    winner = Winner.query.get_or_404(id) ![1](assets/1.png)\n    result = winner_schema.jsonify(winner)\n    return result\n```", "```py\n$ curl http://localhost:5000/winners/10/\n{\n  \"award_age\": 60,\n  \"category\": \"Chemistry\",\n  \"country\": \"Belgium\",\n  \"date_of_birth\": \"1917-01-25\",\n  \"date_of_death\": \"2003-05-28\",\n  \"gender\": \"male\",\n  \"link\": \"http://en.wikipedia.org/wiki/Ilya_Prigogine\",\n  \"name\": \"Ilya Prigogine\",\n  \"place_of_birth\": \"Moscow ,  Russia\",\n  \"place_of_death\": \"Brussels ,  Belgium\",\n  \"text\": \"Ilya Prigogine ,  born in Russia , Chemistry, 1977\",\n  \"year\": 1977\n}\n```", "```py\n@app.route('/winners/')\ndef winner_list():\n    valid_filters = ('year', 'category', 'gender', 'country', 'name') ![1](assets/1.png)\n    filters = request.args.to_dict()\n\n    args = {name: value for name, value in filters.items()\n            if name in valid_filters} ![2](assets/2.png)\n    # This for loop does the same job as the dict\n    # comprehension above\n    # args = {}\n    # for vf in valid_filters:\n    #     if vf in filters:\n    #         args[vf] = filters.get(vf)\n    app.logger.info(f'Filtering with the fields: {args}')\n    all_winners = Winner.query.filter_by(**args) ![3](assets/3.png)\n    result = winners_schema.jsonify(all_winners)\n    return result\n```", "```py\n$ curl -d category=Physics -d year=1933 --get http://localhost:5000/winners/\n\n[\n  {\n    \"award_age\": 31,\n    \"category\": \"Physics\",\n    \"country\": \"United Kingdom\",\n    \"date_of_birth\": \"1902-08-08\",\n    \"date_of_death\": \"1984-10-20\",\n    \"gender\": \"male\",\n    \"link\": \"http://en.wikipedia.org/wiki/Paul_Dirac\",\n    \"name\": \"Paul Dirac\",\n    \"place_of_birth\": \"Bristol , England\",\n    \"place_of_death\": \"Tallahassee, Florida , US\",\n    \"text\": \"Paul Dirac , Physics, 1933\",\n    \"year\": 1933\n  },\n  {\n    \"award_age\": 46,\n    \"category\": \"Physics\",\n    \"country\": \"Austria\",\n    \"date_of_birth\": \"1887-08-12\",\n    \"date_of_death\": \"1961-01-04\",\n    \"gender\": \"male\",\n    \"link\": \"http://en.wikipedia.org/wiki/Erwin_Schr%C3%B6dinger\",\n    \"name\": \"Erwin Schr\\u00f6dinger\",\n    \"place_of_birth\": \"Erdberg, Vienna, Austria\",\n    \"place_of_death\": \"Vienna, Austria\",\n    \"text\": \"Erwin Schr\\u00f6dinger , Physics, 1933\",\n    \"year\": 1933\n  }\n]\n```", "```py\n@app.route('/winners/', methods=['POST'])\ndef add_winner():\n    valid_fields = winner_schema.fields\n\n    winner_data = {name: value for name,\n                   value in request.json.items() if name in valid_fields}\n    app.logger.info(f\"Creating a winner with these fields: {winner_data}\")\n    new_winner = Winner(**winner_data)\n    db.session.add(new_winner)\n    db.session.commit()\n    return winner_schema.jsonify(new_winner)\n```", "```py\n$ curl http://localhost:5000/winners/ \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"category\":\"Physics\",\"year\":2021,\n         \"name\":\"Syukuro Manabe\",\"country\":\"Japan\"}' ![1](assets/1.png)\n{\n  \"award_age\": null,\n  \"category\": \"Physics\",\n  \"country\": \"Japan\",\n  \"date_of_birth\": null,\n  \"date_of_death\": null,\n  \"gender\": null,\n  \"link\": null,\n  \"name\": \"Syukuro Manabe\",\n  \"place_of_birth\": null,\n  \"place_of_death\": null,\n  \"text\": null,\n  \"year\": 2021\n}\n```", "```py\n@app.route('/winners/<id>/', methods=['PATCH'])\ndef update_winner(id):\n    winner = Winner.query.get_or_404(id)\n    valid_fields = winner_schema.fields\n    winner_data = {name: value for name, value\n                    in request.json.items() if name in valid_fields}\n    app.logger.info(f\"Updating a winner with these fields: {winner_data}\")\n    for k, v in winner_data.items():\n        setattr(winner, k, v)\n    db.session.commit()\n    return winner_schema.jsonify(winner)\n```", "```py\n$ curl http://localhost:5000/winners/3/ \\\n    -X PATCH \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"name\":\"Morris Maeterlink\",\"year\":\"1912\"}'\n{\n  \"award_age\": 49,\n  \"category\": \"Literature\",\n  \"country\": \"Belgium\",\n  \"date_of_birth\": \"1862-08-29\",\n  \"date_of_death\": \"1949-05-06\",\n  \"gender\": \"male\",\n  \"link\": \"http://en.wikipedia.org/wiki/Maurice_Maeterlinck\",\n  \"name\": \"Morris Maeterlink\",\n  \"place_of_birth\": \"Ghent ,  Belgium\",\n  \"place_of_death\": \"Nice ,  France\",\n  \"text\": \"Maurice Maeterlinck , Literature, 1911\", ![1](assets/1.png)\n  \"year\": 1912\n}\n```", "```py\n#...\nfrom flask.views import MethodView\n#...\n```", "```py\nclass WinnersListView(MethodView):\n\n    def get(self):\n        valid_filters = ('year', 'category', 'gender', 'country', 'name')\n        filters = request.args.to_dict()\n        args = {name: value for name, value in filters.items()\n                if name in valid_filters}\n        app.logger.info('Filtering with the %s fields' % (str(args)))\n        all_winners = Winner.query.filter_by(**args)\n        result = winners_schema.jsonify(all_winners)\n        return result\n\n    def post(self):\n        valid_fields = winner_schema.fields\n        winner_data = {name: value for name,\n                       value in request.json.items() if name in valid_fields}\n        app.logger.info(\"Creating a winner with these fields: %s\" %\n                        str(winner_data))\n        new_winner = Winner(**winner_data)\n        db.session.add(new_winner)\n        db.session.commit()\n        return winner_schema.jsonify(new_winner)\n\napp.add_url_rule(\"/winners/\",\n                 view_func=WinnersListView.as_view(\"winners_list_view\"))\n```", "```py\nclass WinnerView(MethodView):\n\n    def get(self, winner_id):\n        winner = Winner.query.get_or_404(winner_id)\n        result = winner_schema.jsonify(winner)\n        return result\n\n    def patch(self, winner_id):\n        winner = Winner.query.get_or_404(winner_id)\n        valid_fields = winner_schema.fields\n        winner_data = {name: value for name,\n                       value in request.json.items() if name in valid_fields}\n        app.logger.info(\"Updating a winner with these fields: %s\" %\n                        str(winner_data))\n        for k, v in winner_data.items():\n            setattr(winner, k, v)\n        db.session.commit()\n        return winner_schema.jsonify(winner)\n\n    def delete(self, winner_id):\n        winner = Winner.query.get_or_404(winner_id)\n        db.session.delete(winner)\n        db.session.commit()\n        return '', 204\n\napp.add_url_rule(\"/winners/<winner_id>\",\n                 view_func=WinnerView.as_view(\"winner_view\")) ![1](assets/1.png)\n```", "```py\n$ curl http://localhost:5000/winners/858 -X DELETE -v\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 5000 (#0)\n> DELETE /winners/858 HTTP/1.1\n> Host: localhost:5000\n> User-Agent: curl/7.47.0\n> Accept: */*\n>\n* HTTP 1.0, assume close after body\n< HTTP/1.0 204 NO CONTENT\n< Content-Type: application/json\n< Server: Werkzeug/2.0.2 Python/3.8.9\n< Date: Sun, 27 Mar 2022 15:35:51 GMT\n<\n* Closing connection 0\n```", "```py\nclass WinnersListView(MethodView):\n\n    def get(self):\n        valid_filters = ('year', 'category', 'gender', 'country', 'name')\n        filters = request.args.to_dict()\n        args = {name: value for name, value in filters.items()\n                if name in valid_filters}\n\n        app.logger.info(f'Filtering with the {args} fields')\n\n        page = request.args.get(\"_page\", 1, type=int) ![1](assets/1.png)\n        per_page = request.args.get(\"_per-page\", 20, type=int)\n\n        winners = Winner.query.filter_by(**args).paginate(page, per_page) ![2](assets/2.png)\n        winners_dumped = winners_schema.dump(winners.items)\n\n        results = {\n            \"results\": winners_dumped,\n            \"filters\": args,\n            \"pagination\": ![3](assets/3.png)\n            {\n                \"count\": winners.total,\n                \"page\": page,\n                \"per_page\": per_page,\n                \"pages\": winners.pages,\n            },\n        }\n\n        make_pagination_links('winners', results) ![4](assets/4.png)\n\n        return jsonify(results)\n    # ...\n```", "```py\n#...\nimport urllib.parse\n#...\ndef make_pagination_links(url, results):\n    pag = results['pagination']\n    query_string = urllib.parse.urlencode(results['filters']) ![1](assets/1.png)\n\n    page = pag['page']\n    if page > 1:\n        prev_page = url + '?_page=%d&_per-page=%d%s' % (page-1,\n                                                        pag['per_page'],\n                                                        query_string)\n    else:\n        prev_page = ''\n\n    if page < pag['pages']: ![2](assets/2.png)\n        next_page = url + '?_page=%d&_per-page=%d%s' % (page+1,\n                                                        pag['per_page'],\n                                                        query_string)\n    else:\n        next_page = ''\n\n    pag['prev_page'] = prev_page\n    pag['next_page'] = next_page\n```", "```py\n$ curl -d category=Physics  --get http://localhost:5000/winners/\n\n{\n  \"filters\": {\n    \"category\": \"Physics\"\n  },\n  \"pagination\": {\n    \"count\": 201,\n    \"next_page\": \"?_page=2&_per-page=20&category=Physics\", ![1](assets/1.png)\n    \"page\": 1,\n    \"pages\": 11,\n    \"per_page\": 20,\n    \"prev_page\": \"\"\n  },\n  \"results\": [ ![2](assets/2.png)\n    {\n      \"award_age\": 81,\n      \"category\": \"Physics\",\n      \"country\": \"Belgium\",\n      \"date_of_birth\": \"1932-11-06\",\n      \"date_of_death\": \"NaT\",\n      \"gender\": \"male\",\n      \"link\": \"http://en.wikipedia.org/wiki/Fran%C3%A7ois_Englert\",\n      \"name\": \"Fran\\u00e7ois Englert\",\n      \"place_of_birth\": \"Etterbeek ,  Brussels ,  Belgium\",\n      \"place_of_death\": null,\n      \"text\": \"Fran\\u00e7ois Englert , Physics, 2013\",\n      \"year\": 2013\n    },\n    {\n      \"award_age\": 37,\n      \"category\": \"Physics\",\n      \"country\": \"Denmark\",\n      \"date_of_birth\": \"1885-10-07\",\n      \"date_of_death\": \"1962-11-18\",\n      \"gender\": \"male\",\n      \"link\": \"http://en.wikipedia.org/wiki/Niels_Bohr\",\n      \"name\": \"Niels Bohr\",\n    ...\n    }]}\n```", "```py\n$ heroku login\nheroku: Press any key to open up the browser to login or q to exit\n ›   Warning: If browser does not open, visit\n ›   https://cli-auth.heroku.com/auth/browser/***\nheroku: Waiting for login...\nLogging in... done\nLogged in as me@example.com\n```", "```py\nheroku_api\n├── api_rest.py\n├── data\n│   ├── nobel_winners_cleaned_api.db\n├── Procfile\n└── requirements.txt\n```", "```py\nweb: gunicorn api_rest:app\n```", "```py\nFlask==2.0.2\ngunicorn==20.1.0\nFlask-Cors==3.0.10\nflask-marshmallow==0.14.0\nFlask-SQLAlchemy==2.5.1\nJinja2==3.0.1\nmarshmallow==3.15.0\nmarshmallow-sqlalchemy==0.28.0\nSQLAlchemy==1.4.26\nWerkzeug==2.0.2\n```", "```py\n$ git init\n$ git add .\n$ git commit -m \"First commit\"\n```", "```py\n$ heroku create flask-rest-pyjs2\n```", "```py\n$ git push heroku master\n```", "```py\n $ curl -d category=Physics --get\n                       https://flask-rest-pyjs2.herokuapp.com/winners/\n{\"filters\":{\"category\":\"Physics\"},\"pagination\":{\"count\":201,\n\"next_page\":\"winners/?_page=2&_per-page=20&category=Physics\",\"page\":1,\n\"pages\":11,\"per_page\":20,\"prev_page\":\"\"},\"results\":[{\"award_age\":81,\n\"category\":\"Physics\",\"country\":\"Belgium\",\"date_of_birth\":\"1932-11-06\",\n\"date_of_death\":\"NaT\",\"gender\":\"male\",\"link\":\"http://en.wikipedia.org/wiki/\nFran%C3%A7ois_Englert\",\"name\":\"Fran\\u00e7ois Englert\", ... }\n```", "```py\n# ...\nfrom flask_cors import CORS\n# Init app\napp = Flask(__name__)\nCORS(app)\n```", "```py\nlet data\nasync function init() {\n  data = await getData('winners/?category=Physics&country=United States') ![1](assets/1.png)\n  console.log(`${data.length} US Physics winners:`, data)\n  // Send the data to a suitable charting function\n  drawChart(data)\n}\n\ninit()\n\nasync function getData(ep='winners/?category=Physics'){ ![1](assets/1.png)\n  let API_URL = 'https://flask-rest-pyjs2.herokuapp.com/'\n  let data = []\n  while(true) {\n    let response = await fetch(API_URL + ep) ![2](assets/2.png)\n    .then(res => res.json()) ![3](assets/3.png)\n    .then(data => {\n      return data\n    })\n\n    ep = response.pagination.next_page\n    data = data.concat(response.results) // add the page results\n    if(!ep) break // no next-page so break out of the loop\n  }\n  return data\n}\n```", "```py\n89 US Physics winners:\n[{\n    award_age: 42\n    category: \"Physics\"\n    country: \"United States\"\n    date_of_birth: \"1969-12-16\"\n    date_of_death: \"NaT\"\n    gender: \"male\"\n    link: \"http://en.wikipedia.org/wiki/Adam_G._Riess\"\n    name: \"Adam G. Riess\"\n    place_of_birth: \"Washington, D.C., United States\"\n    place_of_death: null\n    text: \"Adam G. Riess , Physics, 2011\"\n    year: 2011\n  }, ...\n}]\n```"]