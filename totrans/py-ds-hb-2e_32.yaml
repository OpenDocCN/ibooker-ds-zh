- en: Chapter 28\. Density and Contour Plots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第28章\. 密度和等高线图
- en: 'Sometimes it is useful to display three-dimensional data in two dimensions
    using contours or color-coded regions. There are three Matplotlib functions that
    can be helpful for this task: `plt.contour` for contour plots, `plt.contourf`
    for filled contour plots, and `plt.imshow` for showing images. This chapter looks
    at several examples of using these. We’ll start by setting up the notebook for
    plotting and importing the functions we will use:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，使用等高线或彩色区域来在二维中显示三维数据是很有用的。Matplotlib 提供了三个函数可以帮助完成这个任务：`plt.contour` 用于等高线图，`plt.contourf`
    用于填充等高线图，`plt.imshow` 用于显示图像。本章将讨论几个使用这些函数的示例。我们将从设置绘图笔记本和导入我们将使用的函数开始：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Visualizing a Three-Dimensional Function
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化三维函数
- en: 'Our first example demonstrates a contour plot using a function <math alttext="z
    equals f left-parenthesis x comma y right-parenthesis"><mrow><mi>z</mi> <mo>=</mo>
    <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>,</mo> <mi>y</mi> <mo>)</mo></mrow></math>
    , using the following particular choice for <math alttext="f"><mi>f</mi></math>
    (we’ve seen this before in [Chapter 8](ch08.xhtml#section-0205-computation-on-arrays-broadcasting),
    when we used it as a motivating example for array broadcasting):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个例子演示了使用函数 <math alttext="z equals f left-parenthesis x comma y right-parenthesis"><mrow><mi>z</mi>
    <mo>=</mo> <mi>f</mi> <mo>(</mo> <mi>x</mi> <mo>,</mo> <mi>y</mi> <mo>)</mo></mrow></math>
    绘制等高线图，这里选择了特定的 <math alttext="f"><mi>f</mi></math>（我们在[第8章](ch08.xhtml#section-0205-computation-on-arrays-broadcasting)中已经见过它，当时我们将其作为数组广播的示例）：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A contour plot can be created with the `plt.contour` function. It takes three
    arguments: a grid of *x* values, a grid of *y* values, and a grid of *z* values.
    The *x* and *y* values represent positions on the plot, and the *z* values will
    be represented by the contour levels. Perhaps the most straightforward way to
    prepare such data is to use the `np.meshgrid` function, which builds two-dimensional
    grids from one-dimensional arrays:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `plt.contour` 函数创建等高线图。它接受三个参数：*x* 值的网格，*y* 值的网格和 *z* 值的网格。*x* 和 *y* 值表示图表上的位置，*z*
    值将由等高线级别表示。准备这样的数据最直接的方法之一是使用 `np.meshgrid` 函数，它从一维数组构建二维网格：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now let’s look at this with a standard line-only contour plot (see [Figure 28-1](#fig_0404-density-and-contour-plots_files_in_output_9_0)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个标准的仅线条等高线图（见[图28-1](#fig_0404-density-and-contour-plots_files_in_output_9_0)）。
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 9 0](assets/output_9_0.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![output 9 0](assets/output_9_0.png)'
- en: Figure 28-1\. Visualizing three-dimensional data with contours
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图28-1\. 用等高线可视化三维数据
- en: Notice that when a single color is used, negative values are represented by
    dashed lines and positive values by solid lines. Alternatively, the lines can
    be color-coded by specifying a colormap with the `cmap` argument. Here we’ll also
    specify that we want more lines to be drawn, at 20 equally spaced intervals within
    the data range, as shown in [Figure 28-2](#fig_0404-density-and-contour-plots_files_in_output_11_0).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当使用单一颜色时，负值用虚线表示，正值用实线表示。或者可以通过指定 `cmap` 参数来使用色图对线条进行颜色编码。在这里，我们还指定希望在数据范围内绘制更多线条，即20个等间距间隔，如[图28-2](#fig_0404-density-and-contour-plots_files_in_output_11_0)所示。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![output 11 0](assets/output_11_0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![output 11 0](assets/output_11_0.png)'
- en: Figure 28-2\. Visualizing three-dimensional data with colored contours
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图28-2\. 用彩色等高线可视化三维数据
- en: 'Here we chose the `RdGy` (short for *Red–Gray*) colormap, which is a good choice
    for divergent data: (i.e., data with positive and negative variation around zero).
    Matplotlib has a wide range of colormaps available, which you can easily browse
    in IPython by doing a tab completion on the `plt.cm` module:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们选择了 `RdGy`（缩写表示*红灰*）色图，这对于显示数据的正负变化（即围绕零的正负值）是一个不错的选择。Matplotlib 提供了多种色图可供选择，你可以通过在
    IPython 中对 `plt.cm` 模块进行制表完成来轻松浏览：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our plot is looking nicer, but the spaces between the lines may be a bit distracting.
    We can change this by switching to a filled contour plot using the `plt.contourf`
    function, which uses largely the same syntax as `plt.contour`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图表看起来更漂亮了，但是线条之间的空白可能有些分散注意力。我们可以通过切换到使用 `plt.contourf` 函数创建填充等高线图来改变这一点，它与
    `plt.contour` 的语法基本相同。
- en: Additionally, we’ll add a `plt.colorbar` command, which creates an additional
    axis with labeled color information for the plot (see [Figure 28-3](#fig_0404-density-and-contour-plots_files_in_output_13_0)).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将添加一个 `plt.colorbar` 命令，它会创建一个带有标记颜色信息的额外坐标轴用于图表（参见[图28-3](#fig_0404-density-and-contour-plots_files_in_output_13_0)）。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 13 0](assets/output_13_0.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![output 13 0](assets/output_13_0.png)'
- en: Figure 28-3\. Visualizing three-dimensional data with filled contours
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-3\. 用填充等高线可视化三维数据
- en: The colorbar makes it clear that the black regions are “peaks,” while the red
    regions are “valleys.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色条清楚地表明黑色区域为“峰值”，而红色区域为“谷底”。
- en: 'One potential issue with this plot is that it is a bit splotchy: the color
    steps are discrete rather than continuous, which is not always what is desired.
    This could be remedied by setting the number of contours to a very high number,
    but this results in a rather inefficient plot: Matplotlib must render a new polygon
    for each step in the level. A better way to generate a smooth representation is
    to use the `plt.imshow` function, which offers the `interpolation` argument to
    generate a smooth two-dimensional representation of the data (see [Figure 28-4](#fig_0404-density-and-contour-plots_files_in_output_15_0)).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种绘图的一个潜在问题是有点斑驳：颜色步骤是离散的，而不是连续的，这并不总是期望的效果。可以通过将等高线的数量设置为一个非常大的数字来解决此问题，但这将导致绘图效率较低：Matplotlib
    必须为每个级别渲染一个新的多边形。生成平滑表示的更好方法是使用 `plt.imshow` 函数，它提供了 `interpolation` 参数，以生成数据的平滑二维表示（见[图
    28-4](#fig_0404-density-and-contour-plots_files_in_output_15_0)）。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![output 15 0](assets/output_15_0.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![output 15 0](assets/output_15_0.png)'
- en: Figure 28-4\. Representing three-dimensional data as an image
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-4\. 将三维数据表示为图像
- en: 'There are a few potential gotchas with `plt.imshow`, however:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `plt.imshow` 有一些潜在的小问题：
- en: It doesn’t accept an *x* and *y* grid, so you must manually specify the *extent*
    [*xmin*, *xmax*, *ymin*, *ymax*] of the image on the plot.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不接受 *x* 和 *y* 网格，因此您必须手动指定图中图像的 *extent* [*xmin*, *xmax*, *ymin*, *ymax*]。
- en: By default it follows the standard image array definition where the origin is
    in the upper left, not in the lower left as in most contour plots. This must be
    changed when showing gridded data.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，它遵循标准图像数组定义，其中原点在左上角，而不是大多数等高线图中的左下角。在显示网格化数据时必须更改此设置。
- en: It will automatically adjust the axis aspect ratio to match the input data;
    this can be changed with the `aspect` argument.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会自动调整轴的纵横比以匹配输入数据；可以使用 `aspect` 参数进行更改。
- en: Finally, it can sometimes be useful to combine contour plots and image plots.
    For example, here we’ll use a partially transparent background image (with transparency
    set via the `alpha` parameter) and overplot contours with labels on the contours
    themselves, using the `plt.clabel` function (see [Figure 28-5](#fig_0404-density-and-contour-plots_files_in_output_18_0)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有时将等高线图和图像图结合起来可能会很有用。例如，在这里我们将使用部分透明的背景图像（透明度通过 `alpha` 参数设置），并在等高线上标记标签，使用
    `plt.clabel` 函数（见[图 28-5](#fig_0404-density-and-contour-plots_files_in_output_18_0)）。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 18 0](assets/output_18_0.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![output 18 0](assets/output_18_0.png)'
- en: Figure 28-5\. Labeled contours on top of an image
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-5\. 图像上标记的等高线
- en: The combination of these three functions—`plt.contour`, `plt.contourf`, and
    `plt.imshow`—gives nearly limitless possibilities for displaying this sort of
    three-dimensional data within a two-dimensional plot. For more information on
    the options available in these functions, refer to their docstrings. If you are
    interested in three-dimensional visualizations of this type of data, see [Chapter 35](ch35.xhtml#section-0412-three-dimensional-plotting).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个函数的组合——`plt.contour`、`plt.contourf` 和 `plt.imshow`——在二维图中展示三维数据具有几乎无限的可能性。关于这些函数可用选项的更多信息，请参阅它们的文档字符串。如果您对这类数据的三维可视化感兴趣，请参阅[第
    35 章](ch35.xhtml#section-0412-three-dimensional-plotting)。
- en: Histograms, Binnings, and Density
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直方图、分箱和密度
- en: A simple histogram can be a great first step in understanding a dataset. Earlier,
    we saw a preview of Matplotlib’s histogram function (discussed in [Chapter 9](ch09.xhtml#section-0206-boolean-arrays-and-masks)),
    which creates a basic histogram in one line, once the normal boilerplate imports
    are done (see [Figure 28-6](#fig_0405-histograms-and-binnings_files_in_output_3_0)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 简单直方图可以是理解数据集的一个很好的第一步。此前，我们看到了 Matplotlib 的直方图函数预览（见[第 9 章](ch09.xhtml#section-0206-boolean-arrays-and-masks)），它一旦完成了常规的引入工作（见[图
    28-6](#fig_0405-histograms-and-binnings_files_in_output_3_0)）就能以一行代码创建一个基本的直方图。
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![output 3 0](assets/output_3_0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![output 3 0](assets/output_3_0.png)'
- en: Figure 28-6\. A simple histogram
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-6\. 简单直方图
- en: The `hist` function has many options to tune both the calculation and the display;
    here’s an example of a more customized histogram, shown in [Figure 28-7](#fig_0405-histograms-and-binnings_files_in_output_5_0).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`hist` 函数有许多选项可以调整计算和显示；这里有一个更加定制化的直方图示例，显示在 [Figure 28-7](#fig_0405-histograms-and-binnings_files_in_output_5_0)
    中。'
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![output 5 0](assets/output_5_0.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![output 5 0](assets/output_5_0.png)'
- en: Figure 28-7\. A customized histogram
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-7\. 一个定制化的直方图
- en: The `plt.hist` docstring has more information on other available customization
    options. I find this combination of `histtype='stepfilled'` along with some transparency
    `alpha` to be helpful when comparing histograms of several distributions (see
    [Figure 28-8](#fig_0405-histograms-and-binnings_files_in_output_7_0)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.hist` 的文档字符串中包含更多有关其他可用定制选项的信息。当比较几个分布的直方图时，我发现使用`histtype=''stepfilled''`与一些透明度
    `alpha` 的组合是很有帮助的（参见 [Figure 28-8](#fig_0405-histograms-and-binnings_files_in_output_7_0)）。'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![output 7 0](assets/output_7_0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![output 7 0](assets/output_7_0.png)'
- en: Figure 28-8\. Overplotting multiple histograms^([1](ch28.xhtml#idm45858759342144))
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-8\. 叠加多个直方图^([1](ch28.xhtml#idm45858759342144))
- en: 'If you are interested in computing, but not displaying, the histogram (that
    is, counting the number of points in a given bin), you can use the `np.histogram`
    function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只对计算而不是显示直方图（即计算给定箱中点的数量）感兴趣，可以使用 `np.histogram` 函数：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Two-Dimensional Histograms and Binnings
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二维直方图和分箱
- en: 'Just as we create histograms in one dimension by dividing the number line into
    bins, we can also create histograms in two dimensions by dividing points among
    two-dimensional bins. We’ll take a brief look at several ways to do this. Let’s
    start by defining some data—an `x` and `y` array drawn from a multivariate Gaussian
    distribution:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们通过将数轴划分为箱来创建一维直方图一样，我们也可以通过将点分配到二维箱中来创建二维直方图。我们将简要地查看几种方法来做到这一点。让我们首先定义一些数据——从多元高斯分布中抽取的
    `x` 和 `y` 数组：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'plt.hist2d: Two-Dimensional Histogram'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plt.hist2d：二维直方图
- en: One straightforward way to plot a two-dimensional histogram is to use Matplotlib’s
    `plt.hist2d` function (see [Figure 28-9](#fig_0405-histograms-and-binnings_files_in_output_13_0)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制二维直方图的一个简单方法是使用 Matplotlib 的 `plt.hist2d` 函数（见 [Figure 28-9](#fig_0405-histograms-and-binnings_files_in_output_13_0)）。
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![output 13 0](assets/output_13_0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![output 13 0](assets/output_13_0.png)'
- en: Figure 28-9\. A two-dimensional histogram with plt.hist2d
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-9\. 使用 plt.hist2d 绘制的二维直方图
- en: 'Just like `plt.hist`, `plt.hist2d` has a number of extra options to fine-tune
    the plot and the binning, which are nicely outlined in the function docstring.
    Further, just as `plt.hist` has a counterpart in `np.histogram`, `plt.hist2d`
    has a counterpart in `np.histogram2d`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `plt.hist` 一样，`plt.hist2d` 也有许多额外选项可以微调绘图和分箱，这些选项在函数的文档字符串中有详细说明。此外，就像 `plt.hist`
    在 `np.histogram` 中有对应物一样，`plt.hist2d` 在 `np.histogram2d` 中也有对应物：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For the generalization of this histogram binning when there are more than two
    dimensions, see the `np.histogramdd` function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当有超过两个维度时的直方图分箱的泛化，参见 `np.histogramdd` 函数。
- en: 'plt.hexbin: Hexagonal Binnings'
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: plt.hexbin：六边形分箱
- en: The two-dimensional histogram creates a tesselation of squares across the axes.
    Another natural shape for such a tesselation is the regular hexagon. For this
    purpose, Matplotlib provides the `plt.hexbin` routine, which represents a two-dimensional
    dataset binned within a grid of hexagons (see [Figure 28-10](#fig_0405-histograms-and-binnings_files_in_output_18_0)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 二维直方图在轴上创建了一个方块的镶嵌图案。这种镶嵌的另一个自然形状是正六边形。为此，Matplotlib 提供了 `plt.hexbin` 程序，它表示在六边形网格内对二维数据集进行分箱（见
    [Figure 28-10](#fig_0405-histograms-and-binnings_files_in_output_18_0)）。
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![output 18 0](assets/output_18_0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![output 18 0](assets/output_18_0.png)'
- en: Figure 28-10\. A two-dimensional histogram with plt.hexbin
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-10\. 使用 plt.hexbin 绘制的二维直方图
- en: '`plt.hexbin` has a number of additional options, including the ability to specify
    weights for each point and to change the output in each bin to any NumPy aggregate
    (mean of weights, standard deviation of weights, etc.).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.hexbin` 还有许多额外选项，包括指定每个点的权重和更改每个箱中输出到任何 NumPy 聚合（权重的平均值、权重的标准差等）。'
- en: Kernel Density Estimation
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 核密度估计
- en: Another common method for estimating and representing densities in multiple
    dimensions is *kernel density estimation* (KDE). This will be discussed more fully
    in [Chapter 49](ch49.xhtml#section-0513-kernel-density-estimation), but for now
    I’ll simply mention that KDE can be thought of as a way to “smear out” the points
    in space and add up the result to obtain a smooth function. One extremely quick
    and simple KDE implementation exists in the `scipy.stats` package. Here is a quick
    example of using KDE (see [Figure 28-11](#fig_0405-histograms-and-binnings_files_in_output_21_0)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在多维度中估计和表示密度的另一种常见方法是 *核密度估计*（KDE）。这将在 [第49章](ch49.xhtml#section-0513-kernel-density-estimation)
    中更详细地讨论，但现在我只想简单提一下，KDE 可以被看作是一种在空间中“扩展”点并将结果加总以获得平滑函数的方法。`scipy.stats` 包中存在一种极快且简单的
    KDE 实现。这里是使用 KDE 的一个快速示例（参见 [图 28-11](#fig_0405-histograms-and-binnings_files_in_output_21_0)）。
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![output 21 0](assets/output_21_0.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![output 21 0](assets/output_21_0.png)'
- en: Figure 28-11\. A kernel density representation of a distribution
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-11\. 一个分布的核密度表示
- en: KDE has a smoothing length that effectively slides the knob between detail and
    smoothness (one example of the ubiquitous bias–variance trade-off). The literature
    on choosing an appropriate smoothing length is vast; `gaussian_kde` uses a rule
    of thumb to attempt to find a nearly optimal smoothing length for the input data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: KDE 具有一个有效的平滑长度，可以有效地在详细度和平滑度之间调节（这是普遍的偏差-方差权衡的一个例子）。选择适当的平滑长度的文献非常广泛；`gaussian_kde`
    使用一个经验法则来尝试找到输入数据的几乎最优平滑长度。
- en: Other KDE implementations are available within the SciPy ecosystem, each with
    its own strengths and weaknesses; see, for example, `sklearn.neighbors.KernelDensity`
    and `statsmodels.nonparametric.KDEMultivariate`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SciPy 生态系统中还提供了其他 KDE 实现，每种实现都有其各自的优缺点；例如，可以看到 `sklearn.neighbors.KernelDensity`
    和 `statsmodels.nonparametric.KDEMultivariate`。
- en: For visualizations based on KDE, using Matplotlib tends to be overly verbose.
    The Seaborn library, discussed in [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn),
    provides a much more compact API for creating KDE-based visualizations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 KDE 的可视化，使用 Matplotlib 往往显得冗长。Seaborn 库在 [第36章](ch36.xhtml#section-0414-visualization-with-seaborn)
    中讨论，为创建基于 KDE 的可视化提供了更紧凑的 API。
- en: ^([1](ch28.xhtml#idm45858759342144-marker)) A full-color version of this figure
    can be found on [GitHub](https://oreil.ly/PDSH_GitHub).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch28.xhtml#idm45858759342144-marker)) 这个图的全彩版可以在 [GitHub](https://oreil.ly/PDSH_GitHub)
    上找到。
