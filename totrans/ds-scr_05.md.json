["```py\nfrom typing import List\n\nVector = List[float]\n\nheight_weight_age = [70,  # inches,\n                     170, # pounds,\n                     40 ] # years\n\ngrades = [95,   # exam1\n          80,   # exam2\n          75,   # exam3\n          62 ]  # exam4\n```", "```py\ndef add(v: Vector, w: Vector) -> Vector:\n    \"\"\"Adds corresponding elements\"\"\"\n    assert len(v) == len(w), \"vectors must be the same length\"\n\n    return [v_i + w_i for v_i, w_i in zip(v, w)]\n\nassert add([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n```", "```py\ndef subtract(v: Vector, w: Vector) -> Vector:\n    \"\"\"Subtracts corresponding elements\"\"\"\n    assert len(v) == len(w), \"vectors must be the same length\"\n\n    return [v_i - w_i for v_i, w_i in zip(v, w)]\n\nassert subtract([5, 7, 9], [4, 5, 6]) == [1, 2, 3]\n```", "```py\ndef vector_sum(vectors: List[Vector]) -> Vector:\n    \"\"\"Sums all corresponding elements\"\"\"\n    # Check that vectors is not empty\n    assert vectors, \"no vectors provided!\"\n\n    # Check the vectors are all the same size\n    num_elements = len(vectors[0])\n    assert all(len(v) == num_elements for v in vectors), \"different sizes!\"\n\n    # the i-th element of the result is the sum of every vector[i]\n    return [sum(vector[i] for vector in vectors)\n            for i in range(num_elements)]\n\nassert vector_sum([[1, 2], [3, 4], [5, 6], [7, 8]]) == [16, 20]\n```", "```py\ndef scalar_multiply(c: float, v: Vector) -> Vector:\n    \"\"\"Multiplies every element by c\"\"\"\n    return [c * v_i for v_i in v]\n\nassert scalar_multiply(2, [1, 2, 3]) == [2, 4, 6]\n```", "```py\ndef vector_mean(vectors: List[Vector]) -> Vector:\n    \"\"\"Computes the element-wise average\"\"\"\n    n = len(vectors)\n    return scalar_multiply(1/n, vector_sum(vectors))\n\nassert vector_mean([[1, 2], [3, 4], [5, 6]]) == [3, 4]\n```", "```py\ndef dot(v: Vector, w: Vector) -> float:\n    \"\"\"Computes v_1 * w_1 + ... + v_n * w_n\"\"\"\n    assert len(v) == len(w), \"vectors must be same length\"\n\n    return sum(v_i * w_i for v_i, w_i in zip(v, w))\n\nassert dot([1, 2, 3], [4, 5, 6]) == 32  # 1 * 4 + 2 * 5 + 3 * 6\n```", "```py\ndef sum_of_squares(v: Vector) -> float:\n    \"\"\"Returns v_1 * v_1 + ... + v_n * v_n\"\"\"\n    return dot(v, v)\n\nassert sum_of_squares([1, 2, 3]) == 14  # 1 * 1 + 2 * 2 + 3 * 3\n```", "```py\nimport math\n\ndef magnitude(v: Vector) -> float:\n    \"\"\"Returns the magnitude (or length) of v\"\"\"\n    return math.sqrt(sum_of_squares(v))   # math.sqrt is square root function\n\nassert magnitude([3, 4]) == 5\n```", "```py\ndef squared_distance(v: Vector, w: Vector) -> float:\n    \"\"\"Computes (v_1 - w_1) ** 2 + ... + (v_n - w_n) ** 2\"\"\"\n    return sum_of_squares(subtract(v, w))\n\ndef distance(v: Vector, w: Vector) -> float:\n    \"\"\"Computes the distance between v and w\"\"\"\n    return math.sqrt(squared_distance(v, w))\n```", "```py\ndef distance(v: Vector, w: Vector) -> float:\n    return magnitude(subtract(v, w))\n```", "```py\n# Another type alias\nMatrix = List[List[float]]\n\nA = [[1, 2, 3],  # A has 2 rows and 3 columns\n     [4, 5, 6]]\n\nB = [[1, 2],     # B has 3 rows and 2 columns\n     [3, 4],\n     [5, 6]]\n```", "```py\nfrom typing import Tuple\n\ndef shape(A: Matrix) -> Tuple[int, int]:\n    \"\"\"Returns (# of rows of A, # of columns of A)\"\"\"\n    num_rows = len(A)\n    num_cols = len(A[0]) if A else 0   # number of elements in first row\n    return num_rows, num_cols\n\nassert shape([[1, 2, 3], [4, 5, 6]]) == (2, 3)  # 2 rows, 3 columns\n```", "```py\ndef get_row(A: Matrix, i: int) -> Vector:\n    \"\"\"Returns the i-th row of A (as a Vector)\"\"\"\n    return A[i]             # A[i] is already the ith row\n\ndef get_column(A: Matrix, j: int) -> Vector:\n    \"\"\"Returns the j-th column of A (as a Vector)\"\"\"\n    return [A_i[j]          # jth element of row A_i\n            for A_i in A]   # for each row A_i\n```", "```py\nfrom typing import Callable\n\ndef make_matrix(num_rows: int,\n                num_cols: int,\n                entry_fn: Callable[[int, int], float]) -> Matrix:\n    \"\"\"\n Returns a num_rows x num_cols matrix\n whose (i,j)-th entry is entry_fn(i, j)\n \"\"\"\n    return [[entry_fn(i, j)             # given i, create a list\n             for j in range(num_cols)]  #   [entry_fn(i, 0), ... ]\n            for i in range(num_rows)]   # create one list for each i\n```", "```py\ndef identity_matrix(n: int) -> Matrix:\n    \"\"\"Returns the n x n identity matrix\"\"\"\n    return make_matrix(n, n, lambda i, j: 1 if i == j else 0)\n\nassert identity_matrix(5) == [[1, 0, 0, 0, 0],\n                              [0, 1, 0, 0, 0],\n                              [0, 0, 1, 0, 0],\n                              [0, 0, 0, 1, 0],\n                              [0, 0, 0, 0, 1]]\n```", "```py\ndata = [[70, 170, 40],\n        [65, 120, 26],\n        [77, 250, 19],\n        # ....\n       ]\n```", "```py\nfriendships = [(0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 4),\n               (4, 5), (5, 6), (5, 7), (6, 8), (7, 8), (8, 9)]\n```", "```py\n#            user 0  1  2  3  4  5  6  7  8  9\n#\nfriend_matrix = [[0, 1, 1, 0, 0, 0, 0, 0, 0, 0],  # user 0\n                 [1, 0, 1, 1, 0, 0, 0, 0, 0, 0],  # user 1\n                 [1, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # user 2\n                 [0, 1, 1, 0, 1, 0, 0, 0, 0, 0],  # user 3\n                 [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],  # user 4\n                 [0, 0, 0, 0, 1, 0, 1, 1, 0, 0],  # user 5\n                 [0, 0, 0, 0, 0, 1, 0, 0, 1, 0],  # user 6\n                 [0, 0, 0, 0, 0, 1, 0, 0, 1, 0],  # user 7\n                 [0, 0, 0, 0, 0, 0, 1, 1, 0, 1],  # user 8\n                 [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]]  # user 9\n```", "```py\nassert friend_matrix[0][2] == 1, \"0 and 2 are friends\"\nassert friend_matrix[0][8] == 0, \"0 and 8 are not friends\"\n```", "```py\n# only need to look at one row\nfriends_of_five = [i\n                   for i, is_friend in enumerate(friend_matrix[5])\n                   if is_friend]\n```"]