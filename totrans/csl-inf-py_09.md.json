["```py\nimport numpy as np\nimport pandas as pd\npd.set_option('precision', 3)\n\n# Data from Edelman et al. (2017)\npath = \"https://github.com/causal-methods/Data/raw/master/\" \ndf = pd.read_csv(path + \"Airbnb.csv\")\ndf.head(5) \n```", "```py\n# Data for bar chart\ncount = pd.crosstab(df[\"graph_bins\"], df[\"guest_black\"])\n\nimport plotly.graph_objects as go\n\nnode = ['Conditional No', 'Conditional Yes', 'No',\n        'No Response', 'Yes']\nfig = go.Figure(data=[\n    go.Bar(name='Guest is white', x=node, y=count[0]),\n    go.Bar(name='Guest is African American', x=node, y=count[1]) ])\n\nfig.update_layout(barmode='group',\n  title_text = 'Host Responses by Race',\n  font=dict(size=18) )\n\nfig.show() \n```", "```py\nimport statsmodels.api as sm\n\ndf['const'] = 1 \n\n# Column 1\n#  The default missing ='drop' of statsmodels doesn't apply\n# to the cluster variable. Therefore, it is necessary to drop\n# the missing values like below to get the clustered standard \n# errors.\ndf1 = df.dropna(subset=['yes', 'guest_black', 'name_by_city'])\nreg1 = sm.OLS(df1['yes'], df1[['const', 'guest_black']])\nres1 = reg1.fit(cov_type='cluster',\n                cov_kwds={'groups': df1['name_by_city']})\n\n# Column 2\nvars2 = ['yes', 'guest_black', 'name_by_city', \n        'host_race_black', 'host_gender_M']\ndf2 = df.dropna(subset = vars2)\nreg2 = sm.OLS(df2['yes'], df2[['const', 'guest_black',\n                    'host_race_black', 'host_gender_M']])\nres2 = reg2.fit(cov_type='cluster',\n                cov_kwds={'groups': df2['name_by_city']})\n\n# Column 3\nvars3 = ['yes', 'guest_black', 'name_by_city', \n         'host_race_black', 'host_gender_M',\n         'multiple_listings', 'shared_property',\n         'ten_reviews', 'log_price']\ndf3 = df.dropna(subset = vars3)\nreg3 = sm.OLS(df3['yes'], df3[['const', 'guest_black',\n                    'host_race_black', 'host_gender_M',\n                    'multiple_listings', 'shared_property',\n                    'ten_reviews', 'log_price']])\nres3 = reg3.fit(cov_type='cluster',\n                cov_kwds={'groups': df3['name_by_city']})\n\ncolumns =[res1, res2, res3] \n```", "```py\nC:\\Anaconda\\envs\\textbook\\lib\\site-packages\\statsmodels\\tools\\_testing.py:19: FutureWarning:\n\npandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. \n```", "```py\n#  Library to print professional publication\n# tables in Latex, HTML, etc.\n!pip install stargazer \n```", "```py\nRequirement already satisfied: stargazer in c:\\anaconda\\envs\\textbook\\lib\\site-packages (0.0.5) \n```", "```py\nWARNING: Error parsing requirements for numpy: [Errno 2] No such file or directory: 'c:\\\\anaconda\\\\envs\\\\textbook\\\\lib\\\\site-packages\\\\numpy-1.19.2.dist-info\\\\METADATA' \n```", "```py\n# Settings for a nice table\nfrom stargazer.stargazer import Stargazer\nstargazer = Stargazer(columns)\nstargazer.title('The Impact of Race on Likelihood of Acceptance')\nstargazer \n```", "```py\ncontrol = ['host_race_white', 'host_race_black', 'host_gender_F', \n\t'host_gender_M', 'price', 'bedrooms', 'bathrooms', 'number_of_reviews', \n\t'multiple_listings', 'any_black', 'tract_listings', 'black_proportion']\n\ndf.describe()[control].T \n```", "```py\nresult = []\n\nfor var in control:\n    # Do the T-test and save the p-value\n    pvalue = sm.OLS(df[var], df[['const', 'guest_black']],\n               missing = 'drop').fit().pvalues[1]\n    result.append(pvalue) \n```", "```py\nttest = df.groupby('guest_black').agg([np.mean])[control].T\nttest['p-value'] = result\nttest \n```", "```py\nfemale = df['guest_gender']=='female'\ndf[female].groupby(['guest_race', 'guest_first_name'])['yes'].mean() \n```", "```py\nguest_race  guest_first_name\nblack       Lakisha             0.433\n            Latonya             0.370\n            Latoya              0.442\n            Tamika              0.482\n            Tanisha             0.413\nwhite       Allison             0.500\n            Anne                0.567\n            Kristen             0.486\n            Laurie              0.508\n            Meredith            0.498\nName: yes, dtype: float64 \n```", "```py\nmale = df['guest_gender']=='male'\ndf[male].groupby(['guest_race', 'guest_first_name'])['yes'].mean() \n```", "```py\nguest_race  guest_first_name\nblack       Darnell             0.412\n            Jamal               0.354\n            Jermaine            0.379\n            Kareem              0.436\n            Leroy               0.371\n            Rasheed             0.409\n            Tyrone              0.377\nwhite       Brad                0.419\n            Brent               0.494\n            Brett               0.466\n            Greg                0.467\n            Jay                 0.581\n            Todd                0.448\nName: yes, dtype: float64 \n```", "```py\npd.crosstab(index= [df['host_gender_F'], df['host_race']],\n            columns=[df['guest_gender'], df['guest_race']], \n            values=df['yes'], aggfunc='mean') \n```"]