["```py\n`import` `numpy` `as` `np`\n\n`urn` `=` `[``\"``b``\"``,` `\"``b``\"``,` `\"``b``\"``,` `\"``w``\"``,` `\"``w``\"``]`\n`print``(``\"``Sample 1:``\"``,` `np``.``random``.``choice``(``urn``,` `size``=``2``,` `replace``=``False``)``)`\n`print``(``\"``Sample 2:``\"``,` `np``.``random``.``choice``(``urn``,` `size``=``2``,` `replace``=``False``)``)`\n\n```", "```py\nSample 1: ['b' 'w']\nSample 2: ['w' 'b']\n\n```", "```py\n`n` `=` `10_000`\n`samples` `=` `[``np``.``random``.``choice``(``urn``,` `size``=``2``,` `replace``=``False``)` `for` `_` `in` `range``(``n``)``]`\n`is_matching` `=` `[``marble1` `==` `marble2` `for` `marble1``,` `marble2` `in` `samples``]`\n`print``(``f``\"``Proportion of samples with matching marbles:` `{``np``.``mean``(``is_matching``)``}``\"``)`\n\n```", "```py\nProportion of samples with matching marbles: 0.4032\n\n```", "```py\n`from` `itertools` `import` `combinations`\n\n`all_samples` `=` `[``\"``\"``.``join``(``sample``)` `for` `sample` `in` `combinations``(``\"``ABCDEFG``\"``,` `3``)``]`\n`print``(``all_samples``)`\n`print``(``\"``Number of Samples:``\"``,` `len``(``all_samples``)``)`\n\n```", "```py\n['ABC', 'ABD', 'ABE', 'ABF', 'ABG', 'ACD', 'ACE', 'ACF', 'ACG', 'ADE', 'ADF', 'ADG', 'AEF', 'AEG', 'AFG', 'BCD', 'BCE', 'BCF', 'BCG', 'BDE', 'BDF', 'BDG', 'BEF', 'BEG', 'BFG', 'CDE', 'CDF', 'CDG', 'CEF', 'CEG', 'CFG', 'DEF', 'DEG', 'DFG', 'EFG']\nNumber of Samples: 35\n\n```", "```py\n`from` `itertools` `import` `permutations`\n\n`print``(``[``\"``\"``.``join``(``sample``)` `for` `sample` `in` `permutations``(``\"``ABC``\"``)``]``)`\n\n```", "```py\n['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']\n\n```", "```py\n`urn` `=` `[``1``,` `1``,` `0``,` `1``,` `0``,` `1``,` `0``]`\n\n```", "```py\n`sample` `=` `np``.``random``.``choice``(``urn``,` `size``=``3``,` `replace``=``False``)`\n`print``(``f``\"``Sample:` `{``sample``}``\"``)`\n`print``(``f``\"``Prop Failures:` `{``sample``.``mean``(``)``}``\"``)`\n\n```", "```py\nSample: [1 0 0]\nProp Failures: 0.3333333333333333\n\n```", "```py\n`samples` `=` `[``np``.``random``.``choice``(``urn``,` `size``=``3``,` `replace``=``False``)` `for` `_` `in` `range``(``10_000``)``]`\n`prop_failures` `=` `[``s``.``mean``(``)` `for` `s` `in` `samples``]`\n\n```", "```py\n`unique_els``,` `counts_els` `=` `np``.``unique``(``prop_failures``,` `return_counts``=``True``)`\n`pd``.``DataFrame``(``{`\n    `\"``Proportion of failures``\"``:` `unique_els``,`\n    `\"``Fraction of samples``\"``:` `counts_els` `/` `10_000``,`\n`}``)`\n\n```", "```py\n`simulations_fast` `=` `np``.``random``.``hypergeometric``(`\n    `ngood``=``4``,` `nbad``=``3``,` `nsample``=``3``,` `size``=``10_000`\n`)`\n`print``(``simulations_fast``)`\n\n```", "```py\n[1 1 2 ... 1 2 2]\n\n```", "```py\n`unique_els``,` `counts_els` `=` `np``.``unique``(``simulations_fast``,` `return_counts``=``True``)`\n`pd``.``DataFrame``(``{`\n    `\"``Number of failures``\"``:` `unique_els``,`\n    `\"``Fraction of samples``\"``:` `counts_els` `/` `10_000``,`\n`}``)`\n\n```", "```py\n`from` `scipy``.``stats` `import` `hypergeom`\n\n`num_failures` `=` `[``0``,` `1``,` `2``,` `3``]`\n`pd``.``DataFrame``(``{`\n    `\"``Number of failures``\"``:` `num_failures``,`\n    `\"``Fraction of samples``\"``:` `hypergeom``.``pmf``(``num_failures``,` `7``,` `4``,` `3``)``,`\n`}``)`\n\n```", "```py\n`proportions` `=` `np``.``array``(``[``0.4818``,` `0.4746``,` `1` `-` `(``0.4818` `+` `0.4746``)``]``)`               \n`n` `=` `1_500` \n`N` `=` `6_165_478`\n`votes` `=` `np``.``trunc``(``N` `*` `proportions``)``.``astype``(``int``)`\n`votes`\n\n```", "```py\narray([2970527, 2926135,  268814])\n\n```", "```py\n`from` `scipy``.``stats` `import` `multivariate_hypergeom`\n\n`multivariate_hypergeom``.``rvs``(``votes``,` `n``)`\n\n```", "```py\narray([727, 703,  70])\n\n```", "```py\n`multivariate_hypergeom``.``rvs``(``votes``,` `n``)`\n\n```", "```py\narray([711, 721,  68])\n\n```", "```py\n`def` `trump_advantage``(``votes``,` `n``)``:`\n    `sample_votes` `=` `multivariate_hypergeom``.``rvs``(``votes``,` `n``)`\n    `return` `(``sample_votes``[``0``]` `-` `sample_votes``[``1``]``)` `/` `n`\n\n```", "```py\n`simulations` `=` `[``trump_advantage``(``votes``,` `n``)` `for` `_` `in` `range``(``100_000``)``]` \n\n```", "```py\n`np``.``mean``(``simulations``)`\n\n```", "```py\n0.007177066666666666\n\n```", "```py\n`np``.``mean``(``np``.``array``(``simulations``)` `>` `0``)`\n\n```", "```py\n0.60613\n\n```", "```py\n`bias` `=` `0.005`\n`proportions_bias` `=` `np``.``array``(``[``0.4818` `-` `bias``,` `0.4747` `+` `bias``,` \n                             `1` `-` `(``0.4818` `+` `0.4746``)``]``)`\n`proportions_bias`\n\n```", "```py\narray([0.48, 0.48, 0.04])\n\n```", "```py\n`votes_bias` `=` `np``.``trunc``(``N` `*` `proportions_bias``)``.``astype``(``int``)`\n`votes_bias`\n\n```", "```py\narray([2939699, 2957579,  268814])\n\n```", "```py\n`simulations_bias` `=` `[``trump_advantage``(``votes_bias``,` `n``)` `for` `_` `in` `range``(``100_000``)``]` \n\n```", "```py\n`np``.``mean``(``np``.``array``(``simulations_bias``)` `>` `0``)` \n\n```", "```py\n0.44967\n\n```", "```py\n`simulations_big` `=` `[``trump_advantage``(``votes``,` `12_000``)` `for` `_` `in` `range``(``100_000``)``]`\n`simulations_bias_big` `=` `[``trump_advantage``(``votes_bias``,` `12_000``)`\n                        `for` `_` `in` `range``(``100_000``)``]`\n\n```", "```py\n`scenario_no_bias` `=` `np``.``mean``(``np``.``array``(``simulations_big``)` `>` `0``)`\n`scenario_bias` `=` `np``.``mean``(``np``.``array``(``simulations_bias_big``)` `>` `0``)`\n`print``(``scenario_no_bias``,` `scenario_bias``)`\n\n```", "```py\n0.78968 0.36935\n\n```", "```py\n`simulations_fast` `=` `np``.``random``.``hypergeometric``(``ngood``=``468``,` `nbad``=``43270``,` \n                                            `nsample``=``21869``,` `size``=``500000``)`\n\n```", "```py\n45 rows Ã— 5 columns\n```", "```py\n`np``.``std``(``pm``[``'``diff30``'``]``)`\n\n```", "```py\n0.6870817156282193\n\n```", "```py\n`urn` `=` `pm``[``\"``diff30``\"``]`\n\n```", "```py\n`np``.``random``.``seed``(``221212``)`\n`sample_err` `=` `np``.``random``.``choice``(``urn``,` `size``=``15``,` `replace``=``True``)`\n`aq_imitate` `=` `11` `+` `sample_err`\n\n```"]