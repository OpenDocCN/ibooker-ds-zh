- en: Chapter 5\. Statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facts are stubborn, but statistics are more pliable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mark Twain
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Statistics* refers to the mathematics and techniques with which we understand
    data. It is a rich, enormous field, more suited to a shelf (or room) in a library
    than a chapter in a book, and so our discussion will necessarily not be a deep
    one. Instead, I’ll try to teach you just enough to be dangerous, and pique your
    interest just enough that you’ll go off and learn more.'
  prefs: []
  type: TYPE_NORMAL
- en: Describing a Single Set of Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through a combination of word of mouth and luck, DataSciencester has grown to
    dozens of members, and the VP of Fundraising asks you for some sort of description
    of how many friends your members have that he can include in his elevator pitches.
  prefs: []
  type: TYPE_NORMAL
- en: Using techniques from [Chapter 1](ch01.html#introduction), you are easily able
    to produce this data. But now you are faced with the problem of how to *describe*
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'One obvious description of any dataset is simply the data itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For a small enough dataset, this might even be the best description. But for
    a larger dataset, this is unwieldy and probably opaque. (Imagine staring at a
    list of 1 million numbers.) For that reason, we use statistics to distill and
    communicate relevant features of our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first approach, you put the friend counts into a histogram using `Counter`
    and `plt.bar` ([Figure 5-1](#histogram_friend_counts)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Number of friends.](assets/dsf2_0501.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-1\. A histogram of friend counts
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Unfortunately, this chart is still too difficult to slip into conversations.
    So you start generating some statistics. Probably the simplest statistic is the
    number of data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You’re probably also interested in the largest and smallest values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'which are just special cases of wanting to know the values in specific positions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: But we’re only getting started.
  prefs: []
  type: TYPE_NORMAL
- en: Central Tendencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, we’ll want some notion of where our data is centered. Most commonly
    we’ll use the *mean* (or average), which is just the sum of the data divided by
    its count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you have two data points, the mean is simply the point halfway between them.
    As you add more points, the mean shifts around, but it always depends on the value
    of every point. For example, if you have 10 data points, and you increase the
    value of any of them by 1, you increase the mean by 0.1.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also sometimes be interested in the *median*, which is the middle-most
    value (if the number of data points is odd) or the average of the two middle-most
    values (if the number of data points is even).
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we have five data points in a sorted vector `x`, the median
    is `x[5 // 2]` or `x[2]`. If we have six data points, we want the average of `x[2]`
    (the third point) and `x[3]` (the fourth point).
  prefs: []
  type: TYPE_NORMAL
- en: Notice that—unlike the mean—the median doesn’t fully depend on every value in
    your data. For example, if you make the largest point larger (or the smallest
    point smaller), the middle points remain unchanged, which means so does the median.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll write different functions for the even and odd cases and combine them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can compute the median number of friends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Clearly, the mean is simpler to compute, and it varies smoothly as our data
    changes. If we have *n* data points and one of them increases by some small amount
    *e*, then necessarily the mean will increase by *e* / *n*. (This makes the mean
    amenable to all sorts of calculus tricks.) In order to find the median, however,
    we have to sort our data. And changing one of our data points by a small amount
    *e* might increase the median by *e*, by some number less than *e*, or not at
    all (depending on the rest of the data).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: There are, in fact, nonobvious tricks to efficiently [compute medians](http://en.wikipedia.org/wiki/Quickselect)
    without sorting the data. However, they are beyond the scope of this book, so
    *we* have to sort the data.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the mean is very sensitive to outliers in our data. If our
    friendliest user had 200 friends (instead of 100), then the mean would rise to
    7.82, while the median would stay the same. If outliers are likely to be bad data
    (or otherwise unrepresentative of whatever phenomenon we’re trying to understand),
    then the mean can sometimes give us a misleading picture. For example, the story
    is often told that in the mid-1980s, the major at the University of North Carolina
    with the highest average starting salary was geography, mostly because of NBA
    star (and outlier) Michael Jordan.
  prefs: []
  type: TYPE_NORMAL
- en: 'A generalization of the median is the *quantile*, which represents the value
    under which a certain percentile of the data lies (the median represents the value
    under which 50% of the data lies):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Less commonly you might want to look at the *mode*, or most common value(s):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: But most frequently we’ll just use the mean.
  prefs: []
  type: TYPE_NORMAL
- en: Dispersion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Dispersion* refers to measures of how spread out our data is. Typically they’re
    statistics for which values near zero signify *not spread out at all* and for
    which large values (whatever that means) signify *very spread out*. For instance,
    a very simple measure is the *range*, which is just the difference between the
    largest and smallest elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The range is zero precisely when the `max` and `min` are equal, which can only
    happen if the elements of `x` are all the same, which means the data is as undispersed
    as possible. Conversely, if the range is large, then the `max` is much larger
    than the `min` and the data is more spread out.
  prefs: []
  type: TYPE_NORMAL
- en: Like the median, the range doesn’t really depend on the whole dataset. A dataset
    whose points are all either 0 or 100 has the same range as a dataset whose values
    are 0, 100, and lots of 50s. But it seems like the first dataset “should” be more
    spread out.
  prefs: []
  type: TYPE_NORMAL
- en: 'A more complex measure of dispersion is the *variance*, which is computed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This looks like it is almost the average squared deviation from the mean, except
    that we’re dividing by `n - 1` instead of `n`. In fact, when we’re dealing with
    a sample from a larger population, `x_bar` is only an *estimate* of the actual
    mean, which means that on average `(x_i - x_bar) ** 2` is an underestimate of
    `x_i`’s squared deviation from the mean, which is why we divide by `n - 1` instead
    of `n`. See [Wikipedia](https://en.wikipedia.org/wiki/Unbiased_estimation_of_standard_deviation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whatever units our data is in (e.g., “friends”), all of our measures of
    central tendency are in that same unit. The range will similarly be in that same
    unit. The variance, on the other hand, has units that are the *square* of the
    original units (e.g., “friends squared”). As it can be hard to make sense of these,
    we often look instead at the *standard deviation*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Both the range and the standard deviation have the same outlier problem that
    we saw earlier for the mean. Using the same example, if our friendliest user had
    instead 200 friends, the standard deviation would be 14.89—more than 60% higher!
  prefs: []
  type: TYPE_NORMAL
- en: 'A more robust alternative computes the difference between the 75th percentile
    value and the 25th percentile value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: which is quite plainly unaffected by a small number of outliers.
  prefs: []
  type: TYPE_NORMAL
- en: Correlation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DataSciencester’s VP of Growth has a theory that the amount of time people spend
    on the site is related to the number of friends they have on the site (she’s not
    a VP for nothing), and she’s asked you to verify this.
  prefs: []
  type: TYPE_NORMAL
- en: After digging through traffic logs, you’ve come up with a list called `daily_minutes`
    that shows how many minutes per day each user spends on DataSciencester, and you’ve
    ordered it so that its elements correspond to the elements of our previous `num_friends`
    list. We’d like to investigate the relationship between these two metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll first look at *covariance*, the paired analogue of variance. Whereas
    variance measures how a single variable deviates from its mean, covariance measures
    how two variables vary in tandem from their means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Recall that `dot` sums up the products of corresponding pairs of elements. When
    corresponding elements of `x` and `y` are either both above their means or both
    below their means, a positive number enters the sum. When one is above its mean
    and the other below, a negative number enters the sum. Accordingly, a “large”
    positive covariance means that `x` tends to be large when `y` is large and small
    when `y` is small. A “large” negative covariance means the opposite—that `x` tends
    to be small when `y` is large and vice versa. A covariance close to zero means
    that no such relationship exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonetheless, this number can be hard to interpret, for a couple of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Its units are the product of the inputs’ units (e.g., friend-minutes-per-day),
    which can be hard to make sense of. (What’s a “friend-minute-per-day”?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If each user had twice as many friends (but the same number of minutes), the
    covariance would be twice as large. But in a sense, the variables would be just
    as interrelated. Said differently, it’s hard to say what counts as a “large” covariance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this reason, it’s more common to look at the *correlation*, which divides
    out the standard deviations of both variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `correlation` is unitless and always lies between –1 (perfect anticorrelation)
    and 1 (perfect correlation). A number like 0.25 represents a relatively weak positive
    correlation.
  prefs: []
  type: TYPE_NORMAL
- en: However, one thing we neglected to do was examine our data. Check out [Figure 5-2](#correlation_outlier).
  prefs: []
  type: TYPE_NORMAL
- en: '![Correlation outlier.](assets/dsf2_0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-2\. Correlation with an outlier
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The person with 100 friends (who spends only 1 minute per day on the site) is
    a huge outlier, and correlation can be very sensitive to outliers. What happens
    if we ignore him?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Without the outlier, there is a much stronger correlation ([Figure 5-3](#correlation_no_outliers)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Correlation no outlier.](assets/dsf2_0503.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5-3\. Correlation after removing the outlier
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You investigate further and discover that the outlier was actually an internal
    *test* account that no one ever bothered to remove. So you feel justified in excluding
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Simpson’s Paradox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One not uncommon surprise when analyzing data is *Simpson’s paradox*, in which
    correlations can be misleading when *confounding* variables are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine that you can identify all of your members as either East
    Coast data scientists or West Coast data scientists. You decide to examine which
    coast’s data scientists are friendlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Coast | # of members | Avg. # of friends |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| West Coast | 101 | 8.2 |'
  prefs: []
  type: TYPE_TB
- en: '| East Coast | 103 | 6.5 |'
  prefs: []
  type: TYPE_TB
- en: 'It certainly looks like the West Coast data scientists are friendlier than
    the East Coast data scientists. Your coworkers advance all sorts of theories as
    to why this might be: maybe it’s the sun, or the coffee, or the organic produce,
    or the laid-back Pacific vibe?'
  prefs: []
  type: TYPE_NORMAL
- en: But when playing with the data, you discover something very strange. If you
    look only at people with PhDs, the East Coast data scientists have more friends
    on average. And if you look only at people without PhDs, the East Coast data scientists
    also have more friends on average!
  prefs: []
  type: TYPE_NORMAL
- en: '| Coast | Degree | # of members | Avg. # of friends |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| West Coast | PhD | 35 | 3.1 |'
  prefs: []
  type: TYPE_TB
- en: '| East Coast | PhD | 70 | 3.2 |'
  prefs: []
  type: TYPE_TB
- en: '| West Coast | No PhD | 66 | 10.9 |'
  prefs: []
  type: TYPE_TB
- en: '| East Coast | No PhD | 33 | 13.4 |'
  prefs: []
  type: TYPE_TB
- en: Once you account for the users’ degrees, the correlation goes in the opposite
    direction! Bucketing the data as East Coast/West Coast disguised the fact that
    the East Coast data scientists skew much more heavily toward PhD types.
  prefs: []
  type: TYPE_NORMAL
- en: This phenomenon crops up in the real world with some regularity. The key issue
    is that correlation is measuring the relationship between your two variables *all
    else being equal*. If your dataclasses are assigned at random, as they might be
    in a well-designed experiment, “all else being equal” might not be a terrible
    assumption. But when there is a deeper pattern to class assignments, “all else
    being equal” can be an awful assumption.
  prefs: []
  type: TYPE_NORMAL
- en: The only real way to avoid this is by *knowing your data* and by doing what
    you can to make sure you’ve checked for possible confounding factors. Obviously,
    this is not always possible. If you didn’t have data on the educational attainment
    of these 200 data scientists, you might simply conclude that there was something
    inherently more sociable about the West Coast.
  prefs: []
  type: TYPE_NORMAL
- en: Some Other Correlational Caveats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A correlation of zero indicates that there is no linear relationship between
    the two variables. However, there may be other sorts of relationships. For example,
    if:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: then `x` and `y` have zero correlation. But they certainly have a relationship—each
    element of `y` equals the absolute value of the corresponding element of `x`.
    What they don’t have is a relationship in which knowing how `x_i` compares to
    `mean(x)` gives us information about how `y_i` compares to `mean(y)`. That is
    the sort of relationship that correlation looks for.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, correlation tells you nothing about how large the relationship
    is. The variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: are perfectly correlated, but (depending on what you’re measuring) it’s quite
    possible that this relationship isn’t all that interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Correlation and Causation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have probably heard at some point that “correlation is not causation,” most
    likely from someone looking at data that posed a challenge to parts of his worldview
    that he was reluctant to question. Nonetheless, this is an important point—if
    `x` and `y` are strongly correlated, that might mean that `x` causes `y`, that
    `y` causes `x`, that each causes the other, that some third factor causes both,
    or nothing at all.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the relationship between `num_friends` and `daily_minutes`. It’s possible
    that having more friends on the site *causes* DataSciencester users to spend more
    time on the site. This might be the case if each friend posts a certain amount
    of content each day, which means that the more friends you have, the more time
    it takes to stay current with their updates.
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s also possible that the more time users spend arguing in the DataSciencester
    forums, the more they encounter and befriend like-minded people. That is, spending
    more time on the site *causes* users to have more friends.
  prefs: []
  type: TYPE_NORMAL
- en: A third possibility is that the users who are most passionate about data science
    spend more time on the site (because they find it more interesting) and more actively
    collect data science friends (because they don’t want to associate with anyone
    else).
  prefs: []
  type: TYPE_NORMAL
- en: One way to feel more confident about causality is by conducting randomized trials.
    If you can randomly split your users into two groups with similar demographics
    and give one of the groups a slightly different experience, then you can often
    feel pretty good that the different experiences are causing the different outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if you don’t mind being angrily accused of [*https://www.nytimes.com/2014/06/30/technology/facebook-tinkers-with-users-emotions-in-news-feed-experiment-stirring-outcry.html?*](https://www.nytimes.com/2014/06/30/technology/facebook-tinkers-with-users-emotions-in-news-feed-experiment-stirring-outcry.html?)*r=0[experimenting
    on your users], you could randomly choose a subset of your users and show them
    content from only a fraction of their friends. If this subset subsequently spent
    less time on the site, this would give you some confidence that having more friends
    _causes* more time to be spent on the site.
  prefs: []
  type: TYPE_NORMAL
- en: For Further Exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[SciPy](https://www.scipy.org/), [pandas](http://pandas.pydata.org), and [StatsModels](http://www.statsmodels.org/)
    all come with a wide variety of statistical functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Statistics is *important*. (Or maybe statistics *are* important?) If you want
    to be a better data scientist, it would be a good idea to read a statistics textbook.
    Many are freely available online, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Introductory Statistics*](https://open.umn.edu/opentextbooks/textbooks/introductory-statistics),
    by Douglas Shafer and Zhiyi Zhang (Saylor Foundation)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*OnlineStatBook*](http://onlinestatbook.com/), by David Lane (Rice University)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Introductory Statistics*](https://openstax.org/details/introductory-statistics),
    by OpenStax (OpenStax College)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
