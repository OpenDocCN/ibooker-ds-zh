["```py\nIn [1]: import pandas as pd\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        from scipy import stats\n        from sklearn import linear_model\n        from sklearn import model_selection\n        from sklearn import metrics\n```", "```py\nIn [2]: mpg = pd.read_csv('datasets/mpg/mpg.csv',usecols=\n           ['mpg','weight','horsepower','origin','cylinders'])\n        mpg.head()\n\nOut[2]:\n     mpg  cylinders  horsepower  weight origin\n 0  18.0          8         130    3504    USA\n 1  15.0          8         165    3693    USA\n 2  18.0          8         150    3436    USA\n 3  16.0          8         150    3433    USA\n 4  17.0          8         140    3449    USA\n```", "```py\nIn[3]: mpg.describe()\n\nOut[3]:\n              mpg   cylinders  horsepower       weight\ncount  392.000000  392.000000  392.000000   392.000000\nmean    23.445918    5.471939  104.469388  2977.584184\nstd      7.805007    1.705783   38.491160   849.402560\nmin      9.000000    3.000000   46.000000  1613.000000\n25%     17.000000    4.000000   75.000000  2225.250000\n50%     22.750000    4.000000   93.500000  2803.500000\n75%     29.000000    8.000000  126.000000  3614.750000\nmax     46.600000    8.000000  230.000000  5140.000000\n```", "```py\nIn [4]: pd.crosstab(index=mpg['origin'], columns='count')\n\nOut[4]:\ncol_0   count\norigin\nAsia       79\nEurope     68\nUSA       245\n```", "```py\nIn [5]: pd.crosstab(index=mpg['origin'], columns=mpg['cylinders'])\n\nOut[5]:\ncylinders  3   4  5   6    8\norigin\nAsia       4  69  0   6    0\nEurope     0  61  3   4    0\nUSA        0  69  0  73  103\n```", "```py\nIn[6]: mpg.groupby('origin').describe()['mpg']\n\nOut[6]:\n        count       mean       std   min    25%   50%     75%   max\norigin\nAsia     79.0  30.450633  6.090048  18.0  25.70  31.6  34.050  46.6\nEurope   68.0  27.602941  6.580182  16.2  23.75  26.0  30.125  44.3\nUSA     245.0  20.033469  6.440384   9.0  15.00  18.5  24.000  39.0\n```", "```py\nIn[7]: sns.displot(data=mpg, x='mpg')\n```", "```py\nIn[8]: sns.boxplot(x='origin', y='mpg', data=mpg, color='pink')\n```", "```py\nIn[9]: sns.displot(data=mpg, x=\"mpg\", col=\"origin\")\n```", "```py\nIn[10]: usa_cars = mpg[mpg['origin']=='USA']\n        europe_cars = mpg[mpg['origin']=='Europe']\n```", "```py\nIn[11]: stats.ttest_ind(usa_cars['mpg'], europe_cars['mpg'])\n\nOut[11]: Ttest_indResult(statistic=-8.534455914399228,\n            pvalue=6.306531719750568e-16)\n```", "```py\nIn[12]: mpg[['mpg','horsepower','weight']].corr()\n\nOut[12]:\n                 mpg  horsepower    weight\nmpg         1.000000   -0.778427 -0.832244\nhorsepower -0.778427    1.000000  0.864538\nweight     -0.832244    0.864538  1.000000\n```", "```py\nIn[13]: sns.scatterplot(x='weight', y='mpg', data=mpg)\n        plt.title('Relationship between weight and mileage')\n```", "```py\nIn[14]: sns.pairplot(mpg[['mpg','horsepower','weight']])\n```", "```py\nIn[15]: # Linear regression of weight on mpg\n        stats.linregress(x=mpg['weight'], y=mpg['mpg'])\n\nOut[15]: LinregressResult(slope=-0.007647342535779578,\n   intercept=46.21652454901758, rvalue=-0.8322442148315754,\n   pvalue=6.015296051435726e-102, stderr=0.0002579632782734318)\n```", "```py\nIn[16]: # Fit regression line to scatterplot\n        sns.regplot(x=\"weight\", y=\"mpg\", data=mpg)\n        plt.xlabel('Weight (lbs)')\n        plt.ylabel('Mileage (mpg)')\n        plt.title('Relationship between weight and mileage')\n```", "```py\nIn[17]: X_train, X_test, y_train, y_test =\n        model_selection.train_test_split(mpg[['weight']], mpg[['mpg']],\n        random_state=1234)\n```", "```py\nIn[18]:  y_train.shape\n\nOut[18]: (294, 1)\n\nIn[19]:  y_test.shape\n\nOut[19]: (98, 1)\n```", "```py\nIn[20]:  # Create linear regression object\n         regr = linear_model.LinearRegression()\n\n         # Train the model using the training sets\n         regr.fit(X_train, y_train)\n\n         # Make predictions using the testing set\n         y_pred = regr.predict(X_test)\n\n         # Print first five observations\n         y_pred[:5]\n\nOut[20]:  array([[14.86634263],\n         [23.48793632],\n         [26.2781699 ],\n         [27.69989655],\n         [29.05319785]])\n```", "```py\nIn[21]:  regr.coef_\n\nOut[21]: array([[-0.00760282]])\n```", "```py\nIn[22]:  metrics.r2_score(y_test, y_pred)\n\nOut[22]: 0.6811923996681357\n\nIn[23]:  metrics.mean_squared_error(y_test, y_pred)\n\nOut[23]: 21.63348076436662\n```"]