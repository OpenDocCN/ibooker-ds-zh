- en: Chapter 5\. The Basics of NumPy Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data manipulation in Python is nearly synonymous with NumPy array manipulation:
    even newer tools like Pandas ([Part III](part03.xhtml#section-0300-introduction-to-pandas))
    are built around the NumPy array. This chapter will present several examples of
    using NumPy array manipulation to access data and subarrays, and to split, reshape,
    and join the arrays. While the types of operations shown here may seem a bit dry
    and pedantic, they comprise the building blocks of many other examples used throughout
    the book. Get to know them well!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover a few categories of basic array manipulations here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Attributes of arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Determining the size, shape, memory consumption, and data types of arrays
  prefs: []
  type: TYPE_NORMAL
- en: '*Indexing of arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Getting and setting the values of individual array elements
  prefs: []
  type: TYPE_NORMAL
- en: '*Slicing of arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Getting and setting smaller subarrays within a larger array
  prefs: []
  type: TYPE_NORMAL
- en: '*Reshaping of arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the shape of a given array
  prefs: []
  type: TYPE_NORMAL
- en: '*Joining and splitting of arrays*'
  prefs: []
  type: TYPE_NORMAL
- en: Combining multiple arrays into one, and splitting one array into many
  prefs: []
  type: TYPE_NORMAL
- en: NumPy Array Attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First let’s discuss some useful array attributes. We’ll start by defining random
    arrays of one, two, and three dimensions. We’ll use NumPy’s random number generator,
    which we will *seed* with a set value in order to ensure that the same random
    arrays are generated each time this code is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Each array has attributes including `ndim` (the number of dimensions), `shape`
    (the size of each dimension), `size` (the total size of the array), and `dtype`
    (the type of each element):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more discussion of data types, see [Chapter 4](ch04.xhtml#section-0201-understanding-data-types).
  prefs: []
  type: TYPE_NORMAL
- en: 'Array Indexing: Accessing Single Elements'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are familiar with Python’s standard list indexing, indexing in NumPy
    will feel quite familiar. In a one-dimensional array, the *i[th]* value (counting
    from zero) can be accessed by specifying the desired index in square brackets,
    just as with Python lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To index from the end of the array, you can use negative indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In a multidimensional array, items can be accessed using a comma-separated
    `(*row*, *column*)` tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Values can also be modified using any of the preceding index notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that, unlike Python lists, NumPy arrays have a fixed type. This
    means, for example, that if you attempt to insert a floating-point value into
    an integer array, the value will be silently truncated. Don’t be caught unaware
    by this behavior!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Array Slicing: Accessing Subarrays'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as we can use square brackets to access individual array elements, we
    can also use them to access subarrays with the *slice* notation, marked by the
    colon (`:`) character. The NumPy slicing syntax follows that of the standard Python
    list; to access a slice of an array `x`, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If any of these are unspecified, they default to the values `start=0`, `stop=<size
    of dimension>`, `step=1`. Let’s look at some examples of accessing subarrays in
    one dimension and in multiple dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: One-Dimensional Subarrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some examples of accessing elements in one-dimensional subarrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A potentially confusing case is when the `step` value is negative. In this
    case, the defaults for `start` and `stop` are swapped. This becomes a convenient
    way to reverse an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Multidimensional Subarrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multidimensional slices work in the same way, with multiple slices separated
    by commas. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'One commonly needed routine is accessing single rows or columns of an array.
    This can be done by combining indexing and slicing, using an empty slice marked
    by a single colon (`:`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of row access, the empty slice can be omitted for a more compact
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Subarrays as No-Copy Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike Python list slices, NumPy array slices are returned as *views* rather
    than *copies* of the array data. Consider our two-dimensional array from before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s extract a <math alttext="2 times 2"><mrow><mn>2</mn> <mo>×</mo> <mn>2</mn></mrow></math>
    subarray from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we modify this subarray, we’ll see that the original array is changed!
    Observe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Some users may find this surprising, but it can be advantageous: for example,
    when working with large datasets, we can access and process pieces of these datasets
    without the need to copy the underlying data buffer.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Copies of Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Despite the features of array views, it’s sometimes useful to instead explicitly
    copy the data within an array or a subarray. This is easiest to do with the `copy`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now modify this subarray, the original array is not touched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Reshaping of Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another useful type of operation is reshaping of arrays, which can be done
    with the `reshape` method. For example, if you want to put the numbers 1 through
    9 in a <math alttext="3 times 3"><mrow><mn>3</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    grid, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note that for this to work, the size of the initial array must match the size
    of the reshaped array, and in most cases the `reshape` method will return a no-copy
    view of the initial array.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common reshaping operation is converting a one-dimensional array into a two-dimensional
    row or column matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'A convenient shorthand for this is to use `np.newaxis` in the slicing syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This is a pattern that we will utilize often throughout the remainder of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Array Concatenation and Splitting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the preceding routines worked on single arrays. NumPy also provides tools
    to combine multiple arrays into one, and to conversely split a single array into
    multiple arrays.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation of Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Concatenation, or joining of two arrays in NumPy, is primarily accomplished
    using the routines `np.concatenate`, `np.vstack`, and `np.hstack`. `np.concatenate`
    takes a tuple or list of arrays as its first argument, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also concatenate more than two arrays at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'And it can be used for two-dimensional arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'For working with arrays of mixed dimensions, it can be clearer to use the `np.vstack`
    (vertical stack) and `np.hstack` (horizontal stack) functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, for higher-dimensional arrays, `np.dstack` will stack arrays along
    the third axis.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting of Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The opposite of concatenation is splitting, which is implemented by the functions
    `np.split`, `np.hsplit`, and `np.vsplit`. For each of these, we can pass a list
    of indices giving the split points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that *N* split points leads to *N* + 1 subarrays. The related functions
    `np.hsplit` and `np.vsplit` are similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, for higher-dimensional arrays, `np.dsplit` will split arrays along
    the third axis.
  prefs: []
  type: TYPE_NORMAL
