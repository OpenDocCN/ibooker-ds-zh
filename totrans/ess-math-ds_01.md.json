["```py\nmy_value = 2 * (3 + 2)**2 / 5 - 4\n\nprint(my_value) # prints 6.0\n```", "```py\nmy_value = 2 * ((3 + 2)**2 / 5) - 4\n\nprint(my_value) # prints 6.0\n```", "```py\nx = int(input(\"Please input a number\\n\"))\n\nproduct = 3 * x\n\nprint(product)\n```", "```py\nbeta = 1.75\ntheta = 30.0\n```", "```py\nx1 = 3  # or x_1 = 3\nx2 = 10 # or x_2 = 10\nx3 = 44 # or x_3 = 44\n```", "```py\ndef f(x):\n    return 2 * x + 1\n\nx_values = [0, 1, 2, 3]\n\nfor x in x_values:\n    y = f(x)\n    print(y)\n```", "```py\nfrom sympy import *\n\nx = symbols('x')\nf = 2*x + 1\nplot(f)\n```", "```py\nfrom sympy import *\n\nx = symbols('x')\nf = x**2 + 1\nplot(f)\n```", "```py\nfrom sympy import *\nfrom sympy.plotting import plot3d\n\nx, y = symbols('x y')\nf = 2*x + 3*y\nplot3d(f)\n```", "```py\nsummation = sum(2*i for i in range(1,6))\nprint(summation)\n```", "```py\nx = [1, 4, 6, 2]\nn = len(x)\n\nsummation = sum(10*x[i] for i in range(0,n))\nprint(summation)\n```", "```py\nfrom math import log\n\n# 2 raised to what power gives me 8?\nx = log(8, 2)\n\nprint(x) # prints 3.0\n```", "```py\nfrom math import exp\n\np = 100\nr = .20\nt = 2.0\nn = 12\n\na = p * (1 + (r/n))**(n * t)\n\nprint(a) # prints 148.69146179463576\n```", "```py\nfrom math import exp\n\np = 100 # principal, starting amount\nr = .20 # interest rate, by year\nt = 2.0 # time, number of years\n\na = p * exp(r*t)\n\nprint(a) # prints 149.18246976412703\n```", "```py\nfrom math import log\n\n# e raised to what power gives us 10?\nx = log(10)\n\nprint(x) # prints 2.302585092994046\n```", "```py\nfrom sympy import *\n\nx = symbols('x')\nf = 1 / x\nresult = limit(f, x, oo)\n\nprint(result) # 0\n```", "```py\nfrom sympy import *\n\nn = symbols('n')\nf = (1 + (1/n))**n\nresult = limit(f, n, oo)\n\nprint(result) # E\nprint(result.evalf()) # 2.71828182845905\n```", "```py\ndef derivative_x(f, x, step_size):\n    m = (f(x + step_size) - f(x)) / ((x + step_size) - x)\n    return m\n\ndef my_function(x):\n    return x**2\n\nslope_at_2 = derivative_x(my_function, 2, .00001)\n\nprint(slope_at_2) # prints 4.000010000000827\n```", "```py\nfrom sympy import *\n\n# Declare 'x' to SymPy\nx = symbols('x')\n\n# Now just use Python syntax to declare function\nf = x**2\n\n# Calculate the derivative of the function\ndx_f = diff(f)\nprint(dx_f) # prints 2*x\n```", "```py\ndef f(x):\n    return x**2\n\ndef dx_f(x):\n    return 2*x\n\nslope_at_2 = dx_f(2.0)\n\nprint(slope_at_2) # prints 4.0\n```", "```py\n# Calculate the slope at x = 2\nprint(dx_f.subs(x,2)) # prints 4\n```", "```py\nfrom sympy import *\nfrom sympy.plotting import plot3d\n\n# Declare x and y to SymPy\nx,y = symbols('x y')\n\n# Now just use Python syntax to declare function\nf = 2*x**3 + 3*y**3\n\n# Calculate the partial derivatives for x and y\ndx_f = diff(f, x)\ndy_f = diff(f, y)\n\nprint(dx_f) # prints 6*x**2\nprint(dy_f) # prints 9*y**2\n\n# plot the function\nplot3d(f)\n```", "```py\nfrom sympy import *\n\nz = (x**2 + 1)**3 - 2\ndz_dx = diff(z, x)\nprint(dz_dx)\n\n# 6*x*(x**2 + 1)**2\n```", "```py\nfrom sympy import *\n\nx, y = symbols('x y')\n\n# derivative for first function\n# need to underscore y to prevent variable clash\n_y = x**2 + 1\ndy_dx = diff(_y)\n\n# derivative for second function\nz = y**3 - 2\ndz_dy = diff(z)\n\n# Calculate derivative with and without\n# chain rule, substitute y function\ndz_dx_chain = (dy_dx * dz_dy).subs(y, _y)\ndz_dx_no_chain = diff(z.subs(y, _y))\n\n# Prove chain rule by showing both are equal\nprint(dz_dx_chain) # 6*x*(x**2 + 1)**2\nprint(dz_dx_no_chain) # 6*x*(x**2 + 1)**2\n```", "```py\ndef approximate_integral(a, b, n, f):\n    delta_x = (b - a) / n\n    total_sum = 0\n\n    for i in range(1, n + 1):\n        midpoint = 0.5 * (2 * a + delta_x * (2 * i - 1))\n        total_sum += f(midpoint)\n\n    return total_sum * delta_x\n\ndef my_function(x):\n    return x**2 + 1\n\narea = approximate_integral(a=0, b=1, n=5, f=my_function)\n\nprint(area) # prints 1.33\n```", "```py\narea = approximate_integral(a=0, b=1, n=1000, f=my_function)\n\nprint(area) # prints 1.333333250000001\n```", "```py\narea = approximate_integral(a=0, b=1, n=1_000_000, f=my_function)\n\nprint(area) # prints 1.3333333333332733\n```", "```py\nfrom sympy import *\n\n# Declare 'x' to SymPy\nx = symbols('x')\n\n# Now just use Python syntax to declare function\nf = x**2 + 1\n\n# Calculate the integral of the function with respect to x\n# for the area between x = 0 and 1\narea = integrate(f, (x, 0, 1))\n\nprint(area) # prints 4/3\n```"]