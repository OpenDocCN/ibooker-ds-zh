["```py\n# Load data from Meyersson (2014)\nimport numpy as np\nimport pandas as pd\npath = \"https://github.com/causal-methods/Data/raw/master/\" \ndf = pd.read_stata(path + \"regdata0.dta\")\ndf.head() \n```", "```py\n# Drop missing values\ndf = df.dropna(subset=['hischshr1520f', 'i94'])\n\n# Round 2 decimals\npd.set_option('precision', 4)\n\n# Summary Statistics\ndf.loc[:, ('hischshr1520f', 'i94')].describe()[0:3] \n```", "```py\ndf.loc[:, ('hischshr1520f')].groupby(df['i94']).agg([np.size, np.mean]) \n```", "```py\nimport matplotlib.pyplot as plt\n\n# Scatter plot with vertical line\nplt.scatter(df['iwm94'], df['hischshr1520f'], alpha=0.2)\nplt.vlines(0, 0, 0.8, colors='red', linestyles='dashed')\n\n# Labels\nplt.title('Naive Comparison')\nplt.xlabel('Islamic win margin')\nplt.ylabel('Female aged 15-20 with high school')\n\n# Control vs Treatment\nplt.text(-1, 0.7, r'$\\bar{y}_{control}=16.6\\%$', fontsize=16,\n         bbox={'facecolor':'yellow', 'alpha':0.2})\nplt.text(0.2, 0.7, r'$\\bar{y}_{treatment}=14\\%$', fontsize=16,\n         bbox={'facecolor':'yellow', 'alpha':0.2})\nplt.show() \n```", "```py\n# Naive Comparison\ndf['Intercept'] = 1\nimport statsmodels.api as sm\nnaive = sm.OLS(df['hischshr1520f'], df[['Intercept', 'i94']],\n                    missing='drop').fit()\nprint(naive.summary().tables[1]) \n```", "```py\n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.1662      0.002     83.813      0.000       0.162       0.170\ni94           -0.0258      0.006     -4.505      0.000      -0.037      -0.015\n============================================================================== \n```", "```py\ndf = df.rename(columns={\"shhs\"   : \"household\",\n                        \"merkezi\": \"district\",\n                        \"merkezp\": \"province\"})\n\ncontrol = ['vshr_islam1994', 'partycount', 'lpop1994',\n           'ageshr19', 'household', 'district', 'province']\nfull = df.loc[:, control].groupby(df['i94']).agg([np.mean]).T\nfull.index = full.index.get_level_values(0)\nfull \n```", "```py\nmultiple = sm.OLS(df['hischshr1520f'],\n                      df[['Intercept', 'i94'] + control],\n                      missing='drop').fit()\nprint(multiple.summary().tables[1]) \n```", "```py\n==================================================================================\n                     coef    std err          t      P>|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept          0.2626      0.015     17.634      0.000       0.233       0.292\ni94                0.0139      0.006      2.355      0.019       0.002       0.026\nvshr_islam1994    -0.0894      0.013     -6.886      0.000      -0.115      -0.064\npartycount        -0.0038      0.001     -3.560      0.000      -0.006      -0.002\nlpop1994           0.0159      0.002      7.514      0.000       0.012       0.020\nageshr19          -0.6125      0.021    -29.675      0.000      -0.653      -0.572\nhousehold          0.0057      0.001      8.223      0.000       0.004       0.007\ndistrict           0.0605      0.004     16.140      0.000       0.053       0.068\nprovince           0.0357      0.010      3.499      0.000       0.016       0.056\n================================================================================== \n```", "```py\n# Library for Regression Discontinuity\n!pip install rdd \n```", "```py\nCollecting rdd\n  Using cached rdd-0.0.3.tar.gz (4.4 kB)\nRequirement already satisfied: pandas in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from rdd) (1.1.3)\nRequirement already satisfied: numpy in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from rdd) (1.19.2)\nRequirement already satisfied: statsmodels in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from rdd) (0.12.0)\nRequirement already satisfied: pytz>=2017.2 in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from pandas->rdd) (2020.1)\nRequirement already satisfied: python-dateutil>=2.7.3 in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from pandas->rdd) (2.8.1)\nRequirement already satisfied: patsy>=0.5 in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from statsmodels->rdd) (0.5.1)\nRequirement already satisfied: scipy>=1.1 in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from statsmodels->rdd) (1.5.3)\nRequirement already satisfied: six>=1.5 in c:\\anaconda\\envs\\textbook\\lib\\site-packages (from python-dateutil>=2.7.3->pandas->rdd) (1.15.0)\nBuilding wheels for collected packages: rdd\n  Building wheel for rdd (setup.py): started\n  Building wheel for rdd (setup.py): finished with status 'done'\n  Created wheel for rdd: filename=rdd-0.0.3-py3-none-any.whl size=4723 sha256=e114b2f6b2da5c594f5856bd364a95d11da3dc2327c28b419668f2230f7c18c1\n  Stored in directory: c:\\users\\vitor kamada\\appdata\\local\\pip\\cache\\wheels\\f0\\b8\\ed\\f7a5bcaa0a1b5d89d33d70db90992fd816ac6cff666020255d\nSuccessfully built rdd\nInstalling collected packages: rdd\nSuccessfully installed rdd-0.0.3 \n```", "```py\nfrom rdd import rdd\n\n# Aggregate the data in 29 bins\nthreshold = 0\ndata_rdd = rdd.truncated_data(df, 'iwm94', 0.99, cut=threshold)\ndata_binned = rdd.bin_data(data_rdd, 'hischshr1520f', 'iwm94', 29)\n\n# Labels\nplt.title('Comparison using aggregate data (Bins)')\nplt.xlabel('Islamic win margin')\nplt.ylabel('Female aged 15-20 with high school')\n\n# Scatterplot \nplt.scatter(data_binned['iwm94'], data_binned['hischshr1520f'],\n    s = data_binned['n_obs'], facecolors='none', edgecolors='blue')\n\n# Red Vertical Line\nplt.axvline(x=0, color='red')\n\nplt.show() \n```", "```py\n#  Optimal Bandwidth based on Imbens & Kalyanaraman (2012)\n#  This bandwidth minimizes the mean squared error.\nbandwidth_opt = rdd.optimal_bandwidth(df['hischshr1520f'],\n                              df['iwm94'], cut=threshold)\nbandwidth_opt \n```", "```py\n0.2398161605552802 \n```", "```py\n#  Aggregate the data in 10 bins using Optimal Bandwidth\ndata_rdd = rdd.truncated_data(df, 'iwm94', bandwidth_opt, cut=threshold)\ndata_binned = rdd.bin_data(data_rdd, 'hischshr1520f', 'iwm94', 10)\ndata_binned \n```", "```py\n# Scatterplot\nplt.scatter(data_binned['iwm94'], data_binned['hischshr1520f'],\n    s = data_binned['n_obs'], facecolors='none', edgecolors='blue')\n\n# Labels\nplt.title('Comparison using Optimum Bandwidth (h = 0.27)')\nplt.xlabel('Islamic win margin')\nplt.ylabel('Female aged 15-20 with high school')\n\n# Regression\nx = data_binned['iwm94']\ny = data_binned['hischshr1520f']\n\nc_slope , c_intercept = np.polyfit(x[0:5], y[0:5], 1)\nplt.plot(x[0:6], c_slope*x[0:6] + c_intercept)\n\nt_slope , t_intercept  = np.polyfit(x[5:10], y[5:10], 1)\nplt.plot(x[4:10], t_slope*x[4:10] + t_intercept)\n\n# Vertical Line\nplt.vlines(0, 0, 0.2, colors='green', alpha =0.5)\nplt.vlines(0, c_intercept, t_intercept, colors='red', linestyles='-')\n\n# Plot Black Arrow\nplt.axes().arrow(0, (t_intercept + c_intercept)/2, \n         dx = 0.15, dy =-0.06, head_width=0.02,\n         head_length=0.01, fc='k', ec='k')\n\n# RD effect\nplt.text(0.1, 0.06, r'$\\hat{\\tau}_{rd}=3.5\\%$', fontsize=16,\n         bbox={'facecolor':'yellow', 'alpha':0.2})\n\nplt.show() \n```", "```py\nC:\\Anaconda\\envs\\textbook\\lib\\site-packages\\ipykernel_launcher.py:25: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. \n```", "```py\n# RD effect given by the vertical red line\nt_intercept - c_intercept \n```", "```py\n0.03584571077550233 \n```", "```py\n# bandwidth (h) = 5%\ndf5 = df[df['iwm94'] >= -0.05]\ndf5 = df5[df5['iwm94'] <= 0.05]\n\nsample5 = df5.loc[:, control].groupby(df5['i94']).agg([np.mean]).T\n\nsample5.index = full.index.get_level_values(0)\nsample5 \n```", "```py\n#  Real RD specification\n#  Meyersson (2014) doesn't use the interaction term, because \n# the results are unstable. In general the coefficient,\n# of the interaction term is not statistically significant.\n# df['i94_iwm94'] = df['i94']*df['iwm94']\n# RD = ['Intercept', 'i94', 'iwm94', 'i94_iwm94']\n\nRD = ['Intercept', 'i94', 'iwm94']\n\n# bandwidth of 5%\ndf5 = df[df['iwm94'] >= -0.05]\ndf5 = df5[df5['iwm94'] <= 0.05]\nrd5 = sm.OLS(df5['hischshr1520f'],\n                      df5[RD + control],\n                      missing='drop').fit()\nprint(rd5.summary()) \n```", "```py\n OLS Regression Results                            \n==============================================================================\nDep. Variable:          hischshr1520f   R-squared:                       0.570\nModel:                            OLS   Adj. R-squared:                  0.554\nMethod:                 Least Squares   F-statistic:                     36.32\nDate:                Wed, 28 Oct 2020   Prob (F-statistic):           1.67e-40\nTime:                        17:41:01   Log-Likelihood:                 353.09\nNo. Observations:                 257   AIC:                            -686.2\nDf Residuals:                     247   BIC:                            -650.7\nDf Model:                           9                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P>|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept          0.3179      0.043      7.314      0.000       0.232       0.403\ni94                0.0399      0.016      2.540      0.012       0.009       0.071\niwm94             -0.4059      0.284     -1.427      0.155      -0.966       0.154\nvshr_islam1994    -0.0502      0.060     -0.842      0.401      -0.168       0.067\npartycount        -0.0003      0.003     -0.074      0.941      -0.007       0.007\nlpop1994           0.0091      0.005      1.718      0.087      -0.001       0.020\nageshr19          -0.7383      0.065    -11.416      0.000      -0.866      -0.611\nhousehold          0.0075      0.002      3.716      0.000       0.004       0.011\ndistrict           0.0642      0.010      6.164      0.000       0.044       0.085\nprovince           0.0191      0.019      1.004      0.316      -0.018       0.057\n==============================================================================\nOmnibus:                       17.670   Durbin-Watson:                   1.658\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               19.403\nSkew:                           0.615   Prob(JB):                     6.12e-05\nKurtosis:                       3.546   Cond. No.                         898.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \n```", "```py\n# bandwidth_opt is 0.2715\ndf27 = df[df['iwm94'] >= -bandwidth_opt]\ndf27 = df27[df27['iwm94'] <= bandwidth_opt]\nrd27 = sm.OLS(df27['hischshr1520f'],\n                      df27[RD + control],\n                      missing='drop').fit()\nprint(rd27.summary()) \n```", "```py\n OLS Regression Results                            \n==============================================================================\nDep. Variable:          hischshr1520f   R-squared:                       0.534\nModel:                            OLS   Adj. R-squared:                  0.530\nMethod:                 Least Squares   F-statistic:                     128.8\nDate:                Wed, 28 Oct 2020   Prob (F-statistic):          5.95e-161\nTime:                        17:41:01   Log-Likelihood:                 1349.9\nNo. Observations:                1020   AIC:                            -2680.\nDf Residuals:                    1010   BIC:                            -2630.\nDf Model:                           9                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P>|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept          0.2943      0.023     12.910      0.000       0.250       0.339\ni94                0.0214      0.008      2.775      0.006       0.006       0.036\niwm94             -0.0343      0.038     -0.899      0.369      -0.109       0.041\nvshr_islam1994    -0.0961      0.030     -3.219      0.001      -0.155      -0.038\npartycount        -0.0026      0.002     -1.543      0.123      -0.006       0.001\nlpop1994           0.0135      0.003      4.719      0.000       0.008       0.019\nageshr19          -0.6761      0.032    -20.949      0.000      -0.739      -0.613\nhousehold          0.0072      0.001      6.132      0.000       0.005       0.010\ndistrict           0.0575      0.006     10.364      0.000       0.047       0.068\nprovince           0.0390      0.010      3.788      0.000       0.019       0.059\n==============================================================================\nOmnibus:                      179.124   Durbin-Watson:                   1.610\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              373.491\nSkew:                           1.001   Prob(JB):                     7.90e-82\nKurtosis:                       5.186   Cond. No.                         270.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \n```", "```py\nimport plotly.express as px\nfig = px.histogram(df, x=\"iwm94\")\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      yref= 'paper', y0 = 0, y1 = 1,\n      xref= 'x', x0 = 0, x1 = 0)])\nfig.show() \n```", "```py\ndef corrupt(variable):\n    if variable <= 0 and variable >= -.025:\n        return 0.025\n    else:   \n        return variable\n\ndf['running'] = df[\"iwm94\"].apply(corrupt)\n\nfig = px.histogram(df, x=\"running\")\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      yref= 'paper', y0 = 0, y1 = 1,\n      xref= 'x', x0 = 0, x1 = 0)])\nfig.show() \n```", "```py\ndef category(var):\n    if var <= 0.05 and var >= -.05:\n        return \"5%\"\n    else:   \n        return \"rest\"\n\ndf['margin'] = df[\"iwm94\"].apply(category)\n\nfig = px.scatter(df, x=\"vshr_islam1994\", y=\"iwm94\", color =\"margin\",\n                 labels={\"iwm94\": \"Islamic win margin\",\n                         \"vshr_islam1994\": \"Islamic vote share\"})\nfig.update_layout(shapes=[\n    dict(\n      type= 'line',\n      yref= 'paper', y0 = 1/2, y1 = 1/2,\n      xref= 'x', x0 = 0, x1 = 1)])\nfig.show() \n```"]