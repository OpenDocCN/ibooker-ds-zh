["```py\npsql -U postgres -d postgres\n```", "```py\npostgres=#\n```", "```py\nCREATE USER haiku_lord WITH PASSWORD '<Pick a password you like>';\n```", "```py\nALTER USER haiku_lord CREATEDB;\n```", "```py\npsql -U haiku_lord -d postgres\n```", "```py\nCREATE DATABASE haikudb;\n```", "```py\n\\c haikudb;\n```", "```py\npsql -U haiku_lord -d haikudb\n```", "```py\nCREATE TABLE users (\n  username VARCHAR(100) PRIMARY KEY,\n  password_hash VARCHAR(128)\n);\n```", "```py\nusername VARCHAR(100) PRIMARY KEY,\npassword_hash VARCHAR(128)\n```", "```py\n          List of relations\n Schema | Name  | Type  |   Owner\n--------+-------+-------+------------\n public | users | table | haiku_lord\n(1 row)\n```", "```py\nCREATE TABLE haikus (\n  haiku_id SERIAL PRIMARY KEY,\n  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n  author VARCHAR(100),\n  text TEXT,\n  FOREIGN KEY (author) REFERENCES users(username)\n);\n```", "```py\nINSERT INTO users (username, password_hash) VALUES ('alice', 'Pass_word&34');\n```", "```py\nINSERT INTO haikus (author, text) VALUES\n('alice', E'Two foxes leap high\\nOne lands safely on the earth\\nWhere is the other?');\n```", "```py\nINSERT INTO haikus (author, text) VALUES\n('alice', E'Five frogs are jumping\\nFour come down as expected\\nBut one goes missing.');\n```", "```py\nSELECT * FROM users;\n```", "```py\n username | password_hash\n----------+---------------\n alice    | Pass_word&34\n(1 row)\n```", "```py\nSELECT haiku_id, created_at, author FROM haikus;\n```", "```py\n haiku_id |          created_at           | author\n----------+-------------------------------+--------\n        1 | 2024-12-10 16:12:11.71654-08  | alice\n        2 | 2024-12-10 16:12:16.364669-08 | alice\n(2 rows)\n```", "```py\nSELECT haiku_id, text FROM haikus WHERE author = 'alice' AND text LIKE '%fox%';\n```", "```py\n haiku_id |             text\n----------+-------------------------------\n        1 | Two foxes leap high          +\n          | One lands safely on the earth+\n          | Where is the other?\n(1 row)\n```", "```py\nUPDATE haikus SET text = '[By Alice] ' || text WHERE haiku_id = 1;\n```", "```py\nSELECT text FROM haikus WHERE haiku_id = 1;\n```", "```py\n              text\n--------------------------------\n [By Alice] Two foxes leap high+\n One lands safely on the earth +\n Where is the other?\n(1 row)\n```", "```py\nDELETE FROM haikus WHERE haiku_id = 2;\n```", "```py\nDROP TABLE haikus;\n```", "```py\n>>> from psycopg2.pool import ThreadedConnectionPool\n```", "```py\npostgresql://<PostgreSQL username>:<Password>@<Address of server>:<Port number>/<Database name>\n```", "```py\n>>> connection_string = 'postgresql://haiku_lord:<password>@localhost:5432/haikudb'\n```", "```py\n>>> connection_pool = ThreadedConnectionPool(1, 5, connection_string)\n```", "```py\n>>> connection = connection_pool.getconn()\n```", "```py\n>>> cursor = connection.cursor()\nLet's now write the query itself. We'll try to fetch the haiku_id and author fields for a given author:\n>>> query = 'SELECT haiku_id, author FROM haikus WHERE author = %s'\n```", "```py\n>>> params = ('alice',)\n```", "```py\n>>> cursor.execute(query, params)\n```", "```py\n>>> cursor.fetchall()\n[(2, 'alice'), (1, 'alice')]\n```", "```py\n>>> connection_pool.putconn(connection)\n```", "```py\n>>> connection_pool.closeall()\n```", "```py\nfrom psycopg2.pool import ThreadedConnectionPool\n\nMIN_CONNECTIONS = 1\nMAX_CONNECTIONS = 10\n\nclass Database:\n  def __init__(self, connection_string):\n    self.connection_pool = ThreadedConnectionPool(\n      MIN_CONNECTIONS, MAX_CONNECTIONS, connection_string\n    )\n\n  def connect(self):\n    return self.connection_pool.getconn()\n\n  def close(self, connection):\n    self.connection_pool.putconn(connection)\n\n  def close_all(self):\n    print(\"Closing all connections...\")\n    self.connection_pool.closeall()\n\n  def execute_query(self, query, params=()):\n    connection = self.connect()\n    try:\n      cursor = connection.cursor()\n      cursor.execute(query, params)\n      results = cursor.fetchall()\n      connection.commit()\n      return results\n    except Exception:\n      connection.rollback()\n      raise\n    finally:\n      self.close(connection)\n```", "```py\ndef __init__(self, connection_string):\n  self.connection_pool = ThreadedConnectionPool(\n    MIN_CONNECTIONS, MAX_CONNECTIONS, connection_string\n  )\n```", "```py\ndef execute_query(self, query, params=()):\n  connection = self.connect()\n  try:\n    cursor = connection.cursor()\n    cursor.execute(query, params)\n    results = cursor.fetchall()\n    connection.commit()\n    return results\n  except Exception:\n    connection.rollback()\n    raise\n  finally:\n    self.close(connection)\n```", "```py\n[config]\nconnection_string = \"postgresql://haiku_lord:password@localhost:5432/haikudb\"\n```", "```py\nimport streamlit as st\nfrom backend.database import Database\n\nst.title('Haiku Haven')\n\nconnection_string = st.secrets['config']['connection_string']\ndatabase = Database(connection_string)\nquery_results = database.execute_query('SELECT * FROM haikus')\nst.write(query_results)\n```", "```py\nfrom backend.database import Database\n```", "```py\nconnection_string = st.secrets['config']['connection_string']\n```", "```py\ndatabase = Database(connection_string)\n```", "```py\nquery_results = database.execute_query('SELECT * FROM haikus')\n```", "```py\nst.write(query_results)\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n  username: str\n  password_hash: str\n```", "```py\nfrom dataclasses import dataclass\nimport bcrypt\n\n@dataclass\nclass User:\n  username: str\n  password_hash: str\n\n  @staticmethod\n def hash_password(password):\n return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()\n\n  def authenticate(self, password):\n return bcrypt.checkpw(password.encode(), self.password_hash.encode())\n```", "```py\nfrom backend.user import User\n\nclass UserService:\n  def __init__(self, database):\n    self.database = database\n\n  def get_user(self, username):\n    query = \"SELECT username, password_hash FROM users WHERE username = %s\"\n    params = (username,)\n    results = self.database.execute_query(query, params)\n    return User(*results[0]) if results else None\n\n  def create_user(self, username, password):\n    existing_user = self.get_user(username)\n    if not existing_user:\n      query = '''\n        INSERT INTO users (username, password_hash)\n          VALUES (%s, %s)\n          RETURNING username, password_hash\n      '''\n      password_hash = User.hash_password(password)\n      params = (username, password_hash)\n      results = self.database.execute_query(query, params)\n      return User(*results[0]) if results else None\n    return None\n```", "```py\nreturn User(*results[0]) if results else None \n```", "```py\nINSERT INTO users (username, password_hash)\n  VALUES (%s, %s)\n  RETURNING username, password_hash\n```", "```py\nfrom backend.database import Database\nfrom backend.user_service import UserService\n\nclass Hub:\n  def __init__(self, config):\n    database = Database(config['connection_string'])\n    self.user_service = UserService(database)\n```", "```py\nimport streamlit as st\nfrom backend.hub import Hub\n\nhub = Hub(st.secrets['config'])\n\nwith st.container(border=True):\n  st.title(\"Sign up\")\n  username = st.text_input(\"Username\")\n  password = st.text_input(\"Password\", type=\"password\")\n  confirm_password = st.text_input(\"Confirm password\", type=\"password\")\n\n  if st.button(\"Create account\", type=\"primary\"):\n    if password != confirm_password:\n      st.error(\"Passwords do not match\")\n    else:\n      user = hub.user_service.create_user(username, password)\n      if user:\n        st.success(\"Account created successfully\")\n      else:\n        st.error(\"Username already exists\")\n```", "```py\nuser = hub.user_service.create_user(username, password)\n```", "```py\n username |                        password_hash\n----------+--------------------------------------------------------------\n bob      | $2b$12$hVzjZJN7QMTM94H7ZL.ZJe3PFfgyAPgDOH1F2b38IovcuvKrNAu3G\n(1 row)\n```", "```py\nimport streamlit as st\nfrom backend.hub import Hub\n\npages = {\n \"login\": st.Page(\"frontend/login.py\", title=\"Log in\",\n icon=\":material/login:\"),\n \"signup\": st.Page(\"frontend/signup.py\", title=\"Sign up\", \n icon=\":material/person_add:\"),\n}\n\nif 'hub' not in st.session_state:\n config = st.secrets['config']\n st.session_state.hub = Hub(config)\n\npage = st.navigation([pages['login'], pages['signup']])\npage.run()\n```", "```py\nst.Page(\"frontend/login.py\", title=\"Log in\", icon=\":material/login:\")\n```", "```py\npage = st.navigation([pages['login'], pages['signup']])\npage.run()\n```", "```py\nimport streamlit as st\n\nhub = st.session_state.hub\n\nwith st.container(border=True):\n  st.title(\"Sign up\")\n  username = st.text_input(\"Username\")\n  password = st.text_input(\"Password\", type=\"password\")\n  confirm_password = st.text_input(\"Confirm password\", type=\"password\")\n\n  if st.button(\"Create account\", type=\"primary\"):\n    if password != confirm_password:\n      st.error(\"Passwords do not match\")\n    else:\n      user = hub.user_service.create_user(username, password)\n      if user:\n        st.success(\"Account created successfully\")\n      else:\n        st.error(\"Username already exists\")\n```", "```py\nfrom backend.user import User\n\nclass UserService:\n  ...\n\n  def get_user(self, username):\n    ...\n\n  ...\n def get_authenticated_user(self, username, password):\n user = self.get_user(username)\n if user and user.authenticate(password):\n return user\n return None\n```", "```py\nimport streamlit as st\n\nhub = st.session_state.hub\n\nwith st.container(border=True):\n  st.title(\"Log in\")\n  username = st.text_input(\"Username\", key=\"login_username\")\n  password = st.text_input(\"Password\", type=\"password\")\n\n  if st.button(\"Log in\", type=\"primary\"):\n    user = hub.user_service.get_authenticated_user(username, password)\n    if user:\n      st.session_state.logged_in = True\n      st.session_state.user = user\n      st.success(\"Logged in successfully\")\n    else:\n      st.error(\"Invalid username or password\")\n```", "```py\nuser = hub.user_service.get_authenticated_user(username, password)\n```", "```py\nimport streamlit as st\n\npages = {\n  \"login\": st.Page(\"frontend/login.py\", title=\"Log in\",\n                   icon=\":material/login:\"),\n  \"signup\": st.Page(\"frontend/signup.py\", title=\"Sign up\",\n                    icon=\":material/person_add:\"),\n  \"home\": st.Page(\"frontend/home.py\", title=\"Home\",\n                  icon=\":material/home:\"),\n  \"logout\": st.Page(\"frontend/logout.py\", title=\"Log out\",\n                    icon=\":material/logout:\")\n}\n```", "```py\nimport streamlit as st\nfrom frontend.pages import pages\n\n...\nwith st.container(border=True):\n    ...\n    else:\n      st.error(\"Invalid username or password\")\n\nst.page_link(pages[\"signup\"], label=\"Don't have an account? Sign up!\")\n```", "```py\nimport streamlit as st\nfrom frontend.pages import pages\n\n...\nwith st.container(border=True):\n    ...\n    else:\n      st.error(\"Invalid username or password\")\n\nst.page_link(pages[\"signup\"], label=\"Don't have an account? Sign up!\")\n```", "```py\nimport streamlit as st\n\nfrom backend.hub import Hub\nfrom frontend.pages import pages\n\nif 'hub' not in st.session_state:\n  config = st.secrets['config']\n  st.session_state.hub = Hub(config)\n\nif 'logged_in' in st.session_state and st.session_state.logged_in:\npage = st.navigation([pages['home'], pages['logout']])\nelse:\n page = st.navigation([pages['login'], pages['signup']])\n\npage.run()\n```", "```py\nimport streamlit as st\n\nuser = st.session_state.user\nst.title(f\"Welcome, {user.username}!\")\n```", "```py\nuser = hub.user_service.get_authenticated_user(username, password)\n    if user:\n      st.session_state.logged_in = True\n      st.session_state.user = user\n      st.rerun()\n```", "```py\nimport streamlit as st\n\nst.session_state.user = None\nst.session_state.logged_in = False\nst.rerun()\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Haiku:\n  haiku_id: int\n  created_at: str\n  author: str\n  text: str\n```", "```py\nfrom backend.haiku import Haiku\n\nclass HaikuService:\n  def __init__(self, database):\n    self.database = database\n\n  def create_haiku(self, author, haiku_text):\n    query = '''\n      INSERT INTO haikus (author, text)\n      VALUES (%s, %s)\n      RETURNING haiku_id, created_at, author, text\n    '''\n    params = (author, haiku_text)\n    results = self.database.execute_query(query, params)\n    return Haiku(*results[0]) if results else None\n```", "```py\n...\nfrom backend.haiku_service import HaikuService\n\nclass Hub:\n  def __init__(self, config):\n    database = Database(config['connection_string'])\n    self.user_service = UserService(database)\n    self.haiku_service = HaikuService(database)\n```", "```py\nimport streamlit as st\n\n@st.dialog(\"Haiku editor\", width=\"large\")\ndef haiku_editor(hub, user):\n  haiku_text = st.text_area('Enter a haiku')\n  if st.button('Save haiku', type='primary'):\n    haiku = hub.haiku_service.create_haiku(user.username, haiku_text)\n    if haiku:\n      st.success('Haiku saved successfully!')\n    else:\n      st.error('Failed to save haiku')\n```", "```py\nhaiku_text = st.text_area('Enter a haiku')\n```", "```py\nimport streamlit as st\nfrom frontend.haiku_editor import haiku_editor\n\nhub = st.session_state.hub\nuser = st.session_state.user\nst.title(f\"Welcome, {user.username}!\")\n\nif st.button(':material/add_circle: Haiku', type='primary'):\n haiku_editor(hub, user)\n```", "```py\nfrom backend.haiku import Haiku\n\nclass HaikuService:\n  ...\n  def create_haiku(self, author, haiku_text):\n    ...\n\n  def get_haikus_by_author(self, author):\n query = 'SELECT * FROM haikus WHERE author = %s'\n params = (author,)\n results = self.database.execute_query(query, params)\n return [Haiku(*row) for row in results]\n\n def update_haiku(self, haiku_id, haiku_text):\n query = 'UPDATE haikus SET text = %s WHERE haiku_id = %s RETURNING *'\n params = (haiku_text, haiku_id)\n results = self.database.execute_query(query, params)\n return Haiku(*results[0]) if results else None\n\n def delete_haiku(self, haiku_id):\n query = 'DELETE FROM haikus WHERE haiku_id = %s RETURNING *'\n params = (haiku_id,)\n results = self.database.execute_query(query, params)\n return Haiku(*results[0]) if results else None\n```", "```py\nimport streamlit as st\n\nhub = st.session_state.hub\nuser = st.session_state.user\n\ndef get_haiku_created_display(haiku):\n  day = haiku.created_at.strftime('%Y-%m-%d')\n  time = haiku.created_at.strftime('%H:%M')\n  return f':gray[:material/calendar_month: {day}  \\n :material/schedule: {time}]'\n\ndef get_haiku_text_display(haiku):\n  display_text = haiku.text.replace('\\n', '  \\n')\n  return f':green[{display_text}]'\n\ndef edit_button(haiku):\n  if st.button(':material/edit:', key=f\"edit_{haiku.haiku_id}\"):\n    pass\n\ndef delete_button(haiku):\n  if st.button(':material/delete:', key=f\"delete_{haiku.haiku_id}\"):\n    pass\n\ndef display_haiku(haiku):\n  with st.container(border=True):\n    cols = st.columns([2, 5, 1, 1])\n    created_col, text_col, edit_col, delete_col = cols\n\n    created_col.markdown(get_haiku_created_display(haiku))\n    text_col.markdown(get_haiku_text_display(haiku))\n    with edit_col:\n      edit_button(haiku)\n    with delete_col:\n      delete_button(haiku)\n```", "```py\nf':gray[:material/calendar_month: {day}  \\n :material/schedule: {time}]'\n```", "```py\nhaiku.text.replace('\\n', '  \\n')\n```", "```py\nLOGIN = \":material/login:\"\nSIGNUP = \":material/person_add:\"\nHOME = \":material/home:\"\nLOGOUT = \":material/logout:\"\nADD = \":material/add_circle:\"\nCALENDAR = \":material/calendar_month:\"\nCLOCK = \":material/schedule:\"\nEDIT = \":material/edit:\"\nDELETE = \":material/delete:\"\n```", "```py\nimport streamlit as st\nfrom frontend.icons import CALENDAR, CLOCK, EDIT, DELETE\n\n...\ndef get_haiku_created_display(haiku):\n  ...\n  return f':gray[{CALENDAR} {day}  \\n {CLOCK} {time}]'\n\n...\ndef edit_button(haiku):\n  if st.button(f'{EDIT}', key=f\"edit_{haiku.haiku_id}\"):\n    pass\n\ndef delete_button(haiku):\n  if st.button(f'{DELETE}', key=f\"delete_{haiku.haiku_id}\"):\n    pass\n...\n```", "```py\nimport streamlit as st\nfrom frontend.haiku_editor import haiku_editor\nfrom frontend.haiku_display import display_haiku\nfrom frontend.icons import ADD\n\n...\nif st.button(f'{ADD} Haiku', type='primary'):\n  haiku_editor(hub, user)\n\nhaikus = hub.haiku_service.get_haikus_by_author(user.username)\nif len(haikus) == 0:\n st.info(\"You haven't written any haikus yet.\")\nelse:\n for haiku in haikus:\n display_haiku(haiku)\n```", "```py\nimport streamlit as st\nfrom frontend.icons import LOGIN, LOGOUT, SIGNUP, HOME\n\npages = {\n  \"login\": st.Page(\"frontend/login.py\", title=\"Log in\", icon=LOGIN),\n  \"signup\": st.Page(\"frontend/signup.py\", title=\"Sign up\", icon=SIGNUP),\n  \"home\": st.Page(\"frontend/home.py\", title=\"Home\", icon=HOME),\n  \"logout\": st.Page(\"frontend/logout.py\", title=\"Log out\", icon=LOGOUT)\n}\n```", "```py\nimport streamlit as st\n\n@st.dialog(\"Haiku editor\", width=\"large\")\ndef haiku_editor(hub, user, haiku=None):\n  default_text = haiku.text if haiku else ''\n  haiku_text = st.text_area('Enter a haiku', value=default_text)\n  if st.button('Save haiku', type='primary'):\n    if haiku:\n new_haiku = hub.haiku_service.update_haiku(haiku.haiku_id, haiku_text)\n else:\n new_haiku = hub.haiku_service.create_haiku(user.username, haiku_text)\n    if new_haiku:\n      st.success('Haiku saved successfully!')\n      st.rerun()\n    else:\n      st.error('Failed to save haiku')\n```", "```py\ndefault_text = haiku.text if haiku else ''\nhaiku_text = st.text_area('Enter a haiku', value=default_text)\n```", "```py\ndef edit_button(haiku):\n  if st.button(f'{EDIT}', key=f\"edit_{haiku.haiku_id}\"):\n    haiku_editor(app, user, haiku)\n```", "```py\ndef delete_button(haiku):\n  if st.button(f'{DELETE}', key=f\"delete_{haiku.haiku_id}\"):\n    deleted_haiku = app.haiku_service.delete_haiku(haiku.haiku_id)\n if deleted_haiku:\n st.rerun()\n else:\n st.error(\"Failed to delete haiku.\")\n```", "```py\n...\nclass Hub:\n  def __init__(self, config):\n    database = Database(config['connection_string'])\n    self.user_service = UserService(database)\n    self.haiku_service = HaikuService(database)\n```", "```py\n...\nclass Hub:\n  def __init__(self, database):\n    self.user_service = UserService(database)\n    self.haiku_service = HaikuService(database)\n```", "```py\n...\nfrom backend.database import Database\nfrom frontend.pages import pages\n\n@st.cache_resource\ndef get_database():\n connection_string = st.secrets['config']['connection_string']\n database = Database(connection_string)\n return database\n\nif 'hub' not in st.session_state:\n  st.session_state.hub = Hub(get_database())\n...\n```", "```py\ndef close_all(self):\n  print(\"Closing all connections...\")\n  self.connection_pool.closeall()\n```", "```py\nimport streamlit as st\nimport atexit\n\n...\n@st.cache_resource\ndef get_database():\n  connection_string = st.secrets['config']['connection_string']\n  database = Database(connection_string)\n  atexit.register(lambda db: db.close_all(), database)\n  return database\n...\n```", "```py\npostgresql://haikudb_owner:Dxg2HFXreSZ3@ep-flower-dust-a63e8evn.us-west-2.aws.neon.tech/haikudb?sslmode=require\n```", "```py\nstreamlit==1.40.2\npsycopg2-binary==2.9.10\nbcrypt==4.2.0\n```"]