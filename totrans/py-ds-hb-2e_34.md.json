["```py\nIn [1]: import matplotlib.pyplot as plt\n        plt.style.use('seaborn-white')\n```", "```py\nIn [2]: %matplotlib inline\n        import numpy as np\n```", "```py\nIn [3]: x = np.linspace(0, 10, 1000)\n        I = np.sin(x) * np.cos(x[:, np.newaxis])\n\n        plt.imshow(I)\n        plt.colorbar();\n```", "```py\nIn [4]: plt.imshow(I, cmap='Blues');\n```", "```py\nplt.cm.<TAB>\n```", "```py\nIn [5]: from matplotlib.colors import LinearSegmentedColormap\n\n        def grayscale_cmap(cmap):\n            \"\"\"Return a grayscale version of the given colormap\"\"\"\n            cmap = plt.cm.get_cmap(cmap)\n            colors = cmap(np.arange(cmap.N))\n\n            # Convert RGBA to perceived grayscale luminance\n            # cf. http://alienryderflex.com/hsp.xhtml\n            RGB_weight = [0.299, 0.587, 0.114]\n            luminance = np.sqrt(np.dot(colors[:, :3] ** 2, RGB_weight))\n            colors[:, :3] = luminance[:, np.newaxis]\n\n            return LinearSegmentedColormap.from_list(\n                cmap.name + \"_gray\", colors, cmap.N)\n\n        def view_colormap(cmap):\n            \"\"\"Plot a colormap with its grayscale equivalent\"\"\"\n            cmap = plt.cm.get_cmap(cmap)\n            colors = cmap(np.arange(cmap.N))\n\n            cmap = grayscale_cmap(cmap)\n            grayscale = cmap(np.arange(cmap.N))\n\n            fig, ax = plt.subplots(2, figsize=(6, 2),\n                                   subplot_kw=dict(xticks=[], yticks=[]))\n            ax[0].imshow([colors], extent=[0, 10, 0, 1])\n            ax[1].imshow([grayscale], extent=[0, 10, 0, 1])\n```", "```py\nIn [6]: view_colormap('jet')\n```", "```py\nIn [7]: view_colormap('viridis')\n```", "```py\nIn [8]: view_colormap('RdBu')\n```", "```py\nIn [9]: # make noise in 1% of the image pixels\n        speckles = (np.random.random(I.shape) < 0.01)\n        I[speckles] = np.random.normal(0, 3, np.count_nonzero(speckles))\n\n        plt.figure(figsize=(10, 3.5))\n\n        plt.subplot(1, 2, 1)\n        plt.imshow(I, cmap='RdBu')\n        plt.colorbar()\n\n        plt.subplot(1, 2, 2)\n        plt.imshow(I, cmap='RdBu')\n        plt.colorbar(extend='both')\n        plt.clim(-1, 1)\n```", "```py\nIn [10]: plt.imshow(I, cmap=plt.cm.get_cmap('Blues', 6))\n         plt.colorbar(extend='both')\n         plt.clim(-1, 1);\n```", "```py\nIn [11]: # load images of the digits 0 through 5 and visualize several of them\n         from sklearn.datasets import load_digits\n         digits = load_digits(n_class=6)\n\n         fig, ax = plt.subplots(8, 8, figsize=(6, 6))\n         for i, axi in enumerate(ax.flat):\n             axi.imshow(digits.images[i], cmap='binary')\n             axi.set(xticks=[], yticks=[])\n```", "```py\nIn [12]: # project the digits into 2 dimensions using Isomap\n         from sklearn.manifold import Isomap\n         iso = Isomap(n_components=2, n_neighbors=15)\n         projection = iso.fit_transform(digits.data)\n```", "```py\nIn [13]: # plot the results\n         plt.scatter(projection[:, 0], projection[:, 1], lw=0.1,\n                     c=digits.target, cmap=plt.cm.get_cmap('plasma', 6))\n         plt.colorbar(ticks=range(6), label='digit value')\n         plt.clim(-0.5, 5.5)\n```"]