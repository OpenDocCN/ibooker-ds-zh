["```py\n%pip install jellyfish\nimport jellyfish as jf\n```", "```py\njf.levenshtein_distance('Michael','Micheal')\n2\n```", "```py\njf.jaro_similarity('Michael','Micheal')\n0.9523809523809524\n```", "```py\njf.jaro_winkler_similarity('Michael','Micheal')\n\n0.9714285714285714\n```", "```py\njf.jaro_winkler_similarity('michael','MICHAEL')\n0\n```", "```py\njf.jaro_winkler_similarity('michael'.lower(),'MICHAEL'.lower())\n1.0\n```", "```py\njf.metaphone('michael')\nMXL\n```", "```py\nmylist = ['Michael','Micheal','Michel','Mike','Mick']\ncombs = []\n\nimport itertools\n\nfor a, b in itertools.combinations(mylist, 2):\n   combs.append([a,b,\n      jf.jaro_similarity(a,b),\n      jf.jaro_winkler_similarity(a, b),   \n      jf.levenshtein_distance(a,b),\n      jf.match_rating_comparison(a,b),\n      (jf.metaphone(a)==jf.metaphone(b))])\n\npd.DataFrame(combs, columns=['Name1','Name2','Jaro','JaroWinkler','Levenshtein',\n 'Match Rating','Metaphone'])\n```", "```py\ndf_w_un['Firstname_jaro'] = df_w_un.apply(\n    lambda x: jf.jaro_winkler_similarity(x.Firstname_w, x.Firstname_t), axis=1)\n\ndf_w_un['Lastname_jaro'] = df_w_un.apply(\n    lambda x: jf.jaro_winkler_similarity(x.Lastname_w, x.Lastname_t), axis=1)\n```", "```py\ndf_w = pd.read_csv('mps_wiki_clean.csv')\ndf_t = pd.read_csv('mps_they_clean.csv')\ncross = df_w.merge(df_t, how='cross',suffixes=('_w', '_t'))\ncross.head(n=5)\n```", "```py\ncross['Firstname_jaro'] = cross.apply(lambda x: True if \n    jf.jaro_winkler_similarity(x.Firstname_w, x.Firstname_t);0.8 \n    else False, axis=1)\n\ncross['Lastname_jaro'] = cross.apply(lambda x: True if \n    jf.jaro_winkler_similarity(x.Lastname_w, x.Lastname_t);0.8 \n    else False, axis=1)\n```", "```py\ntp = cross[(cross['Firstname_jaro'] & cross['Lastname_jaro']) & \n    (cross['Constituency_w']==cross['Constituency_t'])]\n\nlen(tp)\n634\n```", "```py\nfp = cross[(cross['Firstname_jaro'] & cross['Lastname_jaro']) & \n    (cross['Constituency_w']!=cross['Constituency_t'])]\n\nlen(fp)\n19\n```", "```py\nfntn = cross[(~cross['Firstname_jaro'] | ~cross['Lastname_jaro']) & \n    (cross['Constituency_w']==cross['Constituency_t'])]\n\nlen(fntn)\n16\n```", "```py\ndf_w['Firstname'].value_counts().mean()\n1.8950437317784257\n\ndf_w['Lastname'].value_counts().mean()\n1.1545293072824157\n```"]