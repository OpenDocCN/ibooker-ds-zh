- en: Chapter 10\. Presenting Your Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the effort we’ve put into accessing, assessing, cleaning, transforming,
    augmenting, and analyzing our data, we’ve finally reached the point where we’re
    ready to start thinking about communicating what we’ve learned to others. Whether
    it’s for a formal presentation to colleagues or a social media post for friends
    and followers, sharing the insights we’ve generated through our data wrangling
    work is an opportunity for our work to have impact beyond ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like every other part of our data wrangling process, effectively and accurately
    conveying our insights involves applying only a few hard-and-fast rules but a
    whole lot of judgment. This is certainly true of written communications, but perhaps
    even more so when it comes to the aspect of data communication that often gets
    the most attention: *visualization*.'
  prefs: []
  type: TYPE_NORMAL
- en: As we touched on in [“Visualization for Data Analysis”](ch09.html#vizforanalysis),
    creating visualizations to effectively share our data insights with others requires
    a different focus and approach than we had when building the visualizations for
    generating those insights in the first place. For example, unless you’re trying
    to reach a *pretty* specialized audience (say, through an academic publication),
    it’s deeply unlikely that a histogram will find its way into your visualization
    vocabulary when it’s time to share your findings with the world. At the same time,
    it is *extremely* likely that you will end up using some form of bar or column
    chart^([1](ch10.html#idm45143395782464)) to share your insights with a nonspecialist
    audience, since these widely used and highly legible graphic forms are relatively
    easy for most audiences to interpret accurately.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the way we choose to visually represent our data findings should
    be informed by not just the *data* we have (or used to reach our conclusions)
    but also the *audience* we are trying to reach. Many software packages (including
    some of the ones we have already used) will happily generate charts and graphs
    if you simply point them to a structured dataset and pass in a few optional parameters.
    While this will work in the bare-minimum sense of producing a visualization, the
    output will be much more like a machine translation than a poem. Yes, at a high
    level it may conform to the “rules” of the language, but the clarity of its meaning
    (to say nothing of its effectiveness or *eloquence*) is questionable. As such,
    using visualization to make our data insights truly accessible to others requires
    thinking carefully about *what* you want to convey, *which* visual form suits
    it best, and *how* you can tailor it to your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of this chapter, we’ll cover each of these tasks in turn, starting
    with some strategies designed to help you identify the key points in your data
    findings. After that, we’ll do a review of the most common (and useful!) visual
    forms for data. In each instance, we’ll cover the rules and best practices for
    using each of them, in addition to presenting some basic code for rendering them
    in Python using a combination of the *seaborn* and *matplotlib* libraries. Finally,
    we’ll take a basic visualization of real-world data and work through how to customize
    and refine its various elements in order to turn the (usually) serviceable default
    presentation into something that is both accurate *and* appealing. Along the way,
    I hope you’ll encounter at least a few new tools and approaches that will help
    you think more critically about data visualization in general—whether it’s the
    result of your own data wrangling efforts or not.
  prefs: []
  type: TYPE_NORMAL
- en: Foundations for Visual Eloquence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I’ve mentioned a few times, the process of writing good code mirrors that
    of writing well in most other circumstances. For example, in [Chapter 8](ch08.html#chapter8)
    we spent time revising and restructuring code that—while it already *worked*—evolved
    into scripts and functions that were ultimately clearer, cleaner, and more reusable.
    At a high level, this process was not dissimilar to how you might revise an essay
    or an article: once you have all your key ideas collected in one place, you can
    come back to the piece later and see how it might be reworded and reorganized
    so that the writing is more concise and the concepts flow more logically.'
  prefs: []
  type: TYPE_NORMAL
- en: Though this same write-edit-polish cycle applies to data visualizations, however,
    the unit we are working with is much less like an essay and much more like a single
    *paragraph*—because in general, a single visualization should be used to convey
    just *one single* idea. This is true whether your visualization is printed or
    digital, static or interactive, whether it is part of a longer talk or will be
    a standalone social media post. One visualization = one key idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m emphasizing this now because if you came to this chapter hoping for examples
    of how to build [Gapminder-style](https://www.google.com/publicdata/directory)
    interactives or elaborate [stream graphs](https://flowingdata.com/2008/02/25/ebb-and-flow-of-box-office-receipts-over-past-20-years),
    I want to disappoint you promptly: in this chapter, my focus will be on the most
    commonly used visualization types, such as bar, column, and line charts. The reason
    is partly because they remain the simplest and most interpretable way to represent
    data that has only one independent variable—and that’s all you should be trying
    to present most of the time, anyway. Yes, more complex visualizations *can* be
    used to plot multiple independent variables—the original Gapminder visualization
    is a rare good example of this—but without [an endearing Swedish man to guide
    viewers through them in real time](https://youtube.com/watch?v=jbkSRLYSojo), they
    are more like pretty toys than informative tools. That’s why our focus here will
    be on refining accessible visual forms into what I like to call *eloquent* graphics—visualizations
    that, like the best text, convey information clearly, simply, and accessibly.
    While making eloquent graphics doesn’t preclude visual complexity or even interactivity,
    it *does* require that every aspect of the visualization contributes to the clarity
    and meaning of the graphic.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Achieving this kind of visual eloquence means thinking about data visualization
    in three main phases:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Refining your focus
  prefs: []
  type: TYPE_NORMAL
- en: 'What *precisely* are you trying to communicate? In some ways, this parallels
    the process of choosing your original data wrangling question: no matter what
    your wrangling and analysis have revealed, you need to communicate *one* idea
    per visualization. How do you know if you’ve done this effectively? Most of the
    time, this means you will able to express it *in a single sentence*. As with your
    earlier data wrangling question, the data statement you craft will act as a kind
    of “ground truth” for making choices about your visualization. Anything that helps
    you convey your idea more clearly gets kept; *everything else* gets cut.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Finding your visual form
  prefs: []
  type: TYPE_NORMAL
- en: Is your data best displayed as a column or line chart? Is it a map? A pie chart?
    A scatter plot or bubble chart? Identifying the best visual form for your data
    will always involve some experimentation. At the same time, choosing a visual
    form to express your data statement is not solely a matter of preference, or taste;
    there are a handful of incontrovertible rules about how certain types of data
    and data relationships must be visually encoded. Yes, aesthetics *do* play a role
    in the effectiveness of a visualization—but they cannot override the need for
    accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Enhancing clarity and meaning
  prefs: []
  type: TYPE_NORMAL
- en: Even with the major visual form identified, there are a plethora of ways in
    which the details of your visualization can improve or degrade its clarity, accessibility,
    visual appeal, and eloquence. At minimum, you will need to make decisions about
    color, pattern, scales, and legends, as well as labels, titles, and annotations.
    If your data statement is especially complex, you will need to carefully layer
    on even more visual structure to capture these nuances, such as error bars or
    uncertainty ranges, or perhaps projected and/or missing data.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we’ll not only discuss each of these phases conceptually,
    but we’ll use real-world data to see how they are applied in practice using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Making Your Data Statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many years ago, I was fortunate to have *The New York Times*’ [Amanda Cox](https://en.wikipedia.org/wiki/Amanda_Cox)
    as a guest speaker in one of my data visualization courses, where she shared an
    excellent tip for assessing whether a given data statement was truly appropriate
    for visualization: “If you don’t have a verb in your headline, you have a problem.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Treated superficially, of course, this requirement is easy to meet.^([2](ch10.html#idm45143395497264))
    The spirit of her statement, however, implies something much more rigorous: that
    your graphic’s headline should clearly articulate some significant relationship
    or claim, and the supporting evidence should be visible in the graphic itself.
    Why is this so important? For one thing, putting your claims right in the headline
    will encourage readers to actually *look* at your graphic in the first place;
    naming them clearly helps ensure that viewers will—quite literally—know *where*
    to look for supporting evidence for those claims. Of course, it’s our job as information
    designers to make sure that all of our graphic’s visual cues do this too, but
    often [it’s the headline that draws people in](https://psychologicalscience.org/news/how-headlines-change-the-way-we-think.html).'
  prefs: []
  type: TYPE_NORMAL
- en: If you simply can’t manage to get an action verb in your graphic’s headline,
    it’s a clue that a visualization is probably *not* the best way to convey your
    insights. True, in the right circumstances humans [can process visualizations
    incredibly quickly](https://news.mit.edu/2014/in-the-blink-of-an-eye-0116), but
    that advantage is only realized if the visualization has something to “say.” In
    other words, while you may be able to generate a visually accurate chart titled
    “One Year of Daily Treasury Long-Term Rates,” the reality is that even the biggest
    policy wonk will wonder why they should bother looking at it. Don’t insist on
    visualization if it’s not the right tool! Remember that our goal is to convey
    our data wrangling insights as effectively as possible—not to express them visually
    at all costs. By focusing first on refining your data statement—and confirming
    it has the power you need—you will avoid spending lots of time designing and building
    a visualization that doesn’t really do what you want or what your audience needs.
    Sure, basic data visualizations can be quickly generated with a dataset and a
    solid visualization library (like *seaborn*). But making really *eloquent* visualizations
    requires careful thought as well as detailed customization of even the best library’s
    default charts. Before you commit all that time and energy, then, it’s worth making
    sure that your complex visualization wouldn’t have been better off as a single,
    highlighted statistic from your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve got a powerful data statement “headline” in place, however, it’s
    time to identify the graphic form that will help you most effectively present
    the data evidence for your claim.
  prefs: []
  type: TYPE_NORMAL
- en: 'Charts, Graphs, and Maps: Oh My!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if we limit ourselves to the more straightforward graphic forms, there
    are still enough options to make the process of finding the best one for our data
    a little bit overwhelming. Should you choose a line chart or a bar graph? If a
    bar graph is best, should it be horizontal or vertical? Are pie charts *ever*
    OK? Unfortunately, this is one situation where our Python libraries largely *cannot*
    help us, since in general they will just valiantly attempt to produce whatever
    type of chart you ask for with the data you give them. We need a better way.
  prefs: []
  type: TYPE_NORMAL
- en: This is where having a well-focused data statement comes in. Does your statement
    reference *absolute* values—like the `CurrentApprovalAmount` in our PPP loan data—or
    does it focus on the *relationship* between values, as in [“The pandemic cut annual
    FDI flows by one-third”](https://economist.com/graphic-detail/2021/06/21/the-pandemic-cut-annual-fdi-flows-by-one-third)?
    While claims about *absolute* values are often best expressed through bar charts,
    data statements about relationships can be well supported through a wider range
    of visual forms. If your data statement includes a claim about change over time,
    for example, a line graph or scatter plot is a good place to start. Meanwhile
    some visual forms, like pie charts and maps, are difficult to adapt to anything
    except data from a single point in time.
  prefs: []
  type: TYPE_NORMAL
- en: In truth, there are few hard-and-fast rules for visualizing data,^([3](ch10.html#idm45143395160848))
    but I have outlined those that exist in the sections that follow—along with some
    general tips for designing your graphics. While these guidelines will help you
    choose a form for your visualization that doesn’t work *against* your data, that’s
    only the next step. The choices that can really elevate your graphics are the
    ones that we’ll cover in [“Elements of Eloquent Visuals”](#elementsofeloquentvisuals).
    That section is where we’ll move beyond the (still quite excellent) defaults of
    *seaborn* and begin digging more into *matplotlib* in order to control things
    like the labels, colors, and annotations that can really set your visualization
    apart.
  prefs: []
  type: TYPE_NORMAL
- en: Pie Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pie charts are a surprisingly polarizing topic in visualization. Though pie
    charts are helpful for [teaching children about fractions](https://pbs.org/parents/recipes/pegs-pizza-fractions),
    there are plenty of folks who feel they have [little to no place in an effective
    visualization lexicon](https://storytellingwithdata.com/blog/2011/07/death-to-pie-charts).
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I think there are specific—if limited—situations in which a pie
    chart is the best visualization for supporting your data statement. For example,
    if you are trying to make a point about what *proportion* or *share* of your data
    has a particular value and the remaining values can be sensibly grouped into four
    or fewer categories, then a pie chart may well be what you want. This is especially
    true if the resulting chart highlights values that correspond to some [“recognizable”](https://store.moma.org/for-the-home/kitchen-dining/cookware-kitchen-tools/visual-measuring-cups/8711-802262.html)
    fraction of the whole (e.g., 1/4, 1/3, 1/2, 2/3, or 3/4), since the human eye
    is able to detect such differences in line orientation [without much effort](https://csc2.ncsu.edu/faculty/healey/PP).
  prefs: []
  type: TYPE_NORMAL
- en: For example, looking at the [results of the New York City Democratic primary
    for mayor in June 2021](https://washingtonpost.com/elections/election-results/new-york/nyc-primary),
    we can imagine writing a data statement along the lines of “Despite Wide Field,
    Top 3 Candidates Capture Nearly 3/4 of First-Choice Votes.” Because only four
    candidates received more than 10% of the first-choice votes, it is also reasonable
    to lump all the remaining candidates into a single “Other” category. In this instance,
    then, a pie chart is a perfectly reasonable way to both accurately present the
    results and support our claim—in part because it makes it easy to see how significantly
    the front-runners outpaced the other candidates.
  prefs: []
  type: TYPE_NORMAL
- en: Given the contentious nature of pie charts, it’s not totally surprising that
    there is no pie chart option provided in the generally quite versatile *seaborn*
    library. We can, however, use *matplotlib* directly to get a very serviceable
    pie chart.^([4](ch10.html#idm45143395804112)) Still, there are a few idiosyncrasies
    in the *matplotlib* pie charting function that we have to overcome. For example,
    best practice dictates that pie charts are laid out with the largest section starting
    at “12 o’clock,” with the rest added in descending size order clockwise from there.
    In *matplotlib*, however, the first section starts at “3 o’clock,” and additional
    sections are added *counter*clockwise from there. As a result, we need to specify
    `startangle=90` and reverse the largest-to-smallest order of our segments.^([5](ch10.html#idm45143395798752))
    Likewise, *matplotlib* also assigns each “slice” of the pie a different color
    hue (e.g., purple, red, green, orange, and blue) by default, in a particular range
    of colors that may be inaccessible to folks with certain kinds of colorblindness.
    Since our data statement is conceptually grouping the top three candidates, I’ve
    made all of these the same shade of green; and since *all* the candidates are
    from the same political party, I’ve kept all the slices in the green family. To
    see how this type of chart is coded (including these small customizations), take
    a look at [Example 10-1](#a_humble_pie) and the resulting visualization in [Figure 10-1](#nyc_primary_pie).
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-1\. a_humble_pie.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_presenting_your_data_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The argument that we pass to `autopct` should be a “formatted string literal,”
    also known as an [*f-string*](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals).
    This example specifies that the fraction be expressed as a *floating point* (decimal)
    number to one-point of precision. The double percent sign (`%%`) is used here
    to print a single one in the output (by escaping the reserved percent sign symbol
    with another one).
  prefs: []
  type: TYPE_NORMAL
- en: '![New York City Primary Pie Chart.](assets/ppdw_1001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-1\. New York City primary pie chart
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To recap, if you’re considering a pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Rule
  prefs: []
  type: TYPE_NORMAL
- en: Your data categories must conceptually (and literally) sum to a single “whole.”
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: The number of categories should be condensed to five or fewer.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: The proportion of data you want to highlight should be 1/4, 1/3, 1/2, 2/3, or
    3/4 of the total.
  prefs: []
  type: TYPE_NORMAL
- en: If your data doesn’t fit one or more of those requirements, however, a bar chart
    may be the next graphic form to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Bar and Column Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bar charts are often the most effective way to highlight the relationships (including
    differences) among discrete, nominal (as opposed to proportional) data values.
    Unlike pie charts, bar charts can accurately represent datasets where the values
    do not sum to a single “whole.” They can also effectively represent both positive
    and negative values (simultaneously, if needed) and can display both point-in-time
    comparisons of different categories of data and data values over time. The bars
    can also be oriented vertically (sometimes these graphics are described as *column*
    charts) or horizontally to make labels and data relationships more legible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, bar charts are *incredibly* flexible and offer many options
    for presenting the evidence for data claims effectively. There is, however, *one
    hard-and-fast rule* for working with bar charts: *data values MUST start at zero*!
    There are really no exceptions to this rule, though that [doesn’t stop some people
    from trying](https://datajournalism.com/read/longreads/the-unspoken-rules-of-visualisation).
    Why is this rule so important? Because starting bars of a chart at a number *other*
    than zero means that their visual difference in length will no longer be proportional
    to their *actual* difference in value.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine you were arguing for a raise at work, where you currently
    earn the US federal minimum wage of $7.25 per hour. You ask your boss to raise
    your hourly rate [to $9.19 per hour](https://data.bls.gov/cgi-bin/cpicalc.pl?cost1=7.25&year1=200907&year2=202107),
    to account for the effect of inflation since the minimum wage was last raised
    in 2009.
  prefs: []
  type: TYPE_NORMAL
- en: “Well,” says your boss, “let’s see what that kind of raise would look like,”
    and then shows you a chart like the one shown in [Figure 10-2](#inaccurate_comparison).
  prefs: []
  type: TYPE_NORMAL
- en: '![An Inaccurate Wage Comparison](assets/ppdw_1002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-2\. An inaccurate wage comparison
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: See the problem? By starting the bars at 5 rather than zero, the chart in [Figure 10-2](#inaccurate_comparison)
    makes it *look* like $9.19 per hour would be almost *double* your current wage.
    But of course some simple math (9.19 – 7.25 / 7.25 = ~.27) illustrates that it’s
    just over 25% more than you’re currently making. As you can see, starting bar
    charts at zero isn’t a matter of taste, aesthetics or semantics—it’s [a visual
    lie](https://flowingdata.com/2017/02/09/how-to-spot-visualization-lies).
  prefs: []
  type: TYPE_NORMAL
- en: Still, even professional graphics teams sometimes get this wrong. Take this
    example, highlighted on Kaiser Fung’s excellent blog, *Junk Charts*, titled [“Working
    Culture”](https://junkcharts.typepad.com/junk_charts/2005/11/finally_a_tange.html)
    and reproduced in [Figure 10-3](#inaccurate_retirement).
  prefs: []
  type: TYPE_NORMAL
- en: '![An Inaccurate Retirement Age Comparison](assets/ppdw_1003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-3\. An inaccurate retirement age comparison
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In [Figure 10-3](#inaccurate_retirement), a “broken” bar chart claims to display
    when men in different countries stop working, as compared to the official retirement
    age. As in [Figure 10-2](#inaccurate_comparison), failing to start the bars at
    zero grossly misrepresents their real value difference: according to the data
    labels, men in France retired roughly 10 years before men in Japan—a 15% difference
    in working years. But the actual bar for Japan is *more than twice as long* as
    the one for France. Of course, if the bars all started at zero, the difference
    in their values would not seem so dramatic.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What gives? Are the designers of this visualization really trying to trick
    us into thinking that men in Japan work twice as long as men in France? Almost
    certainly not. Graphics like the one in [Figure 10-3](#inaccurate_retirement)
    are the reason why expressing *one* idea per visualization is so important: trying
    to layer in more than that is where you’re most likely to run into trouble and
    end up with an inaccurate and misleading visualization. In [Figure 10-3](#inaccurate_retirement),
    the designers are trying to show two different measures (difference between the
    official retirement age and the age men stop working *and* what that age is) whose
    scales are incompatible. Start the bars at zero, and readers won’t be able to
    distinguish the ages where the dots are placed; change the scale so the dot placement
    is legible, and the bars become inaccurate. Either way, you’re forcing the reader
    to do a lot of work—especially since the graphic’s heading hasn’t told them what
    they should be looking for ;-)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what happens when we start with a clear, action-verb headline and
    use that to redesign this graphic: “Men in Japan work years past retirement age,
    while others stop well before.” Here, our headline/data statement is about highlighting
    the *difference* between official retirement and actual retirement. Now we can
    design a horizontal bar chart that both supports this claim *and* accurately represents
    the underlying data, as shown in [Example 10-2](#retirement_age) and the resulting
    [Figure 10-4](#retirement_gap_graphic).'
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-2\. retirement_age.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_presenting_your_data_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: By assigning our numerical values to the x-axis, and categorical values to the
    y-axis, *seaborn* will render this as a horizontal, rather than vertical, bar
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Retirement gap horizontal bar chart.](assets/ppdw_1004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-4\. Retirement gap horizontal bar chart
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Because my data statement/headline is now clearly about the *difference* in
    years between official and actual retirement age, I’ve chosen to chart this difference
    directly and also reorder the data: men in France only retire one year early,
    while men in Belgium retire about eight years early. To further highlight the
    before/after official retirement age distinction, I’ve also color-coded the bars
    according to their positive/negative value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mix of positive and negative values in this dataset—along with the longer
    country name labels—makes this graphic much more readable as a horizontal bar
    chart rather than a vertical one. If we want to test it out as a vertical chart
    for the sake of comparison, however, we need to swap which data columns we pass
    as the `x` and `y` arguments to the `barplot()` function. For example, by changing
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: While this change is easy enough to make, there can be real differences in the
    readability of a given dataset when it’s rendered vertically or horizontally.
    Specifically, vertical bars tend to be better for data with shorter labels, less
    variation, and/or few to no negative values, while horizontal bars are usually
    better for divergent data (especially if there is a high proportion of negative
    values) and/or data that has longer labels.
  prefs: []
  type: TYPE_NORMAL
- en: While the visualization shown in [Figure 10-4](#retirement_gap_graphic) is still
    quite simple, if you run the code you’ll see for yourself the difference in quality
    that, for example, taking care with your color palette brings to a visualization.
    While I have chosen a binary magenta/green color encoding here, I could also have
    specified one of `seaborn`’s [170 color palettes](https://medium.com/@morganjonesartist/color-guide-to-seaborn-palettes-da849406d44f)
    (e.g., `palette='BuGn'`), which would (mostly) align the color intensity with
    the value of each bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, when working with bar charts:'
  prefs: []
  type: TYPE_NORMAL
- en: Rule
  prefs: []
  type: TYPE_NORMAL
- en: Bars must begin at zero!
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Vertical bars are good for denser data with less variation.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal bars are better for more variation and/or longer labels.
  prefs: []
  type: TYPE_NORMAL
- en: Line Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your data statement is about *rates of change* rather than *value differences*,
    it’s time to explore line charts. Like bar charts, line charts can effectively
    display multiple categories of numerical data, but only as it *changes over time*.
    Because they don’t visually encode the absolute data values, however, line chart
    scales do *not* need to start at zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, this might seem like an invitation for manipulation—and indeed, line
    charts have been at the center of some major political controversies.^([6](ch10.html#idm45143395440176))
    For both bar charts and line charts, however, what’s actually driving the scale
    of the y-axis is the *data*: just as we cannot decide to start bar charts at a
    value other than zero, it would be absurd to scale the y-axis to many times the
    value of our largest data measure, as shown in [Figure 10-5](#bad_wage_math_flat).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Another Bad Wage Comparison Graphic](assets/ppdw_1005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-5\. Another bad wage comparison graphic
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: While technically accurate, the hyperextended y-scale in [Figure 10-5](#bad_wage_math_flat)
    has so compressed the data values that our eyes can no longer accurately or effectively
    distinguish the difference between them. For bar charts, then, the highest y-axis
    value should usually be at the next “whole” labeled increment (more about this
    in [“Selecting Scales”](#selecting_scales)). For line charts, visualization experts
    like Dona Wong recommend that the value range of the data occupy about two-thirds
    of the y-axis space.^([7](ch10.html#idm45143395430576))
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this approach highlights the influence that the *selection* of data
    points in a line chart has on the overall message. For example, consider [this
    graphic from *The Economist*](https://economist.com/graphic-detail/2021/06/21/the-pandemic-cut-annual-fdi-flows-by-one-third),
    reproduced in [Figure 10-6](#fdi_flow_original).
  prefs: []
  type: TYPE_NORMAL
- en: '![Foreign Direct Investment Flows, 2007 - 2020](assets/ppdw_1006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-6\. Foreign direct investment flows (FDI), 2007–2020
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In this case, the original headline, “The pandemic cut annual FDI flows by
    one-third,” is actually pretty effective; it’s both active and specific. But while
    the data this headline describes is *included* in the accompanying chart, it’s
    far from emphasized—the visualization includes more than a decade’s worth of data
    even though the change described took place between 2019 and 2020\. If we revise
    the graphic to focus *only* on what happened between those two years, as shown
    in [Figure 10-7](#fdi_slopegraph), we can both support the data statement more
    clearly *and* reveal an additional dimension of the data: though foreign direct
    investment dropped substantially in “developed” countries, it largely held steady
    in “developing” regions. As the article itself states, “Inflows to rich countries
    fell faster than those to developing ones—by 58% against just 8%.”'
  prefs: []
  type: TYPE_NORMAL
- en: This two-point line graph—also known as a *slope graph*—not only makes it easy
    for readers to see the evidence behind the headline claim, it also allows them
    to infer the disparate impact of the pandemic on FDI with respect to “developed”
    versus “developing” countries—thereby providing evidence for the article’s later
    claim as well. As you can see in [Example 10-3](#covid_fdi_impact), generating
    this type of basic line chart takes just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '![The pandemic cut annual FDI flows by one-third.](assets/ppdw_1007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-7\. The pandemic cut annual FDI flows by one-third
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Example 10-3\. covid_FDI_impact.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: At this point, you may be wondering, though, whether it’s somehow *wrong* to
    include only two years of data. After all, we have (at least) a decade’s worth
    on hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The real question, of course, is not whether we *have* more data but whether
    the data claim we’re making somehow misrepresents a broader trend. Looking at
    the original plot in [Figure 10-6](#fdi_flow_original), it’s clear that the FDI
    has only dropped this *quickly* twice in the past 15 years or so: from 2007 to
    2008 and again between 2016 and 2017\. Why? We don’t know for sure—neither the
    original chart nor the full article text (I checked!) make it clear. What we *do*
    know is the absolute change in value (around $500B) and the proportional change
    in value are both large enough *and* unique enough that focusing just on the one-year
    change is not misleading. If we want to reassure our readers of this, we’d be
    better off providing the additional detail in a table, where they can review the
    precise numbers in detail without being distracted from the main point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line charts are essential visual forms when the *rate of change* (captured
    in the slope of each line) is central to the data statement’s message. While this
    type of chart does not need to start at zero, it can *only* be used to represent
    data over time. To review, when working with line charts, the following apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Rule
  prefs: []
  type: TYPE_NORMAL
- en: Data points must represent values *over time*.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Data lines should occupy roughly 2/3 of the vertical chart area.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Four or fewer lines should be distinctly colored/labeled.
  prefs: []
  type: TYPE_NORMAL
- en: While it may seem counterintuitive at first, it’s actually OK to have a large
    number of lines on a line chart—as long as they are styled so that they don’t
    compete with the evidence for our data statement. As we’ll see in the next section,
    this kind of “background” data can actually be a useful way to provide additional
    context for readers, thereby supporting your headline claims even more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Scatter Charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although scatter plots are not frequently used in general data communications,
    they can be irreplaceable as a point-in-time counterpart to line charts, especially
    when you have a large number of data points that illustrate a clear trend—or deviation
    from that trend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider, for example, the graphic in [Figure 10-8](#nyt_temp_scatter), which
    reproduces one from this [*New York Times* story](https://nytimes.com/interactive/2021/06/29/upshot/portland-seattle-vancouver-weather.html),
    and illustrates how, even among thousands of temperature readings taken over the
    course of more than four decades, three consecutive days in June 2021 were well
    outside the expected range in cities from Portland, Oregon, to Vancouver, Canada.
    While the headline could certainly be punchier, the visualization itself has a
    clear message: the maximum temperatures reached in Portland, OR, on three days
    in late June were higher *than every other day* of the last 40 years.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Daily maximum temperatures in Portland, 1979-2021.](assets/ppdw_1008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-8\. Daily maximum temperatures in Portland, 1979–2021
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Most of the time, scatter plots are used to display data values captured either
    over the course of time (as in [Figure 10-8](#nyt_temp_scatter)) or across many
    individual members of some “group” (e.g., “schools,” “large cities”, “river-fed
    lakes,” or “Marvel movies”). At times, scatter plots may include calculated trend
    lines that serve as a benchmark for comparing individual data points with “expected”
    average values; at other times, the benchmark might be a value determined by professional,
    legal, or social norms.
  prefs: []
  type: TYPE_NORMAL
- en: For example, drawing inspiration from a *Pioneer Press* story about schools
    where students perform better than the typical indicators would suggest,^([8](ch10.html#idm45143395284112))
    we can use *seaborn* to plot historical data from the California school system
    to generate a scatter plot and highlight an unusual data point. The code for this
    example can be found in [Example 10-4](#schools_that_work).
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-4\. schools_that_work.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_presenting_your_data_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The `alpha` argument governs the opacity of the dots; 60% opacity (`0.6` as
    a decimal) proved the right balance here for legibility of individual as well
    as overlapping dots. The argument `linewidth=0` eliminates the outlines around
    each dot, which interferes with the heatmap effect of adjusting the opacity.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_presenting_your_data_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: To “highlight” a school, we are essentially just creating a one-dot scatter
    plot at the x and y coordinates of our selected data point.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key challenges when using scatter plots is the problem of *occlusion*,
    in which data points may end up superimposed on one another, thus obscuring the
    true density of the data. One approach to this is to add *jitter*—a small amount
    of randomness to the placement of individual dots designed to minimize this visual
    overlap. As of *seaborn* 0.11.2, however, jitter is [listed as an optional argument](https://seaborn.pydata.org/generated/seaborn.scatterplot.html)
    but is listed as “not supported.” Fortunately, we can preserve the precision of
    our data without losing its interpretability by adjusting the opacity or *alpha*
    of the data points. By making all the dots in our visualization somewhat transparent,
    overlapping data points translate to a kind of opacity-driven *heatmap* that clarifies
    trends without losing specificity, as shown in [Figure 10-9](#schools_that_work_scatter).
  prefs: []
  type: TYPE_NORMAL
- en: '![At some schools, history isn''t destiny](assets/ppdw_1009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-9\. At some schools, history isn’t destiny
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: So when do scatter plots make sense?
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Data must be high-volume enough for trends and outliers to be visible.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Relevant benchmarks, whether arising from the data or outside rules, should
    be visualized.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Most of the data should be a “background” color, with no more than a handful
    of points highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Guideline
  prefs: []
  type: TYPE_NORMAL
- en: Adjust opacity or apply jitter to minimize data occlusion.
  prefs: []
  type: TYPE_NORMAL
- en: Maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many of us, maps are one of the most familiar visualization types available;
    depending on your circumstances, you may use maps to plan your route to work or
    school, find a new shop or restaurant, or locate a new park or bike path. Maps
    are also a common visual form in mass communications, where they appear as weather
    maps, election maps, or even “locator” maps that provide a frame of reference
    for unfamiliar locations. If our data has a geographic component, then, it’s natural
    to consider mapping it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In reality, however, *unless your data is* about *geography, you really shouldn’t
    be mapping it*. Why? Because maps represent *land area*. Not prevalence, or even
    population—which is usually what our data is about. For example, let’s think back
    to our PPP loan data from [Chapter 6](ch06.html#chapter6). If you were to cluster
    the number of approved loans by state using `value_counts(''ProjectState'')`,
    you would end up with the following output (reformatted into columns to save space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Without too much effort, you can probably guess that the order in which states
    appear in this table is similar to their order in [this one](https://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population),
    which ranks the states by population. In other words, if we were to “map” the
    data about PPP loan approvals, it would basically end up being a population map.
    But let’s say we fixed this, and we normalized the number of loans by population,
    and so generated a new column called “Approved Loans Per Person” or something
    similar. Even now that we’ve converted our data from population to prevalence,
    we’ve really just given ourselves the bar chart problem in geographic form: the
    actual *visual area* occupied by a particular state is just *not* proportional
    to the data we’re displaying. No matter how we choose our color palette or data
    ranges, Delaware will occupy 1/50 the visual space of Wyoming, even though it
    has 25% more approved loans. By mapping this, we’re just guaranteeing that our
    visual representation is working against the actual data.'
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, there are a *lot* of map visualizations out there, and a fair number
    of them probably make one or both of the mistakes I’ve highlighted thus far. Mapping
    offers such a *seemingly* straightforward visual organizing principle that many
    people can’t resist it, but using it for nongeographic data is really a disservice
    to both the data and your readers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are, of course, excellent maps of genuinely geographic phenomena out
    there: these *New York Times* census maps, for example, offer a thoughtful approach
    to presenting [census data](https://nytimes.com/interactive/2015/07/08/us/census-race-map.html),
    while *ProPublicas*’s work on [Houston’s flood zones](https://projects.propublica.org/graphics/harvey-maps)
    illustrates how important geography (both natural and human-made) is during extreme
    weather events. And for a beautiful and original presentation of wind data, check
    out [this wind map on hint.fm](http://hint.fm/wind).'
  prefs: []
  type: TYPE_NORMAL
- en: Given how rarely maps will be the *right* visualization for supporting your
    data claims (as well as how complex building them can be in Python), we’re not
    going to go through a code example for mapping here. If you’re working with data
    that you feel you truly *must* map, I recommend looking at the [*geopandas* library](https://geopandas.org/index.html),
    which is designed to combine mapping-related shape information easily with *pandas*
    DataFrames to produce visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Elements of Eloquent Visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although I have been an information designer for most of my career, I do not
    consider myself a true graphic designer. I cannot make you a good logo for your
    business, any more than you—having now learned a decent amount about Python programming—can
    troubleshoot a printer problem. Fortunately, through study, lots of reading, a
    few courses, and the generosity of the many talented designers with whom I’ve
    worked, I’ve learned a fair bit about effective visual design in general, and
    information design in particular. My takeaways from a couple of decades in the
    work are outlined here.
  prefs: []
  type: TYPE_NORMAL
- en: The “Finicky” Details Really Do Make a Difference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A million years ago, when I first started working as a frontend programmer for
    a web startup, my number-one priority was to make things that *worked*—and let
    me tell you, I was *really* glad when they did. Over time, I even refined and
    refactored my code in some of the same ways we did in [Chapter 8](ch08.html#chapter8),
    and I was pretty happy with those programming artifacts. From the perspective
    of a programmer, my work was pretty clean.
  prefs: []
  type: TYPE_NORMAL
- en: But I worked on a *design* team, and the designers I worked with were always
    pushing me to tweak little details that seemed to me more on the side of “nice
    to have,” rather than essential. Did it *really* matter if the photos in a slideshow
    slowed down or rebounded just a bit as they slid into place? At the time, coding
    up effects like that meant writing and tweaking (very approximate) physics equations,
    which I did not love. Plus, all those customizations were cluttering up my code.
  prefs: []
  type: TYPE_NORMAL
- en: But one of the things I like most about programming is problem-solving, so eventually
    I hunkered down and made the changes they asked for. And once I saw it in action,
    I realized how much more polished and satisfying the end result really was. I
    began to appreciate that the *quality* of the design was in those “little” details
    and that “finicky” things—like a color change on tap or click—actually made my
    interfaces and graphics both clearer and more usable. In other words, don’t dismiss
    the design “details”—they’re not just about making things “look pretty.” *Design
    is how it works.*
  prefs: []
  type: TYPE_NORMAL
- en: Trust Your Eyes (and the Experts)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Visual elements rendered digitally are necessarily expressed in quantitative
    terms: the mathematical origins of [hexadecimal color codes](https://computerhope.com/htmcolor.htm)
    and x/y coordinate positioning might make it seem like finding the “correct” colors
    for a chart or the right positioning for an annotation label is a matter of doing
    the right math. It isn’t. Color perception, for example, is both complex and highly
    individual—we can’t really be sure that other people are seeing “the same” color
    that we are—and, of course, there are many types of color “blindness” that may
    prevent some people from perceiving the difference between certain pairs of complementary
    colors (e.g., red/green, blue/orange, yellow/purple) at all. There is no equation
    that can account for that.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, every “color” that we might work with is, in fact, characterized by
    three different properties: hue (for example red versus blue), brightness (or
    luminosity), and saturation. Colors that “go” together align or contrast across
    these features in very particular ways. When it comes to visualizations, of course,
    we need colors to do much more than just look good together; they have to *meaningfully
    encode* information. But what does it mean for a color to be “20% more blue” than
    another? Whatever it is, it’s not just a matter of flipping some numbers in your
    hexadecimal color value.^([9](ch10.html#idm45143394216688))'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we have the help of experts. For more than two decades, anyone looking
    for color advice (mostly for maps, though it is also a great place to start for
    other types of charts) has been able to turn to the work of [Cynthia Brewer](http://personal.psu.edu/cab38),
    a cartographer and professor of geography at Penn State, whose [ColorBrewer](https://colorbrewer2.org)
    tool provides excellent, free color distributions for visual design. Likewise,
    Dona Wong’s excellent book *The Wall Street Journal Guide to Information Graphics*
    (Norton) includes some of my personal favorites when it comes to color combinations
    for graphics.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you feel really strongly about choosing your own color palette, then the
    next best approach is to turn to the greatest color authority we’ve got: nature.
    Find a photograph of the natural world (photos of flowers often work particularly
    well), and use a color capture tool to select contrasting colors, if you need
    them, or several shades of a single color. Use these to update the defaults on
    almost any visualization package, and you’ll appreciate how much more appealing
    and professional-looking your graphic has become.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to things like font size and label placement, there are also no
    equations to follow—you mostly just have to *look* at your graphic and then nudge
    things around if they don’t seem quite right. For example, I clearly remember
    coding up one of my colleague’s designs at *The Wall Street Journal*, which contained
    a list of items in the layout, and naturally I had written a `for` loop to place
    them precisely. The problem was, something looked off when I ran the code and
    rendered it. Convinced that I just had estimated the spacing poorly, I asked him
    how many pixels of white space there should be between each element. “I don’t
    know,” he said, “I just looked at it.”
  prefs: []
  type: TYPE_NORMAL
- en: While I recognize that this kind of advice can be frustrating when you’re just
    starting out with visual design, I can also promise that if you give yourself
    some time to experiment, you’ll eventually learn to trust your *own* eyes. With
    that, some practice, and attention to the (well-defined) details laid out in the
    following sections, you’ll soon be producing visualizations that are both accurate
    *and* eloquent.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting Scales
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout [“Charts, Graphs, and Maps: Oh My!”](#charts_graphs_maps), we addressed
    the issue of scale with respect to the *accuracy* of our visualizations; here
    our focus is on clarity and readability. Packages like *seaborn* and *matplotlib*
    will automatically choose scales and axis limits based on your data, but these
    defaults may need tweaking for a variety of reasons. Once you’ve confirmed the
    appropriate *numerical* range for your data, you’ll want to review how your graphic
    is actually rendering and make sure that it is also following these general rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Axis limits and marked values should be whole numbers and/or multiples of 5
    or 10.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value labels should *not* be in scientific notation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Units should only appear on the last element of each axis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though not ideal, labels may need to be edited or (less preferably) angled in
    order to remain readable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to seeking expert advice on specific color selection, consider
    how many colors your data elements should have. Color can be an invaluable way
    to highlight a specific data point or distinguish between measured and projected
    values. When selecting colors for your chart or graph, remember:'
  prefs: []
  type: TYPE_NORMAL
- en: One color per data category
  prefs: []
  type: TYPE_NORMAL
- en: If you are displaying several months of data about the PPP loan program, for
    example, all of the bars should be the *same* color. Likewise, different values
    of the same variable should be shades of a single color.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid continuous color distributions
  prefs: []
  type: TYPE_NORMAL
- en: 'While adjusting the color of each visual element according to its value may
    *seem* more precise, like the visual compression of data we saw in [Figure 10-5](#bad_wage_math_flat),
    continuous color palettes (or *ramps*) generate color differences so small that
    the human eye cannot really perceive them. This is where your distribution calculations
    (you *did* do those, right?) will come in handy: create a color scale (or *ramp*)
    of up to five colors and then assign each one to a single *quintile* of your data.^([10](ch10.html#idm45143394184624))'
  prefs: []
  type: TYPE_NORMAL
- en: Use diverging color scales with care
  prefs: []
  type: TYPE_NORMAL
- en: Diverging color scales are really only suitable when there is a true “neutral”
    value that the data varies around. In some cases, this may be zero. In others,
    it may be an agreed-upon value in the field (for example, the US Federal Reserve
    views an inflation rate of [about 2%](https://federalreserve.gov/faqs/5D58E72F066A4DBDA80BBA659C55F774.htm)
    to be ideal).
  prefs: []
  type: TYPE_NORMAL
- en: Never color-code more than four distinct categories of data
  prefs: []
  type: TYPE_NORMAL
- en: But, including contextual data in a background gray is fine.
  prefs: []
  type: TYPE_NORMAL
- en: Test for color accessibility
  prefs: []
  type: TYPE_NORMAL
- en: Tools like ColorBrewer include an option to produce only colorblind-safe combinations.
    If you are using your own colors, test your selections by converting your graphic
    to grayscale. If you can still distinguish all the colors in your visualization,
    your readers should be able to also.
  prefs: []
  type: TYPE_NORMAL
- en: Above All, Annotate!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of our visualization process is to share our data insights and support
    our claims. While our action-verb headline should encapsulate the main idea of
    our graphic, it is often valuable to highlight or add context to specific data
    points within the visualization itself. This is *not* the place for asterisks
    and footnotes. Information needed to accurately or effectively understand the
    graphic needs to be part of the graphic’s main visual field. Some of the key ways
    you can make the data within your visualization easier to understand include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Label categorical differences directly
  prefs: []
  type: TYPE_NORMAL
- en: Rather than creating a separate legend, place data labels directly on the visualization.
    This saves readers from having to look back and forth between your graphic and
    a separate key to make sense of the information being presented.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight relevant data points with color
  prefs: []
  type: TYPE_NORMAL
- en: If one key data point is central to your overall claim, highlight it in a contrasting
    color.
  prefs: []
  type: TYPE_NORMAL
- en: Add contextual annotations
  prefs: []
  type: TYPE_NORMAL
- en: These small amounts of text (connected to the relevant data element using a
    thin *leader* line, if necessary) could be a label, an explanation, or important
    contextual information. Whatever it is, make sure it appears as close to the data
    as possible and always within the visual bounds of the graphic itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'From Basic to Beautiful: Customizing a Visualization with seaborn and matplotlib'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One final word about design—visual or otherwise. While I made an effort in
    [“Elements of Eloquent Visuals”](#elementsofeloquentvisuals) to break down the
    elements of effective visualization into component parts, a truly eloquent graphic
    is not a collection of swappable parts. Shifting one part of it—moving a label,
    changing a color—means that many, if not all, of its remaining elements will need
    to be adjusted to bring the whole back into balance. This is precisely why I haven’t
    provided code examples for each individual design aspect outlined previously:
    seen in isolation, it can be hard to understand why any given element is so important.
    But viewed as part of a cohesive whole, it will (hopefully) become clear how each
    contributes to the impact of the graphic.'
  prefs: []
  type: TYPE_NORMAL
- en: To actually realize these customized visuals in Python, we are still going to
    be relying on the *seaborn* and *matplotlib* libraries. But while we let *seaborn*
    do most of the heavy lifting in previous instances, in this example, it’s the
    fine-grained control offered by *matplotlib* that will really shine. Yes, we’ll
    still let *seaborn* handle the high-level tasks, like actually plotting the data
    values to scale. But *matplotlib* will give us the leverage we need to specify
    everything from label placement and orientation to units, labeling, annotation,
    and highlighting values—everything we need to truly tailor our visualization to
    our claims.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we’re going to take a break from the PPP data and instead
    work with some COVID-19 data collated by a team of researchers based on data from
    Johns Hopkins University and made available at [Our World in Data](https://ourworldindata.org/coronavirus-source-data).
    Our goal with this visualization will be to highlight the spike in confirmed COVID-19
    cases in the United States during July 2020, which at the time was attributed
    to the accelerated reopening^([11](ch10.html#idm45143394142944)) in many states
    earlier that spring^([12](ch10.html#idm45143394140400)) as well as gatherings
    over the July 4th holiday.^([13](ch10.html#idm45143394137600)) To understand the
    difference between relying on the defaults and customizing the axis ranges, labels,
    and colors, compare [Figure 10-10](#seaborn_defaults) to [Figure 10-11](#customized_visuals).
    The code to produce [Figure 10-11](#customized_visuals) is shown in [Example 10-5](#refined_covid_barchart).
  prefs: []
  type: TYPE_NORMAL
- en: Example 10-5\. refined_covid_barchart.py
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_presenting_your_data_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the orientation, color, and other attributes of the “tick labels”
    that indicate the values on each axis of the chart can be done via the *matplotlib*
    [`tick_params()` method](https://matplotlib.org/stable/api/_as_gen/matplotlib.axes.Axes.tick_params.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_presenting_your_data_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The arguments that are supplied to any custom function assigned to any `FuncFormatter`
    function will be “value” and “tick” position.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_presenting_your_data_CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: In “interactive mode,” this function will throw errors if `pos` is `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_presenting_your_data_CO4-5)'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the positioning of [text elements layered on top of the chart](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html)
    is “data coordinates,” e.g., a value of 1 will left-align the start of the text
    with the center point of the first column. The provided “y” value anchors the
    *bottom* of the text box.
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic seaborn chart.](assets/ppdw_1010.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-10\. Bar chart produced by visualization library defaults
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![Customized visualization](assets/ppdw_1011.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-11\. Customized visualization
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see from [Example 10-5](#refined_covid_barchart), the process of
    customizing our visualization in Python is somewhat involved; tailoring the look
    and feel of the default output has nearly tripled the lines of code required.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, the default output in this instance was basically illegible.
    By softening the colors, highlighting salient data points, and (perhaps most importantly)
    refining our data labels, we’ve managed to create a chart that could hold its
    own in most publication contexts. And obviously a good chunk of the code we have
    in here could be refined and repurposed to make this degree of customization a
    much less bespoke effort for future graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond the Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While I’ve aimed to cover the essentials of effective and accurate data visualization
    in this chapter, the truth is that valuable visualization ideas can come from
    anywhere—not just books or blogs that are dedicated to the topic. One of my favorite
    graphics from my time at *The Wall Street Journal* is [the unemployment visualization](https://jennifervalentinodevries.com/2009/09/16/grid-graphic-u-s-unemployment-rate)
    shown in [Figure 10-12](#unemployment_grid), which was inspired by a similar form
    I encountered at a museum exhibit about climate change; the geometric heatmap
    format allows readers to visually compare decades of monthly unemployment rates
    at a glance. If you’re interested in design, you can learn a lot about what does
    (and doesn’t) work by simply looking critically at the media you see around you
    every day—whether it’s an online advertisement or a restaurant menu. If something
    doesn’t feel polished or appealing, look carefully at its components. Are the
    colors incongruous? Is the typeface hard to read? Or are there just too many things
    crowded together into too small a space?
  prefs: []
  type: TYPE_NORMAL
- en: Critiquing the work of others is easy, of course. If you really want to improve
    your own visualizations, challenge yourself to try to build better solutions,
    and you’ll learn an enormous amount along the way. And if you find yourself searching
    for the right vocabulary to describe what isn’t working, you may want to look
    through some of the resources in [Appendix D](app04.html#appendix_d), where you’ll
    find some of my favorite resources for expanding and improving my own visualization
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '![US Unemployment Over Time.](assets/ppdw_1012.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-12\. US unemployment over time (originally designed for *The Wall
    Street Journal*)
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like programming, visualization is an applied art: the only way to get better
    at it is to *do* it. If you don’t have a project at hand to work on, start with
    a “found” visualization that you think is somehow subpar and redesign it yourself.
    You can use Python or other computational tools or just a pencil and paper—the
    point is to try to solve the problems you see in the original. Along the way,
    you’ll experience firsthand the trade-offs inherent in every design decision,
    and you’ll start building the skills needed to minimize those trade-offs in service
    of your visualization goals. Then when you’re faced with your own data visualization
    challenges, you’ll have a portfolio of prior work you can refer to when thinking
    about how best to present the data you have and make the point that you need to.'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we’ve done just about all the data wrangling with Python that
    we set out to do—but there is a world of data and visualization tools *beyond*
    Python that can be amazingly useful in supporting your data wrangling and data
    quality work right alongside it. We’ll turn to those in [Chapter 11](ch11.html#chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch10.html#idm45143395782464-marker)) Of which a histogram is a special
    type.
  prefs: []
  type: TYPE_NORMAL
- en: ^([2](ch10.html#idm45143395497264-marker)) Particularly if you give yourself
    credit for [*linking verbs*](https://merriam-webster.com/dictionary/linking%20verb).
  prefs: []
  type: TYPE_NORMAL
- en: ^([3](ch10.html#idm45143395160848-marker)) Though even those few are often are
    violated publicly and frequently, e.g., Junk Chart’s [“Start at Zero Improves
    This Chart but Only Slightly”](https://junkcharts.typepad.com/junk_charts/2021/06/start-at-zero-improves-this-chart-but-only-slightly.html).
  prefs: []
  type: TYPE_NORMAL
- en: ^([4](ch10.html#idm45143395804112-marker)) Since both the *pandas* and *seaborn*
    libraries rely heavily on *matplotlib*, there are many instances where significant
    customization requires using *matplotlib* features directly, as we’ll see in more
    detail in [“Elements of Eloquent Visuals”](#elementsofeloquentvisuals).
  prefs: []
  type: TYPE_NORMAL
- en: ^([5](ch10.html#idm45143395798752-marker)) Obviously, we could simply reverse
    the order in which we originally specified the data, but I prefer to have the
    data order and the eventual visual order match up.
  prefs: []
  type: TYPE_NORMAL
- en: '^([6](ch10.html#idm45143395440176-marker)) “The Hockey Stick: The Most Controversial
    Chart in Science, Explained” by Chris Mooney, [*https://theatlantic.com/technology/archive/2013/05/the-hockey-stick-the-most-controversial-chart-in-science-explained/275753*](https://theatlantic.com/technology/archive/2013/05/the-hockey-stick-the-most-controversial-chart-in-science-explained/275753);
    that said, [organizational charts](http://voices.washingtonpost.com/ezra-klein/2009/07/when_health-care_reform_stops.html)
    have also (expletive warning) [had their day](https://flickr.com/photos/robertpalmer/3743826461).'
  prefs: []
  type: TYPE_NORMAL
- en: ^([7](ch10.html#idm45143395430576-marker)) For more, see Wong’s *The Wall Street
    Journal Guide to Information Graphics* (Norton).
  prefs: []
  type: TYPE_NORMAL
- en: '^([8](ch10.html#idm45143395284112-marker)) Megan Boldt et al., “Schools That
    Work: Despite Appearances, Schools Doing Better than Expected Have Traits in Common,”
    July 9, 2010, [*https://twincities.com/2010/07/09/schools-that-work-despite-appearances-schools-doing-better-than-expected-have-traits-in-common*](https://twincities.com/2010/07/09/schools-that-work-despite-appearances-schools-doing-better-than-expected-have-traits-in-common).'
  prefs: []
  type: TYPE_NORMAL
- en: ^([9](ch10.html#idm45143394216688-marker)) Believe me, I’ve tried.
  prefs: []
  type: TYPE_NORMAL
- en: ^([10](ch10.html#idm45143394184624-marker)) You can accomplish this quickly
    in *pandas* by using the `quantile()` function and passing in the values `0.2`,
    `0.4`, `0.6`, and so on. For a more general refresher on how to calculate these
    values and what they represent, see [Example 9-3](ch09.html#ppp_loan_central_and_dist)
    in [Chapter 9](ch09.html#chapter9)
  prefs: []
  type: TYPE_NORMAL
- en: ^([11](ch10.html#idm45143394142944-marker)) Lazaro Gamio, “How Coronavirus Cases
    Have Risen Since States Reopened,” *The New York Times*, July 9, 2020, [*https://nytimes.com/interactive/2020/07/09/us/coronavirus-cases-reopening-trends.html*](https://nytimes.com/interactive/2020/07/09/us/coronavirus-cases-reopening-trends.html).
  prefs: []
  type: TYPE_NORMAL
- en: ^([12](ch10.html#idm45143394140400-marker)) Anne Gearan, Derek Hawkins, and
    Siobhán O’Grady, “Coronavirus Cases Rose by Nearly 50 Percent Last Month, Led
    by States That Reopened First,” *The Washington Post*, July 1, 2020, [*https://washingtonpost.com/politics/coronavirus-cases-rose-by-nearly-50-percent-last-month-led-by-states-that-reopened-first/2020/07/01/3337f1ec-bb96-11ea-80b9-40ece9a701dc_story.html*](https://washingtonpost.com/politics/coronavirus-cases-rose-by-nearly-50-percent-last-month-led-by-states-that-reopened-first/2020/07/01/3337f1ec-bb96-11ea-80b9-40ece9a701dc_story.html).
  prefs: []
  type: TYPE_NORMAL
- en: ^([13](ch10.html#idm45143394137600-marker)) Mark Olalde and Nicole Hayden, “California
    COVID-19 Cases Spiked after July 4th. Family Gatherings Helped the Spread, Experts
    Say.” *USA Today*, August 2, 2020, [*https://usatoday.com/story/news/nation/2020/08/02/covid-19-spike-california-after-july-4-linked-family-gatherings/5569158002*](https://usatoday.com/story/news/nation/2020/08/02/covid-19-spike-california-after-july-4-linked-family-gatherings/5569158002).
  prefs: []
  type: TYPE_NORMAL
