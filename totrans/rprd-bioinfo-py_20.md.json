["```py\n$ cd 18_fastx_sampler/\n$ cp solution.py sampler.py\n```", "```py\n$ ../15_seqmagique/seqmagique.py tests/inputs/n1*\nname                     min_len    max_len    avg_len    num_seqs\ntests/inputs/n100k.fa         75        200     136.08      100000\ntests/inputs/n10k.fa          75        200     136.13       10000\ntests/inputs/n1k.fa           75        200     135.16        1000\n```", "```py\n$ ./sampler.py -s 1 tests/inputs/n1k.fa\nWrote 95 sequences from 1 file to directory \"out\"\n```", "```py\n$ grep -c '>' out/n1k.fa\n95\n```", "```py\n$ grep -c > out/n1k.fa\nusage: grep [-abcDEFGHhIiJLlmnOoqRSsUVvwxZ] [-A num] [-B num] [-C[num]]\n\t[-e pattern] [-f file] [--binary-files=value] [--color=when]\n\t[--context[=num]] [--directories=action] [--label] [--line-buffered]\n\t[--null] [pattern] [file ...]\n```", "```py\n$ wc out/n1k.fa\n       0       0       0 out/n1k.fa\n```", "```py\n$ ../15_seqmagique/seqmagique.py out/n1k.fa\nname          min_len    max_len    avg_len    num_seqs\nout/n1k.fa         75        200     128.42          95\n```", "```py\n$ ./sampler.py -h\nusage: sampler.py [-h] [-f format] [-p reads] [-m max] [-s seed] [-o DIR]\n                  FILE [FILE ...]\n\nProbabilistically subset FASTA files\n\npositional arguments:\n  FILE                  Input FASTA/Q file(s) ![1](assets/1.png)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f format, --format format\n                        Input file format (default: fasta) ![2](assets/2.png)\n  -p reads, --percent reads\n                        Percent of reads (default: 0.1) ![3](assets/3.png)\n  -m max, --max max     Maximum number of reads (default: 0) ![4](assets/4.png)\n  -s seed, --seed seed  Random seed value (default: None) ![5](assets/5.png)\n  -o DIR, --outdir DIR  Output directory (default: out) ![6](assets/6.png)\n```", "```py\n$ ./sampler.py -p 3 tests/inputs/n1k.fa\nusage: sampler.py [-h] [-f format] [-p reads] [-m max] [-s seed] [-o DIR]\n                  FILE [FILE ...]\nsampler.py: error: --percent \"3.0\" must be between 0 and 1\n```", "```py\n$ ./sampler.py -f fastb tests/inputs/n1k.fa\nusage: sampler.py [-h] [-f format] [-p reads] [-m max] [-s seed] [-o DIR]\n                  FILE [FILE ...]\nsampler.py: error: argument -f/--format: invalid choice:\n'fastb' (choose from 'fasta', 'fastq')\n```", "```py\n$ ./sampler.py -m 30 -s 1 tests/inputs/n1k.fa\n  1: n1k.fa\nWrote 30 sequences from 1 file to directory \"out\"\n```", "```py\n$ new.py -fp 'Probabilistically subset FASTA files' sampler.py\nDone, see new script \"sampler.py\".\n```", "```py\nclass Args(NamedTuple):\n    \"\"\" Command-line arguments \"\"\"\n    files: List[TextIO] ![1](assets/1.png)\n    file_format: str ![2](assets/2.png)\n    percent: float ![3](assets/3.png)\n    max_reads: int ![4](assets/4.png)\n    seed: Optional[int] ![5](assets/5.png)\n    outdir: str ![6](assets/6.png)\n```", "```py\ndef get_args() -> Args:\n    parser = argparse.ArgumentParser(\n        description='Probabilistically subset FASTA files',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        metavar='FILE',\n                        type=argparse.FileType('r'), ![1](assets/1.png)\n                        nargs='+',\n                        help='Input FASTA/Q file(s)')\n\n    parser.add_argument('-f',\n                        '--format',\n                        help='Input file format',\n                        metavar='format',\n                        type=str,\n                        choices=['fasta', 'fastq'], ![2](assets/2.png)\n                        default='fasta')\n\n    parser.add_argument('-p',\n                        '--percent',\n                        help='Percent of reads',\n                        metavar='reads',\n                        type=float, ![3](assets/3.png)\n                        default=.1)\n\n    parser.add_argument('-m',\n                        '--max',\n                        help='Maximum number of reads',\n                        metavar='max',\n                        type=int,\n                        default=0) ![4](assets/4.png)\n\n    parser.add_argument('-s',\n                        '--seed',\n                        help='Random seed value',\n                        metavar='seed',\n                        type=int,\n                        default=None) ![5](assets/5.png)\n\n    parser.add_argument('-o',\n                        '--outdir',\n                        help='Output directory',\n                        metavar='DIR',\n                        type=str,\n                        default='out') ![6](assets/6.png)\n\n    args = parser.parse_args()\n\n    if not 0 < args.percent < 1: ![7](assets/7.png)\n        parser.error(f'--percent \"{args.percent}\" must be between 0 and 1')\n\n    if not os.path.isdir(args.outdir): ![8](assets/8.png)\n        os.makedirs(args.outdir)\n\n    return Args(files=args.file, ![9](assets/9.png)\n                file_format=args.format,\n                percent=args.percent,\n                max_reads=args.max,\n                seed=args.seed,\n                outdir=args.outdir)\n```", "```py\n>>> import random\n>>> random.random()\n0.465289867914331\n```", "```py\n>>> random.seed(1)\n>>> random.random()\n0.13436424411240122\n```", "```py\nset the random seed\niterate through each input file\n    set the output filename to output directory plus the input file's basename\n    open the output filehandle\n    initialize a counter for how many records have been taken\n\n    iterate through each record of the input file\n        select a random number between 0 and 1\n        if this number is less than or equal to the percent\n            write the sequence in FASTA format to the output filehandle\n            increment the counter for taking records\n\n        if there is a max number of records and the number taken is equal\n            leave the loop\n\n    close the output filehandle\n\nprint how many sequences were taken from how many files and the output location\n```", "```py\ndef main() -> None:\n    args = get_args()\n    random.seed(args.seed) ![1](assets/1.png)\n\n    total_num = 0 ![2](assets/2.png)\n    for i, fh in enumerate(args.files, start=1): ![3](assets/3.png)\n        basename = os.path.basename(fh.name)\n        out_file = os.path.join(args.outdir, basename)\n        print(f'{i:3}: {basename}') ![4](assets/4.png)\n\n        out_fh = open(out_file, 'wt') ![5](assets/5.png)\n        num_taken = 0 ![6](assets/6.png)\n\n        for rec in SeqIO.parse(fh, args.file_format): ![7](assets/7.png)\n            if random.random() <= args.percent: ![8](assets/8.png)\n                num_taken += 1\n                SeqIO.write(rec, out_fh, 'fasta')\n\n            if args.max_reads and num_taken == args.max_reads: ![9](assets/9.png)\n                break\n\n        out_fh.close() ![10](assets/10.png)\n        total_num += num_taken\n\n    num_files = len(args.files) ![11](assets/11.png)\n    print(f'Wrote {total_num:,} sequence{\"\" if total_num == 1 else \"s\"} '\n          f'from {num_files:,} file{\"\" if num_files == 1 else \"s\"} '\n          f'to directory \"{args.outdir}\"')\n```", "```py\nparser.add_argument('file',\n                    metavar='FILE',\n                    type=str, ![1](assets/1.png)\n                    nargs='+',\n                    help='Input FASTA/Q file(s)')\n```", "```py\nif bad_files := [file for file in args.file if not os.path.isfile(file)]: ![1](assets/1.png)\n    parser.error(f'Invalid file: {\", \".join(bad_files)}') ![2](assets/2.png)\n```", "```py\ndef main() -> None:\n    args = get_args()\n    random.seed(args.seed)\n\n    total_num = 0\n    for i, file in enumerate(args.files, start=1): ![1](assets/1.png)\n        basename = os.path.basename(file)\n        out_file = os.path.join(args.outdir, basename)\n        print(f'{i:3}: {basename}')\n\n        ext = os.path.splitext(basename)[1] ![2](assets/2.png)\n        fh = gzip.open(file, 'rt') if ext == '.gz' else open(file, 'rt') ![3](assets/3.png)\n        out_fh = open(out_file, 'wt')\n        num_taken = 0\n\n        for rec in SeqIO.parse(fh, args.file_format):\n            if random.random() <= args.percent:\n                num_taken += 1\n                SeqIO.write(rec, out_fh, 'fasta')\n\n            if args.max_reads and num_taken == args.max_reads:\n                break\n\n        out_fh.close()\n        total_num += num_taken\n\n    num_files = len(args.files)\n    print(f'Wrote {total_num:,} sequence{\"\" if total_num == 1 else \"s\"} '\n          f'from {num_files:,} file{\"\" if num_files == 1 else \"s\"} '\n          f'to directory \"{args.outdir}\".')\n```", "```py\nparser.add_argument('-d',\n                    '--dir',\n                    metavar='DIR',\n                    type=str,\n                    nargs='+',\n                    help='Input directories of FASTA/Q file(s)')\n```", "```py\nfiles = []\nfor dirname in args.dir:\n    if os.path.isdir(dirname):\n        files.extend(list(Path(dirname).rglob('*')))\n\nif not files:\n    parser.error('Found no files')\n\nreturn Args(files=files,\n            file_format=args.format,\n            percent=args.percent,\n            max_reads=args.max,\n            seed=args.seed,\n            outdir=args.outdir)\n```"]