["```py\n>>>mkdir psi\n\n>>>cd psi\n```", "```py\n>>>wget https://files.pythonhosted.org/packages/2b/ac/\n   a62c753f91139597b2baf6fb3207d29bd98a6cf01da918660c8d58a756e8/\n   openmined.psi-2.0.1-cp310-cp310-manylinux_2_31_x86_64.whl\n```", "```py\n>>>pip install openmined.psi-2.0.1-cp310-cp310-\n    manylinux_2_31_x86_64.whl\n```", "```py\n>>>git clone http://github.com/openmined/psi\n```", "```py\n>>>cd psi\n```", "```py\n>>>wget https://github.com/bazelbuild/bazel/releases/download/\n    6.0.0/bazel_6.0.0-linux-x86_64.deb\n```", "```py\n>>>sudo dpkg -i *.deb\n```", "```py\n>>>bazel build -c opt //private_set_intersection/python:wheel\n```", "```py\n>>>python ./private_set_intersection/python/rename.py\n```", "```py\n>>>pip install ./bazel-bin/private_set_intersection/python/\n   openmined.psi-2.0.1-cp310-cp310-manylinux_2_31_x86_64.whl\n```", "```py\n>>>pip install flask\n```", "```py\n>>>cd ..\n\n>>>gsutil cp gs://<your bucket>/<your path>/Chapter10* . \n>>>gsutil cp gs://<your bucket>/<your path>/mari_clean.csv .\n>>>gsutil cp gs://<your bucket>/<your path>/basic_clean.csv .\n```", "```py\n>>>flask --app Chapter10Server run --host 0.0.0.0\n```", "```py\n* Serving Flask app 'Chapter10Server'\n...\n* Running on http://127.0.0.1:5000\nPRESS CTRL+C to quit\n```", "```py\nimport private_set_intersection.python as psi\nfrom flask import Flask, request\nfrom pandas import read_csv\n\nfpr = 0.01\nnum_client_inputs = 100\n\ndf_m = read_csv('basic_clean.csv',keep_default_na=False)\nserver_items = ['ABLY RESOURCES G2 1PB','ADVANCE GLOBAL RECRUITMENT EH7 4HG']\n#server_items = (df_m['CompanyName']+' '+ df_m['Postcode']).to_list()\n\napp = Flask(__name__)\n```", "```py\n#server_items = (df_m['CompanyName']+' '+ df_m['Postcode']).to_list()\n```", "```py\nclass psikey(object):\n   def __init__(self):\n      self.key = None\n   def set_key(self, newkey):\n      self.key = newkey\n      return self.key\n   def get_key(self):\n      return self.key\n\npkey = psikey()\n```", "```py\n@app.route('/match', methods=['POST'])\ndef match():\n   s = pkey.set_key(psi.server.CreateWithNewKey(True))\n   psirequest = psi.Request()\n   psirequest.ParseFromString(request.data)\n   return s.ProcessRequest(psirequest).SerializeToString()\n```", "```py\n@app.route('/gcssetup', methods=['GET'])\ndef gcssetup():\n   s = pkey.get_key()\n   return s.CreateSetupMessage(fpr, num_client_inputs, server_items,\n      psi.DataStructure.GCS).SerializeToString()\n\n@app.route('/rawsetup', methods=['GET'])\ndef rawsetup():\n   s = pkey.get_key()\n   return s.CreateSetupMessage(fpr, num_client_inputs, server_items,\n      psi.DataStructure.RAW).SerializeToString()\n\n@app.route('/bloomsetup', methods=['GET'])\ndef bloomsetup():\n   s = pkey.get_key()\n   return s.CreateSetupMessage(fpr, num_client_inputs, server_items,\n      psi.DataStructure.BLOOM_FILTER).SerializeToString()\n```", "```py\nimport requests\nimport private_set_intersection.python as psi\nfrom pandas import read_csv\n\nurl=\"http://localhost:5000/\"\n```", "```py\ndf_m = read_csv('mari_clean.csv')\nclient_items = (df_m['CompanyName']+' '+df_m['Postcode']).to_list()\nc = psi.client.CreateWithNewKey(True)\npsirequest = c.CreateRequest(client_items).SerializeToString()\n\nc.CreateRequest(client_items)\n```", "```py\nreveal_intersection: true\nencrypted_elements: \n    \"\\002r\\022JjD\\303\\210*\\354\\027\\267aRId\\2522\\213\\304\\250%\\005J\\224\\222m\\354\\\n    207`\\2136\\306\"\nencrypted_elements: \n    \"\\002\\005\\352\\245r\\343n\\325\\277\\026\\026\\355V\\007P\\260\\313b\\377\\016\\000{\\336\\\n    343\\033&\\217o\\210\\263\\255[\\350\"\n```", "```py\nresponse = requests.post(url+'match',\n    headers={'Content-Type': 'application/protobuf'}, data=psirequest)\npsiresponse = psi.Response()\npsiresponse.ParseFromString(response.content)\npsiresponse\n```", "```py\nsetupresponse = requests.get(url+'rawsetup')\nrawsetup = psi.ServerSetup()\nrawsetup.ParseFromString(setupresponse.content)\nrawsetup\n```", "```py\nraw {\n  encrypted_elements: \n      \"\\003>W.x+\\354\\310\\246\\302z\\341\\364%\\255\\202\\354\\021n\\t\\211\\037\\221\\255\\\n      263\\006\\305NU\\345.\\243@\"\n  encrypted_elements: \n      \"\\003\\304Q\\373\\224.\\0348\\025\\3452\\323\\024\\317l~\\220\\020\\311A\\257\\002\\\n      014J0?\\274$\\031`N\\035\\277\"\n}\n```", "```py\nintersection = c.GetIntersection(gcssetup, psiresponse)\n#intersection = c.GetIntersection(bloomsetup, psiresponse)\n#intersection = c.GetIntersection(rawsetup, psiresponse)\n\niset = set(intersection)\nsorted(intersection)\n```", "```py\n[1, 2]\n```", "```py\nfor index in sorted(intersection):\n   print(client_items[index])\n\nABLY RESOURCES G2 1PB\nADVANCE GLOBAL RECRUITMENT EH7 4HG\n```", "```py\nsetupresponse = requests.get(url+'bloomsetup')\nbloomsetup = psi.ServerSetup()\nbloomsetup.ParseFromString(setupresponse.content)\nbloomsetup\n```", "```py\nbloom_filter {\n  num_hash_functions: 14\n  bits: \"\\000\\000\\000\\000 ...\\000\"\n}\n```", "```py\nfrom math import ceil, log, log2\n\nfpr = 0.01\nnum_client_inputs = 10\n\ncorrectedfpr = fpr / num_client_inputs\nlen_server_items = 2\n\nmax_elements = max(num_client_inputs, len_server_items)\nnum_bits = (ceil(-max_elements * log2(correctedfpr) / log(2) /8))* 8\n```", "```py\nnum_hash_functions = ceil(-log2(correctedfpr))\n```", "```py\nfrom hashlib import sha256\n\n#num_bits = len(bloomsetup.bloom_filter.bits)*8\nfilterlist = ['0'] * num_bits\nfor element in rawsetup.raw.encrypted_elements:\n   element1 = str.encode('1') + element\n   k = sha256(element1).hexdigest()\n   h1 = int(k,16) % num_bits\n\n   element2 = str.encode('2') + element\n   k = sha256(element2).hexdigest()\n   h2 = int(k,16) % num_bits\n\n  for i in range(bloomsetup.bloom_filter.num_hash_functions):\n      pos = ((h1 + i * h2) % num_bits)\n      filterlist[num_bits-1-pos]='1'\n\nfilterstring = ''.join(filterlist)\n```", "```py\nbloombits = ''.join(format(byte, '08b') for byte in\n   reversed(bloomsetup.bloom_filter.bits))\nbloombits == filterstring\n```", "```py\nsetupresponse = requests.get(url+'gcssetup')\ngcssetup =\n   psi.ServerSetup()gcssetup.ParseFromString(setupresponse.content)\n```", "```py\ngcs {\n  div: 17\n  hash_range: 1000000\n  bits: \")![Q\\026\"\n}\n```", "```py\nfrom math import ceil, log, log2\n\nfpr = 0.01\nnum_client_inputs = 100\ncorrectedfpr = fpr/num_client_inputs\n\nhash_range = max_elements/correctedfpr\nhash_range\n```", "```py\nfrom hashlib import sha256\n\nulist = []\nfor element in rawsetup.raw.encrypted_elements:\n   k = sha256(element).hexdigest()\n   ks = int(k,16) % gcssetup.gcs.hash_range\n   ulist.append(ks)\n\nulist.sort()\nudiff = [ulist[0]] + [ulist[n]-ulist[n-1]\n   for n in range(1,len(ulist))]\n```", "```py\navg = (ulist[-1]+1)/len(ulist)\nprob = 1/avg\ngcsdiv = max(0,round(-log2(-log2(1.0-prob))))\n```", "```py\nencoded = ''\nfor diff in udiff:\n   if diff != 0:\n      quot = int(diff / pow(2,gcssetup.gcs.div))\n      rem = diff % pow(2,gcssetup.gcs.div)\n\n      next = '{0:b}'.format(rem) + '1' + ('0' * quot)\n      pad = next.zfill(quot+gcssetup.gcs.div+1)\n      encoded = pad + encoded\n```", "```py\nfrom math import ceil\npadlength = ceil(len(encoded)/8)*8\npadded = encoded.zfill(padlength)\n\ngcsbits = ''.join(format(byte, '08b') for byte in\n   reversed(gcssetup.gcs.bits))\ngcsbits == padded\n```", "```py\n#server_items = (df_m['CompanyName']+' '+\n   df_m['Postcode']).to_list()\n```", "```py\n>>>flask --app Chapter10Server run --host 0.0.0.0\n```", "```py\nADVANCE GLOBAL RECRUITMENT EH7 4HG\nADVANCED RESOURCE MANAGERS PO6 4PR\n...\n\nWORLDWIDE RECRUITMENT SOLUTIONS WA15 8AB\n```"]