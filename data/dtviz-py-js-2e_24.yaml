- en: Chapter 18\. Visualizing Individual Prizes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章\. 可视化个别奖项
- en: In [Chapter 17](ch17.xhtml#chapter_d3_intro) you learned the basics of D3, how
    to select and change DOM elements, how to add new ones, and how to apply the data
    update pattern, which is the axis around which interactive D3 spins. In this chapter,
    I will expand on what you’ve learned so far and show you how to build a fairly
    novel visual element, showing all the individual Nobel Prizes by year ([Figure 18-1](#d3nobels_target)).
    This Nobel timeline will allow us to expand on the knowledge of the last chapter,
    demonstrating a number of new techniques including more advanced data manipulation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第17章](ch17.xhtml#chapter_d3_intro)中，您学习了 D3 的基础知识，如何选择和更改 DOM 元素，如何添加新元素以及如何应用数据更新模式，这是交互式
    D3 的核心。在本章中，我将扩展您迄今所学，并向您展示如何构建一个相当新颖的视觉元素，显示每年的所有个别诺贝尔奖（[图18-1](#d3nobels_target)）。这个诺贝尔奖时间线将使我们扩展上一章的知识，演示许多新技术，包括更高级的数据操作。
- en: '![dpj2 1502](assets/dpj2_1502.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1502](assets/dpj2_1502.png)'
- en: Figure 18-1\. This chapter’s target chart, a timeline of Nobel Prizes
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-1\. 本章的目标图表，诺贝尔奖的时间线
- en: Let’s start by showing how we build the HTML framework for our timeline chart.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先展示如何为我们的时间线图表构建 HTML 框架。
- en: Building the Framework
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建框架
- en: 'Our target chart’s construction is similar to that of our Nobel Prize bar chart,
    which we covered in detail in the last chapter. We first use D3 to select our
    `<div>` container with ID `nobel-time`, then use the width and height of the container,
    along with our specified margins, to create our `svg` chart group:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目标图表的构建方式类似于上一章详细介绍的诺贝尔奖条形图。我们首先使用 D3 选择带有 ID `nobel-time` 的 `<div>` 容器，然后使用容器的宽度和高度以及指定的边距来创建我们的
    `svg` 图表组：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With our `svg` chart group in place, let’s add the scales and axes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `svg` 图表组准备好之后，让我们添加比例尺和轴线。
- en: Scales
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比例尺
- en: To place the circular indicators, we use two ordinal scales ([Example 18-1](#d3time_scales)).
    The x-scale uses the `rangeRoundBands` method to specify a 10% padding between
    the circles. Because we use the x-scale to set the circles’ diameters, the height
    of our y-scale’s range is manually adjusted to accommodate all the indicators,
    allowing a little padding between them. We use `rangeRoundPoints` to round to
    integer pixel coordinates.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了放置圆形指示器，我们使用了两个序数比例尺（[示例18-1](#d3time_scales)）。x 比例尺使用 `rangeRoundBands` 方法指定圆形之间的10%填充。由于我们使用
    x 比例尺设置圆形的直径，因此我们的 y 比例尺的范围高度手动调整以容纳所有指示器，允许它们之间略有填充。我们使用 `rangeRoundPoints` 来将坐标舍入到整数像素。
- en: Example 18-1\. The chart’s two ordinal band scales, for x and y axes
  id: totrans-11
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例18-1\. 图表的两个序数带比例尺，用于 x 和 y 轴
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO1-1)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO1-1)'
- en: We’re using a padding factor of 0.1, which is approximately 10% of an indicator’s
    diameter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了0.1的填充因子，大约是指示器直径的10%。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO1-2)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO1-2)'
- en: The domain is [0, …​, 15] with 15 being the historical maximum number of prizes
    given in any one year.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 域是[0, …​, 15]，15是任何一年中颁发的历史最高奖项数。
- en: Unlike our bar chart from the last chapter, both ranges and domains of this
    chart are fixed. The domain of the `xScale` is the years over which the Nobel
    Prize has run, and that of the `yScale` is from zero to the maximum number of
    prizes in any given year (14 in the year 2000). Neither of these will change in
    response to user interaction, so we define them outside the `update` method.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章的条形图不同，此图的范围和域都是固定的。 `xScale` 的域是诺贝尔奖设立的年份，而 `yScale` 的域是从零到任意一年中最大奖项数（例如2000年的14个奖项）。这两者都不会因用户交互而改变，因此我们在
    `update` 方法之外定义它们。
- en: Axes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轴线
- en: With a maximum of 14 prizes in any one year and with a circular indicator for
    each, it is easy to make a prize count by eye if necessary. Given this, the emphasis
    on providing a relative indicator of prize distribution (e.g., showing the spurt
    in post-WWII US science prizes), and the long length of the chart, a y-axis is
    redundant for our chart.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何一年最多有14个奖项并且每个奖项都有一个圆形指示器的情况下，如果需要，可以轻松通过眼睛获得奖项计数。基于此，强调相对奖项分布的指示器（例如显示二战后美国科学奖项的激增）和图表的长长度，我们的图表不需要
    y 轴。
- en: For the x-axis, labeling the decades’ starts seems about right. It reduces visual
    clutter and is also the standard human way of charting historical trends. [Example 18-2](#d3time_axis_code)
    shows the construction of our x-axis, using D3’s handy `axis` object. We override
    the tick values using the `tickValues` method, filtering the domain range (1900–2015)
    to return only those dates ending with zero.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 x 轴，标注每个十年的开始似乎是合适的。这样可以减少视觉杂乱，并且也是图表历史趋势的标准人类方式。[Example 18-2](#d3time_axis_code)展示了我们的
    x 轴的构建，使用了 D3 的方便的`axis`对象。我们使用`tickValues`方法重写刻度值，过滤域范围（1900年至2015年），只返回以零结尾的日期。
- en: Example 18-2\. Making the x-axis, with tick labels per decade
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例18-2。制作 x 轴，每十年一个刻度标签
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO2-1)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![1](assets/1.png)](#co_visualizing_individual_prizes_CO2-1)'
- en: We only want to tick every 10th year, so we create tick values by filtering
    the x-scale domain values and using their index to select only those that are
    divisible by 10\. These give 0 for modulus (`%`) 10, to which we apply the not
    Boolean operator (`!`) to produce `true`, which passes the filter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只想在每十年打勾，所以我们通过过滤 x 轴刻度值并使用它们的索引来选择仅可被10整除的值来创建刻度值。这些通过模数(`%`)10得到0，我们将不布尔运算符(`!`)应用于这些来产生`true`，这通过了过滤器。
- en: This returns `true` for years ending in 0, giving a tick label at the start
    of every decade.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这会对以0结尾的年份返回`true`，从而在每个十年的开始处给出一个刻度标签。
- en: 'As with the scales, we don’t anticipate the axes changing,^([1](ch18.xhtml#idm45607743508496))
    so we can add them before receiving the dataset in the `updateTimeChart` function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与比例尺一样，我们不预期轴会改变，^([1](ch18.xhtml#idm45607743508496))所以我们可以在`updateTimeChart`函数接收数据集之前添加它们：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO3-1)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![1](assets/1.png)](#co_visualizing_individual_prizes_CO3-1)'
- en: Calls our D3 axis on the `svg` group, with the `axis` object taking care of
    building the axis elements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`svg`组上调用我们的 D3 轴，使用`axis`对象来构建轴元素。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO3-2)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![2](assets/2.png)](#co_visualizing_individual_prizes_CO3-2)'
- en: As in [“Axes and Labels”](ch17.xhtml#sect_axes_labels), we rotate the axis tick
    labels to place them diagonally.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像[“轴和标签”](ch17.xhtml#sect_axes_labels)中一样，我们将轴刻度标签旋转，将它们对角放置。
- en: With axes and scales taken care of, we need only add a little legend with our
    colored category labels before moving on to the cool, interactive elements of
    the chart.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有了轴和比例尺，我们只需要在移动到图表的酷炫、交互式元素之前添加一点带有彩色类别标签的图例。
- en: Category Labels
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类别标签
- en: The last of our *static* components is a legend, containing the category labels
    shown in [Figure 18-2](#d3nobels_legend).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的*静态*组件中最后一个是图例，包含在[图18-2](#d3nobels_legend)中显示的类别标签。
- en: '![dpj2 1802](assets/dpj2_1802.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1802](assets/dpj2_1802.png)'
- en: Figure 18-2\. Categories legend
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-2。类别图例
- en: 'To create the legend, we first create a group, class `labels`, to hold the
    labels. We bind our `nbviz.CATEGORIES` data to a `label` selection on this `labels`
    group, enter the bound data, and attach a group for each category, displaced on
    the y-axis by index:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建图例，我们首先创建一个组，类名为`labels`，用于保存标签。我们将我们的`nbviz.CATEGORIES`数据绑定到此`labels`组上的`label`选择器上，输入绑定的数据，并为每个类别附加一个组，通过索引在
    y 轴上偏移：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO4-1)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![1](assets/1.png)](#co_visualizing_individual_prizes_CO4-1)'
- en: We join our array of categories (`["Chemistry", "Economics", …​]`) to the `label`
    group using the standard `data` followed by `join` methods.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将我们的类别数组（`["Chemistry", "Economics", …​]`）与`label`组结合使用标准的`data`后跟`join`方法。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO4-2)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![2](assets/2.png)](#co_visualizing_individual_prizes_CO4-2)'
- en: Creates a group for each category, spaced vertically 10 pixels apart.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个类别创建一个组，垂直间距为10像素。
- en: 'Now that we have our `catLabels` selection, let’s add a circular indicator
    (matching those seen in the timeline) and text label to each of its groups:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的`catLabels`选择，让我们在每个组中添加一个圆形指示器（与时间线中看到的相匹配）和文本标签：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO5-1)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![1](assets/1.png)](#co_visualizing_individual_prizes_CO5-1)'
- en: We use our shared `categoryFill` method to return a color based on the bound
    category.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用我们共享的`categoryFill`方法根据绑定的类别返回颜色。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO5-2)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![2](assets/2.png)](#co_visualizing_individual_prizes_CO5-2)'
- en: The x scales `bandwidth` method returns the distance between two category labels.
    We will use half of this to get the radius for our circular label markers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: x 轴的`bandwidth`方法返回两个类别标签之间的距离。我们将使用其中一半来获得我们圆形标签标记的半径。
- en: The `categoryFill` function ([Example 18-3](#d3time_colors)) is defined in *nbviz_core.js*
    and is used by the app to provide colors for the categories. D3 provides a number
    of color schemes in the form of arrays of color hex codes, which can be used as
    our SVG fill colors. You can see a demo of the color schemes on [Observable](https://oreil.ly/sblXu).
    We are dealing with categories, so we’ll use the Category10 set.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`categoryFill`函数（[示例 18-3](#d3time_colors)）在*nbviz_core.js*中定义，并被应用于应用程序以为类别提供颜色。D3提供了一些颜色方案，以色彩十六进制代码数组的形式提供，这些颜色可以用作我们的SVG填充颜色。您可以在[Observable](https://oreil.ly/sblXu)上看到颜色方案的演示。由于我们处理的是类别，因此我们将使用Category10集。'
- en: Example 18-3\. Setting the category colors
  id: totrans-50
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-3\. 设置类别颜色
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO6-1)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO6-1)'
- en: D3’s `schemeCategory10` is an array of 10 color hex codes (`['#1f77b4', '#ff7f0e',...]`)
    that we can apply using the prize category index.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: D3的`schemeCategory10`是一个包含10个颜色十六进制代码的数组（`['#1f77b4', '#ff7f0e', ...]`），我们可以根据奖项类别索引应用它们。
- en: Now that we’ve covered all the static elements of our time chart, let’s look
    at how we knock it into usable form with D3’s *nest* library.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了时间图表的所有静态元素，让我们看看如何使用D3的*nest*库将其转换为可用形式。
- en: Nesting the Data
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据进行嵌套
- en: In order to create this timeline component, we need to reorganize our flat array
    of winners objects into a form that will allow us to bind it to the individual
    Nobel Prizes in our timeline. What we need, to make binding this data with D3
    as smooth as possible, is an array of prize objects by year, with the year groups
    available as arrays. Let’s demonstrate the conversion process with our Nobel Prize
    dataset.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个时间线组件，我们需要重新组织我们的扁平化获奖者对象数组，以便将其绑定到我们时间线中的单个诺贝尔奖项。为了尽可能顺利地将这些数据与D3绑定，我们需要一个按年份组织的奖项对象数组，其中年份组以数组形式提供。让我们用我们的诺贝尔奖数据集演示转换过程。
- en: 'The following is the flat Nobel Prize dataset we begin with, ordered by year:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们开始使用的扁平化诺贝尔奖数据集，按年份排序：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We want to take this data and convert it to the following nested format, an
    array of objects with year keys and winners-by-year values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将这些数据转换为以下嵌套格式，即年份键和按年份获奖者的对象数组：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can iterate through this nested array and join the year groups in turn, each
    one represented by a column of indicators in our timeline.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以遍历这个嵌套数组，并依次加入年份组，每个组在我们的时间线中表示为指标的一列。
- en: 'We can make use of one D3 `group` utility method in order to group the Nobel
    prizes by year. `group` takes an array of data and returns an object grouped by
    the property specified in a callback function, in our case the year of the prize.
    So we group our entries by year like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用D3的一个`group`实用方法，按年份对诺贝尔奖进行分组。`group`接受一个数据数组并根据回调函数中指定的属性返回一个按指定属性分组的对象，对于我们来说是奖项的年份。因此，我们像这样按年份分组我们的条目：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO7-1)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO7-1)'
- en: Here we use a modern JavaScript lambda shorthand function, equivalent to `function(d)
    { return d.year }`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了现代JavaScript的lambda简写函数，相当于`function(d) { return d.year }`。
- en: 'This grouping returns the array of entries of the form:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分组将返回以下形式的条目数组：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now in order to convert this map to the required array of key-values objects,
    we’ll make use of JavaScript’s `Array` object and its `from` method. We pass in
    our `yearGroups` map and a converter function that takes the individual groups
    in the form of a [key, values] array and converts them to a {key: key, values:
    values} object. We are again using the [destructuring assignment syntax](https://oreil.ly/rREpC)
    to map our key and values:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，为了将此映射转换为所需的键-值对象数组，我们将利用JavaScript的`Array`对象及其`from`方法。我们传入我们的`yearGroups`映射及一个转换函数，该函数以[key,
    values]数组的形式接收单独的组，并将它们转换为{key: key, values: values}对象。我们再次使用了[解构赋值语法](https://oreil.ly/rREpC)来映射我们的键和值：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We now have the required function to group our filtered winning prize entries
    by year in the key-values form required:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了必要的函数，可以按照所需的键-值形式对我们筛选出的获奖条目按年份进行分组：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO8-1)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO8-1)'
- en: We use the JavaScript array’s [`sort` method](https://oreil.ly/VA1ot) to sort
    the prizes alphabetically by category. This will make it easier to compare year
    with year. `sort` expects a positive or negative numerical value, which we produce
    using the Boolean alphanumeric string comparison.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用JavaScript数组的 [`sort` 方法](https://oreil.ly/VA1ot) 按类别按字母顺序对奖项进行排序。这将使年份间的比较更加容易。
    `sort` 期望一个正数或负数的数值，我们通过布尔值字母数字字符串比较生成它。
- en: Adding the Winners with a Nested Data-Join
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用嵌套数据连接添加获奖者
- en: In [“Putting the Bar Chart Together”](ch17.xhtml#d3_putting_barchart_together)
    of the last chapter, we saw how D3’s newish `join` method makes it easy to synchronize
    changes in data, in that case number of prizes by country, with the visualization
    of that data, in that case bars in a bar chart. Our winners-by-year chart is essentially
    a bar chart where the individual bars are represented by prizes (circle markers).
    Now we’ll see how this can easily be accomplished by using two data-joins and
    the nested dataset produced in the last section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的“将条形图组合在一起”中，我们看到了D3的新 `join` 方法如何轻松同步数据的变化，即按国家按奖项数量的情况，在可视化方面（在这种情况下是条形图中的条形）。我们按年份分组的获奖者图表本质上是一个条形图，其中各个条形由奖项（圆形标记）表示。现在我们将看到如何通过使用两个数据连接和上一节生成的嵌套数据集轻松实现这一点。
- en: 'The nested data is first passed from `onDataChange` to our time chart’s `updateTimeChart`
    method. We then use our first data-join to create the year groups, positioning
    them using our ordinal x scale, which mapped years to pixel positions (see [Example 18-1](#d3time_scales))
    and naming them by year:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将嵌套数据从 `onDataChange` 传递给我们时间图表的 `updateTimeChart` 方法。然后，我们使用第一个数据连接创建年份组，并使用我们的序数
    x 比例尺将它们定位到像素位置（参见[示例 18-1](#d3time_scales)），并按年份命名：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO9-1)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO9-1)'
- en: We want to join the year data to its respective column by its year key, not
    the default array index, which will change if there are year gaps in our nested
    array, as there often will be for the user-selected datasets.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要按照年份键（year key）而不是默认的数组索引将年份数据加入到其相应的列中，因为在用户选择的数据集中经常会出现年份间隔，这样默认的数组索引就会改变。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO9-2)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO9-2)'
- en: Our first data-join uses the key-values array to produce the circle-bar groups
    by year.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个数据连接使用键值数组按年份生成圆形条形组。
- en: Let’s use Chrome’s Elements tab to see the changes we’ve made from this first
    data-join. [Figure 18-3](#d3nobels_first_enter) shows our year groups nestled
    nicely in their parent chart group.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Chrome的Elements选项卡查看我们从第一次数据连接中做出的更改。[图 18-3](#d3nobels_first_enter)显示我们的年份组已嵌套在其父图表组中。
- en: '![dpj2 1803](assets/dpj2_1803.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1803](assets/dpj2_1803.png)'
- en: Figure 18-3\. The result of creating our year groups during the first data-join
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-3\. 在第一个数据连接期间创建年份组的结果
- en: Let’s check to make sure our nested data has been bound correctly to its respective
    year groups. In [Figure 18-4](#d3nobels_firstpass_data), we select a group element
    by its year name and inspect it. As required, the correct data has been bound
    by year, showing an array of data objects for the six Nobel Prize winners of 1901.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的嵌套数据是否已正确绑定到其相应的年份组。在[图 18-4](#d3nobels_firstpass_data)中，我们按年份名称选择一个组元素并进行检查。按要求，正确的数据已按年份绑定，显示了1901年的六位诺贝尔奖获得者的数据对象数组。
- en: 'Having joined our year group data to their respective groups, we can now join
    those values to the circular marker groups representing each year. The first thing
    we need to do is select all the year groups with the key-values data we just added
    and bind the values array (the prizes for that year) to some *winner* placeholders,
    which will soon be joined to some circle markers. This is achieved by the following
    D3 calls:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将年份组数据与其相应的组绑定后，我们现在可以将这些值连接到代表每年的圆形标记组。首先，我们需要使用刚刚添加的键值数据选择所有年份组，并将值数组（该年的奖项）绑定到一些*获奖者*占位符上，这可以通过以下D3调用实现：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO10-1)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO10-1)'
- en: We’ll be creating a circle marker for each prize in the values array.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为值数组中的每个奖项创建一个圆形标记。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO10-2)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO10-2)'
- en: We’ll use the values array to create the circles with D3’s join.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用值数组使用D3的连接功能创建圆圈。
- en: '[![3](assets/3.png)](#co_visualizing_individual_prizes_CO10-3)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_individual_prizes_CO10-3)'
- en: We use an optional key to track the circles/winners by name—this will be useful
    for transition effects, as we’ll see later on.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个可选的键来按名称跟踪圆圈/获奖者——这对于过渡效果将会很有用，正如我们稍后将看到的。
- en: '![dpj2 1804](assets/dpj2_1804.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1804](assets/dpj2_1804.png)'
- en: Figure 18-4\. Checking the results of our first data-join with Chrome’s console
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-4\. 使用 Chrome 控制台检查我们第一个数据连接的结果
- en: Now that we’ve created our *circle* placeholders with winning entry data, it
    only remains to join these to a circle using D3’s `join` method. This will keep
    track of any changes to the data and make sure circles are created and destroyed
    in sync. The rest of the impressively succinct code required is as follows in
    [Example 18-4](#d3nobels_second_data_join).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经用获奖条目数据创建了我们的 *圆形* 占位符，只需使用 D3 的 `join` 方法将这些占位符连接到一个圆形上。这将跟踪数据的任何更改，并确保圆形在创建和销毁时同步进行。所需的其余令人印象深刻的简洁代码如下所示
    [示例 18-4](#d3nobels_second_data_join)。
- en: Example 18-4\. A second data-join to produce the prizes’ circle indicators
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 18-4\. 第二个数据连接以生成奖品的圆形指示器
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO11-1)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO11-1)'
- en: A custom `enter` method is used to append any new circles needed and give them
    a default y position at the bottom (y is down for SVG) of the chart.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义 `enter` 方法用于附加任何新需要的圆圈，并为它们设置一个默认的 y 位置在图表底部（SVG 的 y 向下）。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO11-2)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO11-2)'
- en: A little helper method returns a color given the prize’s category.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小帮手方法根据奖项类别返回一个颜色。
- en: '[![3](assets/3.png)](#co_visualizing_individual_prizes_CO11-3)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_visualizing_individual_prizes_CO11-3)'
- en: The year group already has the correct x position, so we only need to use the
    bandwidth of the bars to set the radius and center the circle in the middle of
    the bar. The y-scale is used to set the height of the bar by index `i` in the
    winners array.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 年度组已经有了正确的 x 位置，所以我们只需要使用条形的带宽来设置半径并将圆心置于条形的中间。y 比例尺用于根据获奖者数组中的索引 `i` 设置条形的高度。
- en: The code in [Example 18-4](#d3nobels_second_data_join) does the job of building
    our prize time chart, creating new indicator circles if required and placing them,
    along with any existing ones, at their correct position, as designated by their
    array index (see [Figure 18-5](#timeline_second_pass)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 18-4](#d3nobels_second_data_join) 中的代码完成了构建我们的奖品时间图表的任务，如有需要，创建新的指示圆并将它们与任何现有的圆一起放置在它们正确的位置，由它们的数组索引指定（见
    [图 18-5](#timeline_second_pass)）。'
- en: '![dpj2 1805](assets/dpj2_1805.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1805](assets/dpj2_1805.png)'
- en: Figure 18-5\. The result of our successful second data-join
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 18-5\. 我们成功的第二次数据连接的结果
- en: 'Although we have produced a perfectly usable timeline, which will respond to
    user-driven changes in the data, the transition is a little stark and unengaging.^([2](ch18.xhtml#idm45607742041664))
    Let’s now see a great demonstration of D3’s power: how the addition of two lines
    of code can buy a rather cool visual effect as our timeline changes state.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经制作出了一个完全可用的时间轴，可以响应数据驱动的变化，但过渡有些生硬且缺乏吸引力。^([2](ch18.xhtml#idm45607742041664))
    现在让我们来看看 D3 的强大之处：通过添加两行代码，我们可以为我们的时间轴状态改变带来一个相当酷炫的视觉效果。
- en: A Little Transitional Sparkle
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点过渡的闪烁
- en: As things stand, when the user selects a new dataset,^([3](ch18.xhtml#idm45607742034720))
    the update pattern in [Example 18-4](#d3nobels_second_data_join) instantly sets
    the position of the relevant circles. What we now want to do is to animate this
    repositioning, smoothing it out over a couple of seconds.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，当用户选择新的数据集时，^([3](ch18.xhtml#idm45607742034720)) [示例 18-4](#d3nobels_second_data_join)
    中的更新模式立即设置相关圆的位置。现在我们要做的是动画化这种重新定位，使其在几秒钟内平稳过渡。
- en: Any user-driven filtering will either leave some existing indicators (e.g.,
    when we select only the Chemistry prizes from all categories), add some new ones
    (e.g., changing our category from Physics to Chemistry), or do both. An edge case
    is when the filtering leaves nothing (e.g., selecting female Economics winners).
    This means we need to decide what existing indicators should do and how to animate
    the positioning of new indicators.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 任何用户驱动的过滤都会留下一些现有的指示器（例如，当我们仅从所有类别中选择化学奖项时），添加一些新的指示器（例如，将我们的类别从物理学改变为化学学）或同时进行。一个特殊情况是当过滤器什么都不留下时（例如，选择女性经济学获奖者）。这意味着我们需要决定现有指示器应该做什么，以及如何动画化新指示器的定位。
- en: '[Figure 18-6](#d3nobels_transition_less) shows what we want to happen on selecting
    a subset of the existing data, in this case filtering all Nobel Prizes to include
    only those Physics winners. On the user’s selection of the Physics category, all
    indicators except the Physics ones are removed by the `exit` and `remove` methods.
    Meanwhile, the existing Physics indicators begin a two-second transition from
    their current position to an end position, dictated by their array index.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[图18-6](#d3nobels_transition_less)展示了我们在选择现有数据子集时希望发生的情况，在这种情况下，我们将所有诺贝尔奖限制为仅包括物理学获奖者。在用户选择物理学类别时，所有指示器除物理学指示器外都将通过`exit`和`remove`方法删除。与此同时，现有的物理学指示器开始从其当前位置开始进行为期两秒的过渡，结束位置由其数组索引决定。'
- en: '![dpj2 1806](assets/dpj2_1806.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1806](assets/dpj2_1806.png)'
- en: Figure 18-6\. Transition on selecting a subset of the existing data
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图18-6\. 选择现有数据子集时的过渡
- en: It may surprise you to discover that both these visual effects, moving existing
    bars smoothly into their new place and growing any new bars from the bottom of
    the chart, can be achieved by the addition of only two lines to our existing code.
    This is a big testimony to the power of D3’s data-joining concept and its mature
    design.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会惊讶地发现，通过向现有代码添加仅两行代码，即可实现这两种视觉效果：平滑移动现有条形图到其新位置以及从图表底部增加任何新条形图。这充分展示了D3数据连接概念和其成熟设计的强大力量。
- en: 'To achieve the required transitions, we add calls to `transition` and `duration`
    methods before setting the y position (*cy* attribute) of the circle marker. These
    smooth the repositioning of the circle, easing it in over two seconds (2000ms):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现所需的过渡效果，在设置圆形标记的y位置（*cy*属性）之前，我们在调用`transition`和`duration`方法。这些方法使圆形的重新定位平滑过渡，在两秒（2000ms）内缓慢进入：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO12-1)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO12-1)'
- en: Any new circles start at the bottom of the chart.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 任何新的圆形都从图表底部开始。
- en: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO12-2)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_visualizing_individual_prizes_CO12-2)'
- en: All circles are eased into their y position over a duration of 2000ms.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所有圆形在2000ms的持续时间内缓慢进入其y位置。
- en: As you can see, D3 makes it really easy to add cool visual effects to your data
    transitions. This is a testimony to its solid theoretical foundations. We now
    have our complete timeline chart, which transitions smoothly in response to data
    changes initiated by the user.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，D3使得在数据过渡中添加酷炫的视觉效果变得非常简单。这证明了其坚实的理论基础。我们现在拥有完整的时间线图表，它能够平滑过渡以响应用户启动的数据更改。
- en: Updating the Bar Chart
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新条形图
- en: 'When the time chart module is imported, it appends a callback function to the
    callbacks array in the core module. When data is updated in response to user interaction,
    this callback function is called and the time chart updated with new country data,
    nested by year:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间图表模块被导入时，它会将一个回调函数附加到核心模块中的回调数组中。当用户交互导致数据更新时，此回调函数被调用，并使用新的按年嵌套的国家数据更新时间图表：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO13-1)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_visualizing_individual_prizes_CO13-1)'
- en: This anonymous function is called in the core module when data is updated.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 此匿名函数在核心模块中在数据更新时调用。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Following on from the bar chart in [Chapter 17](ch17.xhtml#chapter_d3_intro),
    this chapter extended the update pattern, showing how to use a second data-join
    on nested data to create a novel chart. It’s important to emphasize that this
    ability to create novel visualizations is D3’s great strength: you are not tied
    to the particular functionality of a conventional charting library but can achieve
    unique transformations of your data. As our Nobel Prize bar chart showed, it’s
    easy to build conventional dynamic charts, but D3 allows for so much more.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 继续第17章中的条形图后，本章扩展了更新模式，展示了如何使用嵌套数据的第二次数据连接创建新的图表。重要的是强调，创建新颖可视化的能力是D3的巨大优势：您不仅限于传统图表库的特定功能，而可以实现数据的独特转换。正如我们的诺贝尔奖条形图所示，构建传统的动态图表非常简单，但D3允许更多。
- en: We also saw how easy it is to liven up your visualizations with engaging transformations
    once a solid update pattern is in place.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，一旦建立了稳定的更新模式，如何通过引人入胜的变换轻松激活您的可视化。
- en: In the next chapter, we will build the map component of our Nobel-viz using
    D3’s impressive topographic library.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用D3强大的地形库构建我们的Nobel-viz的地图组件。
- en: ^([1](ch18.xhtml#idm45607743508496-marker)) D3 has some handy brushes that make
    selecting portions of the x- or y-axis easy. Combined with transitions, this can
    make for an engaging and intuitive way to increase the resolution of large datasets.
    See [this *bl.ocks.org* page](https://oreil.ly/2Q0j7) for a good example.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch18.xhtml#idm45607743508496-marker)) D3提供了一些方便的画笔工具，可以轻松选择x轴或y轴的部分。结合过渡效果，这可以创建出一个引人入胜且直观的方式，提高大型数据集的分辨率。参见[这个*bl.ocks.org*页面](https://oreil.ly/2Q0j7)以获取一个很好的例子。
- en: ^([2](ch18.xhtml#idm45607742041664-marker)) As discussed in [“Transitions”](ch17.xhtml#sect_transitions),
    the visual transition from one dataset to another can be both informative and
    lend a sense of continuity to the visualization, making it more appealing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch18.xhtml#idm45607742041664-marker)) 正如在[“过渡”](ch17.xhtml#sect_transitions)中讨论的那样，从一个数据集到另一个的视觉过渡既具信息性又能增加可视化的连贯感，使其更具吸引力。
- en: ^([3](ch18.xhtml#idm45607742034720-marker)) For example, filtering the prizes
    by category to show only the Physics winners.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch18.xhtml#idm45607742034720-marker)) 例如，通过类别筛选奖项，只展示物理学奖获得者。
