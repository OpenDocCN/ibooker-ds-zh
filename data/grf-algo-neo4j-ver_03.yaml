- en: Chapter 2\. Graph Theory and Concepts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。图论与概念
- en: In this chapter, we set the framework and cover terminology for graph algorithms.
    The basics of graph theory are explained, with a focus on the concepts that are
    most relevant to a practitioner.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为图算法奠定了框架并介绍了术语。解释了图论的基础知识，重点放在对从业者最相关的概念上。
- en: We’ll describe how graphs are represented, and then explain the different types
    of graphs and their attributes. This will be important later, as our graph’s characteristics
    will inform our algorithm choices and help us interpret results. We’ll finish
    the chapter with an overview of the types of graph algorithms detailed in this
    book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将描述图的表示方式，然后解释不同类型的图及其属性。这将在稍后非常重要，因为我们的图的特性将指导我们的算法选择并帮助我们解释结果。我们将在本章结束时概述本书中详细介绍的图算法类型。
- en: Terminology
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语
- en: The labeled property graph is one of the most popular ways of modeling graph
    data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 标记属性图是建模图数据的最流行方式之一。
- en: 'A *label* marks a node as part of a group. In [Figure 2-1](#lpg), we have two
    groups of nodes: `Person` and `Car`. (Although in classic graph theory a label
    applies to a single node, it’s now commonly used to mean a node group.)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*标签*将节点标记为一个组的一部分。在[图 2-1](#lpg)中，我们有两组节点：`Person`和`Car`。（尽管在经典图论中标签适用于单个节点，但现在通常用于指代节点组。）'
- en: '![](Images/gral_0201.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0201.png)'
- en: Figure 2-1\. A labeled property graph model is a flexible and concise way of
    representing connected data.
  id: totrans-7
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-1。标记属性图模型是表示连接数据的灵活简洁的方式。
- en: Relationships are classified based on *relationship type*. Our example includes
    the relationship types of `DRIVES`, `OWNS`, `LIVES_WITH`, and `MARRIED_TO`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关系根据*关系类型*进行分类。我们的示例包括`DRIVES`、`OWNS`、`LIVES_WITH`和`MARRIED_TO`等关系类型。
- en: '*Properties* are synonymous with attributes and can contain a variety of data
    types, from numbers and strings to spatial and temporal data. In [Figure 2-1](#lpg)
    we assigned the properties as name-value pairs, where the name of the property
    comes first and then its value. For example, the `Person` node on the left has
    a property `name: "Dan"`, and the `MARRIED_TO` relationship has a property of
    `on: Jan 1, 2013`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*属性*与属性同义，可以包含各种数据类型，从数字和字符串到空间和时间数据。在[图 2-1](#lpg)中，我们将属性分配为名称-值对，其中属性的名称首先出现，然后是其值。例如，左侧的`Person`节点具有属性`name:
    "Dan"`，而`MARRIED_TO`关系具有属性`on: Jan 1, 2013`。'
- en: A *subgraph* is a graph within a larger graph. Subgraphs are useful as a filters
    such as when we need a subset with particular characteristics for focused analysis.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*子图*是大图中的一个图。子图对于需要特定特征子集的集中分析很有用。'
- en: A *path* is a group of nodes and their connecting relationships. An example
    of a simple path, based on [Figure 2-1](#lpg), could contain the nodes `Dan`,
    `Ann`, and `Car` and the `DRIVES` and `OWNS` relationships.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*路径*是一组节点及其连接关系。根据[图 2-1](#lpg)，一个简单路径的示例可以包含节点`Dan`、`Ann`和`Car`以及`DRIVES`和`OWNS`关系。'
- en: Graphs vary in type, shape, and size as well the kind of attributes that can
    be used for analysis. Next, we’ll describe the kinds of graphs most suited for
    graph algorithms. Keep in mind that these explanations apply to graphs as well
    as subgraphs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图的类型、形状和大小以及用于分析的属性种类各异。接下来，我们将描述最适合图算法的图类型。请注意，这些解释适用于图及其子图。
- en: Graph Types and Structures
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图类型与结构
- en: In classic graph theory, the term *graph* is equated with a *simple* (or *strict*)
    graph where nodes only have one relationship between them, as shown on the left
    side of [Figure 2-2](#basic-graph-types). Most real-world graphs, however, have
    many relationships between nodes and even self-referencing relationships. Today,
    this term is commonly used for all three graph types in [Figure 2-2](#basic-graph-types),
    so we also use the term inclusively.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典图论中，术语*图*等同于*简单*（或*严格*）图，其中节点之间只有一种关系，如[图 2-2](#basic-graph-types)左侧所示。然而，大多数现实世界的图具有许多节点之间的关系，甚至有自引用关系。如今，该术语通常用于[图 2-2](#basic-graph-types)中的所有三种图类型，因此我们也包容性地使用此术语。
- en: '![](Images/gral_0202.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0202.png)'
- en: Figure 2-2\. In this book, we use the term graph to include any of these classic
    types of graphs.
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-2。在本书中，我们使用术语图来包括任何这些经典类型的图。
- en: Random, Small-World, Scale-Free Structures
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机、小世界、无标度结构
- en: 'Graphs take on many shapes. [Figure 2-3](#network-structure-examples) shows
    three representative network types:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图形具有多种形状。[图 2-3](#network-structure-examples)显示了三种典型的网络类型：
- en: Random networks
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机网络
- en: Small-world networks
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小世界网络
- en: Scale-free networks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无标度网络
- en: '![](Images/gral_0203.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0203.png)'
- en: Figure 2-3\. Three network structures with distinctive graphs and behaviors
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-3\. 具有独特图形和行为的三种网络结构
- en: In a completely average distribution of connections, a *random network* is formed
    with no hierarchies. This type of shapeless graph is “flat” with no discernible
    patterns. All nodes have the same probability of being attached to any other node.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在连接完全平均分布的情况下，将形成一个 *随机网络*，没有等级制度。这种没有形状的图形是“平坦的”，没有明显的模式。所有节点有相同的连接概率。
- en: A *small-world network* is extremely common in social networks; it shows localized
    connections and some hub-and-spoke pattern. The [“Six Degrees of Kevin Bacon”](https://bit.ly/2FAbVk8)
    game might be the best-known example of the small-world effect. Although you associate
    mostly with a small group of friends, you’re never many hops away from anyone
    else—even if they are a famous actor or on the other side of the planet.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*小世界网络* 在社交网络中非常普遍；它展示了本地化的连接和一些中心枢纽模式。[“六度分隔理论”](https://bit.ly/2FAbVk8) 游戏可能是最著名的小世界效应例子。尽管你主要与一小群朋友交往，但与任何其他人之间的距离从未超过几步，即使他们是著名演员或者住在地球另一边。'
- en: A *scale-free network* is produced when there are power-law distributions and
    a hub-and-spoke architecture is preserved regardless of scale, such as in the
    World Wide Web.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *无标度网络* 是指在存在幂律分布的情况下，无论规模如何，保留了中心枢纽结构的网络，例如全球网络（World Wide Web）。
- en: These network types produce graphs with distinctive structures, distributions,
    and behaviors. As we work with graph algorithms, we’ll come to recognize similar
    patterns in our results.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些网络类型生成具有独特结构、分布和行为的图形。当我们使用图算法时，我们将开始识别结果中的相似模式。
- en: Flavors of Graphs
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图的类型
- en: To get the most out of graph algorithms, it’s important to familiarize ourselves
    with the most characteristic graphs we’ll encounter. [Table 2-1](#summary-of-graph-type)
    summarizes common graph attributes. In the following sections we look at the different
    flavors in more detail.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用图算法，熟悉我们可能遇到的最典型的图形是非常重要的。[表 2-1](#summary-of-graph-type) 总结了常见的图属性。在接下来的部分中，我们将更详细地研究不同的图类型。
- en: Table 2-1\. Common attributes of graphs
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1\. 图的常见属性
- en: '| Graph attribute | Key factor | Algorithm consideration |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 图属性 | 关键因素 | 算法考虑因素 |'
- en: '| --- | --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Connected versus disconnected | Whether there is a path between any two nodes
    in the graph, irrespective of distance | Islands of nodes can cause unexpected
    behavior, such as getting stuck in or failing to process disconnected components.
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 连通与非连通 | 图中任意两个节点之间是否存在路径，无论距离如何 | 节点的孤岛可能导致意外行为，例如陷入或无法处理断开的组件。'
- en: '| Weighted versus unweighted | Whether there are (domain-specific) values on
    relationships or nodes | Many algorithms expect weights, and we’ll see significant
    differences in performance and results when they’re ignored. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 带权重与无权重 | 关系或节点是否具有（特定领域的）数值 | 许多算法期望有权重，当忽略它们时，我们会看到性能和结果上的显著差异。 |'
- en: '| Directed versus undirected | Whether or not relationships explicitly define
    a start and end node | This adds rich context to infer additional meaning. In
    some algorithms you can explicitly set the use of one, both, or no direction.
    |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 有向与无向 | 关系是否明确定义了起始和结束节点 | 这增加了推断附加含义的丰富上下文。在某些算法中，您可以明确设置使用一个、两个或没有方向。 |'
- en: '| Cyclic versus acyclic | Whether paths start and end at the same node | Cyclic
    graphs are common but algorithms must be careful (typically by storing traversal
    state) or cycles may prevent termination. Acyclic graphs (or spanning trees) are
    the basis for many graph algorithms. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 循环与非循环 | 路径是否从同一节点开始和结束 | 循环图很常见，但算法必须小心（通常通过存储遍历状态），否则循环可能导致无法终止。非循环图（或生成树）是许多图算法的基础。
    |'
- en: '| Sparse versus dense | Relationship to node ratio | Extremely dense or extremely
    sparsely connected graphs can cause divergent results. Data modeling may help,
    assuming the domain is not inherently dense or sparse. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 稀疏与稠密 | 关系与节点的比例 | 极度稠密或极度稀疏连接的图可能导致分歧结果。数据建模可能有助于处理，假设领域本身不是固有稠密或稀疏的。 |'
- en: '| Monopartite, bipartite, and *k*-partite | Whether nodes connect to only one
    other node type (e.g., users like movies) or many other node types (e.g., users
    like users who like movies) | Helpful for creating relationships to analyze and
    projecting more useful graphs. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 单分图、二分图和*k*分图 | 节点是连接到只一种其他节点类型（例如，用户喜欢电影）还是多种其他节点类型（例如，用户喜欢喜欢电影的用户） | 有助于创建关系以分析和预测更有用的图形。
    |'
- en: Connected Versus Disconnected Graphs
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连通图与断开连接的图
- en: A graph is connected if there is a path between all nodes. If we have islands
    in our graph, it’s disconnected. If the nodes in those islands are connected,
    they are called *components* (or sometimes *clusters*), as shown in [Figure 2-4](#connected-disconnected).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有节点之间都有路径，那么图就是连通的。如果我们的图中有孤立部分，它就是断开连接的。如果这些孤立部分中的节点是连接的，则称为*分量*（有时也称为*集群*），如图 2-4
    所示。
- en: '![](Images/gral_0204.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0204.png)'
- en: Figure 2-4\. If we have islands in our graph, it’s a disconnected graph.
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-4。如果我们的图中有孤立的部分，那么它就是一个断开连接的图。
- en: Some algorithms struggle with disconnected graphs and can produce misleading
    results. If we have unexpected results, checking the structure of our graph is
    a good first step.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一些算法在处理断开连接的图时可能会产生误导性的结果。如果我们遇到意外的结果，检查图的结构是一个很好的第一步。
- en: Unweighted Graphs Versus Weighted Graphs
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未加权图与加权图的比较
- en: Unweighted graphs have no weight values assigned to their nodes or relationships.
    For weighted graphs, these values can represent a variety of measures such as
    cost, time, distance, capacity, or even a domain-specific prioritization. [Figure 2-5](#weighted-unweighted)
    visualizes the difference.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 未加权图没有为其节点或关系分配权值。对于加权图，这些值可以表示各种度量，如成本、时间、距离、容量，甚至是特定领域的优先级。[图 2-5](#weighted-unweighted)
    可视化了它们之间的区别。
- en: '![](Images/gral_0205.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0205.png)'
- en: Figure 2-5\. Weighted graphs can hold values on relationships or nodes.
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-5。加权图可以在关系或节点上保存值。
- en: Basic graph algorithms can use weights for processing as a representation for
    the strength or value of relationships. Many algorithms compute metrics which
    can then be used as weights for follow-up processing. Some algorithms update weight
    values as they proceed to find cumulative totals, lowest values, or optimums.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基本图算法可以使用权重进行处理，作为关系强度或价值的表示。许多算法计算度量，然后可以用作后续处理的权重。某些算法在进行过程中更新权重值，以找到累计总数、最低值或最优解。
- en: A classic use for weighted graphs is in pathfinding algorithms. Such algorithms
    underpin the mapping applications on our phones and compute the shortest/cheapest/fastest
    transport routes between locations. For example, [Figure 2-6](#weighted-shortest-path)
    uses two different methods of computing the shortest route.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 加权图的经典用途是路径查找算法。这些算法支持我们手机上的地图应用程序，并计算位置之间的最短/最便宜/最快的交通路线。例如，图 2-6 使用了两种不同的计算最短路径的方法。
- en: '![](Images/gral_0206.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0206.png)'
- en: Figure 2-6\. The shortest paths can vary for otherwise identical unweighted
    and weighted graphs.
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-6。未加权和加权图的最短路径可能会有所不同，尽管它们在其他方面是相同的。
- en: Without weights, our shortest route is calculated in terms of the number of
    relationships (commonly called *hops*). A and E have a two-hop shortest path,
    which indicates only one node (D) between them. However, the shortest weighted
    path from A to E takes us from A to C to D to E. If weights represent a physical
    distance in kilometers, the total distance would be 50 km. In this case, the shortest
    path in terms of the number of hops would equate to a longer physical route of
    70 km.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 没有权重时，我们的最短路径是根据关系的数量计算的（通常称为*跳数*）。从 A 到 E 有一条两跳最短路径，这意味着它们之间只有一个节点（D）。然而，从
    A 到 E 的最短加权路径是经过 A 到 C 到 D 到 E。如果权重代表公里数的物理距离，则总距离将是 50 公里。在这种情况下，根据跳数计算的最短路径将等于
    70 公里的较长物理路径。
- en: Undirected Graphs Versus Directed Graphs
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无向图与有向图的比较
- en: In an undirected graph, relationships are considered bidirectional (for example,
    friendships). In a directed graph, relationships have a specific direction. Relationships
    pointing to a node are referred to as *in-links* and, unsurprisingly, *out-links*
    are those originating from a node.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在无向图中，关系被视为双向的（例如，友谊）。在有向图中，关系具有特定方向。指向节点的关系称为*入链*，而从节点发出的关系称为*出链*。
- en: Direction adds another dimension of information. Relationships of the same type
    but in opposing directions carry different semantic meaning, expressing a dependency
    or indicating a flow. This may then be used as an indicator of credibility or
    group strength. Personal preferences and social relations are expressed very well
    with direction.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 方向增加了信息的另一个维度。相同类型的但是方向相反的关系承载不同的语义意义，表达依赖性或指示流向。这可能被用作可信度或群体强度的指标。个人偏好和社会关系通过方向得到了很好的表达。
- en: For example, if we assumed in [Figure 2-7](#directed-undirected) that the directed
    graph was a network of students and the relationships were “likes,” then we’d
    calculate that A and C are more popular.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们假设在 [图 2-7](#directed-undirected) 中，有向图是学生网络，关系是“喜欢”，那么我们会计算出A和C更受欢迎。
- en: '![](Images/gral_0207.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0207.png)'
- en: Figure 2-7\. Many algorithms allow us to compute on the basis of only inbound
    or outbound connections, both directions, or without direction.
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-7\. 许多算法允许我们根据只有入站或出站连接、双向连接或无方向来计算。
- en: Road networks illustrate why we might want to use both types of graphs. For
    example, highways between cities are often traveled in both directions. However,
    within cities, some roads are one-way streets. (The same is true for some information
    flows!)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 道路网络说明了为什么我们可能需要同时使用这两种类型的图。例如，城市间的高速公路通常是双向的。然而，在城市内部，有些道路是单行道。（对某些信息流也是如此！）
- en: We get different results running algorithms in an undirected fashion compared
    to directed. In an undirected graph, for example for highways or friendships,
    we would assume all relationships always go both ways.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在无向图中以无方向方式运行算法与有向方式得到了不同的结果。例如对于高速公路或友谊，我们会假设所有关系都是双向的。
- en: If we reimagine [Figure 2-7](#directed-undirected) as a directed road network,
    you can drive to A from C and D but you can only leave through C. Furthermore
    if there were no relationships from A to C, that would indicate a dead end. Perhaps
    that’s less likely for a one-way road network, but not for a process or a web
    page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把 [图 2-7](#directed-undirected) 想象成一个有向道路网络，你可以从C和D驾驶到A，但只能通过C离开。此外，如果从A到C没有关系，那将指示一个死胡同。也许对于单向道路网络来说，这种情况不太可能发生，但对于流程或网页来说就不一定了。
- en: Acyclic Graphs Versus Cyclic Graphs
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无循环图与循环图
- en: In graph theory, *cycles* are paths through relationships and nodes that start
    and end at the same node. An *acyclic graph* has no such cycles. As shown in [Figure 2-8](#cyclic-acyclic),
    both directed and undirected graphs can have cycles, but when directed, paths
    follow the relationship direction. A *directed acyclic graph* (DAG), shown in
    Graph 1, will by definition always have dead ends (also called *leaf nodes*).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论中，*循环*是通过关系和节点之间的路径，并以相同节点开始和结束的路径。一个*无循环图*没有这样的循环。如图 [图 2-8](#cyclic-acyclic)
    所示，有向图和无向图都可以有循环，但在有向图中，路径遵循关系的方向。一个*有向无环图*（DAG），如图1所示，按定义总是有死胡同（也称为*叶节点*）。
- en: '![](Images/gral_0208.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0208.png)'
- en: Figure 2-8\. In acyclic graphs, it’s impossible to start and end on the same
    node without retracing our steps.
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2-8\. 在无循环图中，不可能在不重复走步骤的情况下从一个节点开始并结束。
- en: Graphs 1 and 2 have no cycles, as there’s no way to start and end at the same
    node without repeating a relationship. You might remember from [Chapter 1](ch01.xhtml#introduction_chapter)
    that not repeating relationships was the Königsberg bridges problem that started
    graph theory! Graph 3 in [Figure 2-8](#cyclic-acyclic) shows a simple cycle following
    A-D-C-A with no repeated nodes. In Graph 4, the undirected cyclic graph has been
    made more interesting by adding a node and relationship. There’s now a closed
    cycle with a repeated node (C), following B-F-C-D-A-C-B. There are actually multiple
    cycles in Graph 4.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图1和图2没有循环，因为没有办法在没有重复关系的情况下从一个节点开始并结束。你可能还记得[第1章](ch01.xhtml#introduction_chapter)中提到的不重复关系问题，这启发了图论的起源！图3在
    [图 2-8](#cyclic-acyclic) 中展示了一个简单的循环，按照A-D-C-A的路径，没有重复的节点。在图4中，通过添加节点和关系使无向循环图变得更有趣。现在有一个闭合循环，有一个重复的节点（C），按照B-F-C-D-A-C-B的路径。实际上，图4中有多个循环。
- en: Cycles are common, and we sometimes need to convert cyclic graphs to acyclic
    graphs (by cutting relationships) to eliminate processing problems. Directed acyclic
    graphs naturally arise in scheduling, genealogy, and version histories.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 循环很常见，有时我们需要将循环图转换为无循环图（通过切断关系）以消除处理问题。有向无环图在调度、家谱和版本历史中自然而然地出现。
- en: Trees
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树
- en: In classic graph theory, an acyclic graph that is undirected is called a *tree*.
    In computer science, trees can also be directed. A more inclusive definition would
    be a graph where any two nodes are connected by only one path. Trees are significant
    for understanding graph structures and many algorithms. They play a key role in
    designing networks, data structures, and search optimizations to improve categorization
    or organizational hierarchies.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在经典图论中，一个无向无环图称为*树*。在计算机科学中，树也可以是有向的。更广泛的定义是，任何两个节点之间仅有一条路径连接的图。树对于理解图结构和许多算法至关重要。它们在设计网络、数据结构和搜索优化方面起着关键作用，以改善分类或组织层次结构。
- en: Much has been written about trees and their variations. [Figure 2-9](#trees)
    illustrates the common trees that we’re likely to encounter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 树及其变体已被广泛讨论。 [图 2-9](#trees) 展示了我们可能会遇到的常见树形结构。
- en: '![](Images/gral_0209.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0209.png)'
- en: Figure 2-9\. Of these prototypical tree graphs, spanning trees are most often
    used for graph algorithms.
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-9\. 在这些典型的树图中，生成树在图算法中被最频繁使用。
- en: Of these variations, spanning trees are the most relevant for this book. A *spanning
    tree* is a subgraph that includes all the nodes of a larger acyclic graph but
    not all the relationships. A minimum spanning tree connects all the nodes of a
    graph with either the least number of hops or least weighted paths.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些变体中，生成树对本书最为相关。*生成树*是一个子图，包含了更大的无环图的所有节点，但不包含所有关系。最小生成树用最少的跳数或最小权重路径连接图的所有节点。
- en: Sparse Graphs Versus Dense Graphs
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏图与密集图
- en: The sparsity of a graph is based on the number of relationships it has compared
    to the maximum possible number of relationships, which would occur if there was
    a relationship between every pair of nodes. A graph where every node has a relationship
    with every other node is called a *complete graph*, or a *clique* for components.
    For instance, if all my friends knew each other, that would be a clique.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图的稀疏性是基于它的关系数量与可能的最大关系数量进行比较的，如果每对节点之间都有关系，则会发生最大的可能关系。每个节点与每个其他节点都有关系的图称为*完全图*，或者是组件的*团*。例如，如果我所有的朋友彼此认识，那就是一个团。
- en: The *maximum density* of a graph is the number of relationships possible in
    a complete graph. It’s calculated with the formula <math><mrow><mi>M</mi> <mi>a</mi>
    <mi>x</mi> <mi>D</mi> <mo>=</mo> <mfrac><mrow><mi>N</mi><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo></mrow>
    <mn>2</mn></mfrac></mrow></math> where *N* is the number of nodes. To measure
    *actual density* we use the formula <math><mrow><mi>D</mi> <mo>=</mo> <mfrac><mrow><mn>2</mn><mo>(</mo><mi>R</mi><mo>)</mo></mrow>
    <mrow><mi>N</mi><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo></mrow></mfrac></mrow></math>
    where *R* is the number of relationships. In [Figure 2-10](#sparse-dense), we
    can see three measures of actual density for undirected graphs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图的*最大密度*是完全图中可能的关系数。它用公式 <math><mrow><mi>M</mi> <mi>a</mi> <mi>x</mi> <mi>D</mi>
    <mo>=</mo> <mfrac><mrow><mi>N</mi><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo></mrow>
    <mn>2</mn></mfrac></mrow></math> 计算，其中 *N* 是节点数。为了测量*实际密度*，我们使用公式 <math><mrow><mi>D</mi>
    <mo>=</mo> <mfrac><mrow><mn>2</mn><mo>(</mo><mi>R</mi><mo>)</mo></mrow> <mrow><mi>N</mi><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo></mrow></mfrac></mrow></math>，其中
    *R* 是关系数。在 [图 2-10](#sparse-dense) 中，我们可以看到用于无向图的三种实际密度测量。
- en: '![](Images/gral_0210.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0210.png)'
- en: Figure 2-10\. Checking the density of a graph can help you evaluate unexpected
    results.
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-10\. 检查图的密度可以帮助您评估意外结果。
- en: Although there is no strict dividing line, any graph with an actual density
    that approaches the maximum density is considered dense. Most graphs based on
    real networks tend toward sparseness, with an approximately linear correlation
    of total nodes to total relationships. This is especially the case where physical
    elements come into play, such as the practical limitations to how many wires,
    pipes, roads, or friendships you can join at one point.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有严格的分界线，但是任何实际密度接近最大密度的图被认为是密集的。基于真实网络的大多数图往往趋向于稀疏，总节点数与总关系数之间大致呈线性相关。特别是当涉及到物理元素时，例如在一个点上可以连接的电线、管道、道路或友谊的实际限制。
- en: Some algorithms will return nonsensical results when executed on extremely sparse
    or dense graphs. If a graph is too sparse there may not be enough relationships
    for algorithms to compute useful results. Alternatively, very densely connected
    nodes don’t add much additional information since they are so highly connected.
    High densities can also skew some results or add computational complexity. In
    these situations, filtering out the relevant subgraph is a practical approach.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在极其稀疏或稠密的图上执行某些算法可能会返回荒谬的结果。如果图太稀疏，算法可能找不到足够的关系来计算有用的结果。另一方面，非常密集连接的节点并不会增加太多额外信息，因为它们已经高度连接了。高密度也可能会扭曲某些结果或增加计算复杂性。在这些情况下，过滤出相关的子图是一个实际的方法。
- en: Monopartite, Bipartite, and k-Partite Graphs
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单分图、二分图和k-分图
- en: Most networks contain data with multiple node and relationship types. Graph
    algorithms, however, frequently consider only one node type and one relationship
    type. Graphs with one node type and relationship type are sometimes referred to
    as *monopartite.*
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网络包含多种节点和关系类型的数据。然而，图算法通常只考虑一种节点类型和一种关系类型。只有一种节点类型和一种关系类型的图有时被称为*单分图*。
- en: 'A *bipartite* graph is a graph whose nodes can be divided into two sets, such
    that relationships only connect a node from one set to a node from a different
    set. [Figure 2-11](#bipartite) shows an example of such a graph. It has two sets
    of nodes: a viewer set and a TV show set. There are only relationships between
    the two sets and no intraset connections. In other words in Graph 1, TV shows
    are only related to viewers, not other TV shows, and viewers are likewise not
    directly linked to other viewers.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*二分图*是一种图，其节点可以分为两组，使得关系仅连接一组中的节点到另一组中的节点。[图2-11](#bipartite)展示了这样一个图的例子。它有两组节点：一个观众组和一个电视节目组。两组之间只有关系，没有组内连接。换句话说，在图1中，电视节目仅与观众相关联，而不与其他电视节目相关联，观众同样也不直接连接到其他观众。'
- en: 'Starting from our bipartite graph of viewers and TV shows, we created two monopartite
    projections: Graph 2 of viewer connections based on shows in common, and Graph
    3 of TV shows based on viewers in common. We can also filter based on relationship
    type, such as watched, rated, or reviewed.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的观众和电视节目的二分图开始，我们创建了两个单分图的投影：图2是基于共同观看的节目的观众连接，图3是基于共同观众的电视节目。我们还可以根据关系类型（如观看、评分或评论）进行过滤。
- en: Projecting monopartite graphs with inferred connections is an important part
    of graph analysis. These types of projections help uncover indirect relationships
    and qualities. For example, in Graph 2 in [Figure 2-11](#bipartite), Bev and Ann
    have watched only one TV show in common whereas Bev and Evan have two shows in
    common. In Graph 3 we’ve weighted the relationships between the TV shows by the
    aggregated views by viewers in common. This, or other metrics such as similarity,
    can be used to infer meaning between activities like watching *Battlestar Galactica*
    and *Firefly*. That can inform our recommendation for someone similar to Evan
    who, in [Figure 2-11](#bipartite), just finished watching the last episode of
    *Firefly*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过推断的连接投影单分图是图分析的重要部分。这些投影类型有助于揭示间接的关系和特征。例如，在图2中的[图2-11](#bipartite)，Bev和Ann只共同观看了一个电视节目，而Bev和Evan共同观看了两个节目。在图3中，我们根据共同观众的聚合观看次数加权了电视节目之间的关系。这种或其他类似的度量（如相似度）可以用来推断像观看*Battlestar
    Galactica*和*Firefly*这样的活动之间的意义。这可以为类似Evan的人提供建议，他在[图2-11](#bipartite)中刚看完了*Firefly*的最后一集。
- en: '*k-partite* graphs reference the number of node types our data has (*k*). For
    example, if we have three node types, we’d have a tripartite graph. This just
    extends bipartite and monopartite concepts to account for more node types. Many
    real-world graphs, especially knowledge graphs, have a large value for k, as they
    combine many different concepts and types of information. An example of using
    a larger number of node types is creating new recipes by mapping a recipe set
    to an ingredient set to a chemical compound, and then deducing new mixes that
    connect popular preferences. We could also reduce the number of nodes types by
    generalization, such as treating many forms of a node, like spinach or collards,
    as just “leafy greens.”'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*k-分图* 引用数据中节点类型数量（*k*）。例如，如果我们有三种节点类型，我们将会有一个三分图。这仅仅是将双分图和单分图的概念扩展到更多节点类型的情况。许多现实世界的图，特别是知识图谱，具有较大的*k*值，因为它们结合了许多不同的概念和信息类型。一个使用更多节点类型的示例是通过将一个食谱集映射到一个成分集和一个化学化合物，推断连接流行偏好的新混合物。我们也可以通过泛化来减少节点类型的数量，比如将菠菜或羽衣甘蓝等许多形式的节点视为“绿叶蔬菜”。'
- en: Now that we’ve reviewed the types of graphs we’re most likely to work with,
    let’s learn about the types of graph algorithms we’ll execute on those graphs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了我们最有可能处理的图的类型，让我们学习我们将在这些图上执行的图算法类型。
- en: '![](Images/gral_0211.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/gral_0211.png)'
- en: Figure 2-11\. Bipartite graphs are often projected to monopartite graphs for
    more specific analysis.
  id: totrans-89
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2-11\. 双分图经常被投影到单分图中进行更具体的分析。
- en: Types of Graph Algorithms
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图算法的类型
- en: Let’s look into the three areas of analysis that are at the heart of graph algorithms.
    These categories correspond to the chapters on algorithms for pathfinding and
    search, centrality computation, and community detection.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入研究图算法核心的三个分析领域。这些类别对应于路径查找和搜索、中心性计算以及社区检测的章节。
- en: Pathfinding
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻路
- en: Paths are fundamental to graph analytics and algorithms, so this is where we’ll
    start our chapters with specific algorithm examples. Finding shortest paths is
    probably the most frequent task performed with graph algorithms and is a precursor
    for several different types of analysis. The shortest path is the traversal route
    with the fewest hops or lowest weight. If the graph is directed, then it’s the
    shortest path between two nodes as allowed by the relationship directions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 路径对于图分析和算法至关重要，因此我们将以特定的算法示例开始我们的章节。寻找最短路径可能是使用图算法执行的最频繁任务，并且是几种不同类型分析的前提条件。最短路径是具有最少跳数或最低权重的遍历路线。如果图是有向的，那么它是两个节点之间的最短路径，符合关系方向。
- en: Centrality
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中心性
- en: Centrality is all about understanding which nodes are more important in a network.
    But what do we mean by importance? There are different types of centrality algorithms
    created to measure different things, such as the ability to quickly spread information
    versus bridging distinct groups. In this book, we’ll focus on how nodes and relationships
    are structured.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 中心性是了解网络中哪些节点更重要的一切。但我们所说的重要性是什么意思？有不同类型的中心性算法用于衡量不同的事物，比如快速传播信息的能力与桥接不同群体的能力。在本书中，我们将专注于节点和关系的结构化方式。
- en: Community Detection
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区检测
- en: Connectedness is a core concept of graph theory that enables a sophisticated
    network analysis such as finding communities. Most real-world networks exhibit
    substructures (often quasi-fractal) of more or less independent subgraphs.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 连通性是图论的核心概念，它使得复杂网络分析如查找社区成为可能。大多数现实世界的网络展现出更或少独立子图的亚结构（通常是准分形）。
- en: Connectivity is used to find communities and quantify the quality of groupings.
    Evaluating different types of communities within a graph can uncover structures,
    like hubs and hierarchies, and tendencies of groups to attract or repel others.
    These techniques are used to study emergent phenomena such as those that lead
    to echo chambers and filter bubble effects.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 连通性用于查找社区并量化组群的质量。评估图内不同类型的社区可以揭示结构，如枢纽和等级制，以及群体吸引或排斥其他群体的倾向。这些技术用于研究导致回声室和过滤泡效应等新兴现象。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Graphs are intuitive. They align with how we think about and draw systems. The
    primary tenets of working with graphs can be quickly assimilated once we’ve unraveled
    some of the terminology and layers. In this chapter we’ve explained the ideas
    and expressions used later in this book and described flavors of graphs you’ll
    come across.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是直观的。它们符合我们对系统的思考和绘制方式。一旦我们揭开了一些术语和层次的面纱，就可以迅速吸收使用图表的主要原则。在本章中，我们已经解释了后续书籍中使用的思想和表达，并描述了你将遇到的各种图表类型。
- en: Next, we’ll look at graph processing and types of analysis before diving into
    how to use graph algorithms in Apache Spark and Neo4j.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下图表处理和分析类型，然后深入讨论如何在Apache Spark和Neo4j中使用图算法。
