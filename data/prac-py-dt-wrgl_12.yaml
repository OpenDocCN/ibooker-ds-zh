- en: Appendix A. More Python Programming Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 更多 Python 编程资源
- en: As this book has hopefully illustrated, Python is a robust and flexible programming
    language, with a wide range of applications. While I’ve introduced many key concepts
    and popular libraries in the preceding chapters, I’ve created this appendix to
    provide you with some helpful resources and references for taking your Python
    work to the next level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本书希望揭示的那样，Python 是一种强大而灵活的编程语言，具有广泛的应用。虽然在前几章中我介绍了许多关键概念和流行库，但我创建了这个附录，为你提供一些有用的资源和参考资料，帮助你将
    Python 工作提升到更高水平。
- en: Official Python Documentation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 官方 Python 文档
- en: Yes, there are always search engines and [StackOverflow](https://stackoverflow.com/questions/tagged/python),
    but there’s value in getting comfortable reading official documentation—whether
    it’s for the Python language or for popular libraries like `pandas`, `matplotlib`,
    or `seaborn`. Though I wouldn’t suggest you sit down and read *any* programming
    documentation end to end, looking through the parameters and options of a data
    type or function you want to use can give you a better sense of what (in general)
    can be done with it, as well as an idea of how its mechanisms are organized. This
    can be especially helpful when you want to do something completely new, because
    it will give you an idea of where to look for paths forward.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，总是有搜索引擎和[StackOverflow](https://stackoverflow.com/questions/tagged/python)，但习惯阅读官方文档确实有其价值
    — 无论是针对 Python 语言还是流行的库如 `pandas`、`matplotlib` 或 `seaborn`。虽然我不建议你坐下来逐页阅读 *任何*
    编程文档，但浏览你想要使用的数据类型或函数的参数和选项，可以让你更好地理解它（通常）可以做什么，以及其机制如何组织。当你想做全新的事情时，这尤其有帮助，因为它会指引你寻找前进的路径。
- en: For example, I knew when I started writing this book that `seaborn` and `pandas`
    were both built on top of `matplotlib`, and I had done some hacking around with
    making and customizing graphics with both of them. It wasn’t until I was looking
    through the latter’s documentation, however, that I came to understand the difference
    between the `figure` and `axes` objects that I so often saw referenced in example
    code, and that understanding helped me find solutions more quickly as I experimented
    with ways to more fully customize my visualizations. Almost as important, official
    documentation is generally kept up to date, while it’s not uncommon for the most
    popular forum posts about a topic to be months or even years old—meaning that
    the advice they include can sometimes be woefully out of date.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我在写这本书时就知道 `seaborn` 和 `pandas` 都是基于 `matplotlib` 构建的，我也曾尝试通过它们来制作和定制图形。然而，直到我仔细查阅后者的文档时，我才明白我经常在示例代码中看到的
    `figure` 和 `axes` 对象之间的区别，这种理解帮助我在实验不同方式全面定制可视化时更快地找到解决方案。几乎同样重要的是，官方文档通常保持更新，而关于某个主题的最流行论坛帖子往往可以过时数月甚至数年
    — 这意味着它们中包含的建议有时可能已经大大过时。
- en: I also recommend regularly turning to the [Python Standard Library](https://docs.python.org/3/library/index.html)
    because you might be surprised by how much built-in functionality it offers. Many
    of the methods you may recognize from working with libraries are built on top
    of (or to mimic) functions that exist in “vanilla” Python. And while libraries
    are often unique and useful, there are no guarantees that they will continue to
    be developed or maintained. If you can get the functionality you need by working
    with “plain” Python, the less likely it is that you’ll find your code going out
    of date because it relies on a library that is no longer being updated.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议定期查阅[Python 标准库](https://docs.python.org/3/library/index.html)，因为你可能会惊讶于它提供的大量内置功能。你在使用库时熟悉的许多方法都是基于（或模仿）存在于“纯”
    Python 中的函数。虽然库通常是独特和有用的，但并不能保证它们会继续开发或维护。如果你可以通过使用“纯” Python 获得所需的功能，那么你的代码依赖于不再更新的库的风险就越小。
- en: Installing Python Resources
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python 资源
- en: 'There are a lot of ways to install Python packages, depending on your programming
    environment. Whether you’re using Homebrew on macOS, working on a Windows machine,
    or using Colab, the most reliable way to install Python packages [will pretty
    much always be to use some version of `pip`](https://packaging.python.org/tutorials/installing-packages).
    In fact, you can even use `pip` to install a package on a Google Colab notebook
    (if you manage to find one that isn’t already installed) [using the following
    syntax](https://colab.research.google.com/notebooks/snippets/importing_libraries.ipynb):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的编程环境，有很多种方法可以安装 Python 包。无论你是在 macOS 上使用 Homebrew，还是在 Windows 机器上工作，或者使用
    Colab，安装 Python 包的最可靠方法[几乎总是使用某个版本的 `pip`](https://packaging.python.org/tutorials/installing-packages)。事实上，你甚至可以使用
    `pip` 在 Google Colab 笔记本上安装包（如果你找到了尚未安装的包）[使用以下语法](https://colab.research.google.com/notebooks/snippets/importing_libraries.ipynb)：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Whatever you choose, however, I suggest you make your choice and stick to it—things
    can get pretty unpredictable if you start using multiple tools to install and
    update your Python environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择什么，我建议你做出选择并坚持下去——如果你开始使用多个工具来安装和更新你的 Python 环境，事情可能会变得非常不可预测。
- en: Where to Look for Libraries
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找库的位置
- en: For the most part, I recommend that you install Python packages that are available
    on the [Python Package Index](https://pypi.org), also known as PyPI. PyPI has
    a clean structure and a robust tagging and search interface that make it easy
    to locate useful Python packages, and the fact that PyPI package documentation
    (usually) has a standard layout (as shown in [Figure A-1](#pypi_docs_example))
    will really start to save you time if you’re looking through lots of options.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分情况下，我建议你安装那些在[Python Package Index](https://pypi.org)（也称为 PyPI）上可用的 Python
    包。 PyPI 有清晰的结构和强大的标签和搜索界面，使得查找有用的 Python 包变得很容易，而且PyPI 包的文档通常具有标准的布局（如[图 A-1](#pypi_docs_example)所示），如果你要浏览大量选项，这将极大地节省你的时间。
- en: Some projects (like Beautiful Soup `lxml`) may still keep much of their documentation
    in a standalone location, but their PyPI page will typically still contain a helpful
    summary of what the project does and even some getting-started tips. One of the
    things I personally like to look at is the “Release History” section, which shows
    when the project was first created, as well as how often and how recently the
    package was updated. Longevity is, of course, not a perfect metric for evaluating
    how reliable a given package is likely to be—since anyone can publish Python packages
    (and add them to PyPI)—but the ones that have been around longer and/or are updated
    more frequently (and recently) are usually a good place to start.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目（如 Beautiful Soup `lxml`）可能仍然将大部分文档保存在独立的位置，但它们的 PyPI 页面通常仍然包含项目功能的有益摘要，甚至一些入门提示。我个人喜欢看的其中一件事是“发布历史”部分，显示项目的首次创建时间，以及包的更新频率和最近更新时间。当然，项目的长期存在并不是评估给定包可靠性的完美指标——因为任何人都可以发布
    Python 包（并将其添加到 PyPI 中）——但那些存在时间较长和/或最近更新频繁的包通常是一个很好的起点。
- en: '![Example PyPI package landing page.](assets/ppdw_aa01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![示例 PyPI 包页面。](assets/ppdw_aa01.png)'
- en: Figure A-1\. Example PyPI package landing page
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-1\. 示例 PyPI 包页面
- en: Keeping Your Tools Sharp
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持你的工具锋利
- en: Programming tools are being updated all the time as the community identifies
    (and mostly fixes) new problems or comes to agree that some aspect of a software
    tool (or even Python itself!) ought to work differently. If you followed the instructions
    for installing Python and Jupyter Notebook provided in [Chapter 1](ch01.html#chapter1),
    then you can use the `conda` command to update both of these. You’ll just need
    to run `conda update python` and `conda update jupyter` every once in a while.
    At the same time, because this book is intended for beginners, one thing I didn’t
    address in [Chapter 1](ch01.html#chapter1) was the question of Python *environments*.
    In this context, a given *environment* is defined mostly by the major version
    of Python that will be used by default (for example, 3.9 versus 3.8) when you
    use the `python` command. While running `conda update python` will update, say,
    version 3.8.6 to 3.8.11, it *won’t* ever automatically update your version to
    a different major release (e.g., 3.9). Often, this won’t cause problems for you
    unless your Python installation is several years (and therefore major versions)
    out of date. If and when that happens, you’ll want to create a new environment
    for the new version of Python, mostly because it can be hard for your computer
    to keep things straight otherwise. Fortunately, when the time comes for you to
    upgrade Python to the next major version, you can learn what you need to know
    about how to do this from the [`conda` documentation page](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 编程工具一直在更新，因为社区发现（并且大多数情况下修复）新问题，或者达成共识，某个软件工具的某些方面（甚至Python本身！）应该有所不同。如果您按照[第1章](ch01.html#chapter1)中提供的安装Python和Jupyter
    Notebook的说明进行操作，那么您可以使用`conda`命令来更新这两者。您只需偶尔运行`conda update python`和`conda update
    jupyter`。与此同时，因为本书面向初学者，我在[第1章](ch01.html#chapter1)中没有涉及Python *环境*的问题。在这个背景下，一个给定的*环境*主要由默认使用的Python主版本（例如3.9与3.8）来定义，当您使用`python`命令时。虽然运行`conda
    update python`将更新，比如，版本3.8.6到3.8.11，它 *不会* 自动将您的版本更新到不同的主要发布版本（例如3.9）。通常情况下，这不会给您造成问题，除非您的Python安装已经过时了几年（因此是主要版本）。如果发生这种情况，您将需要为新版本的Python创建一个新的环境，主要是因为否则您的计算机可能很难保持清晰。幸运的是，当您升级Python到下一个主要版本时，您可以从[`conda`文档页面](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)了解如何操作。
- en: Where to Learn More
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何获取更多信息
- en: Because Python is such a popular programming language, there are thousands of
    resources online and in libraries for moving to the next level, whether you have
    a specific project to complete or just want to learn more about advanced topics
    like machine learning and natural languages processing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Python是如此受欢迎的编程语言，因此在线资源和图书馆中有数千种资源，可帮助您进入下一个学习阶段，无论是完成特定项目还是仅仅想了解更多关于机器学习和自然语言处理等高级主题。
- en: For a practical, succinct introduction to more intense data science topics,
    my first recommendation would be the [*Python Data Science Handbook*](https://www.oreilly.com/library/view/python-data-science/9781491912126/)
    by Jake VanderPlas (O’Reilly)—it’s a resource I’ve used myself when trying to
    get my head around some of the more advanced machine-learning work that Python
    can do, and Jake’s clear writing style and concise examples offer an accessible
    way to both get an overview of machine learning with Python and learn about specific
    methods (like k-means clustering). Even better, you can access the [entire book
    for free online](https://jakevdp.github.io/PythonDataScienceHandbook)—though if
    you’re able to, I highly recommend buying a copy of the book.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更深入的数据科学主题的实用、简洁介绍，我的首选推荐会是[*Python数据科学手册*](https://www.oreilly.com/library/view/python-data-science/9781491912126/)，作者是Jake
    VanderPlas（O’Reilly）——这是我在试图理解Python可以进行的更高级机器学习工作时自己使用过的资源，Jake清晰的写作风格和简洁的示例提供了一种既能够概述Python机器学习，又能学习具体方法（如k-means聚类）的易于理解的方式。更好的是，你可以在[网上免费获取整本书](https://jakevdp.github.io/PythonDataScienceHandbook)——虽然如果可以的话，我强烈建议购买一本实体书。
- en: Perhaps even more valuable than finding the right books, tutorials, or classes,
    however, is finding a community of people whom you can work and learn alongside
    as you continue your data wrangling journey. Whether through a school, community
    organization, or meetup, finding a small group of people that you can talk about
    your projects with or turn to for advice (and, sometimes, commiseration!) is probably
    the most invaluable resource for expanding your skills in both Python and data
    wrangling. There are also many cost-free programs that can help support and advance
    your work, especially for folks from communities that are underrepresented in
    technical fields. Check out groups like the [Ada Developers Academy](https://adadevelopersacademy.org)
    or [Free Code Camp](https://freecodecamp.org).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或许比找到合适的书籍、教程或课程更有价值的是，在你继续进行数据整理的旅程中找到一个可以与之共同学习和工作的人群社区。不论是通过学校、社区组织还是聚会，找到一个小团体，你可以与他们讨论你的项目，寻求建议（有时也是共鸣！），可能是扩展你在Python和数据整理方面技能最宝贵的资源。还有许多无费的项目可以支持并推动你的工作，尤其是来自技术领域中代表性不足的群体。看看像[Ada
    Developers Academy](https://adadevelopersacademy.org)或[Free Code Camp](https://freecodecamp.org)这样的团体。
