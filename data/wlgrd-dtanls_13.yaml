- en: appendix Python installation instructions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 Python 安装说明
- en: The projects in the book are technology agnostic, and the example solutions
    are mostly about the process, not the specifics of Python, which is my technology
    of choice. However, if you are a Python user like me, you might want to recreate
    my results on your machine and take my example solution as a starting point. This
    appendix explains how to install Python and set it up in a way that mimics the
    setup I used for the example solutions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 书中的项目对技术没有特定要求，示例解决方案主要关于过程，而不是Python的具体细节，Python是我的首选技术。然而，如果你像我一样是Python用户，你可能想在你的机器上重新创建我的结果，并将我的示例解决方案作为起点。本附录解释了如何安装Python并设置它，以便模仿示例解决方案的设置。
- en: Usually, the Python libraries required for a project are listed in the accompanying
    Jupyter notebooks and can be inferred from the `import` statements. That is, if
    the code in a solution imports `pandas`, you will need to have installed the `pandas`
    library. However, to recreate my examples exactly, you need to have the same version
    of each library as functionality changes across versions. There are many ways
    to ensure your Python environment is set up the same as mine, but generally, this
    is done using virtual environments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，项目所需的Python库列在配套的Jupyter笔记本中，可以从`import`语句中推断出来。也就是说，如果解决方案中的代码导入了`pandas`，你需要安装`pandas`库。但是，为了精确地重新创建我的示例，你需要每个库的相同版本，因为功能在不同版本之间有所变化。确保你的Python环境设置与我相同的方法有很多，但通常这是通过虚拟环境来完成的。
- en: Note  It is not necessary to have exactly the same setup to recreate the solutions
    in the book. You can likely use a newer Python version and newer versions of libraries
    such as `pandas` and get the same results. However, the virtual environments are
    explicitly pinned to older versions of both Python and the necessary libraries
    to ensure compatibility with each other. An example is the `recordlinkage` library
    used in chapter 3, which at time of writing is incompatible with `pandas` version
    2.0.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：为了在书中重新创建解决方案，并不需要完全相同的设置。你很可能可以使用更新的Python版本和更新的库版本，如`pandas`，并获得相同的结果。然而，虚拟环境明确地锁定到较旧的Python版本和必要的库版本，以确保它们之间的兼容性。例如，第3章中使用的`recordlinkage`库在撰写本文时与`pandas`版本2.0不兼容。
- en: Virtual environments let you have multiple combinations of Python libraries,
    even different versions of Python, on the same machine, usually one per project.
    I recommend creating a virtual environment in which you can run the accompanying
    code examples and ensure your libraries have the same versions as mine. Again,
    there are many ways to set up virtual environments. You may already have your
    favorite way to do this, or you may have never encountered virtual environments
    before. In this book, I use the `poetry` library, and the following sections include
    instructions to recreate my environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境允许你在同一台机器上拥有多个Python库的组合，甚至可以是不同版本的Python，通常每个项目一个。我建议创建一个虚拟环境，在其中你可以运行配套的代码示例，并确保你的库与我的版本相同。再次强调，设置虚拟环境的方法有很多。你可能已经有了自己偏好的方法，或者你可能之前从未遇到过虚拟环境。在这本书中，我使用了`poetry`库，接下来的章节将包括如何重新创建我的环境的说明。
- en: A.1 Installing Python
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.1 安装 Python
- en: Specifically, the projects in the book use Python 3.11, but that is only a requirement
    if you want to recreate the example solutions exactly. If you have a different
    version of Python already installed, but want to recreate my environment, you
    can install Python 3.11 anyway as it will be separate from other Python installations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，书中的项目使用Python 3.11，但这只在你想要精确地重新创建示例解决方案时是必需的。如果你已经安装了不同版本的Python，但想重新创建我的环境，你可以安装Python
    3.11，因为它将与其他Python安装分开。
- en: You can either install Python directly from Python.org ([https://www.python.org/downloads/](https://www.python.org/downloads/))
    or through a bundled version, such as Anaconda ([https://www.anaconda.com/download](https://www.anaconda.com/download)).
    You can also install Python through a minimal version of Anaconda, such as Miniconda
    ([https://docs.conda.io/en/latest/miniconda.xhtml](https://docs.conda.io/en/latest/miniconda.xhtml))
    or Miniforge ([https://github.com/conda-forge/miniforge](https://github.com/conda-forge/miniforge)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接从 Python.org 安装 Python ([https://www.python.org/downloads/](https://www.python.org/downloads/))，或者通过捆绑版本，例如
    Anaconda ([https://www.anaconda.com/download](https://www.anaconda.com/download))。您还可以通过
    Anaconda 的最小版本，如 Miniconda ([https://docs.conda.io/en/latest/miniconda.xhtml](https://docs.conda.io/en/latest/miniconda.xhtml))
    或 Miniforge ([https://github.com/conda-forge/miniforge](https://github.com/conda-forge/miniforge))
    来安装 Python。
- en: I personally use Miniforge, but as long as the end result is that you have Python
    3.11 installed on your machine, it doesn’t matter where you got it from.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人使用 Miniforge，但只要您在机器上安装了 Python 3.11，它从哪里来并不重要。
- en: A.2 Installing poetry
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.2 安装 poetry
- en: '`poetry` is the package and dependency management system I chose to manage
    my virtual environments. You can install it with your Python installation using
    whichever in-built package manager you have (usually `pip` or `conda`). An example
    command, which should be run in a terminal or command prompt, is `pip` `install`
    `poetry`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`poetry` 是我选择的用于管理虚拟环境的包和依赖管理工具。您可以使用您拥有的任何内置包管理器（通常是 `pip` 或 `conda`）与您的 Python
    安装一起安装它。一个示例命令，应在终端或命令提示符中运行，是 `pip install poetry`。'
- en: Note  If you use a different method for managing virtual environments, such
    as `virtualenv`, I have also included a `requirements.txt` file, which contains
    the same information as the `poetry` files, but it is the format required for
    these other tools. This will still require that you use Python 3.11\.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您使用不同的虚拟环境管理方法，例如 `virtualenv`，我还包括了一个 `requirements.txt` 文件，它包含与 `poetry`
    文件相同的信息，但它是这些其他工具所需的格式。这仍然需要您使用 Python 3.11。
- en: More information about `poetry` is available at [https://python-poetry.org/](https://python-poetry.org/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `poetry` 的更多信息可在 [https://python-poetry.org/](https://python-poetry.org/)
    找到。
- en: A.3 Creating your virtual environment
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.3 创建您的虚拟环境
- en: In the materials for the book, I have supplied two files, `poetry.lock` and
    `pyproject .toml`, both of which you need to recreate my virtual environment with
    the same versions of all necessary libraries. At the time of writing, you simply
    need to have those two files in the root folder where you have downloaded the
    code for the book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的材料中，我提供了两个文件，`poetry.lock` 和 `pyproject .toml`，您需要使用所有必要库的相同版本来重新创建我的虚拟环境。在撰写本文时，您只需在您下载本书代码的根目录中拥有这两个文件即可。
- en: 'First, navigate to your code folder where these files reside and run the following
    command to ensure `poetry` uses Python 3.11, regardless of what other versions
    exist on your machine. An example of a command prompt is shown in figure A.1:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到包含这些文件的代码文件夹，并运行以下命令以确保 `poetry` 使用 Python 3.11，无论您的机器上存在其他版本。图 A.1 展示了一个命令提示符的示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![figure](../Images/A-1.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/A-1.png)'
- en: Figure A.1 Command to tell `poetry` where Python 3.11 is installed
  id: totrans-18
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 A.1 显示了告诉 `poetry` Python 3.11 安装位置的命令
- en: Next, run the command `poetry` `install` to create your virtual environment.
    The correct versions of the necessary libraries will be installed. Figure A.2
    shows what the output might look like.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行命令 `poetry install` 以创建您的虚拟环境。将安装必要的库的正确版本。图 A.2 展示了输出可能的样子。
- en: '![figure](../Images/A-2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![figure](../Images/A-2.png)'
- en: Figure A.2 Installing the `poetry` environment and associated libraries
  id: totrans-21
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 A.2 安装 `poetry` 环境及其相关库
- en: At this point, you have a virtual environment that is set up the same as mine.
    You can activate it by running the command `poetry` `shell`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您已经设置了一个与我的设置相同的虚拟环境。您可以通过运行命令 `poetry shell` 来激活它。
- en: This will activate the environment, and any subsequent Python commands will
    run in this environment instead of the base one. From here, you can launch Jupyter
    using the command `jupyter` `notebook`. This will launch Jupyter, and you can
    interact with the code using the correct versions of Python and its libraries.
    Figure A.3 shows the final `poetry` commands before launching Jupyter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将激活环境，并且任何后续的 Python 命令都将在此环境中运行而不是在基本环境中。从这里，您可以使用命令 `jupyter notebook` 启动
    Jupyter。这将启动 Jupyter，您可以使用正确版本的 Python 和其库与代码进行交互。图 A.3 展示了启动 Jupyter 之前的最终 `poetry`
    命令。
- en: '![figure](../Images/A-3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/A-3.png)'
- en: Figure A.3 Launching Jupyter from the `poetry` environment
  id: totrans-25
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图A.3 从`poetry`环境启动Jupyter
