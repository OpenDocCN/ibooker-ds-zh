- en: Chapter 5\. The Basics of NumPy Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。NumPy数组的基础知识
- en: 'Data manipulation in Python is nearly synonymous with NumPy array manipulation:
    even newer tools like Pandas ([Part III](part03.xhtml#section-0300-introduction-to-pandas))
    are built around the NumPy array. This chapter will present several examples of
    using NumPy array manipulation to access data and subarrays, and to split, reshape,
    and join the arrays. While the types of operations shown here may seem a bit dry
    and pedantic, they comprise the building blocks of many other examples used throughout
    the book. Get to know them well!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中对数据进行操作几乎等同于对NumPy数组进行操作：即使是像Pandas（[第III部分](part03.xhtml#section-0300-introduction-to-pandas)）这样的较新工具也是围绕NumPy数组构建的。本章将介绍使用NumPy数组操作来访问数据和子数组、拆分、重塑和连接数组的几个示例。虽然这里展示的操作类型可能看起来有些枯燥和迂腐，但它们构成了本书中许多其他示例的基础。好好地了解它们！
- en: 'We’ll cover a few categories of basic array manipulations here:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将涵盖一些基本数组操作的类别：
- en: '*Attributes of arrays*'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组的属性*'
- en: Determining the size, shape, memory consumption, and data types of arrays
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 确定数组的大小、形状、内存消耗和数据类型
- en: '*Indexing of arrays*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组的索引*'
- en: Getting and setting the values of individual array elements
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 获取和设置单个数组元素的值
- en: '*Slicing of arrays*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组的切片*'
- en: Getting and setting smaller subarrays within a larger array
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 获取和设置大数组中的较小子数组
- en: '*Reshaping of arrays*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组的重塑*'
- en: Changing the shape of a given array
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 更改给定数组的形状
- en: '*Joining and splitting of arrays*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组的连接和拆分*'
- en: Combining multiple arrays into one, and splitting one array into many
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个数组组合成一个数组，并将一个数组拆分成多个数组
- en: NumPy Array Attributes
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy数组属性
- en: 'First let’s discuss some useful array attributes. We’ll start by defining random
    arrays of one, two, and three dimensions. We’ll use NumPy’s random number generator,
    which we will *seed* with a set value in order to ensure that the same random
    arrays are generated each time this code is run:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们讨论一些有用的数组属性。我们将从定义一维、二维和三维随机数组开始。我们将使用NumPy的随机数生成器，我们将使用一个固定值来*seed*，以确保每次运行此代码时都生成相同的随机数组：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each array has attributes including `ndim` (the number of dimensions), `shape`
    (the size of each dimension), `size` (the total size of the array), and `dtype`
    (the type of each element):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数组都有一些属性，包括`ndim`（维数）、`shape`（每个维度的大小）、`size`（数组的总大小）和`dtype`（每个元素的类型）：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more discussion of data types, see [Chapter 4](ch04.xhtml#section-0201-understanding-data-types).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数据类型的更多讨论，请参阅[第4章](ch04.xhtml#section-0201-understanding-data-types)。
- en: 'Array Indexing: Accessing Single Elements'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组索引：访问单个元素
- en: 'If you are familiar with Python’s standard list indexing, indexing in NumPy
    will feel quite familiar. In a one-dimensional array, the *i[th]* value (counting
    from zero) can be accessed by specifying the desired index in square brackets,
    just as with Python lists:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉Python标准列表的索引，那么在NumPy中进行索引将会感觉非常熟悉。在一维数组中，第*i*个值（从零开始计数）可以通过在方括号中指定所需索引来访问，就像在Python列表中一样：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To index from the end of the array, you can use negative indices:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要从数组的末尾进行索引，可以使用负索引：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In a multidimensional array, items can be accessed using a comma-separated
    `(*row*, *column*)` tuple:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在多维数组中，可以使用逗号分隔的`(*行*, *列*)`元组来访问项目：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Values can also be modified using any of the preceding index notation:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值也可以使用任何前述的索引表示进行修改：
- en: '[PRE11]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Keep in mind that, unlike Python lists, NumPy arrays have a fixed type. This
    means, for example, that if you attempt to insert a floating-point value into
    an integer array, the value will be silently truncated. Don’t be caught unaware
    by this behavior!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，与Python列表不同，NumPy数组具有固定的类型。这意味着，例如，如果你尝试将浮点值插入到整数数组中，该值将被静默截断。不要被这种行为所困扰！
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Array Slicing: Accessing Subarrays'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组切片：访问子数组
- en: 'Just as we can use square brackets to access individual array elements, we
    can also use them to access subarrays with the *slice* notation, marked by the
    colon (`:`) character. The NumPy slicing syntax follows that of the standard Python
    list; to access a slice of an array `x`, use this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们可以使用方括号访问单个数组元素一样，我们也可以使用*切片*符号（由冒号（`:`）字符标记）来访问子数组。NumPy的切片语法遵循标准Python列表的语法；要访问数组`x`的一个切片，使用以下方法：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If any of these are unspecified, they default to the values `start=0`, `stop=<size
    of dimension>`, `step=1`. Let’s look at some examples of accessing subarrays in
    one dimension and in multiple dimensions.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其中任何一个未指定，它们将默认为`start=0`、`stop=<size of dimension>`、`step=1`的值。让我们看一些在一维和多维数组中访问子数组的例子。
- en: One-Dimensional Subarrays
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一维子数组
- en: 'Here are some examples of accessing elements in one-dimensional subarrays:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些访问一维子数组中元素的示例：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A potentially confusing case is when the `step` value is negative. In this
    case, the defaults for `start` and `stop` are swapped. This becomes a convenient
    way to reverse an array:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能令人困惑的情况是当`step`值为负时。在这种情况下，`start`和`stop`的默认值会被交换。这成为反转数组的便捷方式：
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Multidimensional Subarrays
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多维子数组
- en: 'Multidimensional slices work in the same way, with multiple slices separated
    by commas. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 多维切片的工作方式相同，使用逗号分隔的多个切片。例如：
- en: '[PRE22]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'One commonly needed routine is accessing single rows or columns of an array.
    This can be done by combining indexing and slicing, using an empty slice marked
    by a single colon (`:`):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的例程是访问数组的单行或单列。这可以通过组合索引和切片来完成，使用一个冒号（`:`）标记的空切片：
- en: '[PRE26]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the case of row access, the empty slice can be omitted for a more compact
    syntax:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在行访问的情况下，可以省略空切片以获得更紧凑的语法：
- en: '[PRE28]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Subarrays as No-Copy Views
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子数组作为非副本视图
- en: 'Unlike Python list slices, NumPy array slices are returned as *views* rather
    than *copies* of the array data. Consider our two-dimensional array from before:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与Python列表切片不同，NumPy数组切片返回的是数组数据的*视图*而不是*副本*。考虑我们之前的二维数组：
- en: '[PRE29]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let’s extract a <math alttext="2 times 2"><mrow><mn>2</mn> <mo>×</mo> <mn>2</mn></mrow></math>
    subarray from this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从中提取一个<math alttext="2 times 2"><mrow><mn>2</mn> <mo>×</mo> <mn>2</mn></mrow></math>子数组：
- en: '[PRE30]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now if we modify this subarray, we’ll see that the original array is changed!
    Observe:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们修改这个子数组，我们会看到原始数组也发生了改变！观察：
- en: '[PRE31]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Some users may find this surprising, but it can be advantageous: for example,
    when working with large datasets, we can access and process pieces of these datasets
    without the need to copy the underlying data buffer.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户可能会觉得这很奇怪，但这可能是有利的：例如，在处理大型数据集时，我们可以访问和处理这些数据集的部分而无需复制底层数据缓冲区。
- en: Creating Copies of Arrays
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组的副本
- en: 'Despite the features of array views, it’s sometimes useful to instead explicitly
    copy the data within an array or a subarray. This is easiest to do with the `copy`
    method:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数组视图具有这些特性，但有时将数据明确复制到数组或子数组中更有用。这可以使用`copy`方法最容易地完成：
- en: '[PRE33]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If we now modify this subarray, the original array is not touched:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在修改这个子数组，原始数组不会受到影响：
- en: '[PRE34]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Reshaping of Arrays
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组的重塑
- en: 'Another useful type of operation is reshaping of arrays, which can be done
    with the `reshape` method. For example, if you want to put the numbers 1 through
    9 in a <math alttext="3 times 3"><mrow><mn>3</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    grid, you can do the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有用的操作类型是数组的重塑，可以使用`reshape`方法完成。例如，如果你想将数字1到9放在一个<math alttext="3 times 3"><mrow><mn>3</mn>
    <mo>×</mo> <mn>3</mn></mrow></math>网格中，你可以这样做：
- en: '[PRE36]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note that for this to work, the size of the initial array must match the size
    of the reshaped array, and in most cases the `reshape` method will return a no-copy
    view of the initial array.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了使其工作，初始数组的大小必须与重塑后数组的大小匹配，在大多数情况下，`reshape`方法将返回初始数组的非副本视图。
- en: 'A common reshaping operation is converting a one-dimensional array into a two-dimensional
    row or column matrix:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的重塑操作是将一维数组转换为二维行或列矩阵：
- en: '[PRE37]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'A convenient shorthand for this is to use `np.newaxis` in the slicing syntax:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个便利的简写是在切片语法中使用`np.newaxis`：
- en: '[PRE39]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This is a pattern that we will utilize often throughout the remainder of the
    book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书剩余部分我们经常会利用的模式。
- en: Array Concatenation and Splitting
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组连接和拆分
- en: All of the preceding routines worked on single arrays. NumPy also provides tools
    to combine multiple arrays into one, and to conversely split a single array into
    multiple arrays.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述的例程都在单个数组上工作。NumPy还提供了将多个数组合并成一个数组的工具，以及将单个数组拆分成多个数组的工具。
- en: Concatenation of Arrays
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的连接
- en: 'Concatenation, or joining of two arrays in NumPy, is primarily accomplished
    using the routines `np.concatenate`, `np.vstack`, and `np.hstack`. `np.concatenate`
    takes a tuple or list of arrays as its first argument, as you can see here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，数组的连接或组合主要通过`np.concatenate`、`np.vstack`和`np.hstack`这些例程来实现。`np.concatenate`将一个数组的元组或列表作为其第一个参数，如下所示：
- en: '[PRE41]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can also concatenate more than two arrays at once:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以一次连接多个数组：
- en: '[PRE42]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And it can be used for two-dimensional arrays:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以用于二维数组：
- en: '[PRE43]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'For working with arrays of mixed dimensions, it can be clearer to use the `np.vstack`
    (vertical stack) and `np.hstack` (horizontal stack) functions:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处理混合维度数组，使用 `np.vstack`（垂直堆叠）和 `np.hstack`（水平堆叠）函数可能更清晰：
- en: '[PRE46]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Similarly, for higher-dimensional arrays, `np.dstack` will stack arrays along
    the third axis.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于高维数组，`np.dstack` 将沿第三轴堆叠数组。
- en: Splitting of Arrays
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的分割
- en: 'The opposite of concatenation is splitting, which is implemented by the functions
    `np.split`, `np.hsplit`, and `np.vsplit`. For each of these, we can pass a list
    of indices giving the split points:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 连接的反操作是分割，由函数 `np.split`、`np.hsplit` 和 `np.vsplit` 实现。对于每一个，我们可以传递一个给定分割点的索引列表：
- en: '[PRE48]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Notice that *N* split points leads to *N* + 1 subarrays. The related functions
    `np.hsplit` and `np.vsplit` are similar:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*N* 个分割点会导致 *N* + 1 个子数组。相关的函数 `np.hsplit` 和 `np.vsplit` 类似：
- en: '[PRE49]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Similarly, for higher-dimensional arrays, `np.dsplit` will split arrays along
    the third axis.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于高维数组，`np.dsplit` 将沿第三轴分割数组。
