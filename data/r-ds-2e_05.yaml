- en: 'Chapter 4\. Workflow: Code Style'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。工作流：代码风格
- en: 'Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.
    Even as a very new programmer, it’s a good idea to work on your code style. Using
    a consistent style makes it easier for others (including future you!) to read
    your work and is particularly important if you need to get help from someone else.
    This chapter will introduce the most important points of the [tidyverse style
    guide](https://oreil.ly/LykON), which is used throughout this book.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的编码风格就像正确的标点符号一样重要：没有也能用，但它确实使事情更易读。即使是刚入门的程序员，也应该注意自己的代码风格。使用一致的风格可以让他人（包括未来的自己！）更容易阅读你的作品，如果需要从他人那里获得帮助，则尤为重要。本章将介绍《整洁宇宙风格指南》中的最重要内容点，该指南贯穿本书始终。
- en: Styling your code will feel a bit tedious to start with, but if you practice
    it, it will soon become second nature. Additionally, there are some great tools
    to quickly restyle existing code, like the [styler](https://oreil.ly/8_Z1c) package
    by Lorenz Walthert. Once you’ve installed it with `install.packages("styler")`,
    an easy way to use it is via RStudio’s *command palette*. The command palette
    lets you use any built-in RStudio command and many addins provided by packages.
    Open the palette by pressing Cmd/Ctrl+Shift+P and then type *styler* to see all
    the shortcuts offered by styler. [Figure 4-1](#fig-styler) shows the results.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一开始为代码添加样式会感觉有点乏味，但如果你练习一下，它很快就会变得自然。此外，有一些很棒的工具可以快速重置现有的代码格式，比如 Lorenz Walthert
    的 [styler](https://oreil.ly/8_Z1c) 包。安装完毕后，你可以通过 RStudio 的 *命令面板* 很容易地使用它。命令面板让你使用任何内置的
    RStudio 命令和许多包提供的插件。按下 Cmd/Ctrl+Shift+P 即可打开面板，然后输入 *styler*，以查看 styler 提供的所有快捷方式。[图 4-1](#fig-styler)
    展示了结果。
- en: '![A screenshot showing the command palette after typing "styler", showing the
    four styling tool provided by the package.](assets/rds2_0401.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![显示输入“styler”后命令面板的屏幕截图，展示该包提供的四种样式工具。](assets/rds2_0401.png)'
- en: Figure 4-1\. RStudio’s command palette makes it easy to access every RStudio
    command using only the keyboard.
  id: totrans-4
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. RStudio 的命令面板使得只用键盘就能轻松访问每一个 RStudio 命令。
- en: We’ll use the tidyverse and nycflights13 packages for code examples in this
    chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 tidyverse 和 nycflights13 包作为代码示例。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Names
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 名字
- en: We talked briefly about names in [“What’s in a Name?”](ch02.xhtml#sec-whats-in-a-name).
    Remember that variable names (those created by `<-` and those created by [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml))
    should use only lowercase letters, numbers, and `_`. Use `_` to separate words
    within a name.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要讨论了 [“名字的重要性”](ch02.xhtml#sec-whats-in-a-name)。请记住，变量名（通过 `<-` 创建的和通过 [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    创建的）应该只使用小写字母、数字和 `_`。用 `_` 分隔名称中的单词。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As a general rule of thumb, it’s better to prefer long, descriptive names that
    are easy to understand rather than concise names that are fast to type. Short
    names save relatively little time when writing code (especially since autocomplete
    will help you finish typing them), but it can be time-consuming when you come
    back to old code and are forced to puzzle out a cryptic abbreviation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，最好使用长而描述清晰的名称，而不是简短而便于输入的名称。在编写代码时，使用简短名称节约的时间相对较少（特别是因为自动完成会帮助你完成输入），但当你回到旧代码并被迫解决晦涩的缩写时，会耗费大量时间。
- en: If you have a bunch of names for related things, do your best to be consistent.
    It’s easy for inconsistencies to arise when you forget a previous convention,
    so don’t feel bad if you have to go back and rename things. In general, if you
    have a bunch of variables that are a variation on a theme, you’re better off giving
    them a common prefix rather than a common suffix because autocomplete works best
    on the start of a variable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一堆相关事物的名称，请尽量保持一致。当你忘记之前的约定时，不一致很容易出现，所以如果需要，回过头重新命名并不可耻。一般来说，如果你有一堆变量，它们都是主题的变体，最好给它们一个共同的前缀，而不是一个共同的后缀，因为自动完成在变量的开头效果更好。
- en: Spaces
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空格
- en: Put spaces on either side of mathematical operators apart from `^` (i.e., `+`,
    `-`, `==`, `<`, …) and around the assignment operator (`<-`).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数学运算符两侧都要加空格，除了 `^`（即 `+`、`-`、`==`、`<` 等等），并且赋值操作符（`<-`）的周围也要加空格。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Don’t put spaces inside or outside parentheses for regular function calls. Always
    put a space after a comma, just like in standard English.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在常规函数调用的括号内外不要加空格。逗号后始终加一个空格，就像标准英语一样。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s OK to add extra spaces if it improves alignment. For example, if you’re
    creating multiple variables in [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml),
    you might want to add spaces so that all the `=` line up.^([1](ch04.xhtml#idm44771324908448))
    This makes it easier to skim the code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加入额外的空格可以改善对齐，这是可以的。例如，如果你在 [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    中创建多个变量，可能需要添加空格，以便所有的 `=` 对齐。^([1](ch04.xhtml#idm44771324908448)) 这样做可以让代码更易于快速浏览。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pipes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: '`|>` should always have a space before it and should typically be the last
    thing on a line. This makes it easier to add new steps, rearrange existing steps,
    modify elements within a step, and get a 10,000-foot view by skimming the verbs
    on the left side.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`|>` 前应始终有一个空格，并且通常应该是行末的最后一个元素。这样可以更轻松地添加新步骤，重新排列现有步骤，修改步骤内的元素，并通过快速浏览左侧动词来获得全局视图。'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the function you’re piping into has named arguments (like [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    or [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)), put
    each argument on a new line. If the function doesn’t have named arguments (like
    [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml) or [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)),
    keep everything on one line unless it doesn’t fit, in which case you should put
    each argument on its own line.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要传递到管道中的函数具有命名参数（如 [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    或 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)），每个参数放在新的一行上。如果函数没有命名参数（如
    [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml) 或 [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)），除非不适合，否则保持一行。在这种情况下，应将每个参数放在单独的行上。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After the first step of the pipeline, indent each line by two spaces. RStudio
    automatically puts the spaces in for you after a line break following a `|>`.
    If you’re putting each argument on its own line, indent by an extra two spaces.
    Make sure `)` is on its own line and unindented to match the horizontal position
    of the function name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 管道的第一步完成后，每行缩进两个空格。在 `|>` 后的换行符后，RStudio 会自动为你添加空格。如果你将每个参数放在单独的行上，额外缩进两个空格。确保
    `)` 单独一行，并且不缩进以匹配函数名的水平位置。
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It’s OK to shirk some of these rules if your pipeline fits easily on one line.
    But in our collective experience, it’s common for short snippets to grow longer,
    so you’ll usually save time in the long run by starting with all the vertical
    space you need.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的管道可以轻松放在一行上，那么放弃一些规则是可以接受的。但根据我们的集体经验，短代码片段通常会变得更长，因此从一开始就使用所需的所有垂直空间通常能节省时间。
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, be wary of writing very long pipes, say longer than 10–15 lines. Try
    to break them up into smaller subtasks, giving each task an informative name.
    The names will help cue the reader into what’s happening and makes it easier to
    check that intermediate results are as expected. Whenever you can give something
    an informative name, you should, for example when you fundamentally change the
    structure of the data, e.g., after pivoting or summarizing. Don’t expect to get
    it right the first time! This means breaking up long pipelines if there are intermediate
    states that can get good names.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要注意编写非常长的管道，例如超过 10–15 行。尝试将其分解为更小的子任务，并为每个任务赋予一个信息性的名称。名称将帮助读者了解正在发生的事情，并且使得检查中间结果是否符合预期更加容易。每当可以为某个东西提供一个信息性的名称时，都应该这样做，例如在基本上改变数据结构后，例如在旋转或汇总之后。不要指望第一次就做对！这意味着如果有中间状态可以获得良好的名称，则应拆分长管道。
- en: ggplot2
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ggplot2
- en: 'The same basic rules that apply to the pipe also apply to ggplot2; just treat
    `+` the same way as `|>`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与管道相同的基本规则也适用于 ggplot2；只需将 `+` 与 `|>` 一样处理：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Again, if you can’t fit all of the arguments to a function onto a single line,
    put each argument on its own line:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不能将所有函数的参数放在一行上，请将每个参数放在单独的行上：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Watch for the transition from `|>` to `+`. We wish this transition wasn’t necessary,
    but unfortunately, ggplot2 was written before the pipe was discovered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 注意从 `|>` 到 `+` 的过渡。我们希望这种过渡不是必需的，但不幸的是，ggplot2 是在发现管道之前编写的。
- en: Sectioning Comments
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分段注释
- en: 'As your scripts get longer, you can use *sectioning* comments to break up your
    file into manageable pieces:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的脚本变得更长时，可以使用*分段*注释将文件分解成可管理的片段：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: RStudio provides a keyboard shortcut to create these headers (Cmd/Ctrl+Shift+R)
    and will display them in the code navigation drop-down at the bottom left of the
    editor, as shown in [Figure 4-2](#fig-rstudio-sections).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: RStudio提供了一个键盘快捷键来创建这些标题（Cmd/Ctrl+Shift+R），并会在编辑器左下角的代码导航下拉菜单中显示，如图 [4-2](#fig-rstudio-sections)
    所示。
- en: '![](assets/rds2_0402.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/rds2_0402.png)'
- en: Figure 4-2\. After adding sectioning comments to your script, you can easily
    navigate to them using the code navigation tool in the bottom left of the script
    editor.
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 在给脚本添加分区注释后，您可以使用脚本编辑器左下角的代码导航工具轻松导航到它们。
- en: Exercises
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Restyle the following pipelines following the previous guidelines:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据前面的准则重新设计以下流水线：
- en: '[PRE12]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned the most important principles of code style. These
    may feel like a set of arbitrary rules to start with (because they are!), but
    over time, as you write more code and share code with more people, you’ll see
    how important a consistent style is. And don’t forget about the styler package:
    it’s a great way to quickly improve the quality of poorly styled code.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了代码风格的最重要原则。这些可能一开始感觉像一套任意的规则（因为它们确实是！），但随着时间的推移，随着您编写更多的代码并与更多人分享代码，您将会意识到一致的风格是多么重要。而且不要忘记styler包：它是快速提高低质量代码质量的好方法。
- en: In the next chapter, we switch back to data science tools, learning about tidy
    data. Tidy data is a consistent way of organizing your data frames that is used
    throughout the tidyverse. This consistency makes your life easier because once
    you have tidy data, it just works with the vast majority of tidyverse functions.
    Of course, life is never easy, and most datasets you encounter in the wild will
    not already be tidy. So we’ll also teach you how to use the tidyr package to tidy
    your untidy data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将切换回数据科学工具，学习关于整洁数据的知识。整洁数据是一种一致的组织数据框的方式，贯穿于整洁宇宙。这种一致性使您的生活更轻松，因为一旦有了整洁的数据，它就能与大多数整洁宇宙函数完美配合。当然，生活从来不会轻松，你在野外遇到的大多数数据集都不会是整洁的。因此，我们还会教您如何使用tidyr包来整理您的混乱数据。
- en: ^([1](ch04.xhtml#idm44771324908448-marker)) Since `dep_time` is in `HMM` or
    `HHMM` format, we use integer division (`%/%`) to get hour and remainder (also
    known as modulo, `%%`) to get minute.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.xhtml#idm44771324908448-marker)) 因为`dep_time`是以`HMM`或`HHMM`格式表示的，我们使用整数除法（`%/%`）来获取小时和余数（也称为模数，`%%`）来获取分钟。
