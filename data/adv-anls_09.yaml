- en: Chapter 7\. Data Structures in R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章\. R 中的数据结构
- en: Toward the end of [Chapter 6](ch06.html#first-steps-r) you learned how to work
    with packages in R. It’s common to load any necessary packages at the beginning
    of a script so that there are no surprises about required downloads later on.
    In that spirit, we’ll call in any packages needed for this chapter now. You may
    need to install some of these; if you need a refresher on doing that, look back
    to [Chapter 6](ch06.html#first-steps-r). I’ll further explain these packages as
    we get to them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](ch06.html#first-steps-r)的末尾，您学会了如何在 R 中使用包。在脚本的开头加载所需的包是很常见的，这样可以避免后续下载时出现意外情况。在这个精神上，我们现在会调用本章需要的所有包。您可能需要安装其中一些包；如果需要恢复到如何执行此操作，请回顾[第
    6 章](ch06.html#first-steps-r)。在适当的时候，我会进一步解释这些包。
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Vectors
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量
- en: 'In [Chapter 6](ch06.html#first-steps-r) you also learned about calling functions
    on data of different modes, and assigning data to objects:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 6 章](ch06.html#first-steps-r)中，您还学习了如何对不同模式的数据调用函数，并将数据分配给对象：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Chances are, you generally work with more than one piece of data at a time,
    so assigning each to its own object probably doesn’t sound too useful. In Excel,
    you can place data into contiguous cells, called a *range*, and easily operate
    on that data. [Figure 7-1](#excel-ranges) depicts some simple examples of operating
    on ranges of both numbers and text in Excel:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，您通常会同时处理多个数据片段，因此将每个数据片段分配给单独的对象可能并不太实用。在 Excel 中，您可以将数据放入连续的单元格中，称为*范围*，并轻松地对该数据进行操作。[图
    7-1](#excel-ranges)展示了在 Excel 中操作数字和文本范围的简单示例：
- en: '![Typical ranges in Excel](assets/aina_0701.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Excel 中的典型范围](assets/aina_0701.png)'
- en: Figure 7-1\. Operating on ranges in Excel
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 在 Excel 中操作范围
- en: Earlier I likened the *mode* of an object to a particular type of shoe in a
    shoebox. The *structure* of an object is the shape, size, and architecture of
    the shoebox itself. In fact, you’ve already been finding the structure of an R
    object with the `str()` function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我将对象的*模式*类比为鞋盒里特定类型的鞋子。对象的*结构*是鞋盒本身的形状、大小和结构。事实上，您已经用`str()`函数找到了 R 对象的结构。
- en: 'R contains several object structures: we can store and operate on a bit of
    data by placing it in a particular structure called a *vector*. Vectors are collections
    of one or more elements of data of the same type. Turns out we’ve already been
    using vectors, which we can confirm with the `is.vector()` function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: R 包含几种对象结构：我们可以通过将数据放入称为*向量*的特定结构中来存储和操作一小部分数据。向量是同一类型的一个或多个数据元素的集合。事实证明，我们已经在使用向量，我们可以用`is.vector()`函数确认：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Though `my_number` is a vector, it only contains one element—sort of like a
    single cell in Excel. In R, we would say this vector has a length of 1:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`my_number`是一个向量，但它只包含一个元素——有点像 Excel 中的单个单元格。在 R 中，我们会说这个向量的长度为 1：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can make a vector out of multiple elements, akin to an Excel range, with
    the `c()` function. This function is so called because it serves to *combine*
    multiple elements into a single vector. Let’s try it:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`c()`函数将多个元素组成一个向量，类似于 Excel 中的范围。这个函数之所以被称为如此，是因为它用于*组合*多个元素成为一个单一向量。让我们来试试：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This object is indeed a vector, its data is numeric, and it has a length of
    4:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象确实是一个向量，其数据是数值型，长度为 4：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s see what happens when we call a function on `my_numbers`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在`my_numbers`上调用函数会发生什么：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Now* we’re getting somewhere. We could similarly operate on a character vector:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在*我们有了进展。我们可以类似地操作字符向量：'
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'By combining elements of data into vectors with the `c()` function, we were
    able to easily reproduce in R what was shown in Excel in [Figure 7-1](#excel-ranges).
    What happens if elements of different types are assigned to the same vector? Let’s
    give it a try:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`c()`函数将数据元素组合成向量，我们能够轻松地在 R 中复制 Excel 中[图 7-1](#excel-ranges)所示的内容。如果将不同类型的元素分配给同一个向量会发生什么？让我们试试看：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: R will *coerce* all elements to be of the same type so that they can be combined
    into a vector; for example, the numeric element `2` in the previous example was
    coerced into a character.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: R 将*强制转换*所有元素为相同类型，以便它们可以组合成一个向量；例如，前面例子中的数字元素 `2` 被强制转换为字符型。
- en: Indexing and Subsetting Vectors
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引和子集向量
- en: 'In Excel, the `INDEX()` function serves to find the position of an element
    in a range. For example, I will use `INDEX()` in [Figure 7-2](#vector-index-excel)
    to extract the element in the third position of the named range `roster_names`
    (cells `A1:A5`):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 中，`INDEX()`函数用于找到范围内元素的位置。例如，我将在[图 7-2](#vector-index-excel)中使用`INDEX()`从命名范围`roster_names`（单元格`A1:A5`）中提取第三个位置的元素：
- en: '![Indexing in Excel](assets/aina_0702.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Excel 中的索引](assets/aina_0702.png)'
- en: Figure 7-2\. The `INDEX()` function on an Excel range
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-2\. Excel 范围上的`INDEX()`函数
- en: 'We can similarly index a vector in R by affixing the desired index position
    inside brackets to the object name:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过在对象名称内的括号中添加所需的索引位置来类似地索引 R 中的向量：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using this same notation, it’s possible to select multiple elements by their
    index number, which we’ll call *subsetting*. Let’s again use the `:` operator
    to pull all elements between position 1 and 3:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的符号，可以通过它们的索引号选择多个元素，我们称之为*子集*。让我们再次使用`:`运算符来提取位置在 1 到 3 之间的所有元素：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It’s possible to use functions here, too. Remember `length()`? We can use it
    to get everything through the last element in a vector:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里也可以使用函数。还记得`length()`吗？我们可以使用它获取向量中的最后一个元素：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We could even use the `c()` function to index by a vector of nonconsecutive
    elements:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用`c()`函数按非连续元素的向量进行索引：
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: From Excel Tables to R Data Frames
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Excel 表到 R 数据框架
- en: “This is all well and good,” you may be thinking, “but I don’t just work with
    small ranges like these. What about whole data *tables*?” After all, in [Chapter 1](ch01.html#foundations-of-eda)
    you learned all about the importance of arranging data into variables and observations,
    such as the *star* data shown in [Figure 7-3](#two-dimensional-data-structure-excel).
    This is an example of a *two-dimensional* data structure.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “这一切都很好，”您可能会想，“但我不只是处理这些小范围。那些完整的数据*表格*呢？” 毕竟，在[第 1 章](ch01.html#foundations-of-eda)中，您学习了将数据排列成变量和观察值的重要性，例如[图
    7-3](#two-dimensional-data-structure-excel)中显示的*star*数据。这是一个*二维*数据结构的例子。
- en: '![A two-dimensional data structure in Excel](assets/aina_0703.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Excel 中的二维数据结构](assets/aina_0703.png)'
- en: Figure 7-3\. A two-dimensional data structure in Excel
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-3\. Excel 中的二维数据结构
- en: Whereas R’s vector is one-dimensional, the *data frame* allows for storing data
    in both rows *and* columns. This makes the data frame the R equivalent of an Excel
    table. Put formally, a data frame is a two-dimensional data structure where records
    in each column are of the same mode and all columns are of the same length. In
    R, like Excel, it’s typical to assign each column a label or name.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 R 的向量是一维的，但*数据框架*允许同时存储行和列的数据。这使得数据框架成为 Excel 表格的 R 等价物。形式上，数据框架是一个二维数据结构，每列的记录是相同模式，并且所有列的长度相同。在
    R 中，像 Excel 一样，通常为每列分配一个标签或名称。
- en: 'We can make a data frame from scratch with the `data.frame()` function. Let’s
    build and then print a data frame called `roster`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`data.frame()`函数从头开始创建数据框架。让我们构建并打印一个名为`roster`的数据框架：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We’ve used the `c()` function before to combine elements into a vector. And
    indeed, a data frame can be thought of as a *collection of vectors* of equal length.
    At three variables and five observations, `roster` is a pretty miniscule data
    frame. Fortunately, a data frame doesn’t always have to be built from scratch
    like this. For instance, R comes installed with many datasets. You can view a
    listing of them with this function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前使用过`c()`函数将元素组合成向量。事实上，数据框架可以被看作是*等长向量的集合*。在三个变量和五个观察值时，`roster`是一个相当小的数据框架。幸运的是，并不总是需要像这样从头开始构建数据框架。例如，R
    自带许多数据集。您可以使用这个函数查看它们的列表：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: A menu labeled “R data sets” will appear as a new window in your scripts pane.
    Many, but not all, of these datasets are structured as data frames. For example,
    you may have encountered the famous *iris* dataset before; this is available out
    of the box in R.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标记为“R 数据集”的菜单将出现在脚本窗格的新窗口中。这些数据集中的许多（但并非全部）都结构化为数据框架。例如，您可能之前遇到过著名的*iris*数据集；这在
    R 中是默认提供的。
- en: 'Just like with any object, it’s possible to print *iris*; however, this will
    quickly overwhelm your console with 150 rows of data. (Imagine the problem compounded
    to thousands or millions of rows.) It’s more common instead to print just the
    first few rows with the `head()` function:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何对象一样，在这里也可以打印*iris*；但是，这将快速地用 150 行数据淹没您的控制台。（想象这个问题扩展到成千上万甚至百万行。）更常见的做法是使用`head()`函数仅打印前几行数据：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can confirm that `iris` is indeed a data frame with `is.data.frame()`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认`iris`确实是一个数据框架，可以用`is.data.frame()`来验证：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Another way to get to know our new dataset besides printing it is with the
    `str()` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打印它之外，了解我们的新数据集的另一种方法是使用`str()`函数：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output returns the size of the data frame and some information about its
    columns. You’ll see that four of them are numeric. The last, *Species*, is a *factor*.
    Factors are a special way to store variables that take on a limited number of
    values. They are especially helpful for storing *categorical* variables: in fact,
    you’ll see that *Species* is described as having three *levels*, which is a term
    we’ve used statistically in describing categorical variables.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出返回数据框架的大小以及关于其列的一些信息。你会看到其中四列是数值型的。最后一列*Species*是一个*factor*。因素是一种特殊的存储变量的方式，它们只能取有限数量的值。它们对于存储*分类*变量特别有帮助：事实上，你会看到*Species*被描述为具有三个*levels*，这是我们在统计学中描述分类变量时使用的术语之一。
- en: Though outside the scope of this book, factors carry many benefits for working
    with categorical variables, such as offering more memory-efficient storage. To
    learn more about factors, check out R’s help documentation for the `factor()`
    function. (This can be done with the `?` operator.) The `tidyverse` also includes
    `forcats` as a core package to assist in working with factors.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书不涉及因素，但对于处理分类变量，因素有很多好处，比如提供更高效的内存存储。要了解更多关于因素的信息，请查阅R的帮助文档，找到`factor()`函数（可以使用`?`运算符）。`tidyverse`也包括`forcats`作为一个核心包，用于处理因素。
- en: 'In addition to the datasets that are preloaded with R, many packages include
    their own data. You can also find out about them with the `data()` function. Let’s
    see if the `psych` package includes any datasets:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了R预加载的数据集之外，许多包还包含它们自己的数据。你也可以使用`data()`函数来了解它们。让我们看看`psych`包中是否包含任何数据集：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The “R data sets” menu will again launch in a new window; this time, an additional
    section called “Data sets in package `psych`" will appear. One of these datasets
    is called `sat.act`. To make this dataset available to our R session, we can again
    use the `data()` function. It’s now an assigned R object that you can find in
    your Environment menu and use like any other object; let’s confirm it’s a data
    frame:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “R数据集”菜单将在新窗口中再次启动；这一次，会出现一个名为“包`psych`中的数据集”的额外部分。其中一个数据集被称为`sat.act`。要使这个数据集在我们的R会话中可用，我们可以再次使用`data()`函数。现在它是一个分配的R对象，你可以在你的环境菜单中找到它，并像任何其他对象一样使用；让我们确认一下它是一个数据框架：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Importing Data in R
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在R中导入数据
- en: When working in Excel, it’s common to store, analyze, and present data all within
    the same workbook. By contrast, it’s uncommon to store data from inside an R script.
    Generally, data will be imported from external sources, ranging from text files
    and databases to web pages and application programming interfaces (APIs) to images
    and audio, and only then analyzed in R. Results of the analysis are then frequently
    exported to still different sources. Let’s start this process by reading data
    from, not surprisingly, Excel workbooks (file extension *.xlsx*), and comma-separated
    value files (file extension *.csv*).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Excel中工作时，通常会在同一个工作簿中存储、分析和呈现数据。相比之下，在R脚本内部存储数据是不常见的。一般情况下，数据会从外部来源导入，从文本文件和数据库到网页和应用程序接口（API）再到图像和音频，然后才在R中进行分析。分析结果经常被导出到不同的来源。让我们开始这个过程，从不出所料的Excel工作簿（文件扩展名*.xlsx*）和逗号分隔值文件（文件扩展名*.csv*）中读取数据。
- en: 'To import data in R, it’s important to understand how file paths and directories
    work. Each time you use the program, you’re working from a “home base” on your
    computer, or a *working directory*. Any files you refer to from R, such as when
    you import a dataset, are assumed to be located relative to that working directory.
    The `getwd()` function prints the working directory’s file path. If you are on
    Windows, you will see a result similar to this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要在R中导入数据，理解文件路径和目录如何工作非常重要。每次使用程序时，你都在计算机上的一个“家庭基地”或*工作目录*上工作。从R引用的任何文件，比如导入数据集时，都假定相对于该工作目录。`getwd()`函数打印工作目录的文件路径。如果你在Windows上，你会看到类似于这样的结果：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For Mac, it will look something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac用户，效果会类似这样：
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: R has a global default working directory, which is the same at each session
    startup. I’m assuming that you are running files from a downloaded or cloned copy
    of the book’s companion repository, and that you are also working from an R script
    in that same folder. In that case, you’re best off setting the working directory
    to this folder, which can be done with the `setwd()` function. If you’re not used
    to working with file paths, it can be tricky to fill this out correctly; fortunately,
    RStudio includes a menu-driven approach for doing it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: R有一个全局默认的工作目录，在每个会话启动时都是相同的。我假设你是从书的伴随仓库的下载或克隆副本中运行文件，并且你也在同一个文件夹中的R脚本中工作。在这种情况下，最好将工作目录设置为此文件夹，可以使用`setwd()`函数完成。如果你不习惯使用文件路径，可能会难以正确填写；幸运的是，RStudio提供了一个基于菜单驱动的方法来完成这个操作。
- en: To change your working directory to the same folder as your current R script,
    go to Session → Set Working Directory → To Source File Location. You should see
    the results of the `setwd()` function appear in the console. Try running `getwd()`
    again; you’ll see that you are now in a different working directory.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要将工作目录更改为与当前R脚本相同的文件夹，请转到Session → Set Working Directory → To Source File Location。你会在控制台看到`setwd()`函数的结果。再次运行`getwd()`，你会看到你现在在不同的工作目录中。
- en: 'Now that we’ve established the working directory, let’s practice interacting
    with files relative to that directory. I have placed a *test-file.csv* file in
    the main folder of the book repository. We can use the `file.exists()` function
    to check whether we can successfully locate it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设定了工作目录，让我们练习与相对于该目录的文件进行交互。我已经在书籍仓库的主文件夹中放置了一个*test-file.csv*文件。我们可以使用`file.exists()`函数来检查我们是否能成功定位它：
- en: '[PRE22]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'I have also placed a copy of this file in the *test-folder* subfolder of the
    repository. This time, we’ll need to specify which subfolder to look in:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将此文件的副本放置在仓库的*test-folder*子文件夹中。这次，我们需要指定要查找的子文件夹：
- en: '[PRE23]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'What happens if we need to go *up* a folder? Try placing a copy of *test-file*
    in whatever folder is one above your current directory. We can use `..` to tell
    R to look one folder up:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要向*上*一个文件夹怎么办？试着将*test-file*的副本放在当前目录的上一级文件夹中。我们可以使用`..`告诉R向上查找一个文件夹：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that you have the hang of locating files in R, let’s actually read some
    in. The book repository contains a [*datasets* folder](https://oreil.ly/wtneb),
    under which is a *star* subfolder. This contains, among other things, two files:
    *districts.csv* and *star.xlsx*.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了在R中定位文件的窍门，让我们实际读取一些数据。书籍仓库包含一个[*datasets*文件夹](https://oreil.ly/wtneb)，其中有一个*star*子文件夹。其中包含了两个文件：*districts.csv*和*star.xlsx*。
- en: To read in *.csv* files, we can use the `read_csv()` function from `readr`.
    This package is part of the `tidyverse` collection, so we don’t need to install
    or load anything new. We will pass the location of the file into the function.
    (Do you see now why understanding working directories and file paths was helpful?)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取*.csv*文件，我们可以使用`readr`中的`read_csv()`函数。该包是`tidyverse`集合的一部分，因此我们无需安装或加载任何新内容。我们将文件的位置传递给该函数。（现在你明白为什么理解工作目录和文件路径是有帮助的了吗？）
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This results in a fair amount of output. First, our columns are specified, and
    we’re told which functions were used to parse the data into R. Next, the first
    few rows of the data are listed, as a *tibble*. This is a modernized take on the
    data frame. It’s still a data frame, and behaves mostly like a data frame, with
    some modifications to make it easier to work with, especially within the `tidyverse`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生相当多的输出。首先，指定了我们的列，并告知了用于将数据解析到R中的函数。接下来，列出了数据的前几行，作为一个*tibble*。这是对数据框的现代化处理。它仍然是一个数据框，并且大部分行为与数据框类似，但做了一些修改以使其更易于在`tidyverse`中使用。
- en: 'Although we were able to read our data into R, we won’t be able to do much
    with it unless we assign it to an object:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们能够将数据读入R中，但除非我们将其分配给一个对象，否则我们将无法对其进行操作：
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Among its many benefits, one nice thing about the tibble is we can print it
    without having to worry about overwhelming the console output; the first 10 rows
    only are printed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: tibble的许多好处之一是，我们可以打印它，而不必担心控制台输出过多；仅打印前10行：
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`readr` does not include a way to import Excel workbooks; we will instead use
    the `readxl` package. While it is part of the `tidyverse`, this package does not
    load with the core suite of packages like `readr` does, which is why we imported
    it separately at the beginning of the chapter.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`readr`不包括导入Excel工作簿的方法；我们将使用`readxl`包。虽然它是`tidyverse`的一部分，但这个包不像`readr`那样随核心套件一起加载，这就是为什么我们在本章开始时单独导入它的原因。'
- en: 'We’ll use the `read_xlsx()` function to similarly import *star.xlsx* as a tibble:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`read_xlsx()`函数来类似地导入*star.xlsx*作为一个tibble：
- en: '[PRE28]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There’s more you can do with `readxl`, such as reading in *.xls* or *.xlsm*
    files and reading in specific worksheets or ranges of a workbook. To learn more,
    check out the package’s [documentation](https://oreil.ly/kuZPE).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`readxl`还可以做更多事情，比如读取*.xls*或*.xlsm*文件以及读取工作簿的特定工作表或范围。要了解更多，请查看该包的[文档](https://oreil.ly/kuZPE)。
- en: Exploring a Data Frame
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据框
- en: 'Earlier you learned about `head()` and `str()` to size up a data frame. Here
    are a few more helpful functions. First, `View()` is a function from RStudio whose
    output will be very welcome to you as an Excel user:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 之前你学过`head()`和`str()`来估算数据框的大小。这里有几个更有用的函数。首先，`View()`是一个来自RStudio的函数，它的输出对你作为Excel用户来说会非常受欢迎：
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: After calling this function, a spreadsheet-like viewer will appear in a new
    window in your Scripts pane. You can sort, filter, and explore your dataset much
    like you would in Excel. However, as the function implies, it’s for viewing *only*.
    You cannot make changes to the data frame from this window.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此函数后，一个类似于电子表格的查看器将出现在你的脚本窗格的新窗口中。你可以像在Excel中一样对数据集进行排序、筛选和探索。然而，正如函数所示，它仅供*查看*。你不能从这个窗口对数据框进行更改。
- en: The `glimpse()` function is another way to print several records of the data
    frame, along with its column names and types. This function comes from `dplyr`,
    which is part of the `tidyverse`. We will lean heavily on `dplyr` in later chapters
    to manipulate data.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`glimpse()`函数是另一种打印数据框的几个记录以及其列名和类型的方式。这个函数来自于`dplyr`，它是`tidyverse`的一部分。在后面的章节中，我们将大量使用`dplyr`来操作数据。'
- en: '[PRE30]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There’s also the `summary()` function from base R, which produces summaries
    of various R objects. When a data frame is passed into `summary()`, some basic
    descriptive statistics are provided:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 还有基本的R中的`summary()`函数，它产生各种R对象的摘要。当一个数据框被传递到`summary()`中时，会提供一些基本的描述性统计数据：
- en: '[PRE31]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Many other packages include their own version of descriptive statistics; one
    of my favorite is the `describe()` function from `psych`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他包包括它们自己版本的描述性统计；我最喜欢的之一是`psych`中的`describe()`函数：
- en: '[PRE32]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you’re not familiar with all of these descriptive statistics, you know what
    to do: *check the function’s documentation*.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对所有这些描述性统计数据不熟悉，你知道该做什么：*查看函数的文档*。
- en: Indexing and Subsetting Data Frames
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框索引和子集
- en: Earlier in this section we created a small data frame `roster` containing the
    names and heights of four individuals. Let’s demonstrate some basic data frame
    manipulation techniques with this object.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的前面，我们创建了一个小的数据框`roster`，其中包含了四个人的姓名和身高。让我们用这个对象演示一些基本的数据框操作技巧。
- en: 'In Excel, you can use the `INDEX()` function to refer to both the row and column
    positions of a table, as shown in [Figure 7-4](#data-frame-index-excel):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Excel中，你可以使用`INDEX()`函数来引用表格的行和列位置，如[图 7-4](#data-frame-index-excel)所示：
- en: '![Indexing in Excel](assets/aina_0704.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Excel中的索引](assets/aina_0704.png)'
- en: Figure 7-4\. The `INDEX()` function on an Excel table
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-4。Excel表格上的`INDEX()`函数
- en: 'This will work similarly in R. We’ll use the same bracket notation as we to
    with index vectors, but this time we’ll refer to both the row and column position:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这在R中也会类似地工作。我们将使用与索引向量相同的方括号表示法，但这次我们将同时引用行和列的位置：
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Again, we can use the `:` operator to retrieve all elements within a given
    range:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们可以使用`:`运算符来检索给定范围内的所有元素：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It’s also possible to select an entire row or column by leaving its index blank,
    or to use the `c()` function to subset nonconsecutive elements:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过将其索引留空来选择整行或整列，或者使用`c()`函数来选择非连续的元素：
- en: '[PRE35]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If we just want to access one column of the data frame, we can use the `$`
    operator. Interestingly, this results in a *vector*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想访问数据框的一列，我们可以使用`$`运算符。有趣的是，这会产生一个*向量*：
- en: '[PRE36]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This confirms that a data frame is indeed a list of vectors of equal length.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了数据框确实是一个等长向量的列表。
- en: Writing Data Frames
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 写入数据框
- en: 'As mentioned earlier, it’s typical to read data into R, operate on it, and
    then export the results elsewhere. To write a data frame to a *.csv* file, you
    can use the `write_csv()` function from `readr`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，将数据读入 R 中，对其进行操作，然后将结果导出到其他地方是很典型的。要将数据框写入 *.csv* 文件，您可以使用 `readr` 中的
    `write_csv()` 函数：
- en: '[PRE37]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If you have the working directory set to the book’s companion repository, you
    should find this file waiting for you in the *output* folder.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的工作目录设置为本书的伴随存储库，你应该会在 *output* 文件夹中找到这个文件。
- en: 'Unfortunately, the `readxl` package does not include a function to write data
    to an Excel workbook. We can, however, use `writexl` and its `write_xlsx()` function:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`readxl` 包中没有包含将数据写入 Excel 工作簿的功能。不过，我们可以使用 `writexl` 及其 `write_xlsx()`
    函数：
- en: '[PRE38]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Conclusion
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you progressed from single-element objects, to larger vectors,
    and finally to data frames. While we’ll be working with data frames for the remainder
    of the book, it’s helpful to keep in mind that they are collections of vectors
    and behave largely in the same way. Coming up, you will learn how to analyze,
    visualize, and ultimately test relationships in R data frames.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你从单元素对象进展到更大的向量，最后到数据框。虽然我们在本书的剩余部分将会使用数据框，但记住它们是向量的集合，并且在很大程度上行为类似。接下来，你将学习如何分析、可视化和最终测试
    R 数据框中的关系。
- en: Exercises
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Do the following exercises to test your knowledge of data structures in R:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习，测试你在 R 中数据结构的知识：
- en: Create a character vector of five elements, and then access the first and fourth
    elements of this vector.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含五个元素的字符向量，然后访问这个向量的第一个和第四个元素。
- en: Create two vectors `x` and `y` of length 4, one containing numeric and the other
    logical values. Multiply them and pass the result to `z`. What is the result?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个长度为 4 的向量 `x` 和 `y`，其中一个包含数值值，另一个包含逻辑值。将它们相乘并将结果传递给 `z`。结果是什么？
- en: Download the `nycflights13` package from CRAN. How many datasets are included
    with this package?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 CRAN 下载 `nycflights13` 包。这个包中包含多少个数据集？
- en: One of these datasets is called `airports`. Print the first few rows of this
    data frame as well as the descriptive statistics.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一个数据集叫做 `airports`。打印这个数据框的前几行以及描述性统计信息。
- en: Another is called `weather`. Find the 10th through 12th rows and the 4th through
    7th columns of this data frame. Write the results to a *.csv* file and an Excel
    workbook.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个叫做 `weather`。找到这个数据框的第 10 到 12 行以及第 4 到 7 列。将结果写入一个 *.csv* 文件和一个 Excel 工作簿中。
