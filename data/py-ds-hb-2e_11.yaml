- en: Chapter 9\. Comparisons, Masks, and Boolean Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章\. 比较、掩码和布尔逻辑
- en: 'This chapter covers the use of Boolean masks to examine and manipulate values
    within NumPy arrays. Masking comes up when you want to extract, modify, count,
    or otherwise manipulate values in an array based on some criterion: for example,
    you might wish to count all values greater than a certain value, or remove all
    outliers that are above some threshold. In NumPy, Boolean masking is often the
    most efficient way to accomplish these types of tasks.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用布尔掩码来检查和操作 NumPy 数组中的值。当你想要基于某些条件提取、修改、计数或以其他方式操作数组中的值时，掩码就会出现：例如，你可能希望计算大于某个特定值的所有值，或者删除所有超过某个阈值的异常值。在
    NumPy 中，布尔掩码通常是实现这些任务的最高效方式。
- en: 'Example: Counting Rainy Days'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：统计下雨天数
- en: 'Imagine you have a series of data that represents the amount of precipitation
    each day for a year in a given city. For example, here we’ll load the daily rainfall
    statistics for the city of Seattle in 2015, using Pandas (see [Part III](part03.xhtml#section-0300-introduction-to-pandas)):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一系列数据，代表了一个城市一年中每天的降水量。例如，在这里我们将加载西雅图市 2015 年的每日降雨统计数据，使用 Pandas（参见[第三部分](part03.xhtml#section-0300-introduction-to-pandas)）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The array contains 365 values, giving daily rainfall in millimeters from January
    1 to December 31, 2015.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数组包含 365 个值，从 2015 年 1 月 1 日到 12 月 31 日的每日降雨量（以毫米为单位）。
- en: 'As a first quick visualization, let’s look at the histogram of rainy days in
    [Figure 9-1](#fig_0206-boolean-arrays-and-masks_files_in_output_6_0), which was
    generated using Matplotlib (we will explore this tool more fully in [Part IV](part04.xhtml#section-0400-introduction-to-matplotlib)):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先快速可视化，让我们来看一下[图 9-1](#fig_0206-boolean-arrays-and-masks_files_in_output_6_0)中的下雨天数直方图，这是使用
    Matplotlib 生成的（我们将在[第四部分](part04.xhtml#section-0400-introduction-to-matplotlib)中详细探讨这个工具）：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![output 6 0](assets/output_6_0.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![output 6 0](assets/output_6_0.png)'
- en: Figure 9-1\. Histogram of 2015 rainfall in Seattle
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 9-1\. 西雅图 2015 年降雨直方图
- en: 'This histogram gives us a general idea of what the data looks like: despite
    the city’s rainy reputation, the vast majority of days in Seattle saw near zero
    measured rainfall in 2015\. But this doesn’t do a good job of conveying some information
    we’d like to see: for example, how many rainy days were there in the year? What
    was the average precipitation on those rainy days? How many days were there with
    more than 10 mm of rainfall?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个直方图给了我们一个关于数据外观的概括性的想法：尽管西雅图以多雨而闻名，2015 年西雅图大部分日子都几乎没有测得的降水量。但这并没有很好地传达一些我们想要看到的信息：例如，整年有多少天下雨？在那些下雨的日子里，平均降水量是多少？有多少天降水量超过
    10 毫米？
- en: 'One approach to this would be to answer these questions by hand: we could loop
    through the data, incrementing a counter each time we see values in some desired
    range. But for reasons discussed throughout this chapter, such an approach is
    very inefficient from the standpoint of both time writing code and time computing
    the result. We saw in [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)
    that NumPy’s ufuncs can be used in place of loops to do fast element-wise arithmetic
    operations on arrays; in the same way, we can use other ufuncs to do element-wise
    *comparisons* over arrays, and we can then manipulate the results to answer the
    questions we have. We’ll leave the data aside for now, and discuss some general
    tools in NumPy to use *masking* to quickly answer these types of questions.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种方法是通过手工来回答这些问题：我们可以遍历数据，每次看到在某个期望范围内的值时增加一个计数器。但是出于本章讨论的原因，从编写代码的时间和计算结果的时间来看，这种方法非常低效。我们在[第六章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)中看到，NumPy
    的通用函数（ufuncs）可以用来替代循环，在数组上进行快速的逐元素算术操作；同样地，我们可以使用其他通用函数在数组上进行逐元素的*比较*，然后可以操作结果来回答我们的问题。暂且把数据放在一边，讨论一下
    NumPy 中一些常用工具，使用*掩码*来快速回答这类问题。
- en: Comparison Operators as Ufuncs
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较运算符作为通用函数
- en: '[Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs) introduced
    ufuncs, and focused in particular on arithmetic operators. We saw that using `+`,
    `-`, `*`, `/`, and other operators on arrays leads to element-wise operations.
    NumPy also implements comparison operators such as `<` (less than) and `>` (greater
    than) as element-wise ufuncs. The result of these comparison operators is always
    an array with a Boolean data type. All six of the standard comparison operations
    are available:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第六章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs)介绍了ufuncs，特别关注算术运算符。我们看到，在数组上使用
    `+`, `-`, `*`, `/` 和其他运算符会导致逐元素操作。NumPy 还实现了比较运算符，如 `<`（小于）和 `>`（大于）作为逐元素的ufuncs。这些比较运算符的结果始终是一个布尔数据类型的数组。标准的六种比较操作都是可用的：'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is also possible to do an element-wise comparison of two arrays, and to
    include compound expressions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以对两个数组进行逐元素比较，并包括复合表达式：
- en: '[PRE10]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As in the case of arithmetic operators, the comparison operators are implemented
    as ufuncs in NumPy; for example, when you write `x < 3`, internally NumPy uses
    `np.less(x, 3)`. A summary of the comparison operators and their equivalent ufuncs
    is shown here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就像算术运算符的情况一样，NumPy 中的比较运算符也被实现为ufuncs；例如，当你写 `x < 3` 时，NumPy 内部使用 `np.less(x,
    3)`。这里显示了比较运算符及其等效的ufuncs的摘要：
- en: '| Operator | Equivalent ufunc | Operator | Equivalent ufunc |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 操作符 | 等效的ufunc | 操作符 | 等效的ufunc |'
- en: '| --- | --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `==` | `np.equal` | `!=` | `np.not_equal` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `==` | `np.equal` | `!=` | `np.not_equal` |'
- en: '| `<` | `np.less` | `<=` | `np.less_equal` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `<` | `np.less` | `<=` | `np.less_equal` |'
- en: '| `>` | `np.greater` | `>=` | `np.greater_equal` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `>` | `np.greater` | `>=` | `np.greater_equal` |'
- en: 'Just as in the case of arithmetic ufuncs, these will work on arrays of any
    size and shape. Here is a two-dimensional example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就像算术ufuncs的情况一样，这些函数适用于任何大小和形状的数组。这里是一个二维数组的例子：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In each case, the result is a Boolean array, and NumPy provides a number of
    straightforward patterns for working with these Boolean results.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，结果都是一个布尔数组，NumPy 提供了一些简单的模式来处理这些布尔结果。
- en: Working with Boolean Arrays
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用布尔数组
- en: 'Given a Boolean array, there are a host of useful operations you can do. We’ll
    work with `x`, the two-dimensional array we created earlier:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个布尔数组，你可以进行许多有用的操作。我们将使用我们之前创建的二维数组 `x`：
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Counting Entries
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数条目
- en: 'To count the number of `True` entries in a Boolean array, `np.count_nonzero`
    is useful:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算布尔数组中 `True` 条目的数量，可以使用 `np.count_nonzero`：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see that there are eight array entries that are less than 6\. Another way
    to get at this information is to use `np.sum`; in this case, `False` is interpreted
    as `0`, and `True` is interpreted as `1`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有八个数组条目小于 6。获取这些信息的另一种方法是使用 `np.sum`；在这种情况下，`False` 被解释为 `0`，`True` 被解释为
    `1`：
- en: '[PRE15]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The benefit of `np.sum` is that, like with other NumPy aggregation functions,
    this summation can be done along rows or columns as well:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.sum` 的好处在于，与其他 NumPy 聚合函数一样，这种求和可以沿着行或列进行：'
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This counts the number of values less than 6 in each row of the matrix.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这会统计矩阵每行中小于 6 的值的数量。
- en: 'If we’re interested in quickly checking whether any or all the values are `True`,
    we can use (you guessed it) `np.any` or `np.all`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有兴趣快速检查任何或所有的值是否为 `True`，我们可以使用（你猜对了）`np.any` 或 `np.all`：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`np.all` and `np.any` can be used along particular axes as well. For example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.all` 和 `np.any` 也可以沿着特定的轴使用。例如：'
- en: '[PRE21]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here all the elements in the third row are less than 8, while this is not the
    case for others.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里第三行的所有元素都小于 8，而其他行则不是这样。
- en: 'Finally, a quick warning: as mentioned in [Chapter 7](ch07.xhtml#section-0204-computation-on-arrays-aggregates),
    Python has built-in `sum`, `any`, and `all` functions. These have a different
    syntax than the NumPy versions, and in particular will fail or produce unintended
    results when used on multidimensional arrays. Be sure that you are using `np.sum`,
    `np.any`, and `np.all` for these examples!'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一个快速的警告：如第七章中提到的，Python 中有内置的 `sum`、`any` 和 `all` 函数。它们与 NumPy 版本的语法不同，特别是在多维数组上使用时可能会失败或产生意外的结果。确保在这些示例中使用
    `np.sum`、`np.any` 和 `np.all`！
- en: Boolean Operators
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔运算符
- en: We’ve already seen how we might count, say, all days with less than 20 mm of
    rain, or all days with more than 10 mm of rain. But what if we want to know how
    many days there were with more than 10 mm and less than 20 mm of rain? We can
    accomplish this with Python’s *bitwise logic operators*, `&`, `|`, `^`, and `~`.
    Like with the standard arithmetic operators, NumPy overloads these as ufuncs that
    work element-wise on (usually Boolean) arrays.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何计算例如所有降雨量小于20毫米的天数，或所有降雨量大于10毫米的天数。但是如果我们想知道降雨量大于10毫米且小于20毫米的天数有多少呢？我们可以用Python的*位逻辑运算符*
    `&`, `|`, `^`, 和 `~` 来实现这一点。与标准算术运算符一样，NumPy将它们重载为ufuncs，这些ufuncs在（通常是布尔）数组上逐元素工作。
- en: 'For example, we can address this sort of compound question as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以这样处理这种复合问题：
- en: '[PRE22]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This tells us that there were 16 days with rainfall of between 10 and 20 millimeters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，有16天的降雨量在10到20毫米之间。
- en: 'The parentheses here are important. Because of operator precedence rules, with
    the parentheses removed this expression would be evaluated as follows, which results
    in an error:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的括号很重要。由于操作符优先级规则，如果去掉括号，这个表达式将按照以下方式进行评估，从而导致错误：
- en: '[PRE23]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s demonstrate a more complicated expression. Using De Morgan’s laws, we
    can compute the same result in a different manner:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们演示一个更复杂的表达式。使用德摩根定律，我们可以以不同的方式计算相同的结果：
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Combining comparison operators and Boolean operators on arrays can lead to a
    wide range of efficient logical operations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组上结合比较操作符和布尔操作符，可以进行广泛的高效逻辑操作。
- en: 'The following table summarizes the bitwise Boolean operators and their equivalent
    ufuncs:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了位运算布尔操作符及其等效的ufuncs：
- en: '| Operator | Equivalent ufunc | Operator | Equivalent ufunc |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 等效ufunc | 运算符 | 等效ufunc |'
- en: '| --- | --- | --- | --- |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `&` | `np.bitwise_and` |  | `np.bitwise_or` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `&` | `np.bitwise_and` |  | `np.bitwise_or` |'
- en: '| `^` | `np.bitwise_xor` | `~` | `np.bitwise_not` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `^` | `np.bitwise_xor` | `~` | `np.bitwise_not` |'
- en: 'Using these tools, we can start to answer many of the questions we might have
    about our weather data. Here are some examples of results we can compute when
    combining Boolean operations with aggregations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些工具，我们可以开始回答关于我们天气数据的许多问题。以下是将布尔操作与聚合结合时可以计算的一些结果示例：
- en: '[PRE25]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Boolean Arrays as Masks
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔数组作为掩码
- en: 'In the preceding section we looked at aggregates computed directly on Boolean
    arrays. A more powerful pattern is to use Boolean arrays as masks, to select particular
    subsets of the data themselves. Let’s return to our `x` array from before:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们看过直接在布尔数组上计算的聚合。更强大的模式是使用布尔数组作为掩码，选择数据本身的特定子集。让我们回到之前的`x`数组：
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Suppose we want an array of all values in the array that are less than, say,
    5\. We can obtain a Boolean array for this condition easily, as we’ve already
    seen:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要一个数组，其中所有值都小于，比如说，5。我们可以轻松地为这个条件获取一个布尔数组，就像我们已经看到的那样：
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, to *select* these values from the array, we can simply index on this Boolean
    array; this is known as a *masking* operation:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要从数组中*选择*这些值，我们可以简单地在这个布尔数组上进行索引；这称为*掩码*操作：
- en: '[PRE28]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What is returned is a one-dimensional array filled with all the values that
    meet this condition; in other words, all the values in positions at which the
    mask array is `True`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的是一个填充有所有满足条件值的一维数组；换句话说，所有掩码数组为`True`位置上的值。
- en: 'We are then free to operate on these values as we wish. For example, we can
    compute some relevant statistics on our Seattle rain data:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以自由地按照我们的意愿操作这些值。例如，我们可以计算我们西雅图降雨数据的一些相关统计信息：
- en: '[PRE29]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: By combining Boolean operations, masking operations, and aggregates, we can
    very quickly answer these sorts of questions about our dataset.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合布尔操作、掩码操作和聚合，我们可以非常快速地回答关于我们数据集的这些问题。
- en: Using the Keywords and/or Versus the Operators &/|
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关键词 and/or 与操作符 &/|
- en: One common point of confusion is the difference between the keywords `and` and
    `or` on the one hand, and the operators `&` and `|` on the other. When would you
    use one versus the other?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的混淆点是关键词 `and` 和 `or` 与操作符 `&` 和 `|` 之间的区别。什么情况下会使用其中一个而不是另一个？
- en: 'The difference is this: `and` and `or` operate on the object as a whole, while
    `&` and `|` operate on the elements within the object.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 区别在于：`and` 和 `or` 在整个对象上操作，而 `&` 和 `|` 在对象内的元素上操作。
- en: 'When you use `and` or `or`, it is equivalent to asking Python to treat the
    object as a single Boolean entity. In Python, all nonzero integers will evaluate
    as `True`. Thus:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用`and`或`or`时，相当于要求Python将对象视为单个布尔实体。在Python中，所有非零整数都将被评估为`True`。因此：
- en: '[PRE30]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When you use `&` and `|` on integers, the expression operates on the bitwise
    representation of the element, applying the *and* or the *or* to the individual
    bits making up the number:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在整数上使用`&`和`|`时，表达式将作用于元素的位表示，对构成数字的各个位应用*与*或*或*：
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Notice that the corresponding bits of the binary representation are compared
    in order to yield the result.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要产生结果，需要按顺序比较二进制表示的相应位。
- en: 'When you have an array of Boolean values in NumPy, this can be thought of as
    a string of bits where `1 = True` and `0 = False`, and `&` and `|` will operate
    similarly to in the preceding examples:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在NumPy中有一个布尔值数组时，可以将其视为一个比特串，其中`1 = True`，`0 = False`，`&`和`|`将类似于前面的示例中的操作：
- en: '[PRE37]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'But if you use `or` on these arrays it will try to evaluate the truth or falsehood
    of the entire array object, which is not a well-defined value:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你在这些数组上使用`or`，它将尝试评估整个数组对象的真假，这不是一个明确定义的值：
- en: '[PRE38]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Similarly, when evaluating a Boolean expression on a given array, you should
    use `|` or `&` rather than `or` or `and`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当对给定数组评估布尔表达式时，应该使用`|`或`&`而不是`or`或`and`：
- en: '[PRE39]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Trying to evaluate the truth or falsehood of the entire array will give the
    same `ValueError` we saw previously:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试评估整个数组的真假将会产生与我们之前看到的相同的`ValueError`：
- en: '[PRE40]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'So, remember this: `and` and `or` perform a single Boolean evaluation on an
    entire object, while `&` and `|` perform multiple Boolean evaluations on the content
    (the individual bits or bytes) of an object. For Boolean NumPy arrays, the latter
    is nearly always the desired operation.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，请记住：`and`和`or`对整个对象执行单个布尔评估，而`&`和`|`对对象的内容（各个位或字节）执行多个布尔评估。对于布尔NumPy数组，后者几乎总是期望的操作。
