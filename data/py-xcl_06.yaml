- en: Chapter 4\. NumPy Foundations
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 章 NumPy 基础
- en: 'As you may recall from [Chapter 1](index_split_007.html#filepos32075), NumPy
    is the core package for scientific computing in Python, providing support for
    array-based calculations and linear algebra. As NumPy is the backbone of pandas,
    I am going to introduce its basics in this chapter: after explaining what a NumPy
    array is, we will look into vectorization and broadcasting, two important concepts
    that allow you to write concise mathematical code and that you will find again
    in pandas. After that, we’re going to see why NumPy offers special functions called
    universal functions before we wrap this chapter up by learning how to get and
    set values of an array and by explaining the difference between a view and a copy
    of a NumPy array. Even if we will hardly use NumPy directly in this book, knowing
    its basics will make it easier to learn pandas in the next chapter.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从[第一章](index_split_007.html#filepos32075)中记得的那样，NumPy 是 Python 中科学计算的核心包，提供对基于数组的计算和线性代数的支持。由于
    NumPy 是 pandas 的基础，我将在本章介绍其基础知识：解释了 NumPy 数组是什么之后，我们将研究向量化和广播，这两个重要概念允许你编写简洁的数学代码，并在
    pandas 中再次遇到。之后，我们将看到为什么 NumPy 提供了称为通用函数的特殊函数，然后通过学习如何获取和设置数组的值以及解释 NumPy 数组的视图和副本之间的区别来结束本章。即使在本书中我们几乎不会直接使用
    NumPy，了解其基础知识将使我们更容易学习下一章的 pandas。
- en: Getting Started with NumPy
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 入门
- en: In this section, we’ll learn about one- and two-dimensional NumPy arrays and
    what’s behind the technical terms vectorization, broadcasting, and universal function.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将学习一维和二维 NumPy 数组及背后的技术术语向量化、广播和通用函数。
- en: NumPy Array
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组
- en: 'To perform array-based calculations with nested lists, as we met them in the
    last chapter, you would have to write some sort of loop. For example, to add a
    number to every element in a nested list, you can use the following nested list
    comprehension:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行基于数组的计算，如上一章节中遇到的嵌套列表，你需要编写某种形式的循环。例如，要将一个数字添加到嵌套列表中的每个元素，可以使用以下嵌套列表推导式：
- en: '`In``[``1``]:``matrix``=``[[``1``,``2``,``3``],``[``4``,``5``,``6``],``[``7``,``8``,``9``]]`'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``1``]:``matrix``=``[[``1``,``2``,``3``],``[``4``,``5``,``6``],``[``7``,``8``,``9``]]`'
- en: '`In``[``2``]:``[[``i``+``1``for``i``in``row``]``for``row``in``matrix``]`'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``2``]:``[[``i``+``1``for``i``in``row``]``for``row``in``matrix``]`'
- en: '`Out[2]: [[2, 3, 4], [5, 6, 7], [8, 9, 10]]`'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[2]: [[2, 3, 4], [5, 6, 7], [8, 9, 10]]`'
- en: This isn’t very readable and more importantly, if you do this with big arrays,
    looping through each element becomes very slow. Depending on your use case and
    the size of the arrays, calculating with NumPy arrays instead of Python lists
    can make your calculations from a couple of times to around a hundred times faster.
    NumPy achieves this performance by making use of code that was written in C or
    Fortran—these are compiled programming languages that are much faster than Python.
    A NumPy array is an N-dimensional array for homogenous data. Homogenous means
    that all elements in the array need to be of the same data type. Most commonly,
    you are dealing with one- and two-dimensional arrays of floats as schematically
    displayed in [Figure 4-1](#filepos439974).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不太易读，更重要的是，如果你使用大数组，逐个元素进行循环会变得非常缓慢。根据你的用例和数组的大小，使用 NumPy 数组而不是 Python 列表可以使计算速度提高几倍甚至提高到一百倍。NumPy
    通过利用用 C 或 Fortran 编写的代码来实现这种性能提升——这些是编译性语言，比 Python 快得多。NumPy 数组是一种用于同类型数据的 N
    维数组。同类型意味着数组中的所有元素都需要是相同的数据类型。最常见的情况是处理浮点数的一维和二维数组，如[图 4-1](#filepos439974)所示。
- en: '![](images/00042.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00042.jpg)'
- en: Figure 4-1\. A one-dimensional and two-dimensional NumPy array
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-1 一维和二维 NumPy 数组
- en: 'Let’s create a one- and two-dimensional array to work with throughout this
    chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个一维和二维数组，在本章节中使用：
- en: '`In``[``3``]:``# First, let''s import NumPy``import``numpy``as``np`'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``3``]:``# 首先，让我们导入 NumPy``import``numpy``as``np`'
- en: '`In``[``4``]:``# Constructing an array with a simple list results in a 1d array``array1``=``np``.``array``([``10``,``100``,``1000.``])`'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``4``]:``# 使用一个简单列表构建一个一维数组``array1``=``np``.``array``([``10``,``100``,``1000.``])`'
- en: '`In``[``5``]:``# Constructing an array with a nested list results in a 2d array``array2``=``np``.``array``([[``1.``,``2.``,``3.``],``[``4.``,``5.``,``6.``]])`'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``5``]:``# 使用嵌套列表构建一个二维数组``array2``=``np``.``array``([[``1.``,``2.``,``3.``],``[``4.``,``5.``,``6.``]])`'
- en: ARRAY DIMENSION
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数组维度
- en: 'It’s important to note the difference between a one- and two-dimensional array:
    a one-dimensional array has only one axis and hence does not have an explicit
    column or row orientation. While this behaves like arrays in VBA, you may have
    to get used to it if you come from a language like MATLAB, where one-dimensional
    arrays always have a column or row orientation.'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重要的是要注意一维和二维数组之间的区别：一维数组只有一个轴，因此没有明确的列或行方向。虽然这类似于VBA中的数组，但如果你来自像MATLAB这样的语言，你可能需要习惯它，因为一维数组在那里始终具有列或行方向。
- en: 'Even if `array1` consists of integers except for the last element (which is
    a float), the homogeneity of NumPy arrays forces the data type of the array to
    be `float64`, which is capable of accommodating all elements. To learn about an
    array’s data type, access its `dtype` attribute:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 即使`array1`由整数组成，除了最后一个元素（它是一个浮点数），NumPy数组的同质性强制数组的数据类型为`float64`，它能够容纳所有元素。要了解数组的数据类型，请访问其`dtype`属性：
- en: '`In``[``6``]:``array1``.``dtype`'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``6``]:``array1``.``dtype`'
- en: '`Out[6]: dtype(''float64'')`'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[6]: dtype(''float64'')`'
- en: 'Since `dtype` gives you back `float64` instead of `float` which we met in the
    last chapter, you may have guessed that NumPy uses its own numerical data types,
    which are more granular than Python’s data types. This usually isn’t an issue
    though, as most of the time, conversion between the different data types in Python
    and NumPy happens automatically. If you ever need to explicitly convert a NumPy
    data type to one of Python’s basic data types, simply use the corresponding constructor
    (I will say more about accessing an element from an array shortly):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`dtype`返回的是`float64`而不是我们在上一章中遇到的`float`，你可能已经猜到NumPy使用了比Python数据类型更精细的自己的数值数据类型。不过，通常这不是问题，因为大多数情况下，Python和NumPy之间的不同数据类型转换是自动的。如果你需要将NumPy数据类型显式转换为Python基本数据类型，只需使用相应的构造函数（我稍后会详细说明如何从数组中访问元素）：
- en: '`In``[``7``]:``float``(``array1``[``0``])`'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``7``]:``float``(``array1``[``0``])`'
- en: '`Out[7]: 10.0`'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[7]: 10.0`'
- en: For a full list of NumPy’s data types, see the [NumPy docs](https://oreil.ly/irDyH).
    With NumPy arrays, you can write simple code to perform array-based calculations,
    as we will see next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看NumPy数据类型的完整列表，请参阅[NumPy文档](https://oreil.ly/irDyH)。使用NumPy数组，你可以编写简单的代码来执行基于数组的计算，我们接下来会看到。
- en: Vectorization and Broadcasting
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量化和广播
- en: 'If you build the sum of a scalar and a NumPy array, NumPy will perform an element-wise
    operation, which means that you don’t have to loop through the elements yourself.
    The NumPy community refers to this as vectorization. It allows you to write concise
    code, practically representing the mathematical notation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你构建一个标量和一个NumPy数组的和，NumPy将执行逐元素操作，这意味着你不必自己循环遍历元素。NumPy社区将这称为矢量化。它允许你编写简洁的代码，几乎与数学符号一样：
- en: '`In``[``8``]:``array2``+``1`'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``8``]:``array2``+``1`'
- en: '`Out[8]: array([[2., 3., 4.],                [5., 6., 7.]])`'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[8]: array([[2., 3., 4.],                [5., 6., 7.]])`'
- en: SCALAR
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SCALAR
- en: Scalar refers to a basic Python data type like a float or a string. This is
    to differentiate them from data structures with multiple elements like lists and
    dictionaries or one- and two-dimensional NumPy arrays.
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 标量指的是像浮点数或字符串这样的基本Python数据类型。这是为了将它们与具有多个元素的数据结构如列表和字典或一维和二维NumPy数组区分开来。
- en: 'The same principle applies when you work with two arrays: NumPy performs the
    operation element-wise:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理两个数组时，相同的原则也适用：NumPy逐元素执行操作：
- en: '`In``[``9``]:``array2``*``array2`'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``9``]:``array2``*``array2`'
- en: '`Out[9]: array([[ 1.,  4.,  9.],                [16., 25., 36.]])`'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[9]: array([[ 1.,  4.,  9.],                [16., 25., 36.]])`'
- en: 'If you use two arrays with different shapes in an arithmetic operation, NumPy
    extends—if possible—the smaller array automatically across the larger array so
    that their shapes become compatible. This is called broadcasting:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在算术运算中使用两个形状不同的数组，NumPy会自动将较小的数组扩展到较大的数组，以使它们的形状兼容。这称为广播：
- en: '`In``[``10``]:``array2``*``array1`'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``10``]:``array2``*``array1`'
- en: '`Out[10]: array([[  10.,  200., 3000.],                 [  40.,  500., 6000.]])`'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[10]: array([[  10.,  200., 3000.],                 [  40.,  500., 6000.]])`'
- en: To perform matrix multiplications or dot products, use the `@` operator:[1](#filepos482316)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行矩阵乘法或点积，请使用`@`运算符：[1](#filepos482316)
- en: '`In``[``11``]:``array2``@``array2``.``T``# array2.T is a shortcut for array2.transpose()`'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``11``]:``array2``@``array2``.``T``# array2.T是array2.transpose()的快捷方式`'
- en: '`Out[11]: array([[14., 32.],                 [32., 77.]])`'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[11]: array([[14., 32.],                 [32., 77.]])`'
- en: Don’t be intimidated by the terminology I’ve introduced in this section such
    as scalar, vectorization, or broadcasting! If you have ever worked with arrays
    in Excel, this should all feel very natural as shown in [Figure 4-2](#filepos453704).
    The screenshot is taken from array_calculations.xlsx, which you will find in the
    xl directory of the companion repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被本节介绍的术语（如标量、向量化或广播）吓到！如果你曾在Excel中使用过数组，这些内容应该会感到非常自然，如[图 4-2](#filepos453704)所示。该截图来自于array_calculations.xlsx，在配套库的xl目录下可以找到。
- en: '![](images/00052.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00052.jpg)'
- en: Figure 4-2\. Array-based calculations in Excel
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-2\. Excel中基于数组的计算
- en: You know now that arrays perform arithmetic operations element-wise, but how
    can you apply a function on every element in an array? This is what universal
    functions are here for.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道数组按元素进行算术运算，但如何在数组的每个元素上应用函数呢？这就是通用函数的用处所在。
- en: Universal Functions (ufunc)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数（ufunc）
- en: 'Universal functions (ufunc) work on every element in a NumPy array. For example,
    if you use Python’s standard square root function from the `math` module on a
    NumPy array, you will get an error:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通用函数（ufunc）作用于NumPy数组中的每个元素。例如，若在NumPy数组上使用Python标准的平方根函数`math`模块，则会产生错误：
- en: '`In``[``12``]:``import``math`'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``12``]:``import``math`'
- en: '`In``[``13``]:``math``.``sqrt``(``array2``)``# This will raise en Error`'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``13``]:``math``.``sqrt``(``array2``)``# This will raise en Error`'
- en: '`---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last) <ipython-input-13-5c37e8f41094>
    in <module> ----> 1 math.sqrt(array2)  # This will raise en Error  TypeError:
    only size-1 arrays can be converted to Python scalars`'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last) <ipython-input-13-5c37e8f41094>
    in <module> ----> 1 math.sqrt(array2)  # This will raise en Error  TypeError:
    only size-1 arrays can be converted to Python scalars`'
- en: 'You could, of course, write a nested loop to get the square root of every element,
    then build a NumPy array again from the result:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你也可以编写嵌套循环来获取每个元素的平方根，然后从结果中再次构建一个NumPy数组：
- en: '`In``[``14``]:``np``.``array``([[``math``.``sqrt``(``i``)``for``i``in``row``]``for``row``in``array2``])`'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``14``]:``np``.``array``([[``math``.``sqrt``(``i``)``for``i``in``row``]``for``row``in``array2``])`'
- en: '`Out[14]: array([[1.        , 1.41421356, 1.73205081],                 [2.       
    , 2.23606798, 2.44948974]])`'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[14]: array([[1.        , 1.41421356, 1.73205081],                 [2.       
    , 2.23606798, 2.44948974]])`'
- en: 'This will work in cases where NumPy doesn’t offer a ufunc and the array is
    small enough. However, if NumPy has a ufunc, use it, as it will be much faster
    with big arrays—apart from being easier to type and read:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy没有提供ufunc且数组足够小的情况下，这种方式可以奏效。然而，若NumPy有对应的ufunc，请使用它，因为它在处理大数组时速度更快——而且更易于输入和阅读：
- en: '`In``[``15``]:``np``.``sqrt``(``array2``)`'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``15``]:``np``.``sqrt``(``array2``)`'
- en: '`Out[15]: array([[1.        , 1.41421356, 1.73205081],                 [2.       
    , 2.23606798, 2.44948974]])`'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[15]: array([[1.        , 1.41421356, 1.73205081],                 [2.       
    , 2.23606798, 2.44948974]])`'
- en: 'Some of NumPy’s ufuncs, like `sum`, are additionally available as array methods:
    if you want the sum of each column, do the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的一些ufunc，例如`sum`，也可以作为数组方法使用：如果要对每列求和，则执行以下操作：
- en: '`In``[``16``]:``array2``.``sum``(``axis``=``0``)``# Returns a 1d array`'
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``16``]:``array2``.``sum``(``axis``=``0``)``# 返回一个1维数组`'
- en: '`Out[16]: array([5., 7., 9.])`'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[16]: array([5., 7., 9.])`'
- en: 'The argument `axis=0` refers to the axis along the rows while `axis=1` refers
    to the axis along the columns, as depicted in [Figure 4-1](#filepos439974). Leaving
    the `axis` argument away sums up the whole array:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`axis=0`表示沿着行的轴，而`axis=1`表示沿着列的轴，如[图 4-1](#filepos439974)所示。若省略`axis`参数，则对整个数组求和：
- en: '`In``[``17``]:``array2``.``sum``()`'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``17``]:``array2``.``sum``()``'
- en: '`Out[17]: 21.0`'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[17]: 21.0`'
- en: You will meet more NumPy ufuncs throughout this book, as they can be used with
    pandas DataFrames.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本书后续部分还会介绍更多NumPy的ufunc，因为它们可与pandas的DataFrame一起使用。
- en: So far, we’ve always worked with the entire array. The next section shows you
    how to manipulate parts of an array and introduces a few helpful array constructors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理整个数组。下一节将向你展示如何操作数组的部分，并介绍一些有用的数组构造函数。
- en: Creating and Manipulating Arrays
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和操作数组
- en: I’ll start this section by getting and setting specific elements of an array
    before introducing a few useful array constructors, including one to create pseudorandom
    numbers that you could use for a Monte Carlo simulation. I’ll wrap this section
    up by explaining the difference between a view and a copy of an array.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍一些有用的数组构造函数之前，我将从获取和设置数组元素的角度开始这一节，包括一种用于生成伪随机数的构造函数，您可以将其用于蒙特卡洛模拟。最后，我将解释数组的视图和副本之间的区别。
- en: Getting and Setting Array Elements
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 获取和设置数组元素
- en: 'In the last chapter, I showed you how to index and slice lists to get access
    to specific elements. When you work with nested lists like `matrix` from the first
    example in this chapter, you can use chained indexing: `matrix[0][0]` will get
    you the first element of the first row. With NumPy arrays, however, you provide
    the index and slice arguments for both dimensions in a single pair of square brackets:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我向您展示了如何索引和切片列表以访问特定元素。当您处理像本章第一个示例中的 `matrix` 这样的嵌套列表时，您可以使用链式索引：`matrix[0][0]`
    将获得第一行的第一个元素。然而，使用 NumPy 数组时，您可以在单个方括号对中为两个维度提供索引和切片参数：
- en: '`numpy_array``[``row_selection``,``column_selection``]`'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`numpy_array``[``row_selection``,``column_selection``]`'
- en: For one-dimensional arrays, this simplifies to `numpy_array[selection]`. When
    you select a single element, you will get back a scalar; otherwise, you will get
    back a one- or two-dimensional array. Remember that slice notation uses a start
    index (included) and an end index (excluded) with a colon in between, as in `start:end`.
    By leaving away the start and end index, you are left with a colon, which therefore
    stands for all rows or all columns in a two-dimensional array. I have visualized
    a few examples in [Figure 4-3](#filepos465331), but you may also want to give
    [Figure 4-1](#filepos439974) another look, as the indices and axes are labeled
    there. Remember, by slicing a column or row of a two-dimensional array, you end
    up with a one-dimensional array, not with a two-dimensional column or row vector!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维数组，这简化为 `numpy_array[selection]`。当您选择单个元素时，将返回一个标量；否则，将返回一个一维或二维数组。请记住，切片表示法使用起始索引（包括）和结束索引（不包括），中间使用冒号，如
    `start:end`。通过省略开始和结束索引，留下一个冒号，因此该冒号表示二维数组中的所有行或所有列。我在 Figure 4-3 中可视化了一些例子，但您可能也想再看看
    Figure 4-1，因为那里标记了索引和轴。请记住，通过对二维数组的列或行进行切片，您最终得到的是一个一维数组，而不是一个二维列或行向量！
- en: '![](images/00061.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00061.jpg)'
- en: Figure 4-3\. Selecting elements of a NumPy array
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4-3\. 选择 NumPy 数组的元素
- en: 'Play around with the examples shown in [Figure 4-3](#filepos465331) by running
    the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码来尝试 Figure 4-3 中展示的示例：
- en: '`In``[``18``]:``array1``[``2``]``# Returns a scalar`'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``18``]:``array1``[``2``]``# 返回一个标量`'
- en: '`Out[18]: 1000.0`'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[18]: 1000.0`'
- en: '`In``[``19``]:``array2``[``0``,``0``]``# Returns a scalar`'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``19``]:``array2``[``0``,``0``]``# 返回一个标量`'
- en: '`Out[19]: 1.0`'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[19]: 1.0`'
- en: '`In``[``20``]:``array2``[:,``1``:]``# Returns a 2d array`'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``20``]:``array2``[:,``1``:]``# 返回一个 2 维数组`'
- en: '`Out[20]: array([[2., 3.],                 [5., 6.]])`'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[20]: array([[2., 3.],                 [5., 6.]])`'
- en: '`In``[``21``]:``array2``[:,``1``]``# Returns a 1d array`'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``21``]:``array2``[:,``1``]``# 返回一个 1 维数组`'
- en: '`Out[21]: array([2., 5.])`'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[21]: array([2., 5.])`'
- en: '`In``[``22``]:``array2``[``1``,``:``2``]``# Returns a 1d array`'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``22``]:``array2``[``1``,``:``2``]``# 返回一个 1 维数组`'
- en: '`Out[22]: array([4., 5.])`'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[22]: array([4., 5.])`'
- en: So far, I have constructed the sample arrays by hand, i.e., by providing numbers
    in a list. But NumPy also offers a few useful functions to construct arrays.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我通过手动构建示例数组，即通过在列表中提供数字来完成。但是 NumPy 还提供了几个有用的函数来构建数组。
- en: Useful Array Constructors
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的数组构造函数
- en: 'NumPy offers a few ways to construct arrays that will also be helpful to create
    pandas DataFrames, as we will see in [Chapter 5](index_split_015.html#filepos482650).
    One way to easily create arrays is to use the `arange` function. This stands for
    array range and is similar to the built-in `range` that we met in the previous
    chapter—with the difference that `arange` returns a NumPy array. Combining it
    with `reshape` allows us to quickly generate an array with the desired dimensions:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了几种构建数组的方法，这些方法对于创建 pandas DataFrames 也很有帮助，正如我们将在 [第 5 章](index_split_015.html#filepos482650)
    中看到的那样。一个简单创建数组的方式是使用 `arange` 函数。这代表数组范围，类似于我们在前一章中遇到的内置 `range` 函数，不同之处在于 `arange`
    返回一个 NumPy 数组。结合 `reshape` 可以快速生成具有所需维度的数组：
- en: '`In``[``23``]:``np``.``arange``(``2``*``5``)``.``reshape``(``2``,``5``)``#
    2 rows, 5 columns`'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``23``]:``np``.``arange``(``2``*``5``)``.``reshape``(``2``,``5``)``#
    2 行，5 列`'
- en: '`Out[23]: array([[0, 1, 2, 3, 4],                 [5, 6, 7, 8, 9]])`'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[23]: array([[0, 1, 2, 3, 4],                 [5, 6, 7, 8, 9]])`'
- en: 'Another common need, for example for Monte Carlo simulations, is to generate
    arrays of normally distributed pseudorandom numbers. NumPy makes this easy:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的需求，例如蒙特卡洛模拟，是生成正态分布的伪随机数数组。NumPy 可以轻松实现这一点：
- en: '`In``[``24``]:``np``.``random``.``randn``(``2``,``3``)``# 2 rows, 3 columns`'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``24``]:``np``.``random``.``randn``(``2``,``3``)``# 2 行，3 列`'
- en: '`Out[24]: array([[-0.30047275, -1.19614685, -0.13652283],                 [
    1.05769357,  0.03347978, -1.2153504 ]])`'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[24]: array([[-0.30047275, -1.19614685, -0.13652283],                 [
    1.05769357,  0.03347978, -1.2153504 ]])`'
- en: Other helpful constructors worth exploring are `np.ones` and `np.zeros` to create
    arrays with ones and zeros, respectively, and `np.eye` to create an identity matrix.
    We’ll come across some of these constructors again in the next chapter, but for
    now, let’s learn about the difference between a view and a copy of a NumPy array.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的构造函数包括 `np.ones` 和 `np.zeros`，分别用于创建全为 1 和全为 0 的数组，以及 `np.eye` 用于创建单位矩阵。我们将在下一章再次遇到其中一些构造函数，但现在让我们学习一下
    NumPy 数组视图和副本之间的区别。
- en: View vs. Copy
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 视图 vs. 复制
- en: 'NumPy arrays return views when you slice them. This means that you are working
    with a subset of the original array without copying the data. Setting a value
    on a view will therefore also change the original array:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你切片 NumPy 数组时，它们返回视图。这意味着你在处理原始数组的子集而不复制数据。在视图上设置值也将更改原始数组：
- en: '`In``[``25``]:``array2`'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``25``]:``array2`'
- en: '`Out[25]: array([[1., 2., 3.],                 [4., 5., 6.]])`'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[25]: array([[1., 2., 3.],                 [4., 5., 6.]])`'
- en: '`In``[``26``]:``subset``=``array2``[:,``:``2``]``subset`'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``26``]:``subset``=``array2``[:,``:``2``]``subset`'
- en: '`Out[26]: array([[1., 2.],                 [4., 5.]])`'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[26]: array([[1., 2.],                 [4., 5.]])`'
- en: '`In``[``27``]:``subset``[``0``,``0``]``=``1000`'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``27``]:``subset``[``0``,``0``]``=``1000`'
- en: '`In``[``28``]:``subset`'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``28``]:``subset`'
- en: '`Out[28]: array([[1000.,    2.],                 [   4.,    5.]])`'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[28]: array([[1000.,    2.],                 [   4.,    5.]])`'
- en: '`In``[``29``]:``array2`'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``29``]:``array2`'
- en: '`Out[29]: array([[1000.,    2.,    3.],                 [   4.,    5.,    6.]])`'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[29]: array([[1000.,    2.,    3.],                 [   4.,    5.,    6.]])`'
- en: 'If that’s not what you want, you would have to change `In [26]` as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不是你想要的，你需要按照以下方式更改 `In [26]`：
- en: '`subset``=``array2``[:,``:``2``]``.``copy``()`'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`subset``=``array2``[:,``:``2``]``.``copy``()`'
- en: Working on a copy will leave the original array unchanged.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在副本上操作将不会改变原始数组。
- en: Conclusion
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, I showed you how to work with NumPy arrays and what’s behind
    expressions such as vectorization and broadcasting. Putting these technical terms
    aside, working with arrays should feel quite intuitive given that they follow
    the mathematical notation very closely. While NumPy is an incredibly powerful
    library, there are two main issues when you want to use it for data analysis:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我向你展示了如何使用 NumPy 数组以及背后的向量化和广播表达式。抛开这些技术术语，使用数组应该感觉非常直观，因为它们紧密遵循数学符号。虽然
    NumPy 是一个非常强大的库，但在用于数据分析时有两个主要问题：
- en: The whole NumPy array needs to be of the same data type. This, for example,
    means that you can’t perform any of the arithmetic operations we did in this chapter
    when your array contains a mix of text and numbers. As soon as text is involved,
    the array will have the data type `object`, which will not allow mathematical
    operations.
  id: totrans-107
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 整个 NumPy 数组都需要是相同的数据类型。例如，这意味着当数组包含文本和数字混合时，你不能执行本章中的任何算术运算。一旦涉及文本，数组将具有数据类型`object`，这将不允许数学运算。
- en: Using NumPy arrays for data analysis makes it hard to know what each column
    or row refers to because you typically select columns via their position, such
    as in `array2[:, 1]`.
  id: totrans-108
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 NumPy 数组进行数据分析使得难以知道每列或每行指的是什么，因为通常通过它们的位置来选择列，比如在 `array2[:, 1]` 中。
- en: pandas has solved these issues by providing smarter data structures on top of
    NumPy arrays. What they are and how they work is the topic of the next chapter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 通过在 NumPy 数组之上提供更智能的数据结构来解决了这些问题。它们是什么以及如何工作将是下一章的主题。
- en: '[1  ](#filepos452023) If it’s been a while since your last linear algebra class,
    you can skip this example—matrix multiplication is not something this book builds
    upon.'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[1  ](#filepos452023) 如果你已经很久没有上线性代数课了，你可以跳过这个例子——矩阵乘法不是本书的基础。'
