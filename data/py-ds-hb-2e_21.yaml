- en: 'Chapter 18\. Combining Datasets: concat and append'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第18章。组合数据集：concat和append
- en: Some of the most interesting studies of data come from combining different data
    sources. These operations can involve anything from very straightforward concatenation
    of two different datasets to more complicated database-style joins and merges
    that correctly handle any overlaps between the datasets. `Series` and `DataFrame`s
    are built with this type of operation in mind, and Pandas includes functions and
    methods that make this sort of data wrangling fast and straightforward.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最有趣的数据研究来自于结合不同的数据源。这些操作可以涉及从两个不同数据集的非常简单的连接到更复杂的数据库风格的联接和合并，正确处理数据集之间的任何重叠。`Series`和`DataFrame`是专为这类操作而构建的，Pandas包含使这种数据处理快速和简单的函数和方法。
- en: Here we’ll take a look at simple concatenation of `Series` and `DataFrame`s
    with the `pd.concat` function; later we’ll dive into more sophisticated in-memory
    merges and joins implemented in Pandas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`pd.concat`函数查看`Series`和`DataFrame`的简单连接；稍后我们将深入探讨Pandas中实现的更复杂的内存合并和连接。
- en: 'We begin with the standard imports:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从标准导入开始：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For convenience, we’ll define this function, which creates a `DataFrame` of
    a particular form that will be useful in the following examples:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，我们将定义这个函数，它创建一个特定形式的`DataFrame`，在接下来的示例中将非常有用：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In addition, we’ll create a quick class that allows us to display multiple
    `DataFrame`s side by side. The code makes use of the special `_repr_html_` method,
    which IPython/Jupyter uses to implement its rich object display:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们将创建一个快速的类，允许我们将多个`DataFrame`并排显示。该代码利用了特殊的`_repr_html_`方法，IPython/Jupyter用它来实现其丰富的对象显示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The use of this will become clearer as we continue our discussion in the following
    section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在以下部分继续讨论，使用这个将会更加清晰。
- en: 'Recall: Concatenation of NumPy Arrays'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾：NumPy数组的连接
- en: 'Concatenation of `Series` and `DataFrame` objects behaves similarly to concatenation
    of NumPy arrays, which can be done via the `np.concatenate` function, as discussed
    in [Chapter 5](ch05.xhtml#section-0202-the-basics-of-numpy-arrays). Recall that
    with it, you can combine the contents of two or more arrays into a single array:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`和`DataFrame`对象的连接行为与NumPy数组的连接类似，可以通过`np.concatenate`函数完成，如[第5章](ch05.xhtml#section-0202-the-basics-of-numpy-arrays)中所讨论的那样。记住，您可以使用它将两个或多个数组的内容合并为单个数组：'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first argument is a list or tuple of arrays to concatenate. Additionally,
    in the case of multidimensional arrays, it takes an `axis` keyword that allows
    you to specify the axis along which the result will be concatenated:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是要连接的数组的列表或元组。此外，在多维数组的情况下，它接受一个`axis`关键字，允许您指定沿其进行连接的轴：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Simple Concatenation with pd.concat
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`pd.concat`进行简单连接
- en: 'The `pd.concat` function provides a similar syntax to `np.concatenate` but
    contains a number of options that we’ll discuss momentarily:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.concat`函数提供了与`np.concatenate`类似的语法，但包含我们稍后将讨论的多个选项：'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`pd.concat` can be used for a simple concatenation of `Series` or `DataFrame`
    objects, just as `np.concatenate` can be used for simple concatenations of arrays:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.concat`可用于简单连接`Series`或`DataFrame`对象，就像`np.concatenate`可用于数组的简单连接一样：'
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It also works to concatenate higher-dimensional objects, such as `DataFrame`s:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以用于连接更高维度的对象，如`DataFrame`：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It’s default behavior is to concatenate row-wise within the `DataFrame` (i.e.,
    `axis=0`). Like `np.concatenate`, `pd.concat` allows specification of an axis
    along which concatenation will take place. Consider the following example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其默认行为是在`DataFrame`内按行连接（即`axis=0`）。与`np.concatenate`类似，`pd.concat`允许指定沿其进行连接的轴。考虑以下示例：
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We could have equivalently specified `axis=1`; here we’ve used the more intuitive
    `axis='columns'`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以等效地指定`axis=1`；这里我们使用了更直观的`axis='columns'`。
- en: Duplicate Indices
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复的索引
- en: 'One important difference between `np.concatenate` and `pd.concat` is that Pandas
    concatenation *preserves indices*, even if the result will have duplicate indices!
    Consider this short example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.concatenate`和`pd.concat`之间的一个重要区别是，Pandas的连接*保留索引*，即使结果会有重复的索引！考虑以下简单示例：'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice the repeated indices in the result. While this is valid within `DataFrame`s,
    the outcome is often undesirable. `pd.concat` gives us a few ways to handle it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意结果中的重复索引。虽然这在`DataFrame`中是有效的，但结果通常不理想。`pd.concat`提供了几种处理方法。
- en: Treating repeated indices as an error
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将重复的索引视为错误处理
- en: 'If you’d like to simply verify that the indices in the result of `pd.concat`
    do not overlap, you can include the `verify_integrity` flag. With this set to
    `True`, the concatenation will raise an exception if there are duplicate indices.
    Here is an example, where for clarity we’ll catch and print the error message:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想简单地验证`pd.concat`的结果中的索引是否重叠，可以包含`verify_integrity`标志。将其设置为`True`，如果存在重复索引，连接将引发异常。以下是一个示例，为了清晰起见，我们将捕获并打印错误消息：
- en: '[PRE10]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ignoring the index
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 忽略索引
- en: 'Sometimes the index itself does not matter, and you would prefer it to simply
    be ignored. This option can be specified using the `ignore_index` flag. With this
    set to `True`, the concatenation will create a new integer index for the resulting
    `DataFrame`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时索引本身并不重要，你更希望它被简单地忽略。可以使用`ignore_index`标志指定此选项。将其设置为`True`，连接将为结果的`DataFrame`创建一个新的整数索引：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding MultiIndex keys
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 MultiIndex 键
- en: 'Another option is to use the `keys` option to specify a label for the data
    sources; the result will be a hierarchically indexed series containing the data:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是使用`keys`选项指定数据源的标签；结果将是一个具有层次索引的系列，其中包含数据：
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We can use the tools discussed in [Chapter 17](ch17.xhtml#section-0305-hierarchical-indexing)
    to transform this multiply indexed `Data⁠Frame` into the representation we’re
    interested in.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[第 17 章](ch17.xhtml#section-0305-hierarchical-indexing)中讨论的工具将这个多重索引的
    `DataFrame` 转换为我们感兴趣的表示形式。
- en: Concatenation with Joins
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用连接进行连接
- en: 'In the short examples we just looked at, we were mainly concatenating `DataFrame`s
    with shared column names. In practice, data from different sources might have
    different sets of column names, and `pd.concat` offers several options in this
    case. Consider the concatenation of the following two `DataFrame`s, which have
    some (but not all!) columns in common:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚查看的短示例中，我们主要是连接具有共享列名的 `DataFrame`。在实践中，来自不同来源的数据可能具有不同的列名集，`pd.concat`
    在这种情况下提供了几个选项。考虑以下两个 `DataFrame` 的连接，它们具有一些（但不是全部！）共同的列：
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The default behavior is to fill entries for which no data is available with
    NA values. To change this, we can adjust the `join` parameter of the `concat`
    function. By default, the join is a union of the input columns (`join=''outer''`),
    but we can change this to an intersection of the columns using `join=''inner''`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为是用 NA 值填充无可用数据的条目。要更改这一点，可以调整`concat`函数的`join`参数。默认情况下，连接是输入列的并集（`join='outer'`），但我们可以使用`join='inner'`将其更改为列的交集：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Another useful pattern is to use the `reindex` method before concatenation
    for finer control over which columns are dropped:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的模式是在连接之前使用`reindex`方法对要丢弃的列进行更精细的控制：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The append Method
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`append` 方法'
- en: 'Because direct array concatenation is so common, `Series` and `DataFrame` objects
    have an `append` method that can accomplish the same thing in fewer keystrokes.
    For example, in place of `pd.concat([df1, df2])`, you can use `df1.append(df2)`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为直接数组连接是如此常见，`Series` 和 `DataFrame` 对象具有一个`append`方法，可以用更少的按键完成相同的操作。例如，可以使用
    `df1.append(df2)` 替代 `pd.concat([df1, df2])`：
- en: '[PRE16]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Keep in mind that unlike the `append` and `extend` methods of Python lists,
    the `append` method in Pandas does not modify the original object; instead it
    creates a new object with the combined data. It also is not a very efficient method,
    because it involves creation of a new index *and* data buffer. Thus, if you plan
    to do multiple `append` operations, it is generally better to build a list of
    `DataFrame` objects and pass them all at once to the `concat` function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与 Python 列表的 `append` 和 `extend` 方法不同，Pandas 中的 `append` 方法不会修改原始对象；相反，它会创建一个包含组合数据的新对象。它也不是一种非常有效的方法，因为它涉及到新索引的创建
    *以及* 数据缓冲区。因此，如果你计划进行多个 `append` 操作，通常最好建立一个 `DataFrame` 对象的列表，并一次性将它们全部传递给 `concat`
    函数。
- en: 'In the next chapter, we’ll look at a more powerful approach to combining data
    from multiple sources: the database-style merges/joins implemented in `pd.merge`.
    For more information on `concat`, `append`, and related functionality, see [“Merge,
    Join, Concatenate and Compare” in the Pandas documentation](https://oreil.ly/cY16c).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一种更强大的方法来组合来自多个来源的数据：`pd.merge` 中实现的数据库风格的合并/连接。有关 `concat`、`append`
    和相关功能的更多信息，请参阅[Pandas 文档中的“Merge, Join, Concatenate and Compare”](https://oreil.ly/cY16c)。
