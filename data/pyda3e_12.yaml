- en: 9  Plotting and Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9 绘图和可视化
- en: 原文：[https://wesmckinney.com/book/plotting-and-visualization](https://wesmckinney.com/book/plotting-and-visualization)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://wesmckinney.com/book/plotting-and-visualization](https://wesmckinney.com/book/plotting-and-visualization)
- en: '*This Open Access web version of *Python for Data Analysis 3rd Edition* is
    now available as a companion to the [print and digital editions](https://amzn.to/3DyLaJc).
    If you encounter any errata, [please report them here](https://oreilly.com/catalog/0636920519829/errata).
    Please note that some aspects of this site as produced by Quarto will differ from
    the formatting of the print and eBook versions from O’Reilly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*本开放获取的网络版本*Python for Data Analysis 3rd Edition*现在可作为[印刷版和数字版](https://amzn.to/3DyLaJc)的伴侣提供。如果您发现任何勘误，请[在此处报告](https://oreilly.com/catalog/0636920519829/errata)。请注意，由Quarto生成的本站的某些方面与O''Reilly的印刷版和电子书版本的格式不同。'
- en: If you find the online edition of the book useful, please consider [ordering
    a paper copy](https://amzn.to/3DyLaJc) or a [DRM-free eBook](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)
    to support the author. The content from this website may not be copied or reproduced.
    The code examples are MIT licensed and can be found on GitHub or Gitee.*  *Making
    informative visualizations (sometimes called *plots*) is one of the most important
    tasks in data analysis. It may be a part of the exploratory process—for example,
    to help identify outliers or needed data transformations, or as a way of generating
    ideas for models. For others, building an interactive visualization for the web
    may be the end goal. Python has many add-on libraries for making static or dynamic
    visualizations, but I’ll be mainly focused on [matplotlib](https://matplotlib.org)
    and libraries that build on top of it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现本书的在线版本有用，请考虑[订购纸质版](https://amzn.to/3DyLaJc)或[无DRM的电子书](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)以支持作者。本网站的内容不得复制或复制。代码示例采用MIT许可证，可在GitHub或Gitee上找到。*
    *制作信息丰富的可视化（有时称为*图）是数据分析中最重要的任务之一。它可能是探索过程的一部分，例如，帮助识别异常值或所需的数据转换，或者作为生成模型想法的一种方式。对于其他人，构建用于网络的交互式可视化可能是最终目标。Python有许多附加库用于制作静态或动态可视化，但我主要关注[matplotlib](https://matplotlib.org)和构建在其之上的库。
- en: matplotlib is a desktop plotting package designed for creating plots and figures
    suitable for publication. The project was started by John Hunter in 2002 to enable
    a MATLAB-like plotting interface in Python. The matplotlib and IPython communities
    have collaborated to simplify interactive plotting from the IPython shell (and
    now, Jupyter notebook). matplotlib supports various GUI backends on all operating
    systems and can export visualizations to all of the common vector and raster graphics
    formats (PDF, SVG, JPG, PNG, BMP, GIF, etc.). With the exception of a few diagrams,
    nearly all of the graphics in this book were produced using matplotlib.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib是一个桌面绘图包，旨在创建适合出版的图形和图表。该项目由John Hunter于2002年发起，旨在在Python中实现类似MATLAB的绘图界面。matplotlib和IPython社区合作简化了从IPython
    shell（现在是Jupyter笔记本）进行交互式绘图。matplotlib支持所有操作系统上的各种GUI后端，并且可以将可视化导出为所有常见的矢量和光栅图形格式（PDF、SVG、JPG、PNG、BMP、GIF等）。除了一些图表外，本书中几乎所有的图形都是使用matplotlib生成的。
- en: Over time, matplotlib has spawned a number of add-on toolkits for data visualization
    that use matplotlib for their underlying plotting. One of these is [seaborn](http://seaborn.pydata.org),
    which we explore later in this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，matplotlib衍生出了许多用于数据可视化的附加工具包，这些工具包使用matplotlib进行底层绘图。其中之一是[seaborn](http://seaborn.pydata.org)，我们将在本章后面探讨。
- en: 'The simplest way to follow the code examples in the chapter is to output plots
    in the Jupyter notebook. To set this up, execute the following statement in a
    Jupyter notebook:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中跟随代码示例的最简单方法是在Jupyter笔记本中输出图形。要设置这个，可以在Jupyter笔记本中执行以下语句：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Note* *Since this book''s first edition in 2012, many new data visualization
    libraries have been created, some of which (like Bokeh and Altair) take advantage
    of modern web technology to create interactive visualizations that integrate well
    with the Jupyter notebook. Rather than use multiple visualization tools in this
    book, I decided to stick with matplotlib for teaching the fundamentals, in particular
    since pandas has good integration with matplotlib. You can adapt the principles
    from this chapter to learn how to use other visualization libraries as well.*  *##
    9.1 A Brief matplotlib API Primer'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *自2012年第一版以来，已经创建了许多新的数据可视化库，其中一些（如Bokeh和Altair）利用现代网络技术创建交互式可视化，与Jupyter笔记本很好地集成。与在本书中使用多个可视化工具不同，我决定坚持使用matplotlib来教授基础知识，特别是因为pandas与matplotlib有很好的集成。您可以根据本章的原则学习如何使用其他可视化库。*
    *## 9.1 简要的matplotlib API入门'
- en: 'With matplotlib, we use the following import convention:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用matplotlib时，我们使用以下导入约定：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After running `%matplotlib notebook` in Jupyter (or simply `%matplotlib` in
    IPython), we can try creating a simple plot. If everything is set up right, a
    line plot like [Simple line plot](#mpl_first_plot) should appear:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter中运行`%matplotlib notebook`（或在IPython中运行`%matplotlib`），我们可以尝试创建一个简单的图。如果一切设置正确，应该会出现一个类似[Simple
    line plot](#mpl_first_plot)的线图：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/33f467ae0ee1820d490756dfcb2a77fb.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33f467ae0ee1820d490756dfcb2a77fb.png)'
- en: 'Figure 9.1: Simple line plot'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：简单线图
- en: While libraries like seaborn and pandas's built-in plotting functions will deal
    with many of the mundane details of making plots, should you wish to customize
    them beyond the function options provided, you will need to learn a bit about
    the matplotlib API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然像seaborn和pandas内置绘图函数将处理许多制作图形的琐碎细节，但如果您希望自定义超出提供的函数选项之外的内容，您需要了解一些关于matplotlib
    API的知识。
- en: '*Note* *There is not enough room in the book to give comprehensive treatment
    of the breadth and depth of functionality in matplotlib. It should be enough to
    teach you the ropes to get up and running. The matplotlib gallery and documentation
    are the best resource for learning advanced features.*  *### Figures and Subplots'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *本书中没有足够的空间来全面介绍 matplotlib 的功能广度和深度。它应该足以教会您如何上手。matplotlib 图库和文档是学习高级功能的最佳资源。*  *###
    图和子图'
- en: 'Plots in matplotlib reside within a `Figure` object. You can create a new figure
    with `plt.figure`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib 中的绘图位于 `Figure` 对象中。您可以使用 `plt.figure` 创建一个新的图：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In IPython, if you first run `%matplotlib` to set up the matplotlib integration,
    an empty plot window will appear, but in Jupyter nothing will be shown until we
    use a few more commands.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IPython 中，如果您首先运行 `%matplotlib` 来设置 matplotlib 集成，将会出现一个空白绘图窗口，但在 Jupyter
    中，直到我们使用更多命令之前，什么都不会显示。
- en: '`plt.figure` has a number of options; notably, `figsize` will guarantee the
    figure has a certain size and aspect ratio if saved to disk.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.figure` 有许多选项；特别是，如果保存到磁盘，`figsize` 将保证图的特定大小和纵横比。'
- en: 'You can’t make a plot with a blank figure. You have to create one or more `subplots`
    using `add_subplot`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在空白图中制作绘图。您必须使用 `add_subplot` 创建一个或多个 `subplots`：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This means that the figure should be 2 × 2 (so up to four plots in total),
    and we’re selecting the first of four subplots (numbered from 1). If you create
    the next two subplots, you’ll end up with a visualization that looks like [An
    empty matplotlib figure with three subplots](#mpl_empty_subplots):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着图应该是 2 × 2（因此总共最多四个绘图），我们选择了四个子图中的第一个（从 1 编号）。如果您创建下两个子图，您将得到一个看起来像 [一个空的
    matplotlib 图，带有三个子图](#mpl_empty_subplots) 的可视化：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/3ffe09420f821e4d9cb950f2e5bb6e84.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ffe09420f821e4d9cb950f2e5bb6e84.png)'
- en: 'Figure 9.2: An empty matplotlib figure with three subplots'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：一个空的 matplotlib 图，带有三个子图
- en: '*Tip* *One nuance of using Jupyter notebooks is that plots are reset after
    each cell is evaluated, so you must put all of the plotting commands in a single
    notebook cell.*  *Here we run all of these commands in the same cell:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*提示* *使用 Jupyter 笔记本的一个细微之处是，每次评估单元格后绘图都会重置，因此您必须将所有绘图命令放在一个单独的笔记本单元格中。* *在这里，我们在同一个单元格中运行所有这些命令：'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These plot axis objects have various methods that create different types of
    plots, and it is preferred to use the axis methods over the top-level plotting
    functions like `plt.plot`. For example, we could make a line plot with the `plot`
    method (see [Data visualization after a single plot](#mpl_subplots_one)):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些绘图轴对象有各种方法，可以创建不同类型的绘图，最好使用轴方法而不是像 `plt.plot` 这样的顶级绘图函数。例如，我们可以使用 `plot` 方法制作一条线图（参见[单个绘图后的数据可视化](#mpl_subplots_one)）：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/e930d33b55aed88698b1dbfd5bd03cbf.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e930d33b55aed88698b1dbfd5bd03cbf.png)'
- en: 'Figure 9.3: Data visualization after a single plot'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：单个绘图后的数据可视化
- en: You may notice output like `<matplotlib.lines.Line2D at ...>` when you run this.
    matplotlib returns objects that reference the plot subcomponent that was just
    added. A lot of the time you can safely ignore this output, or you can put a semicolon
    at the end of the line to suppress the output.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此命令时，您可能会注意到类似 `<matplotlib.lines.Line2D at ...>` 的输出。matplotlib 返回引用刚刚添加的绘图子组件的对象。大多数情况下，您可以安全地忽略此输出，或者您可以在行末加上分号以抑制输出。
- en: 'The additional options instruct matplotlib to plot a black dashed line. The
    objects returned by `fig.add_subplot` here are `AxesSubplot` objects, on which
    you can directly plot on the other empty subplots by calling each one’s instance
    method (see [Data visualization after additional plots](#mpl_subplots_two)):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 附加选项指示 matplotlib 绘制一条黑色虚线。这里由 `fig.add_subplot` 返回的对象是 `AxesSubplot` 对象，您可以通过调用每个实例方法直接在其他空子图上绘制（参见[添加额外绘图后的数据可视化](#mpl_subplots_two)）：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/c61e1e89fed6ca0718719066a3fad5d6.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c61e1e89fed6ca0718719066a3fad5d6.png)'
- en: 'Figure 9.4: Data visualization after additional plots'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4：添加额外绘图后的数据可视化
- en: The style option `alpha=0.3` sets the transparency of the overlaid plot.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`alpha=0.3` 样式选项设置了叠加绘图的透明度。'
- en: You can find a comprehensive catalog of plot types in the [matplotlib documentation](https://matplotlib.org).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [matplotlib 文档](https://matplotlib.org) 中找到绘图类型的全面目录。
- en: 'To make creating a grid of subplots more convenient, matplotlib includes a
    `plt.subplots` method that creates a new figure and returns a NumPy array containing
    the created subplot objects:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更方便地创建子图网格，matplotlib 包括一个 `plt.subplots` 方法，它创建一个新图并返回一个包含创建的子图对象的 NumPy
    数组：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `axes` array can then be indexed like a two-dimensional array; for example,
    `axes[0, 1]` refers to the subplot in the top row at the center. You can also
    indicate that subplots should have the same x- or y-axis using `sharex` and `sharey`,
    respectively. This can be useful when you're comparing data on the same scale;
    otherwise, matplotlib autoscales plot limits independently. See [Table 9.1](#tbl-table_plt_subplots)
    for more on this method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`axes` 数组可以像二维数组一样索引；例如，`axes[0, 1]` 指的是顶部行中心的子图。您还可以使用 `sharex` 和 `sharey`
    指示子图应具有相同的 x 或 y 轴。当您在相同比例上比较数据时，这可能很有用；否则，matplotlib 会独立自动缩放绘图限制。有关此方法的更多信息，请参见
    [表 9.1](#tbl-table_plt_subplots)。
- en: 'Table 9.1: `matplotlib.pyplot.subplots` options'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.1：`matplotlib.pyplot.subplots` 选项
- en: '| Argument | Description |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `nrows` | Number of rows of subplots |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `nrows` | 子图的行数 |'
- en: '| `ncols` | Number of columns of subplots |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `ncols` | 子图的列数 |'
- en: '| `sharex` | All subplots should use the same x-axis ticks (adjusting the `xlim`
    will affect all subplots) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `sharex` | 所有子图应使用相同的 x 轴刻度（调整 `xlim` 将影响所有子图） |'
- en: '| `sharey` | All subplots should use the same y-axis ticks (adjusting the `ylim`
    will affect all subplots) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `sharey` | 所有子图应使用相同的 y 轴刻度（调整 `ylim` 将影响所有子图） |'
- en: '| `subplot_kw` | Dictionary of keywords passed to `add_subplot` call used to
    create each subplot |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `subplot_kw` | 传递给 `add_subplot` 调用的关键字字典，用于创建每个子图 |'
- en: '| `**fig_kw` | Additional keywords to `subplots` are used when creating the
    figure, such as `plt.subplots(2, 2, figsize=(8, 6))` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `**fig_kw` | 创建图时使用`subplots`的附加关键字，例如`plt.subplots(2, 2, figsize=(8, 6))`
    |'
- en: Adjusting the spacing around subplots
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 调整子图周围的间距
- en: 'By default, matplotlib leaves a certain amount of padding around the outside
    of the subplots and in spacing between subplots. This spacing is all specified
    relative to the height and width of the plot, so that if you resize the plot either
    programmatically or manually using the GUI window, the plot will dynamically adjust
    itself. You can change the spacing using the `subplots_adjust` method on `Figure`
    objects:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，matplotlib在子图周围留有一定量的填充和子图之间的间距。这些间距都是相对于绘图的高度和宽度指定的，因此如果您通过编程或使用GUI窗口手动调整绘图大小，绘图将动态调整自身。您可以使用`Figure`对象上的`subplots_adjust`方法更改间距：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`wspace` and `hspace` control the percent of the figure width and figure height,
    respectively, to use as spacing between subplots. Here is a small example you
    can execute in Jupyter where I shrink the spacing all the way to zero (see [Data
    visualization with no inter-subplot spacing](#mpl_subplots_adjust)):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`wspace`和`hspace`控制子图之间使用的百分比图宽度和图高度的间距。这里是一个您可以在Jupyter中执行的小例子，我将间距缩小到零（参见[没有子图间距的数据可视化](#mpl_subplots_adjust)）：'
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/c29739a3af9d3f69ced8617625eb559c.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c29739a3af9d3f69ced8617625eb559c.png)'
- en: 'Figure 9.5: Data visualization with no inter-subplot spacing'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5：没有子图间距的数据可视化
- en: You may notice that the axis labels overlap. matplotlib doesn’t check whether
    the labels overlap, so in a case like this you would need to fix the labels yourself
    by specifying explicit tick locations and tick labels (we'll look at how to do
    this in the later section [Ticks, Labels, and Legends](#vis_matplotlib_annotation)).*  *###
    Colors, Markers, and Line Styles
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到轴标签重叠。matplotlib不会检查标签是否重叠，因此在这种情况下，您需要通过指定显式刻度位置和刻度标签自行修复标签（我们将在后面的部分[刻度、标签和图例](#vis_matplotlib_annotation)中看到如何做到这一点）。*  *###
    颜色、标记和线型
- en: 'matplotlib’s line `plot` function accepts arrays of x and y coordinates and
    optional color styling options. For example, to plot `x` versus `y` with green
    dashes, you would execute:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib的线`plot`函数接受x和y坐标数组以及可选的颜色样式选项。例如，要用绿色虚线绘制`x`与`y`，您可以执行：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A number of color names are provided for commonly used colors, but you can use
    any color on the spectrum by specifying its hex code (e.g., `"#CECECE"`). You
    can see some of the supported line styles by looking at the docstring for `plt.plot`
    (use `plt.plot?` in IPython or Jupyter). A more comprehensive reference is available
    in the online documentation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了许多常用颜色的颜色名称，但您可以通过指定其十六进制代码（例如，`"#CECECE"`）来使用光谱上的任何颜色。您可以查看`plt.plot`的文档字符串以查看一些支持的线型。在线文档中提供了更全面的参考资料。
- en: 'Line plots can additionally have *markers* to highlight the actual data points.
    Since matplotlib''s `plot` function creates a continuous line plot, interpolating
    between points, it can occasionally be unclear where the points lie. The marker
    can be supplied as an additional styling option (see [Line plot with markers](#mpl_marker_ex)):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 线图还可以具有*标记*来突出实际数据点。由于matplotlib的`plot`函数创建连续线图，插值点之间的插值，有时可能不清楚点位于何处。标记可以作为附加样式选项提供（参见[带有标记的线图](#mpl_marker_ex)）：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/057b871e61b23676a12ca85ac841d012.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/057b871e61b23676a12ca85ac841d012.png)'
- en: 'Figure 9.6: Line plot with markers'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.6：带有标记的线图
- en: 'For line plots, you will notice that subsequent points are linearly interpolated
    by default. This can be altered with the `drawstyle` option (see [Line plot with
    different drawstyle options](#mpl_drawstyle_ex)):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于线图，您会注意到默认情况下后续点是线性插值的。这可以通过`drawstyle`选项进行更改（参见[带有不同drawstyle选项的线图](#mpl_drawstyle_ex)）：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/3e63e6a6357b24a6c73084b155cbc27b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e63e6a6357b24a6c73084b155cbc27b.png)'
- en: 'Figure 9.7: Line plot with different drawstyle options'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：带有不同drawstyle选项的线图
- en: Here, since we passed the `label` arguments to `plot`, we are able to create
    a plot legend to identify each line using `ax.legend`. I discuss legends more
    in [Ticks, Labels, and Legends](#vis_matplotlib_annotation).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，由于我们将`label`参数传递给`plot`，我们能够使用`ax.legend`创建一个图例，以标识每条线。我在[刻度、标签和图例](#vis_matplotlib_annotation)中更多地讨论图例。
- en: '*Note* *You must call `ax.legend` to create the legend, whether or not you
    passed the `label` options when plotting the data.*  *### Ticks, Labels, and Legends'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *无论您在绘制数据时是否传递了`label`选项，都必须调用`ax.legend`来创建图例。*  *### 刻度、标签和图例'
- en: 'Most kinds of plot decorations can be accessed through methods on matplotlib
    axes objects. This includes methods like `xlim`, `xticks`, and `xticklabels`.
    These control the plot range, tick locations, and tick labels, respectively. They
    can be used in two ways:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数类型的绘图装饰都可以通过matplotlib轴对象上的方法访问。这包括`xlim`、`xticks`和`xticklabels`等方法。它们分别控制绘图范围、刻度位置和刻度标签。它们可以以两种方式使用：
- en: Called with no arguments returns the current parameter value (e.g., `ax.xlim()`
    returns the current x-axis plotting range)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不带参数调用返回当前参数值（例如，`ax.xlim()`返回当前x轴绘图范围）
- en: Called with parameters sets the parameter value (e.g., `ax.xlim([0, 10])` sets
    the x-axis range to 0 to 10)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带参数调用设置参数值（例如，`ax.xlim([0, 10])`将x轴范围设置为0到10）
- en: All such methods act on the active or most recently created `AxesSubplot`. Each
    corresponds to two methods on the subplot object itself; in the case of `xlim`,
    these are `ax.get_xlim` and `ax.set_xlim`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都作用于活动或最近创建的`AxesSubplot`。每个对应于subplot对象本身的两种方法；在`xlim`的情况下，这些方法是`ax.get_xlim`和`ax.set_xlim`。
- en: Setting the title, axis labels, ticks, and tick labels
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设置标题、轴标签、刻度和刻度标签
- en: 'To illustrate customizing the axes, I’ll create a simple figure and plot of
    a random walk (see [Simple plot for illustrating xticks (with default labels)](#vis_ticks_one)):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何自定义坐标轴，我将创建一个简单的图和一个随机漫步的绘图（参见[用于说明xticks的简单绘图（带有默认标签）](#vis_ticks_one)）：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/5a99b09f27faef68b4b1150598d87c05.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a99b09f27faef68b4b1150598d87c05.png)'
- en: 'Figure 9.8: Simple plot for illustrating xticks (with default labels)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：用于说明xticks的简单图表（带有默认标签）
- en: 'To change the x-axis ticks, it’s easiest to use `set_xticks` and `set_xticklabels`.
    The former instructs matplotlib where to place the ticks along the data range;
    by default these locations will also be the labels. But we can set any other values
    as the labels using `set_xticklabels`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改x轴刻度，最简单的方法是使用`set_xticks`和`set_xticklabels`。前者指示matplotlib在数据范围内放置刻度的位置；默认情况下，这些位置也将是标签。但是我们可以使用`set_xticklabels`设置任何其他值作为标签：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `rotation` option sets the x tick labels at a 30-degree rotation. Lastly,
    `set_xlabel` gives a name to the x-axis, and `set_title` is the subplot title
    (see [Simple plot for illustrating custom xticks](#vis_ticks_two) for the resulting
    figure):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotation`选项将x轴刻度标签设置为30度旋转。最后，`set_xlabel`为x轴命名，`set_title`为子图标题（请参见[用于说明自定义xticks的简单图表](#vis_ticks_two)以查看生成的图）：'
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/8592bb9fc63f4f28333b53d403105a57.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8592bb9fc63f4f28333b53d403105a57.png)'
- en: 'Figure 9.9: Simple plot for illustrating custom xticks'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：用于说明自定义xticks的简单图表
- en: 'Modifying the y-axis consists of the same process, substituting `y` for `x`
    in this example. The axes class has a `set` method that allows batch setting of
    plot properties. From the prior example, we could also have written:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 修改y轴的过程与此示例中的`x`替换为`y`相同。axes类有一个`set`方法，允许批量设置绘图属性。从前面的示例中，我们也可以这样写：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding legends
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加图例
- en: 'Legends are another critical element for identifying plot elements. There are
    a couple of ways to add one. The easiest is to pass the `label` argument when
    adding each piece of the plot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图例是识别图表元素的另一个关键元素。有几种方法可以添加图例。最简单的方法是在添加每个图表元素时传递`label`参数：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once you’ve done this, you can call `ax.legend()` to automatically create a
    legend. The resulting plot is in [Simple plot with three lines and legend](#vis_legend_ex):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成了这一步，您可以调用`ax.legend()`来自动创建图例。生成的图表在[带有三条线和图例的简单图表](#vis_legend_ex)中：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/b305e27a26b0ff06c2d3130576a72f42.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b305e27a26b0ff06c2d3130576a72f42.png)'
- en: 'Figure 9.10: Simple plot with three lines and legend'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：带有三条线和图例的简单图表
- en: The `legend` method has several other choices for the location `loc` argument.
    See the docstring (with `ax.legend?`) for more information.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`legend`方法有几个其他选项可用于位置`loc`参数。有关更多信息，请参阅文档字符串（使用`ax.legend?`）。'
- en: The `loc` legend option tells matplotlib where to place the plot. The default
    is `"best"`, which tries to choose a location that is most out of the way. To
    exclude one or more elements from the legend, pass no label or `label="_nolegend_"`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`loc`图例选项告诉matplotlib在哪里放置图例。默认值是`"best"`，它会尝试选择一个最不起眼的位置。要从图例中排除一个或多个元素，请不传递标签或传递`label="_nolegend_"`。'
- en: Annotations and Drawing on a Subplot
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释和在子图上绘制
- en: 'In addition to the standard plot types, you may wish to draw your own plot
    annotations, which could consist of text, arrows, or other shapes. You can add
    annotations and text using the `text`, `arrow`, and `annotate` functions. `text`
    draws text at given coordinates `(x, y)` on the plot with optional custom styling:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的绘图类型，您可能希望绘制自己的绘图注释，这可能包括文本、箭头或其他形状。您可以使用`text`、`arrow`和`annotate`函数添加注释和文本。`text`在给定坐标`(x,
    y)`处绘制文本，可选的自定义样式：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Annotations can draw both text and arrows arranged appropriately. As an example,
    let’s plot the closing S&P 500 index price since 2007 (obtained from Yahoo! Finance)
    and annotate it with some of the important dates from the 2008–2009 financial
    crisis. You can run this code example in a single cell in a Jupyter notebook.
    See [Important dates in the 2008–2009 financial crisis](#vis_crisis_dates) for
    the result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以绘制文本和箭头，并适当排列。例如，让我们绘制自2007年以来的标准普尔500指数收盘价（从Yahoo! Finance获取），并用2008-2009年金融危机的一些重要日期进行注释。您可以在Jupyter笔记本中的单个单元格中运行此代码示例。查看[2008-2009年金融危机中的重要日期](#vis_crisis_dates)以查看结果：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/b8b372e58ab7916dbb3ef4c71569c5be.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8b372e58ab7916dbb3ef4c71569c5be.png)'
- en: 'Figure 9.11: Important dates in the 2008–2009 financial crisis'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：2008-2009年金融危机中的重要日期
- en: There are a couple of important points to highlight in this plot. The `ax.annotate`
    method can draw labels at the indicated x and y coordinates. We use the `set_xlim`
    and `set_ylim` methods to manually set the start and end boundaries for the plot
    rather than using matplotlib's default. Lastly, `ax.set_title` adds a main title
    to the plot.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中有几个重要的要点需要强调。`ax.annotate`方法可以在指定的x和y坐标处绘制标签。我们使用`set_xlim`和`set_ylim`方法手动设置绘图的起始和结束边界，而不是使用matplotlib的默认值。最后，`ax.set_title`为绘图添加了一个主标题。
- en: See the online matplotlib gallery for many more annotation examples to learn
    from.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看在线matplotlib画廊，了解更多注释示例以供学习。
- en: Drawing shapes requires some more care. matplotlib has objects that represent
    many common shapes, referred to as *patches*. Some of these, like `Rectangle`
    and `Circle`, are found in `matplotlib.pyplot`, but the full set is located in
    `matplotlib.patches`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制形状需要更多的注意。matplotlib有代表许多常见形状的对象，称为*patches*。其中一些，如`Rectangle`和`Circle`，可以在`matplotlib.pyplot`中找到，但完整的集合位于`matplotlib.patches`中。
- en: 'To add a shape to a plot, you create the patch object and add it to a subplot
    `ax` by passing the patch to `ax.add_patch` (see [Data visualization composed
    from three different patches](#vis_patch_ex)):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要向图表添加形状，您需要创建补丁对象，并通过将补丁传递给`ax.add_patch`将其添加到子图`ax`中（请参见[由三个不同补丁组成的数据可视化](#vis_patch_ex)）：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/bbe77ca56f949e70e20ccf23975bca48.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bbe77ca56f949e70e20ccf23975bca48.png)'
- en: 'Figure 9.12: Data visualization composed from three different patches'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12：由三个不同补丁组成的数据可视化
- en: If you look at the implementation of many familiar plot types, you will see
    that they are assembled from patches.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看许多熟悉的绘图类型的实现，您会发现它们是由补丁组装而成的。
- en: Saving Plots to File
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存图表到文件
- en: 'You can save the active figure to file using the figure object’s `savefig`
    instance method. For example, to save an SVG version of a figure, you need only
    type:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用图形对象的`savefig`实例方法将活动图形保存到文件。例如，要保存图形的SVG版本，您只需输入：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The file type is inferred from the file extension. So if you used `.pdf` instead,
    you would get a PDF. One important option that I use frequently for publishing
    graphics is `dpi`, which controls the dots-per-inch resolution. To get the same
    plot as a PNG at 400 DPI, you would do:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 文件类型是从文件扩展名中推断的。因此，如果您使用`.pdf`，您将得到一个PDF。我经常用于发布图形的一个重要选项是`dpi`，它控制每英寸的分辨率。要获得相同的图形作为400
    DPI的PNG，您可以执行：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: See [Table 9.2](#tbl-table_mpl_savefig) for a list of some other options for
    `savefig`. For a comprehensive listing, refer to the docstring in IPython or Jupyter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`savefig`的一些其他选项，请参见[表9.2](#tbl-table_mpl_savefig)。要获取全面的列表，请参考IPython或Jupyter中的文档字符串。
- en: 'Table 9.2: Some `fig.savefig` options'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.2：一些`fig.savefig`选项
- en: '| Argument | Description |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `fname` | String containing a filepath or a Python file-like object. The
    figure format is inferred from the file extension (e.g., `.pdf` for PDF or `.png`
    for PNG). |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `fname` | 包含文件路径或Python文件对象的字符串。图形格式从文件扩展名中推断（例如，`.pdf`表示PDF，`.png`表示PNG）。
    |'
- en: '| `dpi` | The figure resolution in dots per inch; defaults to 100 in IPython
    or 72 in Jupyter out of the box but can be configured. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `dpi` | 每英寸点数的图形分辨率；在IPython中默认为100，在Jupyter中默认为72，但可以进行配置。 |'
- en: '| `facecolor, edgecolor` | The color of the figure background outside of the
    subplots; `"w"` (white), by default. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `facecolor, edgecolor` | 子图外部的图形背景颜色；默认为`"w"`（白色）。 |'
- en: '| `format` | The explicit file format to use (`"png"`, `"pdf"`, `"svg"`, `"ps"`,
    `"eps"`, ...). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `format` | 要使用的显式文件格式（`"png"`、`"pdf"`、`"svg"`、`"ps"`、`"eps"`等）。 |'
- en: matplotlib Configuration
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: matplotlib配置
- en: 'matplotlib comes configured with color schemes and defaults that are geared
    primarily toward preparing figures for publication. Fortunately, nearly all of
    the default behavior can be customized via global parameters governing figure
    size, subplot spacing, colors, font sizes, grid styles, and so on. One way to
    modify the configuration programmatically from Python is to use the `rc` method;
    for example, to set the global default figure size to be 10 × 10, you could enter:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib预先配置了色彩方案和默认设置，主要用于准备出版图。幸运的是，几乎所有默认行为都可以通过全局参数进行自定义，这些参数控制图形大小、子图间距、颜色、字体大小、网格样式等。从Python编程方式修改配置的一种方法是使用`rc`方法；例如，要将全局默认图形大小设置为10×10，可以输入：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: All of the current configuration settings are found in the `plt.rcParams` dictionary,
    and they can be restored to their default values by calling the `plt.rcdefaults()`
    function.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所有当前的配置设置都可以在`plt.rcParams`字典中找到，并且可以通过调用`plt.rcdefaults()`函数将其恢复为默认值。
- en: 'The first argument to `rc` is the component you wish to customize, such as
    `"figure"`, `"axes"`, `"xtick"`, `"ytick"`, `"grid"`, `"legend"`, or many others.
    After that can follow a sequence of keyword arguments indicating the new parameters.
    A convenient way to write down the options in your program is as a dictionary:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`rc`的第一个参数是您希望自定义的组件，例如`"figure"`、`"axes"`、`"xtick"`、`"ytick"`、`"grid"`、`"legend"`或其他许多选项。之后可以跟随一系列关键字参数，指示新的参数。在程序中写下选项的便捷方式是作为一个字典：'
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For more extensive customization and to see a list of all the options, matplotlib
    comes with a configuration file *matplotlibrc* in the *matplotlib/mpl-data* directory.
    If you customize this file and place it in your home directory titled *.matplotlibrc*,
    it will be loaded each time you use matplotlib.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更广泛的自定义并查看所有选项列表，matplotlib附带了一个配置文件*matplotlibrc*，位于*matplotlib/mpl-data*目录中。如果您自定义此文件并将其放在名为*.matplotlibrc*的主目录中，每次使用matplotlib时都会加载它。
- en: As we'll see in the next section, the seaborn package has several built-in plot
    themes or *styles* that use matplotlib's configuration system internally.***  ***##
    9.2 Plotting with pandas and seaborn
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在下一节中看到的，seaborn包具有几个内置的绘图主题或*样式*，这些主题或样式在内部使用matplotlib的配置系统。***  ***##
    9.2 使用pandas和seaborn绘图
- en: 'matplotlib can be a fairly low-level tool. You assemble a plot from its base
    components: the data display (i.e., the type of plot: line, bar, box, scatter,
    contour, etc.), legend, title, tick labels, and other annotations.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: matplotlib可以是一个相当低级的工具。您可以从其基本组件中组装图表：数据显示（即绘图类型：线条、柱状图、箱线图、散点图、等高线图等）、图例、标题、刻度标签和其他注释。
- en: In pandas, we may have multiple columns of data, along with row and column labels.
    pandas itself has built-in methods that simplify creating visualizations from
    DataFrame and Series objects. Another library is [`seaborn`](https://seaborn.pydata.org),
    a high-level statistical graphics library built on matplotlib. seaborn simplifies
    creating many common visualization types.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，我们可能有多列数据，以及行和列标签。pandas本身具有内置方法，简化了从DataFrame和Series对象创建可视化的过程。另一个库是[`seaborn`](https://seaborn.pydata.org)，这是一个建立在matplotlib之上的高级统计图形库。seaborn简化了创建许多常见可视化类型的过程。
- en: Line Plots
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线图
- en: 'Series and DataFrame have a `plot` attribute for making some basic plot types.
    By default, `plot()` makes line plots (see [Simple Series plot](#vis_series_plot_1)):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Series和DataFrame具有`plot`属性，用于创建一些基本的绘图类型。默认情况下，`plot()`生成线图（参见[简单Series绘图](#vis_series_plot_1)）：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/94759a9f5e61afbdf151f5410cb1d6ca.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/94759a9f5e61afbdf151f5410cb1d6ca.png)'
- en: 'Figure 9.13: Simple Series plot'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13：简单Series绘图
- en: The Series object’s index is passed to matplotlib for plotting on the x-axis,
    though you can disable this by passing `use_index=False`. The x-axis ticks and
    limits can be adjusted with the `xticks` and `xlim` options, and the y-axis respectively
    with `yticks` and `ylim`. See [Table 9.3](#tbl-table_plot_method) for a partial
    listing of `plot` options. I’ll comment on a few more of them throughout this
    section and leave the rest for you to explore.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Series 对象的索引被传递给 matplotlib 以在 x 轴上绘制，尽管您可以通过传递 `use_index=False` 来禁用此功能。x 轴刻度和限制可以通过
    `xticks` 和 `xlim` 选项进行调整，y 轴分别通过 `yticks` 和 `ylim` 进行调整。请参见 [表 9.3](#tbl-table_plot_method)
    以获取 `plot` 选项的部分列表。我将在本节中评论其中一些，并留下其余的供您探索。
- en: 'Table 9.3: `Series.plot` method arguments'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.3：`Series.plot` 方法参数
- en: '| Argument | Description |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `label` | Label for plot legend |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `label` | 图例标签 |'
- en: '| `ax` | matplotlib subplot object to plot on; if nothing passed, uses active
    matplotlib subplot |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `ax` | 要绘制的 matplotlib 子图对象；如果未传递任何内容，则使用活动的 matplotlib 子图 |'
- en: '| `style` | Style string, like `"ko--"`, to be passed to matplotlib |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `style` | 样式字符串，如 `"ko--"`，传递给 matplotlib |'
- en: '| `alpha` | The plot fill opacity (from 0 to 1) |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `alpha` | 图形填充不透明度（从 0 到 1） |'
- en: '| `kind` | Can be `"area"`, `"bar"`, `"barh"`, `"density"`, `"hist"`, `"kde"`,
    `"line"`, or `"pie"`; defaults to `"line"` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `kind` | 可以是 `"area"`, `"bar"`, `"barh"`, `"density"`, `"hist"`, `"kde"`,
    `"line"`, 或 `"pie"`；默认为 `"line"` |'
- en: '| `figsize` | Size of the figure object to create |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `figsize` | 要创建的图形对象的大小 |'
- en: '| `logx` | Pass `True` for logarithmic scaling on the x axis; pass `"sym"`
    for symmetric logarithm that permits negative values |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `logx` | 在 x 轴上进行对数缩放，传递 `True`；传递 `"sym"` 以进行允许负值的对称对数缩放 |'
- en: '| `logy` | Pass `True` for logarithmic scaling on the y axis; pass `"sym"`
    for symmetric logarithm that permits negative values |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `logy` | 在 y 轴上进行对数缩放，传递 `True`；传递 `"sym"` 以进行允许负值的对称对数缩放 |'
- en: '| `title` | Title to use for the plot |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `title` | 用于图的标题 |'
- en: '| `use_index` | Use the object index for tick labels |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `use_index` | 使用对象索引作为刻度标签 |'
- en: '| `rot` | Rotation of tick labels (0 through 360) |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `rot` | 刻度标签的旋转（0 到 360） |'
- en: '| `xticks` | Values to use for x-axis ticks |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `xticks` | 用于 x 轴刻度的值 |'
- en: '| `yticks` | Values to use for y-axis ticks |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `yticks` | 用于 y 轴刻度的值 |'
- en: '| `xlim` | x-axis limits (e.g., `[0, 10]`) |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `xlim` | x 轴限制（例如，`[0, 10]`） |'
- en: '| `ylim` | y-axis limits |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `ylim` | y 轴限制 |'
- en: '| `grid` | Display axis grid (off by default) |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `grid` | 显示坐标轴网格（默认关闭） |'
- en: Most of pandas’s plotting methods accept an optional `ax` parameter, which can
    be a matplotlib subplot object. This gives you more flexible placement of subplots
    in a grid layout.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数 pandas 的绘图方法都接受一个可选的 `ax` 参数，可以是一个 matplotlib 子图对象。这样可以在网格布局中更灵活地放置子图。 '
- en: 'DataFrame’s `plot` method plots each of its columns as a different line on
    the same subplot, creating a legend automatically (see [Simple DataFrame plot](#vis_frame_plot_1)):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 的 `plot` 方法将其每列作为不同的线绘制在同一个子图上，自动创建图例（请参见 [简单的 DataFrame 绘图](#vis_frame_plot_1)）：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](../Images/fdaeef8acbb8ceb4025d1c1bd91d31b1.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fdaeef8acbb8ceb4025d1c1bd91d31b1.png)'
- en: 'Figure 9.14: Simple DataFrame plot'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14：简单的 DataFrame 绘图
- en: '*Note* *Here I used `plt.style.use(''grayscale'')` to switch to a color scheme
    more suitable for black and white publication, since some readers will not be
    able to see the full color plots.*  *The `plot` attribute contains a "family"
    of methods for different plot types. For example, `df.plot()` is equivalent to
    `df.plot.line()`. We''ll explore some of these methods next.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *这里我使用了 `plt.style.use(''grayscale'')` 来切换到更适合黑白出版的颜色方案，因为一些读者可能无法看到完整的彩色图。*
    *`plot` 属性包含不同绘图类型的方法“家族”。例如，`df.plot()` 等同于 `df.plot.line()`。我们将在接下来探索其中一些方法。'
- en: '*Note* *Additional keyword arguments to `plot` are passed through to the respective
    matplotlib plotting function, so you can further customize these plots by learning
    more about the matplotlib API.*  *DataFrame has a number of options allowing some
    flexibility for how the columns are handled, for example, whether to plot them
    all on the same subplot or to create separate subplots. See [Table 9.4](#tbl-table_frame_plot_method)
    for more on these.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *`plot` 的其他关键字参数会传递给相应的 matplotlib 绘图函数，因此您可以通过学习更多关于 matplotlib API 的知识来进一步自定义这些图。*
    *DataFrame 有许多选项，允许对列的处理方式进行一定的灵活性，例如，是否将它们全部绘制在同一个子图上，还是创建单独的子图。更多信息请参见 [表 9.4](#tbl-table_frame_plot_method)。'
- en: 'Table 9.4: DataFrame-specific plot arguments'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.4：DataFrame 特定的绘图参数
- en: '| Argument | Description |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `subplots` | Plot each DataFrame column in a separate subplot |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `subplots` | 在单独的子图中绘制每个 DataFrame 列 |'
- en: '| `layouts` | 2-tuple (rows, columns) providing layout of subplots |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `layouts` | 2 元组（行数，列数），提供子图的布局 |'
- en: '| `sharex` | If `subplots=True`, share the same x-axis, linking ticks and limits
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `sharex` | 如果 `subplots=True`，共享相同的 x 轴，链接刻度和限制 |'
- en: '| `sharey` | If `subplots=True`, share the same y-axis |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `sharey` | 如果 `subplots=True`，共享相同的 y 轴 |'
- en: '| `legend` | Add a subplot legend (`True` by default) |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `legend` | 添加子图图例（默认为 `True`） |'
- en: '| `sort_columns` | Plot columns in alphabetical order; by default uses existing
    column order |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `sort_columns` | 按字母顺序绘制列；默认使用现有列顺序 |'
- en: '*Note* *For time series plotting, see [Ch 11: Time Series](/book/time-series).***  ***###
    Bar Plots'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *有关时间序列绘图，请参见 [第 11 章：时间序列](/book/time-series)。***  ***### 条形图'
- en: 'The `plot.bar()` and `plot.barh()` make vertical and horizontal bar plots,
    respectively. In this case, the Series or DataFrame index will be used as the
    x (`bar`) or y (`barh`) ticks (see [Horizonal and vertical bar plot](#vis_bar_plot_ex)):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`plot.bar()` 和 `plot.barh()` 分别绘制垂直和水平条形图。在这种情况下，Series 或 DataFrame 的索引将用作
    x（`bar`）或 y（`barh`）刻度（请参见 [水平和垂直条形图](#vis_bar_plot_ex)）：'
- en: '[PRE30]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](../Images/baca2f4ab210ab7fbb1363acd5366b42.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baca2f4ab210ab7fbb1363acd5366b42.png)'
- en: 'Figure 9.15: Horizonal and vertical bar plot'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15：水平和垂直条形图
- en: 'With a DataFrame, bar plots group the values in each row in bars, side by side,
    for each value. See [DataFrame bar plot](#vis_frame_barplot):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DataFrame，条形图将每行中的值分组在条形图中，侧边显示，每个值一个条形图。请参见 [DataFrame 条形图](#vis_frame_barplot)：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](../Images/7b3fc44566d76e7e8e544437c2dffbcc.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b3fc44566d76e7e8e544437c2dffbcc.png)'
- en: 'Figure 9.16: DataFrame bar plot'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16：DataFrame条形图
- en: Note that the name “Genus” on the DataFrame’s columns is used to title the legend.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，DataFrame列上的“种属”名称用于标题图例。
- en: 'We create stacked bar plots from a DataFrame by passing `stacked=True`, resulting
    in the value in each row being stacked together horizontally (see [DataFrame stacked
    bar plot](#vis_frame_barplot_stacked)):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传递`stacked=True`从DataFrame创建堆叠条形图，导致每行中的值水平堆叠在一起（参见[DataFrame堆叠条形图](#vis_frame_barplot_stacked)）：
- en: '[PRE32]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](../Images/f28517ea0c78eaca45d3a1d21b743605.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f28517ea0c78eaca45d3a1d21b743605.png)'
- en: 'Figure 9.17: DataFrame stacked bar plot'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17：DataFrame堆叠条形图
- en: '*Note* *A useful recipe for bar plots is to visualize a Series’s value frequency
    using `value_counts`: `s.value_counts().plot.bar()`.*  *Let''s have a look at
    an example dataset about restaurant tipping. Suppose we wanted to make a stacked
    bar plot showing the percentage of data points for each party size for each day.
    I load the data using `read_csv` and make a cross-tabulation by day and party
    size. The `pandas.crosstab` function is a convenient way to compute a simple frequency
    table from two DataFrame columns:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *一个有用的条形图的制作方法是使用`value_counts`来可视化Series的值频率：`s.value_counts().plot.bar()`。*
    *让我们看一个关于餐厅小费的示例数据集。假设我们想要制作一个堆叠条形图，显示每天每个派对规模的数据点的百分比。我使用`read_csv`加载数据，并通过日期和派对规模进行交叉制表。`pandas.crosstab`函数是从两个DataFrame列计算简单频率表的便捷方法：'
- en: '[PRE33]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since there are not many one- and six-person parties, I remove them here:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有很多一人和六人的派对，我在这里删除它们：
- en: '[PRE34]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, normalize so that each row sums to 1, and make the plot (see [Fraction
    of parties by size within each day](#vis_tips_barplot)):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对每一行进行归一化，使总和为1，并绘制图表（参见[每天各尺寸派对的比例](#vis_tips_barplot)）：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![](../Images/fecc24f715268acabec45f889288da9c.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fecc24f715268acabec45f889288da9c.png)'
- en: 'Figure 9.18: Fraction of parties by size within each day'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18：每天各尺寸派对的比例
- en: So you can see that party sizes appear to increase on the weekend in this dataset.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到在这个数据集中，派对规模似乎在周末增加。
- en: 'With data that requires aggregation or summarization before making a plot,
    using the `seaborn` package can make things much simpler (install it with `conda
    install seaborn`). Let''s look now at the tipping percentage by day with seaborn
    (see [Tipping percentage by day with error bars](#vis_tip_pct_seaborn) for the
    resulting plot):'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要在制作图表之前进行聚合或总结的数据，使用`seaborn`包可以使事情变得更简单（使用`conda install seaborn`进行安装）。现在让我们用seaborn查看小费百分比按天的情况（查看[带误差条的每日小费百分比](#vis_tip_pct_seaborn)以查看结果图）：
- en: '[PRE36]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '![](../Images/1c644fda5940269dac22103d8713dae4.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c644fda5940269dac22103d8713dae4.png)'
- en: 'Figure 9.19: Tipping percentage by day with error bars'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19：每日小费百分比带误差条
- en: Plotting functions in seaborn take a `data` argument, which can be a pandas
    DataFrame. The other arguments refer to column names. Because there are multiple
    observations for each value in the `day`, the bars are the average value of `tip_pct`.
    The black lines drawn on the bars represent the 95% confidence interval (this
    can be configured through optional arguments).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: seaborn中的绘图函数接受一个`data`参数，它可以是一个pandas DataFrame。其他参数是指列名。因为在`day`的每个值中有多个观察值，所以条形图是`tip_pct`的平均值。在条形图上画的黑线代表95%的置信区间（可以通过可选参数进行配置）。
- en: '`seaborn.barplot` has a `hue` option that enables us to split by an additional
    categorical value (see [Tipping percentage by day and time](#vis_tip_pct_sns_grouped)):'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`seaborn.barplot`有一个`hue`选项，可以使我们按照额外的分类值进行拆分（参见[每日和时间的小费百分比](#vis_tip_pct_sns_grouped)）：'
- en: '[PRE37]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](../Images/7921e3ccd70b031f36c44b85107918d7.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7921e3ccd70b031f36c44b85107918d7.png)'
- en: 'Figure 9.20: Tipping percentage by day and time'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20：每日和时间的小费百分比
- en: 'Notice that seaborn has automatically changed the aesthetics of plots: the
    default color palette, plot background, and grid line colors. You can switch between
    different plot appearances using `seaborn.set_style`:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，seaborn自动更改了图表的美学特征：默认颜色调色板、图表背景和网格线颜色。您可以使用`seaborn.set_style`在不同的图表外观之间切换：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When producing plots for black-and-white print medium, you may find it useful
    to set a greyscale color palette, like so:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在为黑白打印媒介制作图表时，您可能会发现设置灰度调色板很有用，如下所示：
- en: '[PRE39]*  *### Histograms and Density Plots'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE39]*  *### 直方图和密度图'
- en: 'A *histogram* is a kind of bar plot that gives a discretized display of value
    frequency. The data points are split into discrete, evenly spaced bins, and the
    number of data points in each bin is plotted. Using the tipping data from before,
    we can make a histogram of tip percentages of the total bill using the `plot.hist`
    method on the Series (see [Histogram of tip percentages](#vis_hist_ex)):'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '*直方图*是一种显示值频率的离散化条形图。数据点被分成离散的、均匀间隔的箱子，并绘制每个箱子中的数据点数。使用之前的小费数据，我们可以使用Series的`plot.hist`方法制作总账单的小费百分比的直方图（参见[小费百分比的直方图](#vis_hist_ex)）：'
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![](../Images/ac1010ef5553eff57302677c1ac29851.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac1010ef5553eff57302677c1ac29851.png)'
- en: 'Figure 9.21: Histogram of tip percentages'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21：小费百分比的直方图
- en: 'A related plot type is a *density plot*, which is formed by computing an estimate
    of a continuous probability distribution that might have generated the observed
    data. The usual procedure is to approximate this distribution as a mixture of
    "kernels"—that is, simpler distributions like the normal distribution. Thus, density
    plots are also known as kernel density estimate (KDE) plots. Using `plot.density`
    makes a density plot using the conventional mixture-of-normals estimate (see [Density
    plot of tip percentages](#vis_kde_ex)):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相关的图表类型是*密度图*，它是通过计算可能生成观察数据的连续概率分布的估计而形成的。通常的做法是将这个分布近似为“核”混合——即，像正态分布这样的简单分布。因此，密度图也被称为核密度估计（KDE）图。使用`plot.density`可以使用传统的正态混合估计制作密度图（参见[小费百分比的密度图](#vis_kde_ex)）：
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![](../Images/53903a6f57aed96b5029b4bcb265ceb7.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53903a6f57aed96b5029b4bcb265ceb7.png)'
- en: 'Figure 9.22: Density plot of tip percentages'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22：小费百分比的密度图
- en: 'This kind of plot requires SciPy, so if you do not have it installed already,
    you can pause and do that now:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情节需要SciPy，所以如果您还没有安装它，可以暂停一下然后安装：
- en: '[PRE42]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'seaborn makes histograms and density plots even easier through its `histplot`
    method, which can plot both a histogram and a continuous density estimate simultaneously.
    As an example, consider a bimodal distribution consisting of draws from two different
    standard normal distributions (see [Normalized histogram of normal mixture](#vis_series_kde)):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其`histplot`方法，seaborn使直方图和密度图更加容易，可以同时绘制直方图和连续密度估计。例如，考虑一个由两个不同标准正态分布的抽样组成的双峰分布（请参见[Normalized
    histogram of normal mixture](#vis_series_kde)）：
- en: '[PRE43]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![](../Images/a4c5cd6fc9e8e06951e967c00791ae0c.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4c5cd6fc9e8e06951e967c00791ae0c.png)'
- en: 'Figure 9.23: Normalized histogram of normal mixture'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23：正态混合的归一化直方图
- en: Scatter or Point Plots
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 散点图或点图
- en: 'Point plots or scatter plots can be a useful way of examining the relationship
    between two one-dimensional data series. For example, here we load the `macrodata`
    dataset from the statsmodels project, select a few variables, then compute log
    differences:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 点图或散点图可以是检查两个一维数据系列之间关系的有用方法。例如，这里我们从statsmodels项目加载`macrodata`数据集，选择几个变量，然后计算对数差异：
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We can then use seaborn''s `regplot` method, which makes a scatter plot and
    fits a linear regression line (see [A seaborn regression/scatter plot](#scatter_plot_ex)):'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用seaborn的`regplot`方法，它可以制作散点图并拟合线性回归线（参见[A seaborn regression/scatter
    plot](#scatter_plot_ex)）：
- en: '[PRE45]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![](../Images/794c774025d4e8e044c70ae0199ae555.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/794c774025d4e8e044c70ae0199ae555.png)'
- en: 'Figure 9.24: A seaborn regression/scatter plot'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24：一个seaborn回归/散点图
- en: 'In exploratory data analysis, it’s helpful to be able to look at all the scatter
    plots among a group of variables; this is known as a *pairs* plot or *scatter
    plot matrix*. Making such a plot from scratch is a bit of work, so seaborn has
    a convenient `pairplot` function that supports placing histograms or density estimates
    of each variable along the diagonal (see [Pair plot matrix of statsmodels macro
    data](#scatter_matrix_ex) for the resulting plot):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索性数据分析中，查看一组变量之间的所有散点图是有帮助的；这被称为*pairs*图或*scatter plot matrix*。从头开始制作这样的图需要一些工作，因此seaborn有一个方便的`pairplot`函数，支持将每个变量的直方图或密度估计放在对角线上（请参见[Pair
    plot matrix of statsmodels macro data](#scatter_matrix_ex)以查看生成的图）：
- en: '[PRE46]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![](../Images/dff02874e6216c043e03726ae580d604.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dff02874e6216c043e03726ae580d604.png)'
- en: 'Figure 9.25: Pair plot matrix of statsmodels macro data'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25：statsmodels宏数据的pairs图矩阵
- en: You may notice the `plot_kws` argument. This enables us to pass down configuration
    options to the individual plotting calls on the off-diagonal elements. Check out
    the `seaborn.pairplot` docstring for more granular configuration options.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到`plot_kws`参数。这使我们能够将配置选项传递给对角线元素上的各个绘图调用。查看`seaborn.pairplot`文档字符串以获取更详细的配置选项。
- en: Facet Grids and Categorical Data
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Facet Grids和分类数据
- en: 'What about datasets where we have additional grouping dimensions? One way to
    visualize data with many categorical variables is to use a *facet grid*, which
    is a two-dimensional layout of plots where the data is split across the plots
    on each axis based on the distinct values of a certain variable. seaborn has a
    useful built-in function `catplot` that simplifies making many kinds of faceted
    plots split by categorical variables (see [Tipping percentage by day/time/smoker](#vis_tip_pct_sns_factorplot)
    for the resulting plot):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 那么对于具有额外分组维度的数据集呢？一种可视化具有许多分类变量的数据的方法是使用*facet grid*，这是一个二维布局的图，其中数据根据某个变量的不同值在每个轴上分割到各个图中。seaborn有一个有用的内置函数`catplot`，简化了根据分类变量拆分的许多种facet图的制作（请参见[Tipping
    percentage by day/time/smoker](#vis_tip_pct_sns_factorplot)以查看生成的图）：
- en: '[PRE47]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![](../Images/ebc8b1612dde160033c19bae91791567.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebc8b1612dde160033c19bae91791567.png)'
- en: 'Figure 9.26: Tipping percentage by day/time/smoker'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.26：按天/时间/吸烟者的小费百分比
- en: 'Instead of grouping by `"time"` by different bar colors within a facet, we
    can also expand the facet grid by adding one row per `time` value (see [Tipping
    percentage by day split by time/smoker](#vis_tip_pct_sns_factorplot2)):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 与在facet内通过不同的条形颜色对“时间”进行分组不同，我们还可以通过为每个`time`值添加一行来扩展facet grid（请参见[Tipping
    percentage by day split by time/smoker](#vis_tip_pct_sns_factorplot2)）：
- en: '[PRE48]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '![](../Images/492765c1f52237f69c502e7807e289aa.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/492765c1f52237f69c502e7807e289aa.png)'
- en: 'Figure 9.27: Tipping percentage by day split by time/smoker'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.27：按天分割的小费百分比按时间/吸烟者
- en: '`catplot` supports other plot types that may be useful depending on what you
    are trying to display. For example, *box plots* (which show the median, quartiles,
    and outliers) can be an effective visualization type (see [Box plot of tipping
    percentage by day](#vis_tip_pct_sns_factor_box)):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`catplot`支持其他可能有用的绘图类型，具体取决于您要显示的内容。例如，*箱线图*（显示中位数、四分位数和异常值）可以是一种有效的可视化类型（请参见[Box
    plot of tipping percentage by day](#vis_tip_pct_sns_factor_box)）：'
- en: '[PRE49]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![](../Images/1acd381f491d15f26798c13e930adffc.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1acd381f491d15f26798c13e930adffc.png)'
- en: 'Figure 9.28: Box plot of tipping percentage by day'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.28：按天的小费百分比箱线图
- en: You can create your own facet grid plots using the more general `seaborn.FacetGrid`
    class. See the [seaborn documentation](https://seaborn.pydata.org/) for more.****  ***##
    9.3 Other Python Visualization Tools
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用更通用的`seaborn.FacetGrid`类创建自己的facet grid图。有关更多信息，请参阅[seaborn文档](https://seaborn.pydata.org/)。****  ***##
    9.3 其他Python可视化工具
- en: As is common with open source, there many options for creating graphics in Python
    (too many to list). Since 2010, much development effort has been focused on creating
    interactive graphics for publication on the web. With tools like [Altair](https://altair-viz.github.io),
    [Bokeh](http://bokeh.pydata.org), and [Plotly](https://plotly.com/python), it's
    now possible to specify dynamic, interactive graphics in Python that are intended
    for use with web browsers.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 与开源软件一样，Python中有许多用于创建图形的选项（太多了无法列出）。自2010年以来，许多开发工作都集中在为在网页上发布的交互式图形创建工具上。使用诸如[Altair](https://altair-viz.github.io)、[Bokeh](http://bokeh.pydata.org)和[Plotly](https://plotly.com/python)等工具，现在可以在Python中指定动态、交互式图形，用于与Web浏览器一起使用。
- en: For creating static graphics for print or web, I recommend using matplotlib
    and libraries that build on matplotlib, like pandas and seaborn, for your needs.
    For other data visualization requirements, it may be useful to learn how to use
    one of the other available tools. I encourage you to explore the ecosystem as
    it continues to evolve and innovate into the future.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于为印刷品或网络创建静态图形，我建议使用matplotlib以及构建在matplotlib基础上的库，如pandas和seaborn，以满足您的需求。对于其他数据可视化需求，学习如何使用其他可用工具可能会有所帮助。我鼓励您探索这个生态系统，因为它将继续发展和创新。
- en: An excellent book on data visualization is *Fundamentals of Data Visualization*
    by Claus O. Wilke (O'Reilly), which is available in print or on Claus's website
    at [https://clauswilke.com/dataviz](https://clauswilke.com/dataviz).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化方面的一本优秀书籍是Claus O. Wilke的《数据可视化基础》（O'Reilly），可以在印刷版或Claus的网站[https://clauswilke.com/dataviz](https://clauswilke.com/dataviz)上找到。
- en: 9.4 Conclusion
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.4 结论
- en: The goal of this chapter was to get your feet wet with some basic data visualization
    using pandas, matplotlib, and seaborn. If visually communicating the results of
    data analysis is important in your work, I encourage you to seek out resources
    to learn more about effective data visualization. It is an active field of research,
    and you can practice with many excellent learning resources available online and
    in print.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是通过使用pandas、matplotlib和seaborn进行一些基本数据可视化，让您初步了解。如果在您的工作中视觉传达数据分析结果很重要，我鼓励您寻找资源，了解更多关于有效数据可视化的知识。这是一个活跃的研究领域，您可以通过在线和印刷的许多优秀学习资源进行实践。
- en: In the next chapter, we turn our attention to data aggregation and group operations
    with pandas.********
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注使用pandas进行数据聚合和分组操作。
