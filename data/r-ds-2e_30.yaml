- en: Chapter 25\. Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 25 章. 函数
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'One of the best ways to improve your reach as a data scientist is to write
    functions. Functions allow you to automate common tasks in a more powerful and
    general way than copy and pasting. Writing a function has three big advantages
    over using copy and paste:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 提高作为数据科学家的影响力的最佳方式之一是编写函数。函数允许您以比复制粘贴更强大和通用的方式自动执行常见任务。编写函数比使用复制和粘贴具有三个重大优势：
- en: You can give a function an evocative name that makes your code easier to understand.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以为函数指定一个富有表现力的名称，使您的代码更易于理解。
- en: As requirements change, you need to update code only in one place, instead of
    many.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着需求的变化，您只需要在一个地方更新代码，而不是在多个地方更新。
- en: You eliminate the chance of making incidental mistakes when you copy and paste
    (i.e., updating a variable name in one place but not in another).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您复制粘贴时，消除发生偶然错误的可能性（即在一个地方更新变量名称，但在另一个地方没有更新）。
- en: It makes it easier to reuse work from project to project, increasing your productivity
    over time.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使得您可以从项目到项目中重复使用工作，随着时间的推移提高您的生产力。
- en: 'A good rule of thumb is to consider writing a function whenever you’ve copied
    and pasted a block of code more than twice (i.e., you now have three copies of
    the same code). In this chapter, you’ll learn about three useful types of functions:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的经验法则是每当您复制并粘贴一个代码块超过两次（即现在您有三个相同的代码副本），就考虑编写一个函数。在本章中，您将学习三种有用的函数类型：
- en: Vector functions take one or more vectors as input and return a vector as output.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量函数以一个或多个向量作为输入，并返回一个向量作为输出。
- en: Data frame functions take a data frame as input and return a data frame as output.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框函数以数据框作为输入，并返回数据框作为输出。
- en: Plot functions take a data frame as input and return a plot as output.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图函数以数据框作为输入，并返回绘图作为输出。
- en: Each of these sections includes many examples to help you generalize the patterns
    that you see. These examples wouldn’t be possible without the help of the folks
    of Twitter, and we encourage you to follow the links in the comment to see original
    inspirations. You might also want to read the original motivating tweets for [general
    functions](https://oreil.ly/Ymcmk) and [plotting functions](https://oreil.ly/mXy2q)
    to see even more functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个部分都包含许多示例，以帮助您总结所见到的模式。这些示例没有 Twitter 的帮助就不可能存在，我们鼓励您跟随评论中的链接查看原始灵感。您可能还想阅读关于[通用函数](https://oreil.ly/Ymcmk)和[绘图函数](https://oreil.ly/mXy2q)的原始推文，以查看更多函数。
- en: Prerequisites
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'We’ll wrap up a variety of functions from around the tidyverse. We’ll also
    use nycflights13 as a source of familiar data to use our functions with:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将汇总来自 tidyverse 的各种函数。我们还将使用 nycflights13 作为熟悉数据源来使用我们的函数：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Vector Functions
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量函数
- en: 'We’ll begin with vector functions: functions that take one or more vectors
    and return a vector result. For example, take a look at this code. What does it
    do?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从向量函数开始：这些函数接受一个或多个向量，并返回一个向量结果。例如，看一下这段代码。它做什么？
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You might be able to puzzle out that this rescales each column to have a range
    from 0 to 1\. But did you spot the mistake? When Hadley wrote this code, he made
    an error when copying and pasting and forgot to change an `a` to a `b`. Preventing
    this type of mistake is one good reason to learn how to write functions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能能够猜出这会将每列重新调整为 0 到 1 的范围。但是您发现错误了吗？当 Hadley 编写这段代码时，他在复制粘贴时犯了一个错误，并忘记将 `a`
    更改为 `b`。学习如何编写函数的一个很好的理由是防止这种类型的错误。
- en: Writing a Function
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写函数
- en: 'To write a function, you need to first analyze your repeated code to figure
    what parts are constant and what parts vary. If we take the preceding code and
    pull it outside of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml),
    it’s a little easier to see the pattern because each repetition is now one line:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写一个函数，您需要首先分析您重复的代码，以确定哪些部分是常量，哪些部分是变化的。如果我们将前面的代码提取到 [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    外部，那么更容易看到模式，因为每次重复现在都是一行：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make this a bit clearer, we can replace the bit that varies with `█`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这更清晰一些，我们可以用 `█` 替换那部分变化的内容：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To turn this into a function, you need three things:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为函数，您需要三件事：
- en: A *name*. Here we’ll use `rescale01` because this function rescales a vector
    to sit between 0 and 1.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *名称*。这里我们将使用 `rescale01`，因为这个函数将一个向量重新调整到 0 到 1 之间。
- en: The *arguments*. The arguments are things that vary across calls and our analysis
    tells us that we have just one. We’ll call it `x` because this is the conventional
    name for a numeric vector.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*参数*。参数是在调用之间变化的内容，我们的分析告诉我们只有一个。我们将其称为`x`，因为这是数字向量的传统名称。'
- en: The *body*. The body is the code that’s repeated across all the calls.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*主体*。主体是在所有调用中重复的代码。'
- en: 'Then you create a function by following the template:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按照模板创建一个函数：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For this case that leads to:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种情况，结果是：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point you might test with a few simple inputs to make sure you’ve captured
    the logic correctly:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，您可能会使用几个简单的输入进行测试，以确保正确捕获逻辑：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then you can rewrite the call to [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    as:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将对[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)的调用重写为：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (In [Chapter 26](ch26.xhtml#chp-iteration), you’ll learn how to use [`across()`](https://dplyr.tidyverse.org/reference/across.xhtml)
    to reduce the duplication even further so all you need is `df |> mutate(across(a:d,
    rescale01))`.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: （在[第26章](ch26.xhtml#chp-iteration)中，您将学习如何使用[`across()`](https://dplyr.tidyverse.org/reference/across.xhtml)来进一步减少重复，因此您只需要`df
    |> mutate(across(a:d, rescale01))`。）
- en: Improving Our Function
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进我们的函数
- en: 'You might notice that the `rescale01()` function does some unnecessary work—instead
    of computing [`min()`](https://rdrr.io/r/base/Extremes.xhtml) twice and [`max()`](https://rdrr.io/r/base/Extremes.xhtml)
    once, we could compute both the minimum and maximum in one step with [`range()`](https://rdrr.io/r/base/range.xhtml):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到`rescale01()`函数做了一些不必要的工作——与其两次计算[`min()`](https://rdrr.io/r/base/Extremes.xhtml)和一次计算[`max()`](https://rdrr.io/r/base/Extremes.xhtml)相比，我们可以使用[`range()`](https://rdrr.io/r/base/range.xhtml)一次计算最小值和最大值：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Or you might try this function on a vector that includes an infinite value:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可能会尝试在包含无限值的向量上使用此函数：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That result is not particularly useful, so we could ask [`range()`](https://rdrr.io/r/base/range.xhtml)
    to ignore infinite values:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 结果并不特别有用，所以我们可以要求[`range()`](https://rdrr.io/r/base/range.xhtml)忽略无限值：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'These changes illustrate an important benefit of functions: because we’ve moved
    the repeated code into a function, we need to make the change in only one place.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改说明了函数的一个重要好处：因为我们将重复的代码移到函数中，所以我们只需要在一个地方进行更改。
- en: Mutate Functions
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变异函数
- en: Now that you understand the basic idea of functions, let’s take a look at a
    whole bunch of examples. We’ll start by looking at “mutate” functions, i.e., functions
    that work well inside of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    and [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml) because they
    return an output of the same length as the input.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您理解了函数的基本概念，让我们看看一堆示例。我们将从“mutate”函数开始，即在[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)和[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)内部运行良好的函数，因为它们返回与输入长度相同的输出。
- en: 'Let’s start with a simple variation of `rescale01()`. Maybe you want to compute
    the Z-score, rescaling a vector to have a mean of 0 and a standard deviation of
    1:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`rescale01()`的简单变化开始。也许您想计算Z分数，将向量重新缩放为均值为0，标准差为1：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Or maybe you want to wrap up a straightforward [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.xhtml)
    and give it a useful name. For example, this `clamp()` function ensures all values
    of a vector lie in between a minimum or a maximum:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可能想包装一个直接的[`case_when()`](https://dplyr.tidyverse.org/reference/case_when.xhtml)并为其命名。例如，此`clamp()`函数确保向量的所有值位于最小值或最大值之间：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Of course, functions don’t just need to work with numeric variables. You might
    want to do some repeated string manipulation. Maybe you need to make the first
    character uppercase:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，函数不仅仅需要处理数值变量。您可能希望进行一些重复的字符串操作。也许您需要将第一个字符大写：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Or maybe you want to strip percent signs, commas, and dollar signs from a string
    before converting it into a number:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可能希望从字符串中删除百分号、逗号和美元符号，然后将其转换为数字：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Sometimes your functions will be highly specialized for one data analysis step.
    For example, if you have a bunch of variables that record missing values as 997,
    998, or 999, you might want to write a function to replace them with `NA`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您的函数可能会高度专门化，适用于一个数据分析步骤。例如，如果您有一堆变量，记录缺失值为997、998或999，您可能希望编写一个函数来将它们替换为`NA`：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We’ve focused on examples that take a single vector because we think they’re
    the most common. But there’s no reason that your function can’t take multiple
    vector inputs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关注的例子主要是针对单个向量的，因为我们认为这是最常见的情况。但你的函数也可以接受多个向量输入，没有任何理由不这样做。
- en: Summary Functions
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 汇总函数
- en: 'Another important family of vector functions is summary functions, functions
    that return a single value for use in [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml).
    Sometimes this can just be a matter of setting a default argument or two:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的向量函数族是汇总函数，即返回单个值以供在[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)中使用的函数。有时候这可能只是设置一个或两个默认参数的问题：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Or you might wrap up a simple computation, like for the coefficient of variation,
    which divides the standard deviation by the mean:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以包装一个简单的计算，比如变异系数，它将标准差除以均值：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Or maybe you just want to make a common pattern easier to remember by giving
    it a memorable name:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 或者也许你只是想通过给它起一个容易记住的名字来使一个常见模式更容易记住：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also write functions with multiple vector inputs. For example, maybe
    you want to compute the mean absolute prediction error to help you compare model
    predictions with actual values:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以编写接受多个向量输入的函数。例如，也许你想计算平均绝对预测误差，以帮助你将模型预测与实际值进行比较：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: RStudio
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RStudio
- en: 'Once you start writing functions, there are two RStudio shortcuts that are
    super useful:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始编写函数，有两个非常有用的RStudio快捷键：
- en: To find the definition of a function that you’ve written, place the cursor on
    the name of the function and press F2.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查找你编写的函数的定义，请将光标放在函数名称上，然后按F2。
- en: To quickly jump to a function, press Ctrl+. to open the fuzzy file and function
    finder and type the first few letters of your function name. You can also navigate
    to files, Quarto sections, and more, making it a handy navigation tool.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要快速跳转到一个函数，按Ctrl+.来打开模糊文件和函数查找器，并输入函数名称的前几个字母。你也可以导航到文件、Quarto章节等，使其成为一个便捷的导航工具。
- en: Exercises
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Practice turning the following code snippets into functions. Think about what
    each function does. What would you call it? How many arguments does it need?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 练习将以下代码片段转换为函数。考虑每个函数的作用是什么。你会如何命名它？它需要多少个参数？
- en: '[PRE20]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the second variant of `rescale01()`, infinite values are left unchanged.
    Can you rewrite `rescale01()` so that `-Inf` is mapped to 0, and `Inf` is mapped
    to 1?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`rescale01()`的第二个变体中，无穷大的值保持不变。你能否重写`rescale01()`，使得`-Inf`映射为0，而`Inf`映射为1？
- en: Given a vector of birthdates, write a function to compute the age in years.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个生日向量，编写一个函数来计算年龄（以年为单位）。
- en: Write your own functions to compute the variance and skewness of a numeric vector.
    You can look up the definitions on Wikipedia or elsewhere.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写你自己的函数来计算数值向量的方差和偏度。你可以在维基百科或其他地方查找定义。
- en: Write `both_na()`, a summary function that takes two vectors of the same length
    and returns the number of positions that have an `NA` in both vectors.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写`both_na()`，一个汇总函数，接受两个长度相同的向量，并返回两个向量中都有`NA`的位置数。
- en: Read the documentation to figure out what the following functions do. Why are
    they useful even though they are so short?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读文档以弄清楚以下函数的作用。尽管它们很短，但它们为什么很有用？
- en: '[PRE21]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Data Frame Functions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框函数
- en: 'Vector functions are useful for pulling out code that’s repeated within a dplyr
    verb. But you’ll often also repeat the verbs themselves, particularly within a
    large pipeline. When you notice yourself copying and pasting multiple verbs multiple
    times, you might think about writing a data frame function. Data frame functions
    work like dplyr verbs: they take a data frame as the first argument and some extra
    arguments that say what to do with it and return a data frame or vector.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 向量函数对于从dplyr动词中重复的代码很有用。但通常你也会重复使用动词本身，特别是在大型流水线中。当你注意到自己多次复制粘贴多个动词时，你可以考虑编写一个数据框函数。数据框函数类似于dplyr动词：它们将数据框作为第一个参数，并接受一些额外的参数来指定要对其执行什么操作，并返回一个数据框或向量。
- en: To let you write a function that uses dplyr verbs, we’ll first introduce you
    to the challenge of indirection and how you can overcome it with embracing, `{{
    }}`. We’ll then show you a bunch of examples to illustrate what you might do with
    it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你编写一个使用dplyr动词的函数，我们将首先向你介绍间接引用的挑战，以及如何通过引入`{{ }}`来克服它。然后，我们将展示一些例子来说明你可以如何使用它。
- en: Indirection and Tidy Evaluation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 间接引用和整洁评估
- en: 'When you start writing functions that use dplyr verbs, you rapidly hit the
    problem of indirection. Let’s illustrate the problem with a simple function: `grouped_mean()`.
    The goal of this function is to compute the mean of `mean_var` grouped by `group_var`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始编写使用 dplyr 动词的函数时，你会迅速遇到间接性的问题。让我们通过一个简单的函数 `grouped_mean()` 来说明这个问题。这个函数的目标是按
    `group_var` 分组计算 `mean_var` 的平均值：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If we try and use it, we get an error:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用它，会出现错误：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To make the problem a bit clearer, we can use a made-up data frame:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明问题，我们可以使用一个虚构的数据框：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Regardless of how we call `grouped_mean()` it always does `df |> group_by(group_var)
    |> summarize(mean(mean_var))`, instead of `df |> group_by(group) |> summarize(mean(x))`
    or `df |> group_by(group) |> summarize(mean(y))`. This is a problem of indirection,
    and it arises because dplyr uses *tidy evaluation* to allow you to refer to the
    names of variables inside your data frame without any special treatment.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何调用 `grouped_mean()`，它总是执行 `df |> group_by(group_var) |> summarize(mean(mean_var))`，而不是
    `df |> group_by(group) |> summarize(mean(x))` 或 `df |> group_by(group) |> summarize(mean(y))`。这是一个间接性的问题，它是因为
    dplyr 使用 *tidy evaluation* 允许你在不特殊处理的情况下引用数据框内变量的名称。
- en: Tidy evaluation is great 95% of the time because it makes your data analyses
    very concise as you never have to say which data frame a variable comes from;
    it’s obvious from the context. The downside of tidy evaluation comes when we want
    to wrap up repeated tidyverse code into a function. Here we need some way to tell
    `group_mean()` and [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    not to treat `group_var` and `mean_var` as the name of the variables but instead
    look inside them for the variable we actually want to use.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Tidy evaluation 在大多数情况下非常棒，因为它使得你的数据分析非常简洁，你不需要指明变量来自哪个数据框；从上下文中显而易见。然而，tidy
    evaluation 的缺点在于当我们想将重复使用的 tidyverse 代码封装成函数时会显现出来。在这种情况下，我们需要一些方法来告诉 `group_mean()`
    和 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml) 不要把 `group_var`
    和 `mean_var` 当作变量名，而是要查找我们实际想要使用的变量。
- en: Tidy evaluation includes a solution to this problem called *embracing*. Embracing
    a variable means to wrap it in braces, so, for example, `var` becomes `{{ var
    }}`. Embracing a variable tells dplyr to use the value stored inside the argument,
    not the argument as the literal variable name. One way to remember what’s happening
    is to think of `{{ }}` as looking down a tunnel—`{{ var }}` will make a dplyr
    function look inside of `var` rather than looking for a variable called `var`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Tidy evaluation 包含了一个称为 *embracing* 的解决方案来解决这个问题。Embrace 一个变量意味着用大括号包裹它，因此，例如
    `var` 变成 `{{ var }}`。Embrace 一个变量告诉 dplyr 使用参数内存储的值，而不是将参数作为字面变量名。记住正在发生的事情的一种方法是把
    `{{ }}` 想象成看下一个隧道 — `{{ var }}` 会使得 dplyr 函数查找 `var` 内部的值，而不是查找一个名为 `var` 的变量。
- en: 'So to make `grouped_mean()` work, we need to surround `group_var` and `mean_var`
    with `{{ }}`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使 `grouped_mean()` 起作用，我们需要用 `{{ }}` 包裹 `group_var` 和 `mean_var`：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Success!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！
- en: When to Embrace?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时接受？
- en: 'The key challenge in writing data frame functions is figuring out which arguments
    need to be embraced. Fortunately, this is easy because you can look it up in the
    documentation. There are two terms to look for in the docs that correspond to
    the two most common subtypes of tidy evaluation:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 编写数据框函数的关键挑战是确定哪些参数需要被 embrace。幸运的是，这很容易，因为你可以在文档中查找。文档中有两个术语对应两种最常见的 tidy evaluation
    子类型的解决方案：
- en: Data masking
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 数据屏蔽
- en: This is used in functions such as [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml),
    [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml), and [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    that compute with variables.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于诸如 [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)、[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    和 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml) 这样计算变量的函数中。
- en: Tidy selection
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Tidy selection
- en: This is used for functions such as [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml),
    [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml), and [`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml)
    that select variables.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于诸如 [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)、[`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)
    和 [`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml) 这样选择变量的函数中。
- en: Your intuition about which arguments use tidy evaluation should be good for
    many common functions—just think about whether you can compute (e.g., `x + 1`)
    or select (e.g., `a:x`).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多常见的函数，你关于哪些参数使用 tidy evaluation 的直觉应该是正确的 — 只需考虑你是否可以计算（例如 `x + 1`）或选择（例如
    `a:x`）。
- en: In the following sections, we’ll explore the sorts of handy functions you might
    write once you understand embracing.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将探讨一旦理解拥抱，您可能编写的便捷函数类型。
- en: Common Use Cases
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见用例
- en: 'If you commonly perform the same set of summaries when doing initial data exploration,
    you might consider wrapping them up in a helper function:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在进行初始数据探索时经常执行相同的摘要集合，您可以考虑将它们包装在辅助函数中：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: (Whenever you wrap [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    in a helper, we think it’s good practice to set `.groups = "drop"` to both avoid
    the message and leave the data in an ungrouped state.)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: （每当您在辅助函数中包装[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)时，我们认为将`.groups
    = "drop"`设置为良好的实践，以避免消息并使数据保持未分组状态。）
- en: 'The nice thing about this function is that because it wraps [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml),
    you can use it on grouped data:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的好处在于，因为它包装了[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)，所以您可以在分组数据上使用它：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Furthermore, since the arguments to summarize are data masking, the `var` argument
    to `summary6()` is also data masking. That means you can also summarize computed
    variables:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于总结的参数是数据屏蔽，因此`summary6()`函数的`var`参数也是数据屏蔽。这意味着您还可以总结计算变量：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To summarize multiple variables, you’ll need to wait until [“Modifying Multiple
    Columns”](ch26.xhtml#sec-across), where you’ll learn how to use [`across()`](https://dplyr.tidyverse.org/reference/across.xhtml).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要总结多个变量，您需要等到[“修改多列”](ch26.xhtml#sec-across)部分，那里您将学习如何使用[`across()`](https://dplyr.tidyverse.org/reference/across.xhtml)。
- en: 'Another popular [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    helper function is a version of [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)
    that also computes proportions:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个流行的[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)辅助函数是[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)的一个版本，还计算比例：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This function has three arguments: `df`, `var`, and `sort`. Only `var` needs
    to be embraced because it’s passed to [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml),
    which uses data masking for all variables. Note that we use a default value for
    `sort` so that if the user doesn’t supply their own value, it will default to
    `FALSE`.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数有三个参数：`df`、`var`和`sort`。只需拥抱`var`，因为它传递给[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)，该函数对所有变量使用数据屏蔽。请注意，我们对`sort`使用默认值，因此如果用户未提供自己的值，它将默认为`FALSE`。
- en: 'Or maybe you want to find the sorted unique values of a variable for a subset
    of the data. Rather than supplying a variable and a value to do the filtering,
    we’ll allow the user to supply a condition:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可能希望查找变量的排序唯一值，用于数据子集。而不是提供一个变量和一个值来进行过滤，我们允许用户提供一个条件：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here we embrace `condition` because it’s passed to [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    and `var` because it’s passed to [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)
    and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们拥抱`condition`，因为它传递给[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)，并且拥抱`var`，因为它传递给[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)和[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)。
- en: 'We’ve made all these examples to take a data frame as the first argument, but
    if you’re working repeatedly with the same data, it can make sense to hardcode
    it. For example, the following function always works with the `flights` dataset
    and always selects `time_hour`, `carrier`, and `flight` since they form the compound
    primary key that allows you to identify a row:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做了所有这些示例，将数据框作为第一个参数，但是如果您反复使用相同的数据，硬编码它可能是有意义的。例如，以下函数始终使用`flights`数据集，并且始终选择`time_hour`、`carrier`和`flight`，因为它们形成复合主键，使您能够识别行：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Data Masking Versus Tidy Selection
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据屏蔽与整洁选择
- en: 'Sometimes you want to select variables inside a function that uses data masking.
    For example, imagine you want to write a `count_missing()` method that counts
    the number of missing observations in rows. You might try writing something like:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您希望在使用数据屏蔽的函数中选择变量。例如，想象一下，您希望编写一个`count_missing()`方法，用于计算行中缺失观测的数量。您可以尝试编写如下内容：
- en: '[PRE32]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This doesn’t work because [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    uses data masking, not tidy selection. We can work around that problem by using
    the handy [`pick()`](https://dplyr.tidyverse.org/reference/pick.xhtml) function,
    which allows you to use tidy selection inside data-masking functions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这不起作用，因为[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    使用的是数据屏蔽，而不是整洁选择。我们可以通过使用方便的[`pick()`](https://dplyr.tidyverse.org/reference/pick.xhtml)
    函数来解决这个问题，该函数允许您在数据屏蔽函数内部使用整洁选择：
- en: '[PRE33]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Another convenient use of [`pick()`](https://dplyr.tidyverse.org/reference/pick.xhtml)
    is to make a 2D table of counts. Here we count using all the variables in the
    `rows` and `columns` and then use [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    to rearrange the counts into a grid:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方便的使用[`pick()`](https://dplyr.tidyverse.org/reference/pick.xhtml) 的方法是制作一个计数的二维表格。在这里，我们使用
    `rows` 和 `columns` 中的所有变量进行计数，然后使用[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    将计数重新排列为网格：
- en: '[PRE34]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: While our examples have mostly focused on dplyr, tidy evaluation also underpins
    tidyr, and if you look at the [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    docs, you can see that `names_from` uses tidy selection.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的例子主要集中在 dplyr 上，整洁评估也支持 tidyr，如果您查看[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    文档，您会发现 `names_from` 使用整洁选择。
- en: Exercises
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Using the datasets from nycflights13, write a function that:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用来自 nycflights13 的数据集，编写一个函数，该函数能够：
- en: 'Finds all flights that were cancelled (i.e., `is.na(arr_time)`) or delayed
    by more than an hour:'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到所有被取消（即`is.na(arr_time)`）或延误超过一小时的航班：
- en: '[PRE35]'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Counts the number of cancelled flights and the number of flights delayed by
    more than an hour:'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算取消航班的数量和延误超过一小时的航班数量：
- en: '[PRE36]'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finds all flights that were cancelled or delayed by more than a user-supplied
    number of hours:'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到所有因用户提供的超过一定小时数而取消或延误的航班：
- en: '[PRE37]'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Summarizes the weather to compute the minimum, mean, and maximum of a user-supplied
    variable:'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总结天气情况，计算用户提供变量的最小值、平均值和最大值：
- en: '[PRE38]'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Converts the user-supplied variable that uses clock time (e.g., `dep_time`,
    `arr_time`, etc.) into a decimal time (i.e., hours + [minutes / 60]):'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将使用时钟时间的用户提供的变量（例如`dep_time`，`arr_time`等）转换为十进制时间（即小时 + [分钟 / 60]）：
- en: '[PRE39]'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For each of the following functions, list all arguments that use tidy evaluation
    and describe whether they use data masking or tidy selection: [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml),
    [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml), [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml),
    [`rename_with()`](https://dplyr.tidyverse.org/reference/rename.xhtml), [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml),
    [`slice_sample()`](https://dplyr.tidyverse.org/reference/slice.xhtml).'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于以下每个函数，请列出所有使用整洁评估的参数，并描述它们是否使用数据屏蔽或整洁选择：[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)，[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)，[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)，[`rename_with()`](https://dplyr.tidyverse.org/reference/rename.xhtml)，[`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml)，[`slice_sample()`](https://dplyr.tidyverse.org/reference/slice.xhtml)。
- en: 'Generalize the following function so that you can supply any number of variables
    to count:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 泛化以下函数，以便您可以提供任意数量的变量来计数：
- en: '[PRE40]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Plot Functions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘图函数
- en: 'Instead of returning a data frame, you might want to return a plot. Fortunately,
    you can use the same techniques with ggplot2, because [`aes()`](https://ggplot2.tidyverse.org/reference/aes.xhtml)
    is a data-masking function. For example, imagine that you’re making a lot of histograms:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不想返回数据框，而是希望返回一个图。幸运的是，您可以使用 ggplot2 的相同技术，因为[`aes()`](https://ggplot2.tidyverse.org/reference/aes.xhtml)
    是一个数据屏蔽函数。例如，想象一下你正在制作许多直方图：
- en: '[PRE41]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Wouldn’t it be nice if you could wrap this up into a histogram function? This
    is easy as pie once you know that [`aes()`](https://ggplot2.tidyverse.org/reference/aes.xhtml)
    is a data-masking function and you need to embrace:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以将这些内容封装到直方图函数中会很好吗？一旦您知道[`aes()`](https://ggplot2.tidyverse.org/reference/aes.xhtml)
    是一个数据屏蔽函数，并且您需要接受：
- en: '[PRE42]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![A histogram of carats of diamonds, ranging from 0 to 5, showing a unimodal,
    right-skewed distribution with a peak between 0 to 1 carats.](assets/rds2_25in01.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![一幅显示钻石克拉数从0到5范围内的直方图，显示出峰值位于0到1克拉之间的单峰右偏分布。](assets/rds2_25in01.png)'
- en: 'Note that `histogram()` returns a ggplot2 plot, meaning you can still add components
    if you want. Just remember to switch from `|>` to `+`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`histogram()` 返回一个 ggplot2 绘图，这意味着您仍然可以添加组件（如果需要的话）。只需记住从 `|>` 切换到 `+`：
- en: '[PRE43]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: More Variables
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多变量
- en: 'It’s straightforward to add more variables to the mix. For example, maybe you
    want an easy way to eyeball whether a dataset is linear by overlaying a smooth
    line and a straight line:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将更多变量简单地添加到混合中也很简单。例如，也许您想要通过叠加平滑线和直线来轻松地检视数据集是否线性：
- en: '[PRE44]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '![Scatterplot of height vs. mass of Star Wars characters showing a positive
    relationship. A smooth curve of the relationship is plotted in red, and the best
    fit line is plotted in blue.](assets/rds2_25in02.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![星球大战角色的身高与体重的散点图，显示正相关关系。红色绘制了关系的平滑曲线，蓝色绘制了最佳拟合线。](assets/rds2_25in02.png)'
- en: 'Or maybe you want an alternative to colored scatterplots for very large datasets
    where overplotting is a problem:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可能希望针对非常大的数据集，其中超过绘图是一个问题，寻找彩色散点图的替代方案：
- en: '[PRE45]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Hex plot of price vs. carat of diamonds showing a positive relationship.
    There are more diamonds that are less than 2 carats than more than 2 carats.](assets/rds2_25in03.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![钻石价格与克拉的六边形图表，显示正相关关系。少于 2 克拉的钻石比大于 2 克拉的钻石多。](assets/rds2_25in03.png)'
- en: Combining with Other Tidyverse Packages
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与其他 Tidyverse 包结合使用
- en: 'Some of the most useful helpers combine a dash of data manipulation with ggplot2\.
    For example, you might want to do a vertical bar chart where you automatically
    sort the bars in frequency order using [`fct_infreq()`](https://forcats.tidyverse.org/reference/fct_inorder.xhtml).
    Since the bar chart is vertical, we also need to reverse the usual order to get
    the highest values at the top:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最有用的辅助工具将少量数据操作与 ggplot2 结合起来。例如，您可能希望做一个垂直条形图，其中使用 [`fct_infreq()`](https://forcats.tidyverse.org/reference/fct_inorder.xhtml)
    自动按频率排序条形。由于条形图是垂直的，我们还需要反转通常的顺序以便将最高值放在顶部：
- en: '[PRE46]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '![Bar plot of clarify of diamonds, where clarity is on the y-axis and counts
    are on the x-axis, and the bars are ordered in order of frequency: SI1, VS2, SI2,
    VS1, VVS2, VVS1, IF, I1.](assets/rds2_25in04.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![钻石澄清度的条形图，其中澄清度在 y 轴上，计数在 x 轴上，并且按频率排序：SI1，VS2，SI2，VS1，VVS2，VVS1，IF，I1。](assets/rds2_25in04.png)'
- en: We have to use a new operator here, `:=`, because we are generating the variable
    name based on user-supplied data. Variable names go on the left of `=`, but R’s
    syntax doesn’t allow anything to the left of `=` except for a single literal name.
    To work around this problem, we use the special operator `:=`, which tidy evaluation
    treats in the same way as `=`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在这里使用一个新的运算符，`:=`，因为我们根据用户提供的数据生成变量名。变量名位于 `=` 的左边，但是 R 的语法除了单个字面名称之外，不允许在
    `=` 的左边放置任何东西。为了解决这个问题，我们使用特殊的运算符 `:=`，tidy evaluation 将其视为与 `=` 相同的方式处理。
- en: 'Or maybe you want to make it easy to draw a bar plot just for a subset of the
    data:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可能想要为数据的子集轻松绘制条形图：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![Bar plot of clarity of diamonds. The most common is SI1, then SI2, then VS2,
    then VS1, then VVS2, then VVS1, then I1, then lastly IF.](assets/rds2_25in05.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![钻石澄清度的条形图。最常见的是 SI1，然后是 SI2，然后是 VS2，然后是 VS1，然后是 VVS2，然后是 VVS1，然后是 I1，最后是
    IF。](assets/rds2_25in05.png)'
- en: You can also get creative and display data summaries in other ways. You can
    find a cool application at [*https://oreil.ly/MV4kQ*](https://oreil.ly/MV4kQ);
    it uses the axis labels to display the highest value. As you learn more about
    ggplot2, the power of your functions will continue to increase.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以发挥创意，并以其他方式显示数据汇总信息。您可以在 [*https://oreil.ly/MV4kQ*](https://oreil.ly/MV4kQ)
    找到一个很酷的应用程序；它使用轴标签显示最高值。随着您对 ggplot2 的了解增加，您的函数的功能也将不断增强。
- en: 'We’ll finish with a more complicated case: labeling the plots you create.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以一个更复杂的情况结束：为创建的图表标记。
- en: Labeling
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: Remember the histogram function we showed you earlier?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们之前展示给你的直方图函数吗？
- en: '[PRE48]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Wouldn’t it be nice if we could label the output with the variable and the
    bin width that was used? To do so, we’re going to have to go under the covers
    of tidy evaluation and use a function from the package we haven’t talked about
    yet: rlang. rlang is a low-level package that’s used by just about every other
    package in the tidyverse because it implements tidy evaluation (as well as many
    other useful tools).'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能够用变量和使用的 bin 宽度标记输出就太好了？为了做到这一点，我们需要深入了解 tidy evaluation 并使用 tidyverse
    中尚未讨论的包中的函数：rlang。rlang 是一个低级别的包，因为它实现了 tidy evaluation（以及许多其他有用的工具），所以几乎每个 tidyverse
    中的其他包都在使用它。
- en: 'To solve the labeling problem, we can use [`rlang::englue()`](https://rlang.r-lib.org/reference/englue.xhtml).
    This works similarly to [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.xhtml),
    so any value wrapped in [`{ }`](https://rdrr.io/r/base/Paren.xhtml) will be inserted
    into the string. But it also understands `{{ }}`, which automatically inserts
    the appropriate variable name:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决标签问题，我们可以使用[`rlang::englue()`](https://rlang.r-lib.org/reference/englue.xhtml)。它的工作方式类似于[`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.xhtml)，因此任何包含在[`{
    }`](https://rdrr.io/r/base/Paren.xhtml)中的值都将插入到字符串中。但它还理解`{{ }}`，它会自动插入适当的变量名：
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '![Histogram of carats of diamonds, ranging from 0 to 5\. The distribution is
    unimodal and right skewed with a peak between 0 to 1 carats.](assets/rds2_25in06.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![0到5克拉钻石的直方图。分布是单峰的，右偏，峰值在0到1克拉之间。](assets/rds2_25in06.png)'
- en: You can use the same approach in any other place where you want to supply a
    string in a ggplot2 plot.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在希望在ggplot2绘图中提供字符串的任何其他地方使用相同的方法。
- en: Exercises
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Build up a rich plotting function by incrementally implementing each of these
    steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐步实现以下每个步骤来构建丰富的绘图函数：
- en: Draw a scatterplot given a dataset and `x` and `y` variables.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定数据集和`x`和`y`变量，绘制散点图。
- en: Add a line of best fit (i.e., a linear model with no standard errors).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加最佳拟合线（即无标准误的线性模型）。
- en: Add a title.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加标题。
- en: Style
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式
- en: R doesn’t care what your function or arguments are called, but the names make
    a big difference for humans. Ideally, the name of your function will be short
    but clearly evoke what the function does. That’s hard! But it’s better to be clear
    than short, as RStudio’s autocomplete makes it easy to type long names.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: R不关心您的函数或参数叫什么，但是对于人类来说，名称对于理解很重要。理想情况下，函数的名称应该简短而清楚地描述函数的作用。这很难！但是清晰比简短更重要，因为RStudio的自动完成使得输入长名称变得容易。
- en: 'Generally, function names should be verbs, and arguments should be nouns. There
    are some exceptions: nouns are OK if the function computes a well-known noun (i.e.,
    [`mean()`](https://rdrr.io/r/base/mean.xhtml) is better than `compute_mean()`)
    or accesses some property of an object (i.e., [`coef()`](https://rdrr.io/r/stats/coef.xhtml)
    is better than `get_coefficients()`). Use your best judgment and don’t be afraid
    to rename a function if you figure out a better name later.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，函数名应该是动词，参数应该是名词。有些例外情况：如果函数计算一个众所周知的名词，则[`mean()`](https://rdrr.io/r/base/mean.xhtml)比`compute_mean()`更好，或者访问对象的某些属性（即[`coef()`](https://rdrr.io/r/stats/coef.xhtml)比`get_coefficients()`更好）。请自行判断，如果后来发现更好的名称，不要害怕重命名函数。
- en: '[PRE50]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: R also doesn’t care about how you use whitespace in your functions, but future
    readers will. Continue to follow the rules from [Chapter 4](ch04.xhtml#chp-workflow-style).
    Additionally, `function()` should always be followed by squiggly brackets ([`{}`](https://rdrr.io/r/base/Paren.xhtml)),
    and the contents should be indented by an additional two spaces. This makes it
    easier to see the hierarchy in your code by skimming the left margin.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: R 对函数中的空白使用方式并不关心，但是未来的读者会关心。继续遵循来自[第四章](ch04.xhtml#chp-workflow-style)的规则。此外，`function()`
    应始终后跟大括号（[`{}`](https://rdrr.io/r/base/Paren.xhtml)），内容应缩进两个额外的空格。这样可以通过浏览左边缘更容易地看到代码的层次结构。
- en: '[PRE51]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you can see, we recommend putting extra spaces inside `{{ }}`. This makes
    it obvious that something unusual is happening.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们建议在`{{ }}`内部放置额外的空格。这样很明显，表示发生了一些不同寻常的事情。
- en: Exercises
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Read the source code for each of the following two functions, puzzle out what
    they do, and then brainstorm better names:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读以下两个函数的源代码，弄清它们的作用，然后为它们想出更好的名称：
- en: '[PRE52]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Take a function that you’ve written recently and spend five minutes brainstorming
    a better name for it and its arguments.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取一个你最近编写的函数，并花五分钟为它及其参数想一个更好的名称。
- en: Make a case for why `norm_r()`, `norm_d()`, etc., would be better than [`rnorm()`](https://rdrr.io/r/stats/Normal.xhtml)
    and [`dnorm()`](https://rdrr.io/r/stats/Normal.xhtml). Make a case for the opposite.
    How could you make the names even clearer?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么`norm_r()`、`norm_d()`等比[`rnorm()`](https://rdrr.io/r/stats/Normal.xhtml)和[`dnorm()`](https://rdrr.io/r/stats/Normal.xhtml)更好？为相反的情况辩护。如何使名称更清晰？
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned how to write functions for three useful scenarios:
    creating a vector, creating a data frame, or creating a plot. Along the way you
    saw many examples, which ideally started to get your creative juices flowing,
    and gave you some ideas for where functions might help your analysis code.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何为三种有用的情景编写函数：创建向量、创建数据框或创建图表。在此过程中，您看到了许多例子，这些例子理想情况下应该激发您的创造力，并为您的分析代码提供了一些想法。
- en: 'We have shown you only the bare minimum to get started with functions and there’s
    much more to learn. A few places to learn more are:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只向您展示了开始使用函数的最基本内容，还有很多东西等待学习。要了解更多信息，请参考以下几个地方：
- en: To learn more about programming with tidy evaluation, see useful recipes in
    [programming with dplyr](https://oreil.ly/8xygI) and [programming with tidyr](https://oreil.ly/QGH9n)
    and learn more about the theory in [“What is data masking and why do I need {{?”](https://oreil.ly/eecUd).
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解有关使用整洁评估进行编程的更多信息，请参阅 [使用 dplyr 进行编程](https://oreil.ly/8xygI) 和 [使用 tidyr
    进行编程](https://oreil.ly/QGH9n)，并了解有关理论的更多信息请参阅 [“数据蒙版是什么以及为什么我需要{{?“](https://oreil.ly/eecUd)。
- en: To learn more about reducing duplication in your ggplot2 code, read the [“Programming
    with ggplot2” chapter](https://oreil.ly/Vvt6k) of the ggplot2 book.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解如何减少 ggplot2 代码中的重复内容，请阅读 ggplot2 书籍的 [“使用 ggplot2 编程” 章节](https://oreil.ly/Vvt6k)。
- en: For more advice on function style, see the [tidyverse style guide](https://oreil.ly/rLKSn).
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欲了解更多有关函数风格的建议，请查看 [tidyverse 风格指南](https://oreil.ly/rLKSn)。
- en: In the next chapter, we’ll dive into iteration which gives you further tools
    for reducing code duplication.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入探讨迭代，为您提供进一步减少代码重复的工具。
