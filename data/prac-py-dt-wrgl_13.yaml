- en: Appendix B. A Bit More About Git
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. 关于 Git 的更多信息
- en: 'For the most part, working with Git as the only programmer on a project is
    fairly straightforward: you make changes to your code, commit them, push them
    to GitHub (or another remote repository), and that’s that.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分情况下，作为一个项目的唯一程序员使用 Git 是相当简单的：你对代码进行更改，提交它们，将它们推送到 GitHub（或其他远程存储库），就这样。
- en: Until…it isn’t. Maybe you updated your *README.md* file on GitHub and forgot
    to `git pull` before making changes to the same file on your device. Maybe you
    forgot to add a message when you ran `git commit`. While dealing with these kinds
    of hiccups is not really all that complicated, some of the error messages and
    default behaviors of Git in the terminal can be tricky to deal with if you’ve
    never encountered them before. While the guidance in this appendix is *far* from
    comprehensive, in my experience a basic working knowledge of Git is more than
    enough, unless and until you’re working with a relatively large team in a large
    organization. So while you should definitely move beyond these simple fixes if
    you’re planning to use Git with multiple collaborators on complex projects, for
    most of us, these examples cover the situations you’ll find yourself in—and need
    help getting out of—most often.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 直到……不是。也许你在 GitHub 上更新了你的 *README.md* 文件，然后忘记在设备上对相同文件进行更改之前运行 `git pull`。也许你在运行
    `git commit` 时忘记添加消息。虽然处理这些小问题并不是真的很复杂，但如果你以前从未遇到过这些问题，那么 Git 在终端中的某些错误消息和默认行为可能会让人感到棘手。虽然这个附录中的指导*远远*不是全面的，在我的经验中，对
    Git 的基本工作知识已经足够了，除非你在一个大型组织的一个相对大的团队中工作。因此，虽然如果你计划与多个合作者在复杂的项目上使用 Git，你应该绝对超越这些简单的修复，但对于我们大多数人来说，这些示例涵盖了你经常会发现自己处于的情况，并且需要帮助摆脱的情况。
- en: You Run git push/pull and End Up in a Weird Text Editor
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 git push/pull 后进入了一个奇怪的文本编辑器
- en: 'Like me, Git is relentless when it comes to documenting your work, to the point
    that *it will not let you commit changes without a commit message*. That means
    that if you run a `commit` command without including the `-m "Commit message here"`,
    for example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 像我一样，Git 在记录你的工作时是无情的，以至于*如果没有提交消息，它将不允许你提交更改*。这意味着，如果你运行 `commit` 命令而没有包含 `-m
    "提交消息在这里"`，例如：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: you will most likely find your terminal window taken over, showing text similar
    to what’s shown in [Figure B-1](#terminal_commit_editing).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会发现你的终端窗口被接管，显示类似于 [图 B-1](#terminal_commit_editing) 中所示的文本。
- en: '![Terminal-based commit message editing](assets/ppdw_ab01.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![基于终端的提交消息编辑](assets/ppdw_ab01.png)'
- en: Figure B-1\. Terminal-based commit message editing
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-1\. 基于终端的提交消息编辑
- en: 'This can be pretty unsettling, especially the first time it happens. But since
    it *will* happen, here’s how to get it sorted out quickly:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能相当令人不安，特别是第一次发生时。但因为它*会*发生，所以这里是如何快速解决的方法：
- en: Start by typing the letter **`i`**. While not all editors actually require you
    to type `i` to enter `INSERT` mode, most of them will swallow the first character
    you type, so you may as well start with that one. You can see what this view looks
    like in [Figure B-2](#terminal_insert_mode).
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从键入字母 **`i`** 开始。虽然并不是所有编辑器实际上都要求你键入 `i` 进入 `INSERT` 模式，但其中大多数会吞掉你键入的第一个字符，所以你最好从这个字符开始。你可以在
    [图 B-2](#terminal_insert_mode) 中看到这个视图的样子。
- en: To get *out* of `INSERT` mode, hit the Esc or Escape key. Then type **`:x`**
    as shown in [Figure B-3](#terminal_commit_save), followed by Enter or Return.
    This will save your commit message as required and *also* get you out of that
    text editor and back into the terminal window you know and love.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出 `INSERT` 模式，按下 Esc 键或 Escape 键。然后像 [图 B-3](#terminal_commit_save) 中所示输入
    **`:x`**，然后按 Enter 键或 Return 键。这将按照要求保存你的提交消息，*并且*让你退出那个文本编辑器，回到你熟悉和喜爱的终端窗口。
- en: Note that the editor you find yourself in may not look like what’s shown in
    Figures [B-2](#terminal_insert_mode) and [B-3](#terminal_commit_save); if not,
    don’t panic. Now’s the time to search online for how to edit, save, and exit in
    whatever program you have been bounced into. Whatever the specifics, the objective
    is the same.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你发现自己处于的编辑器可能看起来与 [图 B-2](#terminal_insert_mode) 和 [图 B-3](#terminal_commit_save)
    所示的不同；如果不同，不要惊慌。现在是搜索在线编辑、保存和退出的时间，无论你被弹到了什么程序中。不管具体情况如何，目标都是一样的。
- en: '![Terminal editor in `INSERT` mode](assets/ppdw_ab02.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![`INSERT` 模式下的终端编辑器](assets/ppdw_ab02.png)'
- en: Figure B-2\. Terminal editor in `INSERT` mode
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-2\. `INSERT` 模式下的终端编辑器
- en: '![Terminal editor with ''save and exit'' command](assets/ppdw_ab03.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![带有“保存并退出”命令的终端编辑器](assets/ppdw_ab03.png)'
- en: Figure B-3\. Terminal editor with “save and exit” command
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-3\. 带有“保存并退出”命令的终端编辑器
- en: Your git push/pull Command Gets Rejected
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的git push/pull命令被拒绝了。
- en: It happens to all of us. You think you’ve been diligent about committing your
    code at the end of each work session—even writing individual commit messages to
    keep track of the changes you’ve made in individual files instead of just running
    `git commit -a`. Even so, sometimes you run your `git push` command and it gets
    rejected. What do you do then?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况每个人都会遇到。你以为自己每次工作结束时都很勤奋地提交了代码，甚至为每个文件的更改编写了单独的提交消息，而不只是运行`git commit -a`。即便如此，有时你运行`git
    push`命令时会被拒绝。那么接下来该怎么办呢？
- en: 'If your `git push` command fails, you’ll probably see an error like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的`git push`命令失败，您可能会看到如下错误：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In general, this happens when (at least) one of the files in your local repository
    has been changed since the last commit, but *so has the version in your remote
    repository*, so Git doesn’t know which one should take precedence. Not to worry!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这种情况发生在您本地存储库中的至少一个文件自上次提交以来已更改，但*远程存储库中的版本也已更改*，因此Git不知道哪一个应该优先。不用担心！
- en: Run git pull
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行git pull
- en: If the changes in the file(s) can be merged automatically, Git will do that.
    This will resolve your file conflicts, but it can result in your being popped
    into the command line’s built-in text editor, which can be pretty confusing to
    deal with in its own right. If you run `git pull` and suddenly you’re looking
    at something like the text shown in [Figure B-1](#terminal_commit_editing), see
    [“You Run git push/pull and End Up in a Weird Text Editor”](#editing_commits_in_vim).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件的更改可以自动合并，Git将执行此操作。这将解决您的文件冲突，但可能会导致您进入命令行的内置文本编辑器，这本身可能会相当令人困惑。如果您运行`git
    pull`，突然看到像[图 B-1](#terminal_commit_editing)中显示的文本，参见[“您运行git push/pull并进入了一个奇怪的文本编辑器”](#editing_commits_in_vim)。
- en: 'If the changes in the file(s) *can’t* be merged automatically, you’ll get a
    message that looks something like this (you’ll also see this message if you just
    run `git pull` without running `git push` first):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件的更改*不能*自动合并，您将收到类似以下消息的提示（如果您只运行`git pull`而没有先运行`git push`，也会看到此消息）：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This basically means that it’s up to you, the human, to determine which file
    should take precedence and either manually bring them back into line (by directly
    editing one or both files) or by simply forcing one to overwrite the other.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着由您作为人来决定哪个文件应优先，并通过直接编辑一个或两个文件或简单地强制其中一个文件覆盖另一个来将它们重新调整为一致。
- en: Fixing conflicts manually
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动解决冲突
- en: Imagine you have a repo with a *README.md* file, to which you have committed
    changes both on GitHub.com and on your device. You tried to `git push` and got
    an error, so you tried to `git pull`, but the automatic merge failed. To fix the
    conflicts manually, start by opening the *local* copy of the file in your preferred
    text editor. What you might see for a markdown file is shown in [Example B-1](#markdown_file_conflict).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个包含*README.md*文件的存储库，在GitHub.com和您的设备上都对其进行了更改。您试图`git push`但遇到了错误，因此您尝试了`git
    pull`，但自动合并失败了。要手动解决冲突，请先在您首选的文本编辑器中打开*本地*文件副本。Markdown文件的冲突示例如[示例 B-1](#markdown_file_conflict)所示。
- en: Example B-1\. An example conflict in a markdown file
  id: totrans-29
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 B-1\. Markdown文件中的一个冲突示例
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To resolve the conflict, simply edit the content of the file as you prefer,
    being sure to delete the lines that start with `<<<<<<<` and `>>>>>>>`, as well
    as the `=======`; if you leave those lines, they will appear in your final file.
    Now save the file as usual.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决冲突，只需根据您的喜好编辑文件内容，确保删除以`<<<<<<<`和`>>>>>>>`开头的行，以及`=======`；如果您留下这些行，它们将出现在最终文件中。现在像往常一样保存文件。
- en: 'Next, run:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then run:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that you *cannot* specify the filename in the `git commit` command, or
    Git will complain that you’ve asked it to do a partial commit during a merge.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`git commit`命令中*不能*指定文件名，否则Git会抱怨你在合并过程中要求进行部分提交。
- en: 'Finally, run:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And you should be all set!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您应该设置好一切！
- en: “Fixing” conflicts by forcing an overwrite
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “修复”冲突是通过强制覆盖来完成的。
- en: 'While it’s always a good idea to actually look at any files where conflicts
    have popped up, sometimes you’re pushing to a repo that you know is way out of
    date, and you just want to overwrite what’s on your remote repository. In that
    case, you *can* push the changes without manually reconciling the files by running:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然查看冲突文件总是个好主意，但有时你要推送到一个明显过时的仓库，而你只是想要用本地版本覆盖远程仓库中的内容。在这种情况下，你*可以*运行以下命令推送更改，而不手动协调文件：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will simply overwrite the remote file with your local version, but keep
    in mind that *all record of the overwritten version will be lost, including the
    commit history*. That means once you use `--force`, there’s no going back—the
    remote content is gone. Obviously, this means that you should *never* use this
    option if other people are contributing to the same repository—use it only if
    you’re the only one working on it and you’re (very) confident that the material
    in the remote repo can be overwritten safely.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将简单地用本地版本覆盖远程文件，但请记住，*所有覆盖版本的记录，包括提交历史*，都将丢失。这意味着一旦使用了`--force`，就无法回退——远程内容将会丢失。显然，这意味着如果其他人也在同一仓库上贡献，你*绝不*应该使用此选项——只有在你是唯一的工作人员，并且对远程仓库中的内容有(非常)充分的信心可以安全覆盖时，才应使用此选项。
- en: Git Quick Reference
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 快速参考
- en: '[Table B-1](#common_git_commands_table) is a very brief overview of the most
    useful/common `git` commands. A more comprehensive list can be found [on the GitHub
    website](https://training.github.com/downloads/github-git-cheat-sheet).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 B-1](#common_git_commands_table) 提供了最常用和有用的`git`命令的简要概述。更详细的列表可以在[GitHub网站](https://training.github.com/downloads/github-git-cheat-sheet)上找到。'
- en: Table B-1\. Most-used `git` terminal commands
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表 B-1\. 最常用的`git`终端命令
- en: '| Command text | Command result |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 命令文本 | 命令结果 |'
- en: '| --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `git status` | Prints out the current state of the repo; doesn’t modify anything.
    Lists all files^([a](app02.html#idm45143393092848)) in the repo, grouped by whether
    they are *new*, *untracked*, or *modified*. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `git status` | 显示*仓库*的当前状态；不执行任何修改。列出仓库中所有文件^([a](app02.html#idm45143393092848))，按照它们是*新文件*、*未跟踪*还是*已修改*进行分组。
    |'
- en: '| `git add` *`filename`* | *Stage* a specific file that is currently *untracked*.
    A file must be staged by a `git add` command before it can be committed to the
    repository. After this, `git status` will label staged files as *new*. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `git add` *`filename`* | *将*当前*未跟踪*的特定文件*加入*到*暂存区*。必须通过`git add`命令*将文件暂存*后才能*提交到*仓库。之后，`git
    status`会将*已暂存*的文件标记为*新文件*。 |'
- en: '| `git add -A` | Stage *all* currently untracked files at once. After this,
    `git status` will label staged files as *new*. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `git add -A` | 一次性*将*所有当前*未跟踪*的文件*加入*到*暂存区*。之后，`git status`会将*已暂存*的文件标记为*新文件*。
    |'
- en: '| `` git commit -m "Commit message here."` `` *`filename`* | Commit a specific,
    already-staged file, attaching the message that appears between double quotation
    marks. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `` git commit -m "Commit message here."` `` *`filename`* | 提交特定的已暂存文件，并附上双引号之间的消息。
    |'
- en: '| `git commit -a -m "Commit message here."` | Commit *all* currently staged
    files, attaching the same commit message to all of them. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `git commit -a -m "Commit message here."` | 提交*所有*当前*已暂存*的文件，并附上相同的提交消息。
    |'
- en: '| `git push` | Push all local commits to the remote repo. Adding the `--force`
    command will overwrite any conflicting commits in the remote repo with the locally
    committed files. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `git push` | 将所有本地提交*推送*到远程仓库。添加`--force`命令将使用本地提交的文件*覆盖*远程仓库中的任何冲突提交。 |'
- en: '| `git pull` | Pull all remote files to the local repo. Adding the `--force`
    command will overwrite any conflicting commits in the local repo with the remote
    committed files. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `git pull` | 将所有远程文件*拉取*到本地仓库。添加`--force`命令将使用远程提交的文件*覆盖*本地仓库中的任何冲突提交。 |'
- en: '| ^([a](app02.html#idm45143393092848-marker)) If you have an active *.gitignore*
    file for the repo, any ignored files will *not* be listed by `git status`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| ^([a](app02.html#idm45143393092848-marker)) 如果你的仓库中有一个活动的*.gitignore*文件，那么被忽略的文件将*不会*被`git
    status`列出。 |'
