- en: Chapter 10\. First Steps with Python for Excel Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。Python初学者的第一步
- en: Created in 1991 by Guido van Rossum, Python is a programming language that,
    like R, is free and open source. At the time, van Rossum was reading the scripts
    from *Monty Python’s Flying Circus* and decided to name the language after the
    British comedy. Unlike R, which was designed explicitly for data analysis, Python
    was developed as a general-purpose language meant to do things like interact with
    operating systems, handle processing errors, and so forth. This has some important
    implications for how Python “thinks” and works with data. For example, you saw
    in [Chapter 7](ch07.html#data-structures-in-r) that R has a built-in tabular data
    structure. This isn’t the case in Python; we’ll need to rely more heavily on external
    packages to work with data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python是由Guido van Rossum于1991年创建的编程语言，与R一样，是自由且开源的。当时，van Rossum正在阅读《蒙提·派森的飞行马戏团》的剧本，并决定以这部英国喜剧命名这种语言。与专门为数据分析设计的R不同，Python被开发为一种通用语言，用于与操作系统交互、处理处理错误等任务。这对Python如何“思考”和处理数据有一些重要的影响。例如，在[第7章](ch07.html#data-structures-in-r)中你看到，R有一个内置的表格数据结构。而Python并非如此；我们将更多地依赖外部包来处理数据。
- en: 'That’s not necessarily a problem: Python, like R, has thousands of packages
    maintained by a thriving contributor community. You’ll find Python used for everything
    from mobile app development to embedded devices to, yes, data analytics. Its diverse
    user base is growing rapidly, and Python has become one of the most popular programming
    languages not just for analytics but for computing generally.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不一定是一个问题：与R一样，Python有数千个由充满活力的贡献者社区维护的包。你会发现Python被用于从移动应用开发到嵌入式设备再到数据分析等各个领域。它的多样化用户群体正在迅速增长，Python不仅成为了最受欢迎的分析编程语言之一，也成为了计算领域的一种重要工具。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Python was conceived as a general-purpose programming language, while R was
    bred specifically with statistical analysis in mind.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python最初被设计为一种通用编程语言，而R则是专门用于统计分析。
- en: Downloading Python
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Python
- en: The [Python Software Foundation](https://python.org) maintains the “official”
    Python source code. Because Python is open source, anyone is available to take,
    add to, and redistribute Python code. Anaconda is one such Python distribution
    and is the suggested installation for this book. It’s maintained by a for-profit
    company of the same name and is available in paid tiers; we’ll be using the free
    Individual Edition. Python is now on its third version, Python 3\. You can download
    the latest release of Python 3 at [Anaconda’s website](https://oreil.ly/3RYeQ).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python软件基金会](https://python.org)维护着“官方”的Python源代码。由于Python是开源的，任何人都可以获取、添加和重新分发Python代码。Anaconda是其中一种Python发行版，也是本书建议的安装方式。它由同名的盈利公司维护，提供了付费版本；我们将使用免费的个人版本。Python现在已经到了第三个版本，Python
    3。您可以在[Anaconda的网站](https://oreil.ly/3RYeQ)下载Python 3的最新版本。'
- en: 'In addition to a simplified installation of Python, Anaconda comes with extras,
    including some popular packages which we’ll use later in the book. It also ships
    with a web application that we’ll use to work with Python: the Jupyter Notebook.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简化的Python安装外，Anaconda还提供了额外的内容，包括一些我们在本书中稍后会使用的流行包。它还附带了一个Web应用程序，我们将用它来处理Python：Jupyter
    Notebook。
- en: Getting Started with Jupyter
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Jupyter
- en: As mentioned in [Chapter 6](ch06.html#first-steps-r), R was modeled after the
    S program for EDA. Because of the iterative nature of EDA, the expected workflow
    of the language is to execute and explore the output of selected lines of code.
    This makes it easy to conduct data analysis directly from an R script, *.r*. We
    used the RStudio IDE to provide additional support for our programming session,
    such as dedicated panes for help documentation and information about the objects
    in our environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第6章](ch06.html#first-steps-r)中所述，R是在EDA程序S的基础上建模的。由于EDA的迭代性质，语言的预期工作流程是执行和探索所选代码行的输出。这使得直接从R脚本*.r进行数据分析变得容易。我们使用了RStudio
    IDE，为我们的编程会话提供了额外的支持，例如专门用于帮助文档和环境中对象信息的窗格。
- en: By contrast, Python in some ways behaves more like “lower-level” programming
    languages, where code needs first to be compiled into a machine-readable file,
    and *then* run. This can make it relatively trickier to conduct piecemeal data
    analysis from a Python script, *.py*. This pain point of working with Python for
    statistical and, more broadly, scientific computing caught the attention of physicist
    and software developer Fernando Pérez, who with colleagues in 2001 launched the
    IPython project to make a more interactive interpreter for Python (IPython as
    a playful shorthand for “interactive Python”). One result of this initiative was
    a new type of file, the *IPython Notebook*, denoted with the *.ipynb* file extension.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Python 在某些方面更像是“低级”编程语言，其中代码首先需要编译成机器可读文件，*然后*再运行。这使得从 Python 脚本 *.py*
    进行分步数据分析相对更加棘手。物理学家兼软件开发者费尔南多·佩雷斯及其同事在 2001 年启动了 IPython 项目，以使 Python 更加交互式（IPython
    是对“交互式 Python”的俏皮简称）。这一倡议的一个结果是一种新类型的文件，即 *IPython Notebook*，以 *.ipynb* 文件扩展名表示。
- en: 'This project gained traction and in 2014, IPython was spun into the broader
    Project Jupyter, a language-agnostic initiative to develop interactive, open source
    computing software. Thus, the IPython Notebook became the Jupyter Notebook while
    retaining the *.ipynb* extension. Jupyter notebooks run as interactive web applications
    that allow users to combine code with text, equations, and more to create media-rich
    interactive documents. In fact, Jupyter was named in part as an homage to the
    notebooks Galileo used to record his discovery of the planet Jupiter’s moons.
    A *kernel* is used behind the scenes to execute the notebook’s code. By downloading
    Anaconda, you’ve set up all these necessary parts to execute Python from a Jupyter
    notebook: now you just need to launch a session.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目逐渐受到关注，并于2014年发展成更广泛的 Jupyter 项目，这是一个与语言无关的倡议，旨在开发交互式、开源的计算软件。因此，IPython
    Notebook 成为了 Jupyter Notebook，同时保留了 *.ipynb* 扩展名。Jupyter 笔记本作为交互式网络应用程序运行，允许用户将代码与文本、方程式等结合起来，创建媒体丰富的交互式文档。事实上，Jupyter
    在一定程度上是为了向伽利略用于记录其发现木星卫星的笔记本致敬而命名的。*内核* 在幕后用于执行笔记本的代码。通过下载 Anaconda，您已经设置好了执行
    Python 的 Jupyter 笔记本所需的所有必要部分：现在您只需要启动一个会话。
- en: 'The steps for launching a Jupyter notebook vary for Windows and Mac computers.
    On Windows, open the Start menu, then search for and launch `Anaconda Prompt`.
    This is a command-line tool for working with your Anaconda distribution and yet
    another way to interact with Python code. For a further introduction to running
    Python from the command line with the experience of an Excel user in mind, check
    out Felix Zumstein’s [*Python for Excel*](https://oreil.ly/gDpyj) (O’Reilly).
    From inside the Anaconda prompt, enter `jupyter notebook` at the cursor and hit
    `Enter`. Your command will resemble the following, but with a different home directory
    path:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Jupyter 笔记本的步骤因 Windows 和 Mac 计算机而异。在 Windows 上，打开“开始”菜单，然后搜索并启动 `Anaconda
    Prompt`。这是一个用于处理您的 Anaconda 发行版的命令行工具，也是与 Python 代码交互的另一种方式。在 Anaconda 提示符内部，输入
    `jupyter notebook` 并按 `Enter` 键。您的命令将类似于以下内容，但主目录路径不同：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On a Mac, open Launchpad, then search for and launch Terminal. This is the
    command-line interface that ships with Macs and can be used to communicate with
    Python. From inside the Terminal prompt, enter `jupyter notebook` at the cursor
    and hit `Enter`. Your command line will resemble the following, but with a different
    home directory path:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上，打开 Launchpad，然后搜索并启动 Terminal。这是随 Mac 一起提供的命令行界面，可用于与 Python 进行通信。在终端提示符内部，输入
    `jupyter notebook` 并按 `Enter` 键。您的命令行将类似于以下内容，但主目录路径不同：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After doing this on either system, a couple of things will happen: first, an
    additional terminal-like window will launch on your computer. *Do not close this
    window.* This is what establishes the connection to the kernel. Additionally,
    the Jupyter notebook interface should automatically open in your default web browser.
    If it does not, the terminal-like window will include a link that you can paste
    into your browser. [Figure 10-1](#jupyter-landing) shows what you should see in
    your browser. Jupyter launches with a File-Explorer-like interface. You can now
    navigate to the folder in which you’d like to save your notebooks.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在任一系统上执行此操作后，将会发生几件事情：首先，会在您的计算机上启动一个类似终端的额外窗口。*请勿关闭此窗口。* 这将建立与内核的连接。此外，Jupyter
    笔记本界面应会自动在您的默认网络浏览器中打开。如果没有自动打开，终端窗口中会包含一个您可以复制并粘贴到浏览器中的链接。图 10-1 中展示了您在浏览器中应该看到的内容。Jupyter
    启动时会显示一个类似文件浏览器的界面。现在，您可以导航至您希望保存笔记本的文件夹。
- en: '![Jupyter landing page](assets/aina_1001.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Jupyter 起始页面](assets/aina_1001.png)'
- en: Figure 10-1\. Jupyter landing page
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-1\. Jupyter 起始页面
- en: To open a new notebook, head to the upper-right side of your browser window
    and select New → Notebook → Python 3\. A new tab will open with a blank Jupyter
    notebook. Like RStudio, Jupyter provides far more features than we can cover in
    an introduction; we’ll focus on the key pieces to get you started. The four main
    components of a Jupyter notebook are labeled in [Figure 10-2](#jupyter-interface);
    let’s walk through each.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开一个新的笔记本，请转至浏览器窗口右上角，选择 New → Notebook → Python 3\. 一个新标签页将打开，显示一个空白的 Jupyter
    笔记本。与 RStudio 类似，Jupyter 提供的功能远远超出了我们在介绍中所能覆盖的范围；我们将重点介绍一些关键要点，以帮助您入门。Jupyter
    笔记本的四个主要组成部分在 [Figure 10-2](#jupyter-interface) 中进行了标注；让我们逐一了解一下。
- en: '![Screenshot of Jupyter notebook interface](assets/aina_1002.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Jupyter 笔记本界面截图](assets/aina_1002.png)'
- en: Figure 10-2\. Elements of the Jupyter interface
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-2\. Jupyter 界面的组成元素
- en: 'First, the notebook name: this is the name of our *.ipynb* file. You can rename
    the notebook by clicking and writing over the current name.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是笔记本的名称：这是我们的 *.ipynb* 文件的名称。您可以通过点击并在当前名称上进行编辑来重新命名笔记本。
- en: Next, the menu bar. This contains different operations for working with your
    notebook. For example, under File you can open and close notebooks. Saving them
    isn’t much of an issue, because Jupyter notebooks are autosaved every two minutes.
    If you ever need to convert your notebook to a *.py* Python script or other common
    file type, you can do so by going to File → Download as. There’s also a Help section
    containing several guides and links to reference documentation. You can learn
    about Jupyter’s many keyboard shortcuts from this menu.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是菜单栏。这包含了不同的操作，用于处理您的笔记本。例如，在 File 下，您可以打开和关闭笔记本。保存它们并不是什么大问题，因为 Jupyter
    笔记本会每两分钟自动保存一次。如果您需要将笔记本转换为 *.py* Python 脚本或其他常见文件类型，可以通过 File → Download as 完成。还有一个
    Help 部分，包含了几个指南和链接到参考文档。您可以从此菜单了解 Jupyter 的许多键盘快捷键。
- en: Earlier, I mentioned that the *kernel* is how Jupyter interacts with Python
    under the hood. The *Kernel* option in the menu bar contains helpful operations
    for working with it. Computers being what they are, sometimes all that’s needed
    to get your Python code working is to restart the kernel. You can do this by going
    to Kernel → Restart.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我提到过 *内核* 是 Jupyter 在幕后与 Python 交互的方式。菜单栏中的 *Kernel* 选项包含了与之配合工作的有用操作。由于计算机的工作特性，有时候使您的
    Python 代码生效所需的仅仅是重新启动内核。您可以通过 Kernel → Restart 来执行此操作。
- en: 'Immediately underneath the menu bar is the toolbar. This contains helpful icons
    for working with your notebook, which can be more convenient than navigating through
    the menu: for example, several icons here relate to interacting with the kernel.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 立即位于菜单栏下方的是工具栏。这包含了一些有用的图标，用于处理您的笔记本，比通过菜单进行导航更加方便：例如，这里的几个图标与与内核的交互相关。
- en: 'You can also insert and relocate *cells* in your notebook, where you’ll be
    spending most of your time in Jupyter. To get started, let’s do one last thing
    with the toolbar: you’ll find a drop-down menu there currently set to Code; change
    it to Markdown.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter 中，您会花费大部分时间，您可以在笔记本中插入和重新定位 *单元格*。要开始，请使用工具栏进行最后一项操作：您会在那里找到一个下拉菜单，当前设置为
    Code；将其更改为 Markdown。
- en: Now, navigate to your first code cell and type in the phrase, `Hello, Jupyter!`
    Head back to the toolbar and select the Run icon. A couple of things will happen.
    First, you’ll see that your `Hello, Jupyter!` cell will render to look as it might
    in a word processing document. Next, you’ll see that a new code cell is placed
    underneath your previous one, and that it’s set for you to enter more information.
    Your notebook should resemble [Figure 10-3](#hello-world-jupyter).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到您的第一个代码单元格，并输入短语 `Hello, Jupyter!` 然后返回工具栏并选择运行图标。会发生几件事情。首先，您会看到您的 `Hello,
    Jupyter!` 单元格渲染成为类似文字处理文档的样子。接下来，您会看到一个新的代码单元格放置在前一个单元格下面，并且已经设置好让您输入更多信息。您的笔记本应该类似于
    [Figure 10-3](#hello-world-jupyter)。
- en: '![Jupyter keyboard shortcuts](assets/aina_1003.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Jupyter keyboard shortcuts](assets/aina_1003.png)'
- en: Figure 10-3\. “Hello, Jupyter!”
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-3\. “Hello, Jupyter!”
- en: 'Now, go back to the toolbar and again choose “Markdown” from the drop-down
    menu. As you’re beginning to find out, Jupyter notebooks consist of modular cells
    that can be of different types. We’ll focus on the two most common: Markdown and
    Code. Markdown is a plain-text markup language that uses regular keyboard characters
    to format text.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回工具栏并再次选择“Markdown”从下拉菜单中选择。正如您开始了解的那样，Jupyter 笔记本由可以是不同类型的模块单元格组成。我们将专注于两种最常见的类型：Markdown
    和 Code。Markdown 是一种使用常规键盘字符来格式化文本的纯文本标记语言。
- en: 'Insert the following text into your blank cell:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下文本插入您的空白单元格中：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now run the cell: you can do this either from the toolbar or with the shortcut
    Alt + Enter for Windows, Option + Return for Mac. Your selection will render as
    in [Figure 10-4](#jupyter-markdown).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行该单元格：您可以从工具栏或使用快捷键 Alt + Enter（Windows）、Option + Return（Mac）来完成。您的选择将呈现如
    [Figure 10-4](#jupyter-markdown) 所示。
- en: '![Markdown in Jupyter](assets/aina_1004.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Markdown in Jupyter](assets/aina_1004.png)'
- en: Figure 10-4\. Examples of Markdown formatting in Jupyter
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-4\. Jupyter 中 Markdown 格式化的示例
- en: To learn more about Markdown, return to the Help section of the menu bar. It’s
    worth studying up to build elegant notebooks, which can include images, equations,
    and more. But in this book, we’ll focus on the *code* block, as that’s where executable
    Python goes. You should now be on your third code cell; you can leave this one
    as a Code format. Finally, we’ll get coding in Python.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Markdown 的信息，请返回菜单栏中的帮助部分。值得学习，以构建优雅的笔记本，可以包括图像、方程式等。但在本书中，我们将专注于 *code*
    块，因为那里可以执行 Python 代码。您现在应该在第三个代码单元格上；您可以将此保留为代码格式。最后，我们将在 Python 中进行编码。
- en: Python can be used as a fancy calculator, just like Excel and R. [Table 10-1](#python-arithmetic)
    lists some common arithmetic operators in Python.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可以像 Excel 和 R 一样用作高级计算器。[Table 10-1](#python-arithmetic) 列出了 Python 中一些常见的算术运算符。
- en: Table 10-1\. Common arithmetic operators in Python
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-1\. Python 中常见的算术运算符
- en: '| Operator | Description |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `+` | Addition |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 |'
- en: '| `-` | Subtraction |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 |'
- en: '| `*` | Multiplication |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 |'
- en: '| `/` | Division |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 |'
- en: '| `**` | Exponent |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `**` | 指数 |'
- en: '| `%%` | Modulo |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `%%` | 取模 |'
- en: '| `//` | Floor division |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `//` | 地板除法 |'
- en: 'Enter in the following arithmetic, then run the cells:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下算术，然后运行单元格：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As Jupyter code blocks are executed, they are given numbered labels of their
    inputs and outputs with `In []` and `Out []`, respectively.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行 Jupyter 代码块时，它们分别用 `In []` 和 `Out []` 标记其输入和输出。
- en: 'Python also follows the order of operations; let’s try running a few examples
    from within the same cell:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Python 也遵循操作顺序；让我们试着在同一个单元中运行几个例子：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'By default, Jupyter notebooks will only return the output of the last-run code
    within a cell, so we’ll break this into two. You can split a cell at the cursor
    on either Windows or Mac with the keyboard shortcut Ctrl + Shift + - (Minus):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Jupyter 笔记本仅返回单元格中最后一次运行代码的输出，所以我们将其分成两部分。您可以使用键盘快捷键 Ctrl + Shift + -（减号）在
    Windows 或 Mac 上在光标处分割单元格：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And yes, Python also uses code comments. Similar to R, they start with a hash,
    and it’s also preferable to keep them to separate lines.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Python 也使用代码注释。与 R 类似，它们以井号开头，并且最好将它们保持在单独的行上。
- en: 'Like Excel and R, Python includes many functions for both numbers and characters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Excel 和 R 一样，Python 包括许多用于数字和字符的函数：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unlike Excel, but like R, Python is case-sensitive. That means *only* `abs()`
    works, not `ABS()` or `Abs()`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Excel 不同，但类似于 R，Python 是区分大小写的。这意味着 *只有* `abs()` 起作用，而不是 `ABS()` 或 `Abs()`。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Similar to R, you can use the `?` operator to get information about functions,
    packages, and more. A window will open as in [Figure 10-5](#jupyter-help), which
    you can then expand or open in a new window.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与 R 类似，你可以使用 `?` 运算符获取有关函数、包等的信息。会打开一个窗口，就像 [图 10-5](#jupyter-help) 中展示的那样，你可以展开它或在新窗口中打开。
- en: '![Help documentation in Jupyter](assets/aina_1005.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jupyter 中的帮助文档](assets/aina_1005.png)'
- en: Figure 10-5\. Launching documentation in Jupyter notebooks
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10-5\. 在 Jupyter 笔记本中打开帮助文档
- en: Comparison operators mostly work the same in Python as in R and Excel; in Python,
    results are either returned as `True` or `False`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符在 Python 中与 R 和 Excel 大多数情况下工作方式相同；在 Python 中，结果要么返回 `True` 要么返回 `False`。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As with R, you check for whether two values are equal with `==`; a single equals
    sign `=` is used to assign objects. We’ll stick with `=` throughout to assign
    objects in Python.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与 R 一样，你可以用 `==` 检查两个值是否相等；单个等号 `=` 用于赋值对象。我们在 Python 中会一直使用 `=` 来赋值对象。
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You may have noticed there was no `Out []` component of cell `11`. That’s because
    we only *assigned* the object; we didn’t print anything. Let’s do that now:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到第 11 格单元中没有 `Out []` 组件。那是因为我们只是 *赋值* 了对象；我们没有打印任何内容。现在让我们来做一下：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Object names in Python must start with a letter or underscore, and the rest
    of the name can contain only letters, numbers, or underscores. There are also
    a few off-limit keywords. Again, you’re left with broad license for naming objects
    in Python, but just because you *can* name an object `scooby_doo` doesn’t mean
    you should.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的对象名称必须以字母或下划线开头，其余部分只能包含字母、数字或下划线。还有一些禁用的关键字。同样，你可以广泛命名 Python 对象，但并不意味着你应该把对象命名为
    `scooby_doo`。
- en: Just like in R, our objects in Python can consist of different data types. [Table 10-2](#data-types-python)
    shows some basic Python types. Do you see the similarities and differences to
    R?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在 R 中一样，我们的 Python 对象可以由不同的数据类型组成。[表 10-2](#data-types-python) 展示了一些基本的 Python
    类型。你能看出与 R 的相似性和差异吗？
- en: Table 10-2\. Basic object types in Python
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-2\. Python 的基本对象类型
- en: '| Data type | Example |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 数据类型 | 示例 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| String | `''Python''`, `''G. Mount''`, `''Hello, world!''` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `''Python''`, `''G. Mount''`, `''Hello, world!''` |'
- en: '| Float | `6.2`, `4.13`, `3.1` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | `6.2`, `4.13`, `3.1` |'
- en: '| Integer | `3`, `-1`, `12` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | `3`, `-1`, `12` |'
- en: '| Boolean | `True`, `False` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | `True`, `False` |'
- en: 'Let’s assign some objects. We can find what type they are with the `type()`
    function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给一些对象赋值。我们可以用 `type()` 函数找出它们的类型：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You’ve worked with objects in R, so you’re probably not surprised that it’s
    possible to use them as part of Python operations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在 R 中使用对象了，所以可能不会对它们作为 Python 操作的一部分感到意外。
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Closely related to functions in Python are *methods*. A method is affixed to
    an object with a period and does something to that object. For example, to capitalize
    all letters in a string object, we can use the `upper()` method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中与函数密切相关的是 *方法*。方法通过一个点与对象关联，并对该对象执行某些操作。例如，要将字符串对象中的所有字母大写，我们可以使用 `upper()`
    方法：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Functions and methods are both used to perform operations on objects, and we’ll
    use both in this book. As you are probably hoping, Python, like R, can store multiple
    values in a single object. But before getting into that, let’s consider how *modules*
    work in Python.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 函数和方法都用于对对象执行操作，在本书中我们将同时使用两者。就像你可能希望的那样，Python 和 R 一样，可以在单个对象中存储多个值。但在深入讨论之前，让我们先来看看
    *模块* 在 Python 中是如何工作的。
- en: Modules in Python
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 模块
- en: 'Python was designed as a general-purpose programming language, so even some
    of the simplest functions for working with data aren’t available out of the box.
    For example, we won’t have luck finding a function to take the square root of
    a number:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Python 被设计为通用编程语言，因此甚至一些最简单的用于处理数据的函数也不是默认可用的。例如，我们找不到一个可以计算平方根的函数：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This function *does* exist in Python. But to access it, we’ll need to bring
    in a *module*, which is like a package in R. Several modules come installed with
    Python as part of the Python Standard Library; for example, the `math` module
    contains many mathematical functions, including `sqrt()`. We can call this module
    into our session with the `import` statement:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在 Python 中确实存在。但要访问它，我们需要引入一个 *模块*，它类似于 R 中的包。Python 标准库中预装了许多模块；例如，`math`
    模块包含许多数学函数，包括 `sqrt()`。我们可以通过 `import` 语句将此模块引入到我们的会话中：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Statements are instructions telling the interpreter what to do. We just told
    Python to, well, *import* the `math` module. The `sqrt()` function should now
    be available to us; give it a try:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 语句是告诉解释器要做什么的指令。我们刚刚告诉 Python，嗯，*导入* `math` 模块。现在 `sqrt()` 函数应该对我们可用了；试试看吧：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Honestly, I’m not fibbing about a `sqrt()` function. The reason we’re still
    getting errors is we need to explicitly tell Python *where* that function comes
    from. We can do that by prefixing the module name before the function, like so:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我并没有在 `sqrt()` 函数上说谎。我们仍然遇到错误的原因是我们需要明确告诉 Python *这个* 函数来自哪里。我们可以通过在函数前加上模块名来做到这一点，像这样：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The Standard Library is full of helpful modules. Then there are the thousands
    of third-party modules, bundled into *packages* and submitted to the Python Package
    Index. `pip` is the standard package-management system; it can be used to install
    from the Python Package Index as well as outside sources.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库中充满了有用的模块。然后是数千个第三方模块，捆绑成*包*并提交到 Python 包索引中。`pip` 是标准的包管理系统；它可以用于从 Python
    包索引以及外部源安装。
- en: 'The Anaconda distribution has done much of the lifting for working with packages.
    First off, some of the most popular Python packages come preinstalled. Additionally,
    Anaconda includes features to ensure all packages on your machine are compatible.
    For this reason, it’s preferred to install packages directly from Anaconda rather
    than from `pip`. Python package installation is generally done from the command
    line; you worked there earlier when you were in the Anaconda Prompt (Windows)
    or Terminal (Mac). However, we can execute command-line code from Jupyter by including
    an exclamation mark in front of it. Let’s install `plotly`, a popular package
    for data visualization, from Anaconda. The statement to use is `conda install`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 发行版在处理包时已经做了很多工作。首先，一些最受欢迎的 Python 包是预安装的。此外，Anaconda 包括功能以确保您计算机上的所有包都是兼容的。因此，最好直接从
    Anaconda 安装包而不是从 `pip` 安装。通常情况下，Python 包的安装是通过命令行完成的；您之前在 Anaconda Prompt（Windows）或
    Terminal（Mac）中已经使用过命令行。不过，我们可以通过在 Jupyter 前加上感叹号来执行命令行代码。让我们从 Anaconda 安装一个流行的数据可视化包
    `plotly`。使用的语句是 `conda install`：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Not all packages are available to download from Anaconda; in that case, we
    can install via `pip`. Let’s do it for the `pyxlsb` package, which can be used
    to read binary `.xlsb` Excel files into Python:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有包都可以从 Anaconda 下载；在这种情况下，我们可以通过 `pip` 进行安装。让我们为 `pyxlsb` 包做这个，它可以用来将二进制
    `.xlsb` Excel 文件读取到 Python 中：
- en: '[PRE22]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Although downloading packages right from Jupyter is convenient, it can be an
    unpleasant surprise for others to try running your notebook only to get hit with
    lengthy or unnecessary downloads. That’s why it’s common to comment out install
    commands, a convention I follow in the book repository.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管直接从 Jupyter 下载包很方便，但对于其他人来说，尝试运行您的笔记本只会遇到漫长或不必要的下载可能是一个不愉快的惊喜。这就是为什么通常注释掉安装命令是一个约定，我在书的代码库中也遵循这个约定。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re using Anaconda to run Python, it’s best to install things first via
    `conda` and only then install via `pip` if the package is not available.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Anaconda 运行 Python，最好首先通过 `conda` 安装东西，只有在包不可用时才通过 `pip` 安装。
- en: Upgrading Python, Anaconda, and Python packages
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 Python、Anaconda 和 Python 包
- en: '[Table 10-3](#python-update-options) lists several other helpful commands for
    maintaining your Python environment. You can also install and maintain Anaconda
    packages from a point-and-click interface using the Anaconda Navigator, which
    is installed with Anaconda Individual Edition. To get started, launch the application
    on your computer, then navigate to the Help menu to read the documentation for
    more.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[Table 10-3](#python-update-options) 列出了维护您的 Python 环境的几个其他有用的命令。您还可以使用 Anaconda
    Navigator 通过点和点击界面安装和维护 Anaconda 包，Anaconda Navigator 与 Anaconda 个人版一起安装。要开始，请在计算机上启动该应用程序，然后转到帮助菜单以阅读更多文档。'
- en: Table 10-3\. Helpful commands for maintaining Python packages
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10-3\. 维护 Python 包的有用命令
- en: '| Command | Description |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 描述 |'
- en: '| --- | --- |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `conda update anaconda` | Updates Anaconda distribution |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `conda update anaconda` | 更新 Anaconda 发行版 |'
- en: '| `conda update python` | Updates Python version |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `conda update python` | 更新 Python 版本 |'
- en: '| `conda update -- all` | Updates all possible packages downloaded via `conda`
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `conda update -- all` | 更新通过 `conda` 下载的所有可能的包 |'
- en: '| `pip list -- outdated` | Lists all packages downloaded via `pip` that can
    be updated |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `pip list -- outdated` | 列出所有可以更新的通过 `pip` 下载的包 |'
- en: Conclusion
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this chapter, you learned how to work with objects and packages in Python
    and got the hang of working with Jupyter notebooks.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何在Python中处理对象和包，并且掌握了使用Jupyter笔记本的技巧。
- en: Exercises
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习：
- en: 'The following exercises provide additional practice and insight on these topics:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习提供了关于这些主题的额外练习和深入见解：
- en: 'From a new Jupyter notebook, do the following:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从一个新的Jupyter笔记本开始，做以下操作：
- en: Assign the sum of 1 and –4 as `a`.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将1和-4的和分配给变量`a`。
- en: Assign the absolute value of `a` as `b`.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量`a`的绝对值分配给变量`b`。
- en: Assign `b` minus 1 as `d`.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`b`减1的结果分配给变量`d`。
- en: Is `d` greater than 2?
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`d`是否大于2？
- en: The Python Standard Library includes a module `random` containing a function
    `randint()`. This function works like `RANDBETWEEN()` in Excel; for example, `randint(1,
    6)` will return an integer between 1 and 6\. Use this function to find a random
    number between 0 and 36.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python标准库包括一个名为`random`的模块，其中包含一个名为`randint()`的函数。这个函数的用法类似于Excel中的`RANDBETWEEN()`；例如，`randint(1,
    6)`会返回一个介于1和6之间的整数。使用这个函数找到一个介于0和36之间的随机数。
- en: The Python Standard Library also includes a module called `this`. What happens
    when you import that module?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python标准库还包括一个名为`this`的模块。当你导入该模块时会发生什么？
- en: Download the `xlutils` package from Anaconda, then use the `?` operator to retrieve
    the available documentation.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Anaconda下载`xlutils`包，然后使用`?`操作符检索可用的文档。
- en: I will again encourage you to begin using the language as soon as possible in
    your everyday work, even if at first it’s just as a calculator. You can also try
    performing the same tasks in R *and* Python, then comparing and contrasting. If
    you learned by relating R to Excel, the same will work for relating Python to
    R.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我再次鼓励你尽快在日常工作中开始使用这种语言，即使一开始只是作为计算器。你也可以尝试在R和Python中执行相同的任务，然后进行比较和对比。如果你是通过将R与Excel相关联来学习的，那么将Python与R相关联也是一样的道理。
