- en: Chapter 27\. A Field Guide to Base R
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第27章。基础 R 实用指南
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: To finish off the programming section, we’re going to give you a quick tour
    of the most important base R functions that we don’t otherwise discuss in the
    book. These tools are particularly useful as you do more programming and will
    help you read code you encounter in the wild.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成编程部分，我们将快速介绍一下在本书中未详细讨论的最重要的基础 R 函数。随着您进行更多编程，这些工具将特别有用，并将帮助您阅读在实际应用中遇到的代码。
- en: This is a good place to remind you that the tidyverse is not the only way to
    solve data science problems. We teach the tidyverse in this book because tidyverse
    packages share a common design philosophy, increasing the consistency across functions,
    and making each new function or package a little easier to learn and use. It’s
    not possible to use the tidyverse without using base R, so we’ve actually already
    taught you a *lot* of base R functions, including [`library()`](https://rdrr.io/r/base/library.xhtml)
    to load packages; [`sum()`](https://rdrr.io/r/base/sum.xhtml) and [`mean()`](https://rdrr.io/r/base/mean.xhtml)
    for numeric summaries; the factor, date, and POSIXct data types; and of course
    all the basic operators such as `+`, `-`, `/`, `*`, `|`, `&`, and `!`. What we
    haven’t focused on so far is base R workflows, so we will highlight a few of those
    in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个提醒您的好地方，整洁宇宙（tidyverse）并不是解决数据科学问题的唯一途径。我们在本书中教授整洁宇宙的原因是整洁宇宙包共享一个共同的设计理念，增加了函数之间的一致性，并使每个新的函数或包都更容易学习和使用。不可能在不使用基础
    R 的情况下使用整洁宇宙，因此我们实际上已经教过您很多基础 R 函数，包括 [`library()`](https://rdrr.io/r/base/library.xhtml)
    用于加载包；[`sum()`](https://rdrr.io/r/base/sum.xhtml) 和 [`mean()`](https://rdrr.io/r/base/mean.xhtml)
    用于数字汇总；因子、日期和 POSIXct 数据类型；当然还包括所有基本运算符，如 `+`, `-`, `/`, `*`, `|`, `&` 和 `!`。到目前为止，我们还没有专注于基础
    R 工作流程，所以我们将在本章节中突出几个重点。
- en: After you read this book, you’ll learn other approaches to the same problems
    using base R, data.table, and other packages. You’ll undoubtedly encounter these
    other approaches when you start reading R code written by others, particularly
    if you’re using StackOverflow. It’s 100% OK to write code that uses a mix of approaches,
    and don’t let anyone tell you otherwise!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在您阅读本书后，您将学习使用基础 R、data.table 和其他包解决同一问题的其他方法。当您开始阅读他人编写的 R 代码时，特别是在使用 StackOverflow
    时，您无疑会遇到这些其他方法。编写混合使用各种方法的代码完全没问题，不要让任何人告诉您其他！
- en: 'In this chapter, we’ll focus on four big topics: subsetting with `[`, subsetting
    with `[[` and `$`, using the apply family of functions, and using `for` loops.
    To finish off, we’ll briefly discuss two essential plotting functions.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于四个主要主题：使用 `[` 进行子集化、使用 `[[` 和 `$` 进行子集化、使用 apply 函数族以及使用 `for` 循环。最后，我们将简要讨论两个必要的绘图函数。
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'This package focuses on base R so it doesn’t have any real prerequisites, but
    we’ll load the tidyverse to explain some of the differences:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本包专注于基础 R，因此没有任何真正的先决条件，但我们将加载整洁宇宙以解释一些差异：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Selecting Multiple Elements with [
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择多个元素的方式 [
- en: '`[` is used to extract subcomponents from vectors and data frames and is called
    like `x[i]` or `x[i, j]`. In this section, we’ll introduce you to the power of
    `[`, first showing you how you can use it with vectors, and then showing how the
    same principles extend in a straightforward way to 2D structures like data frames.
    We’ll then help you cement that knowledge by showing how various dplyr verbs are
    special cases of `[`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`[` 用于从向量和数据框中提取子组件，像 `x[i]` 或 `x[i, j]` 这样调用。在本节中，我们将向您介绍 `[` 的强大功能，首先展示如何在向量中使用它，然后展示相同的原理如何直接扩展到数据框等二维结构。然后，我们将通过展示各种
    dplyr 动词如何是 `[` 的特殊情况来帮助您巩固这些知识。'
- en: Subsetting Vectors
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子集向量
- en: 'There are five main types of things that you can subset a vector with, i.e.,
    that can be the `i` in `x[i]`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有五种主要类型的东西，您可以使用向量进行子集化，即可以作为 `x[i]` 中的 `i`：
- en: '*A vector of positive integers*. Subsetting with positive integers keeps the
    elements at those positions:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正整数向量*。使用正整数进行子集化将保留这些位置的元素：'
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By repeating a position, you can actually make a longer output than input,
    making the term “subsetting” a bit of a misnomer:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过重复位置，您实际上可以生成比输入更长的输出，使术语“子集”有点不准确：
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*A vector of negative integers*. Negative values drop the elements at the specified
    positions:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*负整数向量*。负值将删除指定位置的元素：'
- en: '[PRE3]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*A logical vector*. Subsetting with a logical vector keeps all values corresponding
    to a `TRUE` value. This is most often useful in conjunction with the comparison
    functions:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逻辑向量*。使用逻辑向量进行子集化会保留所有对应于 `TRUE` 值的数值。这在与比较函数一起使用时通常非常有用：'
- en: '[PRE4]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unlike [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml), `NA`
    indices will be included in the output as `NA`s.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml) 不同，`NA` 索引将作为
    `NA` 包含在输出中。
- en: '*A character vector*. If you have a named vector, you can subset it with a
    character vector:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符向量*。如果你有一个命名向量，你可以用字符向量对其进行子集化：'
- en: '[PRE5]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with subsetting with positive integers, you can use a character vector to
    duplicate individual entries.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与使用正整数进行子集化一样，可以使用字符向量复制单个条目。
- en: '*Nothing*. The final type of subsetting is nothing, `x[]`, which returns the
    complete `x`. This is not useful for subsetting vectors, but as we’ll see shortly,
    it is useful when subsetting 2D structures like tibbles.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*空白*。最后一种子集化类型是什么都不做，`x[]`，它返回完整的 `x`。这对于子集化向量并不有用，但正如我们后面将看到的，当子集化 2D 结构如
    tibbles 时是有用的。'
- en: Subsetting Data Frames
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子集化数据框
- en: There are quite a few different ways^([1](ch27.xhtml#idm44771263328096)) that
    you can use `[` with a data frame, but the most important way is to select rows
    and columns independently with `df[rows, cols]`. Here `rows` and `cols` are vectors
    as described earlier. For example, `df[rows, ]` and `df[, cols]` select just rows
    or just columns, using the empty subset to preserve the other dimension.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多不同的方法^([1](ch27.xhtml#idm44771263328096)) 可以使用 `[` 与数据框，但最重要的方法是独立选择行和列，使用
    `df[rows, cols]`。这里 `rows` 和 `cols` 是前面描述的向量。例如，`df[rows, ]` 和 `df[, cols]` 仅选择行或列，使用空子集来保留其他维度。
- en: 'Here are a couple of examples:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个例子：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We’ll come back to `$` shortly, but you should be able to guess what `df$x`
    does from the context: it extracts the `x` variable from `df`. We need to use
    it here because `[` doesn’t use tidy evaluation, so you need to be explicit about
    the source of the `x` variable.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不久我们会回到 `$`，但你应该能猜出 `df$x` 在上下文中的作用：它从 `df` 中提取 `x` 变量。我们需要在这里使用它，因为 `[` 不使用整洁评估，所以你需要明确
    `x` 变量的来源。
- en: There’s an important difference between tibbles and data frames when it comes
    to `[`. In this book, we’ve mainly used tibbles, which *are* data frames, but
    they tweak some behaviors to make your life a little easier. In most places, you
    can use “tibble” and “data frame” interchangeably, so when we want to draw particular
    attention to R’s built-in data frame, we’ll write `data.frame`. If `df` is a `data.frame`,
    then `df[, cols]` will return a vector if `col` selects a single column and will
    return a data frame if it selects more than one column. If `df` is a tibble, then
    `[` will always return a tibble.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及 `[` 时，tibble 和数据框之间有重要的区别。在本书中，我们主要使用了 tibble，它们 *是* 数据框，但它们调整了一些行为以使您的生活更轻松。在大多数情况下，您可以互换使用“tibble”和“数据框”，因此当我们想特别注意
    R 内置数据框时，我们将写 `data.frame`。如果 `df` 是 `data.frame`，那么 `df[, cols]` 将在选择单个列时返回一个向量，并在选择多个列时返回一个数据框。如果
    `df` 是一个 tibble，那么 `[` 将始终返回一个 tibble。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'One way to avoid this ambiguity with `data.frame`s is to explicitly specify
    `drop = FALSE`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 避免与 `data.frame` 的这种歧义的一种方法是显式指定 `drop = FALSE`：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: dplyr Equivalents
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dplyr 等价操作
- en: 'Several dplyr verbs are special cases of `[`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 几个 dplyr 动词是 `[` 的特殊情况之一：
- en: '[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml) is equivalent
    to subsetting the rows with a logical vector, taking care to exclude missing values:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml) 等同于使用逻辑向量对行进行子集化，注意排除缺失值：'
- en: '[PRE9]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another common technique in the wild is to use [`which()`](https://rdrr.io/r/base/which.xhtml)
    for its side effect of dropping missing values: `df[which(df$x > 1), ]`.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实际应用中另一种常见技术是使用 [`which()`](https://rdrr.io/r/base/which.xhtml)，它有副作用可以删除缺失值：`df[which(df$x
    > 1), ]`。
- en: '[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml) is equivalent
    to subsetting the rows with an integer vector, usually created with [`order()`](https://rdrr.io/r/base/order.xhtml):'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml) 相当于使用整数向量对行进行子集化，通常使用
    [`order()`](https://rdrr.io/r/base/order.xhtml) 创建：'
- en: '[PRE10]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can use `order(decreasing = TRUE)` to sort all columns in descending order
    or `-rank(col)` to sort columns in decreasing order individually.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用 `order(decreasing = TRUE)` 对所有列按降序排序，或者使用 `-rank(col)` 以递减顺序单独排序列。
- en: 'Both [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml) and [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)
    are similar to subsetting the columns with a character vector:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml) 和 [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)
    与使用字符向量子集化列类似：'
- en: '[PRE11]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Base R also provides a function that combines the features of [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    and [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)^([2](ch27.xhtml#idm44771262898928))
    called [`subset()`](https://rdrr.io/r/base/subset.xhtml):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基础 R 还提供了一个结合了 [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    和 [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)^([2](ch27.xhtml#idm44771262898928))
    功能的函数，称为 [`subset()`](https://rdrr.io/r/base/subset.xhtml)：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This function was the inspiration for much of dplyr’s syntax.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数启发了 dplyr 很多的语法。
- en: Exercises
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Create functions that take a vector as input and return:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建接受向量作为输入并返回的函数：
- en: The elements at even-numbered positions
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 偶数位置的元素
- en: Every element except the last value
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除最后一个值外的每个元素
- en: Only even values (and no missing values)
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有偶数值（且无缺失值）
- en: Why is `x[-which(x > 0)]` not the same as `x[x <= 0]`? Read the documentation
    for [`which()`](https://rdrr.io/r/base/which.xhtml) and do some experiments to
    figure it out.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 `x[-which(x > 0)]` 不等同于 `x[x <= 0]`？阅读 [`which()`](https://rdrr.io/r/base/which.xhtml)
    的文档并进行一些实验来弄清楚。
- en: Selecting a Single Element with $ and [[
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 $ 和 [[ 选择单个元素
- en: '`[`, which selects many elements, is paired with `[[` and `$`, which extract
    a single element. In this section, we’ll show you how to use `[[` and `$` to pull
    columns out of data frames, discuss a couple more differences between `data.frames`
    and tibbles, and emphasize some important differences between `[` and `[[` when
    used with lists.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`[` 选择多个元素，与 `[[` 和 `$` 配对使用，这两者提取单个元素。在本节中，我们将展示如何使用 `[[` 和 `$` 从数据框中提取列，并讨论
    `data.frames` 和 tibbles 之间的一些区别，并强调使用列表时 `[` 和 `[[` 之间的一些重要区别。'
- en: Data Frames
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据框
- en: '`[[` and `$` can be used to extract columns out of a data frame. `[[` can access
    by position or by name, and `$` is specialized for access by name:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[` 和 `$` 可用于从数据框中提取列。`[[` 可以按位置或名称访问，而 `$` 则专门用于按名称访问：'
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'They can also be used to create new columns, the base R equivalent of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还可以用于创建新列，这是基础 R 中 [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    的等效操作：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There are several other base R approaches to creating new columns including
    with [`transform()`](https://rdrr.io/r/base/transform.xhtml), [`with()`](https://rdrr.io/r/base/with.xhtml),
    and [`within()`](https://rdrr.io/r/base/with.xhtml). Hadley collected a few [examples](https://oreil.ly/z6vyT).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基础 R 中的几种方法创建新列，包括 [`transform()`](https://rdrr.io/r/base/transform.xhtml)，[`with()`](https://rdrr.io/r/base/with.xhtml)，以及
    [`within()`](https://rdrr.io/r/base/with.xhtml)。Hadley 收集了一些 [示例](https://oreil.ly/z6vyT)。
- en: 'Using `$` directly is convenient when performing quick summaries. For example,
    if you just want to find the size of the biggest diamond or the possible values
    of `cut`, there’s no need to use [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行快速汇总时，直接使用 `$` 很方便。例如，如果只想找到最大钻石的大小或`cut`的可能值，则无需使用 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'dplyr also provides an equivalent to `[[`/`$` that we didn’t mention in [Chapter 3](ch03.xhtml#chp-data-transform):
    [`pull()`](https://dplyr.tidyverse.org/reference/pull.xhtml). [`pull()`](https://dplyr.tidyverse.org/reference/pull.xhtml)
    takes either a variable name or a variable position and returns just that column.
    That means we could rewrite the previous code to use the pipe:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: dplyr 还提供了一个与 `[[`/`$` 等效的函数，在 [第 3 章](ch03.xhtml#chp-data-transform) 中未提到：[`pull()`](https://dplyr.tidyverse.org/reference/pull.xhtml)。[`pull()`](https://dplyr.tidyverse.org/reference/pull.xhtml)
    接受变量名或变量位置，仅返回该列。这意味着我们可以重写以使用管道的先前代码：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tibbles
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tibbles
- en: 'There are a couple of important differences between tibbles and base `data.frame`s
    when it comes to `$`. Data frames match the prefix of any variable names (so-called
    *partial matching*) and don’t complain if a column doesn’t exist:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: tibbles 和基础 `data.frame`s 之间在使用 `$` 时有几个重要区别。数据框会匹配任何变量名称的前缀（所谓的*部分匹配*），如果列不存在也不会报错：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Tibbles are more strict: they only ever match variable names exactly and they
    will generate a warning if the column you are trying to access doesn’t exist:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Tibbles 更严格：它们只匹配变量名的确切名称，并且如果尝试访问不存在的列，则会生成警告：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For this reason we sometimes joke that tibbles are lazy and surly: they do
    less and complain more.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们有时开玩笑说 tibble 懒惰又暴躁：它们做得少，抱怨得多。
- en: Lists
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: '`[[` and `$` are also really important for working with lists, and it’s important
    to understand how they differ from `[`. Let’s illustrate the differences with
    a list named `l`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`[[`和`$`在处理列表时也非常重要，理解它们与`[`的区别至关重要。让我们通过一个名为`l`的列表来说明它们的不同：'
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`[` extracts a sublist. It doesn’t matter how many elements you extract, the
    result will always be a list.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[`提取一个子列表。不管你提取多少元素，结果始终是一个列表。'
- en: '[PRE21]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Like with vectors, you can subset with a logical, integer, or character vector.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像向量一样，你可以使用逻辑、整数或字符向量来进行子集选择。
- en: '`[[` and `$` extract a single component from a list. They remove a level of
    hierarchy from the list.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[[`和`$`从列表中提取单个组件。它们从列表中删除一个层级。'
- en: '[PRE22]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The difference between `[` and `[[` is particularly important for lists because
    `[[` drills down into the list, while `[` returns a new, smaller list. To help
    you remember the difference, take a look at the unusual pepper shaker shown in
    [Figure 27-1](#fig-pepper). If this pepper shaker is your list `pepper`, then
    `pepper[1]` is a pepper shaker containing a single pepper packet. `pepper[2]`
    would look the same but would contain the second packet. `pepper[1:2]` would be
    a pepper shaker containing two pepper packets. `pepper[[1]]` would extract the
    pepper packet itself.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`[`和`[[`之间的区别对于列表尤其重要，因为`[[`会深入到列表中，而`[`会返回一个新的、较小的列表。为了帮助你记住这个区别，看看在 [图 27-1](#fig-pepper)
    中展示的不寻常的胡椒瓶。如果这个胡椒瓶是你的列表`pepper`，那么`pepper[1]`是一个装有单个胡椒包的胡椒瓶。`pepper[2]`看起来一样，但是会包含第二个胡椒包。`pepper[1:2]`是一个装有两个胡椒包的胡椒瓶。`pepper[[1]]`会提取胡椒包本身。'
- en: '![Three photos. On the left is a photo of a glass pepper shaker. Instead of
    the pepper shaker containing pepper, it contains a single packet of pepper. In
    the middle is a photo of a single packet of pepper. On the right is a photo of
    the contents of a packet of pepper.](assets/rds2_2701.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![三张照片。左边是一个玻璃胡椒瓶的照片。胡椒瓶里面不是胡椒，而是一个单独的胡椒包。中间是一个单独的胡椒包的照片。右边是胡椒包的内容的照片。](assets/rds2_2701.png)'
- en: Figure 27-1\. (Left) A pepper shaker that Hadley once found in his hotel room.
    (Middle) `pepper[1]`. (Right) `pepper[[1]]`.
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 27-1\. (左) Hadley 在他的酒店房间里找到的一个胡椒瓶。 (中) `pepper[1]`。 (右) `pepper[[1]]`。
- en: 'This same principle applies when you use 1D `[` with a data frame: `df["x"]`
    returns a one-column data frame, and `df[["x"]]` returns a vector.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在数据框中使用1D `[`时，这个原则也适用：`df["x"]`返回一个一列的数据框，而`df[["x"]]`返回一个向量。
- en: Exercises
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: What happens when you use `[[` with a positive integer that’s bigger than the
    length of the vector? What happens when you subset with a name that doesn’t exist?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你用正整数作为`[[`的索引，这个整数大于向量长度时会发生什么？当你用一个不存在的名称作为子集时会发生什么？
- en: What would `pepper[[1]][1]` be? What about `pepper[[1]][[1]]`?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pepper[[1]][1]`会是什么？`pepper[[1]][[1]]`又会是什么？'
- en: Apply Family
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用家族
- en: In [Chapter 26](ch26.xhtml#chp-iteration), you learned tidyverse techniques
    for iteration like [`dplyr::across()`](https://dplyr.tidyverse.org/reference/across.xhtml)
    and the map family of functions. In this section, you’ll learn about their base
    equivalents, the *apply family*. In this context, apply and map are synonyms because
    another way of saying “map a function over each element of a vector” is “apply
    a function over each element of a vector.” Here we’ll give you a quick overview
    of this family so you can recognize them in the wild.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 26 章](ch26.xhtml#chp-iteration) 中，你学到了迭代的 tidyverse 技术，比如 [`dplyr::across()`](https://dplyr.tidyverse.org/reference/across.xhtml)
    和 map 函数族。在本节中，你将学习它们的基本等效物，即 *apply family*。在这个上下文中，apply 和 map 是同义词，因为另一种说法是“在每个向量元素上映射一个函数”。我们将为你快速概述这个家族，以便你在实际中能够识别它们。
- en: The most important member of this family is [`lapply()`](https://rdrr.io/r/base/lapply.xhtml),
    which is similar to [`purrr::map()`](https://purrr.tidyverse.org/reference/map.xhtml).^([3](ch27.xhtml#idm44771262249040))
    In fact, because we haven’t used any of [`map()`’s](https://purrr.tidyverse.org/reference/map.xhtml)
    more advanced features, you can replace every [`map()`](https://purrr.tidyverse.org/reference/map.xhtml)
    call in [Chapter 26](ch26.xhtml#chp-iteration) with [`lapply()`](https://rdrr.io/r/base/lapply.xhtml).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个家族中最重要的成员是[`lapply()`](https://rdrr.io/r/base/lapply.xhtml)，它类似于[`purrr::map()`](https://purrr.tidyverse.org/reference/map.xhtml)^([3](ch27.xhtml#idm44771262249040))。实际上，因为我们没有使用任何[`map()`](https://purrr.tidyverse.org/reference/map.xhtml)的更高级特性，你可以在[第26章](ch26.xhtml#chp-iteration)中用[`lapply()`](https://rdrr.io/r/base/lapply.xhtml)替换每个[`map()`](https://purrr.tidyverse.org/reference/map.xhtml)调用。
- en: There’s no exact base R equivalent to [`across()`](https://dplyr.tidyverse.org/reference/across.xhtml),
    but you can get close by using `[` with [`lapply()`](https://rdrr.io/r/base/lapply.xhtml).
    This works because under the hood, data frames are lists of columns, so calling
    [`lapply()`](https://rdrr.io/r/base/lapply.xhtml) on a data frame applies the
    function to each column.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在base R中没有与[`across()`](https://dplyr.tidyverse.org/reference/across.xhtml)完全等效的函数，但可以通过使用[`lapply()`](https://rdrr.io/r/base/lapply.xhtml)和`[`接近。这是因为在底层，数据框架是列的列表，所以在数据框架上调用[`lapply()`](https://rdrr.io/r/base/lapply.xhtml)会将函数应用到每一列。
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The previous code uses a new function, [`sapply()`](https://rdrr.io/r/base/lapply.xhtml).
    It’s similar to [`lapply()`](https://rdrr.io/r/base/lapply.xhtml), but it always
    tries to simplify the result, which is the reason for the `s` in its name, here
    producing a logical vector instead of a list. We don’t recommend using it for
    programming, because the simplification can fail and give you an unexpected type,
    but it’s usually fine for interactive use. purrr has a similar function called
    [`map_vec()`](https://purrr.tidyverse.org/reference/map.xhtml) that we didn’t
    mention in [Chapter 26](ch26.xhtml#chp-iteration).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码使用了一个新函数[`sapply()`](https://rdrr.io/r/base/lapply.xhtml)。它类似于[`lapply()`](https://rdrr.io/r/base/lapply.xhtml)，但它总是尝试简化结果，这就是其名称中`s`的原因，在这里产生一个逻辑向量而不是列表。我们不建议在编程中使用它，因为简化可能会失败并给出意外的类型，但通常在交互使用中是可以的。purrr有一个类似的函数叫[`map_vec()`](https://purrr.tidyverse.org/reference/map.xhtml)，我们在第26章没有提到它。
- en: 'Base R provides a stricter version of [`sapply()`](https://rdrr.io/r/base/lapply.xhtml)
    called [`vapply()`](https://rdrr.io/r/base/lapply.xhtml), short for *v*ector apply.
    It takes an additional argument that specifies the expected type, ensuring that
    simplification occurs the same way regardless of the input. For example, we could
    replace the previous [`sapply()`](https://rdrr.io/r/base/lapply.xhtml) call with
    this [`vapply()`](https://rdrr.io/r/base/lapply.xhtml) where we specify that we
    expect [`is.numeric()`](https://rdrr.io/r/base/numeric.xhtml) to return a logical
    vector of length 1:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Base R 提供了一个更严格的版本的[`sapply()`](https://rdrr.io/r/base/lapply.xhtml)，称为[`vapply()`](https://rdrr.io/r/base/lapply.xhtml)，简称*v*ector
    apply。它接受一个额外的参数，指定了期望的类型，确保简化的方式与输入无关。例如，我们可以用这个[`vapply()`](https://rdrr.io/r/base/lapply.xhtml)替换之前的[`sapply()`](https://rdrr.io/r/base/lapply.xhtml)调用，其中我们指定我们期望[`is.numeric()`](https://rdrr.io/r/base/numeric.xhtml)返回一个长度为1的逻辑向量：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The distinction between [`sapply()`](https://rdrr.io/r/base/lapply.xhtml) and
    [`vapply()`](https://rdrr.io/r/base/lapply.xhtml) is really important when they’re
    inside a function (because it makes a big difference to the function’s robustness
    to unusual inputs), but it doesn’t usually matter in data analysis.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们在函数内部时，[`sapply()`](https://rdrr.io/r/base/lapply.xhtml)和[`vapply()`](https://rdrr.io/r/base/lapply.xhtml)之间的区别真的很重要（因为对于异常输入，这对函数的鲁棒性有很大影响），但在数据分析中通常并不重要。
- en: 'Another important member of the apply family is [`tapply()`](https://rdrr.io/r/base/tapply.xhtml),
    which computes a single grouped summary:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: apply 家族的另一个重要成员是[`tapply()`](https://rdrr.io/r/base/tapply.xhtml)，它计算单个分组摘要：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Unfortunately, [`tapply()`](https://rdrr.io/r/base/tapply.xhtml) returns its
    results in a named vector, which requires some gymnastics if you want to collect
    multiple summaries and grouping variables into a data frame (it’s certainly possible
    to not do this and just work with free-floating vectors, but in our experience
    that just delays the work). If you want to see how you might use [`tapply()`](https://rdrr.io/r/base/tapply.xhtml)
    or other base techniques to perform other grouped summaries, Hadley has collected
    a few techniques [in a gist](https://oreil.ly/evpcw).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，[`tapply()`](https://rdrr.io/r/base/tapply.xhtml)返回其结果为命名向量，如果你想将多个摘要和分组变量收集到数据框中，则需要进行一些技巧（当然也可以选择不这样做，只是与自由浮动的向量一起工作，但根据我们的经验，这只会延迟工作）。如果你想看看如何使用[`tapply()`](https://rdrr.io/r/base/tapply.xhtml)或其他基本技术来执行其他分组摘要，Hadley在[gist](https://oreil.ly/evpcw)中收集了一些技术。
- en: The final member of the apply family is the titular [`apply()`](https://rdrr.io/r/base/apply.xhtml),
    which works with matrices and arrays. In particular, watch out for `apply(df,
    2, something)`, which is a slow and potentially dangerous way of doing `lapply(df,
    something)`. This rarely comes up in data science because we usually work with
    data frames and not matrices.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: apply家族的最后一位成员是名义上的[`apply()`](https://rdrr.io/r/base/apply.xhtml)，它与矩阵和数组一起工作。特别是要注意`apply(df,
    2, something)`，这是做`lapply(df, something)`的一种缓慢且潜在危险的方式。在数据科学中很少遇到这种情况，因为我们通常使用数据框而不是矩阵。
- en: for Loops
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对于循环
- en: '`for` loops are the fundamental building block of iteration that both the apply
    and map families use under the hood. `for` loops are powerful and general tools
    that are important to learn as you become a more experienced R programmer. The
    basic structure of a `for` loop looks like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环是迭代的基本构建块，apply和map系列在幕后使用。`for`循环是强大且通用的工具，作为你成为更有经验的R程序员时学习的重要工具。`for`循环的基本结构如下：'
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The most straightforward use of `for` loops is to achieve the same effect as
    [`walk()`](https://purrr.tidyverse.org/reference/map.xhtml): call some function
    with a side effect on each element of a list. For example, in [“Writing to a Database”](ch26.xhtml#sec-save-database),
    instead of using `walk()`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环最直接的用法是实现与[`walk()`](https://purrr.tidyverse.org/reference/map.xhtml)相同的效果：对列表的每个元素调用具有副作用的某个函数。例如，在[“写入数据库”](ch26.xhtml#sec-save-database)中，可以不使用`walk()`：'
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'we could have used a `for` loop:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以使用`for`循环：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Things get a little trickier if you want to save the output of the `for` loop,
    for example reading all of the Excel files in a directory like we did in [Chapter 26](ch26.xhtml#chp-iteration):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保存`for`循环的输出，例如像我们在[第26章](ch26.xhtml#chp-iteration)中读取目录中所有的Excel文件一样，情况就会变得有些棘手：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There are a few different techniques that you can use, but we recommend being
    explicit about what the output is going to look like up front. In this case, we’re
    going to want a list the same length as `paths`, which we can create with [`vector()`](https://rdrr.io/r/base/vector.xhtml):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的技术可以使用，但我们建议提前明确输出的形式。在这种情况下，我们将需要一个与`paths`相同长度的列表，可以使用[`vector()`](https://rdrr.io/r/base/vector.xhtml)创建：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then instead of iterating over the elements of `paths`, we’ll iterate over
    their indices, using [`seq_along()`](https://rdrr.io/r/base/seq.xhtml) to generate
    one index for each element of `paths`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们不是迭代`paths`的元素，而是迭代它们的索引，使用[`seq_along()`](https://rdrr.io/r/base/seq.xhtml)为`paths`的每个元素生成一个索引：
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using the indices is important because it allows us to link to each position
    in the input with the corresponding position in the output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引很重要，因为它允许我们将输入中的每个位置链接到输出中的相应位置：
- en: '[PRE32]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To combine the list of tibbles into a single tibble, you can use [`do.call()`](https://rdrr.io/r/base/do.call.xhtml)
    + [`rbind()`](https://rdrr.io/r/base/cbind.xhtml):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要将tibbles列表合并为单个tibble，可以使用[`do.call()`](https://rdrr.io/r/base/do.call.xhtml)
    + [`rbind()`](https://rdrr.io/r/base/cbind.xhtml)：
- en: '[PRE33]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Rather than making a list and saving the results as we go, a simpler approach
    is to build up the data frame piece by piece:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与其制作列表并在进行保存的同时保存结果，一个更简单的方法是逐步构建数据框：
- en: '[PRE34]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We recommend avoiding this pattern because it can become slow when the vector
    is long. This is the source of the persistent canard that `for` loops are slow:
    they’re not, but iteratively growing a vector is.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议避免这种模式，因为当向量很长时可能会变慢。这是关于`for`循环速度慢的持久谬论的根源：实际上不是这样，但是当迭代增长向量时会变慢。
- en: Plots
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形
- en: Many R users who don’t otherwise use the tidyverse prefer ggplot2 for plotting
    due to helpful features such as sensible defaults, automatic legends, and a modern
    look. However, base R plotting functions can still be useful because they’re so
    concise—it takes very little typing to do a basic exploratory plot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不使用 tidyverse 的 R 用户更喜欢 ggplot2 进行绘图，因为它具有诸如合理的默认设置、自动图例和现代外观等有用功能。然而，基础 R
    绘图函数仍然很有用，因为它们非常简洁——进行基本的探索性绘图所需的输入很少。
- en: 'There are two main types of base plot you’ll see in the wild: scatterplots
    and histograms, produced with [`plot()`](https://rdrr.io/r/graphics/plot.default.xhtml)
    and [`hist()`](https://rdrr.io/r/graphics/hist.xhtml), respectively. Here’s a
    quick example from the `diamonds` dataset:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 野外常见的两种基础绘图类型是散点图和直方图，分别使用[`plot()`](https://rdrr.io/r/graphics/plot.default.xhtml)和[`hist()`](https://rdrr.io/r/graphics/hist.xhtml)生成。这里是来自`diamonds`数据集的一个快速示例：
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '![On the left, histogram of carats of diamonds, ranging from 0 to 5 carats.
    The distribution is unimodal and right-skewed. On the right, scatterplot of price
    versus carat of diamonds, showing a positive relationship that fans out as both
    price and carat increases. The scatterplot shows very few diamonds bigger than
    3 carats compared to diamonds between 0 to 3 carats.](assets/rds2_27in01.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![左侧是钻石克拉数的直方图，范围从0到5克拉。分布是单峰且右偏。右侧是价格与钻石克拉数的散点图，显示随着价格和克拉数增加呈现正相关关系。与0到3克拉之间的钻石相比，散点图显示很少大于3克拉的钻石。](assets/rds2_27in01.png)'
- en: Note that base plotting functions work with vectors, so you need to pull columns
    out of the data frame using `$` or some other technique.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意基础绘图函数使用向量，因此您需要使用`$`或其他技术从数据框中提取列。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we showed you a selection of base R functions useful for subsetting
    and iteration. Compared to approaches discussed elsewhere in the book, these functions
    tend to have more of a “vector” flavor than a “data frame” flavor because base
    R functions tend to take individual vectors, rather than a data frame and some
    column specification. This often makes life easier for programming and so becomes
    more important as you write more functions and begin to write your own packages.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您展示了一些对子集和迭代有用的基础 R 函数。与本书其他部分讨论的方法相比，这些函数更倾向于“向量”风格，而不是“数据框”风格，因为基础
    R 函数往往处理单独的向量，而不是数据框和某些列规范。这通常使编程更容易，因此在编写更多函数并开始编写自己的包时变得更加重要。
- en: This chapter concludes the programming section of the book. You made a solid
    start on your journey to becoming not just a data scientist who uses R, but a
    data scientist who can *program* in R. We hope these chapters have sparked your
    interest in programming and that you’re looking forward to learning more outside
    of this book.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了本书的编程部分。您已经在成为不仅仅使用 R 的数据科学家，而是能够在 R 中编程的数据科学家的旅程上取得了坚实的开端。我们希望这些章节激发了您对编程的兴趣，并且您期待在本书之外继续学习更多。
- en: ^([1](ch27.xhtml#idm44771263328096-marker)) Read the [Selecting multiple elements
    section](https://oreil.ly/VF0sY) in *Advanced R* to see how you can also subset
    a data frame like it is a 1D object and how you can subset it with a matrix.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch27.xhtml#idm44771263328096-marker)) 阅读《Advanced R》中的[选择多个元素部分](https://oreil.ly/VF0sY)，看看您如何将数据框子集化为1D对象，以及如何使用矩阵对其进行子集化。
- en: ^([2](ch27.xhtml#idm44771262898928-marker)) But it doesn’t handle grouped data
    frames differently, and it doesn’t support selection helper functions like [`starts_with()`](https://tidyselect.r-lib.org/reference/starts_with.xhtml).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch27.xhtml#idm44771262898928-marker)) 但它不会区别处理分组数据框，并且不支持像[`starts_with()`](https://tidyselect.r-lib.org/reference/starts_with.xhtml)这样的选择辅助函数。
- en: ^([3](ch27.xhtml#idm44771262249040-marker)) It just lacks convenient features
    such as progress bars and reporting which element caused the problem if there’s
    an error.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch27.xhtml#idm44771262249040-marker)) 它只是缺乏方便的功能，比如进度条和报告哪个元素引起了问题（如果有错误的话）。
