- en: 2 Getting started with Streamlit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 开始使用 Streamlit
- en: This chapter covers
  id: totrans-1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本章涵盖
- en: Setting up your development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: The Streamlit development workflow
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit 的开发工作流程
- en: Building and running your first Streamlit app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和运行你的第一个 Streamlit 应用程序
- en: Welcome to Chapter 2\. This is where the rubber hits the road! By the end of
    this chapter, you'll be interacting with your first very own Streamlit app!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到第二章。这里是真正的挑战！在本章结束时，你将能够与你的第一个 Streamlit 应用程序进行交互！
- en: 'This book is not just about teaching you Streamlit though; it''s also about
    making sure you''re productive with Streamlit and well-placed to develop apps
    in the real world. So before we jump into writing code, we''ll take some time
    to set up your development environment. Specifically, we''ll talk about three
    things you''ll want to consider while doing so: version control with Git, code
    editing tools, and virtual environments.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不仅关于教你 Streamlit；还确保你能够高效地使用 Streamlit，并且为在现实世界中开发应用程序做好准备。因此，在我们开始编写代码之前，我们将花一些时间来设置你的开发环境。具体来说，我们将讨论你在设置过程中需要考虑的三件事：使用
    Git 进行版本控制、代码编辑工具和虚拟环境。
- en: We'll then examine the workflow you'll follow while coding with Streamlit so
    you know what to expect as you build apps throughout this book. With that out
    of the way, I'll walk you step-by-step through actually creating your first app,
    a password checker.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将检查你在使用 Streamlit 编码时将遵循的工作流程，这样你就可以在本书构建应用程序时知道期待什么。解决了这个问题之后，我将一步一步地引导你实际创建你的第一个应用程序，一个密码检查器。
- en: Excited yet? Let's dive in!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 激动了吗？让我们深入探讨吧！
- en: 2.1 Getting Streamlit up and running
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 将 Streamlit 设置为运行状态
- en: 'First things first! Before you can build any apps, you need Streamlit installed
    and ready to go. This involves two steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先！在你能够构建任何应用程序之前，你需要安装并准备好 Streamlit。这涉及两个步骤：
- en: Install the right version of Python (3.8 and above), and `pip` (a tool that
    ships with Python and can install Python packages easily)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装正确的 Python 版本（3.8 及以上），以及 `pip`（一个与 Python 一起提供的工具，可以轻松安装 Python 包）
- en: 'Use `pip` to install Streamlit (spoiler alert: type `pip install streamlit`)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装 Streamlit（剧透：输入 `pip install streamlit`）
- en: For a detailed installation guide, see Appendix A of this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于详细的安装指南，请参阅本书附录 A。
- en: 2.2 Setting up your development environment
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 设置你的开发环境
- en: The tools you use and the way you set up the environment you code your apps
    in are largely a matter of preference. However, over time, these matters can have
    an outsized impact on your productivity as a developer, so it's worth your time
    to consider them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用的工具以及你设置的应用程序编码环境的方式在很大程度上是个人偏好的问题。然而，随着时间的推移，这些问题可能会对你的开发效率产生不成比例的影响，因此花时间考虑这些问题是值得的。
- en: In this section I'll briefly discuss a few important aspects of your development
    environment, namely version control, your editing tool, and virtual environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将简要讨论你开发环境的一些重要方面，特别是版本控制、你的编辑工具和虚拟环境。
- en: If you're an experienced Python developer and already have a setup you're comfortable
    with, go ahead and skip to the section on installing Streamlit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一位经验丰富的 Python 开发者并且已经有一个让你感到舒适的设置，那么请直接跳转到安装 Streamlit 的部分。
- en: 2.2.1 Version control with Git
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.1 使用 Git 进行版本控制
- en: If you've never written code in a professional setting, there's a chance you
    may not have used a version control system like Git before, or don't fully understand
    what it's for.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未在专业环境中编写过代码，那么你之前可能没有使用过像 Git 这样的版本控制系统，或者可能并不完全理解它是用来做什么的。
- en: '*Version control* is a structured way to track, manage, document, and experiment
    with making changes to your programs. Think of it as a time machine for your code.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*版本控制* 是一种结构化的方式，用于跟踪、管理、记录和实验性地对程序进行更改。把它想象成你代码的时间机器。'
- en: Git is far and away the most popular version control system that exists today,
    so in this book, we'll use the terms *Git* and *version control* interchangeably.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是目前最受欢迎的版本控制系统，因此在本书中，我们将互换使用 *Git* 和 *版本控制* 这两个术语。
- en: In the course of working on your apps, there will be occasions when you change
    your mind and decide to design something differently. In those situations, Git
    allows you to “go back in time” to how your code *used* to be and apply the changes
    from that point.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序的过程中，你可能会改变主意，决定以不同的方式设计某些内容。在这些情况下，Git 允许你“回到过去”，查看你的代码 *曾经* 是什么样子，并从那个点应用更改。
- en: You can also experiment with different versions of your code while testing out
    multiple design options and switch between them easily with Git. Perhaps my favorite
    aspect of Git is that it lets you document changes to your code, giving you a
    place to explain your thought process on why you decided to make things a certain
    way. Trust me—you'll thank yourself six months later while you're reading through
    your own code and trying to decipher it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在测试多个设计选项的同时，对代码的不同版本进行实验，并使用 Git 轻松地在它们之间切换。也许 Git 最让我喜欢的一点是，它允许你记录代码的更改，为你提供了一个解释你为什么决定以某种方式做事的地方。相信我——六个月后，当你阅读自己的代码并试图理解它时，你会感谢自己的。
- en: All of these situations are extremely common when you're working on a large
    project, or collaborating with others. Even if that *doesn't* currently apply
    to you, I highly recommend learning and incorporating Git into your development
    workflow because the benefits it offers are too numerous to ignore.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在处理大型项目或与他人协作时，所有这些情况都非常常见。即使目前这对你来说不适用，我也强烈建议你学习和将 Git 纳入你的开发工作流程，因为其提供的益处太多，不容忽视。
- en: If I've sold you on the benefits of version control, check out the section called
    “A whirlwind intro to Git” in Chapter 5 for a quick look at the basics. It's designed
    to be a standalone section, so if you like, you can go to it right now and come
    back when you're done. If you're (understandably) impatient to get started with
    Streamlit, read on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我已经向你展示了版本控制的益处，请查看第 5 章中名为“Git 快速入门”的部分，快速了解基础知识。它被设计为一个独立的章节，所以如果你愿意，你现在可以前往那里，完成后再回来。如果你（可以理解地）急于开始使用
    Streamlit，请继续阅读。
- en: 2.2.2 Code editors
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.2 代码编辑器
- en: Streamlit apps, like all Python scripts, are just text files, so all you *really*
    need to write code is a simple text editor (like Notepad in Windows).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 应用程序，就像所有 Python 脚本一样，只是文本文件，所以你实际上只需要一个简单的文本编辑器（比如 Windows 中的记事本）来编写代码。
- en: However, using an advanced code editor or an *Integrated Development Environment*
    (IDE) makes you so much more productive—giving you features like syntax highlighting,
    easy debugging tools, and code navigation—that it's hard not to recommend using
    one.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用高级代码编辑器或 *集成开发环境*（IDE）可以使你更加高效——提供诸如语法高亮、易于调试的工具和代码导航等功能，因此很难不推荐使用。
- en: There are many, many tools that will fit the bill, but I'd like to mention two
    of the most popular ones here.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可以满足这一需求，但我想在这里提及两个最受欢迎的工具。
- en: PyCharm
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyCharm
- en: PyCharm is a versatile IDE tailor-made for Python, developed by the company
    JetBrains. It offers comprehensive support for Python out of the box, such as
    code completion, error detection, quick-fix suggestions and more.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 是由 JetBrains 公司开发的一个专为 Python 定制的多功能 IDE。它提供了开箱即用的全面支持，例如代码补全、错误检测、快速修复建议等。
- en: PyCharm is an excellent choice if you're seeking advanced functionality straight
    from installation without having to tinker around too much. The Pro edition costs
    money, but PyCharm has a Community Edition you can get for free at [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download)
    (make sure you scroll down to where it says “Community Edition”).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你寻求在安装时直接获得高级功能，而不必过多地调整，PyCharm 是一个很好的选择。专业版需要付费，但 PyCharm 有一个免费的社区版，你可以在
    [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download)
    获取（确保你滚动到“Community Edition”部分）。
- en: '![image](../Images/02__image001.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image001.png)'
- en: Figure 2.1 The project editor window in PyCharm Community Edition
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.1 PyCharm Community Edition 的项目编辑窗口
- en: Visual Studio Code
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Visual Studio Code (VS Code for short) is an immensely popular code editor maintained
    by Microsoft. It supports a multitude of languages.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code（简称 VS Code）是由微软维护的一个非常流行的代码编辑器。它支持多种语言。
- en: VS Code offers some essential functionality such as syntax highlighting right
    away, but its true strength lies in its ecosystem of plugins that can extend its
    capabilities. Indeed, with the right set of plugins, you can make VS Code do essentially
    everything PyCharm Professional (the paid version) can do.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 提供了一些基本功能，如语法高亮，但其真正的优势在于其插件生态系统，它可以扩展其功能。确实，有了正确的插件组合，你可以让 VS Code
    做到 PyCharm 专业版（付费版本）几乎能做的一切。
- en: Since VS Code is completely free, it's an attractive proposition for learners
    who don't mind spending some time to set everything up.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 VS Code 完全免费，对于不介意花时间设置一切的学习者来说，这是一个有吸引力的提议。
- en: 'Note: Since both of these (and many others, such as Sublime Text and Notepad++)
    are viable code editing tools, I won''t assume that you''re using any particular
    one. As long as you have a terminal you can type commands into and a program that
    can edit text files, you''re good to go as far as this book is concerned.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：由于这两个（以及许多其他，如 Sublime Text 和 Notepad++）都是可行的代码编辑工具，我不会假设你使用的是任何特定的一个。只要你有可以输入命令的终端和一个可以编辑文本文件的程序，根据本书的要求，你就已经准备好了。
- en: 2.2.3 Virtual environments
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.3 虚拟环境
- en: Most useful real-world Python projects you work on will require you to rely
    on a variety of libraries. These libraries change all the time, releasing new
    versions that add and remove features or modify existing ones.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你在工作的绝大多数实际 Python 项目中都将需要依赖各种库。这些库会不断更新，发布新版本，增加或删除功能，或修改现有功能。
- en: As you gain experience and create more complex applications, you'll often find
    that updating a library for one project causes another to break or leads to unpredictable
    bugs and conflicts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你经验的积累和更复杂应用的创建，你经常会发现更新一个项目的库会导致另一个项目崩溃或导致不可预测的错误和冲突。
- en: Virtual environments are a way out of this dilemma. A virtual environment consists
    of an isolated instance of Python and a set of libraries and dependencies. Each
    project you start should live in its own virtual environment. That way, you can
    modify the dependencies of any project without affecting any others.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境是解决这种困境的一种方法。虚拟环境由一个独立的 Python 实例和一组库及依赖项组成。你开始每个项目时都应该有一个自己的虚拟环境。这样，你可以修改任何项目的依赖项，而不会影响其他项目。
- en: 'Even if you''re just starting out and haven''t run into dependency management
    problems, it''s a great idea to get familiar with virtual environments. There
    are several virtual environment-related libraries and tools available with varying
    levels of sophistication: you may come across `venv`, `pipenv`, `pyenv`, `poetry`
    and others.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你刚开始学习并且还没有遇到依赖管理问题，熟悉虚拟环境也是一个很好的主意。目前有几种不同复杂程度的虚拟环境相关库和工具可供选择：你可能会遇到 `venv`、`pipenv`、`pyenv`、`poetry`
    以及其他。
- en: We'll discuss virtual environments in more detail in Chapter 13 while exploring
    how to distribute your code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 13 章中更详细地讨论虚拟环境，同时探讨如何分发你的代码。
- en: 2.3 Running Streamlit for the first time
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 首次运行 Streamlit
- en: This is where the fun begins! In this section, we'll run a Streamlit app for
    the first time, and get a first-hand look at the kind of things you can devise
    with Streamlit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是乐趣的开始！在本节中，我们将首次运行 Streamlit 应用程序，并亲自看看你可以用 Streamlit 做出什么。
- en: If you haven't already done so, go to Appendix A and make sure you have Streamlit
    installed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装，请转到附录 A 并确保你已经安装了 Streamlit。
- en: If you have, open up a terminal window and let's get started!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有了，请打开一个终端窗口，让我们开始吧！
- en: The app we'll be running is the *hello* app that comes pre-built with Streamlit.
    To see it in action, type `streamlit hello` in your terminal.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要运行的应用程序是 Streamlit 预先构建的 *hello* 应用程序。要在终端中查看其运行效果，请输入 `streamlit hello`。
- en: This should display some output on the terminal that you can ignore for now,
    and after a few seconds, opens your web browser to display the actual app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在终端上显示一些输出，你现在可以忽略它，几秒钟后，它会打开你的网络浏览器以显示实际的应用程序。
- en: 'The *hello* app shows off Streamlit''s capabilities by demoing a variety of
    features: animation, graph plotting, maps, and tables.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*hello* 应用通过演示各种功能展示了 Streamlit 的能力：动画、图形绘图、地图和表格。'
- en: 'Figure 2.2 shows one such demo: an animation built from a mathematical visualization.
    You can navigate to other demos using the sidebar on the left.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 展示了一个这样的示例：由数学可视化构建的动画。你可以使用左侧的侧边栏导航到其他示例。
- en: '![image](../Images/02__image002.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image002.png)'
- en: Figure 2.2 Animation Demo from streamlit hello
  id: totrans-55
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.2 来自 streamlit hello 的动画示例
- en: Figure 2.3 shows a more practical demo related to Pandas dataframes. We'll become
    intimately familiar with these later in the book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 展示了一个与 Pandas 数据框相关的更实用的示例。我们将在本书的后续章节中深入了解这些内容。
- en: '![image](../Images/02__image003.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image003.png)'
- en: Figure 2.3 DataFrame Demo from streamlit hello
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.3 来自 streamlit hello 的 DataFrame 示例
- en: I hope looking at these examples inspires you!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 希望查看这些示例能激发你的灵感！
- en: The sidebar also has a “Show code” checkbox which, as you might imagine, displays
    the source code for each app below the app itself. In each instance, you'll find
    that the code isn't terribly verbose.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏还有一个“显示代码”复选框，正如你可能想象的那样，它会在应用程序本身下方显示每个应用程序的源代码。在每种情况下，你会发现代码并不特别冗长。
- en: Obviously, you don't have to understand how all of this is done right now, but
    hopefully you'll gain some appreciation for what Streamlit makes possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您现在不必理解所有这些是如何完成的，但希望您能对Streamlit能实现的功能有所欣赏。
- en: 2.4 The Streamlit development workflow
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 Streamlit开发工作流程
- en: Writing Streamlit apps - or any kind of programming, really - is an iterative
    process where you write some code, test if it works, and repeat. If you've never
    written graphical applications before, you may be curious about what this process
    looks like.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Streamlit应用程序——或者任何类型的编程——是一个迭代的过程，您编写一些代码，测试它是否工作，然后重复。如果您以前从未编写过图形应用程序，您可能会好奇这个过程看起来是什么样子。
- en: Figure 2.4 describes the development workflow you'll soon get used to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4描述了您很快就会习惯的开发工作流程。
- en: '![image](../Images/02__image004.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image004.png)'
- en: Figure 2.4 The Streamlit development workflow
  id: totrans-66
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.4 Streamlit开发工作流程
- en: 'Let''s walk through the steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步来：
- en: '**Write your Python code:** Create a first draft of your app in a Python file
    in your code editor. This can be as basic or as fleshed-out as you like. Some
    people like to run the app right from the outset as they begin to shape it and
    visualize every change as they go, so their first draft may just be an empty app
    with a title.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写您的Python代码：** 在您的代码编辑器中的Python文件中创建应用程序的第一个草稿。这可以非常基础，也可以非常详细，根据您的喜好而定。有些人喜欢一开始就运行应用程序，以便在塑造它并可视化每一步的变化时，他们的第一个草稿可能只是一个带有标题的空应用程序。'
- en: I myself find this distracting since it's tempting to spend time fine-tuning
    the appearance of the app if I see it early on. Instead, I prefer to code up a
    roughly complete version of the app before I run it for the first time. This is
    entirely a matter of preference though.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我个人觉得这很分散注意力，因为如果我一开始就看到它，我可能会倾向于花时间调整应用程序的外观。相反，我更喜欢在第一次运行之前先编写一个大致完整的应用程序版本。但这完全是个人的偏好。
- en: '**Save your file:** This should be self-explanatory. Save your Python file
    as you would normally, with a `.py` extension.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保存您的文件：** 这应该是不言而喻的。像通常一样保存您的Python文件，使用`.py`扩展名。'
- en: '**Run your app using** `streamlit run <filename>`**:** Run this in your terminal
    and replace `<filename>` with the path to your file.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用** `streamlit run <filename>` **运行您的应用程序：** 在您的终端中运行此命令，并用您文件的路径替换`<filename>`。'
- en: This opens a browser window with your app, as you saw when you ran the *hello*
    app.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个浏览器窗口，显示您的应用程序，正如您在运行*hello*应用程序时所看到的那样。
- en: '**Test your app in the browser:** Interact with your app. Play around with
    it by entering values, clicking buttons etc., and seeing if the output matches
    what you''d expect.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在浏览器中测试您的应用程序：** 与您的应用程序进行交互。通过输入值、点击按钮等方式进行操作，并查看输出是否符合您的预期。'
- en: '**Make code changes as needed:** Based on your testing, go back to your Python
    code and edit it.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**根据需要修改代码：** 根据您的测试，回到您的Python代码并对其进行编辑。'
- en: '**Save your changes:** Again, self-explanatory.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**保存您的更改：** 再次，不言而喻。'
- en: 'Switch back to your browser window: Remember, you don''t need to re-run `streamlit
    run <filename>` to see your changes in the app.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回您的浏览器窗口：请记住，您不需要重新运行`streamlit run <filename>`来查看应用程序中的更改。
- en: '**You have two options here:** If you want Streamlit to re-run your app with
    your changes automatically, you can click “Always rerun” in your app. Otherwise,
    you can still click “Rerun” each time.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**您在这里有两个选择：** 如果您希望Streamlit自动重新运行您的应用程序以应用更改，您可以在应用程序中点击“始终重新运行”。否则，您仍然可以每次都点击“重新运行”。'
- en: Repeat steps 4-7
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤4-7
- en: You'll be going through these steps a *lot* throughout this book, and it'll
    soon become second nature. But enough theory, let's put this in action!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本书的整个过程中多次经历这些步骤，很快就会变得习以为常。但理论就到这里吧，让我们将其付诸实践！
- en: 2.5 Building your first app
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 构建您的第一个应用程序
- en: In this section, we'll craft our very first app! To do this, I'll first introduce
    the concept behind the app and outline the flow of logic.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建我们的第一个应用程序！为此，我首先会介绍应用程序背后的概念，并概述逻辑流程。
- en: I'll then walk you through the code for the complete app, explaining each part
    of it step-by-step. Finally, we'll run the app and make changes to it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我将逐步向您展示完整应用程序的代码，解释其每个部分。最后，我们将运行该应用程序并对其进行修改。
- en: 'A word of advice before we dive in: Your learning experience will be richer
    if you take an active role in it, tinkering and experimenting as you go. Be curious
    and don''t be afraid to make changes outside of those suggested in the text! You''ll
    often find that the parts of the material that stick in your mind the best are
    the ones where you took the initiative to explore and understand on your own.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入之前，有一句话要提醒你：如果你在过程中积极参与，不断尝试和实验，你的学习体验将会更加丰富。保持好奇心，不要害怕在文本之外做出改变！你经常会发现，那些你记忆最深刻的部分，是你主动探索和理解的部分。
- en: With that said, it's time to get our hands dirty!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，是时候让我们动手实践了！
- en: 2.5.1 A password checker
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.1 密码检查器
- en: You've probably visited one of those websites that have a huge list of conditions
    that your password needs to fulfill, like containing at least one lowercase letter,
    one special character, an even number of underscores, the names of up to two dwarves
    from Snow White, and so forth.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能访问过那些要求密码满足大量条件的网站，比如至少包含一个小写字母、一个特殊字符、偶数个下划线、最多两个来自《白雪公主》的矮人名字等等。
- en: The app we'll create is one that lets the user enter a password they're considering,
    and shows them which conditions pass and which ones fail.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的应用程序允许用户输入他们正在考虑的密码，并显示哪些条件通过，哪些条件失败。
- en: 2.5.2 Logic flow
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.2 逻辑流程
- en: Figure 2.5 lays out the flow of our app's logic.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 展示了我们的应用程序逻辑的流程。
- en: It begins when the user enters a password in an input text box and initiates
    the checking process by clicking a button.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它从用户在输入文本框中输入密码并点击按钮开始检查过程。
- en: Internally, the app maintains a list of conditions (technically a dictionary,
    in the code) to be checked in its memory. We loop through this list, categorizing
    each condition as either “PASS” or “FAIL” depending on whether the entered password
    meets it, and generate a fresh list (or dictionary) of results.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，应用维护一个要检查的条件列表（在代码中实际上是字典）以存储在内存中。我们遍历这个列表，根据输入的密码是否满足条件，将每个条件分类为“通过”或“失败”，并生成一个新的结果列表（或字典）。
- en: Following this, we iterate through the results, presenting the outcomes on the
    screen. Each condition is represented by a box, displayed in green if it passed
    or red if it failed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们遍历结果，在屏幕上显示结果。每个条件都由一个框表示，如果通过则显示绿色，如果失败则显示红色。
- en: '![image](../Images/02__image005.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image005.png)'
- en: Figure 2.5 The flow of logic in our password checker app
  id: totrans-94
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.5 我们密码检查器应用的逻辑流程
- en: 2.5.3 Going through the code
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.3 遍历代码
- en: By now, you hopefully have a clear understanding of the logic we want to implement,
    so let's jump right in and start building!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你 hopefully 应该已经清楚地理解了我们想要实现的逻辑，所以让我们直接跳进去开始构建吧！
- en: To get started, go to this book's GitHub page, copy the code in Listing 2.1
    into a new file, and save it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请访问这本书的 GitHub 页面，将列表 2.1 中的代码复制到一个新文件中，并保存它。
- en: Listing 2.1 The code for our password checker app
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 列表 2.1 我们密码检查器应用的代码
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s go through it part by part:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐部分分析：
- en: 'Our first line imports Streamlit itself (you''ll need this in every app) and
    notes that we''ll use `st` to refer to it later:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一行导入 Streamlit 本身（你需要在每个应用程序中这样做），并注明我们稍后会将它称为 `st`：
- en: '[PRE1]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can technically use whatever you like here, but the convention of `st` is
    so widely used that you'll frequently hear people referring to Streamlit elements
    as `st.<whatever>`
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以使用任何你喜欢的，但 `st` 的约定非常广泛，所以你经常会听到人们将 Streamlit 元素称为 `st.< whatever>`。
- en: 'We use the following block to define the conditions that we want to check for:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下块来定义我们想要检查的条件：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We do this by creating a Python dictionary, where the keys are the conditions
    themselves, and the values are the corresponding functions that we'll use to check
    that condition.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做是通过创建一个 Python 字典，其中键是条件本身，值是我们将用来检查该条件的相应函数。
- en: In this case, the functions are *lambdas* or anonymous in-line functions. A
    lambda is a cool way to define a short one-line function in Python without having
    to go to the trouble of giving it a name. Each function accepts one parameter—the
    password, `pw`—and returns a Boolean value of true if the corresponding condition
    is met, and false otherwise.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，函数是 *lambdas* 或匿名内联函数。Lambda 是一种在 Python 中定义短的单行函数的好方法，而不必费心给它命名。每个函数接受一个参数——密码，`pw`——如果满足相应的条件，则返回
    true 的布尔值，否则返回 false。
- en: The first lambda function simply checks if the length of the password is more
    than 8 characters. In each of the others, we loop through the characters in `pw`
    and apply a test (e.g., `char.isupper()`, `char.islower()` etc.) to each.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 lambda 函数简单地检查密码长度是否超过 8 个字符。在其他的每个 lambda 函数中，我们遍历 `pw` 中的字符并对其应用测试（例如，`char.isupper()`，`char.islower()`
    等）。
- en: 'To evaluate the password for all of the conditions defined above this is the
    function we''ll run:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要评估上述定义的所有密码条件，我们将运行以下函数：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It returns a new Python dictionary where the keys are the conditions and the
    values are the results of running the lambda function corresponding to each condition
    that we defined above.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个新的 Python 字典，其中键是条件，值是对应于我们上面定义的每个条件的 lambda 函数的运行结果。
- en: The syntax we've used here is called a *dictionary comprehension* in Python,
    and it's short-hand to create a new dictionary from some input.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用的语法在 Python 中称为 *字典推导*，它是从一些输入创建新字典的简写。
- en: 'Next is our first actual Streamlit element. It''s a simple one called `title`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们第一个实际的 Streamlit 元素。它是一个简单的 `title` 元素：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It does what you'd expect it to, which is to display the passed text as a title,
    in nice large type.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它会做你预期的事情，即以大号字体显示传递的文本作为标题。
- en: 'We use the following line to show a password input box to the user:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下行向用户显示密码输入框：
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Streamlit's implementation of this also offers a toggle to show/hide the entered
    text. When the user enters some text, it's saved in the `password_input` variable.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 的实现还提供了一个切换选项来显示/隐藏输入的文本。当用户输入一些文本时，它被保存在 `password_input` 变量中。
- en: '`st.button` is one of the simplest Streamlit elements and one you''ll be working
    with frequently. Unsurprisingly, here it displays a button with the text “Check
    password:”'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`st.button` 是 Streamlit 中最简单的元素之一，你将经常使用它。不出所料，在这里它显示了一个带有文本“检查密码”的按钮：'
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that this goes in an `if` clause. Whatever code is nested within the
    `if` (see below) is evaluated when the button is clicked. There are some interesting
    nuances to this that we'll dive into in Chapter 4.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这位于一个 `if` 子句中。当点击按钮时，会评估 `if` 内部嵌套的任何代码（见下文）。这个例子中有些有趣的细微差别，我们将在第 4 章中深入探讨。
- en: 'Once the button is clicked, our app checks if `password_input` has a non-empty
    value, i.e., if the user has actually entered a password. If they have, it calls
    `get_password_properties` on it to evaluate the conditions we defined:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击按钮，我们的应用程序会检查 `password_input` 是否有非空值，即用户是否实际上输入了密码。如果他们已经输入，它将调用 `get_password_properties`
    来评估我们定义的条件：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It then loops through the returned dictionary, where each key is a condition
    and the corresponding value is a boolean indicating if the condition passed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它遍历返回的字典，其中每个键是一个条件，相应的值是一个布尔值，指示条件是否通过。
- en: If the condition passes, we use another Streamlit element, `st.success` to indicate
    this, and if it didn't, we use `st.error` to show that it failed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件通过，我们使用另一个 Streamlit 元素 `st.success` 来指示这一点，如果没有通过，我们使用 `st.error` 来显示它失败了。
- en: '`st.success` and `st.error` are both just containers for text with some semantic
    styles applied (i.e., mostly a green box for `st.success` and a red one for `st.error`)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`st.success` 和 `st.error` 都是带有一些语义样式的文本容器（即，`st.success` 主要是一个绿色的框，而 `st.error`
    是红色的）。'
- en: 'This `else` corresponds to the if `password_input` from earlier:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `else` 与之前的 `password_input` 相对应：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we’re using yet another Streamlit element, the general `st.write`, to
    ask the user to enter a password.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用另一个 Streamlit 元素，即通用的 `st.write`，来要求用户输入密码。
- en: 2.5.4 Running the app
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.4 运行应用程序
- en: 'To run the app, in your terminal, navigate to the directory where you saved
    your file, and type in:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，在你的终端中，导航到你保存文件的目录，并输入以下内容：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For instance, if you saved your code under the file name `password_checker.py`,
    you would type:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你将你的代码保存在名为 `password_checker.py` 的文件中，你将输入以下内容：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you saw when you ran `streamlit hello` earlier, this displays some output
    in your terminal window and opens your web browser where you can see the app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在之前运行 `streamlit hello` 时所看到的，这将在你的终端窗口中显示一些输出，并打开你的网络浏览器，在那里你可以看到应用程序。
- en: Feel free to enter various input passwords and play around with the app! If
    everything has gone according to plan, you should see something similar to figure
    2.6 when you click “Check password.”
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 随意输入各种密码并在这个应用程序中玩玩！如果一切按计划进行，当你点击“检查密码”时，你应该会看到类似于图 2.6 的内容。
- en: '![image](../Images/02__image006.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/02__image006.png)'
- en: Figure 2.6 Our password checker app
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图 2.6 我们的密码检查应用程序
- en: Don't close this page because we're shortly going to see what happens when you
    make changes to the code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不要关闭这个页面，因为我们很快就会看到当你更改代码时会发生什么。
- en: 'Before that, let''s turn our attention to the terminal output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，让我们将注意力转向终端输出：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Notice the part where it says `Local URL: http://localhost:8503`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '注意它说“本地URL: http://localhost:8503”。'
- en: This is Streamlit's way of telling you that there's a Streamlit *server* running
    on your computer (that's what `localhost` means) on port 8503\. The port in the
    output you see might be something different, like 8501; this is totally fine.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Streamlit告诉你，在你的电脑上有一个Streamlit *服务器*正在运行（这就是`localhost`的意思）在端口8503上。你看到的输出中的端口可能不同，比如8501；这是完全可以接受的。
- en: We'll explore how this works in more detail in Chapter 3, but for now, all you
    need to take away from this is that you can also access your app by going to the
    “Local URL” specified in the output.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第3章中更详细地探讨这是如何工作的，但就目前而言，你需要记住的是，你也可以通过访问输出中指定的“本地URL”来访问你的应用。
- en: If there are other computers on your network, the `Network URL` is what those
    other machines can use to access your app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网络上有其他电脑，`网络URL`是那些其他机器可以使用来访问你的应用。
- en: Don't close the terminal window or cancel out of it just yet!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 不要关闭终端窗口或取消它！
- en: Note
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 注意
- en: 'In some cases, you may find that either your browser window does not open automatically
    when you enter `streamlit run`, or the browser window opens but the page is blank.
    If this is true for you, here are some things to try:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能发现当你输入 `streamlit run` 时，浏览器窗口没有自动打开，或者浏览器窗口打开了但页面是空的。如果你遇到这种情况，这里有一些你可以尝试的方法：
- en: In your browser, manually type in the address listed against "Local URL" in
    the terminal output, e.g., `http://localhost:8503`
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的浏览器中，手动输入终端输出中“本地URL”下列出的地址，例如，`http://localhost:8503`
- en: Make sure you're running the most up-to-date version of your browser.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你正在运行浏览器最新版本。
- en: Navigate to `http://localhost:8503` in a different browser. I've found that
    Google Chrome tends to have the least issues.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个浏览器中导航到 `http://localhost:8503`。我发现Google Chrome通常问题最少。
- en: 2.5.5 Making changes to the app
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.5 修改应用
- en: Now that we know our app works, let's try making changes to it. For instance,
    let's say we want to add a check that the entered password contains at least one
    numeral.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的应用可以工作，让我们尝试对其进行修改。例如，假设我们想要添加一个检查，以确保输入的密码至少包含一个数字。
- en: 'You would do this by adding a new condition to our `conditions` dictionary:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过向我们的 `conditions` 字典中添加一个新的条件来实现这一点：
- en: Listing 2.2 Adding a new condition
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 列表2.2 添加新条件
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our button doesn''t sound excited enough, so let''s also add an exclamation
    point to the text:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的按钮听起来不够兴奋，所以让我们也在文本中添加一个感叹号：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once you've saved your file, head back to your browser window where you have
    the app open. On the upper right-hand corner you should see a message informing
    you that the source file has changed (see figure 1.5) and options to “Rerun” or
    “Always rerun.”
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的文件后，回到你打开应用的浏览器窗口。在右上角你应该会看到一个消息通知你源文件已更改（见图1.5），以及“重新运行”或“始终重新运行”的选项。
- en: '![image](../Images/02__image007.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image007.png)'
- en: Figure 2.7 Streamlit displays a message on your app when the source changes
  id: totrans-161
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.7 Streamlit在源代码更改时在你的应用上显示消息
- en: This is because Streamlit monitors your app file to see if any changes have
    been made to it. Click “Rerun" to re-run your app with the latest code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Streamlit会监控你的应用文件，以查看是否有对其所做的任何更改。点击“重新运行”以使用最新代码重新运行你的应用。
- en: You'll see that our button now says “Check password!” with the exclamation point,
    and if you enter a password and click it, you'll see the new numeral test we added.
    This updated view is shown in figure 2.8.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我们的按钮现在说“检查密码！”带有感叹号，如果你输入一个密码并点击它，你会看到我们添加的新数字测试。这个更新后的视图如图2.8所示。
- en: '![image](../Images/02__image008.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image008.png)'
- en: Figure 2.8 The password checker app with our newly added changes
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.8 带有我们新添加更改的密码检查器应用
- en: You could also choose “Always rerun,” which means Streamlit will automatically
    update your app every time you change your code. This makes for a smoother development
    experience where you edit your code and immediately switch to your browser to
    see what effect it had.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择“始终重新运行”，这意味着每次你更改代码时，Streamlit都会自动更新你的应用。这使得开发体验更加流畅，你可以在编辑代码后立即切换到浏览器，查看它产生了什么效果。
- en: If you want to disable this behavior (it can sometimes be hard to spot what's
    changed on a page when you have it on), you can click the hamburger menu on the
    top right, go to “Settings” and uncheck “Run on save.”
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要禁用这种行为（有时当它开启时，在页面上很难发现变化），你可以点击右上角的汉堡菜单，进入“设置”并取消勾选“保存时运行”。
- en: 2.5.6 Killing and restarting the server
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.5.6 杀死和重启服务器
- en: Throughout all of this, recall that you've kept your terminal window (where
    you typed `streamlit run …`) open. This window is where the Streamlit server that
    "serves'' your app is running.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些过程中，请记住你一直保持终端窗口（你在这里输入`streamlit run …`的地方）开启。这个窗口是运行“服务”你的应用的Streamlit服务器的地方。
- en: Once you're done playing with the app, you probably want to shut the server
    down so it's not consuming resources.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你玩够了应用，你可能想要关闭服务器，以免它消耗资源。
- en: To do this, head to the terminal window now and either close it or press “Ctrl+C.”
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，现在就去终端窗口，要么关闭它，要么按“Ctrl+C”。
- en: If you now go back to your open browser window, you'll find that you can't interact
    with your app any more. The button's disabled, it says “CONNECTING" at the top
    right, and a connection error shows up as seen in figure 2.9.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在回到你的打开的浏览器窗口，你会发现你不能再与你的应用交互了。按钮被禁用，右上角显示“连接中”，并且如图2.9所示，出现连接错误。
- en: '![image](../Images/02__image009.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02__image009.png)'
- en: Figure 2.9 When you shut down the Streamlit server, the frontend app can't run
  id: totrans-174
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 图2.9 当你关闭Streamlit服务器时，前端应用无法运行
- en: You can bring your app back to life by running `streamlit run <filename>` again,
    which restarts your server and re-establishes the connection between the frontend
    and the newly restarted server.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过再次运行`streamlit run <filename>`来使你的应用复活，这将重启你的服务器并重新建立前端与重新启动的服务器之间的连接。
- en: This will open a new browser window with a *different* instance of your app.
    You'll find that the old window is also now alive because it's able to re-establish
    the connection to the server.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个新的浏览器窗口，其中包含你应用的*不同*实例。你会发现旧窗口现在也活跃起来，因为它能够重新建立与服务器的连接。
- en: 2.6 Summary
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 总结
- en: Streamlit requires Python 3.8 or above to run.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Streamlit需要Python 3.8或更高版本才能运行。
- en: Git is a form of version control, which helps you track and manage changes to
    your code.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git是一种版本控制工具，它帮助你跟踪和管理代码的变更。
- en: Advanced code editors like VS Code and IDEs like PyCharm make you more productive
    through syntax highlighting, debugging tools, code navigation, autocomplete and
    more.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级代码编辑器如VS Code和IDE如PyCharm通过语法高亮、调试工具、代码导航、自动完成等功能，使你更加高效。
- en: Virtual environments allow you to isolate the libraries and dependencies of
    each project you work on.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟环境允许你隔离你工作的每个项目的库和依赖。
- en: You run Streamlit apps using `streamlit run <file_name>`, which opens a web
    browser window with your app.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过`streamlit run <file_name>`来运行Streamlit应用，这将打开一个包含你的应用的网页浏览器窗口。
- en: You can make Streamlit always re-run your app whenever the source code changes
    for a seamless development experience.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以设置Streamlit在源代码变更时始终重新运行你的应用，以获得无缝的开发体验。
