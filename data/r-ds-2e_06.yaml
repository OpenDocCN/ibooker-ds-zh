- en: Chapter 5\. Data Tidying
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 数据整理
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: “Happy families are all alike; every unhappy family is unhappy in its own way.”
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “所有幸福的家庭都是相似的；每个不幸的家庭都有各自的不幸。”
- en: —Leo Tolstoy
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —列夫·托尔斯泰
- en: “Tidy datasets are all alike, but every messy dataset is messy in its own way.”
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “整洁的数据集都是相似的，但每个混乱的数据集都有其自身的混乱之处。”
- en: —Hadley Wickham
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —哈德利·威克姆
- en: In this chapter, you will learn a consistent way to organize your data in R
    using a system called *tidy data*. Getting your data into this format requires
    some work up front, but that work pays off in the long term. Once you have tidy
    data and the tidy tools provided by packages in the tidyverse, you will spend
    much less time munging data from one representation to another, allowing you to
    spend more time on the data questions you care about.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习使用一种称为*tidy数据*的系统在R中组织数据的一致方式。将数据整理到这种格式需要一些前期工作，但长远来看会得到回报。一旦您有了整洁的数据和tidyverse包提供的整洁工具，您将花费更少的时间从一种表示转换数据，从而有更多时间处理您关心的数据问题。
- en: 'In this chapter, you’ll first learn the definition of tidy data and see it
    applied to a simple toy dataset. Then we’ll dive into the primary tool you’ll
    use for tidying data: pivoting. Pivoting allows you to change the form of your
    data without changing any of the values.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将首先了解整洁数据的定义，并看到它应用于一个简单的玩具数据集。然后我们将深入研究您用于整理数据的主要工具：数据透视。数据透视允许您在不改变任何值的情况下改变数据的形式。
- en: Prerequisites
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: In this chapter, we’ll focus on tidyr, a package that provides a bunch of tools
    to help tidy up your messy datasets. tidyr is a member of the core tidyverse.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于tidyr，这是一个提供大量工具帮助您整理混乱数据集的包。tidyr是核心tidyverse成员之一。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this chapter on, we’ll suppress the loading message from [`library(tidyverse)`](https://tidyverse.tidyverse.org).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章开始，我们将抑制来自[`library(tidyverse)`](https://tidyverse.tidyverse.org)的加载消息。
- en: Tidy Data
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整洁数据
- en: 'You can represent the same underlying data in multiple ways. The following
    example shows the same data organized in three different ways. Each dataset shows
    the same values of four variables: *country*, *year*, *population*, and number
    of documented *cases* of tuberculosis (TB), but each dataset organizes the values
    in a different way.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用多种方式表示相同的基础数据。以下示例展示了相同数据以三种不同方式组织的情况。每个数据集显示了四个变量的相同值：*国家*、*年份*、*人口*和肺结核（TB）的记录*病例数*，但每个数据集以不同的方式组织这些值。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These are all representations of the same underlying data, but they are not
    equally easy to use. One of them, `table1`, will be much easier to work with inside
    the tidyverse because it’s *tidy*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是相同基础数据的表示，但它们并不同样易于使用。其中一个，`table1`，因为其是*整洁*的，将在tidyverse内部处理起来更容易。
- en: 'There are three interrelated rules that make a dataset tidy:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有三条相互关联的规则使数据集变得整洁：
- en: Each variable is a column; each column is a variable.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个变量是一列；每一列是一个变量。
- en: Each observation is a row; each row is an observation.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个观测是一行；每一行是一个观测。
- en: Each value is a cell; each cell is a single value.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个值是一个单元格；每个单元格是一个单值。
- en: '[Figure 5-1](#fig-tidy-structure) shows the rules visually.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-1](#fig-tidy-structure)以图像方式展示了规则。'
- en: '![Three panels, each representing a tidy data frame. The first panel shows
    that each variable is a column. The second panel shows that each observation is
    a row. The third panel shows that each value is a cell.](assets/rds2_0501.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![三个面板，每个面板代表一个整洁的数据框。第一个面板显示每个变量是一列。第二个面板显示每个观测是一行。第三个面板显示每个值是一个单元格。](assets/rds2_0501.png)'
- en: 'Figure 5-1\. Three rules make a dataset tidy: variables are columns, observations
    are rows, and values are cells.'
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 三条规则使数据集整洁：变量是列，观测是行，值是单元格。
- en: 'Why ensure that your data is tidy? There are two main advantages:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要确保您的数据是整洁的？有两个主要优点：
- en: There’s a general advantage to picking one consistent way of storing data. If
    you have a consistent data structure, it’s easier to learn the tools that work
    with it because they have an underlying uniformity.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一种一致的数据存储方式有普遍的优势。如果您有一种一致的数据结构，学习与其配套的工具会更容易，因为它们具有基础的统一性。
- en: There’s a specific advantage to placing variables in columns because it allows
    R’s vectorized nature to shine. As you learned in [“mutate()”](ch03.xhtml#sec-mutate)
    and [“summarize()”](ch03.xhtml#sec-summarize), most built-in R functions work
    with vectors of values. That makes transforming tidy data feel particularly natural.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   将变量放在列中有一个特定的优势，因为这样可以展现R的向量化特性。就像你在[“mutate()”](ch03.xhtml#sec-mutate)和[“summarize()”](ch03.xhtml#sec-summarize)中学到的那样，大多数内置的R函数都可以处理值向量。这使得转换整洁数据感觉特别自然。'
- en: dplyr, ggplot2, and all the other packages in the tidyverse are designed to
    work with tidy data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '-   dplyr、ggplot2和tidyverse中的所有其他包都设计用来处理整洁数据。'
- en: 'Here are a few small examples showing how you might work with `table1`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '-   这里有几个小例子，展示了如何与`table1`一起工作：'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![This figure shows the number of cases in 1999 and 2000 for Afghanistan, Brazil,
    and China, with year on the x-axis and number of cases on the y-axis. Each point
    on the plot represents the number of cases in a given country in a given year.
    The points for each country are differentiated from others by color and shape
    and connected with a line, resulting in three, non-parallel, non-intersecting
    lines. The numbers of cases in China are highest for both 1999 and 2000, with
    values above 200,000 for both years. The number of cases in Brazil is approximately
    40,000 in 1999 and approximately 75,000 in 2000\. The numbers of cases in Afghanistan
    are lowest for both 1999 and 2000, with values that appear to be very close to
    0 on this scale.](assets/rds2_05in01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![这张图显示了阿富汗、巴西和中国在1999年和2000年的病例数，横轴是年份，纵轴是病例数。图中每个点代表特定国家特定年份的病例数。每个国家的点通过颜色和形状区分，并用线连接，形成三条不平行、不交叉的线。中国在1999年和2000年的病例数最高，两年均超过20万。巴西在1999年约为4万，在2000年约为7.5万。阿富汗在1999年和2000年的病例数最低，接近于这个比例尺上的0。](assets/rds2_05in01.png)'
- en: Exercises
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '-   练习'
- en: For each of the sample tables, describe what each observation and each column
    represents.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   对于每个样本表格，描述每个观察值和每列代表什么。'
- en: 'Sketch out the process you’d use to calculate the `rate` for `table2` and `table3`.
    You will need to perform four operations:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   描绘出你将用来计算`table2`和`table3`的`rate`的过程。你需要执行四个操作：'
- en: Extract the number of TB cases per country per year.
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   提取每个国家每年的结核病病例数。'
- en: Extract the matching population per country per year.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   提取每年每个国家的匹配人口。'
- en: Divide cases by population, and multiply by 10,000.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   将病例数除以人口，乘以10,000。'
- en: Store back in the appropriate place.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   存回适当的位置。'
- en: You haven’t yet learned all the functions you’d need to actually perform these
    operations, but you should still be able to think through the transformations
    you’d need.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '-   你还没有学习到执行这些操作所需的所有函数，但你应该能够思考出你需要的转换过程。'
- en: Lengthening Data
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '-   数据的长度'
- en: 'The principles of tidy data might seem so obvious that you wonder if you’ll
    ever encounter a dataset that isn’t tidy. Unfortunately, however, most real data
    is untidy. There are two main reasons:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '-   整洁数据的原则可能显得如此显而易见，以至于你会想知道是否会遇到不整洁的数据集。然而，不幸的是，大多数真实数据都是不整洁的。主要有两个原因：'
- en: Data is often organized to facilitate some goal other than analysis. For example,
    it’s common for data to be structured to make data entry, not analysis, easy.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   数据通常是为了促进除了分析以外的某个目标而组织的。例如，数据常常被结构化为便于数据输入，而不是分析。'
- en: Most people aren’t familiar with the principles of tidy data, and it’s hard
    to derive them yourself unless you spend a lot of time working with data.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '-   大多数人对整洁数据的原则不熟悉，而且除非你花费大量时间处理数据，否则很难自己推导出它们。'
- en: This means that most real analyses will require at least a little tidying. You’ll
    begin by figuring out what the underlying variables and observations are. Sometimes
    this is easy; other times you’ll need to consult with the people who originally
    generated the data. Next, you’ll *pivot* your data into a tidy form, with variables
    in the columns and observations in the rows.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '-   这意味着大多数真实分析都需要至少进行一点整理。你将首先确定基础变量和观察对象是什么。有时这很容易；其他时候你可能需要咨询最初生成数据的人。接下来，你将把数据*展开*成整洁形式，变量在列中，观察值在行中。'
- en: 'tidyr provides two functions for pivoting data: [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml).
    We’ll first start with [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    because it’s the most common case. Let’s dive into some examples.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: tidyr提供了两个用于数据转置的函数：[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)和[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)。我们将首先从[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)开始，因为这是最常见的情况。让我们深入一些示例。
- en: Data in Column Names
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列名中的数据
- en: 'The `billboard` dataset records the Billboard rank of songs in the year 2000:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`billboard`数据集记录了2000年歌曲的Billboard排名：'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this dataset, each observation is a song. The first three columns (`artist`,
    `track` and `date.entered`) are variables that describe the song. Then we have
    76 columns (`wk1`-`wk76`) that describe the rank of the song in each week.^([1](ch05.xhtml#idm44771326722336))
    Here, the column names are one variable (the `week`), and the cell values are
    another (the `rank`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数据集中，每个观察结果是一首歌曲。前三列（`artist`、`track`和`date.entered`）是描述歌曲的变量。然后我们有76列（`wk1`-`wk76`），描述了歌曲每周的排名。^([1](ch05.xhtml#idm44771326722336))在这里，列名是一个变量（`week`），单元格值是另一个变量（`rank`）。
- en: 'To tidy this data, we’ll use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了整理这些数据，我们将使用[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the data, there are three key arguments:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据后，有三个关键参数：
- en: '`cols`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`cols`'
- en: Specifies which columns need to be pivoted (i.e., which columns aren’t variables).
    This argument uses the same syntax as [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml),
    so here we could use `!c(artist, track, date.entered)` or `starts_with("wk")`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 指定需要转置的列（即不是变量的列）。此参数使用与[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)相同的语法，因此在这里我们可以使用`!c(artist,
    track, date.entered)`或`starts_with("wk")`。
- en: '`names_to`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`names_to`'
- en: Names the variable stored in the column names; we named that variable `week`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 指定存储在列名中的变量；我们将该变量命名为`week`。
- en: '`values_to`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`values_to`'
- en: Names the variable stored in the cell values; we named that variable `rank`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 指定储存在单元格值中的变量名称；我们将该变量命名为`rank`。
- en: Note that in the code `"week"` and `"rank"` are quoted because those are new
    variables we’re creating; they don’t yet exist in the data when we run the [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    call.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在代码中`"week"`和`"rank"`被引号引用，因为这些是我们正在创建的新变量；在我们运行[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)调用时，它们在数据中尚不存在。
- en: 'Now let’s turn our attention to the resulting longer data frame. What happens
    if a song is in the top 100 for less than 76 weeks? Take 2 Pac’s “Baby Don’t Cry,”
    for example. The previous output suggests that it was only in the top 100 for
    7 weeks, and all the remaining weeks are filled in with missing values. These
    `NA`s don’t really represent unknown observations; they were forced to exist by
    the structure of the dataset,^([2](ch05.xhtml#idm44771328141216)) so we can ask
    [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml) to
    get rid of them by setting `values_drop_na = TRUE`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向生成的长数据框。如果一首歌在前100名不到76周会发生什么？以2 Pac的“Baby Don’t Cry”为例。先前的输出表明它只在前100名中停留了7周，其余的周数都填充了缺失值。这些`NA`实际上并不代表未知的观察结果；它们是由数据集结构强制存在的，^([2](ch05.xhtml#idm44771328141216))因此我们可以要求[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)通过设置`values_drop_na
    = TRUE`来去除它们：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The number of rows is now much lower, indicating that many rows with `NA`s were
    dropped.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在行数大大减少，表明许多带有`NA`的行已被删除。
- en: You might also wonder what happens if a song is in the top 100 for more than
    76 weeks. We can’t tell from this data, but you might guess that additional columns
    such as `wk77`, `wk78`, … would be added to the dataset.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想知道，如果一首歌在前100名超过76周会发生什么。从这些数据中我们无法得知，但你可能会猜测会向数据集添加额外的列，比如`wk77`、`wk78`等。
- en: This data is now tidy, but we could make future computation a bit easier by
    converting values of `week` from character strings to numbers using [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    and [`readr::parse_number()`](https://readr.tidyverse.org/reference/parse_number.xhtml).
    [`parse_number()`](https://readr.tidyverse.org/reference/parse_number.xhtml) is
    a handy function that will extract the first number from a string, ignoring all
    other text.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据现在已经整洁了，但通过使用[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)和[`readr::parse_number()`](https://readr.tidyverse.org/reference/parse_number.xhtml)，将`week`的值从字符转换为数字，可以使未来的计算更加容易。[`parse_number()`](https://readr.tidyverse.org/reference/parse_number.xhtml)是一个方便的函数，可以从字符串中提取第一个数字，忽略所有其他文本。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have all the week numbers in one variable and all the rank values
    in another, we’re in a good position to visualize how song ranks vary over time.
    The code is shown here and the result is in [Figure 5-2](#fig-billboard-ranks).
    We can see that very few songs stay in the top 100 for more than 20 weeks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有周数放在一个变量中，所有排名值放在另一个变量中，我们可以很好地可视化歌曲排名随时间的变化。这里显示了代码，结果在[图 5-2](#fig-billboard-ranks)中。我们可以看到很少有歌曲在前100名停留超过20周。
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![A line plot with week on the x-axis and rank on the y-axis, where each line
    represents a song. Most songs appear to start at a high rank, rapidly accelerate
    to a low rank, and then decay again. There are surprisingly few tracks in the
    region when week is >20 and rank is >50.](assets/rds2_0502.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![一条线图，横轴是周数，纵轴是排名，每条线代表一首歌曲。大多数歌曲似乎从高排名开始，迅速加速至低排名，然后再次衰退。当周数 > 20 且排名 > 50
    时，该地区的歌曲数量令人惊讶地少。](assets/rds2_0502.png)'
- en: Figure 5-2\. A line plot showing how the rank of a song changes over time.
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-2\. 显示了一条线图，展示了歌曲排名随时间变化的情况。
- en: How Does Pivoting Work?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据透视是如何工作的？
- en: 'Now that you’ve seen how we can use pivoting to reshape our data, let’s take
    a little time to gain some intuition about what pivoting does to the data. Let’s
    start with a simple dataset to make it easier to see what’s happening. Suppose
    we have three patients with `id`s A, B, and C, and we take two blood pressure
    measurements on each patient. We’ll create the data with [`tribble()`](https://tibble.tidyverse.org/reference/tribble.xhtml),
    a handy function for constructing small tibbles by hand:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了我们如何使用数据透视重塑数据，让我们花点时间直观地理解数据透视的作用。我们从一个简单的数据集开始，以便更容易看到发生了什么。假设我们有三个患者，其`id`分别为A、B和C，每位患者测量了两次血压。我们将使用[`tribble()`](https://tibble.tidyverse.org/reference/tribble.xhtml)，这是一个方便的函数，可以手动构建小型的tibble：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We want our new dataset to have three variables: `id` (already exists), `measurement`
    (the column names), and `value` (the cell values). To achieve this, we need to
    pivot `df` longer:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的新数据集有三个变量：`id`（已存在），`measurement`（列名），和`value`（单元格值）。为了实现这一点，我们需要对`df`进行更长时间的数据透视：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How does the reshaping work? It’s easier to see if we think about it column
    by column. As shown in [Figure 5-3](#fig-pivot-variables), the values in the column
    that was already a variable in the original dataset (`id`) need to be repeated,
    once for each column that is pivoted.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重塑工作原理是怎样的？如果我们逐列思考会更容易理解。如[图 5-3](#fig-pivot-variables)所示，原始数据集中已经是变量的列（`id`）的值需要重复，以适应每一列的数据透视。
- en: '![A diagram showing how `pivot_longer()` transforms a simple dataset, using
    color to highlight how the values in the `id` column ("A", "B", "C") are each
    repeated twice in the output because there are two columns being pivoted ("bp1"
    and "bp2").](assets/rds2_0503.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![展示了如何使用`pivot_longer()`转换简单数据集的图表，使用颜色突出显示`id`列中的值（"A", "B", "C"），因为有两列进行了数据透视（"bp1"和"bp2"），所以每个值都在输出中重复了两次。](assets/rds2_0503.png)'
- en: Figure 5-3\. Columns that are already variables need to be repeated, once for
    each column that is pivoted.
  id: totrans-75
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-3\. 需要重复的已经是变量的列，以适应每一列的数据透视。
- en: The column names become values in a new variable, whose name is defined by `names_to`,
    as shown in [Figure 5-4](#fig-pivot-names). They need to be repeated once for
    each row in the original dataset.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 列名成为了一个新变量的值，其名称由`names_to`定义，如[图 5-4](#fig-pivot-names)所示。它们需要针对原始数据集中的每一行重复一次。
- en: '![A diagram showing how `pivot_longer()` transforms a simple data set, using
    color to highlight how column names ("bp1" and "bp2") become the values in a new
    `measurement` column. They are repeated three times because there were three rows
    in the input.](assets/rds2_0504.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![展示了如何使用`pivot_longer()`转换简单数据集的图表，使用颜色突出显示列名（"bp1"和"bp2"）如何成为新`measurement`列中的值。它们被重复了三次，因为输入中有三行。](assets/rds2_0504.png)'
- en: Figure 5-4\. The column names of pivoted columns become values in a new column.
    The values need to be repeated once for each row of the original dataset.
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-4\. 被轴线列的列名成为新列中的值。这些值需要在原始数据集的每一行中重复一次。
- en: The cell values also become values in a new variable, with a name defined by
    `values_to`. They are unwound row by row. [Figure 5-5](#fig-pivot-values) illustrates
    the process.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格的值也变成了一个新变量的值，这个变量的名称由`values_to`定义。它们按行展开。[图 5-5](#fig-pivot-values)说明了这个过程。
- en: '![A diagram showing how `pivot_longer()` transforms data, using color to highlight
    how the cell values (blood pressure measurements) become the values in a new `value`
    column. They are unwound row-by-row, so the original rows (100,120), then (140,115),
    then (120,125), become a column running from 100 to 125.](assets/rds2_0505.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![显示`pivot_longer()`如何转换数据的图表，使用颜色突出显示单元格值（血压测量）如何成为新`value`列中的值。它们按行展开，因此原始行（100,120），然后（140,115），然后（120,125），变成一个从100到125的列。](assets/rds2_0505.png)'
- en: Figure 5-5\. The number of values is preserved (not repeated) but unwound row
    by row.
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-5\. 值的数量被保留（不重复），但按行展开。
- en: Many Variables in Column Names
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列名中的多个变量
- en: 'A more challenging situation occurs when you have multiple pieces of information
    crammed into the column names and you would like to store these in separate new
    variables. For example, take the `who2` dataset, the source of `table1`, and friends
    that you saw earlier:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当列名中有多个信息塞入，并且希望将它们存储在单独的新变量中时，情况就变得更具挑战性。例如，看看`who2`数据集，`table1`的来源，以及之前看到的朋友们：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This dataset, collected by the World Health Organization, records information
    about tuberculosis diagnoses. There are two columns that are already variables
    and are easy to interpret: `country` and `year`. They are followed by 56 columns
    like `sp_m_014`, `ep_m_4554`, and `rel_m_3544`. If you stare at these columns
    for long enough, you’ll notice there’s a pattern. Each column name is made up
    of three pieces separated by `_`. The first piece, `sp`/`rel`/`ep`, describes
    the method used for the diagnosis; the second piece, `m`/`f`, is the `gender`
    (coded as a binary variable in this dataset); and the third piece, `014`/`1524`/`2534`/`3544`/`4554`/`65`,
    is the `age` range (`014` represents 0–14, for example).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个由世界卫生组织收集的数据集记录了关于结核病诊断的信息。有两列已经是变量并且容易解释：`country`和`year`。接下来是56列，如`sp_m_014`，`ep_m_4554`和`rel_m_3544`。如果你仔细看这些列足够长时间，你会注意到有一个模式。每个列名由三个由`_`分隔的部分组成。第一部分，`sp`/`rel`/`ep`，描述了诊断方法；第二部分，`m`/`f`，是性别（在这个数据集中编码为二进制变量）；第三部分，`014`/`1524`/`2534`/`3544`/`4554`/`65`，是年龄范围（例如`014`代表0-14岁）。
- en: 'So in this case we have six pieces of information recorded in `who2`: the country
    and the year (already columns); the method of diagnosis, the gender category,
    and the age range category (contained in the other column names); and the count
    of patients in that category (cell values). To organize these six pieces of information
    in six separate columns, we use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    with a vector of column names for `names_to` and instructors for splitting the
    original variable names into pieces for `names_sep` as well as a column name for
    `values_to`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们在`who2`中记录了六个信息片段：国家和年份（已经是列）；诊断方法、性别类别和年龄范围类别（包含在其他列名中）；以及该类别中的患者计数（单元格值）。为了将这六个信息片段组织成六个单独的列，我们使用[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)，其中包含`names_to`的列名向量和用于将原始变量名拆分为`names_sep`片段的指示符的列名：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: An alternative to `names_sep` is `names_pattern`, which you can use to extract
    variables from more complicated naming scenarios, once you’ve learned about regular
    expressions in [Chapter 15](ch15.xhtml#chp-regexps).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`names_sep`，还有`names_pattern`的替代方法，你可以在学习[第15章](ch15.xhtml#chp-regexps)中的正则表达式后，从更复杂的命名场景中提取变量。
- en: 'Conceptually, this is only a minor variation on the simpler case you’ve already
    seen. [Figure 5-6](#fig-pivot-multiple-names) shows the basic idea: now, instead
    of the column names pivoting into a single column, they pivot into multiple columns.
    You can imagine this happening in two steps (first pivoting and then separating),
    but under the hood it happens in a single step because that’s faster.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，这只是你已经看过的更简单情况的一个小变化。[图 5-6](#fig-pivot-multiple-names)展示了基本思想：现在，列名不再被轴线到单个列中，而是被轴线到多个列中。你可以想象这发生在两个步骤中（首先是轴向，然后是分离），但在底层，它是在一个步骤中发生的，因为这样更快。
- en: '![A diagram that uses color to illustrate how supplying `names_sep` and multiple
    `names_to` creates multiple variables in the output. The input has variable names
    "x_1" and "y_2" which are split up by "_" to create name and number columns in
    the output. This is is similar case with a single `names_to`, but what would have
    been a single output variable is now separated into multiple variables.](assets/rds2_0506.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![一个使用颜色来说明如何通过提供 `names_sep` 和多个 `names_to` 在输出中创建多个变量的图表。输入具有变量名 "x_1" 和
    "y_2"，它们被 "_" 分割以在输出中创建名称和编号列。这与单个 `names_to` 的情况类似，但一个单一输出变量现在分成多个变量。](assets/rds2_0506.png)'
- en: Figure 5-6\. Pivoting columns with multiple pieces of information in the names
    means that each column name now fills in values in multiple output columns.
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-6\. 在列名中存在多个信息部分进行轴向变换意味着现在每个列名填充多个输出列的值。
- en: Data and Variable Names in the Column Headers
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列头中的数据和变量名
- en: 'The next step up in complexity is when the column names include a mix of variable
    values and variable names. For example, take the `household` dataset:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂度上升的下一步是当列名包含变量值和变量名的混合。例如，看看`household`数据集：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This dataset contains data about five families, with the names and dates of
    birth of up to two children. The new challenge in this dataset is that the column
    names contain the names of two variables (`dob`, `name)` and the values of another
    (`child`, with values 1 or 2). To solve this problem we again need to supply a
    vector to `names_to` but this time we use the special `".value"` sentinel; this
    isn’t the name of a variable but a unique value that tells [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    to do something different. This overrides the usual `values_to` argument to use
    the first component of the pivoted column name as a variable name in the output.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集包含了五个家庭的数据，包括最多两个孩子的姓名和出生日期。这个数据集的新挑战在于列名包含两个变量的名称（`dob`，`name`），以及另一个变量（`child`，取值为1或2）的值。为了解决这个问题，我们再次需要向`names_to`提供一个向量，但这次我们使用特殊的`".value"`标记；这不是一个变量名，而是告诉[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)要做一些不同的事情。这会覆盖通常的`values_to`参数，以使用旋转后的列名的第一个组件作为输出中的变量名。
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We again use `values_drop_na = TRUE`, since the shape of the input forces the
    creation of explicit missing variables (e.g., for families with only one child).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`values_drop_na = TRUE`，因为输入的形状导致必须创建显式的缺失变量（例如，只有一个孩子的家庭）。
- en: '[Figure 5-7](#fig-pivot-names-and-values) illustrates the basic idea with a
    simpler example. When you use `".value"` in `names_to`, the column names in the
    input contribute to both values and variable names in the output.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[Figure 5-7](#fig-pivot-names-and-values)用一个更简单的例子说明了基本思想。当您在`names_to`中使用`".value"`时，输入中的列名同时影响输出中的值和变量名。'
- en: '![A diagram that uses color to illustrate how the special ".value" sentinel
    works. The input has names "x_1", "x_2", "y_1", and "y_2", and we want to use
    the first component ("x", "y") as a variable name and the second ("1", "2") as
    the value for a new "id" column.](assets/rds2_0507.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![一个使用颜色来说明特殊 ".value" 标记如何工作的图表。输入具有名称 "x_1"、"x_2"、"y_1" 和 "y_2"，我们希望将第一个组件（"x"、"y"）用作新
    "id" 列的变量名，第二个（"1"、"2"）用作值。](assets/rds2_0507.png)'
- en: 'Figure 5-7\. Pivoting with `names_to = c(".value", "num")` splits the column
    names into two components: the first part determines the output column name (`x`
    or `y`), and the second part determines the value of the `num` column.'
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-7\. 使用`names_to = c(".value", "num")`进行轴向变换将列名分为两个部分：第一部分确定输出列名（`x`或`y`），第二部分确定`num`列的值。
- en: Widening Data
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据扩展
- en: So far we’ve used [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    to solve the common class of problems where values have ended up in column names.
    Next we’ll pivot (HA HA) to [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml),
    which makes datasets *wider* by increasing columns and reducing rows and helps
    when one observation is spread across multiple rows. This seems to arise less
    commonly in the wild, but it does seem to crop up a lot when dealing with governmental
    data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)解决了常见的问题类别，即值最终出现在列名中。接下来我们将（哈哈）转向[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)，这将通过增加列和减少行使数据集变得更*宽*，在处理一个观察跨越多行时非常有用。在野外似乎较少见，但在处理政府数据时确实经常遇到。
- en: 'We’ll start by looking at `cms_patient_experience`, a dataset from the Centers
    of Medicare and Medicaid services that collects data about patient experiences:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从Centers for Medicare and Medicaid Services的`cms_patient_experience`数据集开始，该数据集收集有关患者体验的数据：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The core unit being studied is an organization, but each organization is spread
    across six rows, with one row for each measurement taken in the survey organization.
    We can see the complete set of values for `measure_cd` and `measure_title` by
    using [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 被研究的核心单元是一个组织，但每个组织分布在六行中，每一行对应调查组织中采取的一项测量。通过使用[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)，我们可以看到`measure_cd`和`measure_title`的完整数值集合。
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Neither of these columns will make particularly great variable names: `measure_cd`
    doesn’t hint at the meaning of the variable, and `measure_title` is a long sentence
    containing spaces. We’ll use `measure_cd` as the source for our new column names
    for now, but in a real analysis you might want to create your own variable names
    that are both short and meaningful.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这两列都不会成为特别好的变量名称：`measure_cd`不提示变量的含义，而`measure_title`是一个包含空格的长句子。我们暂时将使用`measure_cd`作为新列名的来源，但在实际分析中，您可能希望创建既简短又有意义的自定义变量名称。
- en: '[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    has the opposite interface to [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml):
    instead of choosing new column names, we need to provide the existing columns
    that define the values (`values_from`) and the column name (`names_from)`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)与[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)接口相反：我们需要提供定义数值（`values_from`）和列名（`names_from`）的现有列，而不是选择新的列名。'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output doesn’t look quite right; we still seem to have multiple rows for
    each organization. That’s because we also need to tell [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    which column or columns have values that uniquely identify each row; in this case
    those are the variables starting with `"org"`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来不太对；我们似乎仍然对每个组织有多行。这是因为我们还需要告诉[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)，哪些列包含唯一标识每行的值；在这种情况下，这些变量以`"org"`开头：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This gives us the output that we’re looking for.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们想要的输出。
- en: How Does pivot_wider() Work?
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pivot_wider()`如何工作？'
- en: 'To understand how [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    works, let’s again start with a simple dataset. This time we have two patients
    with `id`s A and B; we have three blood pressure measurements on patient A and
    two on patient B:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)的工作原理，让我们再次从一个简单的数据集开始。这次我们有两位患者，分别是`id`为A和B；患者A有三次血压测量，患者B有两次：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We’ll take the values from the `value` column and the names from the `measurement`
    column:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`value`列获取值，从`measurement`列获取名称：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To begin the process, [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    needs to first figure out what will go in the rows and columns. The new column
    names will be the unique values of `measurement`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个过程，[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)首先需要弄清楚哪些内容将放在行和列中。新的列名将是`measurement`的唯一值：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'By default, the rows in the output are determined by all the variables that
    aren’t going into the new names or values. These are called the `id_cols`. Here
    there is only one column, but in general there can be any number:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，输出中的行由不进入新名称或值的所有变量确定。这些称为`id_cols`。这里只有一列，但通常可以有任意数量：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    then combines these results to generate an empty data frame:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)然后结合这些结果生成一个空数据框架：'
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It then fills in all the missing values using the data in the input. In this
    case, not every cell in the output has a corresponding value in the input as there’s
    no third blood pressure measurement for patient B, so that cell remains missing.
    We’ll come back to this idea that [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)
    can “make” missing values in [Chapter 18](ch18.xhtml#chp-missing-values).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用输入中的数据填充所有缺失的值。在这种情况下，输出中的每个单元格并没有对应的输入值，因为患者B没有第三次血压测量，所以该单元格保持缺失状态。我们将回到[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)可以在[第18章](ch18.xhtml#chp-missing-values)中“生成”缺失值的想法。
- en: 'You might also wonder what happens if there are multiple rows in the input
    that correspond to one cell in the output. The following example has two rows
    that correspond to `id A` and `measurement bp1`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想知道，如果输入中有多行对应输出中的一个单元格会发生什么。以下示例有两行对应于`id A`和`measurement bp1`：
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we attempt to pivot this, we get an output that contains list-columns, which
    you’ll learn more about in [Chapter 23](ch23.xhtml#chp-rectangling):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试转换此数据，我们将得到一个包含列表列的输出，有关此内容，您将在[第23章](ch23.xhtml#chp-rectangling)中进一步了解：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Since you don’t know how to work with this sort of data yet, you’ll want to
    follow the hint in the warning to figure out where the problem is:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您还不知道如何处理此类数据，您需要遵循警告中的提示来找出问题所在：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It’s then up to you to figure out what’s gone wrong with your data and either
    repair the underlying damage or use your grouping and summarizing skills to ensure
    that each combination of row and column values has only a single row.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由您来找出数据出了什么问题，并修复底层损害或使用分组和汇总技能确保每个行和列值的组合只有一个行。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: 'In this chapter you learned about tidy data: data that has variables in columns
    and observations in rows. Tidy data makes working in the tidyverse easier, because
    it’s a consistent structure understood by most functions; the main challenge is
    transforming the data from whatever structure you receive it in to a tidy format.
    To that end, you learned about [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)
    and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml),
    which allow you to tidy up many untidy datasets. The examples we presented here
    are a selection of those from [`vignette("pivot", package = "tidyr")`](https://tidyr.tidyverse.org/articles/pivot.xhtml),
    so if you encounter a problem that this chapter doesn’t help you with, that vignette
    is a good place to try next.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了关于整洁数据的概念：数据中变量在列中，观察结果在行中。整洁数据使得在tidyverse中工作更容易，因为它是一个大多数函数都理解的一致结构；主要挑战在于将数据从接收到的任何结构转换为整洁格式。为此，您了解了[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.xhtml)和[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.xhtml)，这两个函数可以帮助您整理许多不整洁的数据集。我们在这里展示的示例是从[`vignette("pivot",
    package = "tidyr")`](https://tidyr.tidyverse.org/articles/pivot.xhtml)中选出的一部分，所以如果本章无法解决您遇到的问题，可以尝试阅读那个vignette。
- en: Another challenge is that, for a given dataset, it can be impossible to label
    the longer or the wider version as the “tidy” one. This is partly a reflection
    of our definition of tidy data, where we said tidy data has one variable in each
    column, but we didn’t actually define what a variable is (and it’s surprisingly
    hard to do so). It’s totally fine to be pragmatic and to say a variable is whatever
    makes your analysis easiest. So if you’re stuck figuring out how to do some computation,
    consider switching up the organization of your data; don’t be afraid to untidy,
    transform, and re-tidy as needed!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战是，对于给定的数据集，将较长或较宽版本标记为“整洁”的一个版本可能是不可能的。这在一定程度上反映了我们对整洁数据的定义，其中我们说整洁数据每列有一个变量，但我们实际上没有定义变量是什么（这其实很难定义）。如果您在解决某些计算问题时遇到困难，可以考虑调整数据的组织方式；不要害怕需要时对数据进行整理、转换和重新整理！
- en: If you enjoyed this chapter and want to learn more about the underlying theory,
    you can learn more about the history and theoretical underpinnings in the [“Tidy
    Data” paper](https://oreil.ly/86uxw) published in the *Journal of Statistical
    Software*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢本章内容并希望进一步了解底层理论，您可以在[《整洁数据》论文](https://oreil.ly/86uxw)中了解更多历史和理论基础，该论文发表在《统计软件杂志》上。
- en: Now that you’re writing a substantial amount of R code, it’s time to learn more
    about organizing your code into files and directories. In the next chapter, you’ll
    learn all about the advantages of scripts and projects and some of the many tools
    that they provide to make your life easier.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您正在编写大量的R代码，是时候学习更多关于如何将代码组织到文件和目录中的信息了。在下一章中，您将学习有关脚本和项目的优势以及提供的许多工具，这些工具将使您的生活更轻松。
- en: ^([1](ch05.xhtml#idm44771326722336-marker)) The song will be included as long
    as it was in the top 100 at some point in 2000 and is tracked for up to 72 weeks
    after it appears.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch05.xhtml#idm44771326722336-marker)) 只要歌曲曾在2000年某个时刻进入过前100名，并且在出现后的72周内被跟踪，它就会被包括在内。
- en: ^([2](ch05.xhtml#idm44771328141216-marker)) We’ll come back to this idea in
    [Chapter 18](ch18.xhtml#chp-missing-values).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch05.xhtml#idm44771328141216-marker)) 我们将在[第18章](ch18.xhtml#chp-missing-values)中回到这个概念。
