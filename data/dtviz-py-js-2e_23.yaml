- en: Chapter 17\. Introducing D3—​The Story of a Bar Chart
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 17 章。介绍 D3—​柱状图的故事
- en: In [Chapter 16](ch16.xhtml#chapter_building_viz), we imagined our Nobel Prize
    visualization by breaking it into component elements. In this chapter, I will
    gently introduce you to D3 by showing you how to build the bar chart we need ([Figure 17-1](#target_barchart)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 16 章](ch16.xhtml#chapter_building_viz)中，我们通过将诺贝尔奖可视化分解为组成部分来设想它。在本章中，我将通过展示如何构建我们所需的柱状图（参见[图
    17-1](#target_barchart)）温柔地向您介绍 D3。
- en: '![dpj2 1701](assets/dpj2_1701.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1701](assets/dpj2_1701.png)'
- en: Figure 17-1\. This chapter’s target bar chart
  id: totrans-3
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-1\. 本章目标柱状图
- en: D3 is much more than a charting library. It’s a library you use to build charting
    libraries, among other things. So why am I introducing you to D3 by way of that
    ultra-conventional visualization, the bar chart? First, because there should be
    a little thrill in crafting one from scratch for the first time, having total
    control over the look and feel of the chart and being unconstrained by whatever
    prejudices a particular charting library has. And second, because it just happens
    to be a great way to cover the fundamental elements of D3, particularly data joining
    and the enter-exit-remove update pattern, now nicely encapsulated by D3’s newish
    `join` method. If you get those fundamentals in place, you’re well on your way
    to employing the full power and expressivity D3 offers, and producing something
    more novel than a bar chart.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: D3 不仅仅是一个图表库。它是用来构建图表库等其他工具的库。那么为什么我通过传统的柱状图来向您介绍 D3 呢？首先，因为从头开始为其制作一个，对于第一次完全控制图表的外观和感觉，并且不受特定图表库的偏见的经验，应该会有一些小小的兴奋。其次，因为这恰好是学习
    D3 的基本要素的绝佳方式，特别是数据连接和输入-输出-移除更新模式，现在由 D3 的新 `join` 方法很好地封装。如果您掌握了这些基础知识，您将能够运用
    D3 提供的全部力量和表现力，创造出比柱状图更有创意的东西。
- en: We’ll be using some of the webdev covered in [Chapter 4](ch04.xhtml#chapter_webdev101),
    particularly the SVG graphics that are D3’s specialty (see [“Scalable Vector Graphics”](ch04.xhtml#sect_svg)).
    You can try out the code snippets using an online editor like [CodePen’s](https://codepen.io)
    or [VizHub’s](https://vizhub.com) (which also has a huge number of curated dataviz
    examples).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些在[第 4 章](ch04.xhtml#chapter_webdev101)中涵盖的 Web 开发技术，特别是 D3 的专长之一：SVG
    图形（请参见[“可伸缩矢量图形”](ch04.xhtml#sect_svg)）。您可以使用像[CodePen](https://codepen.io)或[VizHub](https://vizhub.com)这样的在线编辑器尝试代码片段（VizHub
    还有大量精选的数据可视化示例）。
- en: Before we begin building the bar chart, let’s consider its elements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建柱状图之前，让我们考虑它的各个元素。
- en: Framing the Problem
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位问题
- en: 'A bar chart has three key components: the axes, legends, and labels, and, of
    course, the bars. As we’re producing a modern, interactive bar chart component,
    we’ll need the axes and bars to transform in response to user interaction—​namely,
    filtering the set of prize winners via the top selectors (see [Figure 15-1](ch15.xhtml#imagine_ui)).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 柱状图有三个关键组成部分：轴、图例和标签，当然还有柱形。由于我们正在制作一个现代化、交互式的柱状图组件，我们需要轴和柱形能够根据用户交互进行转换—特别是通过顶部选择器筛选得奖者集合（见[图 15-1](ch15.xhtml#imagine_ui)）。
- en: 'We’ll build the chart one step at a time, ending with D3 transitions, which
    can make your D3 creations more engaging and attractive. But first we’ll cover
    the basics of D3:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步构建图表，最终使用 D3 过渡效果，这可以使您的 D3 创作更加引人入胜和吸引人。但首先我们将介绍 D3 的基础知识：
- en: Selecting DOM elements in your web page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的网页中选择 DOM 元素
- en: Getting and setting their attributes, properties, and styles
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取和设置它们的属性、属性和样式
- en: Appending and inserting DOM elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 追加和插入 DOM 元素
- en: With these basics firmly in place, we’ll move on to the joys of data binding,
    where D3 begins to flex its muscles.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些基础知识牢固的基础上，我们将继续探讨数据绑定的乐趣，这是 D3 开始发挥其作用的地方。
- en: Working with Selections
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理选择集
- en: Selections are the backbone of D3\. Using jQuery-like CSS selectors, D3 can
    select and manipulate individual and grouped DOM elements. All D3 chained operations
    begin by selecting a DOM element or set of elements using the `select` and `selectAll`
    methods. `select` returns the first matching element; `selectAll` returns the
    set of matching elements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是 D3 的支柱。使用类似于 jQuery 的 CSS 选择器，D3 可以选择和操作单个和分组的 DOM 元素。所有的 D3 链式操作都是从使用 `select`
    和 `selectAll` 方法选择 DOM 元素或元素集开始的。`select` 返回第一个匹配的元素；`selectAll` 返回匹配的元素集。
- en: '[Figure 17-2](#d3bar_selections) shows examples of D3 selections, using the
    `select` and `selectAll` methods. These selections are used to change the `height`
    attribute of one or more bars. The `select` method returns the first `rect` (ID
    `barL`) with class `bar`, whereas `selectAll` can return any combination of the
    `rect`s depending on the query provided.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-2](#d3bar_selections) 显示了使用 `select` 和 `selectAll` 方法的 D3 选择示例。这些选择用于更改一个或多个条形图的
    `height` 属性。`select` 方法返回具有类 `bar` 的第一个 `rect`（ID `barL`），而 `selectAll` 可以根据提供的查询返回任意组合的
    `rect`。'
- en: '![dpj2 1702](assets/dpj2_1702.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1702](assets/dpj2_1702.png)'
- en: 'Figure 17-2\. Selecting elements and changing attributes: three rectangles
    are built with the initial HTML. Selections are then made and the height attributes
    of one or more bars are adjusted.'
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-2\. 选择元素并更改属性：使用初始 HTML 构建了三个矩形。然后进行选择，并调整了一个或多个条的高度属性。
- en: In addition to setting attributes (the named strings on the DOM elements; e.g.,
    `id` or `class`), D3 allows you to set elements’ CSS styles, properties (e.g.,
    whether a checkbox is checked), text, and HTML.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置属性（DOM 元素上的命名字符串；例如，`id` 或 `class`），D3 还允许您设置元素的 CSS 样式、属性（例如，复选框是否选中）、文本和
    HTML。
- en: '[Figure 17-3](#d3bar_selects) shows all the ways in which a DOM element can
    be changed with D3\. With these few methods, you can achieve pretty much any look
    and feel you want.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-3](#d3bar_selects) 显示了使用 D3 更改 DOM 元素的所有方法。通过这些少数方法，您可以实现几乎任何外观和感觉。'
- en: '![dpj2 1703](assets/dpj2_1703.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1703](assets/dpj2_1703.png)'
- en: Figure 17-3\. Changing a DOM element with D3
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-3\. 使用 D3 更改 DOM 元素
- en: '[Figure 17-4](#d3bar_setting_bar) shows how we can apply CSS styling by adding
    a class to the element or directly setting a style. We first select the middle
    bar using its ID `barM`. The `classed` method is then used to apply a yellow highlight
    (see the CSS) and the `height` attribute set to 50 px. The `style` method is then
    used to apply a red fill to the bar directly.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-4](#d3bar_setting_bar) 显示了我们如何通过向元素添加类或直接设置样式来应用 CSS 样式。我们首先通过其 ID `barM`
    选择中间的条形图。然后使用 `classed` 方法来应用黄色高亮（参见 CSS）并将 `height` 属性设置为 50 像素。接着使用 `style`
    方法直接将条形图填充为红色。'
- en: '![dpj2 1704](assets/dpj2_1704.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1704](assets/dpj2_1704.png)'
- en: Figure 17-4\. Setting attributes and style
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-4\. 设置属性和样式
- en: 'D3’s `text` method sets the text content of applicable DOM tags, such as `div`,
    `p`, `h*` headers, and SVG text elements. To see the `text` method in action,
    let’s create a little title placeholder with some HTML:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的 `text` 方法设置适用 DOM 标签的文本内容，例如 `div`、`p`、`h*` 标题和 SVG 文本元素。要看到 `text` 方法的实际效果，让我们创建一个带有一些
    HTML 的小标题占位符：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Figure 17-5](#d3bar_text) (before) shows the resulting browser page.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-5](#d3bar_text)（之前）显示了生成的浏览器页面。'
- en: 'Now let’s create a `fancy-title` CSS class with a large, bold font:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个 `fancy-title` 的 CSS 类，具有大号和粗体字体：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can now use D3 to select the title header, add the `fancy-title` class to
    it, and then set its text to My Bar Chart:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 D3 选择标题头，向其添加 `fancy-title` 类，并将其文本设置为“我的条形图”：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[Figure 17-5](#d3bar_text) (after) shows the resulting enlarged and emboldened
    title.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-5](#d3bar_text)（之后）显示了生成的放大和加粗的标题。'
- en: '![dpj2 1705](assets/dpj2_1705.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1705](assets/dpj2_1705.png)'
- en: Figure 17-5\. Setting text and style with D3
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-5\. 使用 D3 设置文本和样式
- en: In addition to setting the properties of DOM elements, we can use selections
    to get those properties. Leaving out the second argument to one of the methods
    listed in [Figure 17-3](#d3bar_selects) allows you to get information about the
    web page’s setup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置 DOM 元素的属性之外，我们还可以使用选择来获取这些属性。在 [图 17-3](#d3bar_selects) 中列出的方法中省略第二个参数，可以获取有关网页设置的信息。
- en: '[Figure 17-6](#d3bar_getter_bar) shows how to get the key properties from an
    SVG rectangle. As we’ll see, getting attributes like `width` and `height` from
    an SVG element can be very useful for programmatic adaptation and adjustment.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-6](#d3bar_getter_bar) 显示了如何从 SVG 矩形中获取关键属性。正如我们将看到的那样，从 SVG 元素获取像 `width`
    和 `height` 这样的属性对于程序化的适应和调整非常有用。'
- en: '![dpj2 1706](assets/dpj2_1706.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1706](assets/dpj2_1706.png)'
- en: Figure 17-6\. Getting a `rect` bar’s details
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-6\. 获取 `rect` 条形图的详细信息
- en: '[Figure 17-7](#d3bar_getter_text) demonstrates the `html` and `text` getter
    methods. After creating a little list (ID `silly-list`), we use D3 to select it
    and get various properties. The `html` method returns the HTML of the list’s child
    `<li>` tags, while the `text` method returns the text contained in the list, with
    the HTML tags stripped. Note that for parent tags, the formatting of any text
    returned is a little messy, but maybe good enough for a string search or two.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-7](#d3bar_getter_text)演示了`html`和`text`获取方法。创建一个小列表（ID为`silly-list`）后，我们使用D3选择它并获取各种属性。`html`方法返回列表子`<li>`标签的HTML，而`text`方法返回列表中包含的文本，去除了HTML标签。请注意，对于父标签，返回的任何文本格式有些混乱，但对于一两个字符串搜索可能已足够。'
- en: '![dpj2 1707](assets/dpj2_1707.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1707](assets/dpj2_1707.png)'
- en: Figure 17-7\. Getting HTML and text from a `list` tag
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-7\. 从`list`标签获取HTML和文本
- en: So far we’ve been manipulating the attributes, styles, and properties of existing
    DOM elements. This is a useful skill, but D3 comes into its own when we start
    creating DOM elements programmatically using its `append` and `insert` methods.
    Let’s look at these now.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在操作现有DOM元素的属性、样式和属性。这是一个有用的技能，但当我们开始使用其`append`和`insert`方法以编程方式创建DOM元素时，D3变得更加强大。现在让我们来看看这些。
- en: Adding DOM Elements
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加DOM元素
- en: We’ve seen how to select and manipulate the attributes, styles, and properties
    of DOM elements. Now we’ll see how D3 allows us to append and insert elements,
    programmatically adapting the DOM tree.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何选择和操作DOM元素的属性、样式和属性。现在我们将看到D3如何允许我们附加和插入元素，以编程方式调整DOM树。
- en: 'We’ll start with a little HTML skeleton containing a `nobel-bar` placeholder:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个包含`nobel-bar`占位符的小HTML框架开始：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO1-1)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO1-1)'
- en: The *script.js* file is where we’ll add our bar chart’s JavaScript code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*script.js*文件是我们将添加条形图JavaScript代码的地方。'
- en: 'Let’s set the size of the `nobel-bar` element with a little CSS, placed in
    *style.css*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些CSS设置`nobel-bar`元素的大小，放在*style.css*中：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Usually the first thing one does when creating a chart with D3 is to provide
    an SVG frame for it. This involves appending an `<svg>` canvas element to a `div`
    chartholder and then appending a `<g>` group to the `<svg>` to hold specific chart
    elements (in our case, the chart bars). This group has margins to accommodate
    axes, axes labels, and titles.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用D3创建图表时，首先要为其提供一个SVG框架。这涉及将一个`<svg>`画布元素附加到一个`div` chartholder上，然后将一个`<g>`组附加到`<svg>`上以容纳特定的图表元素（在我们的情况下是图表条）。这个组有边距来容纳轴、轴标签和标题。
- en: Conventionally, you will specify the margin of your chart in a `margin` object
    and then use that and the CSS-specified width and height of the chart container
    to derive the width and height of your chart group. The required JavaScript looks
    like [Example 17-1](#d3bar_dimensions_code).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，您将在一个`margin`对象中指定图表的边距，然后使用该对象和图表容器的CSS指定宽度和高度来推导出图表组的宽度和高度。所需的JavaScript看起来像是[示例 17-1](#d3bar_dimensions_code)。
- en: Example 17-1\. Getting our bar chart’s dimensions
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-1\. 获取我们条形图的尺寸
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO3-1)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO3-1)'
- en: Gets the bounding rectangle for our Nobel bar chart’s panel, using it to set
    the width and height of its bar container group.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 获取我们Nobel条形图面板的边界矩形，用它来设置其条形容器组的宽度和高度。
- en: 'With the width and height of our bar group in hand, we use D3 to build our
    chart’s frame, appending the required `<svg>` and `<g>` tags and specifying the
    size of the SVG canvas and translation of the bar group:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们条形图组的宽度和高度，我们使用D3来构建图表的框架，附加所需的`<svg>`和`<g>`标签，并指定SVG画布的大小和条形图组的平移：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This changes the HTML of the `nobel-bar` content block:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了`nobel-bar`内容块的HTML：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The resulting SVG framework is shown in [Figure 17-8](#d3bar_frame). The `<svg>`
    element’s width and height are the sum of its child group and the surrounding
    margins. The child group is offset using `transform` to translate it `margin.left`
    pixels to the right and `margin.top` pixels down (by SVG convention, in the positive
    y direction).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的SVG框架显示在[图 17-8](#d3bar_frame)中。`<svg>`元素的宽度和高度是其子组和周围边距的总和。使用`transform`偏移子组，将其向右平移`margin.left`像素，并向下平移`margin.top`像素（根据SVG约定，向正y方向）。
- en: '![dpj2 1708](assets/dpj2_1708.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1708](assets/dpj2_1708.png)'
- en: Figure 17-8\. Building our bar chart’s frame
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-8\. 构建我们的条形图框架
- en: 'With our frame in place, let’s use `append` to add a few bars. We’ll use a
    little dummy data: an array of objects with the top slice of Nobel Prize–winning
    countries by prize number:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`append`添加几个条形图，我们将使用一些虚拟数据：一个包含诺贝尔奖获得国家顶级奖项数量的对象数组。
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To build a crude bar chart,^([1](ch17.xhtml#idm45607747286016)) we can iterate
    through the `nobelData` array, appending a bar to the chart group as we go. [Example 17-2](#d3bar_10bars_crude_code)
    demonstrates this. After building a basic frame for our chart, we iterate through
    the `nobelData` array, using the `value` fields to set the bar’s height and y-position.
    [Figure 17-9](#d3bar_10bars) shows how the object values are used to append bars
    to our chart group. Note that because SVG uses a downward y-axis, you have to
    displace the bars by the height of the bar chart minus that of the bar in order
    to put the bar chart the right way up. As we’ll see later, by using D3’s scales,
    we can limit such geometric bookkeeping.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个粗糙的条形图，^[1](ch17.xhtml#idm45607747286016)我们可以遍历`nobelData`数组，在我们前进的同时向图表组附加一根条。[示例17-2](#d3bar_10bars_crude_code)演示了这一点。在为图表构建基本框架之后，我们遍历`nobelData`数组，使用`value`字段设置条的高度和y位置。[图17-9](#d3bar_10bars)显示了如何使用对象值向我们的图表组添加条。请注意，因为SVG使用向下的y轴，您必须通过条形图的高度减去条形图的高度来放置条形图以正确放置。正如我们将在后面看到的，通过使用D3的比例尺，我们可以限制这种几何上的记账工作。
- en: Example 17-2\. Building a crude bar chart with `append`
  id: totrans-68
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-2。使用`append`构建简单的条形图
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO4-1)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO4-1)'
- en: Iterates through each of the objects in `nobelData`, the `forEach` method providing
    object and array index to an anonymous function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历`nobelData`中的每个对象，`forEach`方法向匿名函数提供对象和数组索引。
- en: '![dpj2 1709](assets/dpj2_1709.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1709](assets/dpj2_1709.png)'
- en: Figure 17-9\. Programming a basic bar chart with D3
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-9。使用D3编程基本条形图
- en: 'The other way in which D3 can add elements to the DOM tree is with its `insert`
    method. `insert` works like `append` but adds a second selector argument to allow
    you to place elements before a particular position in an sequence of tags, such
    as at the beginning of an ordered list. [Figure 17-10](#d3bar_insert) demonstrates
    the use of `insert`: list items in the `silly-list` are selected just like `append`
    and then a second argument (e.g., `'':first-child''`) specifies the element to
    insert before.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: D3向DOM树添加元素的另一种方法是使用其`insert`方法。`insert`的工作方式类似于`append`，但添加了第二个选择器参数，允许您在标签序列中的特定位置之前插入元素，例如在有序列表的开头。[图17-10](#d3bar_insert)演示了`insert`的使用：选择`silly-list`中的列表项就像`append`一样，然后第二个参数（例如，`:first-child`）指定要插入的元素。
- en: '![dpj2 1710](assets/dpj2_1710.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1710](assets/dpj2_1710.png)'
- en: Figure 17-10\. Using D3’s `insert` method to add list items
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-10。使用D3的`insert`方法添加列表项
- en: For SVG elements, positioned directly within their parent group using x and
    y coordinates, `insert` might seem redundant. But, as discussed in [“Layering
    and Transparency”](ch04.xhtml#sect_svg_layering), DOM ordering is important in
    SVG as elements are layered, meaning that the last element in the DOM tree overlays
    any previous. We’ll see an example of this in [Chapter 19](ch19.xhtml#chapter_d3_maps)
    where we have a grid overlay (or `graticule`) for our world map. We want this
    grid to be drawn above all other map elements so use `insert` to place those elements
    before it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SVG元素，使用x和y坐标直接定位在其父组中，`insert`可能看起来是多余的。但是，正如在[“分层和透明度”](ch04.xhtml#sect_svg_layering)中讨论的那样，DOM的顺序在SVG中很重要，因为元素是分层的，这意味着DOM树中的最后一个元素覆盖了之前的任何元素。我们将在[第19章](ch19.xhtml#chapter_d3_maps)中看到一个例子，我们在世界地图上有一个网格叠加物（或`graticule`）。我们希望这个网格在所有其他地图元素之上绘制，因此使用`insert`将这些元素放在它之前。
- en: Our crude bar chart in [Figure 17-9](#d3bar_10bars) is crying out for a little
    refinement. Let’s see how we can improve things, first with D3’s powerful `scale`
    objects and then with D3’s biggest idea, data binding.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[图17-9](#d3bar_10bars)中的粗糙条形图需要一点改进。让我们看看如何通过D3强大的`scale`对象和D3最大的想法——数据绑定来改善事物。
- en: Leveraging D3
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用D3
- en: In [Example 17-2](#d3bar_10bars_crude_code), we built a basic, no-frills bar
    chart with D3\. This chart had a number of problems. First, looping through the
    data array is a bit clunky. What if we wanted to adapt the dataset for our chart?
    We’d need some way of adding or removing bars in response and then updating the
    resulting bars with the new data and redrawing everything. We’d also need to keep
    scaling the bar dimensions in x and y to reflect the different number of bars
    and a different maximum bar value. That’s quite a lot of bookkeeping already,
    and things could get messy fast. Also, where do we keep the changing datasets?
    Every data-driven change to our chart would require passing the dataset around
    and then constructing a loop to iterate over elements. It feels as if the data
    exists outside the chained D3 workflow when it really needs to be integral to
    it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 17-2](#d3bar_10bars_crude_code)中，我们使用D3构建了一个基本的简单条形图。这个图表有很多问题。首先，循环遍历数据数组有些笨拙。如果我们想要调整数据集以适应我们的图表，该怎么办？我们需要一些方法来根据响应添加或删除条形，并使用新数据更新结果条形并重新绘制一切。我们还需要保持在x和y上的条形尺寸比例以反映不同数量的条形和不同的最大条形值。这已经是相当多的繁琐工作了，事情可能会很快变得混乱。此外，我们应该把变化的数据集保存在哪里？对我们的图表进行任何数据驱动的更改都需要传递数据集，然后构建一个循环来迭代元素。感觉数据存在于链式D3工作流之外，而实际上它需要成为其不可分割的一部分。
- en: 'The solution to elegantly integrating our dataset with D3 lies in the concept
    of data binding, D3’s biggest idea. The scaling problems are sorted by one of
    D3’s most useful utility libraries: scale. We’ll take a look at these now and
    then unleash the power of D3 with some data binding.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地将我们的数据集与D3集成的解决方案在于数据绑定的概念，这是D3的最大想法。比例尺问题由D3最有用的实用程序库之一解决：比例尺。现在我们将看看这些，并释放D3的力量进行数据绑定。
- en: Measuring Up with D3’s Scales
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3比例尺进行测量
- en: The fundamental idea behind D3’s scales is a mapping from an input domain to
    an output range. This simple procedure can remove a lot of the persnickety aspects
    of building charts, visualizations, and the like. As you get more comfortable
    with scales, you’ll find more and more situations where you can apply them. Mastering
    them is a key component to relaxed, effortless D3.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: D3比例尺背后的基本思想是将输入域映射到输出范围。这一简单的过程可以消除构建图表、可视化等过程中的许多烦琐细节。随着您对比例尺的熟悉程度越来越高，您会发现越来越多的情况可以应用它们。掌握它们是轻松使用D3的关键组成部分。
- en: 'D3 provides a lot of scales, dividing them into three main categories: quantitative,
    ordinal, and time^([2](ch17.xhtml#idm45607747116736)) scales. There are exotic
    mappings to suit most conceivable situations, but you’ll probably find yourself
    using the linear and ordinal scales much of the time.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: D3提供了许多比例尺，将它们分为三大类：定量、序数和时间^([2](ch17.xhtml#idm45607747116736))比例尺。有各种各样的映射来适应几乎所有可能的情况，但您可能会发现自己大部分时间使用线性和序数比例尺。
- en: 'In use, D3 scales can appear slightly strange because they are part object,
    part function. What this means is that after creating your scale, you can call
    various methods on it to set its properties (e.g., `domain` to set its domain),
    but you can also call it as a function with a domain argument to return a range
    value. The following example should make the distinction clear:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用中，D3的比例尺可能看起来有些奇怪，因为它们既是对象的一部分，又是函数的一部分。这意味着，在创建比例尺后，您可以调用它的各种方法来设置其属性（例如`domain`用于设置其域），但您也可以将其作为一个带有域参数的函数来返回一个范围值。下面的例子应该能清楚地说明区别：
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO5-1)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO5-1)'
- en: We use the scale’s `domain` and `range` methods to map from 0 → 1 to 0 → 100.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用比例尺的`domain`和`range`方法，将0到1映射到0到100。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO5-2)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO5-2)'
- en: We call the scale like a function with a domain argument of `0.5`, returning
    a range value of `50`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像一个带有域参数`0.5`的函数称为比例尺，返回一个范围值`50`。
- en: Let’s look at the two main D3 scales, the quantitative and the ordinal, showing
    how we use them to build our bar chart as we go.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看两种主要的D3比例尺，定量和序数，看看我们如何在构建条形图时使用它们。
- en: Quantitative Scales
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定量比例尺
- en: 'A D3 quantitative scale you’ll usually employ when building line charts, bar
    charts, scatter plots, and the like is `linear`, mapping a continuous domain to
    a continuous range. For example, we want our bar heights to be a linear function
    of the `nobelData` values. The range of values to be mapped to is between the
    maximum and minimum height of the bars in pixels (400 pixels to 0 pixels) and
    the domain to be mapped from is between the smallest conceivable value (0) and,
    in our case, the largest value in the array (336 US winners). In the following
    code, we first use D3’s `max` method to get the largest value in our `nobelData`
    array, using that to specify the end of our domain:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 D3 的定量比例尺时，通常用于构建折线图、柱状图、散点图等，是`linear`，将连续的域映射到连续的范围上。例如，我们希望柱子的高度是`nobelData`值的线性函数。要映射的值范围在柱子的最大和最小高度之间（400像素到0像素），映射的域从最小的可行值（0）到数组中的最大值（336位美国获奖者）。在下面的代码中，我们首先使用
    D3 的`max`方法获取`nobelData`数组中的最大值，用于指定我们的域的结束位置：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO6-1)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO6-1)'
- en: If there’s a chance, as is common with JSON encoded data, that the value is
    a string, prefixing *+* coerces it to a number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有可能，就像 JSON 编码数据通常那样，值是一个字符串，用*+*前缀将其强制转换为数字。
- en: One little trick to note is that our range decreases from its maximum. This
    is because we want to use it to specify a positive displacement along the SVG
    downward y-axis in order to make the bar chart’s y-axis point upward (i.e., the
    smaller the bar height, the larger the y displacement required). Conversely, you
    can see that the largest bar (the US winners tally) isn’t displaced at all (see
    [Figure 17-11](#d3bar_scales_y)).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意的一个小技巧是，我们的范围从其最大值开始减少。这是因为我们希望使用它来指定沿 SVG 向下 y 轴的正向位移，以使柱状图的 y 轴向上指向（即，柱子越小，所需的
    y 位移就越大）。反之，您可以看到最大的柱子（美国的获奖者统计）根本没有位移（见[图17-11](#d3bar_scales_y)）。
- en: '![dpj2 1711](assets/dpj2_1711.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1711](assets/dpj2_1711.png)'
- en: Figure 17-11\. Using D3’s linear scale to fix the domain and range of our bar
    chart’s y-axis
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-11。使用D3的线性比例尺来固定柱状图的y轴的域和范围
- en: 'We’re using the simplest possible linear scale for our bar chart’s y-axis,
    mapping from one numeric range to another, but D3’s linear scales can do a lot
    more. The key to understanding this is D3’s `interpolate` method.^([3](ch17.xhtml#idm45607747099392))
    This takes two values and returns an `interpolator` between them. So, for the
    range of our `yScale` in [Figure 17-11](#d3bar_scales_y), `interpolate` returns
    a numeric `interpolator` for the values `400` and `0`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为柱状图的 y 轴使用了最简单的线性比例尺，从一个数值范围映射到另一个数值范围，但是D3的线性比例尺可以做更多。理解这一点的关键是D3的`interpolate`方法。^([3](ch17.xhtml#idm45607747099392))它接受两个值并返回它们之间的插值器。因此，在我们的`yScale`的范围中，在[图17-11](#d3bar_scales_y)中，`interpolate`返回400和0的数值插值器：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO7-1)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO7-1)'
- en: Interpolators have a default domain of [0,1].
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 插值器默认的域是[0,1]。
- en: The `interpolate` method can deal with more than just numbers. Strings, color
    codes, and even objects are handled sensibly. You can also specify more than two
    numbers for your domain array—just make sure that domain and range arrays are
    the same size.^([4](ch17.xhtml#idm45607746591792)) We can combine these two facts
    to create a useful colormap:^([5](ch17.xhtml#idm45607746591168))
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`interpolate`方法不仅可以处理数字，还可以处理字符串、颜色代码甚至对象。您还可以为您的域数组指定多于两个数字——只需确保域和范围数组的大小相同。^([4](ch17.xhtml#idm45607746591792))我们可以结合这两个事实创建一个有用的色彩图：^([5](ch17.xhtml#idm45607746591168))'
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'D3’s linear scales have a lot of useful utility methods and rich functionality.
    The numeric maps will probably be your workhorse scale, but I recommend reading
    the [D3 docs](https://oreil.ly/lZy94) to fully appreciate how flexible the linear
    scales are. On that web page, you’ll find D3’s other quantitative scales, to suit
    almost every quantitative occasion:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的线性比例尺有许多有用的实用方法和丰富的功能。数值映射可能是您的主力比例尺，但我建议阅读[D3文档](https://oreil.ly/lZy94)以充分了解线性比例尺的灵活性。在该网页上，您将找到D3的其他定量比例尺，几乎可以适应每一个定量的场合：
- en: Power scales, similar to linear but with exponential transform (e.g., `sqrt`).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功率比例尺，类似于线性但具有指数变换（例如，`sqrt`）。
- en: Log scales, similar to linear but with logarithmic transform.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数比例尺，类似于线性但具有对数变换。
- en: Quantize scales, a variant of linear with a discrete range; that is, although
    the input is continuous, the output is divided into segments or buckets (e.g.,
    [1, 2, 3, 4, 5]).
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量化标度，线性的变体，具有离散范围；即使输入是连续的，输出也被分成段或桶（例如，[1, 2, 3, 4, 5]）。
- en: Quantile scales, often used for color palettes, are similar to quantize scales
    but have discrete or bucketed domains as well as ranges.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分位数标度，通常用于颜色调色板，与量化标度类似，但具有离散或桶装的域以及范围。
- en: Identity scales, linear with the same domain and range (fairly esoteric).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一域和范围的恒等标度（相当神秘）。
- en: Quantitative scales are great for manipulating continuously valued quantities,
    but often we want to get values based on a discrete domain (e.g., names or categories).
    D3 has a specialized set of ordinal scales to meet this need.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 量化标度非常适合处理连续值，但通常我们需要基于离散域（例如名称或类别）获取值。D3具有一组专门的序数标度来满足这种需求。
- en: Ordinal Scales
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序数标度
- en: 'Ordinal scales take an array of values as their domain and map these to discrete
    or continuous ranges, producing a single mapped value for each. To explicitly
    create a one-to-one mapping, we use the scale’s `range` method:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 序数标度将一个值数组作为其域，并将这些值映射到离散或连续的范围，为每个值生成一个映射值。要明确创建一对一映射，我们使用标度的 `range` 方法：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the case of our bar chart, we want to map an array of indices to a continuous
    range, to provide our bars’ x-coordinates. For this, we can use the band scale
    `scaleBand` `range` or the `rangeRound` methods, the latter snapping output values
    to individual pixels. Here, we use `rangeRound` to map an array of numbers to
    a continuous range, rounding to integer pixel values:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的条形图案例中，我们希望将一个索引数组映射到连续范围，以提供条的x坐标。为此，我们可以使用带状标度 `scaleBand` 的 `range` 或
    `rangeRound` 方法，后者将输出值四舍五入到单个像素。在这里，我们使用 `rangeRound` 将数字数组映射到连续范围，并将输出值四舍五入为整数像素值：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In building our original crude bar chart ([Example 17-2](#d3bar_10bars_crude_code)),
    we used a `barWidth` variable to size the bars. Implementing padding between the
    bars would have required a padding variable and necessary adjustments to `barWidth`
    and the bar positions. With our new ordinal band scale, we get these things for
    free, removing the fiddly bookkeeping. Calling the `xScale`’s `bandwidth` method
    provides the calculated bar widths. We can also use the scale’s `padding` method
    to specify the padding between the bars as a fraction of the space occupied by
    each bar. The `bandwidth` value is adjusted accordingly. Here are some examples
    of this in action:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们最初的粗略条形图（[示例 17-2](#d3bar_10bars_crude_code)）时，我们使用了 `barWidth` 变量来调整条的大小。实现条之间的填充需要一个填充变量和对
    `barWidth` 以及条位置的必要调整。使用我们新的序数带状标度，我们免费获得这些内容，避免了繁琐的记账工作。调用 `xScale` 的 `bandwidth`
    方法提供了计算出的条宽度。我们还可以使用标度的 `padding` 方法指定条之间的填充为每个条所占空间的一部分。`bandwidth` 值会相应调整。以下是一些实际应用示例：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-1)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-1)'
- en: Stores the scale with a fixed domain; useful if we anticipate the range changing.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 存储标度并固定域；如果我们预期范围会改变，这很有用。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-2)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-2)'
- en: '`rangeRound` snaps (rounds) the output values to integers.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`rangeRound` 将输出值四舍五入为整数。'
- en: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-3)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO8-3)'
- en: We specify a padding (`p`) factor of `0.1` * allocated bar(`B`)-space.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定一个填充因子（`p`）为`0.1` * 分配给条形图（`B`）空间。
- en: '[Figure 17-12](#d3bar_scales_x) shows our bar chart’s band x-scale with a padding
    factor of `0.1`. The continuous range is 600 (pixels), which is the width of the
    bar chart, and the domain is an array of integers representing the individual
    bars. As shown, providing `xScale` with a bar’s index number returns its position
    on the x-axis.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-12](#d3bar_scales_x) 显示了我们条形图的带状x轴标度，填充因子为`0.1`。连续范围为600（像素），即条形图的宽度，域是表示各个条的整数数组。如图所示，为
    `xScale` 提供一个条的索引号将返回其在x轴上的位置。'
- en: '![dpj2 1712](assets/dpj2_1712.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1712](assets/dpj2_1712.png)'
- en: Figure 17-12\. Setting the domain and range of our bar chart’s x-scale, using
    a padding factor of 0.1
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-12\. 设置我们条形图x轴标度的域和范围，使用填充因子为0.1。
- en: Armed with our D3 scales, let’s turn to D3’s central concept, binding data to
    the DOM in order to drive changes to it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有我们的D3标度后，让我们转向D3的核心概念，将数据绑定到DOM以便驱动对其的更改。
- en: Unleashing the Power of D3 with Data Binding/Joining
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用数据绑定/连接释放D3的强大功能
- en: D3 stands for *Data-Driven Documents*, and up to now we haven’t really been
    driving with our data. In order to unleash D3, we need to embrace its big idea,
    which is binding or joining (both terms are used online) the data in our dataset
    to its respective DOM elements and updating the web page (document) based on this
    integration. This small step of joining data to the DOM enables a huge amount
    of functionality when combined with the most powerful D3 methods, `enter` and
    `exit`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: D3代表*数据驱动文档*，到目前为止我们还没有真正利用我们的数据进行驾驶。为了释放D3的潜力，我们需要接受它的核心思想，即将数据集中的数据与其对应的DOM元素进行绑定或连接（在线上两个术语都有使用），并基于此集成更新网页（文档）。这一小步骤将数据与DOM元素结合起来，与最强大的D3方法`enter`和`exit`结合使用时，将会产生巨大的功能性。
- en: After a number of iterations, D3 (version 5 and above) now provides the `join`
    method, which considerably simplifies the use of `enter` and `exit`. The `join`
    method will be the focus of this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 经过多次迭代，D3（5版及以上）现在提供了`join`方法，大大简化了`enter`和`exit`的使用。本章将重点介绍`join`方法。
- en: In order to interpret the thousands of examples online that use the older `enter`,
    `exit`, `remove` update patterns, it helps to know a little more about what’s
    going on under the hood when D3 joins data. See [Appendix A](app01.xhtml#appendix)
    for details.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要解读在线上成千上万使用旧的`enter`、`exit`、`remove`更新模式的示例，有助于了解D3数据连接背后的原理。详细内容请参见[附录 A](app01.xhtml#appendix)。
- en: Updating the DOM with Data
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据更新DOM
- en: 'I think it’s fair to say that using D3 to update the DOM with new data has
    not been particularly easy to grasp historically (footnote: You really appreciate
    this when you try to teach it or write a book chapter on it). There have been
    a number of implementations such as the [general update pattern](https://oreil.ly/sYrAG)
    that have themselves gone through a number of incompatible forms. This means a
    lot of popular examples on the web, using older version of D3, will steer you
    down the wrong path.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为可以公平地说，使用D3来更新DOM以显示新数据在历史上并不容易理解（注：当您尝试教授它或撰写有关它的书籍章节时，您真的会很感慨）。过去有许多实现，比如[通用更新模式](https://oreil.ly/sYrAG)，它们本身也经历了许多不兼容的形式。这意味着很多网络上流行的例子，使用旧版本的D3，将会引导您走向错误的方向。
- en: Tip
  id: totrans-136
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Although you may anticipate building one-off charts, with a single data-binding
    process, it’s good to get into the habit of asking yourself, “What if I need to
    change the data dynamically?” If the answer is not immediately obvious, you have
    probably implemented a bad D3 design. Catching yourself in the act means you can
    do a little code audit and make the necessary changes before things start to deteriorate.
    It’s good to kick yourself out of this habit, but also, because D3 is somewhat
    of a craft skill, constantly reaffirming that best practice will pay off when
    you need it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可能预计只构建一次性图表，但通过单一数据绑定过程，养成问自己“如果我需要动态更改数据会怎样？”的习惯是很好的。如果答案不立即显而易见，您可能实施了一个糟糕的D3设计。及时发现这一点意味着您可以进行一些代码审计并做出必要的更改，以免事情开始恶化。养成这种习惯是好事，因为D3在某种程度上是一种手艺技能，不断重申最佳实践将在您需要时得到回报。
- en: The good news is that recent versions of D3 have solidified the basic methods
    and made them a lot simpler as well. So employing `enter`, `exit`, and `remove`,
    the three key D3 methods used in data-joining, can now be done with a single `join`
    method, which has sensible defaults. In this section, we’ll see how to use these
    four methods to update our bar chart in response to new data, in this case Nobel
    Prize–winning countries.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的D3已经巩固了基本方法，并且使它们更加简单。因此，使用`enter`、`exit`和`remove`这三个关键的D3方法来进行数据连接现在可以通过单个`join`方法来完成，这个方法有合理的默认设置。在本节中，我们将看到如何使用这四种方法来响应新数据更新我们的条形图，这里以诺贝尔奖获得国家为例。
- en: 'Probably the most fundamental concept behind D3 is that of the data-join. In
    essence, a dataset (usually an array of data objects) is used to create some visual
    elements, e.g., the rectangular bars of a bar chart. Any change to this data is
    reflected in a changing visualization, e.g., the number of bars in the bar chart
    or the heights or placement of existing bars. We can break this operation into
    three stages:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 可能D3背后最基本的概念是数据连接的概念。本质上，数据集（通常是数据对象的数组）用于创建一些视觉元素，例如条形图的矩形条。对这些数据的任何更改都会反映在可视化效果的变化上，例如条形图中的条数，或现有条形图的高度或位置。我们可以将这个操作分为三个阶段：
- en: Create a visual element for any data without one using `enter`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`enter`为任何没有视觉元素的数据创建一个视觉元素。
- en: Update the attributes and styles of these and, if required, any existing elements.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新这些元素的属性和样式，如果需要，也更新任何现有元素。
- en: Remove any old visual elements that no longer have any data joined to them using
    the `exit` and `remove` methods.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`exit`和`remove`方法移除任何不再与数据关联的旧视觉元素。
- en: Whereas in the past D3 required you to implement the update pattern yourself,
    using `enter`, `exit`, and (briefly) a `merge` method, the new [`join`](https://oreil.ly/4mg8b)
    method combines these methods in one user-friendly package. Often you can just
    call it with a single argument, specifying the visual element to be joined to
    the data (e.g., an SVG rect or circle), but it also has more fine-grained control,
    allowing you to pass in `enter`, `exit`, and `update` callback functions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以往，D3要求您自行实现更新模式，使用`enter`、`exit`和（简要地）`merge`方法，而新的[`join`](https://oreil.ly/4mg8b)方法将这些方法结合到一个用户友好的包中。通常您可以只用一个参数调用它，指定要与数据关联的视觉元素（例如SVG
    rect或circle），但它也具有更精细的控制，允许您传入`enter`、`exit`和`update`回调函数。
- en: Let’s see how easy it now is to join data and visual elements by joining some
    horizontal bars, constructed of SVG rectangles, to our dummy Nobel dataset. We’ll
    join the following dataset to the group of rectangles and use it to create some
    horizontal bars. You can find a working code example in [CodePen](https://oreil.ly/YOnzx).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 看看现在通过将一些由SVG矩形构成的水平条形图与我们的虚拟诺贝尔数据集进行关联，关联数据和视觉元素有多容易。我们将以下数据集与矩形组进行关联，并用它创建一些水平条形图。您可以在[CodePen](https://oreil.ly/YOnzx)中找到一个工作代码示例。
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We’ll use a little HTML and CSS to create an SVG group to put the bars in and
    a bar class with blue fill:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一些HTML和CSS创建一个SVG组来放置条形图，并使用蓝色填充创建一个bar类：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With data and HTML scaffold to hand, let’s see D3’s `join` in action. We’ll
    create an `updateBars` function that will accept a data array of key-value countries
    and join it to some SVG rectangles.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 带有数据和HTML结构的支撑，让我们看看D3的`join`方法的实际效果。我们将创建一个`updateBars`函数，它将接受一个键-值国家数据数组，并将其与一些SVG矩形进行关联。
- en: The `updateBars` function accepts a data array and first adds it to a selection
    of class `'bar'` using the `data` method. As seen in [Example 17-3](#d3_update_bars),
    it then joins this `bars` selection to some SVG rectangles, using the `join` method.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateBars`函数接受一个数据数组，并首先使用`data`方法将其添加到类为`''bar''`的选择集中。如[Example 17-3](#d3_update_bars)所示，然后使用`join`方法将此`bars`选择集与一些SVG矩形进行关联。'
- en: Example 17-3\. Joining our country data to some SVG bars
  id: totrans-150
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例17-3。将我们的国家数据与一些SVG条形图进行关联
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO9-1)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO9-1)'
- en: This joins all existing bars data to SVG `rect` elements.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将所有现有的条形图数据与SVG `rect`元素进行关联。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO9-2)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO9-2)'
- en: '`join` returns all existing `rect`s, which we then update using their joined
    data.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`join`返回所有现有的`rect`，然后我们使用它们的关联数据更新它们。'
- en: 'After calling the `join` method, D3 is doing the sensible thing, using `enter`,
    `exit`, and `remove` to keep the data and visual elements in sync. Let’s demonstrate
    this by calling the `updateBars` function a few times with changing data. First,
    we’ll slice the first four members of our Nobel dataset and use those to update
    the bars:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`join`方法后，D3正在进行明智的操作，使用`enter`、`exit`和`remove`来保持数据和视觉元素的同步。我们通过几次使用变化数据调用`updateBars`函数来演示这一点。首先，我们将切片我们诺贝尔数据集的前四个成员，并用它们来更新条形图：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'That produces the bars shown here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了这里显示的条形图：
- en: '![dpj2 17in01](assets/dpj2_17in01.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 17in01](assets/dpj2_17in01.png)'
- en: 'Now let’s update the data-join, using only the first two members of the Nobel
    data array:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新数据关联，仅使用诺贝尔数据数组的前两个成员：
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![dpj2 17in02](assets/dpj2_17in02.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 17in02](assets/dpj2_17in02.png)'
- en: Calling this method produces the two bars shown in the preceding image. Behind
    the scenes, D3’s bookkeeping has removed the redundant rectangles which, with
    a smaller dataset, are no longer joined to any data.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 调用此方法会产生前图像中显示的两个条形图。在幕后，D3的记账系统已经移除了多余的矩形，这些矩形与较小的数据集不再关联任何数据。
- en: 'Now let’s go the other way and see what happens if we use a bigger dataset,
    this time the first six members of the Nobel array:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们反向操作，看看如果我们使用更大的数据集会发生什么，这次是诺贝尔数组的前六个成员：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![dpj2 17in03](assets/dpj2_17in03.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 17in03](assets/dpj2_17in03.png)'
- en: Once again, D3 does the expected thing (see preceding image), this time appending
    new rectangles to join to the new data objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，D3做了预期的事情（参见前一图像），这次向新数据对象追加新的矩形。
- en: Having demonstrated that D3’s join successfully keeps data and visual elements
    in sync, adding and removing rectangles as required, we have the basis for our
    Nobel bar chart.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 已经演示了D3的`join`成功地保持数据和视觉元素的同步，根据需要添加和删除矩形，我们现在有了构建诺贝尔柱状图的基础。
- en: Putting the Bar Chart Together
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组装柱状图
- en: Now let’s put together what we’ve currently learned in this chapter and build
    the main elements of our bar chart. We’ll be putting D3’s scales to good use here.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把本章学到的内容整合起来，构建我们柱状图的主要元素。我们将在这里充分利用D3的比例尺。
- en: 'First, we’ll select the container for our bar chart by ID *#nobel-bar* and
    use its dimensions (from `boundingClientRectangle`) and some margin settings to
    get the width and height of the chart:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过ID *#nobel-bar* 选择我们柱状图的容器，并使用其尺寸（来自`boundingClientRectangle`）和一些边距设置来获取图表的宽度和高度：
- en: '[PRE23]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we’ll set our scales using the width and height:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用宽度和高度设置我们的比例尺：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we’ll create our SVG chart group using width, height, and margins and store
    it to a variable:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用宽度、高度和边距创建SVG图表组，并将其存储到一个变量中：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With our HTML and SVG scaffold in place, let’s adapt the `updateBars` function
    (see [Example 17-3](#d3_update_bars)) to respond to changes in our real Nobel
    data. The update function will receive a data array of the form:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的HTML和SVG框架就位之后，让我们调整`updateBars`函数（参见[示例 17-3](#d3_update_bars)）以响应我们真实的诺贝尔数据变化。更新函数将接收一个数据数组，格式如下：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: On being called with new data, the `updateBarchart` function first filters out
    any zero prize-winning countries and then updates the x and y scale domains to
    reflect the number of bars/countries and the maximum prizes won, as seen in [Example 17-4](#update_bar_chart).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用新数据调用`updateBarchart`函数时，首先会过滤掉任何获奖数量为零的国家，并更新x和y比例尺的域，以反映柱子/国家的数量和最大获奖数，如示例 17-4所示（#update_bar_chart）。
- en: Example 17-4\. Updating the bar chart
  id: totrans-180
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-4\. 更新柱状图
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With updated scales we can use a data-join to create the bars necessary for
    the data provided. This is essentially the same as the function shown in [Example 17-3](#d3_update_bars)
    but using scales to size the bars and with a customized `entry` method, to add
    a class and left-padding to newly minted bars:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新比例尺，我们可以使用数据连接创建所需的柱子。这与[示例 17-3](#d3_update_bars)中显示的功能本质上相同，但使用比例尺调整柱子的大小，并使用定制的`entry`方法向新创建的柱子添加类和左填充：
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO10-1)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO10-1)'
- en: We customize the `enter` method to add a `` bar` `` class to the rectangle.
    Note that we need to return the `enter` object to use after the `join` call.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定制`enter`方法，向矩形添加`` bar` ``类。请注意，我们需要在`join`调用后返回`enter`对象以便使用。
- en: We now have a bar chart that responds to changes in the data, initiated in this
    case by the user. Filtering the data for all Chemistry prizes shows the result
    in [Figure 17-13](#d3_final_chart). Although lacking a few crucial elements, the
    hard work has been done building a bar chart. Now let’s add axes and some cool
    transitional effects to make the finishing touches.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个根据数据变化响应的柱状图，本例中由用户启动。过滤所有化学奖数据显示结果见[图 17-13](#d3_final_chart)。尽管缺少一些关键元素，但是构建柱状图的重要工作已完成。现在让我们添加轴和一些酷炫的过渡效果，为其添加最后的润色。
- en: '![dpj2 1713](assets/dpj2_1713.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1713](assets/dpj2_1713.png)'
- en: Figure 17-13\. Final bar chart
  id: totrans-188
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-13\. 最终柱状图
- en: Axes and Labels
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轴和标签
- en: Now that we have a working update pattern, we will add the axes and axes labels
    that any self-respecting bar chart needs.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了可用的更新模式，我们将添加轴和轴标签，这是任何体面柱状图所需的。
- en: D3 doesn’t offer a lot in the way of high-level chart elements, encouraging
    you to roll your own. But it does provide a convenient `axis` object, which takes
    the sting out of having to craft the SVG elements yourself. It’s easy to use and,
    as you would expect, plays nicely with our data update patterns, allowing for
    axes ticks and labels that change in response to the data presented.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: D3并未提供很多高级图表元素，鼓励您自行构建。但它确实提供了一个方便的`axis`对象，可以减少手工创建SVG元素的工作量。它易于使用，并且与我们的数据更新模式完美配合，允许轴刻度和标签根据呈现的数据变化而变化。
- en: 'In order to define our x and y axes, we need to know what ranges and domains
    we want our axes to represent. In our case, it’s the same one as the ranges and
    domains of our x and y scales, so we supply these to the axes’ `scale` method.
    D3 axes also allow you to specify their orientation, which will fix the relative
    position of ticks and tick labels. With our bar chart, we want the x-axis on the
    bottom and the y-axis on the left. Our ordinal x-axis will have a label for each
    bar, but with our y-axis, the choice of tick numbers is arbitrary. Ten seems like
    a reasonable number, so we set that using the `ticks` method. The following code
    shows how we declare our bar chart’s axes:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义我们的x和y轴，我们需要知道我们希望轴代表的范围和定义域。在我们的情况下，它与我们的x和y比例尺的范围和定义域相同，因此我们将这些供应给轴的`scale`方法。D3轴还允许您指定它们的方向，这将固定刻度线和刻度标签的相对位置。对于我们的条形图，我们希望x轴位于底部，y轴位于左侧。我们的序数x轴将为每个条形图设置一个标签，但对于y轴，刻度数的选择是任意的。十个看起来是一个合理的数字，所以我们使用`ticks`方法设置它。以下代码显示了如何声明我们的条形图的轴：
- en: '[PRE29]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO12-1)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO12-1)'
- en: We want the format of our tick labels to change with our chosen metric, per
    capita or absolute. Per capita produces a very small number that is best represented
    in exponential form (e.g., 0.000005 → 5e-6). The `tickFormat` method allows you
    to take the data value at each tick and return the desired tick string.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的刻度标签的格式与我们选择的度量标准（人均或绝对）一起改变。人均会产生一个非常小的数字，最好用指数形式表示（例如，0.000005 → 5e-6）。`tickFormat`方法允许您获取每个刻度的数据值并返回所需的刻度字符串。
- en: 'We’ll also need a little bit of CSS to style the axes correctly, removing the
    default `fill`, setting the stroke color to black, and making the shape render
    crisply. We’ll also specify the font size and family while we’re at it:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一些CSS来正确地样式化轴，移除默认的`fill`，设置描边颜色为黑色，并使形状呈现得清晰。我们还将在这里指定字体大小和字体系列：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we have our `axis` generators, we need a couple of SVG groups to hold
    the axes they produce. Let’s add these to our main `svg` selector as groups with
    sensible class names:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的`axis`生成器，我们需要一些SVG组来容纳它们生成的轴。让我们将这些作为具有合理类名的组添加到我们的主`svg`选择器中：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO13-1)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO13-1)'
- en: By SVG’s convention, y is measured from the top down, so we want our *bottom*-oriented
    x-axis translated from the chart’s top by *height* pixels.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 根据SVG的约定，y从顶部向下测量，因此我们希望我们底部导向的x轴从图表的顶部向下移动*height*像素。
- en: 'Our bar chart’s axes have fixed ranges (the width and height of the chart),
    but their domains will change as the user filters the dataset. For example, the
    number of (country) bars will be reduced if the user filters the data by Economics
    category: this will change the domain of the ordinal x-scale (number of bars)
    and the quantitative y-scale (maximum number of winners). We want the displayed
    axes to change with these changing domains, with a nice transition for good measure.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们条形图的轴具有固定的范围（图表的宽度和高度），但它们的定义域将随用户筛选数据集而变化。例如，如果用户按经济学类别过滤数据，（国家）条的数量将减少：这将更改序数x比例尺（条数）和定量y比例尺（最大获奖者数）的定义域。我们希望显示的轴随这些变化的定义域变化，并进行良好的过渡。
- en: '[Example 17-5](#d3bar_axes_code) shows how the axes are updated. First, we
    update our scale domains using the new data (A). These new scale domains are reflected
    when the axes generators (which are linked to them) are called on their respective
    axis groups.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 17-5](#d3bar_axes_code)展示了如何更新轴。首先，我们使用新数据更新我们的比例尺定义域（A）。这些新的比例尺定义域在调用它们各自轴组上的轴生成器时反映出来。'
- en: Example 17-5\. Updating our bar chart’s axes
  id: totrans-204
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 17-5\. 更新我们的条形图的轴
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO14-1)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO14-1)'
- en: Calling the D3 `axis` on our x-axis group element builds all the necessary axis
    SVG in it, including ticks and tick labels. D3 `axis` uses an internal update
    pattern to enable transitions to newly bound data.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 调用D3的`axis`在我们的x轴组元素上构建所有必要的轴SVG，包括刻度和刻度标签。D3的`axis`使用内部更新模式来实现对新绑定数据的过渡。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO14-2)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO14-2)'
- en: After creating the x-axis, we perform some SVG manipulations of the text labels
    generated. First, we select the `text` elements of the axis, the tick labels.
    We then place their text anchors at the end of the element and shift their position
    a bit. This is because the text is rotated about its anchor and we want to rotate
    about the end of the country labels, now positioned under the tick lines. The
    result of our manipulations is shown in [Figure 17-16](#d3bar_x_axis). Note that
    without rotating our labels, they would merge into one another.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 x 轴后，我们对生成的文本标签进行了一些 SVG 操作。首先，我们选择了轴的`text`元素，刻度标签。然后，我们将它们的文本锚点放置在元素的末端，并稍微移动它们的位置。这是因为文本是围绕其锚点旋转的，而我们希望围绕现在位于刻度线下方的国家标签的末端旋转。我们操作的结果显示在[图
    17-16](#d3bar_x_axis)中。请注意，如果不旋转标签，它们将彼此合并。
- en: '![dpj2 1716](assets/dpj2_1716.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1716](assets/dpj2_1716.png)'
- en: Figure 17-16\. Reoriented tick labels on the x-axis
  id: totrans-211
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-16。x 轴上重新定向的刻度标签
- en: 'Now that we have our working axes, let’s add a little label to the x-axis and
    then see how the bar chart copes with our real data:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了工作的坐标轴，让我们给 x 轴添加一个小标签，然后看看条形图如何处理我们的真实数据：
- en: '[PRE33]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-1)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-1)'
- en: A left padding constant, in pixels, to make way for the y-axis label.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 左填充常数，以像素为单位，以为 y 轴标签让路。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-2)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-2)'
- en: Rotates the text anticlockwise to the upright position.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本逆时针旋转到正立的位置。
- en: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-3)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO15-3)'
- en: '`dy` is a relative coordinate [relative to the *y* coordinate just specified
    (6)]. By using the `em` unit (relative to font size), we can make handy adjustments
    to the text margin and baseline.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`dy`是相对坐标[相对于刚刚指定的*y*坐标(6)]。通过使用`em`单位(相对于字体大小)，我们可以对文本边距和基线进行方便的调整。'
- en: '[Figure 17-17](#d3bar_update_lit) shows the result of filtering our Nobel Prize
    winners dataset for Chemistry winners, using our category selector filter. The
    bar widths increase to reflect the reduced number of countries, and both axes
    adapt to the new dataset.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 17-17](#d3bar_update_lit)显示了我们为化学奖获得者数据集应用分类选择器过滤器后的结果。条形宽度增加以反映国家数量的减少，并且两个坐标轴都适应了新数据集。'
- en: '![dpj2 1717](assets/dpj2_1717.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1717](assets/dpj2_1717.png)'
- en: Figure 17-17\. The Nobel Prize bar chart before and after we apply the category
    filter for Chemistry winners
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-17。我们应用化学奖获得者分类筛选器前后的诺贝尔奖条形图
- en: We now have a working bar chart, using the update pattern to adjust itself as
    the user-driven dataset changes. But although it’s functional, the transition
    in response to data change is visually stark, even jarring. One way to make the
    change much more engaging and even informative would be to have the chart update
    continuously over a short time period, with preserved country bars moving from
    their old to new position while simultaneously adapting their height and width.
    Such continuous transitions really add life to a visualization and are seen in
    many of the most impressive D3 pieces. The good news is that transitions are tightly
    integrated into D3’s workflow, which means you can achieve these cool visual effects
    for the cost of a few lines of code.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个工作的条形图，使用更新模式来根据用户驱动的数据集调整自身。但是，尽管它功能齐全，但是响应数据更改的转换在视觉上仍然很突然，甚至令人不适。使变化更具吸引力甚至具有信息性的一种方式是在短时间内持续更新图表，使保留的国家条从其旧位置移动到新位置，同时调整其高度和宽度。这种持续的转换确实为可视化添加了生命，并且在许多最令人印象深刻的
    D3 作品中都可以看到。好消息是，转换已经紧密集成到 D3 的工作流程中，这意味着您可以以几行代码的成本实现这些酷炫的视觉效果。
- en: Transitions
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: As it stands, our bar chart is perfectly functional. It responds to data changes
    by adding or removing bar elements and then updating them using the new data.
    But the immediate change from one reflection of the data to another feels a little
    stark and visually jarring.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，我们的条形图功能完善。它通过添加或删除条形元素以及使用新数据更新它们来响应数据变化。但是，从一种数据反映到另一种数据反映的立即变化会感到有点生硬和视觉上的不协调。
- en: D3’s transitions provide the ability to smooth the visual update of our elements,
    making them change continuously over a set time period. This can be both aesthetically
    appealing and, on occasion, informative.^([7](ch17.xhtml#idm45607744290752)) The
    important thing is that D3 transitions can be very engaging for the user, which
    is reason enough to want to master them.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: D3 的过渡效果提供了平滑更新元素的能力，使它们在设定的时间段内持续变化。这既可以美观，有时还能提供信息。^([7](ch17.xhtml#idm45607744290752))
    重要的是，D3 的过渡效果能够极大地提升用户的参与感，这已经足够成为掌握它们的理由了。
- en: '[Figure 17-18](#d3bar_transitions) shows the effect we are aiming at. When
    the bar chart is updated with a newly selected dataset, we want the bars of any
    countries present before and after the transition to morph smoothly from their
    old to new positions and dimensions.^([8](ch17.xhtml#idm45607744288976)) So in
    [Figure 17-18](#d3bar_transitions) the bar for France grows from start to finish
    over the course of the transition—​say, a couple of seconds—​with intermediate
    bars of increasing width and height. The axes ticks and labels will adapt too
    as the x and y scales change.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[图17-18](#d3bar_transitions)展示了我们要达到的效果。当使用新选择的数据集更新条形图时，我们希望存在于过渡前后的任何国家的条形图能够平滑地从旧位置和尺寸过渡到新位置和尺寸，如图中的法国条形图在过渡过程中逐渐增长，大约几秒钟，其间的条形图宽度和高度逐渐增加。随着
    x 和 y 轴比例尺的变化，轴的刻度和标签也会相应调整。'
- en: '![dpj2 1718](assets/dpj2_1718.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1718](assets/dpj2_1718.png)'
- en: Figure 17-18\. Smooth bar transitions on update
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-18\. 更新时的平滑条形图过渡效果
- en: The effect shown in [Figure 17-18](#d3bar_transitions) is surprisingly easy
    to achieve but involves understanding the precise way data is joined in D3\. By
    default, when new data is bound to existing DOM elements, it is done by array
    index. [Figure 17-19](#d3bar_data_index) shows how this works, using our selected
    bars as an example. The first bar (B0), previously bound to the USA’s data, is
    now bound to France’s. It stays in first position and updates its size and tick
    label. Essentially, the USA’s bar becomes France’s.^([9](ch17.xhtml#idm45607744282224))
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如图[17-18](#d3bar_transitions)所示的效果出奇地容易实现，但需要理解 D3 中数据绑定的精确方式。默认情况下，当新数据绑定到现有的
    DOM 元素时，是通过数组索引进行的。如图[17-19](#d3bar_data_index)所示，使用我们选定的条形图作为示例。第一个条形图（B0），之前绑定了美国的数据，现在绑定了法国的数据。它保持在第一位置并更新其大小和刻度标签。实质上，美国的条形图变成了法国的。^([9](ch17.xhtml#idm45607744282224))
- en: '![dpj2 1719](assets/dpj2_1719.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1719](assets/dpj2_1719.png)'
- en: Figure 17-19\. By default, new data is joined by index
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-19\. 默认情况下，新数据通过索引进行关联
- en: In order to get continuity during our transitions (i.e., for the USA bar to
    move to its new position while changing to its new height and width), we need
    the new data to be bound by a unique key, not the index. D3 allows you to specify
    a function as a second argument to the `data` method, which returns a key from
    the object data to use to bind the new data to the correct respective bars, assuming
    they still exist. [Figure 17-20](#d3bar_data_key) shows how this is done. Now,
    the first bar (0) is bound to the new USA data, changing its position by index
    as well as its width and height to that of the new American bar.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的过渡中实现连续性（例如，使美国的条形图移动到其新位置同时改变其新的高度和宽度），我们需要将新数据绑定到一个唯一的键而不是索引。D3 允许您将函数作为`data`方法的第二个参数，该函数从对象数据中返回一个键，用于将新数据绑定到正确的条形图上，假设它们仍然存在。如图[17-20](#d3bar_data_key)所示。现在，第一个条形图（0）与新的美国数据绑定在一起，通过索引改变其位置以及其宽度和高度为新的美国条形图。
- en: '![dpj2 1720](assets/dpj2_1720.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1720](assets/dpj2_1720.png)'
- en: Figure 17-20\. Using an object key to join new data
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图17-20\. 使用对象键连接新数据
- en: 'Joining the data by key gives us the correct start and endpoints for our national
    bars. Now all we need is a way to create a smooth transition between them. We
    can do this by using a couple of D3’s coolest methods, `transition` and `duration`.
    By calling these before we change our bar dimension and position attributes, D3
    magically performs a smooth transition between them, as shown in [Figure 17-18](#d3bar_transitions).
    Adding transitions to our bar chart update requires only a few lines of code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 通过键值连接数据可以为我们的国家条形图提供正确的起始点和终点。现在我们只需找到一种方法，在它们之间实现平滑的过渡。我们可以通过使用 D3 最酷的方法之一，即`transition`和`duration`，来做到这一点。在我们改变条形图的尺寸和位置属性之前调用这些方法，D3
    就会神奇地在它们之间实现平滑过渡，如图[17-18](#d3bar_transitions)所示。在我们的条形图更新中添加过渡效果只需要几行代码：
- en: '[PRE34]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-1)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-1)'
- en: A transition with duration of two seconds, which is our `TRANS_DURATION` constant
    of 2000 (ms).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 一个持续时间为两秒的过渡，即我们的 `TRANS_DURATION` 常量为 2000 (ms)。
- en: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-2)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-2)'
- en: Using the data object’s `code` property to make the continuous data-joins.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据对象的 `code` 属性进行连续数据连接。
- en: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-3)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO16-3)'
- en: The `x`, `y`, `width`, and `height` attributes will be smoothly morphed from
    current values to those defined here.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`、`y`、`width` 和 `height` 属性将平滑地从当前值变形为这里定义的值。'
- en: Transitions will work on most obvious attributes and styles of an existing DOM
    element.^([10](ch17.xhtml#idm45607744053184))
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡效果将作用于现有 DOM 元素的大多数明显属性和样式。^([10](ch17.xhtml#idm45607744053184))
- en: The transitions just shown perform a smooth change of the attributes from starting
    point to end goal, but D3 allows for a lot of tuning for these effects. You can,
    for example, use the `delay` method to specify the time before the transition
    starts. This delay can also be a function of the data.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚展示的过渡效果可以使属性平稳地从起始点变化到目标点，但是 D3 允许对这些效果进行大量调整。例如，您可以使用 `delay` 方法指定过渡开始前的时间。这个延迟也可以是数据的一个函数。
- en: Probably the most useful extra transitioning method is `ease`, which allows
    you to specify the way in which the elements’ attributes are updated over the
    transition’s duration. The default easing function is [`CubicInOut`](https://oreil.ly/zP5FO),
    but you can also specify things like `quad`, which speeds things up as the transition
    progresses, or `bounce` and `elastic`, which do pretty much what it says on the
    tin, giving a bouncy feel to the change. There’s also `sin`, which speeds up at
    the beginning and slows down toward the end. See [*easings.net*](https://easings.net)
    for a nice description of different easing functions and [observablehq](https://oreil.ly/crI0I)
    for a comprehensive runthrough of D3’s easing functions, assisted by interactive
    charts.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最有用的额外过渡方法是 `ease`，它允许您指定在过渡期间更新元素属性的方式。默认的缓动函数是 [`CubicInOut`](https://oreil.ly/zP5FO)，但您也可以指定像
    `quad` 这样的东西，它会随着过渡的进行加速，或者像 `bounce` 和 `elastic` 这样的东西，它们基本上做它们名字上说的事情，给变化带来有弹性的感觉。还有
    `sin`，它在开始时加速，朝结束时减速。参见 [*easings.net*](https://easings.net) 以了解不同的缓动函数的详细描述，以及
    [observablehq](https://oreil.ly/crI0I) 以获取 D3 缓动函数的全面运行说明，辅以交互式图表。
- en: If the easing functions available to D3 don’t suit your needs or you’re feeling
    particularly ambitious, as with most things D3 you can roll your own to fit any
    subtle requirements. The `tween` method provides the fine-grained control you
    might need.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 D3 提供的缓动函数不符合您的需求，或者您感觉特别雄心勃勃，那么像大多数 D3 的东西一样，您可以自己编写以满足任何微妙的要求。 `tween`
    方法提供了您可能需要的精细控制。
- en: With a working `join`-based update pattern and some cool transitions, we have
    completed our Nobel-viz bar chart. There’s always room for refinement, but this
    bar chart will more than do the job. Let’s summarize what we’ve learned in this
    rather large chapter before moving on to the other components of our Nobel Prize
    visualization.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 通过工作中基于 `join` 的更新模式和一些酷炫的过渡效果，我们完成了我们的诺贝尔奖条形图。总是有改进的空间，但这个条形图将超出工作要求。在继续研究我们的诺贝尔奖可视化的其他组件之前，让我们总结一下这一相当大的章节中我们学到的东西。
- en: Updating the Bar Chart
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新条形图
- en: 'When the bar chart module is imported, it appends a callback function to the
    callbacks array in the core module. When data is updated in response to user interaction,
    this callback function is called and the bar chart updated with new country data:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当导入条形图模块时，它将一个回调函数附加到核心模块中的回调数组中。当以用户交互响应方式更新数据时，将调用此回调函数，并使用新的国家数据更新条形图：
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO17-1)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introducing_d3__8212___8203_the_story_of_a_bar_chart_CO17-1)'
- en: This anonymous function is called in the core module when data is updated.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据更新时，在核心模块中调用这个匿名函数。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: This has been a large and quite challenging chapter. D3 isn’t the easiest library
    to learn, but I have smoothed the learning curve by breaking things down into
    digestible chunks. Take your time absorbing the fundamental ideas and, crucially,
    start setting yourself little objectives to stretch your D3 knowledge. I think
    D3 is very much an art form and, more than most libraries, one learns while doing.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个庞大且相当具有挑战性的章节。D3 不是最容易学习的库，但我通过将事物分解成可消化的部分来平缓学习曲线。花些时间吸收基本思想，关键是开始为自己设定一些小目标，以扩展你的
    D3 知识。我认为 D3 在很大程度上是一种艺术形式，比大多数库更是如此，你会在实践中学习。
- en: The key elements to understanding D3 and applying it effectively are the update
    pattern and the data binding involved. If you understand this at a fundamental
    level, most of D3’s other pyrotechnics slot nicely into place. Focus on the `data`,
    `enter`, `exit`, and `remove` methods and make sure you really understand what’s
    going on. It’s the only way to advance from much of the cut-and-paste style of
    D3 programming, which is initially productive (there being so many cool examples
    out there), but will eventually frustrate. Use your browser’s developer console
    (currently Chrome and Chromium have the best tools here) to inspect DOM elements,
    to see what data is bound to them via the `__data__` variable. If it doesn’t match
    your expectations, you’ll learn a lot by finding out why.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 理解和有效应用 D3 的关键要素是更新模式和涉及的数据绑定。如果你在基本水平上理解了这一点，D3 的其他大部分花哨的功能将很容易上手。专注于 `data`、`enter`、`exit`
    和 `remove` 方法，并确保你真正理解发生了什么。这是从 D3 编程的大多数“复制粘贴”风格中进步的唯一途径，虽然最初是有效的（因为有很多酷炫的例子），但最终会令人沮丧。使用浏览器的开发者工具控制台（目前
    Chrome 和 Chromium 在这方面拥有最佳工具）检查 DOM 元素，查看通过 `__data__` 变量绑定的数据。如果与你的预期不符，通过找出原因来学习会让你收获良多。
- en: You should now have a pretty good grounding in D3’s core techniques. In the
    next chapter, we’ll aim to challenge those new skills with a rather more ambitious
    chart, our Nobel Prize timeline.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该对 D3 的核心技术有了相当扎实的基础。在下一章中，我们将挑战这些新技能，制作一个更为雄心勃勃的图表，即我们的诺贝尔奖时间线。
- en: ^([1](ch17.xhtml#idm45607747286016-marker)) We’ll be dealing with axes, labels,
    and the like later in the chapter when we put D3 into top gear and start binding
    data.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch17.xhtml#idm45607747286016-marker)) 当我们将国家的诺贝尔奖获奖次数从绝对值改为人均值时，显示的大量移动，随着国家柱形图改变顺序，强调了两种指标之间的差异。
- en: ^([2](ch17.xhtml#idm45607747116736-marker)) See [D3’s GitHub page](https://oreil.ly/xiKUs)
    for a comprehensive list.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch17.xhtml#idm45607747116736-marker)) 详细列表请见[D3 的 GitHub 页面](https://oreil.ly/xiKUs)。
- en: ^([3](ch17.xhtml#idm45607747099392-marker)) See [the D3 docs](https://oreil.ly/2IXaF)
    for full details.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch17.xhtml#idm45607747099392-marker)) 完整详情请参阅[D3 文档](https://oreil.ly/2IXaF)。
- en: ^([4](ch17.xhtml#idm45607746591792-marker)) D3 will truncate whichever is bigger.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch17.xhtml#idm45607746591792-marker)) D3 将截取较大者。
- en: ^([5](ch17.xhtml#idm45607746591168-marker)) D3 has many built-in colormaps and
    sophisticated color handling with RGB, HCL, etc. We’ll see a few of these in action
    in the coming chapters.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch17.xhtml#idm45607746591168-marker)) D3 拥有许多内置的颜色地图和复杂的颜色处理，包括 RGB、HCL
    等。我们将在接下来的几章中看到其中一些实际应用。
- en: ^([6](ch17.xhtml#idm45607745078384-marker)) Axes follow a similar pattern to
    that proposed by Mike Bostock in [*Towards Reusable Charts*](https://oreil.ly/FOEoe),
    using the JavaScript objects’ [`call`](https://oreil.ly/4vVp3) method to build
    HTML on the selected DOM element(s).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch17.xhtml#idm45607745078384-marker)) 坐标轴遵循了迈克·博斯托克在[*Towards Reusable
    Charts*](https://oreil.ly/FOEoe)中提出的类似模式，利用 JavaScript 对象的 [`call`](https://oreil.ly/4vVp3)
    方法在所选 DOM 元素上构建 HTML。
- en: ^([7](ch17.xhtml#idm45607744290752-marker)) For example, when we change our
    measurement of Nobel Prize wins by country from absolute to per capita, the large
    amount of movement displayed as the country bars change their order emphasizes
    the difference between the two metrics.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch17.xhtml#idm45607744290752-marker)) 例如，当我们将诺贝尔奖的国家获奖情况从绝对值改为人均值时，国家柱形图的大量移动强调了两种度量标准之间的差异。
- en: ^([8](ch17.xhtml#idm45607744288976-marker)) In animation and computer graphics
    circles, this effect is known as *tweening* (see [this Wikipedia page](https://oreil.ly/vr9QY)).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch17.xhtml#idm45607744288976-marker)) 在动画和计算机图形领域，这种效果被称为*tweening*（参见[此
    Wikipedia 页面](https://oreil.ly/vr9QY)）。
- en: ^([9](ch17.xhtml#idm45607744282224-marker)) See Mike Bostock’s nice demonstration
    of object constancy at [his site](https://oreil.ly/QZuYK).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch17.xhtml#idm45607744282224-marker)) 请查看迈克·博斯托克在[他的网站](https://oreil.ly/QZuYK)上对对象恒定性的精彩演示。
- en: ^([10](ch17.xhtml#idm45607744053184-marker)) Transitions only apply to existing
    elements—you can’t fade in the creation of a DOM element, for example. You could,
    however, fade it in and out using the `opacity` CSS style.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch17.xhtml#idm45607744053184-marker)) 过渡效果仅适用于现有元素——例如，你不能淡入创建的 DOM 元素。但是，你可以通过使用
    `opacity` CSS 样式来实现淡入淡出效果。
