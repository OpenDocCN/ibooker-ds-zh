- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序言
- en: Programming is a force multiplier. We can write computer programs to free ourselves
    from tedious manual tasks and to accelerate research. Programming in *any* language
    will likely improve your productivity, but each language has different learning
    curves and tools that improve or impede the process of coding.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一种力量倍增器。我们可以编写计算机程序来摆脱繁琐的手动任务并加速研究。编写*任何*语言的程序都可能提高您的生产力，但每种语言都有不同的学习曲线和工具，这些工具可以改善或阻碍编程过程。
- en: 'There is an adage in business that says you have three choices:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 商界有一句格言说你有三个选择：
- en: Fast
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快速
- en: Good
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好
- en: Cheap
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 便宜
- en: Pick any two.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 选择任意两个。
- en: When it comes to programming languages, Python hits a sweet spot in that it’s
    *fast* because it’s fairly easy to learn and to write a working prototype of an
    idea—it’s pretty much always the first language I’ll use to write any program.
    I find Python to be *cheap* because my programs will usually run well enough on
    commodity hardware like my laptop or a tiny AWS instance. However, I would contend
    that it’s not necessarily easy to make *good* programs using Python because the
    language itself is fairly lax. For instance, it allows one to mix characters and
    numbers in operations that will crash the program.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到编程语言时，Python处于一个甜蜜点，因为它*快速*，因为它相当容易学习和编写一个工作原型的想法——基本上它总是我写任何程序时会使用的第一种语言。我觉得Python是*便宜*的，因为我的程序通常会在像我的笔记本电脑或小型AWS实例这样的商品硬件上运行得足够好。然而，我会争辩说，使用Python并不一定容易做出*好*的程序，因为语言本身相对宽松。例如，它允许在操作中混合字符和数字，这会导致程序崩溃。
- en: 'This book has been written for the aspiring bioinformatics programmer who wants
    to learn about Python’s best practices and tools such as the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为那些希望了解Python最佳实践和工具的初学生生物信息学程序员编写的，例如以下内容：
- en: Since Python 3.6, you can add type hints to indicate, for instance, that a variable
    should be a *type* like a number or a list, and you can use the `mypy` tool to
    ensure the types are used correctly.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自Python 3.6起，你可以添加类型提示，指示变量应该是*类型*，如数字或列表，并可以使用`mypy`工具确保正确使用这些类型。
- en: Testing frameworks like `pytest` can exercise your code with both good and bad
    data to ensure that it reacts in some predictable way.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像`pytest`这样的测试框架可以使用好数据和坏数据来测试您的代码，以确保它以某种可预测的方式做出反应。
- en: Tools like `pylint` and `flake8` can find potential errors and stylistic problems
    that would make your programs more difficult to understand.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似`pylint`和`flake8`的工具可以找出潜在错误和风格问题，这会使你的程序更难理解。
- en: The `argparse` module can document and validate the arguments to your programs.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argparse`模块可以记录和验证程序的参数。'
- en: The Python ecosystem allows you to leverage hundreds of existing modules like
    Biopython to shorten programs and make them more reliable.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python生态系统允许您利用数百个现有模块，如Biopython，以缩短程序并使其更可靠。
- en: Using these tools practices individually will improve your programs, but combining
    them all will improve your code in compounding ways. This book is not a textbook
    on bioinformatics per se. The focus is on what Python offers that makes it suitable
    for writing scientific programs that are *reproducible*. That is, I’ll show you
    how to design and test programs that will always produce the same outputs given
    the same inputs. Bioinformatics is saturated with poorly written, undocumented
    programs, and my goal is to reverse this trend, one program at a time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单独使用这些工具实践，可以提高你的程序，但将它们全部结合起来会以复利的方式提升你的代码质量。这本书并非生物信息学教科书。重点在于Python提供了什么，使其适合编写*可复现*的科学程序。也就是说，我会向你展示如何设计和测试程序，使得在相同输入情况下总是产生相同输出的结果。生物信息学中充斥着写得很糟糕、未经记录的程序，我的目标是逐步扭转这一趋势，一次一个程序。
- en: 'The criteria for program reproducibility include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 程序复现性的标准包括：
- en: Parameters
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: All program parameters can be set as runtime arguments. This means no hard-coded
    values which would require changing the source code to change the program’s behavior.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有程序参数都可以设置为运行时参数。这意味着没有硬编码的值，这需要更改源代码才能改变程序的行为。
- en: Documentation
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文档
- en: A program should respond to a `--help` argument by printing the parameters and
    usage.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 程序应该通过打印参数和用法来响应`--help`参数。
- en: Testing
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: You should be able to run a test suite that proves the code meets some specifications
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够运行一个测试套件，以证明代码符合某些规范
- en: You might expect that this would logically lead to programs that are perhaps
    correct, but alas, as Edsger Dijkstra famously said, “Program testing can be used
    to show the presence of bugs, but never to show their absence!”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能期望这会逻辑上导致也许是正确的程序，但遗憾的是，正如艾兹格·戴克斯特（Edsger Dijkstra）所说，“程序测试可以用来显示错误的存在，但永远不能用来显示其不存在！”
- en: Most bioinformaticians are either scientists who’ve learned programming or programmers
    who’ve learned biology (or people like me who had to learn both). No matter how
    you’ve come to the field of bioinformatics, I want to show you practical programming
    techniques that will help you write correct programs quickly. I’ll start with
    how to write programs that document and validate their arguments. Then I’ll show
    how to write and run tests to ensure the programs do what they purport.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数生物信息学家要么是学习编程的科学家，要么是学习生物学的程序员（或者像我这样两者都要学习的人）。无论你如何进入生物信息学领域，我都想向你展示实用的编程技术，帮助你快速编写正确的程序。我将从如何编写能够文档化和验证其参数的程序开始。然后我将展示如何编写和运行测试，以确保程序实现其所述功能。
- en: For instance, the first chapter shows you how to report the tetranucleotide
    frequency from a string of DNA. Sounds pretty simple, right? It’s a trivial idea,
    but I’ll take about 40 pages to show how to structure, document, and test this
    program. I’ll spend a lot of time on how to write and test several different versions
    of the program so that I can explore many aspects of Python data structures, syntax,
    modules, and tools.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，第一章向你展示如何从DNA字符串中报告四核苷酸频率。听起来相当简单，对吧？这是一个微不足道的想法，但我将花费大约40页来展示如何构建、文档化和测试这个程序。我将花费大量时间来展示如何编写和测试该程序的多个不同版本，以便探索Python数据结构、语法、模块和工具的许多方面。
- en: Who Should Read This?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谁应该阅读这本书？
- en: You should read this book if you care about the craft of programming, and if
    you want to learn how to write programs that produce documentation, validate their
    parameters, fail gracefully, and work reliably. Testing is a key skill both for
    understanding your code and for verifying its correctness. I’ll show you how to
    use the tests I’ve written as well as how to write tests for your programs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你关心编程的工艺，并且想学习如何编写能够生成文档、验证参数、优雅失败和可靠工作的程序，那么你应该阅读这本书。测试是理解你的代码和验证其正确性的关键技能。我将向你展示如何使用我编写的测试，以及如何为你的程序编写测试。
- en: To get the most out of this book, you should already have a solid understanding
    of Python. I will build on the skills I taught in *Tiny Python Projects* (Manning,
    2020), where I show how to use Python data structures like strings, lists, tuples,
    dictionaries, sets, and named tuples. You need not be an expert in Python, but
    I definitely will push you to understand some advanced concepts I introduce in
    that book, such as types, regular expressions, and ideas about higher-order functions,
    along with testing and how to use tools like `pylint`, `flake8`, `yapf`, and `pytest`
    to check style, syntax, and correctness. One notable difference is that I will
    consistently use type annotations for all code in this book and will use the `mypy`
    tool to ensure the correct use of types.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用这本书，你应该已经对Python有扎实的理解。我将在《Tiny Python Projects》（Manning, 2020）所教授的技能基础上展开讲解，例如如何使用Python数据结构如字符串、列表、元组、字典、集合和命名元组。你不必是Python的专家，但我一定会推动你理解我在那本书中介绍的一些高级概念，比如类型、正则表达式、以及关于高阶函数的想法，还有关于测试以及如何使用`pylint`、`flake8`、`yapf`和`pytest`来检查风格、语法和正确性的工具。一个显著的不同之处在于，我将会在本书中始终使用类型注解，并使用`mypy`工具确保类型的正确使用。
- en: 'Programming Style: Why I Avoid OOP and Exceptions'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程风格：为什么我避免使用OOP和异常处理
- en: I tend to avoid object-oriented programming (OOP). If you don’t know what OOP
    means, that’s OK. Python itself is an OO language, and almost every element from
    a string to a set is technically an object with internal state and methods. You
    will encounter enough objects to get a feel for what OOP means, but the programs
    I present will mostly avoid using objects to represent ideas.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于避免面向对象编程（OOP）。如果你不知道OOP是什么，没关系。Python本身是一种面向对象的语言，几乎从字符串到集合的每个元素在技术上都是具有内部状态和方法的对象。你会遇到足够多的对象，以了解OOP的含义，但我介绍的程序大多数将避免使用对象来表示思想。
- en: That said, [Chapter 1](ch01.html#ch01) shows how to use a `class` to represent
    a complex data structure. The `class` allows me to define a data structure with
    type annotations so that I can verify that I’m using the data types correctly.
    It does help to understand a bit about OOP. For instance, classes define the attributes
    of an object, and classes can inherit attributes from parent classes, but this
    essentially describes the limits of how and why I use OOP in Python. If you don’t
    entirely follow that right now, don’t worry. You’ll understand it once you see
    it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，[第1章](ch01.html#ch01)展示了如何使用`class`来表示复杂的数据结构。`class`允许我定义带有类型注释的数据结构，以便我可以验证自己是否正确使用了数据类型。这确实有助于理解面向对象编程的一些内容。例如，类定义了对象的属性，类可以从父类继承属性，但这基本上描述了我在Python中使用面向对象编程的限制和原因。如果你现在不完全理解，不要担心，看到实例后你会理解的。
- en: Instead of object-oriented code, I demonstrate programs composed almost entirely
    of *functions*. These functions are also *pure* in that they will only act on
    the values given to them. That is, pure functions never rely on some hidden, mutable
    state like global variables, and they will always return the same values given
    the same arguments. Additionally, every function will have an associated test
    that I can run to verify it behaves predictably. It’s my opinion that this leads
    to shorter programs that are more transparent and easier to test than solutions
    written using OOP. You may disagree and are of course welcome to write your solutions
    using whatever style of programming you prefer, so long as they pass the tests.
    The Python [Functional Programming HOWTO documentation](https://docs.python.org/3/howto/functional.html)
    makes a good case for why Python is suited for functional programming (FP).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 而非面向对象的代码，我展示了几乎完全由*函数*组成的程序。这些函数也是*纯函数*，它们只会对给定的值进行操作。也就是说，纯函数从不依赖于像全局变量这样的隐藏的可变状态，并且在给定相同参数时始终返回相同的值。此外，每个函数都将有一个相关联的测试，我可以运行以验证其行为是否可预测。我认为，这样可以比使用面向对象编程编写的解决方案更简短、更透明、更易于测试。你可能持有不同意见，当然可以按照自己喜欢的编程风格编写解决方案，只要它们能通过测试即可。Python的[函数式编程指南文档](https://docs.python.org/3/howto/functional.html)很好地阐述了为什么Python适合函数式编程（FP）。
- en: Finally, the programs in this book also avoid the use of exceptions, which I
    think is appropriate for short programs you write for personal use. Managing exceptions
    so that they don’t interrupt the flow of a program adds another level of complexity
    that I feel detracts from one’s ability to understand a program. I’m generally
    unhappy with how to write functions in Python that return errors. Many people
    would raise an exception and let a `try`/`catch` block handle the mistakes. If
    I feel an exception is warranted, I will often choose to *not* catch it, instead
    letting the program crash. In this respect, I’m following an idea from Joe Armstrong,
    the creator of the Erlang language, who said, “The Erlang *way* is to write the
    happy path, and not write twisty little passages full of error correcting code.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，本书中的程序也避免了使用异常，我认为这对于个人使用的短程序是合适的。管理异常以确保它们不会中断程序的流程会增加另一层复杂性，我认为这会影响人们理解程序的能力。对于在Python中编写返回错误的函数，我通常感到不满意。许多人会引发异常，并让`try`/`catch`块处理错误。如果我觉得异常是合理的，我通常会选择*不*捕获它，而是让程序崩溃。在这方面，我遵循了Erlang语言的创造者Joe
    Armstrong的一个想法，他说：“Erlang的*方式*是编写快乐路径，而不是写满了错误修正代码的曲折小通道。”
- en: If you choose to write programs and modules for public release, you will need
    to learn much more about exceptions and error handling, but that’s beyond the
    scope of this book.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择编写公开发布的程序和模块，你将需要更多地了解异常和错误处理，但这超出了本书的范围。
- en: Structure
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构
- en: The book is divided into two main parts. The first part tackles 14 of the programming
    challenges found at the [Rosalind.info website.](http://rosalind.info/about)^([1](preface01.html#idm45963637034392))
    The second part shows more complicated programs that demonstrate other patterns
    or concepts I feel are important in bioinformatics. Every chapter of the book
    describes a coding challenge for you to write and provides a test suite for you
    to determine when you’ve written a working program.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为两个主要部分。第一部分解决了[Rosalind.info网站](http://rosalind.info/about)上的14个编程挑战。第二部分展示了更复杂的程序，演示了我认为在生物信息学中重要的其他模式或概念。书中的每一章都描述了一个编程挑战，供你编写，并提供了一个测试套件，用于确定你是否编写了一个可工作的程序。
- en: Although the [“Zen of Python”](https://oreil.ly/20PSy) says “There should be
    one—and preferably only one—obvious way to do it,” I believe you can learn quite
    a bit by attempting many different approaches to a problem. Perl was my gateway
    into bioinformatics, and the Perl community’s spirit of “There’s More Than One
    Way To Do It” (TMTOWTDI) still resonates with me. I generally follow a theme-and-variations
    approach to each chapter, showing many solutions to explore different aspects
    of Python syntax and data structures.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管[“Python之禅”](https://oreil.ly/20PSy)说“应该有一种——最好只有一种——明显的方法来做到这一点”，但我相信通过尝试多种不同的方法来解决问题，你可以学到很多东西。Perl是我进入生物信息学的门户，Perl社区“多种方法来解决问题”（TMTOWTDI）的精神仍然深深地影响着我。我通常会按照主题与变体的方式来编写每一章，展示多种解决方案，探索Python语法和数据结构的不同方面。
- en: Test-Driven Development
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发。
- en: More than the act of testing, the act of designing tests is one of the best
    bug preventers known. The thinking that must be done to create a useful test can
    discover and eliminate bugs before they are coded—indeed, test-design thinking
    can discover and eliminate bugs at every stage in the creation of software, from
    conception to specification, to design, coding, and the rest.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更重要的不仅仅是进行测试，更重要的是设计测试，这是已知的最好的缺陷预防方法之一。为了创建一个有用的测试而进行的思考可以在代码编写之前发现并消除错误——事实上，测试设计思维可以在软件创建的每个阶段，从概念、规范、设计、编码到其余阶段，发现并消除错误。
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Boris Beizer, Software Testing Techniques (Thompson Computer Press)
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Boris Beizer，《软件测试技术》（Thompson Computer Press）。
- en: 'Underlying all my experimentation will be test suites that I’ll constantly
    run to ensure the programs continue to work correctly. Whenever I have the opportunity,
    I try to teach *test-driven development* (TDD), an idea explained in a book by
    that title written by Kent Beck (Addison-Wesley, 2002). TDD advocates writing
    tests for code *before* writing the code. The typical cycle involves the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有的实验过程中，我都会有测试套件，我会不断运行它们以确保程序继续正确运行。每当有机会，我都会尝试教授*测试驱动开发*（TDD），这个概念在肯特·贝克（Addison-Wesley,
    2002）的同名书籍中有详细解释。TDD主张在编写代码*之前*先编写测试。典型的循环包括以下步骤：
- en: Add a test.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个测试。
- en: Run all tests and see if the new test fails.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行所有的测试，看看新的测试是否失败。
- en: Write the code.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写代码。
- en: Run tests.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试。
- en: Refactor code.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码。
- en: Repeat.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复。
- en: In the book’s [GitHub repository](https://oreil.ly/yrTZZ), you’ll find the tests
    for each program you’ll write. I’ll explain how to run and write tests, and I
    hope by the end of the material you’ll believe in the common sense and basic decency
    of using TDD. I hope that thinking about tests first will start to change the
    way you understand and explore coding.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在该书的[GitHub代码库](https://oreil.ly/yrTZZ)中，您将找到每个程序的测试。我将解释如何运行和编写测试，我希望在学习结束时您能相信使用TDD的常识和基本的正直。我希望先考虑测试会开始改变您理解和探索编码的方式。
- en: Using the Command Line and Installing Python
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行和安装Python。
- en: My experience in bioinformatics has always been centered around the Unix command
    line. Much of my day-to-day work has been on some flavor of Linux server, stitching
    together existing command-line programs using shell scripts, Perl, and Python.
    While I might write and debug a program or a pipeline on my laptop, I will often
    deploy my tools to a high-performance compute (HPC) cluster where a scheduler
    will run my programs asynchronously, often in the middle of the night or over
    a weekend and without any supervision or intervention by me. Additionally, all
    my work building databases and websites and administering servers is done entirely
    from the command line, so I feel strongly that you need to master this environment
    to be successful in bioinformatics.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我在生物信息学中的经验一直集中在Unix命令行上。我日常工作的大部分时间都在某种Linux服务器上，使用Shell脚本、Perl和Python拼接现有的命令行程序。虽然我可能会在我的笔记本上编写和调试程序或流水线，但我经常会将我的工具部署到高性能计算（HPC）集群中，调度程序将异步地运行我的程序，通常在深夜或周末，并且无需我的监督或干预。此外，我所有构建数据库和网站以及管理服务器的工作都完全通过命令行进行，因此我强烈认为你需要精通这个环境才能在生物信息学中取得成功。
- en: I used a Macintosh to write and test all the material for this book, and macOS
    has the Terminal app you can use for a command line. I have also tested all the
    programs using various Linux distributions, and the GitHub repository includes
    instructions on how to use a Linux virtual machine with Docker. Additionally,
    I tested all the programs on Windows 10 using the Ubuntu distribution Windows
    Subsystem for Linux (WSL) version 1. I *highly* recommend WSL for Windows users
    to have a true Unix command line, but Windows shells like `cmd.exe`, PowerShell,
    and Git Bash can sometimes work sufficiently well for some programs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Macintosh编写和测试了本书的所有材料，macOS具有Terminal应用程序，您可以在其中使用命令行。我还使用各种Linux发行版测试了所有程序，并且GitHub存储库包含有关如何使用Linux虚拟机与Docker的说明。此外，我使用Windows
    10在Ubuntu分布的Windows子系统（WSL）版本1上测试了所有程序。我*强烈*建议Windows用户使用WSL以获得真正的Unix命令行，但Windows
    Shell（如`cmd.exe`、PowerShell和Git Bash）有时对某些程序也能够工作得足够好。
- en: I would encourage you to explore integrated development environments (IDEs)
    like VS Code, PyCharm, or Spyder to help you write, run, and test your programs.
    These tools integrate text editors, help documentation, and terminals. Although
    I wrote all the programs, tests, and even this book using the `vim` editor in
    a terminal, most people would probably prefer to use at least a more modern text
    editor like Sublime, TextMate, or Notepad++.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您探索集成开发环境（IDE），如VS Code、PyCharm或Spyder，以帮助您编写、运行和测试程序。这些工具集成了文本编辑器、帮助文档和终端。尽管我使用`vim`编辑器在终端中编写了所有程序、测试甚至本书，但大多数人可能更喜欢至少使用像Sublime、TextMate或Notepad++这样的现代文本编辑器。
- en: I wrote and tested all the examples using Python versions 3.8.6 and 3.9.1. Some
    examples use Python syntax that was not present in version 3.6, so I would recommend
    you not use that version. Python version 2.x is no longer supported and should
    not be used. I tend to get the latest version of Python 3 from [the Python download
    page](https://www.python.org/downloads), but I’ve also had success using the [Anaconda
    Python distribution](https://www.anaconda.com). You may have a package manager
    like `apt` on Ubuntu or `brew` on Mac that can install a recent version, or you
    may choose to build from source. Whatever your platform and installation method,
    I would recommend you try to use the most recent version as the language continues
    to change, mostly for the better.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Python版本3.8.6和3.9.1编写和测试了所有示例。一些示例使用了Python语法，在3.6版本中不存在，因此我建议您不要使用该版本。Python
    2.x已不再受支持，不应使用。我倾向于从[Python下载页面](https://www.python.org/downloads)获取最新版本的Python
    3，但我也成功地使用了[Anaconda Python发行版](https://www.anaconda.com)。您可能在Ubuntu上有像`apt`这样的软件包管理器，或者在Mac上有`brew`，它们可以安装最新版本，或者您可以选择从源代码构建。无论您的平台和安装方法如何，我建议您尝试使用最新版本，因为语言仍在不断变化，大多数情况下是变得更好。
- en: Note that I’ve chosen to present the programs as command-line programs and not
    as Jupyter Notebooks for several reasons. I like Notebooks for data exploration,
    but the source code for Notebooks is stored in JavaScript Object Notation (JSON)
    and not as line-oriented text. This makes it very difficult to use tools like
    `diff` to find the differences between two Notebooks. Also, Notebooks cannot be
    parameterized, meaning I cannot pass in arguments from outside the program to
    change the behavior but instead have to change the source code itself. This makes
    the programs inflexible and automated testing impossible. While I encourage you
    to explore Notebooks, especially as an interactive way to run Python, I will focus
    on how to write command-line programs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我选择将程序呈现为命令行程序而不是Jupyter Notebooks，原因有几个。我喜欢Notebooks用于数据探索，但Notebooks的源代码存储在JavaScript对象表示（JSON）中，而不是按行排列的文本。这使得使用`diff`等工具查找两个Notebooks之间的差异非常困难。此外，Notebooks无法进行参数化，这意味着我无法从程序外部传递参数以更改行为，而是必须直接更改源代码。这使得程序缺乏灵活性，无法进行自动化测试。虽然我鼓励您探索Notebooks，特别是作为运行Python的交互式方式，但我将专注于如何编写命令行程序。
- en: Getting the Code and Tests
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取代码和测试
- en: 'All the code and tests are available from the book’s GitHub repository. You
    can use the program Git (which you may need to install) to copy the code to your
    computer with the following command. This will create a new directory called *biofx_python*
    on your computer with the contents of the repository:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码和测试都可以从该书的GitHub存储库中获取。您可以使用程序Git（可能需要安装）使用以下命令将代码复制到您的计算机上。这将在您的计算机上创建一个名为*biofx_python*的新目录，其中包含存储库的内容：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you enjoy using an IDE, it may be possible to clone the repository through
    that interface, as shown in Figure P-1. Many IDEs can help you manage projects
    and write code, but they all work differently. To keep things simple, I will show
    how to use the command line to accomplish most tasks.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢使用集成开发环境（IDE），可能可以通过该界面克隆存储库，如图P-1所示。许多IDE可以帮助您管理项目并编写代码，但它们的工作方式都不同。为了保持简单，我将展示如何使用命令行来完成大多数任务。
- en: '![mpfb 0001](assets/mpfb_0001.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 0001](assets/mpfb_0001.png)'
- en: Figure P-1\. The PyCharm tool can directly clone the GitHub repository for you
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图P-1\. PyCharm工具可以直接为您克隆GitHub存储库
- en: Some tools, like PyCharm, may automatically try to create a *virtual environment*
    inside the project directory. This is a way to insulate the version of Python
    and modules from other projects on your computer. Whether or not you use virtual
    environments is a personal preference. It is not a requirement to use them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有些工具，如PyCharm，可能会自动尝试在项目目录内创建*虚拟环境*。这是一种隔离Python版本和模块的方式，使其与计算机上的其他项目隔离开来。无论您是否使用虚拟环境都是个人偏好。这不是使用它们的要求。
- en: You may prefer to make a copy of the code in your own account so that you can
    track your changes and share your solutions with others. This is called *forking*
    because you’re breaking off from my code and adding your programs to the repository.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能更喜欢在你自己的账户中复制代码，这样你就可以跟踪你的更改并与他人分享你的解决方案。这叫做*分叉*，因为你正在从我的代码中分叉出来，并将你的程序添加到存储库中。
- en: 'To fork my GitHub repository, do the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要分叉我的GitHub存储库，请执行以下操作：
- en: Create an account on GitHub.com.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub.com上创建一个账户。
- en: Go to [*https://github.com/kyclark/biofx_python*](https://github.com/kyclark/biofx_python).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[*https://github.com/kyclark/biofx_python*](https://github.com/kyclark/biofx_python)。
- en: Click the Fork button in the upper-right corner (see Figure P-2) to make a copy
    of the repository in your account.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击右上角的Fork按钮（见图P-2）将存储库复制到您的账户中。
- en: '![mpfb 0002](assets/mpfb_0002.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![mpfb 0002](assets/mpfb_0002.png)'
- en: Figure P-2\. The Fork button on my GitHub repository will make a copy of the
    code in your account
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图P-2\. 在我的GitHub存储库上的Fork按钮会在您的账户中复制代码
- en: 'Now that you have a copy of all my code in your repository, you can use Git
    to copy that code to your computer. Be sure to replace `*YOUR_GITHUB_ID*` with
    your actual GitHub ID:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在您的存储库中拥有了我所有代码的副本，您可以使用Git将该代码复制到您的计算机上。确保用您实际的GitHub ID替换`*YOUR_GITHUB_ID*`：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'I may update the repo after you make your copy. If you would like to be able
    to get those updates, you will need to configure Git to set my repository as an
    *upstream* source. To do so, after you have cloned your repository to your computer,
    go into your *biofx_python* directory:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在您复制后，我可能会更新存储库。如果您希望能够获取这些更新，您需要配置Git将我的存储库设置为*上游*源。要这样做，在您将存储库克隆到计算机上后，进入您的*biofx_python*目录：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then execute this command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后执行此命令：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Whenever you would like to update your repository from mine, you can execute
    this command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您想要从我的更新存储库中更新您的存储库时，可以执行此命令：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing Modules
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装模块
- en: 'You will need to install several Python modules and tools. I’ve included a
    *requirements.txt* file in the top level of the repository. This file lists all
    the modules needed to run the programs in the book. Some IDEs may detect this
    file and offer to install these for you, or you can use the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装几个Python模块和工具。我在存储库的顶层包含了一个*requirements.txt*文件。该文件列出了运行本书中程序所需的所有模块。一些IDE可能会检测到此文件并提供安装，或者您可以使用以下命令：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Or use the `pip3` tool:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用`pip3`工具：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Sometimes `pylint` may complain about some of the variable names in the programs,
    and `mypy` will raise some issues when you import modules that do not have type
    annotations. To silence these errors, you can create initialization files in your
    home directory that these programs will use to customize their behavior. In the
    root of the source repository, there are files called *pylintrc* and *mypy.ini*
    that you should copy to your home directory like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时`pylint`可能会抱怨程序中的一些变量名，而当您导入没有类型注释的模块时，`mypy`会引发一些问题。要消除这些错误，您可以在家目录中创建初始化文件，这些程序将使用它们来自定义其行为。在源存储库的根目录中，有名为*pylintrc*和*mypy.ini*的文件，您应该像这样将它们复制到您的家目录中：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Alternatively, you can generate a new *pylintrc* with the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用以下命令生成新的*pylintrc*：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Feel free to customize these files to suit your tastes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 随意定制这些文件以适应您的喜好。
- en: Installing the new.py Program
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装new.py程序
- en: 'I wrote a Python program called `new.py` that creates Python programs. So meta,
    I know. I wrote this for myself and then gave it to my students because I think
    it’s quite difficult to start writing a program from an empty screen. The `new.py`
    program will create a new, well-structured Python program that uses the `argparse`
    module to interpret command-line arguments. It should have been installed in the
    preceding section with the module dependencies. If not, you can use the `pip`
    module to install it, like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一个名为`new.py`的Python程序，它可以创建Python程序。很元，我知道。我最初是为自己写的，然后把它给了我的学生，因为我认为从一个空白屏幕开始写程序相当困难。`new.py`程序将创建一个新的、结构良好的Python程序，使用`argparse`模块来解释命令行参数。它应该已经在前面的部分与模块依赖项一起安装了。如果没有，你可以使用`pip`模块来安装它，就像这样：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should now be able to execute **`new.py`** and see something like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够执行**`new.py`**，看到类似这样的输出：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Each exercise will suggest that you use `new.py` to start writing your new
    programs. For instance, in [Chapter 1](ch01.html#ch01) you will create a program
    called `dna.py` in the *01_dna* directory, like so:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每个练习都会建议你使用`new.py`来开始编写你的新程序。例如，在[第1章](ch01.html#ch01)中，你将在*01_dna*目录下创建一个名为`dna.py`的程序，就像这样：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you then execute **`./dna.py --help`**, you will see that it generates help
    documentation on how to use the program. You should open the `dna.py` program
    in your editor, modify the arguments, and add your code to satisfy the requirements
    of the program and the tests.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你然后执行**`./dna.py --help`**，你会看到它生成了关于如何使用程序的帮助文档。你应该在编辑器中打开`dna.py`程序，修改参数，并添加你的代码以满足程序和测试的要求。
- en: Note that it’s never a requirement that you use `new.py`. I only offer this
    as an aid to getting started. This is how I start every one of my own programs,
    but, while I find it useful, you may prefer to go a different route. As long as
    your programs pass the test suites, you are welcome to write them however you
    please.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`new.py`并不是必须的。我只是提供这个作为一个开始的辅助工具。这是我开始我自己的每一个程序的方式，但是，虽然我觉得它有用，你可能更喜欢走另一条路。只要你的程序通过测试套件，你可以按照你喜欢的方式编写它们。
- en: Why Did I Write This Book?
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么写这本书？
- en: Richard Hamming spent decades as a mathematician and researcher at Bell Labs.
    He was known for seeking out people he didn’t know and asking them about their
    research. Then he would ask them what they thought were the biggest, most pressing
    unanswered questions in their field. If their answers for both of these weren’t
    the same, he’d ask, “So why aren’t you working on that?”
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 理查德·哈明在贝尔实验室担任数学家和研究员数十年。他以寻找他不认识的人并询问他们的研究而闻名。然后他会问他们认为在他们领域里最大、最迫切的未解决问题是什么。如果他们对这两个问题的答案不同，他会问：“那你为什么不去解决呢？”
- en: I feel that one of the most pressing problems in bioinformatics is that much
    of the software is poorly written and lacks proper documentation and testing,
    if it has any at all. I want to show you that it’s *less* difficult to use types
    and tests and linters and formatters because it will prove easier over time to
    add new features and release more and better software. You will have the confidence
    to know for certain when your program is correct, for at least some measure of
    correctness.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得生物信息学中最迫切的问题之一是许多软件编写质量低劣，缺乏适当的文档和测试，如果有的话。我想向你展示，使用类型、测试、代码检查和格式化工具并不是那么困难，因为随着时间的推移，添加新功能和发布更多更好的软件会变得更容易。你将有信心确切地知道你的程序在某种程度上是正确的。
- en: To that end, I will demonstrate best practices in software development. Though
    I’m using Python as the medium, the principles apply to any language from C to
    R to JavaScript. The most important thing you can learn from this book is the
    craft of developing, testing, documenting, releasing, and supporting software,
    so that together we can all advance scientific research computing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我将演示软件开发的最佳实践。尽管我使用Python作为媒介，但这些原则适用于从C到R再到JavaScript的任何语言。你从这本书中最重要的学到的东西是开发、测试、文档化、发布和支持软件的技艺，这样我们就可以共同推进科学研究计算。
- en: My career in bioinformatics was a product of wandering and happy accidents.
    I studied English literature and music in college, and then started playing with
    databases, HTML, and eventually learned programming on the job in the mid-1990s.
    By 2001, I’d become a decent Perl hacker, and I managed to get a job as a web
    developer for Dr. Lincoln Stein, an author of several Perl modules and books,
    at Cold Spring Harbor Laboratory (CSHL). He and my boss, Dr. Doreen Ware, patiently
    spoon-fed me enough biology to understand the programs they wanted to be written.
    I spent 13 years working on a comparative plant genomics database called Gramene.org,
    learning a decent amount of science while continuing to explore programming languages
    and computer science.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我在生物信息学领域的职业是漫游和幸福意外的产物。我在大学里学习了英国文学和音乐，然后开始使用数据库、HTML，并最终在1990年代中期在工作中学会了编程。到2001年，我已经成为一个不错的Perl黑客，并且设法在Cold
    Spring Harbor Laboratory（CSHL）成为了Dr. Lincoln Stein的网页开发人员。他和我的老板Dr. Doreen Ware耐心地给我灌输了足够的生物学知识，以理解他们想要编写的程序。我在一个名为Gramene.org的比较植物基因组学数据库上工作了13年，学到了相当多的科学知识，同时继续探索编程语言和计算机科学。
- en: Lincoln was passionate about sharing everything from data and code to education.
    He started the Programming for Biology course at CSHL, a two-week intensive crash
    course to teach Unix command-line, Perl programming, and bioinformatics skills.
    The course is still being taught, although using Python nowadays, and I’ve had
    several opportunities to act as a teaching assistant. I’ve always found it rewarding
    to help someone learn a skill they will use to further their research.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 林肯热衷于分享从数据和代码到教育的一切。他在CSHL开设了为期两周的集中课程，教授Unix命令行、Perl编程和生物信息学技能的生物编程课程。尽管现在使用Python教学，但这门课程仍在进行中，我也有几次担任助教的机会。我一直觉得帮助别人学习他们将用于推进研究的技能是有意义的。
- en: It was during my tenure at CSHL that I met Bonnie Hurwitz, who eventually left
    to pursue her PhD at the University of Arizona (UA). When she started her new
    lab at UA, I was her first hire. Bonnie and I worked together for several years,
    and teaching became one of my favorite parts of the job. As with Lincoln’s course,
    we introduced basic programming skills to scientists who wanted to branch out
    into more computational approaches.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 就是在我在CSHL的任期期间，我遇到了Bonnie Hurwitz，她最终离开去亚利桑那大学（UA）攻读博士学位。当她在UA开设新实验室时，我是她的第一个雇员。我和Bonnie一起工作了几年，教学成为了我的工作中最喜欢的部分之一。与林肯的课程一样，我们向想要涉足更多计算方法的科学家介绍了基本的编程技能。
- en: Some of the materials I wrote for these classes became the foundation for my
    first book, *Tiny Python Projects*, where I try to teach the essential elements
    of Python language syntax as well as how to use tests to ensure that programs
    are correct and reproducible—elements crucial to scientific programming. This
    book picks up from there and focuses on the elements of Python that will help
    you write programs for biology.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这些课程编写的一些材料成为了我第一本书《微型Python项目》的基础，我试图在其中教授Python语言语法的基本要素，以及如何使用测试来确保程序的正确性和可重复性——这些对科学编程至关重要。这本书从这里开始，重点介绍了将帮助您编写生物学程序的Python要素。
- en: Conventions Used in This Book
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书中使用的约定
- en: 'The following typographical conventions are used in this book:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用以下排版约定：
- en: '*Italic*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*斜体*'
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions,
    as well as codons and DNA bases.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 表示新术语、URL、电子邮件地址、文件名和文件扩展名，以及密码子和DNA碱基。
- en: '`Constant width`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`固定宽度`'
- en: Used for program listings, as well as within paragraphs to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用于程序清单，以及段落内用于引用诸如变量或函数名称、数据库、数据类型、环境变量、语句和关键字等程序元素。
- en: '**`Constant width bold`**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**`固定宽度粗体`**'
- en: Shows commands or other text that should be typed literally by the user.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 显示用户应该按字面输入的命令或其他文本。
- en: '*`Constant width italic`*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*`固定宽度斜体`*'
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 显示应该用用户提供的值或上下文确定的值替换的文本。
- en: This element signifies a tip or suggestion.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示提示或建议。
- en: This element signifies a general note.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示一般注释。
- en: This element indicates a warning or caution.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素表示警告或注意事项。
- en: Using Code Examples
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码示例
- en: Supplemental material (code examples, exercises, etc.) is available for download
    at [*https://github.com/kyclark/biofx_python*](https://github.com/kyclark/biofx_python).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 补充资料（代码示例、练习等）可在[*https://github.com/kyclark/biofx_python*](https://github.com/kyclark/biofx_python)下载。
- en: If you have a technical question or a problem using the code examples, please
    send email to [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有技术问题或使用代码示例时遇到问题，请发送电子邮件至[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)。
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您完成工作。通常情况下，如果本书提供示例代码，您可以在程序和文档中使用它。除非您复制了大量代码片段，否则无需征得我们的许可。例如，编写一个使用本书多个代码片段的程序无需许可。销售或分发O’Reilly书籍的示例代码则需要许可。引用本书并引用示例代码回答问题无需许可。将本书大量示例代码整合到您产品的文档中则需要许可。
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example: “*Mastering Python
    for Bioinformatics* by Ken Youens-Clark (O’Reilly). Copyright 2021 Charles Kenneth
    Youens-Clark, 978-1-098-10088-9.”'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们欣赏，但通常不要求归属。归属通常包括标题、作者、出版商和ISBN。例如：“*生物信息学Python大师*，作者Ken Youens-Clark（O’Reilly）。版权所有2021年Charles
    Kenneth Youens-Clark，978-1-098-10088-9。”
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为您对代码示例的使用超出了公平使用或上述许可的范围，请随时通过[*permissions@oreilly.com*](mailto:permissions@oreilly.com)与我们联系。
- en: O’Reilly Online Learning
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: O’Reilly Online Learning
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 40多年来，[*O’Reilly Media*](http://oreilly.com)提供技术和商业培训、知识和见解，帮助公司取得成功。
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们独特的专家和创新者网络通过书籍、文章和我们的在线学习平台分享他们的知识和专业知识。O’Reilly的在线学习平台为您提供按需访问的实时培训课程、深入学习路径、交互式编码环境，以及来自O’Reilly和其他200多家出版商的广泛文本和视频集合。更多信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: How to Contact Us
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何联系我们
- en: 'Please address comments and questions concerning this book to the publisher:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请将有关本书的评论和问题发送至出版社：
- en: O’Reilly Media, Inc.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O’Reilly Media, Inc.
- en: 1005 Gravenstein Highway North
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1005 Gravenstein Highway North
- en: Sebastopol, CA 95472
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加州塞巴斯托波尔95472
- en: 800-998-9938 (in the United States or Canada)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 800-998-9938（美国或加拿大）
- en: 707-829-0515 (international or local)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0515（国际或本地）
- en: 707-829-0104 (fax)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 707-829-0104（传真）
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/mastering-bioinformatics-python*](https://oreil.ly/mastering-bioinformatics-python).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有本书的网页，列出勘误、示例和任何额外信息。您可以访问[*https://oreil.ly/mastering-bioinformatics-python*](https://oreil.ly/mastering-bioinformatics-python)。
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过电子邮件[*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com)进行评论或咨询有关本书的技术问题。
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 获取关于我们书籍和课程的新闻和信息，请访问[*http://oreilly.com*](http://oreilly.com)。
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在Facebook上找到我们：[*http://facebook.com/oreilly*](http://facebook.com/oreilly)
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 关注我们的Twitter：[*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)
- en: 'Watch us on YouTube: [*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 观看我们的YouTube频道：[*http://www.youtube.com/oreillymedia*](http://www.youtube.com/oreillymedia)
- en: Acknowledgments
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I want to thank the many people who have reviewed this book, including my editor,
    Corbin Collins; the entire production team but especially my production editor,
    Caitlin Ghegan; my technical reviewers, Al Scherer, Brad Fulton, Bill Lubanovic,
    Rangarajan Janani, and Joshua Orvis; and the many other people who provided much-appreciated
    feedback, including Mark Henderson, Marc Bañuls Tornero, and Dr. Scott Cain.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我要感谢所有审阅过这本书的人，包括我的编辑Corbin Collins；整个制作团队，尤其是我的制作编辑Caitlin Ghegan；我的技术审阅者Al
    Scherer, Brad Fulton, Bill Lubanovic, Rangarajan Janani和Joshua Orvis；以及许多其他提供宝贵反馈的人，包括Mark
    Henderson, Marc Bañuls Tornero和Scott Cain博士。
- en: In my professional career, I’ve been extremely fortunate to have had many wonderful
    bosses, supervisors, and colleagues who’ve helped me grow and pushed me to be
    better. Eric Thorsen was the first person to see I had the potential to learn
    how to code, and he helped me learn various languages and databases as well as
    important lessons about sales and support. Steve Reppucci was my boss at boston.com,
    and he provided a much deeper understanding of Perl and Unix and how to be an
    honest and thoughtful team leader. Dr. Lincoln Stein at CSHL took a chance to
    hire someone who had no knowledge of biology to work in his lab, and he pushed
    me to create programs I didn’t imagine I could. Dr. Doreen Ware patiently taught
    me biology and pushed me to assume leadership roles and publish. Dr. Bonnie Hurwitz
    supported me through many years of learning about high-performance computing,
    more programming languages, mentoring, teaching, and writing. In every position,
    I also had many colleagues who taught me as much about programming as about being
    human, and I thank everyone who has helped me along the way.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我非常幸运地遇到了许多出色的老板、主管和同事，他们帮助我成长并推动我变得更好。Eric Thorsen是第一个看出我有学习编程潜力的人，他帮助我学习了各种编程语言和数据库，以及关于销售和支持的重要经验教训。Steve
    Reppucci是我在boston.com的老板，他使我更深入地理解了Perl和Unix，以及如何成为一个诚实而周到的团队领导者。在CSHL，Lincoln
    Stein博士冒险聘请一个对生物学一无所知的人到他的实验室工作，他推动我创造了我未曾想象的程序。Doreen Ware博士耐心地教导我生物学，并推动我承担领导角色和发表论文。Bonnie
    Hurwitz博士在多年的高性能计算学习中一直支持我，教我更多编程语言，指导，教学和写作。在每个职位上，还有许多同事教会了我编程的同时也教会了我如何做人，我要感谢每一个在我成长路上帮助过我的人。
- en: In my personal life, I would be nowhere without my family, who have loved and
    supported me. My parents have shown great support throughout my life, and I surely
    wouldn’t be the person I am without them. Lori Kindler and I have been married
    25 years, and I can’t imagine a life without her. Together we generated three
    offspring who have been an incredible source of delight and challenge.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的个人生活中，如果没有我的家人，我可能一事无成。他们一直爱护和支持我。我的父母一直在我生活中给予巨大支持，如果没有他们，我肯定不会成为现在的我。Lori
    Kindler和我已经结婚25年，我无法想象没有她的生活。我们一起育有三个孩子，他们是我无比欢乐和挑战的源泉。
- en: ^([1](preface01.html#idm45963637034392-marker)) Named for Rosalind Franklin,
    who should have received a Nobel Prize for her contributions to discovering the
    structure of DNA.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](preface01.html#idm45963637034392-marker)) 以罗莎琳德·弗兰克林命名，她因在发现DNA结构方面的贡献而本该获得诺贝尔奖。
