- en: 'Chapter 24\. High-Performance Pandas: eval and query'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第24章。高性能 Pandas：eval 和 query
- en: 'As we’ve already seen in previous chapters, the power of the PyData stack is
    built upon the ability of NumPy and Pandas to push basic operations into lower-level
    compiled code via an intuitive higher-level syntax: examples are vectorized/broadcasted
    operations in NumPy, and grouping-type operations in Pandas. While these abstractions
    are efficient and effective for many common use cases, they often rely on the
    creation of temporary intermediate objects, which can cause undue overhead in
    computational time and memory use.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的章节中已经看到的，PyData 栈的强大建立在 NumPy 和 Pandas 将基本操作推送到低级编译代码中的能力上，通过直观的高级语法：例如
    NumPy 中的向量化/广播操作，以及 Pandas 中的分组类型操作。虽然这些抽象对许多常见用例是高效和有效的，但它们经常依赖于临时中间对象的创建，这可能会导致计算时间和内存使用的不必要开销。
- en: 'To address this, Pandas includes some methods that allow you to directly access
    C-speed operations without costly allocation of intermediate arrays: `eval` and
    `query`, which rely on the [NumExpr package](https://oreil.ly/acvj5). In this
    chapter I will walk you through their use and give some rules of thumb about when
    you might think about using them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Pandas 包括一些方法，允许您直接访问 C 速度操作，而无需昂贵地分配中间数组：`eval` 和 `query`，这些方法依赖于
    [NumExpr 包](https://oreil.ly/acvj5)。
- en: 'Motivating query and eval: Compound Expressions'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激励查询和 eval：复合表达式
- en: 'We’ve seen previously that NumPy and Pandas support fast vectorized operations;
    for example, when adding the elements of two arrays:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到，NumPy 和 Pandas 支持快速的向量化操作；例如，当添加两个数组的元素时：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As discussed in [Chapter 6](ch06.xhtml#section-0203-computation-on-arrays-ufuncs),
    this is much faster than doing the addition via a Python loop or comprehension:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [第6章](ch06.xhtml#section-0203-computation-on-arrays-ufuncs) 中讨论的，这比通过 Python
    循环或理解式添加要快得多：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this abstraction can become less efficient when computing compound expressions.
    For example, consider the following expression:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当计算复合表达式时，这种抽象可能变得不那么高效。例如，考虑以下表达式：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Because NumPy evaluates each subexpression, this is roughly equivalent to the
    following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 NumPy 评估每个子表达式，这大致等同于以下内容：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In other words, *every intermediate step is explicitly allocated in memory*.
    If the `x` and `y` arrays are very large, this can lead to significant memory
    and computational overhead. The NumExpr library gives you the ability to compute
    this type of compound expression element by element, without the need to allocate
    full intermediate arrays. The [NumExpr documentation](https://oreil.ly/acvj5)
    has more details, but for the time being it is sufficient to say that the library
    accepts a *string* giving the NumPy-style expression you’d like to compute:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，*每个中间步骤都显式地分配在内存中*。如果 `x` 和 `y` 数组非常大，这可能导致显著的内存和计算开销。NumExpr 库使您能够逐个元素地计算这种复合表达式，而无需分配完整的中间数组。有关更多详细信息，请参阅
    [NumExpr 文档](https://oreil.ly/acvj5)，但目前足以说，该库接受一个 *字符串*，该字符串给出您想计算的 NumPy 风格表达式：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The benefit here is that NumExpr evaluates the expression in a way that avoids
    temporary arrays where possible, and thus can be much more efficient than NumPy,
    especially for long sequences of computations on large arrays. The Pandas `eval`
    and `query` tools that we will discuss here are conceptually similar, and are
    essentially Pandas-specific wrappers of NumExpr functionality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的好处在于，NumExpr 以避免可能的临时数组方式评估表达式，因此对于长数组上的长序列计算比 NumPy 要高效得多。我们将在这里讨论的 Pandas
    `eval` 和 `query` 工具在概念上类似，并且本质上是 NumExpr 功能的 Pandas 特定包装。
- en: pandas.eval for Efficient Operations
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas.eval 用于高效操作
- en: 'The `eval` function in Pandas uses string expressions to efficiently compute
    operations on `DataFrame` objects. For example, consider the following data:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 中的 `eval` 函数使用字符串表达式来高效地计算 `DataFrame` 对象上的操作。例如，考虑以下数据：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To compute the sum of all four `DataFrame`s using the typical Pandas approach,
    we can just write the sum:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用典型的 Pandas 方法计算所有四个 `DataFrame` 的总和，我们只需写出总和：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The same result can be computed via `pd.eval` by constructing the expression
    as a string:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过构造字符串表达式来使用 `pd.eval` 计算相同的结果：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `eval` version of this expression is about 50% faster (and uses much less
    memory), while giving the same result:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval` 版本的这个表达式大约快 50%（并且使用的内存要少得多），同时给出相同的结果：'
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`pd.eval` supports a wide range of operations. To demonstrate these, we’ll
    use the following integer data:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.eval`支持广泛的操作。为了展示这些操作，我们将使用以下整数数据：'
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s a summary of the operations `pd.eval` supports:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`pd.eval`支持的操作的总结：
- en: Arithmetic operators
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 算术运算符
- en: '`pd.eval` supports all arithmetic operators. For example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.eval`支持所有算术运算符。例如：'
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Comparison operators
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 比较运算符
- en: '`pd.eval` supports all comparison operators, including chained expressions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.eval`支持所有比较运算符，包括链式表达式：'
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Bitwise operators
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 位运算符
- en: '`pd.eval` supports the `&` and `|` bitwise operators:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.eval`支持`&`和`|`位运算符：'
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition, it supports the use of the literal `and` and `or` in Boolean expressions:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还支持在布尔表达式中使用字面量`and`和`or`：
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Object attributes and indices
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对象属性和索引
- en: '`pd.eval` supports access to object attributes via the `obj.attr` syntax and
    indexes via the `obj[index]` syntax:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.eval`支持通过`obj.attr`语法和`obj[index]`语法访问对象属性：'
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Other operations
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 其他操作
- en: Other operations, such as function calls, conditional statements, loops, and
    other more involved constructs are currently *not* implemented in `pd.eval`. If
    you’d like to execute these more complicated types of expressions, you can use
    the NumExpr library itself.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其他操作，例如函数调用、条件语句、循环和其他更复杂的构造，目前*不*在`pd.eval`中实现。如果你想执行这些更复杂的表达式类型，可以使用NumExpr库本身。
- en: DataFrame.eval for Column-Wise Operations
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame.eval进行按列操作
- en: 'Just as Pandas has a top-level `pd.eval` function, `DataFrame` objects have
    an `eval` method that works in similar ways. The benefit of the `eval` method
    is that columns can be referred to by name. We’ll use this labeled array as an
    example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Pandas有一个顶级的`pd.eval`函数一样，`DataFrame`对象也有一个`eval`方法，功能类似。`eval`方法的好处是可以按名称引用列。我们将用这个带标签的数组作为示例：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using `pd.eval` as in the previous section, we can compute expressions with
    the three columns like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面一节中的`pd.eval`，我们可以像这样计算三个列的表达式：
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `DataFrame.eval` method allows much more succinct evaluation of expressions
    with the columns:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.eval`方法允许更简洁地评估列的表达式：'
- en: '[PRE17]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Notice here that we treat *column names as variables* within the evaluated expression,
    and the result is what we would wish.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这里我们将*列名视为评估表达式中的变量*，结果正是我们希望的。
- en: Assignment in DataFrame.eval
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DataFrame.eval中的赋值
- en: 'In addition to the options just discussed, `DataFrame.eval` also allows assignment
    to any column. Let’s use the `DataFrame` from before, which has columns `''A''`,
    `''B''`, and `''C''`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了刚才讨论的选项之外，`DataFrame.eval`还允许对任何列进行赋值。让我们使用之前的`DataFrame`，它有列`'A'`，`'B'`和`'C'`：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can use `df.eval` to create a new column `''D''` and assign to it a value
    computed from the other columns:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`df.eval`创建一个新的列`'D'`，并将其赋值为从其他列计算得到的值：
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the same way, any existing column can be modified:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，任何现有的列都可以被修改：
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Local Variables in DataFrame.eval
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame.eval中的本地变量
- en: 'The `DataFrame.eval` method supports an additional syntax that lets it work
    with local Python variables. Consider the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame.eval`方法支持一种额外的语法，使其能够与本地Python变量一起使用。考虑以下内容：'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `@` character here marks a *variable name* rather than a *column name*,
    and lets you efficiently evaluate expressions involving the two “namespaces”:
    the namespace of columns, and the namespace of Python objects. Notice that this
    `@` character is only supported by the `DataFrame.eval` *method*, not by the `pandas.eval`
    *function*, because the `pandas.eval` function only has access to the one (Python)
    namespace.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`@`字符标记的是*变量名*而不是*列名*，并且让你能够高效地评估涉及两个“命名空间”的表达式：列的命名空间和Python对象的命名空间。请注意，这个`@`字符只支持`DataFrame.eval`*方法*，而不支持`pandas.eval`*函数*，因为`pandas.eval`函数只能访问一个（Python）命名空间。
- en: The DataFrame.query Method
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`DataFrame.query`方法'
- en: 'The `DataFrame` has another method based on evaluated strings, called `query`.
    Consider the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`还有一个基于评估字符串的方法，叫做`query`。考虑以下内容：'
- en: '[PRE22]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As with the example used in our discussion of `DataFrame.eval`, this is an
    expression involving columns of the `DataFrame`. However, it cannot be expressed
    using the `DataFrame.eval` syntax! Instead, for this type of filtering operation,
    you can use the `query` method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在讨论`DataFrame.eval`时使用的示例一样，这是一个涉及`DataFrame`列的表达式。然而，它不能使用`DataFrame.eval`语法表示！相反，对于这种类型的筛选操作，你可以使用`query`方法：
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In addition to being a more efficient computation, compared to the masking
    expression this is much easier to read and understand. Note that the `query` method
    also accepts the `@` flag to mark local variables:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与掩码表达式相比，这不仅是更有效的计算，而且更易于阅读和理解。请注意，`query`方法还接受`@`标志来标记本地变量：
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Performance: When to Use These Functions'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能：何时使用这些函数
- en: 'When considering whether to use `eval` and `query`, there are two considerations:
    *computation time* and *memory use*. Memory use is the most predictable aspect.
    As already mentioned, every compound expression involving NumPy arrays or Pandas
    `DataFrame`s will result in implicit creation of temporary arrays. For example,
    this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑是否使用`eval`和`query`时，有两个考虑因素：*计算时间*和*内存使用*。内存使用是最可预测的方面。正如前面提到的，涉及NumPy数组或Pandas
    `DataFrame`的每个复合表达式都会导致临时数组的隐式创建。例如，这个：
- en: '[PRE25]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'is roughly equivalent to this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 大致相当于这个：
- en: '[PRE26]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If the size of the temporary `DataFrame`s is significant compared to your available
    system memory (typically several gigabytes), then it’s a good idea to use an `eval`
    or `query` expression. You can check the approximate size of your array in bytes
    using this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果临时`DataFrame`的大小与您可用的系统内存（通常为几个千兆字节）相比显著，则使用`eval`或`query`表达式是个好主意。您可以使用以下命令检查数组的大约大小（以字节为单位）：
- en: '[PRE27]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: On the performance side, `eval` can be faster even when you are not maxing out
    your system memory. The issue is how your temporary objects compare to the size
    of the L1 or L2 CPU cache on your system (typically a few megabytes); if they
    are much bigger, then `eval` can avoid some potentially slow movement of values
    between the different memory caches. In practice, I find that the difference in
    computation time between the traditional methods and the `eval`/`query` method
    is usually not significant—if anything, the traditional method is faster for smaller
    arrays! The benefit of `eval`/`query` is mainly in the saved memory, and the sometimes
    cleaner syntax they offer.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能而言，即使您没有使用完系统内存，`eval`可能会更快。问题在于您的临时对象与系统的L1或L2 CPU缓存大小（通常为几兆字节）相比如何；如果它们要大得多，那么`eval`可以避免在不同内存缓存之间移动值时可能出现的某些潜在缓慢。实际上，我发现传统方法与`eval`/`query`方法之间的计算时间差异通常不显著——如果有什么的话，对于较小的数组来说，传统方法更快！`eval`/`query`的好处主要在于节省内存，以及它们有时提供的更清晰的语法。
- en: We’ve covered most of the details of `eval` and `query` here; for more information
    on these, you can refer to the Pandas documentation. In particular, different
    parsers and engines can be specified for running these queries; for details on
    this, see the discussion within the [“Enhancing Performance” section](https://oreil.ly/DHNy8)
    of the documentation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里已经涵盖了关于`eval`和`query`的大部分细节；有关更多信息，请参阅Pandas文档。特别是，可以为运行这些查询指定不同的解析器和引擎；有关详细信息，请参阅文档中的[“提升性能”部分](https://oreil.ly/DHNy8)。
- en: Further Resources
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多资源
- en: 'In this part of the book, we’ve covered many of the basics of using Pandas
    effectively for data analysis. Still, much has been omitted from our discussion.
    To learn more about Pandas, I recommend the following resources:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分中，我们已经涵盖了有效使用Pandas进行数据分析的许多基础知识。但我们的讨论还有很多内容未涉及。要了解更多关于Pandas的信息，我推荐以下资源：
- en: '[Pandas online documentation](http://pandas.pydata.org)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pandas在线文档](http://pandas.pydata.org)'
- en: This is the go-to source for complete documentation of the package. While the
    examples in the documentation tend to be based on small generated datasets, the
    description of the options is complete and generally very useful for understanding
    the use of various functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整文档的首选来源。虽然文档中的示例通常基于小型生成的数据集，但选项的描述是全面的，并且通常非常有助于理解各种函数的使用。
- en: '[*Python for Data Analysis*](https://oreil.ly/0hdsf)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Python for Data Analysis*](https://oreil.ly/0hdsf)'
- en: Written by Wes McKinney (the original creator of Pandas), this book contains
    much more detail on the Pandas package than we had room for in this chapter. In
    particular, McKinney takes a deep dive into tools for time series, which were
    his bread and butter as a financial consultant. The book also has many entertaining
    examples of applying Pandas to gain insight from real-world datasets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由Pandas的原始创建者Wes McKinney撰写，这本书包含了比我们在本章中有空间讨论的Pandas包更多的细节。特别是，McKinney深入探讨了用于时间序列的工具，这些工具是他作为金融顾问的核心内容。这本书还包含许多将Pandas应用于从实际数据集中获得洞察的有趣例子。
- en: '[*Effective Pandas*](https://oreil.ly/cn1ls)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[*Effective Pandas*](https://oreil.ly/cn1ls)'
- en: This short ebook by Pandas developer Tom Augspurger provides a succinct outline
    of using the full power of the Pandas library in an effective and idiomatic way.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas开发者Tom Augspurger的这本简短电子书，简洁地概述了如何有效和惯用地使用Pandas库的全部功能。
- en: '[Pandas on PyVideo](https://oreil.ly/mh4wI)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyVideo上的Pandas](https://oreil.ly/mh4wI)'
- en: From PyCon to SciPy to PyData, many conferences have featured tutorials by Pandas
    developers and power users. The PyCon tutorials in particular tend to be given
    by very well-vetted presenters.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从PyCon到SciPy再到PyData，许多会议都有Pandas开发者和高级用户提供的教程。特别是PyCon的教程通常由经过严格筛选的优秀演讲者提供。
- en: Using these resources, combined with the walkthrough given in these chapters,
    my hope is that you’ll be poised to use Pandas to tackle any data analysis problem
    you come across!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这些资源，再加上这些章节中的详细介绍，我希望你能够准备好使用Pandas解决任何遇到的数据分析问题！
