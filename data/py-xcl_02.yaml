- en: Chapter 1\. Why Python for Excel?
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章。为什么选择 Python 来操作 Excel？
- en: 'Usually, Excel users start to question their spreadsheet tools when they hit
    a limitation. A classic example is when Excel workbooks contain so much data and
    formulas that they become slow or in the worst case, crash. It does make sense,
    though, to question your setup before things go south: if you work on mission-critical
    workbooks where errors can result in financial or reputational damage or if you
    spend hours every day updating Excel workbooks manually, you should learn how
    to automate your processes with a programming language. Automation takes out the
    risk of human error and allows you to spend your time on more productive tasks
    than copy/pasting data into an Excel spreadsheet.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，Excel 用户在遇到限制时才开始质疑他们的电子表格工具。一个经典的例子是当 Excel 工作簿包含了大量数据和公式时变得缓慢或在最坏的情况下崩溃。然而，在事情变得糟糕之前，质疑你的设置是有意义的：如果你在关键任务的工作簿上工作，其中的错误可能会导致财务或声誉损失，或者如果你每天花数小时手动更新
    Excel 工作簿，那么你应该学会如何用编程语言自动化你的流程。自动化消除了人为错误的风险，并允许你将时间花在比复制/粘贴数据到 Excel 电子表格更有生产力的任务上。
- en: In this chapter, I will give you a few reasons why Python is an excellent choice
    in combination with Excel and what its advantages are compared to Excel’s built-in
    automation language, VBA. After introducing Excel as a programming language and
    understanding its particularities, I will point out the specific features that
    make Python so much stronger in comparison with VBA. To start with, however, let’s
    take a quick look at the origins of our two main characters!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将给出一些理由，解释为什么 Python 与 Excel 结合是一个极好的选择，以及与 Excel 内置的自动化语言 VBA 相比的优势。在介绍
    Excel 作为一种编程语言并了解其特殊性之后，我将指出使 Python 与 VBA 相比如此强大的具体特性。不过，首先让我们简单地了解一下我们的两位主角的起源！
- en: 'In terms of computer technology, Excel and Python have both been around for
    a very long time: Excel was first launched in 1985 by Microsoft—and this may come
    as a surprise to many—it was only available for Apple Macintosh. It wasn’t until
    1987 that Microsoft Windows got its first version in the form of Excel 2.0\. Microsoft
    wasn’t the first player in the spreadsheet market, though: VisiCorp came out with
    VisiCalc in 1979, followed by Lotus Software in 1983 with Lotus 1-2-3\. And Microsoft
    didn’t lead with Excel: three years earlier, they released Multiplan, a spreadsheet
    program that could be used on MS-DOS and a few other operating systems, but not
    on Windows.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 就计算机技术而言，Excel 和 Python 都已经存在了很长时间：Excel 首次于 1985 年由微软推出——这可能会让很多人感到惊讶——它只能在苹果麦金塔上使用。直到
    1987 年，微软 Windows 才推出了 Excel 2.0 的第一个版本。然而微软并不是电子表格市场上的第一家公司：VisiCorp 在 1979 年推出了
    VisiCalc，随后 Lotus Software 在 1983 年推出了 Lotus 1-2-3。而微软也不是首次推出 Excel：三年前，他们推出了
    Multiplan，一款可在 MS-DOS 和其他一些操作系统上使用的电子表格程序，但无法在 Windows 上运行。
- en: Python was born in 1991, only six years after Excel. While Excel became popular
    early on, it took Python a bit longer until it got adopted in certain areas like
    web development or system administration. In 2005, Python started to become a
    serious alternative for scientific computing when NumPy, a package for array-based
    computing and linear algebra, was first released. NumPy combined two predecessor
    packages and therefore streamlined all development efforts around scientific computing
    into a single project. Today, it forms the basis of countless scientific packages,
    including pandas, which came out in 2008 and which is largely responsible for
    the widespread adoption of Python in the world of data science and finance that
    started to happen after 2010\. Thanks to pandas, Python, alongside R, has become
    one of the most commonly used languages for data science tasks like data analysis,
    statistics, and machine learning.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 诞生于 1991 年，仅比 Excel 晚六年。虽然 Excel 很早就流行起来了，但 Python 直到后来才在某些领域得到了采用，如
    Web 开发或系统管理。2005 年，Python 开始成为科学计算的一个严肃的替代品，当时第一个数组计算和线性代数包 NumPy 首次发布。NumPy 合并了两个前身包，因此将所有关于科学计算的开发工作整合到了一个项目中。如今，它构成了无数科学包的基础，包括
    2008 年推出的 pandas，它在数据科学和金融领域的广泛采用始于 2010 年之后。多亏了 pandas，Python 与 R 一起成为了数据分析、统计和机器学习等数据科学任务中最常用的语言之一。
- en: 'The fact that Python and Excel were both invented a long time ago isn’t the
    only thing they have in common: Excel and Python are also both a programming language.
    While you are probably not surprised to hear that about Python, it may require
    an explanation for Excel, which I’ll give you next.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 和 Excel 都是很久以前发明的事实并不是它们共同的唯一之处：Excel 和 Python 还都是一种编程语言。虽然您可能对 Python
    的这一点不感到惊讶，但对于 Excel，您可能需要一些解释，我将在接下来为您解释。
- en: Excel Is a Programming Language
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 是一种编程语言。
- en: This section starts by introducing Excel as a programming language, which will
    help you to understand why spreadsheet issues turn up in the news on a regular
    basis. We’ll then have a look at a few best practices that have emerged in the
    software development community and that can save you from many typical Excel errors.
    We’ll conclude with a brief introduction to Power Query and Power Pivot, two modern
    Excel tools that cover the sort of functionality for which we will use pandas
    instead.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节首先介绍 Excel 作为一种编程语言，这将帮助您理解为什么电子表格问题经常出现在新闻中。然后，我们将看看一些在软件开发社区中出现的最佳实践，这些实践可以避免许多典型的
    Excel 错误。最后，我们将简要介绍 Power Query 和 Power Pivot，这两种现代 Excel 工具涵盖了我们将使用 pandas 替代的功能类型。
- en: 'If you use Excel for more than your grocery list, you are definitely using
    functions like `=SUM(A1:A4)` to sum up a range of cells. If you think for a moment
    about how this works, you will notice that the value of a cell usually depends
    on one or more other cells, which may again use functions that depend on one or
    more other cells, and so on. Doing such nested function calls is no different
    from how other programming languages work, only that you write the code in cells
    instead of text files. And if that didn’t convince you just yet: at the end of
    2020, Microsoft announced the introduction of lambda functions, which allow you
    to write reusable functions in Excel’s own formula language, i.e., without having
    to rely on a different language like VBA. According to Brian Jones, Excel’s head
    of product, this was the missing piece that finally makes Excel a “real” programming
    language.[1](#filepos94333) This also means that Excel users should really be
    called Excel programmers!'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不只是用 Excel 列出您的杂货清单，您肯定正在使用类似`=SUM(A1:A4)`这样的函数来对一系列单元格求和。如果您稍加思考如何工作，您会注意到一个单元格的值通常取决于一个或多个其他单元格，而这些可能又使用依赖于一个或多个其他单元格的函数，如此反复。进行这种嵌套函数调用与其他编程语言的工作方式没有什么不同，只是您在单元格中写代码而不是文本文件中。如果这还没有完全说服您：在
    2020 年底，微软宣布引入 Lambda 函数，允许您在 Excel 的自有公式语言中编写可重用的函数，即不必依赖于像 VBA 这样的其他语言。根据 Brian
    Jones，Excel 产品负责人的说法，这是最终使 Excel 成为“真正的”编程语言的缺失部分。这也意味着 Excel 用户实际上应该被称为 Excel
    程序员！
- en: 'There is a special thing, though, about Excel programmers: most of them are
    business users or domain experts without a formal education in computer science.
    They are traders, accountants, or engineers, to mention just a few examples. Their
    spreadsheet tools are designed to solve a business problem and often ignore best
    practices in software development. As a consequence, these spreadsheet tools often
    mix inputs, calculations, and outputs on the same sheets, they may require nonobvious
    steps to be performed for them to work properly, and critical changes are done
    without any safety net. In other words, the spreadsheet tools are lacking a solid
    application architecture and are often undocumented and untested. Sometimes, these
    issues can have devastating consequences: if you forget to recalculate your trading
    workbook before placing a trade, you may buy or sell the wrong number of shares,
    which can cause you to lose money. And if it isn’t just your own money you are
    trading, we can read about it in the news, as we’ll see next.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Excel 程序员有一个特殊的地方：大多数都是没有计算机科学正规教育的业务用户或领域专家。他们是交易员、会计师或工程师，仅举几个例子。他们的电子表格工具旨在解决业务问题，通常忽略软件开发中的最佳实践。因此，这些电子表格工具经常在同一张表上混合输入、计算和输出，可能需要执行非明显的步骤才能正常工作，并且关键更改是没有安全网的。换句话说，这些电子表格工具缺乏坚实的应用架构，并且通常没有文档化和未经测试。有时，这些问题可能会产生灾难性后果：如果您在下单前忘记重新计算交易工作簿，可能会买入或卖出错误数量的股票，从而导致您损失资金。如果不只是您自己的资金在交易，我们可以在新闻中看到相关报道，接下来我们将看到。
- en: Excel in the News
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 在新闻中。
- en: Excel is a regular guest in the news, and during the course of this writing,
    two new stories hit the headlines. The first one was about the HUGO Gene Nomenclature
    Committee, which renamed a few human genes so they wouldn’t be interpreted by
    Excel as dates anymore. For example, to prevent that the gene `MARCH1` would be
    turned into `1-Mar`, it was renamed into `MARCHF1`.[2](#filepos94679) In the second
    story, Excel was blamed for the delayed reporting of 16,000 COVID-19 test results
    in England. The issue was caused by the test results being written to the older
    Excel file format (.xls) that was limited to roughly 65,000 rows. This meant that
    larger datasets were simply cut off beyond that limit.[3](#filepos95171) While
    these two stories show the continued importance and dominance of Excel in today’s
    world, there is probably no other “Excel incident” that is more famous than the
    London Whale.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Excel经常出现在新闻中，而在撰写本文期间，又有两则新闻成为头条。第一则是关于HUGO基因命名委员会，他们重新命名了一些人类基因，以免被Excel误读为日期。例如，为了防止基因`MARCH1`被转换成`1-Mar`，它被改名为`MARCHF1`。[2](#filepos94679)第二则新闻是，Excel因为英格兰16000份COVID-19检测结果的延迟报告而受到指责。问题是检测结果写入的是较老的Excel文件格式（.xls），该格式限制了大约65000行数据。这意味着超出该限制的更大数据集将被简单截断。[3](#filepos95171)虽然这两则故事显示了Excel在当今世界的持续重要性和主导地位，但可能没有其他“Excel事件”比伦敦鲸更为著名。
- en: 'London Whale is the nickname of a trader whose trading mistakes forced JP Morgan
    to announce a staggering loss of $6 billion in 2012\. The source of the blowup
    was an Excel-based value-at-risk model that was substantially underestimating
    the true risk of losing money in one of their portfolios. The Report of JPMorgan
    Chase & Co. Management Task Force Regarding 2012 CIO Losses[4](#filepos95647)
    (2013) mentions that “the model operated through a series of Excel spreadsheets,
    which had to be completed manually, by a process of copying and pasting data from
    one spreadsheet to another.” On top of these operational issues, they had a logical
    error: in one calculation, they were dividing by a sum instead of an average.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 伦敦鲸是一个交易员的绰号，他的交易失误迫使摩根大通在2012年宣布惊人的60亿美元损失。灾难的根源是一个基于Excel的风险价值模型，该模型严重低估了他们其中一个投资组合失钱的真实风险。JPMorgan
    Chase & Co.管理任务组关于2012年CIO损失的报告[4](#filepos95647)（2013年）提到，“该模型通过一系列Excel电子表格运行，必须通过复制和粘贴数据从一个电子表格到另一个电子表格的过程手动完成。”除了这些操作问题，他们还有一个逻辑错误：在一个计算中，他们除以一个总和而不是一个平均值。
- en: If you want to see more of these stories, have a look at [Horror Stories](https://oreil.ly/WLO-I),
    a web page maintained by the European Spreadsheet Risks Interest Group (EuSpRIG).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多这类故事，请查看由欧洲电子表格风险兴趣小组（EuSpRIG）维护的[恐怖故事](https://oreil.ly/WLO-I)网页。
- en: To prevent your company from ending up in the news with a similar story, let’s
    have a look at a few best practices next that make your work with Excel massively
    safer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止您的公司出现类似的新闻报道，让我们接下来看看几个最佳实践，可以大大提高您使用Excel的工作安全性。
- en: Programming Best Practices
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编程最佳实践
- en: This section will introduce you to the most important programming best practices,
    including separation of concerns, the DRY principle, testing, and version control.
    As we will see, following them will be easier when you start using Python together
    with Excel.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍您需要了解的最重要的编程最佳实践，包括关注点分离、DRY原则、测试和版本控制。正如我们将看到的那样，当您开始将Python与Excel一起使用时，遵循这些原则将会更加容易。
- en: Separation of concerns
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关注点分离
- en: One of the most important design principles in programming is separation of
    concerns, sometimes also referred to as modularity. It means that a related set
    of functionality should be taken care of by an independent part of the program
    so it can be easily replaced without affecting the rest of the application. At
    the highest level, an application is often divided into the following layers:[5](#filepos96013)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编程中最重要的设计原则之一是关注点分离，有时也称为模块化。这意味着相关功能集应由程序的独立部分处理，以便可以轻松替换而不影响应用程序的其余部分。在最高层面上，一个应用程序通常分为以下几个层次：[5](#filepos96013)
- en: Presentation layer
  id: totrans-19
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 展示层
- en: Business layer
  id: totrans-20
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 业务层
- en: Data layer
  id: totrans-21
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数据层
- en: To explain these layers, consider a simple currency converter like the one shown
    in [Figure 1-1](#filepos44863). You’ll find the currency_converter.xlsx Excel
    file in the xl folder of the companion repository.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释这些层次，请考虑一个简单的货币转换器，例如在[图 1-1](#filepos44863)中显示的一个。您可以在伴侣存储库的xl文件夹中找到currency_converter.xlsx
    Excel文件。
- en: 'This is how the application works: type in the Amount and Currency into cells
    A4 and B4, respectively, and Excel will convert this into US dollars in cell D4\.
    Many spreadsheet applications follow such a design and are used by businesses
    every day. Let me break the application down into its layers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用程序的工作原理：在单元格A4和B4中键入金额和货币，Excel将把它转换为美元显示在D4单元格中。许多电子表格应用程序都遵循这样的设计，并且每天被企业使用。让我逐层分解这个应用程序：
- en: Presentation layer
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 展示层
- en: 'This is what you see and interact with, i.e., the user interface: the values
    of cells A4, B4, and D4 together with their labels build the presentation layer
    of the currency converter.'
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是您看到并与之交互的用户界面：单元格A4、B4和D4的值及其标签共同构建了货币转换器的展示层。
- en: Business layer
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 业务层
- en: 'This layer takes care of the application-specific logic: cell D4 defines how
    the amount is converted into USD. The formula `=A4 * VLOOKUP(B4, F4:G11, 2, FALSE)`
    translates to Amount times Exchange rate.'
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这一层处理应用程序特定的逻辑：D4单元格定义了如何将金额转换为美元。公式`=A4 * VLOOKUP(B4, F4:G11, 2, FALSE)`表示金额乘以汇率。
- en: Data layer
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据层
- en: 'As the name suggests, this layer takes care of accessing the data: the `VLOOKUP`
    part of cell D4 is doing this job.'
  id: totrans-29
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正如名称所示，这一层负责访问数据：D4单元格中的`VLOOKUP`部分正在执行此任务。
- en: 'The data layer accesses the data from the exchange rates table that starts
    in cell F3 and that acts as the database of this little application. If you paid
    close attention, you probably noticed that cell D4 appears in all three layers:
    this simple application mixes the presentation, business, and data layers in a
    single cell.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据层从汇率表中访问数据，该表从单元格F3开始，并充当这个小应用程序的数据库。如果您仔细观察，您可能会注意到单元格D4在所有三个层中都出现了：这个简单的应用程序在一个单元格中混合了展示、业务和数据层。
- en: '![](images/00035.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00035.jpg)'
- en: Figure 1-1\. currency_converter.xlsx
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1\. currency_converter.xlsx
- en: 'This isn’t necessarily an issue for this simple currency converter, but often,
    what starts off as a small Excel file turns soon enough into a much bigger application.
    How can this situation be improved? Most professional Excel developer resources
    advise you to use a separate sheet for each layer, in Excel’s terminology usually
    called inputs, calculations, and outputs. Often, this is combined with defining
    a certain color code for each layer, e.g., a blue background for all input cells.
    In [Chapter 11](index_split_027.html#filepos1487255), we will build a real application
    based on these layers: Excel will be the presentation layer, while the business
    and data layers are moved to Python, where it’s much easier to structure your
    code properly.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的货币转换器来说，这并不一定是问题，但通常，一个开始时是小型Excel文件很快就会变成一个更大的应用程序。如何改善这种情况？大多数专业的Excel开发资源建议您为每个层次使用单独的工作表，在Excel的术语中通常称为输入、计算和输出。通常，这与为每个层次定义特定的颜色代码相结合，例如，所有输入单元格的蓝色背景。在[第11章](index_split_027.html#filepos1487255)中，我们将基于这些层次构建一个真实的应用程序：Excel将作为展示层，而业务和数据层将移至Python中，这样可以更轻松地正确结构化您的代码。
- en: Now that you know what separation of concerns means, let’s find out what the
    DRY principle is!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道了关注点分离的含义，让我们了解一下DRY原则是什么！
- en: DRY principle
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DRY原则
- en: 'The Pragmatic Programmer by Hunt and Thomas (Pearson Education) popularized
    the DRY principle: don’t repeat yourself. No duplicated code means fewer lines
    of code and fewer errors, which makes the code easier to maintain. If your business
    logic sits in your cell formulas, it’s practically impossible to apply the DRY
    principle, as there is no mechanism that allows you to reuse it in another workbook.
    This, unfortunately, means that a common way to start a new Excel project is to
    copy the workbook from the previous project or from a template.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Hunt和Thomas（Pearson Education）在《实用程序员》一书中推广了DRY原则：不要重复自己。没有重复的代码意味着代码行数更少，错误也更少，使代码更易于维护。如果您的业务逻辑存在于单元格公式中，那么在另一个工作簿中重复使用它是几乎不可能的，因为没有机制可以实现这一点。不幸的是，这意味着启动新的Excel项目的常见方法是从以前的项目或模板复制工作簿。
- en: 'If you write VBA, the most common piece of reusable code is a function. A function
    gives you access to the same code block from multiple macros, for example. If
    you have multiple functions that you use all the time, you might want to share
    them between workbooks. The standard instrument to share VBA code across workbooks
    is add-ins, but VBA add-ins lack a robust way of distributing and updating them.
    While Microsoft has introduced an Excel internal add-in store to solve that issue,
    this only works with JavaScript-based add-ins, so it’s not an option for VBA coders.
    This means that it is still very common to use the copy/paste approach with VBA:
    let’s assume that you need a cubic spline function in Excel. The cubic spline
    function is a way to interpolate a curve based on a few given points in a coordinate
    system and is often used by fixed income traders to derive an interest rate curve
    for all maturities based on a few known maturity/interest rate combinations. If
    you search for “Cubic Spline Excel” on the internet, it won’t take too long until
    you have a page of VBA code that does what you want. The issue with this is that
    most commonly, these functions were written by a single person with probably good
    intentions but without formal documentation or testing. Maybe they work for the
    majority of inputs, but what about some uncommon edge cases? If you are trading
    a multimillion fixed-income portfolio, you want to have something you know you
    can trust. At least, that is what you will hear from your internal auditors when
    they find out where the code is coming from.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你写 VBA，最常见的可重用代码片段是函数。函数使你能够从多个宏中访问同一代码块，例如。如果你有多个经常使用的函数，你可能希望在工作簿之间共享它们。在工作簿之间共享
    VBA 代码的标准工具是加载项，但是 VBA 加载项缺乏分发和更新的强大方式。尽管微软推出了一个 Excel 内部加载项商店来解决这个问题，但这仅适用于基于
    JavaScript 的加载项，因此对于 VBA 程序员来说并不是一个选择。这意味着，仍然很普遍地使用复制/粘贴方法与 VBA：假设你需要在 Excel 中一个三次样条函数。三次样条函数是一种根据坐标系中几个给定点插值曲线的方式，通常被固定收益交易员用来根据少数已知到期日/利率组合推导所有到期期限的利率曲线。如果你在互联网上搜索“Cubic
    Spline Excel”，不久就会找到一个能做你想做的事情的 VBA 代码页面。问题在于，这些函数通常是由单个人编写的，可能出于良好意图，但没有正式的文档或测试。也许它们对大多数输入有效，但对一些不常见的边缘情况呢？如果你在交易数百万的固定收益投资组合，你肯定希望有一些你知道可以信赖的东西。至少，这就是当内部审计员发现代码来源时，你会听到的意见。
- en: Python makes it easy to distribute code by using a package manager, as we will
    see in the last section of this chapter. Before we get there, however, let’s continue
    with testing, one of the cornerstones of solid software development.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python 通过使用包管理器使得代码分发变得容易，我们将在本章的最后一节看到。然而，在那之前，让我们继续讨论测试，这是坚实软件开发的基石之一。
- en: Testing
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 测试
- en: 'When you tell an Excel developer to test their workbooks, they will most likely
    perform a few random checks: click a button and see if the macro still does what
    it is supposed to do or change a few inputs and check if the output looks reasonable.
    This is, however, a risky strategy: Excel makes it easy to introduce errors that
    are hard to spot. For example, you can overwrite a formula with a hardcoded value.
    Or you forget to adjust a formula in a hidden column.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你告诉一个 Excel 开发者测试他们的工作簿时，他们很可能会执行一些随机检查：点击一个按钮并查看宏是否仍然执行其预期功能，或者更改一些输入并检查输出是否合理。然而，这是一种风险较高的策略：Excel
    很容易引入难以察觉的错误。例如，你可以用硬编码值覆盖一个公式，或者忘记调整隐藏列中的一个公式。
- en: When you tell a professional software developer to test their code, they will
    write unit tests. As the name suggests, it’s a mechanism to test individual components
    of your program. For example, unit tests make sure that a single function of a
    program works properly. Most programming languages offer a way to run unit tests
    automatically. Running automated tests will increase the reliability of your codebase
    dramatically and make reasonably sure that you won’t break anything that currently
    works when you edit your code.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你告诉一个专业的软件开发者测试他们的代码时，他们会编写单元测试。顾名思义，这是测试程序单个组件的机制。例如，单元测试确保程序的单个函数正常工作。大多数编程语言提供一种自动运行单元测试的方法。运行自动化测试将极大增加代码库的可靠性，并相当确保在编辑代码时不会破坏当前正常运行的任何功能。
- en: 'If you look at the currency conversion tool in [Figure 1-1](#filepos44863),
    you could write a test that checks if the formula in cell D4 correctly returns
    USD 105 with the following inputs: 100 EUR as amount and 1.05 as the EURUSD exchange
    rate. Why does this help? Assume that you accidentally delete cell D4 with the
    conversion formula and have to rewrite it: instead of multiplying the amount with
    the exchange rate, you divide by it—after all, working with currencies can be
    confusing. When you run the above test, you will get a test failure as 100 EUR
    / 1.05 will not result in 105 USD anymore as the test expects. Like this, you
    can detect and fix the formula before you hand the spreadsheet over to your users.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看[图1-1](#filepos44863)中的货币转换工具，你可以编写一个测试来检查当输入为 100 欧元和 1.05 作为欧元兑美元汇率时，单元格
    D4 中的公式是否正确返回 USD 105。这有什么帮助呢？假设你意外删除了包含转换公式的单元格 D4，并且不得不重新编写它：与其用汇率乘以金额，你误用了除以汇率——毕竟，处理货币可能很令人困惑。当你运行上述测试时，你会得到一个测试失败，因为
    100 欧元 / 1.05 不再像测试期望的那样得到 105 美元。通过这种方式，你可以在将电子表格交给用户之前检测并修复公式。
- en: Pretty much all traditional programming languages offer one or more test frameworks
    to write unit tests without much effort—but not Excel. Fortunately, the concept
    of unit tests is simple enough and by connecting Excel with Python, you get access
    to Python’s powerful unit testing frameworks. While a more in-depth presentation
    of unit tests is beyond the scope of this book, I invite you to have a look at
    my [blog post](https://oreil.ly/crwTm), in which I walk you through the topic
    with practical examples.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有传统的编程语言都提供一个或多个测试框架来轻松编写单元测试，但 Excel 不行。幸运的是，单元测试的概念足够简单，并且通过将 Excel 与 Python
    连接，你可以使用 Python 强大的单元测试框架。虽然本书不涉及单元测试的更深入介绍，但我邀请你阅读我的[博客文章](https://oreil.ly/crwTm)，其中我通过实际例子为你详细讲解这个主题。
- en: Unit tests are often set up to run automatically when you commit your code to
    your version control system. The next section explains what version control systems
    are and why they are hard to use with Excel files.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试通常在你将代码提交到版本控制系统时自动运行。下一节将解释版本控制系统的概念及其与 Excel 文件难以配合的原因。
- en: Version control
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制
- en: 'Another characteristic of professional programmers is that they use a system
    for version control or source control. A version control system (VCS) tracks changes
    in your source code over time, allowing you to see who changed what, when, and
    why, and allows you to revert to old versions at any point in time. The most popular
    version control system nowadays is [Git](https://git-scm.com). It was originally
    created to manage the Linux source code and since then has conquered the programming
    world—even Microsoft adopted Git in 2017 to manage the Windows source code. In
    the Excel world, by contrast, the by far most popular version control system comes
    in the form of a folder where files are archived like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 专业程序员的另一个特征是他们使用版本控制或源代码控制系统。版本控制系统（VCS）会随时间跟踪源代码的变化，允许你查看谁、何时以及为何做了变更，并允许你随时恢复到旧版本。如今最流行的版本控制系统是[Git](https://git-scm.com)，最初是为管理
    Linux 源代码而创建的，此后已占领了编程世界——甚至微软也在2017年采用 Git 管理 Windows 源代码。相比之下，在 Excel 的世界中，迄今为止最流行的版本控制系统是以文件夹形式存档文件，就像这样：
- en: '`currency_converter_v1.xlsx currency_converter_v2_2020_04_21.xlsx currency_converter_final_edits_Bob.xlsx
    currency_converter_final_final.xlsx`'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`currency_converter_v1.xlsx currency_converter_v2_2020_04_21.xlsx currency_converter_final_edits_Bob.xlsx
    currency_converter_final_final.xlsx`'
- en: 'If, unlike in this sample, the Excel developer sticks to a certain convention
    in the file name, there’s nothing inherently wrong with that. But keeping a version
    history of your files locally locks you out of important aspects of source control
    in the form of easier collaboration, peer reviews, sign-off processes, and audit
    logs. And if you want to make your workbooks more secure and stable, you don’t
    want to miss out on these things. Most commonly, professional programmers use
    Git in connection with a web-based platform like GitHub, GitLab, Bitbucket, or
    Azure DevOps. These platforms allow you to work with so-called pull requests or
    merge requests. They allow developers to formally request that their changes are
    merged into the main codebase. A pull request offers the following information:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果，与此样本不同，Excel 开发者在文件名中坚持某种约定，这本身并没有什么问题。但是，在本地保留文件的版本历史会让您失去源代码控制的重要方面，例如更轻松的协作、同行审查、签署流程和审计日志。如果您想使工作簿更安全和稳定，您不想错过这些功能。通常情况下，专业程序员会将
    Git 与像 GitHub、GitLab、Bitbucket 或 Azure DevOps 这样的基于 Web 的平台结合使用。这些平台允许您使用所谓的拉取请求或合并请求。它们允许开发人员正式请求将其更改合并到主代码库中。拉取请求提供以下信息：
- en: Who is the author of the changes
  id: totrans-49
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 谁是更改的作者
- en: When were the changes made
  id: totrans-50
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更改是什么时候进行的
- en: What is the purpose of the changes as described in the commit message
  id: totrans-51
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更改的目的如何在提交消息中描述
- en: What are the details of the changes as shown by the diff view, i.e., a view
    that highlights changes in green for new code and red for deleted code
  id: totrans-52
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更改的详细信息如何通过 diff 视图显示，即高亮显示新代码的绿色和删除代码的红色
- en: This allows a coworker or a team head to review the changes and spot irregularities.
    Often, an extra pair of eyes will be able to spot a glitch or two or give otherwise
    valuable feedback to the programmer. With all these advantages, why do Excel developers
    prefer to use the local file system and their own naming convention instead of
    a professional system like Git?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许同事或团队负责人审查更改并发现异常。通常情况下，额外的一双眼睛能够发现一个或两个问题，或者向程序员提供宝贵的反馈。有了所有这些优势，为什么 Excel
    开发者更喜欢使用本地文件系统和他们自己的命名约定，而不是像 Git 这样的专业系统呢？
- en: Many Excel users simply don’t know about Git or give up early on, as Git has
    a relatively steep learning curve.
  id: totrans-54
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多 Excel 用户根本不了解 Git 或者很早就放弃了，因为 Git 学习曲线相对较陡。
- en: 'Git allows multiple users to work on local copies of the same file in parallel.
    After all of them commit their work, Git can usually merge all the changes together
    without any manual intervention. This doesn’t work for Excel files: if they are
    being changed in parallel on separate copies, Git doesn’t know how to merge these
    changes back into a single file.'
  id: totrans-55
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Git 允许多个用户并行在本地副本上工作在同一个文件上。当所有人提交他们的工作后，Git 通常可以自动合并所有更改，无需任何手动干预。但这对 Excel
    文件不适用：如果它们在分开的副本上并行更改，Git 就无法将这些更改合并回一个单一的文件中。
- en: 'Even if you manage to deal with the previous issues, Git simply doesn’t deliver
    as much value with Excel files as it does with text files: Git isn’t able to show
    changes between Excel files, preventing a proper peer review process.'
  id: totrans-56
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 即使你设法处理了之前的问题，Git 对于 Excel 文件的价值远不及对文本文件：Git 无法显示 Excel 文件之间的更改，这阻碍了适当的同行审查流程。
- en: Because of all these issues, my company has come up with [xltrail](https://xltrail.com),
    a Git-based version control system that knows how to deal with Excel files. It
    hides away the Git complexity so that business users feel comfortable using it
    and also allows you to connect to external Git systems, in case you are already
    tracking your files with GitHub, for example. xltrail tracks the different components
    of a workbook, including cell formulas, named ranges, Power Queries, and VBA code,
    allowing you to take advantage of the classic benefits of version control including
    peer reviews.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因为所有这些问题，我们公司推出了 [xltrail](https://xltrail.com)，一个基于 Git 的版本控制系统，它知道如何处理 Excel
    文件。它隐藏了 Git 的复杂性，使业务用户感觉舒适使用它，同时还允许您连接到外部 Git 系统，例如，如果您已经在 GitHub 中跟踪您的文件。xltrail
    跟踪工作簿的不同组成部分，包括单元格公式、命名区域、Power Queries 和 VBA 代码，使您能够利用版本控制的经典优势，包括同行审查。
- en: Another option to make version control easier with Excel is to move your business
    logic from Excel into Python files, something we will do in [Chapter 10](index_split_026.html#filepos1439732).
    As Python files are straightforward to track with Git, you will have the most
    important part of your spreadsheet tool under control.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使得使用 Excel 更容易进行版本控制的选项是将你的业务逻辑从 Excel 转移到 Python 文件中，这是我们将在[第10章](index_split_026.html#filepos1439732)中完成的事情。由于
    Python 文件易于使用 Git 进行跟踪，你将能够完全控制你电子表格工具的最重要部分。
- en: While this section is called Programming Best Practices, it is mainly pointing
    out why they are harder to follow with Excel than with a traditional programming
    language like Python. Before we turn our attention to Python, I would like to
    briefly introduce Power Query and Power Pivot, Microsoft’s attempt at modernizing
    Excel.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本节称为“编程最佳实践”，但主要是指出为什么在 Excel 中遵循它们比在像 Python 这样的传统编程语言中更难。在我们把注意力转向 Python
    之前，我想简要介绍一下 Power Query 和 Power Pivot，这是微软试图使 Excel 现代化的尝试。
- en: Modern Excel
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 Excel
- en: 'The modern era of Excel started with Excel 2007 when the ribbon menu and the
    new file formats (e.g., xlsx instead of xls) were introduced. However, the Excel
    community uses modern Excel to refer to the tools that were added with Excel 2010:
    most importantly Power Query and Power Pivot. They allow you to connect to external
    data sources and analyze data that is too big to fit into a spreadsheet. As their
    functionality overlaps with what we will do with pandas in [Chapter 5](index_split_015.html#filepos482650),
    I will briefly introduce them in the first part of this section. The second part
    is about Power BI, which could be described as a standalone business intelligence
    application combining the functionality of Power Query and Power Pivot with visualization
    capabilities—and it has built-in support for Python!'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 的现代时代始于 Excel 2007，当时引入了功能区菜单和新的文件格式（例如 xlsx 替代 xls）。然而，Excel 社区将现代 Excel
    定义为随 Excel 2010 添加的工具：尤其是 Power Query 和 Power Pivot。它们允许您连接到外部数据源并分析无法容纳在电子表格中的大型数据。由于它们的功能与我们将在[第5章](index_split_015.html#filepos482650)中使用
    pandas 进行的工作重叠，我将在本节的第一部分简要介绍它们。第二部分介绍 Power BI，这可以被描述为一个独立的商业智能应用程序，结合了 Power
    Query 和 Power Pivot 的功能，并具有内置的 Python 支持！
- en: Power Query and Power Pivot
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query 和 Power Pivot
- en: With Excel 2010, Microsoft introduced an add-in called Power Query. Power Query
    connects to a multitude of data sources including Excel workbooks, CSV files,
    and SQL databases. It also offers connections to platforms like Salesforce and
    can even be extended to connect with systems that aren’t covered out of the box.
    Power Query’s core functionality is dealing with datasets that are too big to
    fit into a spreadsheet. After loading the data, you may perform additional steps
    to clean and manipulate it so it arrives in a usable form in Excel. You could,
    for example, split a column into two, merge two tables, or filter and group your
    data. Since Excel 2016, Power Query is not an add-in anymore but can be accessed
    directly on the ribbon tab Data via the Get Data button. Power Query is only partially
    available on macOS—however, it is being actively developed, so it should be fully
    supported in a future release of Excel.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Excel 2010 中，微软引入了一个名为 Power Query 的插件。Power Query 能够连接多种数据源，包括 Excel 工作簿、CSV
    文件和 SQL 数据库。它还支持连接到像 Salesforce 这样的平台，甚至可以扩展到连接没有预先支持的系统。Power Query 的核心功能是处理那些无法容纳在电子表格中的大型数据集。加载数据后，您可以执行额外的步骤来清理和操作数据，使其以可用形式出现在
    Excel 中。例如，您可以将一列拆分为两列，合并两个表，或者过滤和分组数据。自 Excel 2016 起，Power Query 不再是一个插件，而是可以直接通过“数据”选项卡上的“获取数据”按钮访问。然而，Power
    Query 在 macOS 上仅部分可用——不过，它正在积极开发中，因此应该在未来的 Excel 发布中得到充分支持。
- en: 'Power Pivot goes hand in hand with Power Query: conceptually, it’s the second
    step after acquiring and cleaning your data with Power Query. Power Pivot helps
    you to analyze and present your data in an appealing way directly in Excel. Think
    of it as a traditional pivot table that, like Power Query, can deal with large
    datasets. Power Pivot allows you to define formal data models with relationships
    and hierarchies, and you can add calculated columns via the DAX formula language.
    Power Pivot was also introduced with Excel 2010 but remains an add-in and is so
    far not available on macOS.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Power Pivot 与 Power Query 配合得天衣无缝：在使用 Power Query 获取和清洗数据后，Power Pivot 是概念上的第二步。Power
    Pivot 帮助你直接在 Excel 中分析和展示数据。可以将其视为传统数据透视表，类似于 Power Query，可以处理大型数据集。Power Pivot
    允许你定义具有关系和层次结构的正式数据模型，并且可以通过 DAX 公式语言添加计算列。Power Pivot 也是在 Excel 2010 中引入的，但仍然是一个附加组件，目前尚不支持
    macOS。
- en: If you like to work with Power Query and Power Pivot and want to build dashboards
    on top of them, Power BI may be worth a look—let’s see why!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢使用 Power Query 和 Power Pivot，并希望在其上构建仪表板，那么值得一试 Power BI — 让我们看看为什么！
- en: Power BI
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Power BI
- en: Power BI is a standalone application that was released in 2015\. It is Microsoft’s
    answer to business intelligence tools like Tableau or Qlik. Power BI Desktop is
    free, so if you want to play around with it, go to the [Power BI home page](https://oreil.ly/I1kGj)
    and download it—note, however, that Power BI Desktop is only available for Windows.
    Power BI wants to make sense of large datasets by visualizing them in interactive
    dashboards. At its core, it is relying on the same Power Query and Power Pivot
    functionality as Excel. Commercial plans allow you to collaborate and share dashboards
    online, but these are separate from the desktop version. The main reason why Power
    BI is exciting in the context of this book is that it’s been supporting Python
    scripts since 2018\. Python can be used for the query part as well as the visualization
    part by making use of Python’s plotting libraries. To me, using Python in Power
    BI feels a bit clunky, but the important part here is that Microsoft has recognized
    the importance of Python with regard to data analysis. Accordingly, the hopes
    are high that one day Python will find an official way into Excel, too.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Power BI 是一个独立应用，于2015年发布。这是微软对 Tableau 或 Qlik 等商业智能工具的回应。Power BI Desktop 是免费的，如果你想尝试一下，请访问[Power
    BI 官网](https://oreil.ly/I1kGj)并下载它 — 不过需要注意的是，Power BI Desktop 仅适用于 Windows。Power
    BI 通过可视化交互式仪表板来理解大型数据集。其核心功能依赖于与 Excel 相同的 Power Query 和 Power Pivot 功能。商业版计划允许你在线协作和共享仪表板，但与桌面版是分开的。在本书的背景下，Power
    BI 之所以令人兴奋的主要原因是，自2018年起支持 Python 脚本。Python 不仅可以用于查询部分，还可以利用 Python 的绘图库进行可视化部分。对我来说，在
    Power BI 中使用 Python 有些笨拙，但重要的是微软已经认识到 Python 在数据分析中的重要性。因此，人们对 Python 有望正式进入 Excel
    持久地寄予厚望。
- en: So what’s so great about Python that it made it into Microsoft’s Power BI? The
    next section has a few answers!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Python 有何优点，使其进入微软的 Power BI？下一节将给出一些答案！
- en: Python for Excel
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Python for Excel
- en: Excel is all about storing, analyzing, and visualizing data. And since Python
    is particularly strong in the area of scientific computing, it’s a natural fit
    in combination with Excel. Python is also one of the very few languages that is
    appealing to both the professional programmer as well as the beginner user who
    writes a few lines of code every few weeks. Professional programmers, on the one
    hand, like to work with Python because it is a general-purpose programming language
    and therefore allows you to achieve pretty much anything without jumping through
    hoops. Beginners, on the other hand, like Python because it’s easier to learn
    than other languages. As a consequence, Python is used both for ad hoc data analysis
    and smaller automation tasks as well as in huge production codebases like Instagram’s
    backend.[6](#filepos96453) This also means that when your Python-powered Excel
    tool becomes really popular, it’s easy to add a web developer to the project who
    will turn your Excel-Python prototype into a fully-fledged web application. The
    unique advantage of Python is that the part with the business logic most likely
    doesn’t need to be rewritten but can be moved as-is from the Excel prototype to
    the production web environment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Excel专注于存储、分析和可视化数据。由于Python在科学计算领域特别强大，因此与Excel结合非常自然。Python也是极少数同时吸引专业程序员和每隔几周写几行代码的初学者的语言之一。专业程序员喜欢使用Python，因为它是一种通用编程语言，因此允许您几乎无需费力地实现任何功能。初学者喜欢Python，因为它比其他语言更容易学习。因此，Python既用于临时数据分析和小型自动化任务，也用于像Instagram后端这样的大型生产代码库。[6](#filepos96453)
    这也意味着，当您的基于Python的Excel工具真正受欢迎时，很容易添加一个Web开发人员，将您的Excel-Python原型转换为完整的Web应用程序。Python的独特优势在于，业务逻辑部分很可能不需要重新编写，而可以直接从Excel原型移植到生产Web环境中。
- en: In this section, I’ll introduce Python’s core concepts and compare them with
    Excel and VBA. I will touch on code readability, Python’s standard library and
    package manager, the scientific computing stack, modern language features, and
    cross-platform compatibility. Let’s dive into readability first!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将介绍Python的核心概念，并与Excel和VBA进行比较。我将涉及代码可读性、Python的标准库和包管理器、科学计算堆栈、现代语言特性以及跨平台兼容性。让我们首先深入探讨可读性！
- en: Readability and Maintainability
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性和可维护性
- en: 'If your code is readable, it means that it is easy to follow and understand—especially
    for outsiders who haven’t written the code themselves. This makes it easier to
    spot errors and maintain the code going forward. That’s why one line in The Zen
    of Python is “readability counts.” The Zen of Python is a concise summary of Python’s
    core design principles, and we will learn how to print it in the next chapter.
    Let’s have a look at the following code snippet in VBA:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码易读，那就意味着它容易跟随和理解——尤其是对于那些没有自己编写代码的外部人员来说。这使得查找错误和维护代码变得更加容易。这就是为什么《Python之禅》中有一句话是“可读性至关重要”。《Python之禅》是Python核心设计原则的简洁总结，在下一章节我们将学习如何打印它。让我们看一下以下的VBA代码片段：
- en: '`If``i``<``5``Then``Debug``.``Print``"i is smaller than 5"``ElseIf``i``<=``10``Then``Debug``.``Print``"i
    is between 5 and 10"``Else``Debug``.``Print``"i is bigger than 10"``End``If`'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`If``i``<``5``Then``Debug``.``Print``"i is smaller than 5"``ElseIf``i``<=``10``Then``Debug``.``Print``"i
    is between 5 and 10"``Else``Debug``.``Print``"i is bigger than 10"``End``If`'
- en: 'In VBA, you can reformat the snippet into the following, which is completely
    equivalent:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在VBA中，您可以将代码片段重新格式化为以下内容，这与原来的完全等价：
- en: '`If``i``<``5``Then``Debug``.``Print``"i is smaller than 5"``ElseIf``i``<=``10``Then``Debug``.``Print``"i
    is between 5 and 10"``Else``Debug``.``Print``"i is bigger than 10"``End``If`'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`If``i``<``5``Then``Debug``.``Print``"i is smaller than 5"``ElseIf``i``<=``10``Then``Debug``.``Print``"i
    is between 5 and 10"``Else``Debug``.``Print``"i is bigger than 10"``End``If`'
- en: In the first version, the visual indentation aligns with the logic of the code.
    This makes it easy to read and understand the code, which again makes it easier
    to spot errors. In the second version, a developer who is new to the code might
    not see the `ElseIf` and `Else` condition when glancing over it for the first
    time—this is obviously even more true if the code is part of a larger codebase.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个版本中，视觉缩进与代码逻辑对齐。这使得代码易于阅读和理解，从而更容易发现错误。在第二个版本中，对于第一次浏览代码的新开发人员可能看不到`ElseIf`和`Else`条件——如果代码是大型代码库的一部分，这显然更为真实。
- en: 'Python doesn’t accept code that is formatted like the second example: it forces
    you to align the visual indentation with the logic of the code, preventing readability
    issues. Python can do this because it relies on indentation to define code blocks
    as you use them in `if` statements or `for` loops. Instead of indentation, the
    majority of the other languages use curly braces, and VBA uses keywords such as
    `End If`, as we just saw in the code snippets. The reason behind using indentation
    for code blocks is that in programming, most of the time is spent on maintaining
    code rather than writing it in the first place. Having readable code helps new
    programmers (or yourself a few months after writing the code) to go back and understand
    what’s going on.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不接受类似第二个示例那样格式化的代码：它强制你将视觉缩进与代码逻辑对齐，以防止可读性问题。Python 之所以能做到这一点，是因为它依赖缩进来定义代码块，例如在
    `if` 语句或 `for` 循环中使用。与缩进不同，大多数其他语言使用花括号，而 VBA 则使用关键字如 `End If`，就像我们刚刚在代码片段中看到的那样。使用缩进来定义代码块的原因是，在编程中，大部分时间都花在维护代码上，而不是最初编写代码。编写可读的代码有助于新程序员（或者是编写代码几个月后的自己）回过头去理解代码的运作方式。
- en: 'We will learn all about Python’s indentation rules in [Chapter 3](index_split_010.html#filepos178328),
    but for now let’s move on with the standard library: the functionality that comes
    with Python out of the box.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第三章](index_split_010.html#filepos178328)详细学习 Python 的缩进规则，但现在让我们继续探讨标准库：Python
    开箱即用的功能。
- en: Standard Library and Package Manager
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 标准库和包管理器
- en: Python comes with a rich set of built-in functionality delivered by its standard
    library. The Python community likes to refer to it by saying that Python comes
    with “batteries included.” Whether you need to uncompress a ZIP file, read the
    values of a CSV file, or want to fetch data from the internet, Python’s standard
    library has you covered, and you can achieve all this in usually just a few lines
    of code. The same functionality in VBA would require you to write a considerable
    amount of code or install an add-in. And often, the solutions you find on the
    internet only work on Windows but not macOS.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python 自带丰富的功能集，由其标准库提供支持。Python 社区喜欢称其为“电池已内置”。无论您需要解压缩 ZIP 文件，读取 CSV 文件中的值，还是从互联网获取数据，Python
    的标准库都可以胜任，通常只需几行代码即可完成。在 VBA 中，相同的功能需要大量代码或安装插件。而且，您在互联网上找到的解决方案通常只适用于 Windows
    而非 macOS。
- en: While Python’s standard library covers an impressive amount of functionality,
    there are still tasks that are cumbersome to program or slow when you are only
    relying on the standard library. This is where [PyPI](https://pypi.org) comes
    in. PyPI stands for Python Package Index and is a giant repository where everybody
    (including you!) can upload open source Python packages that add additional functionality
    to Python.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 的标准库涵盖了大量功能，但仍有一些任务在仅依赖标准库时编写起来很麻烦或者速度很慢。这就是[PyPI](https://pypi.org)发挥作用的地方。PyPI
    是 Python 包索引的缩写，是一个巨大的仓库，任何人（包括您！）都可以上传开源 Python 包，为 Python 添加额外的功能。
- en: PYPI VS. PYPY
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PYPI VS. PYPY
- en: PyPI is pronounced “pie pea eye.” This is to differentiate PyPI from PyPy which
    is pronounced “pie pie” and which is a fast alternative implementation of Python.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PyPI 的发音是“派皮艾”，这是为了将 PyPI 与 PyPy 区分开来，PyPy 的发音是“派派”，它是 Python 的一个快速替代实现。
- en: For example, to make it easier to fetch data from sources on the internet, you
    could install the Requests package to get access to a set of commands that are
    powerful yet easy to use. To install it, you would use Python’s package manager
    pip, which you run on a Command Prompt or Terminal. pip is a recursive acronym
    for pip installs packages. Don’t worry if this sounds a bit abstract right now;
    I will explain how this works in detail in the next chapter. For now, it’s more
    important to understand why package managers are so important. One of the main
    reasons is that any reasonable package will not just depend on Python’s standard
    library, but again on other open source packages that are also hosted on PyPI.
    These dependencies might again depend on subdependencies and so forth. pip recursively
    checks the dependencies and subdependencies of a package and downloads and installs
    them. pip also makes it easy to update your packages so you can keep your dependencies
    up-to-date. This makes adhering to the DRY principle much easier, as you don’t
    need to reinvent or copy/paste what’s already available on PyPI. With pip and
    PyPI, you also have a solid mechanism to distribute and install these dependencies,
    something that Excel is lacking with its traditional add-ins.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了更容易地从互联网上获取数据，您可以安装 Requests 包，以便获得一组强大且易于使用的命令。要安装它，您可以使用 Python 的包管理器
    pip，在命令提示符或终端上运行。pip 是递归首字母缩略词，表示 pip 安装包。如果现在这听起来有点抽象，不要担心；我将在下一章详细解释它的工作原理。现在更重要的是理解为什么包管理器如此重要。其中一个主要原因是任何合理的包不仅依赖于
    Python 的标准库，而且再次依赖于其他同样托管在 PyPI 上的开源包。这些依赖可能再次依赖于子依赖项等等。pip 递归检查包及其依赖项和子依赖项，并下载安装它们。pip
    还可以轻松更新您的包，因此您可以保持依赖项最新。这使得遵循 DRY 原则更加容易，因为您不需要重复发明或复制/粘贴 PyPI 上已有的内容。通过 pip 和
    PyPI，您还拥有一个坚实的机制来分发和安装这些依赖项，这是 Excel 传统插件所缺乏的。
- en: OPEN SOURCE SOFTWARE (OSS)
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 开源软件（OSS）
- en: 'At this point, I’d like to say a few words about open source, as I have used
    that word a few times in this section. If software is distributed under an open
    source license, it means that its source code is freely available at no cost,
    allowing everybody to contribute new functionality, bug fixes, or documentation.
    Python itself and almost all third-party Python packages are open source and most
    commonly maintained by developers in their spare time. This is not always an ideal
    state: if your company is relying on certain packages, you have an interest in
    the continued development and maintenance of these packages by professional programmers.
    Fortunately, the scientific Python community has recognized that some packages
    are too important to leave their fate in the hands of a few volunteers who work
    in the evenings and on weekends.'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此时，我想对开源软件说几句，因为在本节中我已经多次使用了这个词。如果软件在开源许可下分发，意味着其源代码可以免费获取，允许每个人贡献新功能、修复错误或文档。Python
    本身以及几乎所有第三方 Python 包都是开源的，通常由开发者在业余时间维护。这并不总是一个理想的状态：如果您的公司依赖于某些包，您对这些包由专业程序员持续开发和维护感兴趣。幸运的是，科学计算
    Python 社区已经意识到一些包太重要了，不能把它们的命运交给那些在晚上和周末工作的几个志愿者。
- en: That’s why in 2012, [NumFOCUS](https://numfocus.org), a nonprofit organization,
    was created to sponsor various Python packages and projects in the area of scientific
    computing. The most popular Python packages sponsored by NumFOCUS are pandas,
    NumPy, SciPy, Matplotlib, and Project Jupyter, but nowadays they also support
    packages from various other languages, including R, Julia, and JavaScript. There
    are a few large corporate sponsors, but everybody can join NumFOCUS as a free
    community member—donations are tax-deductible.
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这就是为什么在 2012 年，[NumFOCUS](https://numfocus.org)，一个非营利组织，成立了，以赞助科学计算领域的各种 Python
    包和项目。NumFOCUS 赞助的最受欢迎的 Python 包包括 pandas、NumPy、SciPy、Matplotlib 和 Project Jupyter，但现在他们还支持来自各种其他语言，包括
    R、Julia 和 JavaScript 的包。有一些大型企业赞助商，但每个人都可以作为自由社区成员加入 NumFOCUS —— 捐款可以免税。
- en: With pip, you can install packages for just about anything, but for Excel users,
    some of the most interesting ones are certainly the packages for scientific computing.
    Let’s learn a bit more about scientific computing with Python in the next section!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip，您可以安装几乎任何类型的包，但对于 Excel 用户来说，最有趣的肯定是科学计算的包。让我们在下一节更多地了解使用 Python 进行科学计算！
- en: Scientific Computing
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 科学计算
- en: 'An important reason for Python’s success is the fact that it was created as
    a general-purpose programming language. The capabilities for scientific computing
    were added later on in the form of third-party packages. This has the unique advantage
    that a data scientist can use the same language for experiments and research as
    a web developer, who may eventually build a production-ready application around
    the computational core. Being able to build scientific applications out of one
    language reduces friction, implementation time, and costs. Scientific packages
    like NumPy, SciPy, and pandas give us access to a very concise way of formulating
    mathematical problems. As an example, let’s have a look at one of the more famous
    financial formulas used to calculate the portfolio variance according to Modern
    Portfolio Theory:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Python成功的一个重要原因是它作为一种通用编程语言创建。后来添加了用于科学计算的能力，以第三方包的形式。这具有独特的优势，即数据科学家可以使用同一种语言进行实验和研究，而Web开发人员则可以最终围绕计算核心构建出生产就绪的应用程序。能够使用一种语言构建科学应用程序减少了摩擦、实施时间和成本。科学包如NumPy、SciPy和pandas使我们能够以非常简洁的方式制定数学问题。例如，让我们来看看根据现代投资组合理论计算投资组合方差的一个更著名的金融公式：
- en: 'The portfolio variance is denoted by , while is the weight vector of the individual
    assets and is the portfolio’s covariance matrix. If `w` and `C` are Excel ranges,
    you can calculate the portfolio variance in VBA like so:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 投资组合方差用符号表示为，其中是各个资产的权重向量，是投资组合的协方差矩阵。如果`w`和`C`是Excel范围，则可以在VBA中如下计算投资组合方差：
- en: '`variance``=``Application``.``MMult``(``Application``.``MMult``(``Application``.``Transpose``(``w``),``C``),``w``)`'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`方差``=``Application``.``MMult``(``Application``.``MMult``(``Application``.``Transpose``(``w``),``C``),``w``)`'
- en: 'Compare this to the almost mathematical notation in Python, assuming that `w`
    and `C` are pandas DataFrames or NumPy arrays (I will formally introduce them
    in [Part II](index_split_013.html#filepos433190)):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 比较这一点与Python中的几乎数学符号表示，假设`w`和`C`是pandas的DataFrame或NumPy数组（我将在[第二部分](index_split_013.html#filepos433190)正式介绍它们）：
- en: '`variance``=``w``.``T``@``C``@``w`'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`方差``=``w``.``T``@``C``@``w`'
- en: 'But it’s not just about aesthetics and readability: NumPy and pandas use compiled
    Fortran and C code under the hood, which gives you a performance boost when working
    with big matrices compared to VBA.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是美学和可读性问题：NumPy和pandas在底层使用编译后的Fortran和C代码，这在处理大型矩阵时比VBA提供了性能提升。
- en: Missing support for scientific computing is an obvious limitation in VBA. But
    even if you look at the core language features, VBA has fallen behind, as I will
    point out in the next section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在VBA中缺少对科学计算的支持显然是一个限制。但即使您看看核心语言特性，VBA也已经落后了，我将在下一节中指出。
- en: Modern Language Features
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现代语言特性
- en: 'Since Excel 97, the VBA language hasn’t had any major changes in terms of language
    features. That, however, doesn’t mean that VBA isn’t supported anymore: Microsoft
    is shipping updates with every new release of Excel to be able to automate the
    new Excel features introduced with that release. For example, Excel 2016 added
    support to automate Power Query. A language that stopped evolving more than twenty
    years ago is missing out on modern language concepts that were introduced in all
    major programming languages over the years. As an example, error handling in VBA
    is really showing its age. If you’d like to handle an error gracefully in VBA,
    it goes something like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 自Excel 97以来，VBA语言在语言特性方面没有任何重大变化。但这并不意味着VBA不再受支持：微软在每次Excel的新版本中都会发布更新，以便自动化该版本引入的新Excel功能。例如，Excel
    2016增加了支持自动化Power Query的功能。一个停止发展二十多年的语言缺少了随着年代推移在所有主要编程语言中引入的现代语言概念。例如，在VBA中处理错误的方式真的显得过时。如果您想在VBA中优雅地处理错误，就像这样：
- en: '`Sub``PrintReciprocal``(``number``As``Variant``)``'' There will be an error
    if the number is 0 or a string``On``Error``GoTo``ErrorHandler``result``=``1``/``number``On``Error``GoTo``0``Debug``.``Print``"There
    was no error!"``Finally:``'' Runs whether or not an error occurs``If``result``=``""``Then``result``=``"N/A"``End``If``Debug``.``Print``"The
    reciprocal is: "``&``result``Exit``Sub``ErrorHandler:``'' Runs only in case of
    an error``Debug``.``Print``"There was an error: "``&``Err``.``Description``Resume``Finally``End``Sub`'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Sub``PrintReciprocal``(``number``As``Variant``)``'' 如果数字是0或字符串，将会发生错误``On``Error``GoTo``ErrorHandler``result``=``1``/``number``On``Error``GoTo``0``Debug``.``Print``"没有错误发生！"``Finally:``''
    无论是否发生错误都会运行``If``result``=``""``Then``result``=``"N/A"``End``If``Debug``.``Print``"倒数是：
    "``&``result``Exit``Sub``ErrorHandler:``'' 仅在发生错误时运行``Debug``.``Print``"发生了错误：
    "``&``Err``.``Description``Resume``Finally``End``Sub`'
- en: 'VBA error handling involves the use of labels like `Finally` and `ErrorHandler`
    in the example. You instruct the code to jump to these labels via the `GoTo` or
    `Resume` statements. Early on, labels were recognized to be responsible for what
    many programmers would call spaghetti code: a nice way of saying that the flow
    of the code is hard to follow and therefore difficult to maintain. That’s why
    pretty much all of the actively developed languages have introduced the `try/catch`
    mechanism—in Python called `try/except`—that I will introduce in [Chapter 11](index_split_027.html#filepos1487255).
    If you are a proficient VBA developer, you might also enjoy the fact that Python
    supports class inheritance, a feature of object-oriented programming that is missing
    in VBA.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: VBA错误处理涉及在示例中使用`Finally`和`ErrorHandler`这样的标签。您通过`GoTo`或`Resume`语句指示代码跳转到这些标签。早期，标签被认为是许多程序员所说的意大利面代码的原因：这是一种表达方式，意味着代码的流程难以跟踪，因此难以维护。这就是为什么几乎所有积极开发的语言都引入了`try/catch`机制——在Python中称为`try/except`——我将在[第11章](index_split_027.html#filepos1487255)中介绍它。如果您是一个熟练的VBA开发者，您可能也会喜欢Python支持类继承这一事实，这是面向对象编程中的一个特性，在VBA中缺少。
- en: 'Besides modern language features, there’s another requirement for a modern
    programming language: cross-platform compatibility. Let’s see why this is important!'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了现代语言功能之外，现代编程语言还有另一个要求：跨平台兼容性。让我们看看这为何如此重要！
- en: Cross-Platform Compatibility
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台兼容性
- en: Even if you develop your code on a local computer that runs on Windows or macOS,
    it’s very likely that you want to run your program on a server or in the cloud
    at some point. Servers allow your code to be executed on a schedule and make your
    application accessible from everywhere you want, with the computing power you
    need. In fact, I will show you how to run Python code on a server in the next
    chapter by introducing you to hosted Jupyter notebooks. The vast majority of servers
    run on Linux, as it is a stable, secure, and cost-effective operating system.
    And since Python programs run unchanged on all major operating systems, this will
    take out much of the pain when you transition from your local machine to a production
    setup.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您在运行Windows或macOS的本地计算机上开发代码，很可能最终希望在服务器或云中运行程序。服务器允许您的代码按计划执行，并使您的应用程序可以从任何您希望的地方访问，具备您需要的计算能力。事实上，在下一章中，我将向您介绍托管的Jupyter笔记本，展示如何在服务器上运行Python代码。绝大多数服务器运行Linux，因为它是一种稳定、安全且具有成本效益的操作系统。而且由于Python程序在所有主要操作系统上都能无缝运行，这将大大减少从本地计算机转移到生产环境设置时的困扰。
- en: 'In contrast, even though Excel VBA runs on Windows and macOS, it’s easy to
    introduce functionality that only runs on Windows. In the official VBA documentation
    or on forums, you will often see code like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，即使Excel VBA在Windows和macOS上运行，也很容易引入仅在Windows上运行的功能。在官方VBA文档或论坛上，您经常会看到类似以下代码：
- en: '`Set``fso``=``CreateObject``(``"Scripting.FileSystemObject"``)`'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Set``fso``=``CreateObject``(``"Scripting.FileSystemObject"``)`'
- en: Whenever you have a `CreateObject` call or are being told to go to Tools > References
    in the VBA editor to add a reference, you are almost always dealing with code
    that will only run on Windows. Another prominent area where you need to watch
    out if you want your Excel files to work across Windows and macOS are ActiveX
    controls. ActiveX controls are elements like buttons and dropdowns that you can
    place on your sheets, but they work only on Windows. Make sure to avoid them if
    you want your workbook to run on macOS too!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你使用`CreateObject`调用或被告知在VBA编辑器中转到工具 > 引用以添加引用时，你几乎总是在处理只能在Windows上运行的代码。如果你希望你的Excel文件能够跨Windows和macOS正常工作，另一个需要注意的突出领域是ActiveX控件。ActiveX控件是诸如按钮和下拉菜单之类的元素，你可以将它们放在工作表上，但它们只在Windows上运行。如果你希望你的工作簿也能在macOS上运行，请务必避免使用它们！
- en: Conclusion
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, we met Python and Excel, two very popular technologies that
    have been around for multiple decades—a long time compared to many other technologies
    that we use today. The London Whale served as an example of how much can go wrong
    (in dollar terms) when you don’t use Excel properly with mission-critical workbooks.
    This was our motivation to look into a minimal set of programming best practices:
    applying separation of concerns, following the DRY principle, and making use of
    automated testing and version control. We then had a look at Power Query and Power
    Pivot, Microsoft’s approach at dealing with data that is bigger than your spreadsheet.
    I, however, feel that they are often not the right solution, as they lock you
    into the Microsoft world and prevent you from taking advantage of the flexibility
    and power of modern cloud-based solutions.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们遇到了Python和Excel，这两种非常流行的技术已经存在了多个十年——与我们今天使用的许多其他技术相比，这是很长一段时间了。伦敦鲸鱼事件作为一个例子，展示了当你在关键任务工作簿中没有正确使用Excel时可能会出现多大的问题（以美元计）。这激发了我们寻找一组最佳编程实践的动力：应用关注点分离，遵循DRY原则，并利用自动化测试和版本控制。然后，我们研究了Power
    Query和Power Pivot，这是微软处理比你的电子表格更大的数据的方法。然而，我认为它们通常不是正确的解决方案，因为它们将你锁定在微软世界中，并阻止你利用现代基于云的解决方案的灵活性和强大功能。
- en: 'Python comes with convincing features that are missing in Excel: the standard
    library, the package manager, libraries for scientific computing, and cross-platform
    compatibility. By learning how to combine Excel with Python, you can have the
    best of both worlds and will save time through automation, commit fewer errors
    as it’s easier to follow programming best practices, and you will be able to take
    your application and scale it up outside of Excel if you ever need to.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Python具有令人信服的特性，这些特性在Excel中缺失：标准库、包管理器、科学计算库和跨平台兼容性。通过学习如何将Excel与Python结合使用，你可以兼顾两者的优势，并通过自动化节省时间，在遵循编程最佳实践方面减少错误，并且如果有必要，可以将你的应用程序扩展到Excel之外的规模。
- en: Now that you know why Python is such a powerful companion for Excel, it’s time
    to set up your development environment to be able to write your first lines of
    Python code!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道为什么Python是Excel的强大伴侣，是时候设置你的开发环境，开始编写你的第一行Python代码了！
- en: '[1  ](#filepos37214) You can read the announcement of lambda functions on the
    [Excel Blog](https://oreil.ly/4-0y2).'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[1  ](#filepos37214) 你可以在[Excel博客](https://oreil.ly/4-0y2)上阅读有关lambda函数发布的公告。'
- en: '[2  ](#filepos39008) James Vincent, “Scientists rename human genes to stop
    Microsoft Excel from misreading them as dates,” The Verge, August 6, 2020, [https://oreil.ly/0qo-n](https://oreil.ly/0qo-n).'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[2  ](#filepos39008) James Vincent，“科学家将人类基因重新命名，以防止Microsoft Excel将其误读为日期”，The
    Verge，2020年8月6日，[https://oreil.ly/0qo-n](https://oreil.ly/0qo-n)。'
- en: '[3  ](#filepos39420) Leo Kelion, “Excel: Why using Microsoft’s tool caused
    COVID-19 results to be lost,” BBC News, October 5, 2020, [https://oreil.ly/vvB6o](https://oreil.ly/vvB6o).'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[3  ](#filepos39420) Leo Kelion，“Excel：为什么使用微软工具导致COVID-19结果丢失”，BBC新闻，2020年10月5日，[https://oreil.ly/vvB6o](https://oreil.ly/vvB6o)。'
- en: '[4  ](#filepos40140) Wikipedia links to the document in one of the [footnotes](https://oreil.ly/0uUj9)
    in their article about the case.'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[4  ](#filepos40140) 维基百科在其有关该案例的文章的一个[脚注](https://oreil.ly/0uUj9)中链接到该文档。'
- en: '[5  ](#filepos42025) The terminology is taken from Microsoft Application Architecture
    Guide, 2nd Edition, which is available [online](https://oreil.ly/8V-GS).'
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[5  ](#filepos42025) 术语来自Microsoft应用程序架构指南第2版，可在[线上](https://oreil.ly/8V-GS)获取。'
- en: '[6  ](#filepos63415) You can learn more about how Instagram uses Python on
    their [engineering blog](https://oreil.ly/SSnQG).'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[6  ](#filepos63415) 你可以在他们的[工程博客](https://oreil.ly/SSnQG)上了解更多有关Instagram如何使用Python的信息。'
