- en: Appendix B. Understanding $PATH and Installing Command-Line Programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. 理解 $PATH 和安装命令行程序
- en: '`PATH` is an environment variable that defines the directories that will be
    searched for a given command. That is, if I type `foo` and there’s no built-in
    command, shell function, command alias, or program anywhere in my `PATH` that
    the shell can execute as **`foo`**, I’ll be told this command cannot be found:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '`PATH` 是一个环境变量，定义了在给定命令搜索时将要查找的目录。也就是说，如果我输入 `foo`，并且在我的 `PATH` 中既没有内置命令、shell
    函数、命令别名，也没有可以作为 **`foo`** 执行的程序，那么我将会收到找不到该命令的提示：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In Windows PowerShell, I can inspect the `PATH` with **`echo $env:Path`**, whereas
    on Unix platforms I use the command **`echo $PATH`**. Both paths are printed as
    a long string with no spaces, listing all the directory names separated by semicolons
    on Windows or by colons on Unix. If the operating system didn’t have some concept
    of a path, it would have to search *every directory* on the machine for a given
    command. This could take minutes to hours, so it makes sense to restrict the searching
    to just a few directories.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows PowerShell 中，我可以使用 **`echo $env:Path`** 检查 `PATH`，而在 Unix 平台上，我使用
    **`echo $PATH`** 命令。两个路径都作为一个长字符串打印出来，没有空格，列出所有目录名称，Windows 上以分号分隔，Unix 上以冒号分隔。如果操作系统没有路径的概念，它将不得不在机器上的
    *每个目录* 中搜索给定的命令。这可能需要几分钟到几小时，因此将搜索限制在几个目录中是有道理的。
- en: 'Following is my path on my Macintosh. Note that I have to put a dollar sign
    (`$`) in front of the name to tell my shell (`bash`) that this is a variable and
    not the literal string `PATH`. To make this more readable, I’ll use Perl to replace
    the colons with newlines. Note that this command will only work on a Unix command
    line where Perl is installed:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我在我的 Macintosh 上的路径。注意，我必须在名称前面加上一个美元符号 (`$`)，告诉我的 shell (`bash`) 这是一个变量，而不是字面字符串
    `PATH`。为了使这更易读，我将使用 Perl 将冒号替换为换行符。请注意，此命令仅在安装了 Perl 的 Unix 命令行上才能正常工作：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](assets/1.png)](#co_understanding__path_and_installing_command_line_programs_CO1-1)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_understanding__path_and_installing_command_line_programs_CO1-1)'
- en: The Perl substitute (`s//`) command replaces the first pattern (`:`) with the
    second (`\n`) globally (`g`).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Perl 替换 (`s//`) 命令将第一个模式 (`:`) 全局替换为第二个 (`\n`)。
- en: '[![2](assets/2.png)](#co_understanding__path_and_installing_command_line_programs_CO1-2)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_understanding__path_and_installing_command_line_programs_CO1-2)'
- en: This is a custom directory I usually create for installing my own programs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我通常为安装自己的程序创建的自定义目录。
- en: '[![3](assets/3.png)](#co_understanding__path_and_installing_command_line_programs_CO1-3)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_understanding__path_and_installing_command_line_programs_CO1-3)'
- en: This is where Python installed itself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 安装自身的位置。
- en: '[![4](assets/4.png)](#co_understanding__path_and_installing_command_line_programs_CO1-4)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_understanding__path_and_installing_command_line_programs_CO1-4)'
- en: This is a standard directory for user-installed software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的用户安装软件目录。
- en: '[![5](assets/5.png)](#co_understanding__path_and_installing_command_line_programs_CO1-5)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_understanding__path_and_installing_command_line_programs_CO1-5)'
- en: The rest are more standard directories for finding programs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其余的目录都是用来查找程序的更标准的目录。
- en: The directories will be searched in the order they are defined, so the order
    can be quite important. For instance, the Python path is listed before system
    paths so that when I type **`python3`** it will use the version found in my local
    Python directory *before* one that might have been preinstalled on my system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 目录将按照它们定义的顺序进行搜索，因此顺序可能非常重要。例如，Python 路径在系统路径之前列出，以便当我输入 **`python3`** 时，它会使用我本地
    Python 目录中找到的版本，而不是可能预先安装在系统上的版本。
- en: Notice that all the directory names in my `PATH` end in *bin*. This is short
    for *binaries* and comes from the fact that many programs exist in a binary form.
    For example, the source code for a C program is written in a pseudo-English language
    that is compiled into a machine-readable executable file. The contents of this
    file are binary-encoded instructions that the operating system can execute.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我 `PATH` 中的所有目录名称都以 *bin* 结尾。这是 *二进制* 的缩写，来自于许多程序以二进制形式存在的事实。例如，C 程序的源代码以一种伪英语语言编写，编译成机器可读的可执行文件。该文件的内容是二进制编码的指令，操作系统可以执行。
- en: Python programs, by contrast, are usually installed as their source code files,
    which are executed by Python at runtime. If you want to globally install one of
    your Python programs, I suggest you copy it to one of the directories that are
    already listed in your `PATH`. For instance, */usr/local/bin* is a typical directory
    for *local* installations of software by the user. It’s such a common directory
    that it’s normally present in the `PATH`. If you are working on your personal
    machine, like a laptop, where you have administrator privileges, you should be
    able to write new files into this location.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Python程序通常安装为其源代码文件，在运行时由Python执行。如果你想全局安装你的Python程序之一，我建议你将其复制到已列出在你的`PATH`中的目录之一。例如，*/usr/local/bin*是用户通过*本地*安装软件的典型目录。这是一个如此常见的目录，以至于通常出现在`PATH`中。如果你在个人设备上工作，比如笔记本电脑，在这里你拥有管理员权限，你应该能够将新文件写入此位置。
- en: 'For instance, if I wanted to be able to run the `dna.py` program from [Chapter 1](ch01.html#ch01)
    without providing the full path to the source code, I could copy it to a location
    in my `PATH`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想要能够在[第一章](ch01.html#ch01)中运行`dna.py`程序而不提供源代码的完整路径，我可以将其复制到我的`PATH`中的某个位置：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may not have sufficient permissions to do this, however. Unix systems were
    designed from the beginning to be *multitenant* operating systems, meaning that
    they support many different people using the system concurrently. It’s important
    to keep users from writing and deleting files they shouldn’t, and so the OS may
    prevent you from writing `dna.py` to a directory that you don’t own. If, for instance,
    you are working on a shared high-performance computing (HPC) system at a university,
    you certainly won’t have such privileges.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能没有足够的权限来执行此操作。Unix系统从一开始就设计成*多租户*操作系统，这意味着它们支持许多不同的人同时使用系统。重要的是防止用户写入和删除他们不应该的文件，因此操作系统可能会阻止你将`dna.py`写入你不拥有的目录。例如，如果你在大学的共享高性能计算（HPC）系统上工作，你肯定没有这样的特权。
- en: 'When you cannot install into system directories, it’s easiest to create a location
    in your `HOME` directory for such files. On my laptop, this is my `HOME` directory:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当无法安装到系统目录时，最简单的方法是在你的`HOME`目录中创建一个位置用于这些文件。在我的笔记本电脑上，这就是我的`HOME`目录：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On almost all my systems, I create a *$HOME/.local* directory for installing
    programs. Most shells interpret the tilde (`~`) as `HOME`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的几乎所有系统上，我创建了一个`$HOME/.local`目录用于安装程序。大多数shell将波浪号（`~`）解释为`HOME`：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By convention, files and directories that have names starting with a dot are
    normally hidden by the `ls` command. You can use **`ls -a`** to list *all* the
    contents of a directory. You may notice many other *dotfiles* that are used by
    various programs to persist options and program state. I like to call this *.local*
    so I won’t normally see it in my directory listing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，以点开头的文件和目录通常被`ls`命令隐藏。你可以使用**`ls -a`**列出目录的*所有*内容。你可能会注意到许多其他*点文件*，它们被各种程序用来持久化选项和程序状态。我喜欢称其为`.local`，这样在我的目录列表中通常看不到它。
- en: 'Creating a directory in your `HOME` for software installations is especially
    useful when compiling programs from source, a very common operation in bioinformatics.
    Most installations of this sort begin by using a `configure` program to gather
    information about your system, such as the location of your C compiler and such.
    This program almost always has a `--prefix` option that I’ll set to this directory:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为软件安装在`HOME`中创建一个目录在生物信息学中编译程序从源代码是特别有用的。这种安装大多数情况下开始使用`configure`程序收集关于你的系统的信息，比如你的C编译器的位置等等。这个程序几乎总是有一个`--prefix`选项，我将设置为这个目录：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The resulting installation will put the binary compiled files into *$HOME/.local/bin*.
    It might also install header files and manual pages and other supporting data
    into other directories in *$HOME/.local*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 结果安装将把二进制编译文件放入`$HOME/.local/bin`。它还可能安装头文件和手册页以及其他支持数据到`$HOME/.local`中的其他目录。
- en: 'Wherever you decide to install local programs, you’ll need to ensure that your
    `PATH` is updated to search in that directory in addition to the others. I tend
    to use the `bash` shell, and one of the dotfiles in my `HOME` is a file called
    *.bashrc* (or sometimes *.bash_profile* or even *.profile*). I can add this line
    to put my custom directory first in the `PATH`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你决定在何处安装本地程序，你都需要确保你的`PATH`已更新以在该目录中搜索，除了其他目录外。我倾向于使用`bash` shell，我`HOME`中的一个点文件是一个名为`.bashrc`（有时是`.bash_profile`或`.profile`）的文件。我可以添加这行来将我的自定义目录放在`PATH`的最前面：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You may need something slightly different if you are using a different shell.
    Recently macOS started using `zsh` (Z shell) as the default shell, or your HPC
    system might use another shell. They all have the idea of `PATH` and all allow
    you to customize this in some manner. On Windows, you can use this command to
    append the directory to your path:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用不同的shell，可能需要稍作调整。最近，macOS开始使用`zsh`（Z shell）作为默认shell，或者你的HPC系统可能使用另一种shell。它们都有`PATH`的概念，并且都允许你以某种方式进行自定义。在Windows上，你可以使用以下命令将目录追加到你的路径中：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is how I can make the directory and copy the program:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我可以创建目录并复制程序的方法：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'I should now be able to execute **`dna.py`** from any location on a Unix machine:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我应该能够在Unix机器的任何位置执行**`dna.py`**：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Windows shells like `cmd.exe` and PowerShell don’t read and execute the shebang
    like Unix shells, so you are required to include the command **`python.exe`**
    or **`python3.exe`** before the program name:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的shell如`cmd.exe`和PowerShell不会像Unix shell那样读取和执行shebang，因此在程序名之前，你需要包括命令**`python.exe`**或**`python3.exe`**：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Be sure `python.exe --version` shows that you are using version 3 and not version
    2\. You may need to install the latest version of Python. I have only shown Windows
    commands using `python.exe`, assuming this means Python 3, but you may need to
    use `python3.exe`, depending on your system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`python.exe --version`显示你正在使用的是版本3而不是版本2。你可能需要安装最新版本的Python。我仅展示了使用`python.exe`的Windows命令，假设这意味着Python
    3，但根据你的系统，你可能需要使用`python3.exe`。
