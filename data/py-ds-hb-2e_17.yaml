- en: Chapter 14\. Data Indexing and Selection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。数据索引和选择
- en: In [Part II](part02.xhtml#section-0200-introduction-to-numpy), we looked in
    detail at methods and tools to access, set, and modify values in NumPy arrays.
    These included indexing (e.g., `arr[2, 1]`), slicing (e.g., `arr[:, 1:5]`), masking
    (e.g., `arr[arr > 0]`), fancy indexing (e.g., `arr[0, [1, 5]]`), and combinations
    thereof (e.g., `arr[:, [1, 5]]`). Here we’ll look at similar means of accessing
    and modifying values in Pandas `Series` and `DataFrame` objects. If you have used
    the NumPy patterns, the corresponding patterns in Pandas will feel very familiar,
    though there are a few quirks to be aware of.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第二部分](part02.xhtml#section-0200-introduction-to-numpy)中，我们详细讨论了访问、设置和修改NumPy数组中的值的方法和工具。这些包括索引（例如`arr[2,
    1]`）、切片（例如`arr[:, 1:5]`）、掩码（例如`arr[arr > 0]`）、花式索引（例如`arr[0, [1, 5]]`）以及它们的组合（例如`arr[:,
    [1, 5]]`）。在这里，我们将看一下类似的方法来访问和修改Pandas `Series`和`DataFrame`对象中的值。如果你使用过NumPy模式，Pandas中的相应模式会感觉非常熟悉，尽管有一些需要注意的怪癖。
- en: We’ll start with the simple case of the one-dimensional `Series` object, and
    then move on to the more complicated two-dimensional `DataFrame` object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一维`Series`对象的简单情况开始，然后转向更复杂的二维`DataFrame`对象。
- en: Data Selection in Series
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Series中的数据选择
- en: As you saw in the previous chapter, a `Series` object acts in many ways like
    a one-dimensional NumPy array, and in many ways like a standard Python dictionary.
    If you keep these two overlapping analogies in mind, it will help you understand
    the patterns of data indexing and selection in these arrays.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前一章中看到的，`Series`对象在许多方面都像一个一维NumPy数组，而在许多方面都像一个标准的Python字典。如果你记住这两个重叠的类比，将有助于你理解这些数组中的数据索引和选择模式。
- en: Series as Dictionary
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Series`作为字典'
- en: 'Like a dictionary, the `Series` object provides a mapping from a collection
    of keys to a collection of values:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 像字典一样，`Series`对象提供了从一组键到一组值的映射：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can also use dictionary-like Python expressions and methods to examine the
    keys/indices and values:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用类似字典的Python表达式和方法来查看键/索引和值：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`Series` objects can also be modified with a dictionary-like syntax. Just as
    you can extend a dictionary by assigning to a new key, you can extend a `Series`
    by assigning to a new index value:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`对象也可以用类似字典的语法进行修改。就像你可以通过分配给新键来扩展字典一样，你可以通过分配给新索引值来扩展`Series`：'
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This easy mutability of the objects is a convenient feature: under the hood,
    Pandas is making decisions about memory layout and data copying that might need
    to take place, and the user generally does not need to worry about these issues.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对象的易变性是一个方便的特性：在幕后，Pandas正在做出关于内存布局和数据复制的决策，这可能需要进行，而用户通常不需要担心这些问题。
- en: Series as One-Dimensional Array
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一维数组中的Series
- en: 'A `Series` builds on this dictionary-like interface and provides array-style
    item selection via the same basic mechanisms as NumPy arrays—that is, slices,
    masking, and fancy indexing. Examples of these are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`Series`建立在这种类似字典的接口上，并通过与NumPy数组相同的基本机制提供了数组样式的项目选择——即切片、掩码和花式索引。以下是这些的示例：'
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of these, slicing may be the source of the most confusion. Notice that when
    slicing with an explicit index (e.g., `data['a':'c']`), the final index is *included*
    in the slice, while when slicing with an implicit index (e.g., `data[0:2]`), the
    final index is *excluded* from the slice.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，切片可能是最容易混淆的来源。请注意，当使用显式索引进行切片（例如`data['a':'c']`）时，最终索引被*包括*在切片中，而当使用隐式索引进行切片（例如`data[0:2]`）时，最终索引被*排除*在切片之外。
- en: 'Indexers: loc and iloc'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引器：loc和iloc
- en: 'If your `Series` has an explicit integer index, an indexing operation such
    as `data[1]` will use the explicit indices, while a slicing operation like `data[1:3]`
    will use the implicit Python-style indices:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的`Series`有一个明确的整数索引，那么像`data[1]`这样的索引操作将使用明确的索引，而像`data[1:3]`这样的切片操作将使用隐式的Python风格索引：
- en: '[PRE10]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Because of this potential confusion in the case of integer indexes, Pandas provides
    some special *indexer* attributes that explicitly expose certain indexing schemes.
    These are not functional methods, but attributes that expose a particular slicing
    interface to the data in the `Series`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于整数索引可能会导致混淆，Pandas 提供了一些特殊的*索引器*属性，明确地暴露了某些索引方案。这些不是功能性方法，而是属性，它们向`Series`中的数据公开了特定的切片接口。
- en: 'First, the `loc` attribute allows indexing and slicing that always references
    the explicit index:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`loc`属性允许始终引用显式索引的索引和切片：
- en: '[PRE13]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `iloc` attribute allows indexing and slicing that always references the
    implicit Python-style index:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`iloc`属性允许引用始终参考隐式Python样式索引的索引和切片：'
- en: '[PRE15]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: One guiding principle of Python code is that “explicit is better than implicit.”
    The explicit nature of `loc` and `iloc` makes them helpful in maintaining clean
    and readable code; especially in the case of integer indexes, using them consistently
    can prevent subtle bugs due to the mixed indexing/slicing convention.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码的一个指导原则是“明确优于隐式”。`loc`和`iloc`的显式特性使它们在保持代码清晰和可读性方面非常有帮助；特别是在整数索引的情况下，始终一致地使用它们可以防止由于混合索引/切片约定而导致的微妙错误。
- en: Data Selection in DataFrames
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框选择
- en: Recall that a `DataFrame` acts in many ways like a two-dimensional or structured
    array, and in other ways like a dictionary of `Series` structures sharing the
    same index. These analogies can be helpful to keep in mind as we explore data
    selection within this structure.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`DataFrame`在许多方面都像一个二维或结构化数组，而在其他方面则像一个共享相同索引的`Series`结构的字典。当我们探索在这种结构内进行数据选择时，这些类比可能会有所帮助。
- en: DataFrame as Dictionary
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame作为字典
- en: 'The first analogy we will consider is the `DataFrame` as a dictionary of related
    `Series` objects. Let’s return to our example of areas and populations of states:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先考虑的类比是将`DataFrame`视为一组相关`Series`对象的字典。让我们回到我们州的面积和人口的例子：
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The individual `Series` that make up the columns of the `DataFrame` can be
    accessed via dictionary-style indexing of the column name:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 组成`DataFrame`列的单个`Series`可以通过列名的字典样式索引进行访问：
- en: '[PRE18]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Equivalently, we can use attribute-style access with column names that are
    strings:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以使用列名为字符串的属性样式访问：
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Though this is a useful shorthand, keep in mind that it does not work for all
    cases! For example, if the column names are not strings, or if the column names
    conflict with methods of the `DataFrame`, this attribute-style access is not possible.
    For example, the `DataFrame` has a `pop` method, so `data.pop` will point to this
    rather than the `pop` column:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个有用的简写，但请记住，并非所有情况下都适用！例如，如果列名不是字符串，或者列名与`DataFrame`的方法冲突，这种属性样式访问就不可能。例如，`DataFrame`有一个`pop`方法，所以`data.pop`将指向这个方法而不是`pop`列：
- en: '[PRE20]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In particular, you should avoid the temptation to try column assignment via
    attributes (i.e., use `data['pop'] = z` rather than `data.pop = z`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，你应该避免尝试通过属性进行列赋值（即，使用`data['pop'] = z`而不是`data.pop = z`）。
- en: 'Like with the `Series` objects discussed earlier, this dictionary-style syntax
    can also be used to modify the object, in this case adding a new column:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 像之前讨论过的`Series`对象一样，这种字典样式的语法也可以用来修改对象，比如在这种情况下添加一个新列：
- en: '[PRE21]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This shows a preview of the straightforward syntax of element-by-element arithmetic
    between `Series` objects; we’ll dig into this further in [Chapter 15](ch15.xhtml#section-0303-operations-in-pandas).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了`Series`对象之间按元素进行算术运算的简单语法预览；我们将在[第15章](ch15.xhtml#section-0303-operations-in-pandas)进一步深入探讨这个问题。
- en: DataFrame as Two-Dimensional Array
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame作为二维数组
- en: 'As mentioned previously, we can also view the `DataFrame` as an enhanced two-dimensional
    array. We can examine the raw underlying data array using the `values` attribute:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，我们也可以将`DataFrame`视为增强的二维数组。我们可以使用`values`属性查看原始的底层数据数组：
- en: '[PRE22]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this picture in mind, many familiar array-like operations can be done
    on the `DataFrame` itself. For example, we can transpose the full `DataFrame`
    to swap rows and columns:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个画面中，许多熟悉的类似数组的操作可以在`DataFrame`本身上完成。例如，我们可以转置整个`DataFrame`来交换行和列：
- en: '[PRE23]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When it comes to indexing of a `DataFrame` object, however, it is clear that
    the dictionary-style indexing of columns precludes our ability to simply treat
    it as a NumPy array. In particular, passing a single index to an array accesses
    a row:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当涉及到`DataFrame`对象的索引时，很明显，列的字典样式索引排除了我们简单将其视为NumPy数组的能力。特别是，将单个索引传递给数组会访问一行：
- en: '[PRE24]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'and passing a single “index” to a `DataFrame` accesses a column:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 并且将一个单独的“索引”传递给`DataFrame`会访问一列：
- en: '[PRE25]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Thus, for array-style indexing, we need another convention. Here Pandas again
    uses the `loc` and `iloc` indexers mentioned earlier. Using the `iloc` indexer,
    we can index the underlying array as if it were a simple NumPy array (using the
    implicit Python-style index), but the `DataFrame` index and column labels are
    maintained in the result:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于数组样式的索引，我们需要另一种约定。在这里，Pandas 再次使用了前面提到的`loc`和`iloc`索引器。使用`iloc`索引器，我们可以像使用简单的
    NumPy 数组一样索引底层数组（使用隐式的 Python 风格索引），但结果中保持了`DataFrame`的索引和列标签：
- en: '[PRE26]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Similarly, using the `loc` indexer we can index the underlying data in an array-like
    style but using the explicit index and column names:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，使用`loc`索引器，我们可以以类似于数组的样式索引底层数据，但使用显式的索引和列名：
- en: '[PRE27]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Any of the familiar NumPy-style data access patterns can be used within these
    indexers. For example, in the `loc` indexer we can combine masking and fancy indexing
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些索引器中，可以使用任何熟悉的类似于 NumPy 的数据访问模式。例如，在`loc`索引器中，我们可以按以下方式组合遮罩和花式索引：
- en: '[PRE28]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Any of these indexing conventions may also be used to set or modify values;
    this is done in the standard way that you might be accustomed to from working
    with NumPy:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这些索引约定也可以用于设置或修改值；这是通过与您在使用 NumPy 工作时习惯的标准方式完成的：
- en: '[PRE29]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: To build up your fluency in Pandas data manipulation, I suggest spending some
    time with a simple `DataFrame` and exploring the types of indexing, slicing, masking,
    and fancy indexing that are allowed by these various indexing approaches.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要提升您在 Pandas 数据操作中的熟练程度，我建议您花一些时间使用一个简单的`DataFrame`，并探索这些不同索引方法允许的索引、切片、遮罩和花式索引类型。
- en: Additional Indexing Conventions
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的索引约定
- en: 'There are a couple of extra indexing conventions that might seem at odds with
    the preceding discussion, but nevertheless can be useful in practice. First, while
    *indexing* refers to columns, *slicing* refers to rows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些额外的索引约定，可能与前面的讨论看似不符，但在实践中仍然很有用。首先，*索引*指的是列，而*切片*指的是行：
- en: '[PRE30]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Such slices can also refer to rows by number rather than by index:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种切片也可以通过数字而不是索引来引用行。
- en: '[PRE31]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Similarly, direct masking operations are interpreted row-wise rather than column-wise:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，直接的遮罩操作是按行而不是按列进行解释。
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: These two conventions are syntactically similar to those on a NumPy array, and
    while they may not precisely fit the mold of the Pandas conventions, they are
    included due to their practical utility.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种约定在语法上与 NumPy 数组上的约定类似，虽然它们可能不完全符合 Pandas 的约定模式，但由于它们的实际实用性，它们被包含了进来。
