- en: Chapter 4\. First Steps in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。云中的第一步
- en: In the previous two chapters, we took you through the essentials of genomics
    and computing technology. Our goal was to make sure you have enough of a grounding
    in both domains regardless of whether you’re coming to this more from one side
    or the other—or perhaps even from another domain altogether; if so, welcome! And
    hang in there.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们带您了解了基因组学和计算技术的基础知识。无论您是更多地从其中一方面接触到这个领域，还是可能来自其他领域，我们的目标是确保您在两个领域都有足够的基础知识。如果是这样，欢迎！请继续保持。
- en: 'We realize that those first two chapters might have felt very passive since
    there were no hands-on exercises involved. So here’s the good news: you’re finally
    going to get to do some hands-on work. This chapter is all about getting you oriented
    and comfortable with the GCP services that we use throughout this book. First,
    we walk you through creating a GCP account and running simple commands in Google
    Cloud Shell. After that, we show you how to set up your own VM in the cloud, get
    Docker running on it, and set up the environment that you’ll use in [Chapter 5](ch05.xhtml#first_steps_with_gatk)
    to run GATK analyses. Finally, we show you how to configure the IGV to access
    data in Google Cloud Storage. After you have all that set up, you’ll be ready
    to do some actual genomics.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们意识到，前两章可能感觉非常被动，因为没有涉及实际操作的练习。所以好消息来了：你终于可以开始动手了。本章的重点是让你熟悉并适应本书中使用的GCP服务。首先，我们将带你创建一个GCP账号，并在Google
    Cloud Shell中运行简单命令。接下来，我们将向你展示如何在云中设置自己的虚拟机，运行Docker，并设置你将在[第5章](ch05.xhtml#first_steps_with_gatk)中用于运行GATK分析的环境。最后，我们将向你展示如何配置IGV以访问Google
    Cloud存储中的数据。完成这些设置后，你将准备好进行实际的基因组学工作。
- en: Setting Up Your Google Cloud Account and First Project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的Google Cloud账号和第一个项目
- en: You can sign up for an account on GCP by navigating to [*https://cloud.google.com*](https://cloud.google.com)
    and following the prompts. We are purposely light on the details here because
    the interface for account setup has been known to change. At a high level, though,
    your goals are to establish a new Google Cloud account, set up a billing account,
    accept the free trial credits (if you’re eligible), and create a new project that
    links to your billing account.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[*https://cloud.google.com*](https://cloud.google.com)并按照提示操作来注册GCP账号。我们在这里故意保持详细内容较少，因为账号设置界面可能会发生变化。但从高层次来看，您的目标是建立一个新的Google
    Cloud账号，设置一个计费账号，接受免费试用信用（如果您符合条件），并创建一个新项目，该项目与您的计费账号关联。
- en: If you don’t already have a Google identity of some kind, you can create one
    with your regular email account; you don’t need to use a Gmail account. Keep in
    mind also that if your institution uses G Suite, your work email might already
    be associated with a Google identity even if the domain name is not *gmail.com*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有任何形式的Google身份，您可以使用常规电子邮件账号创建一个，不必使用Gmail账号。请注意，如果您的机构使用G Suite，即使域名不是*gmail.com*，您的工作电子邮件也可能已与Google身份关联。
- en: After you’ve signed up, make your way to the [GCP console](https://oreil.ly/T4nVl),
    which provides a web-based graphical interface for managing cloud resources. You
    can access most of the functionality offered in the console through a pure command-line
    interface. In the course of the book, we show you how to do some things through
    the web interface and some through the command line, depending on what we believe
    is most convenient and/or typical.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册后，请前往[GCP控制台](https://oreil.ly/T4nVl)，该控制台提供了一个基于Web的图形界面，用于管理云资源。您可以通过纯命令行界面访问控制台提供的大部分功能。在本书中，我们会展示如何通过Web界面和命令行执行一些操作，具体取决于我们认为哪种方式更方便或更典型。
- en: Creating a Project
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个项目
- en: Let’s begin by creating your first project, which is necessary to organize your
    work, set up billing, and gain access to GCP services. In the console, go to the
    [“Manage resources”](https://oreil.ly/2oA64) page and then, at the top of the
    page, select Create Project. As shown in [Figure 4-1](#creating_a_new_projectdot),
    you need to give your project a name, which must be unique within the entire GCP.
    You can also select an organization if your Google identity is associated with
    one (which is usually the case if you have an institutional/work G Suite account),
    but if you just created your account, this might not be applicable to you at the
    moment. Having an organization selected means new projects will be associated
    with that organization by default, which allows for central management of projects.
    For the purposes of these instructions, we assume that you’re setting up your
    account for the first time and there isn’t a preexisting organization linked to
    it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建你的第一个项目开始，这对于组织你的工作、设置计费并访问 GCP 服务是必要的。在控制台中，转到[“管理资源”](https://oreil.ly/2oA64)页面，然后在页面顶部选择创建项目。如[图
    4-1](#creating_a_new_projectdot)所示，你需要给你的项目取一个名字，在整个 GCP 中必须是唯一的。如果你的 Google 身份关联了一个组织（如果你有一个机构/工作
    G Suite 账户，通常是这种情况），你也可以选择一个组织，但如果你刚刚创建了你的账户，这可能暂时不适用于你。选择了一个组织意味着新项目将默认与该组织关联，这允许对项目进行集中管理。在这些说明中，我们假设你是第一次设置你的账户，目前没有与之关联的现有组织。
- en: '![Creating a new project.](Images/gitc_0401.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个新项目。](Images/gitc_0401.png)'
- en: Figure 4-1\. Creating a new project.
  id: totrans-10
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 创建一个新项目。
- en: Checking Your Billing Account and Activating Free Credits
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查您的计费账户并激活免费信用
- en: If you followed the sign-up process outlined in the previous section and activated
    your free trial, the system will have set up billing information for you as part
    of the overall account creation process. You can check your billing information
    in the [Billing section of the console](https://oreil.ly/X8G6K), which you can
    also access at any time from the sidebar menu.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照前一节中概述的注册流程并激活了您的免费试用，系统将在整体账户创建过程中为您设置计费信息。您可以在[控制台的计费部分](https://oreil.ly/X8G6K)中查看您的计费信息，您也可以随时从侧边栏菜单中访问。
- en: If you’re eligible for the free credits program, one of the panels on the billing
    overview page will summarize the number of credits and days you have left to spend
    them. Note that if yours is displaying a blue Upgrade button, as shown in [Figure 4-2](#the_panel_in_the_billing_console_summar),
    your trial has not yet started and you need to activate it in order to take advantage
    of the program. You might also see a “Free trial status” banner at the top of
    your browser window with a blue Activate button. Someone at GCP is working really
    hard to not let you walk away from free money, so click either of those buttons
    to start the process and receive your free credits.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有资格参加免费信用计划，计费概览页面上的一个面板将总结您剩余的信用额度和天数。请注意，如果您的页面显示一个蓝色的升级按钮，如[图 4-2](#the_panel_in_the_billing_console_summar)所示，您的试用尚未开始，您需要激活它以利用该计划。您还可能在浏览器窗口顶部看到一个“免费试用状态”横幅，带有一个蓝色的激活按钮。GCP
    的某个人正在努力不让您放弃免费的钱，所以点击其中任何一个按钮开始流程并获得您的免费信用。
- en: '![The panel in the Billing console summarizing free trial credits availability.](Images/gitc_0402.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在计费控制台中总结免费试用信用额度的面板。](Images/gitc_0402.png)'
- en: Figure 4-2\. The panel in the Billing console summarizing free trial credits
    availability.
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 在计费控制台中总结免费试用信用额度的面板。
- en: 'More generally, the billing overview page provides summaries of how much money
    (or credits) you have spent so far as well as some basic forecasting. That being
    said, it’s important to understand that the system does not show you costs in
    real time: there is some lag time between the moments when you use chargeable
    resources and when the costs are updated on your billing page.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说，计费概览页面提供了迄今为止花费了多少钱（或信用额度）以及一些基本的预测摘要。话虽如此，重要的是要了解系统不会实时显示您的成本：在您使用可计费资源和成本更新到您的计费页面之间存在一些滞后时间。
- en: Many people who make the move to the cloud report that keeping track of their
    spending is one of the most difficult parts of the process. It’s also the one
    that causes them the most anxiety because it can be very easy to spend large sums
    of money pretty quickly in the cloud if you’re not careful. One feature offered
    by GCP that we find particularly useful in this respect is the “Budgets & alerts”
    settings, as depicted in [Figure 4-3](#budget_and_alert_threshold_administrati).
    This allows you to set email alerts that will notify you (or whoever is the billing
    administrator on your account) when you exceed certain spending thresholds. To
    be clear, this won’t stop anything from running or prevent you from starting any
    new work that would push you over the threshold, but at least it will let you
    know where you stand.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 许多转向云端的人报告说，跟踪他们的支出是整个过程中最困难的部分之一。这也是最令他们焦虑的部分，因为如果不小心，很容易在云中迅速花费大量资金。GCP提供的一个特别有用的功能是“预算与警报”设置，如[图 4-3](#budget_and_alert_threshold_administrati)所示。这使您可以设置电子邮件警报，通知您（或者是您帐户上的计费管理员）当您超过某些支出阈值时。清楚地说，这不会停止任何正在运行的东西，也不会阻止您启动可能使您超出阈值的任何新工作，但至少它会让您知道您的情况。
- en: '![Budget and alert threshold administration](Images/gitc_0403.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![预算和警报阈值管理](Images/gitc_0403.png)'
- en: Figure 4-3\. Budget and alert threshold administration.
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 预算和警报阈值管理。
- en: To access the billing notifications feature, on the main menu on the GCP console,
    choose Billing, select the billing account you just created, and then look for
    the Budgets and alerts option. After you select it, you will be able to set up
    a new budget using the Create budget form shown in [Figure 4-3](#budget_and_alert_threshold_administrati).
    You can create multiple budgets and set multiple triggers for different percentages
    of the budget if you want warnings as you approach your budget amount. But as
    we just mentioned, keep in mind that it is still only a notification service and
    will not prevent you from incurring additional charges.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问计费通知功能，请在GCP控制台的主菜单上选择“计费”，选择您刚创建的计费账户，然后查找“预算和警报”选项。选择后，您将能够使用[图 4-3](#budget_and_alert_threshold_administrati)中显示的“创建预算”表单来设置新的预算。如果您希望在接近预算金额时得到警告，可以为不同百分比的预算设置多个触发器。但正如我们刚才提到的，要记住它仍然只是一个通知服务，并不会阻止您产生额外的费用。
- en: Running Basic Commands in Google Cloud Shell
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Google Cloud Shell中运行基本命令
- en: Now that you’ve established your account, set up billing, and created your project,
    the next step is to log in to your first VM. For our exercises here, we use Google
    Cloud Shell, which does not require any configuration to get started and is completely
    free, although it comes with a few important limitations that we discuss in a
    moment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经建立了您的帐户，设置了计费，并创建了您的项目，下一步是登录到您的第一个虚拟机。在这里的练习中，我们使用Google Cloud Shell，它不需要任何配置即可开始使用，并且完全免费，尽管它带有一些重要的限制，我们稍后会讨论。
- en: Logging in to the Cloud Shell VM
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录到Cloud Shell虚拟机
- en: 'To create a secure connection to a Cloud Shell VM using the SSH protocol, in
    the upper-right corner of the console, click the terminal icon:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用SSH协议创建到Cloud Shell VM的安全连接，请点击控制台右上角的终端图标：
- en: '![The terminal icon to open Cloud Shell.](Images/gitc_04in01.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![打开Cloud Shell的终端图标。](Images/gitc_04in01.png)'
- en: This launches a new panel in the bottom on the console; if you want, you can
    also pop the terminal out to its own window. This gives you shell access to your
    own Debian-based Linux VM provisioned with modest resources, including 5 GB of
    free storage (mounted at *$HOME*) on a persistent disk. Some basic packages are
    preinstalled and ready to go, including the Google Cloud SDK (aka `gcloud`), which
    provides a rich set of command-line-based tools for interacting with GCP services.
    We’ll use it in a few minutes to try out some basic data management commands.
    In the meantime, feel free to explore this Debian VM, look around, and see what
    tools are installed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在控制台底部启动一个新面板；如果需要，您也可以将终端弹出到独立窗口。这样，您就可以访问装有适度资源的基于Debian的Linux VM，包括挂载在*$HOME*上的5
    GB免费存储（挂载在持久性磁盘上）。一些基本软件包已预安装并准备就绪，包括Google Cloud SDK（也称为`gcloud`），它提供了丰富的基于命令行的工具集，用于与GCP服务进行交互。我们将在几分钟内使用它来尝试一些基本的数据管理命令。与此同时，可以随意探索这个Debian
    VM，四处看看，了解安装了哪些工具。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Be aware that weekly usage quotas limit how much time you can spend running
    the Cloud Shell; as of this writing, it’s 50 hours per week. In addition, if you
    don’t use it regularly (within 120 days, as of this writing), the contents of
    the disk that provides you with free storage might end up being deleted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每周使用配额限制您在Cloud Shell上运行的时间；截至目前为止，每周为50小时。此外，如果您不定期使用（截至目前为止为120天），提供免费存储空间的磁盘内容可能会被删除。
- en: 'When you log in to Cloud Shell for the first time, it prompts you to specify
    a Project ID using the aforementioned `gcloud` utility:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次登录Cloud Shell时，它会提示您使用上述`gcloud`实用程序指定项目ID：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can find your Project ID on the Home page of the console, as shown in [Figure 4-4](#location_of_the_project_id_in_the_gcp_c).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在控制台的主页上找到您的项目ID，如[图4-4](#location_of_the_project_id_in_the_gcp_c)所示。
- en: '![Location of the Project ID in the GCP console.](Images/gitc_0404.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![GCP控制台中项目ID的位置。](Images/gitc_0404.png)'
- en: Figure 4-4\. Location of the Project ID in the GCP console.
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-4\. GCP控制台中项目ID的位置。
- en: 'When you have your Project ID, run the following command in the Cloud Shell,
    substituting your own Project ID for the one shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您拥有项目ID时，在Cloud Shell中运行以下命令，将此处显示的项目ID替换为您自己的项目ID：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice that your command prompt now includes your Project ID. It is quite long,
    so going forward, we’ll show only the last character in the prompt—in this case,
    the dollar sign ($)—when we demonstrate running commands. For example, if we list
    the contents of the working directory using the `ls` command, it will look like
    this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您的命令提示现在包含您的项目ID。它非常长，因此在以后，我们将仅显示提示中的最后一个字符—在本例中为美元符号（$）—当我们演示运行命令时。例如，如果我们使用`ls`命令列出工作目录的内容，它将如下所示：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And, hey, there’s already something here: a *README* file, which, as the name
    indicates, really wants you to read it. You can do so by running the `cat` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 嘿，这里已经有东西了：一个*README*文件，正如名称所示，真的希望您阅读它。您可以通过运行`cat`命令来阅读它：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This displays a welcome message that summarizes some usage instructions and
    recommendations for getting help. And with that, you’re ready to use Cloud Shell
    to begin interacting with basic GCP services. Let’s get cracking!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个欢迎消息，总结了一些使用说明和获取帮助的建议。有了这个，您已经准备好使用Cloud Shell开始与基本的GCP服务进行交互了。让我们开始吧！
- en: Using gsutil to Access and Manage Files
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用gsutil访问和管理文件
- en: Now that we have access to this extremely simple-to-launch and free (if fairly
    limited) VM, let’s use it to see whether we can access the bundle of example data
    provided with this book. The data bundle resides in Google Cloud Storage (GCS),
    which is a form of *object store* (i.e., it’s used for storing files) with units
    of storage called *buckets*. You can view the contents of GCS buckets and perform
    basic management tasks on them via the web through the [storage browser section](https://oreil.ly/sqrkr)
    of the GCP console, but the interface is fairly limited. The more powerful approach
    is to use the `gcloud` tool, `gsutil` (Google Storage Utilities), from the command
    line. You can access buckets through their GCS path, which is just their name
    prefixed with *gs://*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以访问这个非常简单启动且免费（虽然相当有限）的虚拟机，让我们使用它来查看是否可以访问本书提供的示例数据包。数据包存储在Google Cloud
    Storage（GCS）中，这是一种*对象存储*（即用于存储文件）的形式，其中存储单元称为*存储桶*。您可以通过GCP控制台的[存储浏览器部分](https://oreil.ly/sqrkr)通过网络查看GCS存储桶的内容并执行基本管理任务，但界面相当有限。更强大的方法是使用`gcloud`工具，`gsutil`（Google
    Storage Utilities）从命令行访问。您可以通过其GCS路径访问存储桶，该路径只是其名称前缀为*gs://*。
- en: 'As an example, the path for the public storage bucket for this book is *gs://genomics-in-the-cloud*.
    You can list the contents of the bucket by typing the following command in your
    cloud shell:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，本书的公共存储桶路径为*gs://genomics-in-the-cloud*。您可以在云shell中输入以下命令来列出存储桶的内容：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There should be a file called *hello.txt*. Let’s use the `gsutil` version of
    the Unix command `cat`, which allows us to read the content of text files to see
    what this *hello.txt* file contains:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应该有一个名为*hello.txt*的文件。让我们使用Unix命令`cat`的`gsutil`版本，它允许我们读取文本文件的内容，以查看这个*hello.txt*文件包含什么：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also try copying the file to your storage disk:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以尝试将文件复制到您的存储磁盘：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you list the contents of your working directory by using `ls` again, you
    should now have a local copy of the *hello.txt* file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次使用`ls`列出工作目录的内容，您现在应该有一个*hello.txt*文件的本地副本：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'While we’re playing with `gsutil`, how about we do something that will be useful
    later: create a storage bucket of your own, so that you can store outputs in GCS.
    You’ll need to substitute `my-bucket` in the command shown here because bucket
    names must be unique across all of GCS:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用`gsutil`的同时，如何做一些以后有用的事情呢：创建您自己的存储桶，以便您可以在GCS中存储输出。您需要替换这里显示的命令中的`my-bucket`，因为存储桶名称必须在整个GCS中是唯一的：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you didn’t change the bucket name or you tried a name that was already taken
    by someone else, you might get the following error message:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有更改存储桶名称，或者尝试的名称已经被其他人使用，可能会收到以下错误消息：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If this is the case, just try something else that’s more likely to be unique.
    You’ll know it worked when you see the `Creating *name*...` in the output and
    then get back to the prompt without any further complaint from `gsutil`. When
    that’s done, you’re going to create an environment variable that will serve as
    an alias for your bucket name. That way, you’ll save yourself some typing and
    you’ll be able to copy and paste subsequent commands without having to substitute
    the bucket name every time:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，请尝试另一个更有可能唯一的名称。当您在输出中看到`Creating *name*...`并且在`gsutil`未有更多投诉后，您将知道它已成功。完成后，您将创建一个环境变量，该变量将作为存储桶名称的别名。这样，您可以节省一些输入，而且在后续命令中可以复制粘贴，而无需每次替换存储桶名称：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can run the `echo` command on your new variable to verify that your bucket
    name has been stored properly:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对新变量运行`echo`命令，以验证存储桶名称已正确存储：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let’s get you comfortable with using `gsutil`. First, copy the *hello.txt*
    file to your new bucket. You can do either directly from the original bucket:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们帮助您熟悉使用`gsutil`。首先，将*hello.txt*文件复制到您的新存储桶中。您可以直接从原始存储桶中进行操作：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Or, you can do it from your local copy; for example, if you made modifications
    that you want to save:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以从本地副本中进行操作；例如，如果您进行了要保存的修改：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, as one more example of basic file management, you can decide that
    the file should reside in its own directory in your bucket:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，作为基本文件管理的另一个示例，您可以决定文件应该位于存储桶中自己的目录中：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, the `gsutil` commands are set up to be as similar as possible
    to their original Unix counterparts. So, for example, you’ll also be able to use
    `-r` to make the `cp` and `mv` commands recursive to apply to directories. For
    large file transfers, you can use a few cloud-specification optimizations to speed
    up the process, like the `gsutil -m` option, which parallelizes file transfers.
    Conveniently, the system will usually inform you in the terminal output when you
    could take advantage of such optimizations, so you don’t need to go and memorize
    the documentation before getting underway.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`gsutil`命令设置得尽可能与其原始Unix对应命令相似。因此，例如，您还可以使用`-r`来使`cp`和`mv`命令递归地应用于目录。对于大文件传输，您可以使用一些云规范优化来加快过程，比如`gsutil
    -m`选项，该选项并行传输文件。方便的是，系统通常会在终端输出中告知您何时可以利用这些优化，因此您无需在开始之前去记忆文档。
- en: '![GCP console storage browser.](Images/gitc_0405.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![GCP控制台存储浏览器。](Images/gitc_0405.png)'
- en: Figure 4-5\. GCP console storage browser.
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-5\. GCP控制台存储浏览器。
- en: This opens a reasonably simple configuration form. The most important thing
    to do here is to choose a good name because the name you choose must be unique
    across all of Google Cloud—so be creative! If you choose a name that is already
    in use, the system will let you know when you click Continue in the configuration
    form, as demonstrated in [Figure 4-6](#naming_your_bucketdot).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个相当简单的配置表单。在这里做的最重要的事情是选择一个好的名称，因为您选择的名称必须在整个Google Cloud中是唯一的—所以要有创意！如果您选择了一个已经在使用的名称，系统将在您单击配置表单中的“继续”时告知您，如在[图4-6](#naming_your_bucketdot)中演示的那样。
- en: '![Naming your bucket.](Images/gitc_0406.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![给您的存储桶命名。](Images/gitc_0406.png)'
- en: Figure 4-6\. Naming your bucket.
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-6\. 给您的存储桶命名。
- en: When you have a unique name, the system will let you proceed to the next step
    by expanding the menu options. These allow you to customize the storage location
    and access controls for your bucket, but for the time being, feel free to just
    accept the defaults and click Create. Doing so will take you back to the list
    of buckets, which should at this point include your newly created one. You can
    click its name to view its contents—but of course it’s still empty, so the view
    won’t be particularly exciting, as illustrated in [Figure 4-7](#viewing_the_contents_of_your_bucketdot).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个唯一的名称时，系统会扩展菜单选项，让您可以继续进行下一步。这些选项允许您自定义存储位置和桶的访问控制，但目前您可以接受默认设置并单击“创建”。这将带您返回到桶列表，此时列表应包含您新创建的桶。您可以单击其名称查看其内容，但当然它仍然是空的，所以视图不会特别令人兴奋，正如
    [图 4-7](#viewing_the_contents_of_your_bucketdot) 所示。
- en: The interface offers a few basic management options like deleting buckets and
    files as well as uploading files and folders. Note that you can even drag and
    drop files and folders from your local machine into the bucket contents window,
    which is stunningly easy (go ahead, try it), but it’s not something you can expect
    to do very often in the course of your genomics work. In the real world, you’re
    more likely to use the `gsutil` command-line utility. One of the advantages of
    using the command-line path is that you can save those commands as a script, for
    provenance and so that your steps can be reproduced if needed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该界面提供了一些基本的管理选项，如删除桶和文件，以及上传文件和文件夹。请注意，您甚至可以将本地计算机中的文件和文件夹拖放到桶内容窗口中，这非常容易（试试看），但在基因组学工作中，您不太可能经常这样做。在实际环境中，您更有可能使用
    `gsutil` 命令行实用程序。使用命令行路径的一个优势是可以将这些命令保存为脚本，用于溯源和在需要时重现您的步骤。
- en: '![Viewing the contents of your bucket.](Images/gitc_0407.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![查看桶内容。](Images/gitc_0407.png)'
- en: Figure 4-7\. Viewing the contents of your bucket.
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-7\. 查看桶内容。
- en: Pulling a Docker Image and Spinning Up the Container
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取 Docker 镜像并启动容器
- en: 'Cloud Shell is the gift that keeps on giving: the Docker application (which
    we introduced in [Chapter 3](ch03.xhtml#computing_technology_basics_for_life_sc))
    comes preinstalled, so you can go ahead and get started with that, too! We’re
    going to use a simple Ubuntu container to illustrate basic Docker functionality.
    Although a Docker image is available for GATK—and that’s what we’re going to use
    for a good chunk of the next few chapters—we’re not going to use it here because
    it’s rather large, so it takes a little while to get going. We wouldn’t actually
    be able to run any realistic analyses with it in the free Cloud Shell because
    of the small amount of CPU and memory resources allocated for this free VM.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 云 Shell 是一份不断奉送的礼物：[第三章](ch03.xhtml#computing_technology_basics_for_life_sc)
    中介绍的 Docker 应用程序已预装，因此您可以立即开始使用！我们将使用一个简单的 Ubuntu 容器来演示基本的 Docker 功能。尽管 GATK 提供了一个
    Docker 镜像，并且在接下来的几章中我们会大量使用它，但我们在这里不会使用它，因为它相当庞大，启动需要一些时间。由于免费的 Cloud Shell 分配了较少的
    CPU 和内存资源，我们实际上无法在其中运行任何现实分析任务。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The first thing to do to learn how to use Docker containers in this context
    is to...well, avoid the online Docker documentation! Seriously. Not because it’s
    bad, but because the majority of those documents are written mainly for people
    who want to run web applications in the cloud. If that’s what *you* want to do,
    more power to you, but you’re reading the wrong book. What we’re providing here
    are tailored instructions that will teach you how to use Docker to run research
    software in containers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下学习如何使用 Docker 容器的第一件事是… 避开在线 Docker 文档！真的。不是因为它不好，而是因为这些文档主要是为想在云中运行 Web
    应用程序的人编写的。如果这是您想要做的事情，那么恭喜您，但您正在读错书。我们在这里提供的是量身定制的指导，将教您如何使用 Docker 在容器中运行研究软件。
- en: 'As just noted, we’re going to use a very generic example: an image containing
    the Ubuntu Linux OS. It’s an official image that is provided as part of the core
    library in a public container image repository, Docker Hub, so we just need to
    state its name. You’ll see later that images contributed by the community are
    prefixed by the contributor’s username or organization name. While still in your
    Cloud Shell terminal (it doesn’t matter where your working directory is), run
    the following command to retrieve the Ubuntu image from the Docker Hub library
    of official (certified) images:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如刚才所提到的，我们将使用一个非常通用的例子：一个包含Ubuntu Linux操作系统的镜像。这是一个官方镜像，作为公共容器镜像库Docker Hub的核心库的一部分提供，所以我们只需要声明它的名称。稍后您会看到，由社区贡献的镜像是以贡献者的用户名或组织名称作为前缀的。在您的Cloud
    Shell终端中（无论您的工作目录在哪里），运行以下命令从Docker Hub官方（认证）镜像库中检索Ubuntu镜像：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `pull` command fetches the image and saves it to your VM. The version of
    the container image is indicated by its `tag` (which can be anything the image
    creator wants to assign) and by its `sha256` hash (which is based on the image
    contents). By default, the system gives us the latest version that is available
    because we did not specify a particular tag; in a later exercise, you’ll see how
    to request a specific version by its tag. Note that container images are typically
    composed of several modular *slices*, which are pulled separately. They’re organized
    so that the next time you pull a version of the image, the system will skip downloading
    any slices that are unchanged compared to the version you already have.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`pull`命令获取镜像并保存到您的虚拟机。容器镜像的版本由其`tag`（可以是镜像创建者想要分配的任何内容）和其`sha256`哈希值（基于镜像内容）表示。默认情况下，系统会给出可用的最新版本，因为我们没有指定特定的标签；在后续练习中，您将看到如何通过标签请求特定版本。请注意，容器镜像通常由几个模块化的*slices*组成，这些模块化的部分会分别被拉取。它们被组织得这样，下次您拉取镜像的版本时，系统将跳过任何与您已有版本相比未更改的部分。'
- en: Now let’s start up the container. There are three main options for running it,
    but the tricky thing is that there is usually only one correct way to do it *as
    its author intended*, and it’s difficult to know what that is if the documentation
    doesn’t specify it (which is soooo often the case). Confused? Let’s walk through
    the cases to make this a bit more concrete, and you’ll see why we’re putting you
    through this momentary frustration and mystery—it’s to save you potential misery
    down the road.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启动容器。有三种主要选项可以运行它，但棘手的是通常只有一种正确的方式*正如其作者所意图的*，如果文档没有指定（这种情况太常见了），很难知道那是什么。感到困惑了吗？让我们通过具体案例来澄清一下，并且你会明白为什么我们要让你经历这一瞬间的挫败和神秘感——这是为了在今后避免潜在的痛苦。
- en: First option
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项
- en: Just run it!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行它！
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Result
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: A short pause, then your command prompt comes back. No output. What happened?
    Docker did in fact spin up the container, but the container wasn’t configured
    to *do* anything under those conditions, so it basically shrugged and shut down
    again.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 稍作停顿，然后您的命令提示符又回来了。没有输出。发生了什么？实际上Docker启动了容器，但在这些条件下，容器没有配置*执行*任何操作，所以基本上是耸了耸肩然后再次关闭了。
- en: Second option
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选项
- en: 'Run it with a command appended:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 附加命令运行：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Result
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: It echoed `Hello World!`, as requested, and then shut down again. OK, so now
    we know that we can pass commands to the container, and if it’s a command that
    is recognized by something in there, it will be executed. Then, when any and all
    commands have been completed, the container will shut down. A bit lazy, but reasonable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它回显了`Hello World!`，正如请求的那样，然后再次关闭了。好的，现在我们知道可以向容器传递命令，如果它是在其中某个地方被识别的命令，它将被执行。然后，当所有命令都已完成时，容器将关闭。有点懒，但还算合理。
- en: Third option
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选项
- en: 'Run it interactively by using the `-it` option:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-it`选项进行交互式运行：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Result
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 结果
- en: 'Aha! A new command prompt (Bash in this case)! But with a different shell symbol:
    `#` instead of `$`. This means that the container is running and you are in it.
    You can now run any command that you would normally use on an Ubuntu system, including
    installing new packages if you like. Try running a few Unix commands such as `ls`
    or `ls -la` to poke around and see what the container can do. Later in the book,
    particularly in [Chapter 12](ch12.xhtml#interactive_analysis_in_jupyter_noteboo),
    we go into some of the implications of this, including practical instructions
    for how to package and redistribute an image you’ve customized in order to share
    your own analysis in a reproducible way.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哈！一个新的命令提示符（在本例中是 Bash）！但是带有不同的 shell 符号：`#`而不是`$`。这意味着容器正在运行，而且你正在其中。现在，您可以运行任何在
    Ubuntu 系统上通常使用的命令，包括安装新的软件包。尝试运行一些 Unix 命令，如`ls`或`ls -la`来探索并查看容器的功能。本书的后面部分，特别是[第12章](ch12.xhtml#interactive_analysis_in_jupyter_noteboo)，我们将深入探讨其中的一些含义，包括如何定制并重新分发您的图像，以便以可重现的方式分享您自己的分析。
- en: When you’re done poking around, type `**exit**` at the command prompt (or press
    Ctrl+D) to terminate the shell. Because this is the main process the container
    was running, terminating it will cause the container to shut down and return to
    the Cloud Shell itself. To be clear, this will shut down the container *and any
    commands that are currently running*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成探索时，在命令提示符处输入`**exit**`（或按Ctrl+D）来终止 shell。因为这是容器运行的主要进程，终止它将导致容器关闭并返回到
    Cloud Shell 本身。清楚地说，这将关闭容器*以及当前正在运行的任何命令*。
- en: 'If you’re curious: yes, it is possible to step outside of the container without
    shutting it down; this is called *detaching*. To do so, press Ctrl+P+Q instead
    of using the `exit` command. You’ll then be able to jump back into the container
    at any time—provided that you can identify it. By default, Docker assigns your
    container a universally unique identifier (UUID) as well as a random human-readable
    name (which tend to sound a bit silly). You can run `docker ps` to list currently
    running containers or `docker ps -a` to list containers that have been created.
    This displays a list of containers indexed by their container IDs that should
    look something like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣：是的，可以在不关闭容器的情况下离开容器；这称为*分离*。要这样做，按 Ctrl+P+Q，而不是使用`exit`命令。这样，你随时可以跳回容器中——只要你能识别它。默认情况下，Docker为您的容器分配一个全局唯一标识符（UUID）以及一个随机的易读名称（通常听起来有点傻）。您可以运行`docker
    ps`列出当前运行的容器，或者`docker ps -a`列出已创建的容器。这将显示一个按其容器ID索引的容器列表，应该看起来像这样：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We’re showing that two entries correspond to the last two invocations of Docker,
    each with a unique identifier, the `CONTAINER ID`. We see the container with ID
    `c2b4f8a0c7a6` that is currently running was named `vigorous_rosalind` and has
    a status of `Up 5 minutes`. You can tell that the other container, `objective_curie`,
    is not running because its status is `Exited (0) 8 minutes ago`. The names we
    see here were randomly assigned (We swear! What are the odds?), so they’re admittedly
    not terribly meaningful. If you have multiple containers running at the same time,
    this can become a bit confusing, so you’ll want a better way to identify them.
    The good news is that you can give them a meaningful name by adding `--name=*meaningful_name*`
    immediately after `docker run` in your initial command, substituting `*meaningful_name*`
    with the name that you want to give the container.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示了最后两次 Docker 调用对应的两个条目，每个都有一个唯一标识符，即`CONTAINER ID`。我们看到ID为`c2b4f8a0c7a6`的当前正在运行的容器被命名为`vigorous_rosalind`，状态为`Up
    5 minutes`。您可以看出另一个容器`objective_curie`不在运行，因为其状态为`Exited (0) 8 minutes ago`。我们在这里看到的名称是随机分配的（我们发誓！这有多大概率？），所以它们显然不是特别有意义的。如果同时运行多个容器，这可能会变得有点混乱，因此您需要一种更好的方法来识别它们。好消息是，您可以在初始命令的`docker
    run`之后立即添加`--name=*meaningful_name*`来为容器指定有意义的名称，将`*meaningful_name*`替换为您想要给容器的名称。
- en: To enter the container, simply run `docker attach *c2b4f8a0c7a6*` (substituting
    your container ID), press Enter, and you will find yourself back at the helm (your
    keyboard might be labeled Return instead of Enter). You can open a second command
    tab in Cloud Shell if you’d like to be able to run commands outside the container
    alongside the work you’re doing inside the container. Note that you can have multiple
    containers running at the same time on a single VM—that’s one of the great advantages
    of the container system—but they will be competing for the CPU and memory resources
    of the VM, which in Cloud Shell are rather minimal. Later in this chapter, we
    show you how to spin up VMs with beefier capabilities.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入容器，只需运行`docker attach *c2b4f8a0c7a6*`（替换为你的容器ID），然后按Enter，你将回到控制台（你的键盘可能标有Return而不是Enter）。如果你想要能够在容器内部工作的同时在Cloud
    Shell中运行命令，可以打开第二个命令选项卡。请注意，你可以在单个VM上同时运行多个容器，这是容器系统的一大优势之一，但它们将竞争VM的CPU和内存资源，在Cloud
    Shell中这些资源相当有限。本章后面，我们将向你展示如何启动具备更强大能力的VM。
- en: Mounting a Volume to Access the Filesystem from Within the Container
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂载卷以从容器内部访问文件系统
- en: 'Having completed the previous exercise, you are now able to retrieve and run
    an instance of any container image shared in a public repository. Many commonly
    used bioinformatics tools, including GATK, are available preinstalled in Docker
    containers. The idea is that knowing how to use them out of a Docker container
    means you won’t need to worry about having the correct OS or software environment.
    However, there’s still one trick that we need to show you in order to make that
    really work for you: how to access your machine’s filesystem from within the container
    by *mounting a volume*.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了前面的练习后，现在你可以检索并运行任何公共存储库中共享的容器映像实例。许多常用的生物信息学工具，包括GATK，在Docker容器中预先安装。其理念在于，知道如何在Docker容器外使用它们意味着你不需要担心正确的操作系统或软件环境。然而，我们仍然需要向你展示一个诀窍，以便真正使其对你有用：如何通过*挂载卷*从容器内部访问您机器的文件系统。
- en: What does that last bit mean? By default, when you’re inside the container,
    you can’t access any data that resides on the filesystem outside of the container.
    The container is a closed box. There are ways to copy things back and forth between
    the container and your filesystem, but that becomes tedious really fast. So we’re
    going to follow the easier path, which is to establish a link between a directory
    outside the container in a way that makes it appear as if it were within the container.
    In other words, we’re going to poke a hole in the container wall, as shown in
    [Figure 4-8](#mounting_a_volume_or_directory_from_you).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上次的最后一部分是什么意思？默认情况下，当你在容器内部时，无法访问容器外部文件系统中的任何数据。容器就像是一个封闭的盒子。虽然有办法在容器和你的文件系统之间来回复制东西，但那样很快就变得很繁琐。因此，我们将选择更简单的方法，即在容器外部建立一个链接，使其看起来就像是在容器内部。换句话说，我们要在容器的墙壁上打个洞，如图[4-8](#mounting_a_volume_or_directory_from_you)所示。
- en: '![Mounting a volume or directory from your Google Cloud Shell into a Docker
    container.](Images/gitc_0408.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![将Google Cloud Shell中的卷或目录挂载到Docker容器中。](Images/gitc_0408.png)'
- en: 'Figure 4-8\. Mounting a directory from your Google Cloud Shell VM into a Docker
    container: Ubuntu container used in this chapter (left); GATK container introduced
    in [Chapter 5](ch05.xhtml#first_steps_with_gatk) (right).'
  id: totrans-107
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-8\. 将Google Cloud Shell VM中的目录挂载到Docker容器中：本章中使用的Ubuntu容器（左）；在[第5章](ch05.xhtml#first_steps_with_gatk)介绍的GATK容器（右）。
- en: 'As an example, let’s create a new directory called *book* in our Cloud Shell
    VM’s home directory, and put the *hello.txt* file from earlier inside it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们在Cloud Shell VM的主目录中创建一个名为*book*的新目录，并将之前的*hello.txt*文件放入其中：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So this time, let’s run the command to spin up our Ubuntu container by using
    the `-v` argument (where `v` is for volume), which allows us to specify a filesystem
    location and a mount point within the container:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一次，让我们运行该命令通过使用`-v`参数（其中`v`表示卷），这使我们能够指定文件系统位置和容器内的挂载点来启动我们的Ubuntu容器：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `-v ~/book_data:/home/book` part of the command links the location you
    specified to the path */home/book* directory within the Docker container. The
    `/home` part of the path is a directory that already exists in the container,
    whereas the `book` part can be any name you choose to give it. Now, everything
    in the `book` directory on your filesystem can be accessed from within the Docker
    container’s */home/book* directory:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 命令中的`-v ~/book_data:/home/book`部分将您指定的位置链接到Docker容器内的路径*/home/book*目录。路径中的`/home`是容器中已存在的目录，而`book`部分可以是您选择的任何名称。现在，您文件系统中`book`目录中的所有内容都可以从Docker容器的*/home/book*目录访问：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, we’re using the same name for the mount point as for the actual location
    we’re mounting because it’s more intuitive that way, but you could use a different
    name if you wanted. Note that if you give your mount point the name of a directory
    or file that already exists with that path in the container, it will “squash”
    the existing path, meaning that path will not be accessible for as long as the
    volume is mounted.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用与实际位置相同的挂载点名称，因为这样更直观，但如果您希望，也可以使用不同的名称。请注意，如果您将挂载点命名为容器中该路径已存在的目录或文件的名称，则会“压制”现有路径，这意味着在挂载卷的时间内该路径将不可访问。
- en: A few other Docker tricks are good to know, but for now, this is enough of a
    demonstration of the core Docker functionality that you’re going to use in [Chapter 5](ch05.xhtml#first_steps_with_gatk).
    We go into the details of more sophisticated options as we encounter them.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他有用的Docker技巧需要了解，但目前这已经足够演示您将在[第5章](ch05.xhtml#first_steps_with_gatk)中使用的核心Docker功能的基本功能了。我们会在遇到更复杂的选项时详细讨论更多细节。
- en: Setting Up Your Own Custom VM
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您自己的自定义VM
- en: Now that you’ve successfully run some basic file-management commands and got
    the hang of interacting with Docker containers, it’s time to move on to bigger
    and better things. The Google Cloud Shell environment is excellent for quickly
    getting started with some light coding and execution tasks, but the VM allocated
    for Cloud Shell is really underpowered and will definitely not cut the mustard
    when it comes to running real GATK analyses in [Chapter 5](ch05.xhtml#first_steps_with_gatk).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已成功运行了一些基本的文件管理命令，并掌握了与Docker容器交互的技巧，是时候转向更大更好的事物了。Google Cloud Shell环境非常适合快速开始一些轻量级编码和执行任务，但为Cloud
    Shell分配的虚拟机性能确实较低，当需要在[第5章](ch05.xhtml#first_steps_with_gatk)中运行真正的GATK分析时肯定不够用。
- en: In this section, we show you how to set up your own VM in the cloud (sometimes
    called an *instance*) using Google’s Compute Engine service, which allows you
    to select, configure, and run VMs of whatever size you need.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何使用Google的Compute Engine服务在云中设置自己的VM（有时称为*实例*），该服务允许您选择、配置和运行任何所需大小的VM。
- en: Creating and Configuring Your VM Instance
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置您的VM实例
- en: First, go to the [*Compute Engine*](https://oreil.ly/sGeug) or access the page
    through the sidebar menu on the left, as shown in [Figure 4-9](#compute_engine_menu_showing_the_vm_inst).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，进入[*计算引擎*](https://oreil.ly/sGeug)，或者通过左侧的侧边栏菜单访问页面，如[图 4-9](#compute_engine_menu_showing_the_vm_inst)所示。
- en: '![Compute Engine menu showing the VM instances menu item.](Images/gitc_0409.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![显示VM实例菜单项的计算引擎菜单。](Images/gitc_0409.png)'
- en: Figure 4-9\. Compute Engine menu showing the VM instances menu item.
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-9\. 显示VM实例菜单项的计算引擎菜单。
- en: Click the VM Instances link in this menu to go to an overview of running images.
    If this is a new account, you won’t have any running. Notice at the top that there’s
    an option for Create Instance. Click that, and let’s walk through the process
    of creating a new VM with just the resources you need.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此菜单中的VM实例链接，进入运行图像的概述页面。如果这是一个新帐户，您将没有任何正在运行的实例。请注意顶部有一个“创建实例”的选项。点击它，让我们一起完成只使用您所需资源创建新VM的过程。
- en: Next, in the top menu bar, click Create Instance, as shown in [Figure 4-10](#create_an_instance).
    This brings up a configuration form, as shown in [Figure 4-11](#the_vm_instance_configuration_paneldot).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在顶部菜单栏中点击“创建实例”，如[图 4-10](#create_an_instance)所示。这将弹出一个配置表单，如[图 4-11](#the_vm_instance_configuration_paneldot)所示。
- en: '![Create an instance](Images/gitc_0410.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个实例](Images/gitc_0410.png)'
- en: Figure 4-10\. Create a VM instance.
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-10\. 创建一个VM实例。
- en: '![The VM instance configuration panel.](Images/gitc_0411.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![VM实例配置面板。](Images/gitc_0411.png)'
- en: Figure 4-11\. The VM instance configuration panel.
  id: totrans-128
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-11\. VM实例配置面板。
- en: Follow the step-by-step instructions in the subsections that follow to configure
    the VM. There are tons of options and the process can be quite confusing if you
    don’t have experience with the terminology, so we mapped out the simplest path
    through the configuration form that will allow you to run all of the command exercises
    in the first few chapters of this book. Please make sure that you use exactly
    the same settings as shown here unless you really know what you’re doing.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按照接下来的小节中的逐步说明配置 VM。这里有大量的选项，如果您对术语不熟悉，整个过程可能会非常混乱，因此我们列出了配置表单中的最简单路径，可以让您在本书的前几章节中运行所有命令练习。请确保除非您真正知道自己在做什么，否则使用完全相同的设置。
- en: Name your VM
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为您的 VM 命名
- en: Give your VM a name; for example, `genomics-book`, as shown in [Figure 4-12](#name_your_vm_instancedot).
    This must be unique within your project, but unlike bucket names, it does not
    need to be unique across GCP. Some people like to use their username so that others
    with access to the project can instantly identify who created the resource.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的 VM 命名；例如 `genomics-book`，如图 [4-12](#name_your_vm_instancedot) 所示。这必须在您的项目中是唯一的，但与
    GCP 不同，它不需要在全局范围内唯一。一些人喜欢使用他们的用户名，以便其他有权访问项目的人员可以立即识别创建资源的人。
- en: '![Name your VM instance.](Images/gitc_0412.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![给您的 VM 实例命名。](Images/gitc_0412.png)'
- en: Figure 4-12\. Name your VM instance.
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-12\. 给您的 VM 实例命名。
- en: Choose a region (important!) and zone (not so important)
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个区域（重要！）和区域（不那么重要）
- en: There are different physical locations for the cloud. Like most commercial cloud
    providers, GCP maintains datacenters in many parts of the world and provides you
    with the option to choose which one you want to use. Regions are the top-level
    geographical distinction, with names that are reasonably descriptive (like `us-west2`,
    which refers to a facility in Los Angeles). Each region is further divided into
    two or more zones designated by single letters (`a`, `b`, `c`, etc.), which correspond
    to separate datacenters with their own physical infrastructure (power, network,
    etc.), though in some cases they might share the same building.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 云的物理位置有所不同。与大多数商业云供应商一样，GCP 在世界各地维护数据中心，并为您提供选择使用哪一个的选项。区域是最高级别的地理区分，其名称相对描述准确（比如
    `us-west2`，指的是洛杉矶的一个设施）。每个区域进一步分为两个或更多由单个字母指定的区域（`a`、`b`、`c` 等），对应具有自己物理基础设施（电力、网络等）的独立数据中心，尽管在某些情况下它们可能共享同一建筑物。
- en: This system of regions and zones plays an important role in limiting the impact
    of localized problems like power outages, and all major cloud providers use some
    version of this strategy. For more on this topic, see [this entertaining blog
    post](https://oreil.ly/pZUl6) by Kyle Galbraith about how cloud regions and zones
    (in his case, on AWS) could play an important role in the event of a zombie apocalypse.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 区域和区域的这种系统在限制像停电这样的局部问题方面发挥了重要作用，所有主要的云供应商都使用某种形式的这种策略。有关更多信息，请参阅 [这篇有趣的博客文章](https://oreil.ly/pZUl6)，作者
    Kyle Galbraith 讨论了云区域和区域（在他的情况下，AWS）如何在僵尸末日事件中发挥重要作用。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The ability to choose specific regions and zones for your projects is increasingly
    helpful for dealing with regulatory restrictions on where human-subjects data
    can be stored because it allows you to specify a compliant location for all storage
    and compute resources. However, some parts of the world are not yet well covered
    by cloud services or are covered differently by the various cloud providers, so
    you might need to factor in available datacenter locations when choosing a provider.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 选择特定区域和区域用于您的项目，对于处理关于人主体数据存储位置的监管限制越来越有帮助，因为它允许您指定符合规定的位置用于所有存储和计算资源。然而，一些世界上的地区目前云服务覆盖不足或者不同云供应商之间的覆盖方式不同，因此在选择供应商时您可能需要考虑可用的数据中心位置。
- en: To choose a region for your project, you can consult the full list of [available
    Google Cloud regions and zones](https://oreil.ly/D4Iqa) and make a decision based
    on geographic proximity. Alternatively, you can use an online utility that measures
    how close you *effectively* are to each datacenter in terms of network response
    time, like [*http://www.gcping.com*](http://www.gcping.com). For example, if we
    run this test from the small town of Sunderland in western Massachusetts (results
    in [Table 4-1](#geographical_distance_and_response_time)), we find that it takes
    38 milliseconds to get a response from the `us-east4` region located in Northern
    Virginia (698 km away), versus 41 milliseconds from the `northamerica-northeast1`
    region located in Montreal (441 km away). This shows us that geographical proximity
    does not correlate directly with network region proximity. As an even more striking
    example, we find that we are quite a bit “closer” to the `europe-west2` region
    in London (5,353 km away), with a response time of 102 milliseconds, than to the
    `us-west2` region in Los Angeles (4,697 km away) which gives us a response time
    of 180 milliseconds.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要为项目选择区域，您可以查阅完整的[Google Cloud可用区域和区域](https://oreil.ly/D4Iqa)列表，并基于地理接近性做出决定。或者，您可以使用在线工具来衡量每个数据中心的网络响应时间，例如[*http://www.gcping.com*](http://www.gcping.com)。例如，如果我们从马萨诸塞州西部的桑德兰小镇运行这个测试（结果见[表 4-1](#geographical_distance_and_response_time)），我们发现从位于弗吉尼亚北部的`us-east4`区域（698公里远）获取响应需要38毫秒，而从蒙特利尔的`northamerica-northeast1`区域（441公里远）获取响应需要41毫秒。这表明，地理接近性并不直接与网络区域接近性相关。更为显著的例子是，我们发现与位于伦敦的`europe-west2`区域（5,353公里远）相比，与位于洛杉矶的`us-west2`区域（4,697公里远）相比，我们与前者的响应时间为102毫秒，而与后者的响应时间为180毫秒。
- en: Table 4-1\. Geographical distance and response time from Sunderland, MA
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1\. 桑德兰，马萨诸塞州的地理距离和响应时间
- en: '| Region | Location | Distance (km) | Response (ms) |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 区域 | 位置 | 距离（公里） | 响应时间（毫秒） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| us-east4 | Northern Virginia, US | 698 | 38 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| us-east4 | 美国弗吉尼亚州北部 | 698 | 38 |'
- en: '| northamerica-northeast1 | Montreal | 441 | 41 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| northamerica-northeast1 | 蒙特利尔 | 441 | 41 |'
- en: '| europe-west2 | London | 5,353 | 102 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| europe-west2 | 伦敦 | 5,353 | 102 |'
- en: '| us-west2 | Los Angeles | 4,697 | 180 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| us-west2 | 洛杉矶 | 4,697 | 180 |'
- en: This brings us back to our VM configuration. For the Region, we’re going to
    be using `us-east4` (Northern Virginia) because it’s closest to the one of us
    who travels least (Geraldine), and for the Zone we just randomly choose `us-east4-a`.
    You need to make sure that you choose *your* region based on the preceding discussion,
    both for your own benefit (it will be faster) and to avoid clobbering that one
    datacenter in Virginia in the unlikely event that all 60,000 registered users
    of the GATK software begin working through these exercises at the same time—though
    that’s one way to test the vaunted “elasticity” of the cloud.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们回到了我们的VM配置。对于区域，我们将使用`us-east4`（弗吉尼亚北部），因为它是我们中最少旅行的人（杰拉尔丁）最近的一个，而对于区域，我们随意选择了`us-east4-a`。您需要确保根据前面的讨论选择*您的*区域，这对您自身的利益（它将更快）以及避免在GATK软件的所有60,000注册用户同时开始进行这些练习的不太可能事件中占据弗吉尼亚州的数据中心都很重要，尽管这是测试云计算所标榜的“弹性”的一种方式。
- en: Select a machine type
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择机器类型
- en: This is where you can configure the resources of the VM you’re about to launch.
    You can control RAM as well as CPUs. For some instance types (available under
    Customize) you can even select VMs with GPUs, which are used to accelerate certain
    programs. The hitch is that what you select here will determine how much you’ll
    be billed per second of the VM’s uptime; the bigger and beefier the machine, the
    more it will cost you. The right side of the page should show how the hourly and
    monthly cost changes when you change the machine type. Note also that you’re billed
    for how long the VM is online, not for how much time you spend actually using
    it. We cover strategies for limiting costs later, but keep that in mind!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以配置即将启动的虚拟机的资源。您可以控制RAM和CPU。对于某些实例类型（在自定义选项下可用），甚至可以选择带有GPU的VM，用于加速某些程序。关键是，您在此选择的内容将决定VM运行时间的每秒计费金额；机器越大越强大，成本就越高。页面右侧应显示在更改机器类型时，每小时和每月成本的变化情况。还请注意，您将按VM在线时间计费，而不是您实际使用它的时间。我们稍后会介绍限制成本的策略，但请记住这一点！
- en: Here, select `n1-standard-2`; this is a fairly basic machine that’s not going
    to cost much at all, as shown in [Figure 4-13](#selecting_a_machine_typedot).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里选择 `n1-standard-2`；这是一台非常基础的机器，几乎不会花费太多，如图 [4-13](#selecting_a_machine_typedot)
    所示。
- en: '![Selecting a machine type.](Images/gitc_0413.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![选择机器类型。](Images/gitc_0413.png)'
- en: Figure 4-13\. Selecting a machine type.
  id: totrans-152
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-13\. 选择机器类型。
- en: Specify a container? (nope)
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定一个容器？（不需要）
- en: We’re not going to fill this out. This is useful if you want to use a very specific
    setup using a custom container image that you’ve preselected or generated yourself.
    In fact, we could have preconfigured a container for you and skipped a bunch of
    setup that’s coming next. But then you wouldn’t have the opportunity to learn
    how to do those things for yourself, would you? So, for now, let’s just skip this
    option.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会填写这部分。如果您希望使用您预先选择或生成的自定义容器映像设置非常具体的设置，那么这将非常有用。实际上，我们本可以为您预配置一个容器并跳过接下来的一堆设置。但这样您就没有机会学习如何为自己做这些事情了，对吧？所以，现在，让我们跳过这个选项。
- en: Customize the boot disk
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义启动磁盘
- en: 'Like Machine Type, this is another really useful setting. You can define two
    things here: the OS that you want to use and the amount of disk space you want.
    The former is especially important if you need to use a particular type and version
    of OS. And, of course, the latter is important if you don’t want to run out of
    disk space halfway through your analysis.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 就像机器类型一样，这是另一个非常有用的设置。您可以在这里定义两件事情：您想要使用的操作系统及其版本以及您想要的磁盘空间量。前者在您需要使用特定类型和版本的操作系统时尤为重要。当然，后者在您不希望在分析进行到一半时磁盘空间用尽时尤为重要。
- en: By default, the system proposes a particular flavor of Linux OS, accompanied
    by a paltry 10 GB of disk space, as shown in [Figure 4-14](#choosing_a_different_boot_diskdot).
    We’re going to need a bigger boat.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，系统提供了一种特定版本的Linux操作系统，并配备了仅有10 GB的磁盘空间，如图 [4-14](#choosing_a_different_boot_diskdot)
    所示。我们需要更大的硬盘。
- en: '![Choosing a different boot disk. ](Images/gitc_0414.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![选择不同的启动磁盘。](Images/gitc_0414.png)'
- en: Figure 4-14\. Choosing a boot disk size and image.
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-14\. 选择启动磁盘大小和镜像。
- en: To access the settings menu for this, click Change. This opens a new screen
    with a menu of predefined options. You can also make your own custom images, or
    even find more images in [Google Cloud Marketplace](https://oreil.ly/sjiIf).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此设置菜单，请单击“更改”。这将打开一个新屏幕，显示预定义选项菜单。您还可以创建自己的自定义镜像，甚至在 [Google Cloud Marketplace](https://oreil.ly/sjiIf)
    中查找更多镜像。
- en: For our immediate purposes, we prefer Ubuntu 18.04 LTS, which is the most recent
    version of Ubuntu’s long-term release, as of this writing. It might not be as
    bleeding edge as Ubuntu 19.04, but the LTS, which stands for *long-term support*,
    guarantees that it’s being maintained for security vulnerabilities and package
    updates for five years from release. This Ubuntu image has a ton of what we already
    need, ready to go and installed, including various standard Linux tools and the
    GCP SDK command-line tools, which we will rely on quite heavily.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们目前的需求，我们更喜欢Ubuntu 18.04 LTS，这是Ubuntu的最新长期支持版本。它可能不像Ubuntu 19.04那样前沿，但是LTS（长期支持）版本保证了在发布后的五年内对其进行安全漏洞和软件包更新的维护。这个Ubuntu镜像已经包含了我们需要的大部分内容，包括各种标准Linux工具和我们将会非常依赖的GCP
    SDK命令行工具。
- en: Select Ubuntu in the Operating System menu, then select Ubuntu 18.04 LTS in
    the version menu, as shown in [Figure 4-15](#selecting_a_base_imagedot).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统菜单中选择Ubuntu，然后在版本菜单中选择Ubuntu 18.04 LTS，如图 [4-15](#selecting_a_base_imagedot)
    所示。
- en: '![Selecting a base image.](Images/gitc_0415.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![选择基础镜像。](Images/gitc_0415.png)'
- en: Figure 4-15\. Selecting a base image.
  id: totrans-164
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-15\. 选择基础镜像。
- en: At the bottom of the form, you can change the Boot disk Size to give yourself
    more space. As shown in [Figure 4-16](#setting_the_boot_disk_sizedot), go ahead
    and select 100 GB instead of the default 10 GB (the data we’re going to be working
    with can easily take up a lot of space). You can bump this up quite a bit more,
    depending on your dataset size and needs. Although you can’t easily adjust it
    after the VM launches, you do have the option of adding block storage volumes
    to the running instance after launch—think of it as the cloud equivalent of plugging
    in a USB drive. So if you run out of disk space, you won’t be totally stuck.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单底部，您可以更改启动磁盘大小以提供更多空间。如图 [4-16](#setting_the_boot_disk_sizedot) 所示，选择 100
    GB 而不是默认的 10 GB（我们即将处理的数据可能会占用大量空间）。您可以根据数据集的大小和需求进一步增加此大小。虽然在 VM 启动后无法轻松调整它，但您可以在启动后向正在运行的实例添加块存储卷的选项，将其视为插入
    USB 驱动器的云等效。因此，如果您的磁盘空间不足，您不会完全陷入困境。
- en: '![Setting the boot disk size.](Images/gitc_0416.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![设置启动磁盘大小。](Images/gitc_0416.png)'
- en: Figure 4-16\. Setting the boot disk size.
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-16\. 设置启动磁盘大小。
- en: After you’ve done all this, click Select; this closes the screen and returns
    you to the instance creation form where the “Boot disk” section should match the
    screenshot in [Figure 4-17](#the_updated_boot_disk_selectiondot).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成所有这些操作后，请单击“选择”; 这将关闭屏幕并将您返回到实例创建表单，其中“启动磁盘”部分应与图 [4-17](#the_updated_boot_disk_selectiondot)
    中的截图匹配。
- en: '![The updated boot disk selection.](Images/gitc_0417.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![更新的启动磁盘选择。](Images/gitc_0417.png)'
- en: Figure 4-17\. The updated boot disk selection.
  id: totrans-170
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-17\. 更新的启动磁盘选择。
- en: At the bottom of the form, click Create. This returns you to the page that lists
    Compute Engine VM instances, including your newly created VM instance. You might
    see a spinning icon in front of its name while the instance is being created and
    booted up, and then a green circle with a checkmark will appear when it is running
    and ready for use, as shown in [Figure 4-18](#viewing_the_vm_statusdot).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单底部，单击“创建”。这会将您返回到列出 Compute Engine VM 实例的页面，包括您新创建的 VM 实例。在创建和启动实例时，您可能会看到其名称前面的旋转图标，然后当实例正在运行并且准备就绪时，会出现一个带有复选标记的绿色圆圈，如图
    [4-18](#viewing_the_vm_statusdot) 所示。
- en: '![Viewing the VM status.](Images/gitc_0418.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![查看 VM 状态。](Images/gitc_0418.png)'
- en: Figure 4-18\. Viewing the VM status.
  id: totrans-173
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-18\. 查看 VM 状态。
- en: And voilà, your VM is ready for action.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: voilà，您的 VM 已准备就绪。
- en: Logging into Your VM by Using SSH
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录到您的 VM 使用 SSH
- en: 'There are several ways that you can access the VM after it’s running, which
    you can learn about in the GCP documentation. We’re going to show you the simplest
    way to do it, using the Google Cloud console and the built-in SSH terminal. It’s
    hard to beat: as soon as you see a green checkmark in the Google Cloud console,
    you can simply click the SSH option to open a drop-down menu, as illustrated in
    [Figure 4-19](#options_for_sshing_into_your_vm). Select the option “Open in a
    browser window,” and a few seconds later you should see an SSH terminal open to
    this VM.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VM 运行后，您可以通过多种方式访问它，您可以在 GCP 文档中了解详情。我们将向您展示最简单的方法，即使用 Google Cloud 控制台和内置的
    SSH 终端。这种方式几乎无懈可击：一旦在 Google Cloud 控制台中看到绿色复选标记，您只需点击 SSH 选项即可打开下拉菜单，如图 [4-19](#options_for_sshing_into_your_vm)
    所示。选择“在浏览器窗口中打开”，几秒钟后，您应该会看到一个打开到此 VM 的 SSH 终端。
- en: '![Options for SSHing into your VM](Images/gitc_0419.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![SSH 连接 VM 的选项](Images/gitc_0419.png)'
- en: Figure 4-19\. Options for SSHing into your VM.
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-19\. SSH 连接 VM 的选项。
- en: This opens a new window with a terminal that allows you to run commands from
    within the VM instance, as shown in [Figure 4-20](#vm_instance_terminaldot). It
    might take a minute to establish the connection.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个新窗口，其中包含一个终端，允许您从 VM 实例内运行命令，如图 [4-20](#vm_instance_terminaldot) 所示。建立连接可能需要一分钟的时间。
- en: '![VM instance terminal.](Images/gitc_0420.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![VM 实例终端。](Images/gitc_0420.png)'
- en: Figure 4-20\. VM instance terminal.
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-20\. VM 实例终端。
- en: Feel free to look around and get to know your brand-new VM; you’re going to
    spend a lot of time with it in the course of the next few chapters (but, like,
    in a good way).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 随意四处浏览并了解您全新的 VM；在接下来的几章中，您将花费大量时间与它亲密接触（但这是一种好方式）。
- en: Checking Your Authentication
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查您的身份验证
- en: 'You’re probably itching to run something interesting, but let’s begin by making
    sure your account credentials are set up properly so you can use the GCP command-line
    tools, which come preinstalled on the image we chose. In the SSH terminal, run
    the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能迫不及待地想要运行一些有趣的东西，但让我们首先确保您的帐户凭据已正确设置，以便您可以使用 GCP 命令行工具，这些工具已预先安装在我们选择的镜像上。在
    SSH 终端中，运行以下命令：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The line that starts with `[1]` shows you that by default, GCP has you logged
    in under a service account: the domain is *@developer.gserviceaccount.com*. This
    is fine for running tools within your VM, but if you want to be able to manage
    resources, including copying files out to GCS buckets, you need to do so under
    an account with the relevant permissions. It is possible to grant this service
    account all the various permissions that you’ll need for these exercises, but
    that would lead us a bit further into the guts of GCP account administration than
    we’d like to go at this juncture—we want to get you doing genomics work ASAP!
    So instead, let’s just use the original account that you used to create the project
    at the beginning of this chapter, given that it already has those permissions
    as a project owner.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `[1]` 开头的那一行告诉您，默认情况下，GCP 会让您以服务帐户身份登录：域为 *@developer.gserviceaccount.com*。这对于在您的虚拟机内运行工具是可以的，但如果您想要能够管理资源，包括将文件复制到
    GCS 存储桶中，您需要以具有相关权限的帐户进行操作。可以授予此服务帐户您在这些练习中所需的各种权限，但这将使我们深入到 GCP 帐户管理的内部，这不是我们目前想要的—我们希望尽快让您开始进行基因组学工作！因此，让我们使用在本章开头创建项目时使用的原始帐户，因为该帐户已经作为项目所有者拥有这些权限。
- en: 'To log in with that account, press 2 at the prompt. This triggers some interaction
    with the program; GCP will warn you that using your personal credentials on a
    VM is a security risk because if you give someone else access to the VM, they
    will be able to use your credentials:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该帐户登录，请在提示处按 2。这将触发与程序的一些交互；GCP 将警告您，在虚拟机上使用您的个人凭据是一种安全风险，因为如果您让其他人访问虚拟机，他们将能够使用您的凭据：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The solution: don’t share access to your personal VM.^([1](ch04.xhtml#ch04fn1))'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：不要共享对您个人虚拟机的访问权限。^([1](ch04.xhtml#ch04fn1))
- en: 'If you type Y for yes, the program will give you a link:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您输入 Y 以确认，程序将会给您一个链接：
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When you click the link or copy and paste it into your browser, you are presented
    with a Google login page. Log in with the same account you used for the GCP to
    get your authentication code and then copy and paste that back into your terminal
    window. The `gcloud` utility will confirm your login identity and ask you to select
    the project ID you want to use from the list of projects you have access to. It
    will also offer the option to set your preferred compute and storage zone, which
    should match what you set earlier when you created the VM. If you’re not seeing
    what you expect in the project ID list, you can always double-check the [resource
    management page in the GCP console](https://oreil.ly/T50ev).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击链接或将其复制粘贴到浏览器中时，您将看到一个 Google 登录页面。使用您在 GCP 中使用的相同帐户登录以获取您的身份验证代码，然后将其复制粘贴回您的终端窗口。`gcloud`
    实用程序将确认您的登录身份，并要求您从您可以访问的项目列表中选择要使用的项目 ID。它还将提供设置您首选的计算和存储区域的选项，这应该与您在创建虚拟机时设置的相匹配。如果您在项目
    ID 列表中看到的不是您期望的内容，您可以随时再次检查 [GCP 控制台中的资源管理页面](https://oreil.ly/T50ev)。
- en: Copying the Book Materials to Your VM
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将书籍材料复制到您的虚拟机
- en: 'Throughout the next few chapters, you’re going to run real GATK commands and
    workflows on your VM, so you need to retrieve the example data, source code, and
    a couple of software packages. We’ve bundled most of that in a single place: a
    Cloud Storage bucket called `genomics-in-the-cloud`. The only piece that is separate
    is the source code, which we provide in GitHub.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，您将在您的虚拟机上运行真实的 GATK 命令和工作流程，因此您需要获取示例数据、源代码和一些软件包。我们将大部分内容打包在一个地方：一个名为
    `genomics-in-the-cloud` 的云存储桶中。唯一分开的部分是源代码，我们在 GitHub 上提供。
- en: 'First, you’re going to copy the data bundle from the bucket to your VM using
    `gsutil`, the GCP storage utility that we already used earlier in the Cloud Shell
    portion of this chapter. In your VM’s terminal window, make a new directory called
    `**book**`, and then run the `gsutil` command to copy the book data bundle to
    the storage space associated with your VM:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将使用 `gsutil` 将数据包从存储桶复制到您的虚拟机中，`gsutil` 是我们在本章 Cloud Shell 部分中已经使用过的 GCP
    存储实用程序。在您的虚拟机终端窗口中，创建一个名为 `**book**` 的新目录，然后运行 `gsutil` 命令将书籍数据包复制到与您的虚拟机关联的存储空间中：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will copy about 10 GB of data to your VM’s storage, so it might take a
    few minutes even with the `-m` flag enabling parallel downloads. As you’ll see
    later, it is possible to run some analysis commands directly on files in Cloud
    Storage without copying them first, but we want to keep things as simple as possible
    in the beginning.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将复制大约10 GB的数据到您的VM存储中，因此即使使用了启用并行下载的`-m`标志，可能需要几分钟时间。正如您稍后将看到的，即使没有先复制它们，也可以直接在云存储中的文件上运行一些分析命令，但我们希望在开始时尽可能保持简单。
- en: 'Now, go ahead and retrieve the source code from the [public repository on GitHub](https://oreil.ly/genomics-repo).
    We’re making the code available there because it’s a highly popular platform for
    sharing code under *version control*, and we’re committed to providing long-term
    maintenance for the code we use in the book. To get a copy on your VM, first use
    `cd` to move into the newly created *book* directory and then use the `git clone`
    command to copy the contents of the repository:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前往[GitHub上的公共代码库](https://oreil.ly/genomics-repo)检索源代码。我们将代码放在那里是因为它是一个非常流行的用于在*版本控制*下共享代码的平台，我们承诺为书中使用的代码提供长期维护。要在您的VM上获取副本，请首先使用`cd`命令移动到新创建的*book*目录，然后使用`git
    clone`命令复制存储库的内容：
- en: '[PRE27]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This creates a directory (*~book/code*) that includes all the sample code we
    use throughout the book. Not only that, but it will be set up as an active Git
    repository, so you can get the latest changes by running the `git pull` command
    in the code directory, as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个目录（*~book/code*），其中包含我们在整本书中使用的所有示例代码。不仅如此，它将设置为一个活跃的Git仓库，因此你可以通过在代码目录中运行`git
    pull`命令来获取最新的更改，如下所示：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With that, you should now have the latest and greatest version of the book code.
    To find out what has changed since the original publication, check out the *README*
    text file in the code directory.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该有了最新和最好的书本代码。要了解自原始出版以来的变化，请查看代码目录中的*README*文本文件。
- en: Installing Docker on Your VM
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的VM上安装Docker
- en: 'You’re going to be working with Docker on your VM, so let’s make sure that
    you can run it. If you simply run the command `docker` in the terminal, you’ll
    get an error message because Docker does not come preinstalled on the VM:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在VM上使用Docker工作，因此让我们确保您可以运行它。如果您在终端中简单地运行`docker`命令，您将收到一个错误消息，因为Docker未预安装在VM上：
- en: '[PRE29]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The error message helpfully points out how to remedy the situation using a
    preinstalled package called `snap`, but we’re actually going to use a slightly
    different way of installing Docker: we’re going to download and run a script from
    the Docker website that will largely automate the installation process. This way,
    you’ll know what to do if you find yourself needing to install Docker somewhere
    that doesn’t have a built-in package manager option.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息友好地指出了如何使用预安装的`snap`软件包来修复问题，但我们实际上将使用一个稍微不同的方法来安装Docker：我们将从Docker网站下载并运行一个脚本，这将大大自动化安装过程。这样，如果你需要在没有内置软件包管理器选项的地方安装Docker，你就会知道该怎么做。
- en: 'Run the following command to install Docker on the VM:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令在VM上安装Docker：
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This might take a little while to complete, so let’s take that time to examine
    the command in a bit more detail. First, we’re using a convenient little utility
    called `curl` (short for *Client URL*) to download the installation script from
    the Docker website URL we provided, with a few command parameters (`-sSL`) that
    instruct the program to follow any redirection links and save the output as a
    file. Then, we use the pipe character (`|`) to hand that output file over to a
    second command, `sh`, which means “run that script that we just gave you.” The
    first line of output lets you know what it’s doing: `Executing docker install
    script` (we omitted parts of the preceding output for brevity).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一些时间才能完成，所以让我们花点时间更详细地检查命令。首先，我们使用一个方便的小工具叫做`curl`（缩写为*Client URL*）从我们提供的Docker网站URL下载安装脚本，带有一些命令参数（`-sSL`），这些参数指示程序跟随任何重定向链接并将输出保存为文件。然后，我们使用管道字符（`|`）将该输出文件传递给第二个命令`sh`，意思是“运行我们刚刚给你的那个脚本”。输出的第一行让你知道它正在做什么：“执行docker安装脚本”（出于简洁起见，我们省略了前面的输出部分）。
- en: 'When it finishes, the script prompts you to run the `usermod` command in the
    example that follows in order to grant yourself the ability to run Docker commands
    without using `sudo` each time. Invoking `sudo docker` can result in output files
    being owned by root, making it difficult to manage or access them later, so it’s
    really important to do this step:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成时，脚本会提示您运行接下来的示例中的`usermod`命令，以授予您无需每次使用`sudo`运行Docker命令的能力。调用`sudo docker`可能导致输出文件由root所有，使得以后难以管理或访问它们，因此执行此步骤非常重要：
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This does not produce any output; we’ll test in a minute whether it worked
    properly. First, however, you need to log out of your VM and then back in again.
    Doing so will make the system reevaluate your Unix group membership, which is
    necessary for the change you just made to take effect. Simply type `**exit**`
    (or press Ctrl+D) at the command prompt:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会产生任何输出；我们将在一分钟内测试它是否正常工作。但是，首先，您需要注销VM，然后再次登录。这样做将使系统重新评估您的Unix组成员资格，这对刚刚做出的更改生效是必要的。只需在命令提示符处键入`**exit**`（或按Ctrl+D）：
- en: '[PRE32]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This closes the terminal window to your VM. Go back to the GCP console, find
    your VM in the list of Compute Engine instances, and then click SSH to log back
    in again. This probably feels like a lot of hoops to jump through, but hang in
    there; we’re getting to the good part.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这将关闭到您的VM的终端窗口。返回GCP控制台，在计算引擎实例列表中找到您的VM，然后单击SSH重新登录。这可能感觉需要经过很多步骤，但请坚持下去；我们即将进入精彩部分。
- en: Setting Up the GATK Container Image
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置GATK容器镜像
- en: 'When you’re back in your VM, test your Docker installation by pulling the GATK
    container, which we use in the very next chapter:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当您回到VM时，请通过拉取GATK容器来测试您的Docker安装，我们将在接下来的章节中使用它：
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As a reminder, the last bit after the container name is the version tag, which
    you can change to get a different version than what we’ve specified here. Note
    that if you change the version, some commands might no longer work. We can’t guarantee
    that all code examples are going to be future-compatible, especially for the newer
    tools, some of which are still under active development. As noted earlier, for
    updated materials, see [this book’s GitHub repository](https://oreil.ly/genomics-repo).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提醒，容器名称后的最后一部分是版本标签，您可以更改以获取与我们在此处指定的不同版本。请注意，如果更改版本，某些命令可能不再起作用。我们无法保证所有代码示例都将与未来兼容，特别是对于仍在积极开发中的新工具。如前所述，有关更新的材料，请参见[本书的GitHub存储库](https://oreil.ly/genomics-repo)。
- en: The GATK container image is quite large, so the download might take a little
    while. The good news is that next time you need to pull a GATK image (e.g., to
    get another release), Docker will pull only the components that have been updated,
    so it will go faster.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: GATK容器镜像相当庞大，因此下载可能需要一些时间。好消息是，下次需要拉取GATK镜像（例如，获取另一个版本）时，Docker只会拉取已更新的组件，因此速度会更快。
- en: Note
  id: totrans-220
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Here we’re pulling the GATK image from the Google Container Repository (GCR)
    because GCR is on the same network as the VM we’re running on, so it will be faster
    than pulling it from Docker Hub. However, if you’re working on a different platform,
    you might find it faster to pull the image from the GATK repository on Docker
    Hub. To do so, change the `us.gcr.io/broad-gatk` part of the image path to just
    `**broadinstitute**`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从Google容器存储库（GCR）中拉取GATK镜像，因为GCR与我们正在运行的VM位于同一网络上，因此比从Docker Hub拉取要快。但是，如果您在不同平台上工作，您可能会发现从Docker
    Hub上的GATK存储库拉取镜像更快。要这样做，请将镜像路径中的`us.gcr.io/broad-gatk`部分更改为`**broadinstitute**`。
- en: 'Now, remember the instructions you followed earlier in this chapter to spin
    up a container with a mounted folder? You’re going to use that again to make the
    `book` directory accessible to the GATK container:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，记得之前在本章中遵循的指令来启动一个挂载文件夹的容器吗？您将再次使用它来使`book`目录对GATK容器可访问：
- en: '[PRE34]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should now be able to browse the `book` directory that you set up in your
    VM from within the container. It will be located under */home/book*. Finally,
    to double-check that GATK itself is working as expected, try running the command
    `gatk` at the command line from within your running container. If everything is
    working properly, you should see some text output that outlines basic GATK command-line
    syntax and a few configuration options:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够从容器内部浏览您在VM中设置的`book`目录。它将位于*/home/book*下。最后，为了双重检查GATK本身是否按预期工作，请尝试在运行中的容器内部的命令行中运行`gatk`命令。如果一切正常，您应该会看到一些文本输出，概述了基本的GATK命令行语法和一些配置选项：
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We discuss what that all means in loving detail in [Chapter 5](ch05.xhtml#first_steps_with_gatk);
    for now, you’re done setting up the environment that you’ll be using to run GATK
    tools over the course of the next three chapters.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 5 章](ch05.xhtml#first_steps_with_gatk) 中详细讨论这一切的含义；目前，您已经设置好了在接下来的三章中运行
    GATK 工具所需的环境。
- en: Stopping Your VM…to Stop It from Costing You Money
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止您的 VM…以防止它花费您的钱
- en: 'The VM you just finished setting up is going to come in handy throughout the
    book; you’ll come back to this VM for many of the exercises in the next few chapters.
    However, as long as it’s up and running, it’s costing you either credits or actual
    money. The simplest way to deal with that is to stop it: put it on pause whenever
    you’re not actively using it.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚设置完毕的 VM 将在整本书中派上用场；在接下来的几章中，您将回到这个 VM 进行许多练习。但是，只要它在运行，就会花费您积分或实际货币。处理这个问题的最简单方法是停止它：在您不活跃使用时将其暂停。
- en: You can restart it on demand; it just takes a minute or two to get it back up
    and running, and it will retain all environment settings, the history of what
    you ran previously, and whatever data you have in local storage. Note that you
    will be charged a small fee for that storage even while the VM is not running
    and you’re not getting charged for the VM itself. In our opinion, this is well
    worth it for the convenience of being able to come back to your VM after an arbitrary
    amount of time and just pick up your work where you left off.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要重新启动它；只需一两分钟即可使其恢复运行状态，并且将保留所有环境设置、先前运行的历史记录以及本地存储中的任何数据。请注意，即使 VM 未运行，您也将为该存储空间支付一小笔费用，并且您不会因
    VM 本身而被收费。在我们看来，这是非常值得的，因为您可以在任意时间回到您的 VM 并继续您离开的工作。
- en: To stop your VM, in the GCP console, go to the VM instances management page,
    as shown previously. Find your instance and click the vertical three-dot symbol
    on the right to open the menu of controls, and then select Stop, as shown in [Figure 4-21](#stoppingcomma_startingcomma_or_deleting).
    The process might take a couple of minutes to complete, but you can safely navigate
    away from that page. To restart your instance later on, just follow the same steps
    but click Start in the control menu.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止您的 VM，在 GCP 控制台中，转到 VM 实例管理页面，如前所示。找到您的实例，单击右侧的垂直三点符号以打开控件菜单，然后选择停止，如 [图 4-21](#stoppingcomma_startingcomma_or_deleting)
    所示。该过程可能需要几分钟才能完成，但您可以安全地离开该页面。要稍后重新启动您的实例，只需按照相同的步骤，但在控件菜单中单击启动。
- en: '![Stopping, starting, or deleting your VM instance.](Images/gitc_0421.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![停止、启动或删除您的 VM 实例。](Images/gitc_0421.png)'
- en: Figure 4-21\. Stopping, starting, or deleting your VM instance.
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-21\. 停止、启动或删除您的 VM 实例。
- en: Alternatively, you can delete your VM entirely, but keep in mind that deleting
    the VM will delete all locally stored data too, so make sure you save anything
    you care about to a storage bucket first.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以完全删除您的 VM，但请记住，删除 VM 将同时删除所有本地存储的数据，因此请确保您首先将您关心的任何内容保存到存储桶中。
- en: Configuring IGV to Read Data from GCS Buckets
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 IGV 以从 GCS 存储桶中读取数据
- en: 'Just one more small step remains before you move on to the next chapter: we’re
    going to install and configure a genome browser called Integrated Genome Viewer
    (IGV) that can work directly with files in GCP. That will allow you to examine
    sequence data and variant calls without needing to copy the files to your local
    machine.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一章之前，还有一个小步骤：我们将安装和配置一个名为集成基因组浏览器（IGV）的基因组浏览器，它可以直接与 GCP 中的文件一起使用。这将使您能够查看序列数据和变异调用，而无需将文件复制到本地计算机。
- en: First, if you don’t have it installed yet on your local machine, get the [IGV
    program from the website](https://oreil.ly/bEPS_) and follow the installation
    instructions. If you already have a copy, consider updating it to the latest version;
    we are using 2.7.2 (macOS version). Once you have the application open, choose
    View > Preferences from the top menu bar, as shown in [Figure 4-22](#selecting_the_preferences_menu_itemdot).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果您尚未在本地计算机上安装 [IGV 程序](https://oreil.ly/bEPS_)，请从网站上获取并按照安装说明进行安装。如果您已经有一份副本，请考虑更新到最新版本；我们使用的是
    2.7.2 版本（macOS 版本）。打开应用程序后，从顶部菜单栏中选择“查看” > “首选项”，如 [图 4-22](#selecting_the_preferences_menu_itemdot)
    所示。
- en: '![Selecting the Preferences menu item.](Images/gitc_0422.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![选择“首选项”菜单项。](Images/gitc_0422.png)'
- en: Figure 4-22\. Selecting the Preferences menu item.
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-22\. 选择“首选项”菜单项。
- en: This opens the Preferences pane, shown in [Figure 4-23](#the_igv_preferences_panedot).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开首选项面板，如 [Figure 4-23](#the_igv_preferences_panedot) 所示。
- en: In the Preferences pane, Select the “Enable Google access” checkbox, click Save,
    and then quit IGV and reopen it to force a refresh of the top menu bar. You should
    now see a Google menu item that was not there previously; click it and select
    Login, as shown in [Figure 4-24](#selecting_the_google_login_menu_itemdot), to
    set up IGV with your Google account credentials.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在首选项面板中，选择“启用 Google 访问”复选框，点击保存，然后退出 IGV 并重新打开以强制刷新顶部菜单栏。现在，你应该能看到一个之前不存在的
    Google 菜单项；点击它，选择登录，如 [Figure 4-24](#selecting_the_google_login_menu_itemdot)
    所示，使用你的 Google 帐户凭据设置 IGV。
- en: '![The IGV Preferences pane.](Images/gitc_0423.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![IGV 首选项面板。](Images/gitc_0423.png)'
- en: Figure 4-23\. The IGV Preferences pane.
  id: totrans-242
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-23\. IGV 首选项面板。
- en: '![Selecting the Google Login menu item.](Images/gitc_0424.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![选择 Google 登录菜单项。](Images/gitc_0424.png)'
- en: Figure 4-24\. Selecting the Google Login menu item.
  id: totrans-244
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-24\. 选择 Google 登录菜单项。
- en: This will take you to a Google login page in your web browser; follow the prompts
    to allow IGV to access relevant permissions on your Google account. When this
    is complete, you should see a web page that simply says OK. Let’s switch back
    to IGV and test that it works. From the top-level menu, click Files > Load from
    URL, as shown in [Figure 4-25](#the_quotload_from_urlquot_menu_itemdot), making
    sure not to select one of the other options by mistake (they look similar, so
    it’s easy to get tripped up). Make sure also that the reference drop-down menu
    in the upper-left corner of the IGV window is set to “Human hg19.”
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你的网络浏览器中带你到 Google 登录页面；按照提示允许 IGV 访问你的 Google 帐户的相关权限。完成后，你应该会看到一个简单显示“OK”的网页。现在切换回
    IGV 并测试它是否工作。从顶部菜单中点击文件 > 从 URL 加载，如 [Figure 4-25](#the_quotload_from_urlquot_menu_itemdot)
    所示，确保不要误选其他选项（它们看起来相似，所以很容易搞错）。同时确保 IGV 窗口左上角的参考下拉菜单设置为“Human hg19”。
- en: Note
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注：
- en: If you’re confused about what is different between the human references, see
    the notes in [“The Reference Genome as Common Framework”](ch02.xhtml#the_reference_genome_as_common_framewor)
    about hg19 and GRCh38.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对人类参考的区别感到困惑，请参考关于 hg19 和 GRCh38 的笔记 [“作为公共框架的参考基因组”](ch02.xhtml#the_reference_genome_as_common_framewor)。
- en: '![The "Load from URL" menu item.](Images/gitc_0425.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![“从 URL 加载”菜单项。](Images/gitc_0425.png)'
- en: Figure 4-25\. The Load from URL menu item.
  id: totrans-249
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-25\. “从 URL 加载”菜单项。
- en: Finally, enter the GCS file path for one of the sample BAM files we provide
    in the book data bundle in the dialog window that pops up (e.g., *mother.bam*,
    as shown in [Figure 4-26](#the_quotload_from_urlquot_dialog_boxdot)), and then
    click OK. Remember, you can get a list of files in the bucket by using `gsutil`
    from your VM or from Cloud Shell, or you can browse the contents of the bucket
    by using the [Google Cloud console storage browser](https://oreil.ly/1iQmv). If
    you use the browser interface to get the path to the file, you’ll need to compose
    the GCS file path by stripping off the first part of the URL before the bucket
    name; for instance, remove *https://console.cloud.google.com/storage/browser*
    and replace that with `**gs://**`. Do the same for the BAM’s accompanying index
    file, which should have the same filename and path but ends in *.bai*.^([2](ch04.xhtml#idm45625633939976))
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在弹出的对话窗口中输入书籍数据包中提供的样本 BAM 文件之一的 GCS 文件路径（例如 *mother.bam*，如 [Figure 4-26](#the_quotload_from_urlquot_dialog_boxdot)
    所示），然后点击确定。记住，你可以使用 `gsutil` 从你的虚拟机或 Cloud Shell 获取桶中的文件列表，或者你可以使用 [Google Cloud
    控制台存储浏览器](https://oreil.ly/1iQmv) 浏览桶的内容。如果你使用浏览器界面获取文件路径，你需要通过去掉 URL 中桶名前的第一部分来组成
    GCS 文件路径；例如，移除 *https://console.cloud.google.com/storage/browser* 并将其替换为 `**gs://**`。对于
    BAM 的伴随索引文件，路径和文件名相同，但以 *.bai* 结尾。^([2](ch04.xhtml#idm45625633939976))
- en: '![The "Load from URL" dialog box.](Images/gitc_0426.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![“从 URL 加载”对话框。](Images/gitc_0426.png)'
- en: Figure 4-26\. The Load from URL dialog box.
  id: totrans-252
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: Figure 4-26\. “从 URL 加载”对话框。
- en: This will make the data available to you in IGV as a new data track, but by
    default nothing will be loaded in the main viewer. To check that you can view
    data, in the search window, enter the genomic coordinates `**20:9,999,830-10,000,170**`
    and then click Go. These coordinates will take you to the 10 millionth DNA base
    ±170 on the 20th human chromosome, as shown in [Figure 4-27](#igv_view_of_a_bam_file_located_in_a_gcs),
    where you’ll see the left-side edge of the slice of sequence data that we provide
    in this sample file. We explain in detail how to interpret the visual output of
    IGV in [Chapter 5](ch05.xhtml#first_steps_with_gatk), when we use it to investigate
    the result of a real (small) analysis.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使数据作为新数据轨迹在IGV中可用，但默认情况下主视图中不会加载任何内容。要检查是否可以查看数据，请在搜索窗口中输入基因组坐标`**20:9,999,830-10,000,170**`，然后点击Go。这些坐标将带您到第20条人类染色体上第1千万个DNA碱基的左侧边界附近±170的位置，如[图4-27](#igv_view_of_a_bam_file_located_in_a_gcs)所示，您将看到我们在此样本文件中提供的序列数据片段的左侧边缘。我们将在[第5章](ch05.xhtml#first_steps_with_gatk)详细解释如何解读IGV的视觉输出，当我们用它来研究一个真实（小）分析的结果时。
- en: '![IGV view of a BAM file located in a GCS bucket.](Images/gitc_0427.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![IGV查看位于GCS存储桶中的BAM文件。](Images/gitc_0427.png)'
- en: Figure 4-27\. IGV view of a BAM file located in a GCS bucket.
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-27。IGV查看位于GCS存储桶中的BAM文件。
- en: IGV retrieves only small slices of data at a time, so the transfer should be
    very fast unless you have a particularly slow internet connection. Do keep in
    mind, however, that GCP, like all commercial cloud providers, will charge an [egress
    fee](https://oreil.ly/rktm2) for transferring data out of the cloud. On the bright
    side, it’s a small fee, proportional to the amount of data you transfer. So the
    cost of viewing slices of data in IGV is trivial—on the order of fractions of
    pennies—and it is definitely preferable to what it would cost to transfer the
    entire file for offline browsing!
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: IGV一次只检索小片段的数据，因此除非您的互联网连接特别慢，否则传输速度应该非常快。但请注意，像所有商业云提供商一样，GCP将对从云中传输数据收取[出口费用](https://oreil.ly/rktm2)。好消息是，这是一笔很小的费用，与您传输的数据量成比例。因此，在IGV中查看数据片段的成本微乎其微——大约是几分钱的级别——这绝对比将整个文件传输到离线浏览器中要划算得多！
- en: You can view the contents of other data files, like VCF files, using the same
    set of operations, as long as the files are stored in a GCP bucket. Unfortunately,
    it means that this won’t work for files that are on the local storage of your
    VM, so anytime you want to examine one of those, you’ll need to copy it to a bucket
    first. You’re going to get really friendly with `gsutil` in no time.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用相同的操作方式查看其他数据文件的内容，如VCF文件，只要这些文件存储在GCP存储桶中。不幸的是，这意味着这对于存储在VM本地存储中的文件不起作用，因此每当您想要检查这些文件之一时，您需要先将其复制到存储桶中。您将很快熟悉`gsutil`工具。
- en: 'Oh, one last thing while you have IGV open: click the little yellow callout
    bubble in the IGV window toolbar, which controls the behavior of the detail viewer,
    as shown in [Figure 4-28](#changing_the_behavior_of_the_detail_vie). Do yourself
    a favor and switch the setting from Show Details on Hover to Show Details on Click.
    Whichever action you choose will trigger the appearance of little dialog that
    gives you detailed information about any part of the data that you either click
    or hover over; for example, for a sequence read, it will give you all the mapping
    information as well as the full sequence and base qualities. You can try it out
    now with the data you just loaded. As you’ll see, the detail display functionality
    in and of itself is very convenient, but the “on Hover” version of this behavior
    can be a bit overwhelming when you’re new to the interface; hence, our recommendation
    to switch to “on Click.”'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开IGV时，请注意最后一件事：点击IGV窗口工具栏中的小黄色信息气泡，它控制详细查看器的行为，如[图4-28](#changing_the_behavior_of_the_detail_vie)所示。不妨将设置从“悬停显示详细信息”改为“点击显示详细信息”。无论您选择哪种操作，都将触发一个小对话框的出现，详细显示您点击或悬停的数据部分的所有映射信息，例如序列读取时，将显示所有映射信息以及完整序列和碱基质量。您可以立即尝试加载的数据来验证。如您所见，详细显示功能本身非常方便，但在您初次接触界面时，“悬停”版本的此行为可能会有些压倒性，因此我们建议切换到“点击”模式。
- en: '![Changing the behavior of the detail viewer from "on Hover" to "on Click."](Images/gitc_0428.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![更改详细查看器的行为，从“悬停”改为“点击”。](Images/gitc_0428.png)'
- en: Figure 4-28\. Changing the behavior of the detail viewer from “on Hover” to
    “on Click.”
  id: totrans-260
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-28。更改详细查看器的行为，从“悬停”改为“点击”。
- en: Wrap-Up and Next Steps
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结和下一步
- en: In this chapter, we showed you how to get started with GCP resources, from creating
    an account, using the super-basic Cloud Shell, and then graduating to your own
    custom VM. You learned how to manage files in GCS, run Docker containers, and
    administer your VM. Finally, you retrieved the book data and source code, finished
    setting up your custom VM to work with the GATK container, and set up IGV to view
    data stored in buckets. In [Chapter 5](ch05.xhtml#first_steps_with_gatk), we get
    you started with GATK itself, and before you know it, you’ll be running real genomics
    tools on example data in the cloud.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您展示了如何开始使用 GCP 资源，从创建帐户，使用超基本的 Cloud Shell，然后升级到您自己的自定义 VM。您学会了如何管理
    GCS 中的文件，运行 Docker 容器，并管理您的 VM。最后，您检索了书籍数据和源代码，完成了设置您的自定义 VM 以与 GATK 容器一起工作，并设置了
    IGV 以查看存储在存储桶中的数据。在[第五章](ch05.xhtml#first_steps_with_gatk)，我们将帮助您开始使用 GATK 自身，很快，您将在云中的示例数据上运行真正的基因组学工具。
- en: ^([1](ch04.xhtml#ch04fn1-marker)) Keep in mind that if you create accounts for
    other users in your GCP project, they will be able to SSH to your VMs as well.
    It is possible to further restrict access to your VMs in a shared project, but
    that is beyond the simple introduction we’re presenting here.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.xhtml#ch04fn1-marker)) 请记住，如果您为 GCP 项目中的其他用户创建帐户，他们也可以通过 SSH 连接到您的
    VM。在共享项目中进一步限制对您的 VM 访问是可能的，但这超出了我们在此处简单介绍的范围。
- en: ^([2](ch04.xhtml#idm45625633939976-marker)) For example, *https://console.cloud.google.com/storage/browser/genomics-in-the-cloud/v1/data/germline/bams/mother.bam*
    becomes *gs://genomics-in-the-cloud/v1/data/germline/bams/mother.bam*.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch04.xhtml#idm45625633939976-marker)) 例如，*https://console.cloud.google.com/storage/browser/genomics-in-the-cloud/v1/data/germline/bams/mother.bam*
    变成了 *gs://genomics-in-the-cloud/v1/data/germline/bams/mother.bam*。
