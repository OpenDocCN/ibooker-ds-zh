- en: Chapter 25\. General Matplotlib Tips
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第25章。Matplotlib一般提示
- en: Before we dive into the details of creating visualizations with Matplotlib,
    there are a few useful things you should know about using the package.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究使用Matplotlib创建可视化的详细信息之前，有几个有用的事情您应该了解如何使用这个包。
- en: Importing Matplotlib
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入Matplotlib
- en: 'Just as we use the `np` shorthand for NumPy and the `pd` shorthand for Pandas,
    we will use some standard shorthands for Matplotlib imports:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们使用`np`简写代表NumPy和`pd`简写代表Pandas一样，我们将使用一些标准缩写来导入Matplotlib：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `plt` interface is what we will use most often, as you shall see throughout
    this part of the book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将最常用的是`plt`接口，您将在本书的这一部分中看到。
- en: Setting Styles
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置样式
- en: 'We will use the `plt.style` directive to choose appropriate aesthetic styles
    for our figures. Here we will set the `classic` style, which ensures that the
    plots we create use the classic Matplotlib style:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`plt.style`指令为我们的图形选择合适的美学样式。在这里，我们将设置`classic`样式，确保我们创建的图使用经典的Matplotlib样式：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Throughout this chapter, we will adjust this style as needed. For more information
    on stylesheets, see [Chapter 34](ch34.xhtml#section-0411-settings-and-stylesheets).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将根据需要调整这种样式。有关样式表的更多信息，请参阅[第34章](ch34.xhtml#section-0411-settings-and-stylesheets)。
- en: show or No show? How to Display Your Plots
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示还是不显示？如何显示您的图形
- en: A visualization you can’t see won’t be of much use, but just how you view your
    Matplotlib plots depends on the context. The best use of Matplotlib differs depending
    on how you are using it; roughly, the three applicable contexts are using Matplotlib
    in a script, in an IPython terminal, or in a Jupyter notebook.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您看不到的可视化对您没有多大用处，但是您查看Matplotlib图形的方式取决于上下文。Matplotlib的最佳用法因您如何使用它而异；大致上，适用的三种上下文是在脚本中使用Matplotlib，在IPython终端中使用Matplotlib或在Jupyter笔记本中使用Matplotlib。
- en: Plotting from a Script
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从脚本绘图
- en: If you are using Matplotlib from within a script, the function `plt.show` is
    your friend. `plt.show` starts an event loop, looks for all currently active `Figure`
    objects, and opens one or more interactive windows that display your figure or
    figures.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在脚本中使用Matplotlib，则函数`plt.show`是您的好帮手。`plt.show`启动一个事件循环，查找所有当前活动的`Figure`对象，并打开一个或多个交互窗口来显示您的图形或图形。
- en: 'So, for example, you may have a file called *myplot.py* containing the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，您可能有一个名为*myplot.py*的文件，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can then run this script from the command-line prompt, which will result
    in a window opening with your figure displayed:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以从命令行提示符运行此脚本，将导致一个窗口打开，并显示您的图形：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `plt.show` command does a lot under the hood, as it must interact with your
    system’s interactive graphical backend. The details of this operation can vary
    greatly from system to system and even installation to installation, but Matplotlib
    does its best to hide all these details from you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`plt.show`命令在幕后做了很多工作，因为它必须与系统的交互式图形后端进行交互。此操作的详细信息在不同的系统甚至不同的安装中可能会有很大的差异，但是Matplotlib会尽力隐藏所有这些细节。'
- en: 'One thing to be aware of: the `plt.show` command should be used *only once*
    per Python session, and is most often seen at the very end of the script. Multiple
    `show` commands can lead to unpredictable backend-dependent behavior, and should
    mostly be avoided.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事需要注意：`plt.show`命令应该在每个Python会话中*仅使用一次*，并且最常见的情况是在脚本的最后。多个`show`命令可能会导致不可预测的基于后端的行为，并且应该尽量避免。
- en: Plotting from an IPython Shell
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从IPython Shell绘图
- en: 'Matplotlib also works seamlessly within an IPython shell (see [Part I](part01.xhtml#section-0100-ipython-beyond-normal-python)).
    IPython is built to work well with Matplotlib if you specify Matplotlib mode.
    To enable this mode, you can use the `%matplotlib` magic command after starting
    `ipython`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib在IPython shell中也可以无缝运行（请参阅[第I部分](part01.xhtml#section-0100-ipython-beyond-normal-python)）。IPython是构建用于与Matplotlib很好配合的，如果您指定Matplotlib模式。要启用此模式，可以在启动`ipython`后使用`%matplotlib`魔术命令：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, any `plt` plot command will cause a figure window to open, and
    further commands can be run to update the plot. Some changes (such as modifying
    properties of lines that are already drawn) will not draw automatically: to force
    an update, use `plt.draw`. Using `plt.show` in IPython’s Matplotlib mode is not
    required.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，任何`plt`绘图命令都将导致一个图形窗口打开，并且可以运行进一步的命令来更新绘图。某些更改（例如修改已经绘制的线的属性）不会自动绘制：要强制更新，请使用`plt.draw`。在IPython的Matplotlib模式中不需要使用`plt.show`。
- en: Plotting from a Jupyter Notebook
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Jupyter笔记本绘图
- en: The Jupyter notebook is a browser-based interactive data analysis tool that
    can combine narrative, code, graphics, HTML elements, and much more into a single
    executable document (see [Part I](part01.xhtml#section-0100-ipython-beyond-normal-python)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 是一个基于浏览器的交互式数据分析工具，可以将叙述、代码、图形、HTML 元素等多种内容组合到一个可执行文档中（参见[第
    I 部分](part01.xhtml#section-0100-ipython-beyond-normal-python)）。
- en: 'Plotting interactively within a Jupyter notebook can be done with the `%matplotlib`
    command, and works in a similar way to the IPython shell. You also have the option
    of embedding graphics directly in the notebook, with two possible options:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jupyter Notebook 中进行交互式绘图可以通过 `%matplotlib` 命令完成，其工作方式类似于 IPython Shell。您还可以选择直接在笔记本中嵌入图形，有两种可能的选项：
- en: '`%matplotlib inline` will lead to *static* images of your plot embedded in
    the notebook.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%matplotlib inline` 将导致您的图形以*静态*图像嵌入到笔记本中。'
- en: '`%matplotlib notebook` will lead to *interactive* plots embedded within the
    notebook.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%matplotlib notebook` 将导致交互式图形嵌入到笔记本中。'
- en: 'For this book, we will generally stick with the default, with figures rendered
    as static images (see [Figure 25-1](#fig_0400-introduction-to-matplotlib_files_in_output_15_0)
    for the result of this basic plotting example):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，通常会使用默认设置，图形渲染为静态图像（见[图 25-1](#fig_0400-introduction-to-matplotlib_files_in_output_15_0)
    以查看此基本绘图示例的结果）：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![output 15 0](assets/output_15_0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![output 15 0](assets/output_15_0.png)'
- en: Figure 25-1\. Basic plotting example
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-1\. 基本绘图示例
- en: Saving Figures to File
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图形保存到文件中
- en: 'One nice feature of Matplotlib is the ability to save figures in a wide variety
    of formats. Saving a figure can be done using the `savefig` command. For example,
    to save the previous figure as a PNG file, we can run this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的一个很好的特性是能够以多种格式保存图形。使用 `savefig` 命令可以保存图形。例如，要将前面的图形保存为 PNG 文件，可以运行以下命令：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We now have a file called *my_figure.png* in the current working directory:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在当前工作目录中有一个名为*my_figure.png*的文件：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To confirm that it contains what we think it contains, let’s use the IPython
    `Image` object to display the contents of this file (see [Figure 25-2](#fig_0400-introduction-to-matplotlib_files_in_output_21_0)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认它包含我们认为包含的内容，让我们使用 IPython 的 `Image` 对象来显示此文件的内容（见[图 25-2](#fig_0400-introduction-to-matplotlib_files_in_output_21_0)）。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 21 0](assets/output_21_0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![output 21 0](assets/output_21_0.png)'
- en: Figure 25-2\. PNG rendering of the basic plot
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-2\. 基本绘图的 PNG 渲染
- en: 'In `savefig`, the file format is inferred from the extension of the given filename.
    Depending on what backends you have installed, many different file formats are
    available. The list of supported file types can be found for your system by using
    the following method of the figure canvas object:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `savefig` 中，文件格式根据给定文件名的扩展名推断。根据安装的后端程序，可以使用多种不同的文件格式。可以通过图形画布对象的以下方法找到系统支持的文件类型列表：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that when saving your figure, it is not necessary to use `plt.show` or
    related commands discussed earlier.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在保存图形时，不需要使用 `plt.show` 或前面讨论过的相关命令。
- en: Two Interfaces for the Price of One
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个界面的价格
- en: 'A potentially confusing feature of Matplotlib is its dual interfaces: a convenient
    MATLAB-style state-based interface, and a more powerful object-oriented interface.
    I’ll quickly highlight the differences between the two here.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 的一个可能令人困惑的特性是其双界面：一个方便的基于状态的 MATLAB 风格界面和一个更强大的面向对象界面。在这里，我将快速介绍这两者之间的区别。
- en: MATLAB-style Interface
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MATLAB 风格界面
- en: Matplotlib was originally conceived as a Python alternative for MATLAB users,
    and much of its syntax reflects that fact. The MATLAB-style tools are contained
    in the `pyplot` (`plt`) interface. For example, the following code will probably
    look quite familiar to MATLAB users ([Figure 25-3](#fig_0400-introduction-to-matplotlib_files_in_output_27_0)
    shows the result).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 最初被构想为 MATLAB 用户的 Python 替代方案，其语法大部分反映了这一事实。MATLAB 风格的工具包含在 `pyplot`
    (`plt`) 接口中。例如，以下代码对 MATLAB 用户可能看起来非常熟悉（见[图 25-3](#fig_0400-introduction-to-matplotlib_files_in_output_27_0)
    显示的结果）。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![output 27 0](assets/output_27_0.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![output 27 0](assets/output_27_0.png)'
- en: Figure 25-3\. Subplots using the MATLAB-style interface
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-3\. 使用 MATLAB 风格界面的子图
- en: 'It is important to recognize that this interface is *stateful*: it keeps track
    of the “current” figure and axes, which are where all `plt` commands are applied.
    You can get a reference to these using the `plt.gcf` (get current figure) and
    `plt.gca` (get current axes) routines.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要认识到这种接口是*有状态的*：它跟踪“当前”图形和坐标轴，所有`plt`命令都应用于这些对象。您可以使用`plt.gcf`（获取当前图形）和`plt.gca`（获取当前坐标轴）来获取对这些对象的引用。
- en: While this stateful interface is fast and convenient for simple plots, it is
    easy to run into problems. For example, once the second panel is created, how
    can we go back and add something to the first? This is possible within the MATLAB-style
    interface, but a bit clunky. Fortunately, there is a better way.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种状态接口在简单绘图时快捷方便，但也容易遇到问题。例如，一旦创建了第二个面板，如何返回并向第一个面板添加内容？这在MATLAB风格接口中是可能的，但有点笨拙。幸运的是，有更好的方法。
- en: Object-oriented interface
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面向对象接口
- en: 'The object-oriented interface is available for these more complicated situations,
    and for when you want more control over your figure. Rather than depending on
    some notion of an “active” figure or axes, in the object-oriented interface the
    plotting functions are *methods* of explicit `Figure` and `Axes` objects. To re-create
    the previous plot using this style of plotting, as shown in [Figure 25-4](#fig_0400-introduction-to-matplotlib_files_in_output_30_0),
    you might do the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些更复杂的情况以及当您希望对图形有更多控制时，可以使用面向对象的接口。与依赖“活跃”图形或坐标轴的概念不同，在面向对象的接口中，绘图函数是显式`Figure`和`Axes`对象的*方法*。要使用这种绘图风格重新创建之前的图形，如在[图 25-4](#fig_0400-introduction-to-matplotlib_files_in_output_30_0)中所示，可以执行以下操作：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![output 30 0](assets/output_30_0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![output 30 0](assets/output_30_0.png)'
- en: Figure 25-4\. Subplots using the object-oriented interface
  id: totrans-59
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 25-4\. 使用面向对象接口的子图
- en: For simpler plots, the choice of which style to use is largely a matter of preference,
    but the object-oriented approach can become a necessity as plots become more complicated.
    Throughout the following chapters, we will switch between the MATLAB-style and
    object-oriented interfaces, depending on what is most convenient. In most cases,
    the difference is as small as switching `plt.plot` to `ax.plot`, but there are
    a few gotchas that I will highlight as they come up in the following chapters.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更简单的绘图，使用哪种风格主要是偏好问题，但随着绘图变得更加复杂，面向对象的方法可能变得必不可少。在接下来的章节中，我们将根据方便性在MATLAB风格和面向对象接口之间切换。在大多数情况下，区别仅在于将`plt.plot`切换为`ax.plot`，但在接下来的章节中遇到的一些陷阱我将会特别提出。
