- en: Chapter 2\. Development Environment
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第二章\. 开发环境
- en: You probably can’t wait to learn the basics of Python but before we get there,
    you first need to set up your computer accordingly. To write VBA code or Power
    Queries, it’s enough to fire up Excel and open the VBA or Power Query editor,
    respectively. With Python, it’s a bit more work.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能迫不及待地想要学习Python的基础知识，但在此之前，你需要相应地设置你的计算机。要编写VBA代码或Power Queries，只需启动Excel并分别打开VBA或Power
    Query编辑器即可。而使用Python，则需要更多的工作。
- en: We will start this chapter by installing the Anaconda Python distribution. Besides
    installing Python, Anaconda will also give us access to the Anaconda Prompt and
    Jupyter notebooks, two essential tools that we will use throughout this book.
    The Anaconda Prompt is a special Command Prompt (Windows) or Terminal (macOS);
    it allows us to run Python scripts and other command line tools that we will meet
    in this book. Jupyter notebooks allow us to work with data, code, and charts in
    an interactive way, which makes them a serious competitor to Excel workbooks.
    After playing around with Jupyter notebooks, we will install Visual Studio Code
    (VS Code), a powerful text editor. VS Code works great for writing, running, and
    debugging Python scripts and comes with an integrated Terminal. [Figure 2-1](#filepos98642)
    summarizes what’s included in Anaconda and VS Code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装Anaconda Python发行版开始本章。除了安装Python外，Anaconda还将为我们提供Anaconda Prompt和Jupyter笔记本两个基本工具，这两个工具我们将在本书中经常使用。Anaconda
    Prompt是一个特殊的命令提示符（Windows）或终端（macOS）；它允许我们运行Python脚本和其他本书中会遇到的命令行工具。Jupyter笔记本允许我们以交互方式处理数据、代码和图表，这使得它们成为Excel工作簿的一个强大替代品。在使用了一段时间的Jupyter笔记本后，我们将安装Visual
    Studio Code（VS Code），一个功能强大的文本编辑器。VS Code非常适合编写、运行和调试Python脚本，并带有集成的终端。[图 2-1](#filepos98642)总结了Anaconda和VS
    Code中包含的内容。
- en: As this book is about Excel, I am focusing on Windows and macOS in this chapter.
    However, everything up to and including [Part III](index_split_018.html#filepos863198)
    runs on Linux as well. Let’s get started by installing Anaconda!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书主要讲解Excel，因此本章将重点介绍Windows和macOS。然而，包括[第三部分](index_split_018.html#filepos863198)在内的一切内容也适用于Linux。让我们开始安装Anaconda吧！
- en: '![](images/00063.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00063.jpg)'
- en: Figure 2-1\. Development environment
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-1\. 开发环境
- en: The Anaconda Python Distribution
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Python发行版
- en: 'Anaconda is arguably the most popular Python distribution used for data science
    and comes with hundreds of third-party packages preinstalled: it includes Jupyter
    notebooks and most of the other packages that this book will use extensively,
    including pandas, OpenPyXL, and xlwings. The Anaconda Individual Edition is free
    for private use and guarantees that all the included packages are compatible with
    each other. It installs into a single folder and can easily be uninstalled again.
    After installing it, we will learn a few basic commands on the Anaconda Prompt
    and run an interactive Python session. We’ll then meet the package managers Conda
    and pip before wrapping this section up with Conda environments. Let’s get started
    by downloading and installing Anaconda!'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda可以说是用于数据科学最流行的Python发行版，预装了数百个第三方包：它包括Jupyter笔记本和本书中将广泛使用的大多数其他包，包括pandas、OpenPyXL和xlwings。Anaconda个人版可以免费私人使用，并保证所有包都与彼此兼容。它安装在一个单独的文件夹中，并且可以轻松地卸载。安装完毕后，我们将在Anaconda
    Prompt上学习一些基本命令，并运行一个交互式的Python会话。然后，我们将介绍包管理器Conda和pip，最后以Conda环境结束本节。让我们开始下载并安装Anaconda吧！
- en: Installation
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安装
- en: Go to the [Anaconda home page](https://oreil.ly/QV7Na) and download the latest
    version of the Anaconda installer (Individual Edition). Make sure to download
    the 64-bit graphical installer for the Python 3.x version.[1](index_split_009.html#filepos177589)
    Once downloaded, double-click the installer to start the installation process
    and make sure to accept all the defaults. For more detailed installation instructions,
    follow the [official documentation](https://oreil.ly/r01wn).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[Anaconda主页](https://oreil.ly/QV7Na)并下载最新版本的Anaconda安装程序（个人版）。确保下载Python 3.x版本的64位图形化安装程序。[1](index_split_009.html#filepos177589)下载完成后，双击安装程序开始安装过程，并确保接受所有默认设置。有关更详细的安装说明，请参阅[官方文档](https://oreil.ly/r01wn)。
- en: OTHER PYTHON DISTRIBUTIONS
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他Python发行版
- en: While the instructions in this book assume that you have the Anaconda Individual
    Edition installed, the code and concepts shown will work with any other Python
    installation, too. In this case, however, you will have to install the required
    dependencies by following the instructions included in requirements.txt in the
    companion repository.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管本书的指导假设您已安装了 Anaconda 个人版，但所展示的代码和概念也适用于任何其他 Python 安装。在这种情况下，您需要按照配套存储库中
    requirements.txt 中包含的说明安装所需的依赖项。
- en: With Anaconda installed, we can now start using the Anaconda Prompt. Let’s see
    what this is and how it works!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 Anaconda 后，我们现在可以开始使用 Anaconda Prompt。让我们看看这是什么以及它是如何工作的！
- en: Anaconda Prompt
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Prompt
- en: The Anaconda Prompt is really just a Command Prompt on Windows and a Terminal
    on macOS that have been set up to run with the correct Python interpreter and
    third-party packages. The Anaconda Prompt is the most basic tool to run Python
    code, and we will make extensive use of it in this book to run Python scripts
    and all sorts of command line tools that are offered by various packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Prompt 实际上只是在 Windows 上的命令提示符和 macOS 上的终端，已设置为使用正确的 Python 解释器和第三方包运行。Anaconda
    Prompt 是运行 Python 代码的最基本工具，在本书中我们将广泛使用它来运行 Python 脚本和各种由各种包提供的命令行工具。
- en: ANACONDA PROMPT WITHOUT ANACONDA
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在没有 Anaconda 的情况下使用 ANACONDA PROMPT
- en: If you don’t use the Anaconda Python distribution, you will have to use the
    Command Prompt on Windows and the Terminal on macOS whenever I instruct you to
    use the Anaconda Prompt.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您不使用 Anaconda Python 发行版，每当我指示您使用 Anaconda Prompt 时，您将不得不使用 Windows 上的命令提示符和
    macOS 上的终端。
- en: 'If you have never used a Command Prompt on Windows or a Terminal on macOS,
    don’t worry: you only need to know a handful of commands that will already give
    you a lot of power. Once you get used to it, using the Anaconda Prompt is often
    faster and more convenient than clicking your way through graphical user menus.
    Let’s get started:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未在 Windows 上使用过命令提示符或在 macOS 上使用过终端，不用担心：您只需要知道几个命令，这些命令将为您提供大量功能。一旦习惯了，使用
    Anaconda Prompt 通常比通过图形用户界面菜单点击更快更方便。让我们开始吧：
- en: Windows
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: 'Click on the Start menu button and start typing `Anaconda Prompt`. In the appearing
    entries, choose Anaconda Prompt, not Anaconda Powershell Prompt. Either select
    it with the arrow keys and hit Enter or use your mouse to click on it. If you
    prefer to open it via the Start menu, you will find it under Anaconda3\. It is
    a good idea to pin the Anaconda Prompt to your Windows taskbar as you will use
    it regularly throughout this book. The input line of the Anaconda Prompt will
    start with `(base)`:'
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 点击“开始”菜单按钮，然后开始输入 `Anaconda Prompt`。在出现的条目中，选择 Anaconda Prompt，而不是 Anaconda
    Powershell Prompt。可以使用箭头键选择它并按 Enter 键，或者使用鼠标点击它。如果您喜欢通过“开始”菜单打开它，可以在 Anaconda3
    下找到它。将 Anaconda Prompt 固定到 Windows 任务栏是一个好主意，因为您将在本书中经常使用它。Anaconda Prompt 的输入行将以
    `(base)` 开头：
- en: '`(base) C:\Users\felix>`'
  id: totrans-20
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) C:\Users\felix>`'
- en: macOS
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: 'On macOS, you won’t find an application called Anaconda Prompt. Instead, by
    Anaconda Prompt, I am referring to the Terminal that has been set up by the Anaconda
    installer to automatically activate a Conda environment (I will say more about
    Conda environments in a moment): press Command-Space bar or open the Launchpad,
    then type in `Terminal` and hit Enter. Alternatively, open the Finder and navigate
    to Applications > Utilities, where you will find the Terminal app that you can
    double-click. Once the Terminal appears, it should look something like this, i.e.,
    the input line has to start with `(base)`:'
  id: totrans-22
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，您找不到名为 Anaconda Prompt 的应用程序。相反，Anaconda Prompt 指的是由 Anaconda 安装程序设置的终端，用于自动激活
    Conda 环境（稍后我会详细介绍 Conda 环境）：按下 Command-Space 键或打开 Launchpad，然后键入 `Terminal` 并按
    Enter 键。或者，打开 Finder 并导航到应用程序 > 实用工具，在那里您会找到可以双击的 Terminal 应用程序。一旦终端出现，它应该看起来像这样，即输入行必须以
    `(base)` 开头：
- en: '`(base) felix@MacBook-Pro ~ %`'
  id: totrans-23
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) felix@MacBook-Pro ~ %`'
- en: 'If you are on an older version of macOS, it looks rather like this:'
  id: totrans-24
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你使用的是较旧版本的 macOS，它看起来会是这个样子：
- en: '`(base) MacBook-Pro:~ felix$`'
  id: totrans-25
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) MacBook-Pro:~ felix$`'
- en: Unlike the Command Prompt on Windows, the Terminal on macOS doesn’t show the
    full path of the current directory. Instead, the tilde stands for the home directory,
    which is usually /Users/<username>. To see the full path of your current directory,
    type `pwd` followed by Enter. `pwd` stands for print working directory.
  id: totrans-26
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 与 Windows 上的命令提示符不同，macOS 上的终端不显示当前目录的完整路径。相反，波浪符号表示主目录，通常是 /Users/<username>。要查看当前目录的完整路径，请键入
    `pwd` 然后按 Enter 键。`pwd` 表示打印工作目录。
- en: 'If the input line in your Terminal doesn’t start with `(base)` after the installation
    of Anaconda, here is a common reason: if you had the Terminal running during the
    Anaconda installation, you will need to restart it. Note that clicking on the
    red cross on the top left of the Terminal window will only hide it but not quit
    it. Instead, right-click on the Terminal in the dock and select Quit or hit Command-Q
    while the Terminal is your active window. When you start it again and the Terminal
    shows `(base)` at the beginning of a new line, you are all set. It’s a good idea
    to keep the Terminal in your dock, as you will use it regularly throughout this
    book.'
  id: totrans-27
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您在安装 Anaconda 后在终端中输入行不是以 `(base)` 开头，常见原因是：如果在 Anaconda 安装过程中终端处于运行状态，您需要重新启动它。请注意，点击终端窗口左上角的红色叉号只会隐藏它而不会退出它。相反，请右键单击
    dock 中的终端，选择退出，或者在终端是活动窗口时按 Command-Q 键。重新启动后，如果终端显示 `(base)` 开头的新行，表示已设置好。建议将终端固定在
    dock 中，因为您将经常使用它。
- en: Having the Anaconda Prompt up and running, try out the commands outlined in
    [Table 2-1](#filepos106304). I am explaining each command in more detail after
    the table.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Anaconda 提示符处，尝试执行 [表 2-1](#filepos106304) 中概述的命令。我将在表后更详细地解释每个命令。
- en: Table 2-1\. Commands for the Anaconda Prompt
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-1\. Anaconda 提示的命令
- en: '|  Command  |  Windows  |  macOS  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|  命令  |  Windows  |  macOS  |'
- en: '|  List files in current directory  |   `dir` |   `ls -la` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|  列出当前目录中的文件  |   `dir` |   `ls -la` |'
- en: '|  Change directory (relative)  |   `cd path\to\dir` |   `cd path/to/dir` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|  切换目录（相对路径）  |   `cd path\to\dir` |   `cd path/to/dir` |'
- en: '|  Change directory (absolute)  |   `cd C:\path\to\dir` |   `cd /path/to/dir`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|  切换目录（绝对路径）  |   `cd C:\path\to\dir` |   `cd /path/to/dir` |'
- en: '|  Change to D drive  |   `D:` |  (doesn’t exist)  |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|  切换到 D 驱动器  |   `D:` |  (不存在)  |'
- en: '|  Change to parent directory  |   `cd ..` |   `cd ..` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  切换到上级目录  |   `cd ..` |   `cd ..` |'
- en: '|  Scroll through previous commands  |  ↑ ( `up-arrow`) |  ↑ ( `up-arrow`)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|  浏览以前的命令  |  ↑（上箭头）  |  ↑（上箭头）  |'
- en: List files in current directory
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 列出当前目录中的文件
- en: On Windows, type in `dir` for directory, then hit Enter. This will print the
    content of the directory you are currently in.
  id: totrans-38
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上，输入 `dir` 查看目录内容，然后按 Enter 键。这将打印出您当前所在目录的内容。
- en: On macOS, type in `ls -la` followed by Enter. `ls` is short for list directory
    contents, and `-la` will print the output in the long listing format and include
    all files, including hidden ones.
  id: totrans-39
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，输入 `ls -la` 并按 Enter 键。`ls` 是列出目录内容的缩写，`-la` 将以长列表格式打印输出，并包括所有文件，包括隐藏文件。
- en: Change directory
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 切换目录
- en: 'Type `cd Down` and hit the Tab key. `cd` stands for change directory. If you
    are in your home folder, the Anaconda Prompt should most likely be able to autocomplete
    it to `cd Downloads`. If you are in a different folder or don’t have a folder
    called Downloads, simply start to type the beginning of one of the directory names
    you saw with the previous command (`dir` or `ls -la`) before hitting the Tab key
    to autocomplete. Then hit Enter to change into the autocompleted directory. If
    you are on Windows and need to change your drive, you first need to type in the
    drive name before you can change into the correct directory:'
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 输入 `cd Down` 并按 Tab 键。`cd` 是改变目录的缩写。如果您在主文件夹中，Anaconda 提示应该能够自动完成到 `cd Downloads`。如果您在不同的文件夹中，或者没有名为
    Downloads 的文件夹，只需在按 Tab 键自动完成之前，开始键入前一个命令 (`dir` 或 `ls -la`) 中看到的一个目录名的开始部分。然后按
    Enter 键以进入自动完成的目录。如果您在 Windows 上需要更改驱动器，请先输入驱动器名称，然后才能更改正确的目录：
- en: '`C:\Users\felix>` `D:` `D:\>` `cd data` `D:\data>`'
  id: totrans-42
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`C:\Users\felix>` `D:` `D:\>` `cd data` `D:\data>`'
- en: Note that by starting your path with a directory or file name that is within
    your current directory, you are using a relative path, e.g., `cd Downloads`. If
    you would like to go outside of your current directory, you can type in an absolute
    path, e.g., `cd C:\Users` on Windows or `cd /Users` on macOS (mind the forward
    slash at the beginning).
  id: totrans-43
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意，如果您从当前目录开始，使用相对路径启动路径时，需要使用一个位于当前目录中的目录或文件名，例如，`cd Downloads`。如果您想要跳出当前目录，可以输入绝对路径，例如，在
    Windows 上是`cd C:\Users`，在 macOS 上是`cd /Users`（请注意斜杠是在路径开头的）。
- en: Change to parent directory
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到上级目录
- en: To go to your parent directory, i.e., one level up in your directory hierarchy,
    type `cd ..` followed by Enter (make sure that there is a space between `cd` and
    the dots). You can combine this with a directory name, for example, if you want
    to go up one level, and then to change to the Desktop, enter `cd ..\Desktop`.
    On macOS, replace the backslash with a forward slash.
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要进入父目录，即在目录层次结构中向上移动一级，请输入 `cd ..`，然后按 Enter 键（确保在 `cd` 和点之间有一个空格）。如果你想结合目录名称使用这个命令，例如，如果你想向上移动一级，然后切换到桌面目录，输入
    `cd ..\Desktop`。在 macOS 上，请用正斜杠替换反斜杠。
- en: Scroll through previous commands
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览之前的命令
- en: Use the up-arrow key to scroll through the previous commands. This will save
    you many keystrokes if you need to run the same commands over and over again.
    If you scroll too far, use the down-arrow key to scroll back.
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用向上箭头键浏览之前的命令。如果你需要多次运行相同的命令，这将节省大量击键时间。如果向上滚动太远，使用向下箭头键回滚。
- en: FILE EXTENSIONS
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 文件扩展名
- en: 'Unfortunately, Windows and macOS hide file extensions by default in the Windows
    Explorer or macOS Finder, respectively. This can make it harder to work with Python
    scripts and the Anaconda Prompt, as they will require you to refer to files including
    their extensions. When working with Excel, showing file extensions also helps
    you understand whether you’re dealing with the default xlsx file, a macro-enabled
    xlsm file, or any of the other Excel file formats. Here is how you make the file
    extensions visible:'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，在 Windows 资源管理器或 macOS Finder 中，默认隐藏文件扩展名。这可能会使处理 Python 脚本和 Anaconda Prompt
    变得更加困难，因为你需要引用包括其扩展名的文件。在处理 Excel 时，显示文件扩展名还有助于你了解你正在处理的是默认的 xlsx 文件，还是启用宏的 xlsm
    文件，或任何其他 Excel 文件格式。以下是如何使文件扩展名可见的方法：
- en: Windows
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Windows
- en: Open a File Explorer and click on the View tab. Under the Show/Hide group, activate
    the “File name extensions” checkbox.
  id: totrans-51
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 打开文件资源管理器，点击“视图”选项卡。在“显示/隐藏”组下，勾选“文件扩展名”复选框。
- en: macOS
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: macOS
- en: Open the Finder and go to Preferences by hitting Command-, (Command-comma).
    On the Advanced tab, check the box next to “Show all filename extensions.”
  id: totrans-53
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 打开 Finder，并通过按下 Command-,(Command-逗号键) 进入偏好设置。在高级选项卡上，勾选“显示所有文件扩展名”旁边的复选框。
- en: And that’s already it! You are now able to fire up the Anaconda Prompt and run
    commands in the desired directory. You’ll be using this right away in the next
    section, where I’ll show you how to start an interactive Python session.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止！你现在可以启动 Anaconda Prompt 并在所需目录中运行命令。你将立即在下一节中使用这个功能，我将向你展示如何启动交互式 Python
    会话。
- en: 'Python REPL: An Interactive Python Session'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python REPL：交互式 Python 会话
- en: 'You can start an interactive Python session by running the `python` command
    on an Anaconda Prompt:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 Anaconda Prompt 上运行 `python` 命令来启动交互式 Python 会话：
- en: '`(base) C:\Users\felix>``python` `Python 3.8.5 (default, Sep 3 2020, 21:29:08)
    [...] :: Anaconda, Inc. on win32 Type "help", "copyright", "credits" or "license"
    for more information. >>>`'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) C:\Users\felix>``python` `Python 3.8.5 (default, Sep 3 2020, 21:29:08)
    [...] :: Anaconda, Inc. on win32 Type "help", "copyright", "credits" or "license"
    for more information. >>>`'
- en: The text that gets printed in a Terminal on macOS will slightly differ, but
    otherwise, it works the same. This book is based on Python 3.8—if you would like
    to use a newer version of Python, make sure to consult the [book’s home page](https://xlwings.org/book)
    for instructions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 终端打印的文本略有不同，但功能基本相同。本书基于 Python 3.8 — 如果你想使用更新的 Python 版本，请确保参考[书籍主页](https://xlwings.org/book)上的说明。
- en: ANACONDA PROMPT NOTATION
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ANACONDA PROMPT NOTATION
- en: 'Going forward, I will start lines of code with `(base)>` to denote that they
    are typed into an Anaconda Prompt. For example, to launch an interactive Python
    interpreter, I will write:'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 今后，我将以 `(base)>` 开头来标记 Anaconda Prompt 中输入的代码行。例如，要启动交互式 Python 解释器，我将这样写：
- en: '`(base)>` `python`'
  id: totrans-61
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `python`'
- en: 'which on Windows will look similar to this:'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 而在 Windows 上看起来类似于这样：
- en: '`(base) C:\Users\felix>` `python`'
  id: totrans-63
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) C:\Users\felix>` `python`'
- en: 'and on macOS similar to this (remember, on macOS, the Terminal is your Anaconda
    Prompt):'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上类似这样（请记住，在 macOS 上，终端即为你的 Anaconda Prompt）：
- en: '`(base) felix@MacBook-Pro ~ %` `python`'
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base) felix@MacBook-Pro ~ %` `python`'
- en: 'Let’s play around a bit! Note that `>>>` in an interactive session means that
    Python expects your input; you don’t have to type this in. Follow along by typing
    in each line that starts with `>>>` and confirm with the Enter key:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们玩一玩吧！请注意，在交互式会话中，`>>>` 表示 Python 正在等待你的输入；你无需输入这些字符。跟着我输入每一行以 `>>>` 开头的代码，并按
    Enter 键确认：
- en: '`>>>` `3 + 4` `7 >>>` `"python " * 3` `''python python python ''`'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`>>>` `3 + 4` `7 >>>` `"python " * 3` `''python python python ''`'
- en: 'This interactive Python session is also referred to as Python REPL, which stands
    for read-eval-print loop: Python reads your input, evaluates it, and prints the
    result instantly while waiting for your next input. Remember the Zen of Python
    that I mentioned in the previous chapter? You can now read the full version to
    get some insight into the guiding principles of Python (smile included). Simply
    run this line by hitting Enter after typing it in:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个交互式 Python 会话也称为 Python REPL，即读取-求值-打印循环：Python 读取你的输入，计算它，并立即打印结果，同时等待你的下一个输入。还记得我在前一章提到的
    Python 之禅吗？现在你可以阅读完整版本，了解 Python 的指导原则（包括微笑）。只需在键入此行后按 Enter 运行：
- en: '`>>>` `import this`'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`>>>` `import this`'
- en: To exit out of your Python session, type `quit()` followed by the Enter key.
    Alternatively, hit Ctrl+Z on Windows, then hit the Enter key. On macOS, simply
    hit Ctrl-D—no need to press Enter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出 Python 会话，请键入 `quit()`，然后按 Enter 键。或者，在 Windows 上按 Ctrl+Z，然后按 Enter 键。在
    macOS 上，只需按 Ctrl+D — 无需按 Enter。
- en: Having exited the Python REPL, it’s a good moment to play around with Conda
    and pip, the package managers that come with the Anaconda installation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 退出 Python REPL 后，现在是玩转 Conda 和 pip 的好时机，这两个是随 Anaconda 安装提供的包管理器。
- en: 'Package Managers: Conda and pip'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器：Conda 和 pip
- en: 'I already said a few words about pip, Python’s package manager in the previous
    chapter: pip takes care of downloading, installing, updating, and uninstalling
    Python packages as well as their dependencies and subdependencies. While Anaconda
    works with pip, it has a built-in alternative package manager called Conda. One
    advantage of Conda is that it can install more than just Python packages, including
    additional versions of the Python interpreter. As a short recap: packages add
    additional functionality to your Python installation that is not covered by the
    standard library. pandas, which I will properly introduce in [Chapter 5](index_split_015.html#filepos482650),
    is an example of such a package. Since it comes preinstalled in Anaconda’s Python
    installation, you don’t have to install it manually.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我已经介绍了 pip，Python 的包管理器：pip 负责下载、安装、更新和卸载 Python 包及其依赖关系和子依赖关系。虽然 Anaconda
    可与 pip 配合使用，但它还有一种内置的替代包管理器称为 Conda。Conda 的一个优势是它不仅可以安装 Python 包，还可以安装 Python
    解释器的其他版本。简而言之：包添加了额外的功能到你的 Python 安装中，这些功能不在标准库中。pandas 是这样一个包的例子，我将在[第 5 章](index_split_015.html#filepos482650)中详细介绍它。由于它已预装在
    Anaconda 的 Python 安装中，你不必手动安装它。
- en: CONDA VS. PIP
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CONDA 与 PIP
- en: With Anaconda, you should install everything you can via Conda and only use
    pip to install those packages that Conda can’t find. Otherwise, Conda may overwrite
    files that were previously installed with pip.
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Anaconda 中，你应该尽可能通过 Conda 安装所有内容，并仅在 Conda 找不到这些包时使用 pip 安装。否则，Conda 可能会覆盖之前用
    pip 安装的文件。
- en: '[Table 2-2](#filepos120926) gives you an overview of the commands that you
    will use most often. These commands have to be typed into an Anaconda Prompt and
    will allow you to install, update, and uninstall your third-party packages.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 2-2](#filepos120926) 提供了你将经常使用的命令的概述。这些命令必须在 Anaconda 提示符中键入，将允许你安装、更新和卸载第三方包。'
- en: Table 2-2\. Conda and pip commands
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 2-2\. Conda 和 pip 命令
- en: '|  Action  |  Conda  |  pip  |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '|  操作  |  Conda  |  pip  |'
- en: '|  List all installed packages  |   `conda list` |   `pip freeze` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '|  列出所有已安装的包  |   `conda list` |   `pip freeze` |'
- en: '|  Install the latest package version  |   `conda install` `package` |   `pip
    install` `package` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '|  安装最新的包版本  |   `conda install` `package` |   `pip install` `package` |'
- en: '|  Install a specific package version  |   `conda install` `package=1.0.0`
    |   `pip install` `package==1.0.0` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '|  安装特定版本的包  |   `conda install` `package=1.0.0` |   `pip install` `package==1.0.0`
    |'
- en: '|  Update a package  |   `conda update` `package` |   `pip install --upgrade`
    `package` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '|  更新包  |   `conda update` `package` |   `pip install --upgrade` `package`
    |'
- en: '|  Uninstall a package  |   `conda remove` `package` |   `pip uninstall` `package`
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '|  卸载包  |   `conda remove` `package` |   `pip uninstall` `package` |'
- en: 'For example, to see what packages are already available in your Anaconda distribution,
    type:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查看你的 Anaconda 发行版中已有哪些包，输入以下命令：
- en: '`(base)>` `conda list`'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `conda list`'
- en: 'Whenever this book requires a package that is not included in the Anaconda
    installation, I will point this out explicitly and show you how to install it.
    However, it may be a good idea to take care of installing the missing packages
    now so that you won’t need to deal with it later on. Let’s first install plotly
    and xlutils, the packages that are available via Conda:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每当本书需要一个不包含在 Anaconda 安装中的包时，我都会明确指出这一点，并向您展示如何安装它。但现在安装缺少的包可能是个好主意，这样以后就不必再处理它了。让我们首先安装
    plotly 和 xlutils，这些包可以通过 Conda 获取：
- en: '`(base)>` `conda install plotly xlutils`'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `conda install plotly xlutils`'
- en: 'After running this command, Conda will show you what it’s going to do and requires
    you to confirm by typing `y` and hitting Enter. Once done, you can install pyxlsb
    and pytrends with pip, as these packages are not available via Conda:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，Conda 将显示它将要执行的操作，并要求您键入 `y` 并按回车键确认。完成后，您可以使用 pip 安装 pyxlsb 和 pytrends，因为这些包无法通过
    Conda 获取：
- en: '`(base)>` `pip install pyxlsb pytrends`'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `pip install pyxlsb pytrends`'
- en: Unlike Conda, pip will install the packages right away when you hit Enter without
    the need to confirm.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不像 Conda，当你按下回车键时，pip 会立即安装包而无需确认。
- en: PACKAGE VERSIONS
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 包版本
- en: Many Python packages are updated often and sometimes introduce changes that
    aren’t backward compatible. This will likely break some of the examples in this
    book. I will try to keep up with these changes and post fixes on the [book’s home
    page](https://xlwings.org/book), but you could also create a Conda environment
    that uses the same versions of the packages that I was using when writing this
    book. I will introduce Conda environments in the next section, and you will find
    detailed instructions on how to create a Conda environment with the specific packages
    in [Appendix A](index_split_029.html#filepos1810552).
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多 Python 包经常更新，有时会引入不向后兼容的更改。这可能会破坏本书中的一些示例。我会尽力跟上这些变化，并在[书的主页](https://xlwings.org/book)上发布修复内容，但你也可以创建一个使用我在写本书时使用的相同版本的包的
    Conda 环境。我将在下一节介绍 Conda 环境，并在[附录 A](index_split_029.html#filepos1810552)中找到关于如何创建具有特定包的
    Conda 环境的详细说明。
- en: You know now how to use the Anaconda Prompt to start a Python interpreter and
    install additional packages. In the next section, I’ll explain what `(base)` at
    the beginning of your Anaconda Prompt means.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何使用 Anaconda Prompt 启动 Python 解释器并安装额外的包了。在下一节中，我会解释你的 Anaconda Prompt
    开头的`(base)`是什么意思。
- en: Conda Environments
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Conda 环境
- en: 'You may have been wondering why the Anaconda Prompt shows `(base)` at the beginning
    of each input line. It’s the name of the active Conda environment. A Conda environment
    is a separate “Python world” with a specific version of Python and a set of installed
    packages with specific versions. Why is this necessary? When you start to work
    on different projects in parallel, they will have different requirements: one
    project may use Python 3.8 with pandas 0.25.0, while another project may use Python
    3.9 with pandas 1.0.0\. Code that is written for pandas 0.25.0 will often require
    changes to run with pandas 1.0.0, so you can’t just upgrade your Python and pandas
    versions without making changes to your code. Using a Conda environment for each
    project makes sure that every project runs with the correct dependencies. While
    Conda environments are specific to the Anaconda distribution, the concept exists
    with every Python installation under the name virtual environment. Conda environments
    are more powerful because they make it easier to deal with different versions
    of Python itself, not just packages.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能一直在想为什么 Anaconda Prompt 在每个输入行的开头显示 `(base)`。这是活跃 Conda 环境的名称。Conda 环境是一个单独的“Python
    世界”，具有特定版本的 Python 和一组安装了特定版本的包。为什么需要这个？当你同时在不同项目上工作时，它们会有不同的需求：一个项目可能使用 Python
    3.8 和 pandas 0.25.0，而另一个项目可能使用 Python 3.9 和 pandas 1.0.0。为 pandas 0.25.0 编写的代码通常需要更改才能运行
    pandas 1.0.0，所以你不能只升级你的 Python 和 pandas 版本而不修改代码。为每个项目使用 Conda 环境确保每个项目都使用正确的依赖关系。虽然
    Conda 环境是特定于 Anaconda 分发的，但该概念在每个 Python 安装下以虚拟环境的名称存在。Conda 环境更强大，因为它们使处理不同版本的
    Python 本身更容易，而不仅仅是包。
- en: While you work through this book, you will not have to change your Conda environment,
    as we’ll always be using the default `base` environment. However, when you start
    building real projects, it’s good practice to use one Conda or virtual environment
    for each project to avoid any potential conflicts between their dependencies.
    Everything you need to know about dealing with multiple Conda environments is
    explained in [Appendix A](index_split_029.html#filepos1810552). There you will
    also find instructions on creating a Conda environment with the exact versions
    of the packages that I used to write this book. This will allow you to run the
    examples in this book as-is for many years to come. The other option is to watch
    the [book’s home page](https://xlwings.org/book) for potential changes required
    for newer versions of Python and the packages.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书时，你无需更改你的 Conda 环境，因为我们将始终使用默认的 `base` 环境。但是，当你开始构建真实项目时，最好为每个项目使用一个 Conda
    或虚拟环境，以避免它们的依赖关系之间可能发生的冲突。有关处理多个 Conda 环境的所有信息都在[附录 A](index_split_029.html#filepos1810552)中解释了。在那里，你还将找到有关使用我用来撰写本书的确切软件包版本创建
    Conda 环境的说明。这将使你能够在未来很多年内按原样运行本书中的示例。另一个选择是关注[书的主页](https://xlwings.org/book)，以获取可能需要针对较新版本的
    Python 和软件包进行的更改。
- en: 'Having resolved the mystery around Conda environments, it’s time to introduce
    the next tool, one that we will use intensely in this book: Jupyter notebooks!'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 解   解决了关于 Conda 环境的谜团后，现在是介绍下一个工具的时候了，这个工具在本书中会被广泛使用：Jupyter 笔记本！
- en: Jupyter Notebooks
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本
- en: 'In the previous section, I showed you how to start an interactive Python session
    from an Anaconda Prompt. This is useful if you want a bare-bones environment to
    test out something simple. For the majority of your work, however, you want an
    environment that is easier to use. For example, going back to previous commands
    and displaying charts is hard with a Python REPL running in an Anaconda Prompt.
    Fortunately, Anaconda comes with much more than just the Python interpreter: it
    also includes Jupyter notebooks, which have emerged as one of the most popular
    ways to run Python code in a data science context. Jupyter notebooks allow you
    to tell a story by combining executable Python code with formatted text, pictures,
    and charts into an interactive notebook that runs in your browser. They are beginner-friendly
    and thus especially useful for the first steps of your Python journey. They are,
    however, also hugely popular for teaching, prototyping, and researching, as they
    facilitate reproducible research.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我向你展示了如何从 Anaconda 提示符启动一个交互式的 Python 会话。如果你想要一个简单的环境来测试一些简单的东西，这是很有用的。然而，对于大多数工作，你希望一个更易于使用的环境。例如，使用
    Anaconda 提示符中运行的 Python REPL 很难返回到以前的命令并显示图表。幸运的是，Anaconda 带有比只有 Python 解释器更多的东西：它还包括
    Jupyter 笔记本，这已经成为在数据科学环境中运行 Python 代码的最流行方式之一。Jupyter 笔记本允许你通过将可执行的 Python 代码与格式化文本、图片和图表结合到一个在浏览器中运行的交互式笔记本中来讲述一个故事。它们适合初学者，因此在你的
    Python 旅程的最初阶段特别有用。然而，它们也非也非常受欢迎，用于教学、原型设计和研究，因为它们有助于实现可重复研究。
- en: 'Jupyter notebooks have become a serious competitor to Excel as they cover roughly
    the same use case as a workbook: you can quickly prepare, analyze, and visualize
    data. The difference to Excel is that all of it happens by writing Python code
    instead of clicking around in Excel with your mouse. Another advantage is that
    Jupyter notebooks don’t mix data and business logic: the Jupyter notebook holds
    your code and charts, whereas you typically consume data from an external CSV
    file or a database. Having Python code visible in your notebook makes it easy
    to see what’s going on compared to Excel, where the formulas are hidden away behind
    a cell’s value. Jupyter notebooks are also easy to run both locally and on a remote
    server. Servers usually have more power than your local machine and can run your
    code fully unattended, something that is hard to do with Excel.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本已经成为 Excel 的一个严肃竞争对手，因为它们覆盖了与工作簿大致相同的用例：你可以快速准备、分析和可视化数据。与 Excel
    的区别在于，所有这些都是通过编写 Python 代码而不是在 Excel 中用鼠标点击来完成的。另一个优势是，Jupyter 笔记本不会混合数据和业务逻辑：Jupyter
    笔记本保存了你的代码和图表，而你通常是从外部 CSV 文件或数据库中获取数据。在你的笔记本中显示 Python 代码使得你能够很容易地看到发生了什么，而在
    Excel 中，公式被隐藏在单元格的值后面。Jupyter 笔记本在本地和远程服务器上运行都很容易。服务器通常比你的本地计算机性能更强，可以完全无人值守地运行你的代码，这在
    Excel 中很难做到。
- en: 'In this section, I’ll show you the very basics of how you run and navigate
    a Jupyter notebook: we will learn about notebook cells and see what the difference
    is between the edit and command mode. We’ll then understand why the run order
    of cells matters before we wrap this section up by learning how to properly shut
    down notebooks. Let’s get started with our first notebook!'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何运行和导航 Jupyter 笔记本的基础知识：我们将了解笔记本单元格的内容，并看看编辑模式和命令模式之间的区别。然后我们将理解为什么单元格的运行顺序很重要，然后在结束本节之前，我们将学习如何正确关闭笔记本。让我们从我们的第一个笔记本开始吧！
- en: Running Jupyter Notebooks
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Jupyter 笔记本
- en: 'On your Anaconda Prompt, change to the directory of your companion repository,
    then launch a Jupyter notebook server:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Anaconda Prompt 上，切换到您的伴侣存储库的目录，然后启动 Jupyter 笔记本服务器：
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `jupyter notebook`'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `jupyter notebook`'
- en: This will automatically open your browser and show the Jupyter dashboard with
    the files in the directory from where you were running the command. On the top
    right of the Jupyter dashboard, click on New, then select Python 3 from the dropdown
    list (see [Figure 2-2](#filepos133397)).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动打开您的浏览器，并显示带有目录中文件的 Jupyter 仪表板。在 Jupyter 仪表板的右上角，点击 New，然后从下拉列表中选择 Python
    3（见图 2-2](#filepos133397)）。
- en: '![](images/00071.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00071.jpg)'
- en: Figure 2-2\. The Jupyter dashboard
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-2\. Jupyter 仪表板
- en: This will open a new browser tab with your first empty Jupyter notebook as shown
    in [Figure 2-3](#filepos133850).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在新的浏览器标签页中打开您的第一个空白 Jupyter 笔记本，如图 2-3](#filepos133850) 所示。
- en: '![](images/00079.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00079.jpg)'
- en: Figure 2-3\. An empty Jupyter notebook
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-3\. 一个空白的 Jupyter 笔记本
- en: It’s a good habit to click on Untitled1 next to the Jupyter logo to rename your
    workbook into something more meaningful, e.g., first_notebook. The lower part
    of [Figure 2-3](#filepos133850) shows a notebook cell—move on to the next section
    to learn more about them!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Jupyter 标志旁边的 Untitled1 可以重命名工作簿为更有意义的名称，例如 first_notebook。[图 2-3](#filepos133850)
    的下部显示了一个笔记本单元格——继续下一节以了解更多信息！
- en: Notebook Cells
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本单元格
- en: 'In [Figure 2-3](index_split_008.html#filepos133850), you see an empty cell
    with a blinking cursor. If the cursor doesn’t blink, click into the cell with
    your mouse, i.e., to the right of `In [ ]`. Now repeat the exercise from the last
    section: type in `3 + 4` and run the cell by either clicking on the Run button
    in the menu bar at the top or—much easier—by hitting Shift+Enter. This will run
    the code in the cell, print the result below the cell and jump to the next cell.
    In this case, it inserts an empty cell below as we only have one cell so far.
    Going into a bit more detail: while a cell is calculating, it shows `In [*]` and
    when it’s done, the asterisk turns into a number, e.g., `In [1]`. Below the cell
    you will have the corresponding output labeled with the same number: `Out [1]`.
    Every time you run a cell, the counter increases by one, which helps you to see
    in which order the cells were executed. Going forward, I will show the code samples
    in this format, e.g., the REPL example from before looks like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [图 2-3](index_split_008.html#filepos133850) 中，您将看到一个空的单元格，其中有一个闪烁的光标。如果光标不闪烁，请用鼠标点击单元格的右侧，即在
    `In [ ]` 的右侧。现在重复上一节的练习：键入 `3 + 4` 并通过点击顶部菜单栏中的运行按钮或更容易的方式——按 Shift+Enter 运行单元格。这将运行单元格中的代码，将结果打印在单元格下方，并跳转到下一个单元格。在这种情况下，它会插入一个空单元格，因为我们目前只有一个单元格。稍微详细解释一下：当单元格计算时，它显示
    `In [*]`，当计算完成时，星号变成一个数字，例如 `In [1]`。在单元格下方，您将看到相应的输出，标有相同的数字：`Out [1]`。每次运行一个单元格，计数器都会增加一，这有助于您查看单元格执行的顺序。在接下来的内容中，我将以这种格式展示代码示例，例如之前的
    REPL 示例看起来是这样的：
- en: '`In``[``1``]:``3``+``4`'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``1``]:``3``+``4`'
- en: '`Out[1]: 7`'
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[1]: 7`'
- en: This notation allows you to follow along easily by typing `3 + 4` into a notebook
    cell. When running it by hitting Shift+Enter, you will get what I show as output
    under `Out[1]`. If you read this book in an electronic format supporting colors,
    you will notice that the input cell formats strings, numbers, and so on with different
    colors to make it easier to read. This is called syntax highlighting.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示法允许您在笔记本单元格中键入 `3 + 4` 跟随而来。通过按 Shift+Enter 运行它，您将得到我展示的输出 `Out[1]`。如果您在支持颜色的电子格式中阅读本书，您会注意到输入单元格使用不同颜色格式化字符串、数字等，以便更容易阅读。这被称为语法高亮显示。
- en: CELL OUTPUT
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CELL OUTPUT
- en: If the last line in a cell returns a value, it is automatically printed by the
    Jupyter notebook under `Out [ ]`. However, when you use the `print` function or
    when you get an exception, it is printed directly below the `In` cell without
    the `Out [ ]` label. The code samples in this book are formatted to reflect this
    behavior.
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果单元格中的最后一行返回一个值，Jupyter笔记本会自动在`Out [ ]`下打印它。但是，当你使用`print`函数或遇到异常时，它会直接在`In`单元格下打印，而不带有`Out
    [ ]`标签。本书中的代码示例按此方式进行格式化。
- en: 'Cells can have different types, two of which are of interest to us:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格可以具有不同的类型，其中我们感兴趣的是两种：
- en: Code
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 代码
- en: This is the default type. Use it whenever you want to run Python code.
  id: totrans-121
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是默认类型。每当你想运行Python代码时，请使用它。
- en: Markdown
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Markdown
- en: Markdown is a syntax that uses standard text characters for formatting and can
    be used to include nicely formatted explanations and instructions in your notebook.
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Markdown是一种使用标准文本字符进行格式化的语法，可用于在笔记本中包含精美格式的解释和说明。
- en: 'To change a cell’s type to Markdown, select the cell, then choose Markdown
    in the cell mode dropdown (see [Figure 2-3](index_split_008.html#filepos133850)).
    I’ll show you a keyboard shortcut to change the cell mode in [Table 2-3](#filepos141200).
    After changing an empty cell into a Markdown cell, type in the following text,
    which explains a few Markdown rules:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要将单元格类型更改为Markdown，选择单元格，然后在单元格模式下拉菜单中选择Markdown（参见[图 2-3](index_split_008.html#filepos133850)）。我会展示一个快捷键，用于在[表 2-3](#filepos141200)中更改单元格模式。在将空单元格更改为Markdown单元格后，键入以下文本，其中解释了几条Markdown规则：
- en: '``# This is a first-level heading  ## This is a second-level heading  You can
    make your text *italic* or **bold** or `monospaced`.  * This is a bullet point
    * This is another bullet point``'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '``# 这是一级标题  ## 这是二级标题 你可以使你的文本 *斜体* 或 **粗体** 或 `等宽字体`。  * 这是一个项目符号 * 这是另一个项目符号``'
- en: After hitting Shift+Enter, the text will be rendered into nicely formatted HTML.
    At this point, your notebook should look like what’s in [Figure 2-4](#filepos139569).
    Markdown cells also allow you to include images, videos, or formulas; see the
    [Jupyter notebook docs](https://oreil.ly/elGTF).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按下Shift+Enter后，文本将呈现为精美格式化的HTML。此时，你的笔记本应该看起来像[图 2-4](#filepos139569)中的内容一样。Markdown单元格还允许你包含图片、视频或公式；请参阅[Jupyter笔记本文档](https://oreil.ly/elGTF)。
- en: '![](images/00004.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00004.jpg)'
- en: Figure 2-4\. The notebook after running a code cell and a Markdown cell
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-4\. 运行代码单元格和Markdown单元格后的笔记本
- en: 'Now that you know about the code and Markdown cell types, it’s time to learn
    an easier way to navigate between cells: the next section introduces the edit
    and command mode along with a few keyboard shortcuts.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了代码和Markdown单元格类型，是时候学习更简单的在单元格之间导航的方法了：下一节介绍了编辑和命令模式以及一些键盘快捷键。
- en: Edit vs. Command Mode
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑模式与命令模式
- en: 'When you interact with cells in a Jupyter notebook, you are either in the edit
    mode or in the command mode:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jupyter笔记本中与单元格交互时，你要么处于编辑模式，要么处于命令模式：
- en: Edit mode
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑模式
- en: 'Clicking into a cell starts the edit mode: the border around the selected cell
    turns green, and the cursor in the cell is blinking. Instead of clicking into
    a cell, you can also hit Enter when the cell is selected.'
  id: totrans-133
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 点击单元格会进入编辑模式：所选单元格周围的边框变为绿色，并且单元格内的光标在闪烁。你也可以在选定单元格时按Enter键，而不是点击单元格。
- en: Command mode
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 命令模式
- en: To switch into command mode, hit the Escape key; the border around the selected
    cell will be blue, and there won’t be any blinking cursor. The most important
    keyboard shortcuts that you can use while being in command mode are shown in [Table 2-3](#filepos141200).
  id: totrans-135
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要切换到命令模式，请按下`Escape`键；所选单元格周围的边框将变为蓝色，且不会有任何闪烁的光标。你可以在命令模式下使用的最重要的键盘快捷键如[表 2-3](#filepos141200)所示。
- en: Table 2-3\. Keyboard shortcuts (command mode)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2-3\. 键盘快捷键（命令模式）
- en: '|  Shortcut  |  Action  |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '|  快捷键  |  动作  |'
- en: '|  Shift+Enter  |  Run the cell (works also in edit mode)  |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '|  Shift+Enter  |  运行单元格（在编辑模式下也适用）  |'
- en: '|  ↑ ( `up-arrow`) |  Move cell selector up  |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '|  ↑（`向上箭头`） |  向上移动单元格选择器  |'
- en: '|  ↓ ( `down-arrow`) |  Move cell selector down  |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|  ↓（`向下箭头`） |  向下移动单元格选择器  |'
- en: '|   `b` |  Insert a new cell  below the current cell |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '|   `b` |  在当前单元格下方插入一个新单元格  |'
- en: '|   `a` |  Insert a new cell  above the current cell |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '|   `a` |  在当前单元格上方插入一个新单元格  |'
- en: '|   `dd` |  Delete the current cell (type two times the letter  `d`) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '|   `dd` |  删除当前单元格（键入两次字母`d`） |'
- en: '|   `m` |  Change cell type to Markdown  |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '|   `m` |  将单元格类型更改为Markdown  |'
- en: '|   `y` |  Change cell type to code  |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '|   `y` |  将单元格类型更改为代码  |'
- en: 'Knowing these keyboard shortcuts will allow you to work with notebooks efficiently
    without having to switch between keyboard and mouse all the time. In the next
    section, I’ll show you a common gotcha that you need to be aware of when using
    Jupyter notebooks: the importance of running cells in order.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 知道这些键盘快捷键将允许你高效地使用笔记本，而无需经常在键盘和鼠标之间切换。在下一节中，我将向你展示使用 Jupyter 笔记本时需要注意的常见陷阱：按顺序运行单元格的重要性。
- en: Run Order Matters
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 运行顺序很重要
- en: 'As easy and user-friendly notebooks are to get started, they also make it easy
    to get into confusing states if you don’t run cells sequentially. Assume you have
    the following notebook cells that are run from top to bottom:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然笔记本易于上手和用户友好，但如果不按顺序运行单元格，也容易陷入混乱的状态。假设你有以下笔记本单元格按顺序运行：
- en: '`In``[``2``]:``a``=``1`'
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``2``]:``a``=``1``'
- en: '`In``[``3``]:``a`'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``3``]:``a``'
- en: '`Out[3]: 1`'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[3]: 1`'
- en: '`In``[``4``]:``a``=``2`'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``4``]:``a``=``2`'
- en: 'Cell `Out[3]` prints the value `1` as expected. However, if you now go back
    and run `In[3]` again, you will end up in this situation:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格`Out[3]`按预期输出值`1`。然而，如果现在返回并再次运行`In[3]`，你将会陷入这种情况：
- en: '`In``[``2``]:``a``=``1`'
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``2``]:``a``=``1`'
- en: '`In``[``5``]:``a`'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``5``]:``a``'
- en: '`Out[5]: 2`'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[5]: 2`'
- en: '`In``[``4``]:``a``=``2`'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``4``]:``a``=``2`'
- en: '`Out[5]` shows now the value `2`, which is probably not what you would expect
    when you read the notebook from the top, especially if cell `In[4]` would be farther
    away, requiring you to scroll down. To prevent such cases, I would recommend that
    you rerun not just a single cell, but all of its previous cells, too. Jupyter
    notebooks offer you an easy way to accomplish this under the menu Cell > Run all
    above. After these words of caution, let’s see how you shut down a notebook properly!'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`Out[5]`现在显示的值为`2`，这可能不是你在从顶部阅读笔记本时期望的结果，特别是如果`In[4]`单元格更远，需要向下滚动。为防止这种情况发生，我建议你不仅重新运行单个单元格，还应该重新运行其前面的所有单元格。Jupyter
    笔记本为你提供了一个简单的方法，在菜单单元格 > 运行所有上面可以实现这一点。在这些警示之后，让我们看看如何正确关闭笔记本！'
- en: Shutting Down Jupyter Notebooks
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭 Jupyter 笔记本
- en: Every notebook runs in a separate Jupyter kernel. A kernel is the “engine” that
    runs the Python code you type into a notebook cell. Every kernel uses resources
    from your operating system in the form of CPU and RAM. Therefore, when you close
    a notebook, you should also shut down its kernel so that the resources can be
    used again by other tasks—this will prevent your system from slowing down. The
    easiest way to accomplish this is by closing a notebook via File > Close and Halt.
    If you would just close the browser tab, the kernel will not be shut down automatically.
    Alternatively, on the Jupyter dashboard, you can close running notebooks from
    the tab Running.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 每个笔记本在单独的 Jupyter 内核中运行。内核是运行你在笔记本单元格中键入的 Python 代码的“引擎”。每个内核都会使用操作系统的 CPU 和
    RAM 资源。因此，当你关闭一个笔记本时，应同时关闭其内核，以便资源可以被其他任务再次使用，这将防止系统变慢。最简单的方法是通过文件 > 关闭并停止关闭笔记本。如果只是关闭浏览器选项卡，内核将不会自动关闭。另外，在
    Jupyter 仪表板上，你可以通过运行标签关闭正在运行的笔记本来关闭笔记本。
- en: To shut down the whole Jupyter server, click the Quit button at the top right
    of the Jupyter dashboard. If you have already closed your browser, you can type
    Ctrl+C twice in the Anaconda Prompt where the notebook server is running or close
    the Anaconda Prompt altogether.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要关闭整个 Jupyter 服务器，请单击 Jupyter 仪表板右上角的退出按钮。如果已经关闭了浏览器，你可以在运行笔记本服务器的 Anaconda
    提示符中键入两次 Ctrl+C，或者完全关闭 Anaconda 提示符。
- en: JUPYTER NOTEBOOKS IN THE CLOUD
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 云中的 Jupyter 笔记本
- en: Jupyter notebooks have become so popular that they are offered as a hosted solution
    by various cloud providers. I am introducing three services here that are all
    free to use. The advantage of these services is that they run instantly and everywhere
    you can access a browser, without the need to install anything locally. You could,
    for example, run the samples on a tablet while reading the first three parts.
    Since [Part IV](index_split_023.html#filepos1235617) requires a local installation
    of Excel, this won’t work there, though.
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Jupyter 笔记本已经变得如此流行，以至于各种云提供商都提供它们作为托管解决方案。我在这里介绍三个免费使用的服务。这些服务的优势在于它们可以即时在任何你可以访问浏览器的地方运行，而无需在本地安装任何内容。例如，你可以在阅读前三部分的同时，在平板电脑上运行示例。但是，由于[第四部分](index_split_023.html#filepos1235617)需要本地安装
    Excel，所以在那里无法运行。
- en: Binder
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 绑定器
- en: '[Binder](https://mybinder.org) is a service provided by Project Jupyter, the
    organization behind Jupyter notebooks. Binder is meant to try out the Jupyter
    notebooks from public Git repositories—you don’t store anything on Binder itself
    and hence you don’t need to sign up or log in to use it.'
  id: totrans-165
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Binder](https://mybinder.org) 是Jupyter笔记本背后的组织Project Jupyter提供的服务。Binder旨在尝试来自公共Git仓库的Jupyter笔记本
    - 你不在Binder本身存储任何东西，因此你不需要注册或登录即可使用它。'
- en: Kaggle Notebooks
  id: totrans-166
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Kaggle笔记本
- en: '[Kaggle](https://kaggle.com) is a platform for data science. As it hosts data
    science competitions, you get easy access to a huge collection of datasets. Kaggle
    has been part of Google since 2017.'
  id: totrans-167
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Kaggle](https://kaggle.com) 是一个数据科学平台。它主办数据科学竞赛，让你轻松获取大量数据集。自2017年起，Kaggle
    已成为谷歌的一部分。'
- en: Google Colab
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Google Colab
- en: '[Google Colab](https://oreil.ly/4PLcS) (short for Colaboratory) is Google’s
    notebook platform. Unfortunately, the majority of the Jupyter notebook keyboard
    shortcuts don’t work, but you can access files on your Google Drive, including
    Google Sheets.'
  id: totrans-169
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Google Colab](https://oreil.ly/4PLcS)（简称Colaboratory）是Google的笔记本平台。不幸的是，大多数Jupyter笔记本的键盘快捷键不起作用，但你可以访问你的Google
    Drive上的文件，包括Google Sheets。'
- en: The easiest way to run the Jupyter notebooks of the companion repository in
    the cloud is by going to its [Binder URL](https://oreil.ly/MAjJK). You will be
    working on a copy of the companion repository, so feel free to edit and break
    stuff as you like!
  id: totrans-170
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在云端运行伴随仓库的Jupyter笔记本最简单的方法是访问其[Binder URL](https://oreil.ly/MAjJK)。你将在伴随仓库的副本上工作，所以随意编辑和打破东西！
- en: Now that know how to work with Jupyter notebooks, let’s move on and learn about
    how to write and run standard Python scripts. To do this, we’ll use Visual Studio
    Code, a powerful text editor with great Python support.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何使用Jupyter笔记本工作，让我们继续学习如何编写和运行标准的Python脚本。为此，我们将使用Visual Studio Code，这是一个功能强大的文本编辑器，支持Python。
- en: Visual Studio Code
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: In this section, we’ll install and configure Visual Studio Code (VS Code), a
    free and open source text editor from Microsoft. After introducing its most important
    components, we’ll write a first Python script and run it in a few different ways.
    To begin with, however, I will explain when we’ll use Jupyter notebooks as opposed
    to running Python scripts and why I chose VS Code for this book.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装和配置Visual Studio Code（VS Code），这是来自Microsoft的免费开源文本编辑器。在介绍其最重要的组件后，我们将以几种不同的方式编写第一个Python脚本并运行它。不过，首先我将解释为什么我们将使用Jupyter笔记本而不是运行Python脚本，并且为什么我选择了VS
    Code。
- en: 'While Jupyter notebooks are amazing for interactive workflows like researching,
    teaching, and experimenting, they are less ideal if you want to write Python scripts
    geared toward a production environment that do not need the visualization capabilities
    of notebooks. Also, more complex projects that involve many files and developers
    are hard to manage with Jupyter notebooks. In this case, you want to use a proper
    text editor to write and run classic Python files. In theory, you could use just
    about any text editor (even Notepad would work), but in reality, you want one
    that “understands” Python. That is, a text editor that supports at least the following
    features:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Jupyter 笔记本非常适合互动式工作流，如研究、教学和实验，但如果你想编写不需要笔记本的可视化能力的Python脚本，用于生产环境，它们就不那么理想了。此外，使用Jupyter笔记本管理涉及多个文件和开发者的更复杂项目也很困难。在这种情况下，你应该使用适合的文本编辑器来编写和运行经典的Python文件。理论上，你可以使用几乎任何文本编辑器（甚至记事本也可以），但实际上，你需要一个“理解”Python的文本编辑器。也就是说，一个至少支持以下功能的文本编辑器：
- en: Syntax highlighting
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 语法高亮
- en: The editor colors words differently based on whether they represent a function,
    a string, a number, etc. This makes it much easier to read and understand the
    code.
  id: totrans-176
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据单词表示的是否是函数、字符串、数字等，编辑器会用不同的颜色标记这些词，这样更容易阅读和理解代码。
- en: Autocomplete
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 自动补全
- en: Autocomplete or IntelliSense, as Microsoft calls it, automatically suggests
    text components so that you have to type less, which leads to fewer errors.
  id: totrans-178
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自动补全或IntelliSense，正如微软所称，会自动建议文本组件，从而让您更少输入，减少错误。
- en: 'And soon enough, you have other needs that you would like to access directly
    from within the editor:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 而且不久之后，你会希望直接从编辑器中访问其他需求：
- en: Run code
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码
- en: Switching back and forth between the text editor and an external Anaconda Prompt
    (i.e., Command Prompt or Terminal) to run your code can be a hassle.
  id: totrans-181
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在文本编辑器和外部Anaconda Prompt（即命令提示符或终端）之间来回切换以运行代码可能会很麻烦。
- en: Debugger
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器
- en: A debugger allows you to step through the code line by line to see what’s going
    on.
  id: totrans-183
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 调试器允许你逐行步进代码，查看发生了什么。
- en: Version control
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制
- en: If you use Git to version control your files, it makes sense to handle the Git-related
    stuff directly in the editor so you don’t have to switch back and forth between
    two applications.
  id: totrans-185
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你使用 Git 进行版本控制，直接在编辑器中处理与 Git 相关的事务是有意义的，这样你就不必在两个应用程序之间来回切换。
- en: 'There is a wide spectrum of tools that can help you with all that, and as usual,
    every developer has different needs and preferences. Some may indeed want to use
    a no-frills text editor together with an external Command Prompt. Others may prefer
    an integrated development environment (IDE): IDEs try to put everything you’ll
    ever need into a single tool, which can make them bloated.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有一系列工具可以帮助你完成所有这些工作，如往常，每个开发人员都有不同的需求和偏好。有些人可能确实想要使用一个简单的文本编辑器，配合一个外部命令提示符。而其他人可能更喜欢集成开发环境（IDE）：IDE
    试图将你所需的一切都放入一个工具中，这可能会使它们变得臃肿。
- en: 'I chose VS Code for this book as it has quickly become one of the most popular
    code editors among developers after its initial release in 2015: in the [StackOverflow
    Developer Survey 2019](https://oreil.ly/savHe), it came out as the most popular
    development environment. What makes VS Code such a popular tool? In essence, it’s
    the right mix between a bare-bones text editor and a full-blown IDE: VS Code is
    a mini IDE that comes with everything you need for programming out of the box,
    but not more:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了 VS Code 作为本书的工具，因为它在 2015 年首次发布后迅速成为开发人员中最受欢迎的代码编辑器之一：在 [StackOverflow
    开发者调查 2019](https://oreil.ly/savHe) 中，它被评为最受欢迎的开发环境。是什么让 VS Code 成为如此受欢迎的工具呢？实质上，它是一个简易文本编辑器和完整
    IDE 之间的完美结合：VS Code 是一个迷你 IDE，一切都已经包含在内，但不再多余：
- en: Cross-platform
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台
- en: VS Code runs on Windows, macOS, and Linux. There are also cloud-hosted versions
    like [GitHub Codespaces](https://oreil.ly/bDGWE).
  id: totrans-189
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: VS Code 可在 Windows、macOS 和 Linux 上运行。还有云托管版本，比如[GitHub Codespaces](https://oreil.ly/bDGWE)。
- en: Integrated tools
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 集成工具
- en: VS Code comes with a debugger, support for Git version control, and has an integrated
    Terminal that you can use as Anaconda Prompt.
  id: totrans-191
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: VS Code 自带调试器，支持 Git 版本控制，并且有一个集成的终端，你可以将其用作 Anaconda Prompt。
- en: Extensions
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展
- en: Everything else, e.g., Python support, is added via extensions that can be installed
    with a single click.
  id: totrans-193
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 其他所有内容，比如 Python 支持，都是通过单击安装的扩展添加的。
- en: Lightweight
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 轻量级
- en: Depending on your operating system, the VS Code installer is just 50–100 MB.
  id: totrans-195
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据你的操作系统，VS Code 安装程序的大小仅为 50–100 MB。
- en: VISUAL STUDIO CODE VS. VISUAL STUDIO
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Visual Studio Code 与 Visual Studio 的区别
- en: Don’t confuse Visual Studio Code with Visual Studio, the IDE! While you could
    use Visual Studio for Python development (it comes with PTVS, the Python Tools
    for Visual Studio), it’s a really heavy installation and is traditionally used
    to work with .NET languages like C#.
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不要将 Visual Studio Code 与 Visual Studio 混淆！虽然你可以使用 Visual Studio 进行 Python 开发（它附带了
    PTVS，即 Python Tools for Visual Studio），但它是一个非常庞大的安装包，传统上是用于处理 .NET 语言，比如 C#。
- en: To find out if you agree with my praise for VS Code, there is no better way
    than installing it and trying it out yourself. The next section gets you started!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要想知道你是否同意我对 VS Code 的赞美，最好的方法莫过于安装它并亲自试用一番。下一节将带你开始使用！
- en: Installation and Configuration
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置
- en: Download the installer from the [VS Code home page](https://oreil.ly/26Jfa).
    For the latest installation instructions, please always refer to the official
    docs.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 从[VS Code 主页](https://oreil.ly/26Jfa)下载安装程序。有关最新的安装说明，请始终参考官方文档。
- en: Windows
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: Double-click the installer and accept all defaults. Then open VS Code via Windows
    Start menu, where you will find it under Visual Studio Code.
  id: totrans-202
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 双击安装程序并接受所有默认设置。然后通过 Windows 开始菜单打开 VS Code，在那里你会在 Visual Studio Code 下找到它。
- en: macOS
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: 'Double-click the ZIP file to unpack the app. Then drag and drop Visual Studio
    Code.app into the Applications folder: you can now start it from the Launchpad.
    If the application doesn’t start, go to System Preferences > Security & Privacy
    > General and choose Open Anyway.'
  id: totrans-204
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 双击 ZIP 文件以解压应用程序。然后将 Visual Studio Code.app 拖放到应用程序文件夹中：现在你可以从启动台启动它了。如果应用程序没有启动，请转到系统偏好设置
    > 安全性与隐私 > 通用，并选择「仍然打开」。
- en: When you open VS Code for the first time, it looks like [Figure 2-5](#filepos160919).
    Note that I have switched from the default dark theme to a light theme to make
    the screenshots easier to read.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次打开 VS Code 时，它看起来像[图 2-5](#filepos160919)。请注意，我已将默认的深色主题切换为浅色主题，以便更容易阅读截图。
- en: '![](images/00011.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00011.jpg)'
- en: Figure 2-5\. Visual Studio Code
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-5\. Visual Studio Code
- en: Activity Bar
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 活动栏
- en: 'On the lefthand side, you see the Activity Bar with the following icons from
    top to bottom:'
  id: totrans-209
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在左侧，你会看到活动栏，从上到下的图标依次为：
- en: Explorer
  id: totrans-210
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 资源管理器
- en: Search
  id: totrans-211
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 搜索
- en: Source Control
  id: totrans-212
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 源代码控制
- en: Run
  id: totrans-213
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 运行
- en: Extensions
  id: totrans-214
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 扩展
- en: Status Bar
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏
- en: At the bottom of the editor, you have the Status Bar. Once you have the configuration
    complete and edit a Python file, you will see the Python interpreter show up there.
  id: totrans-216
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在编辑器底部，你有状态栏。一旦配置完成并编辑一个 Python 文件，你将看到 Python 解释器显示在那里。
- en: Command Palette
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 命令面板
- en: 'You can show the Command Palette via F1 or with the keyboard shortcut Ctrl+Shift+P
    (Windows) or Command-Shift-P (macOS). If you are unsure about something, your
    first stop should always be the Command Palette, as it gives you easy access to
    almost everything you can do with VS Code. For example, if you are looking for
    keyboard shortcuts, type in `keyboard shortcuts`, select the entry “Help: Keyboard
    Shortcuts Reference,” and hit Enter.'
  id: totrans-218
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '你可以通过 F1 或键盘快捷键 Ctrl+Shift+P（Windows）或 Command-Shift-P（macOS）显示命令面板。如果有不确定的事情，你首先应该去命令面板，因为它可以轻松访问几乎所有你可以在
    VS Code 中做的事情。例如，如果你正在寻找键盘快捷键，输入 `keyboard shortcuts`，选择“Help: Keyboard Shortcuts
    Reference”并按 Enter。'
- en: 'VS Code is a great text editor out of the box, but to make it work nicely with
    Python, there are a few more things to configure: click on the Extensions icon
    on the Activity Bar and search for Python. Install the official Python extension
    that shows Microsoft as the author. It will take a moment to install and once
    done, you may need to click the Reload Required button to finish—alternatively,
    you could also restart VS Code completely. Finalize the configuration according
    to your platform:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 是一个开箱即用的优秀文本编辑器，但是要使其与 Python 协同工作良好，还需要进行一些配置：点击活动栏上的 Extensions 图标，搜索
    Python。安装显示 Microsoft 为作者的官方 Python 扩展。安装需要一些时间，安装完成后，可能需要点击 Reload Required 按钮完成配置
    — 或者你也可以完全重新启动 VS Code。根据你的平台完成配置：
- en: Windows
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: 'Open the Command Palette and type `default shell`. Select the entry that reads
    “Terminal: Select Default Shell” and hit Enter. In the dropdown menu, select Command
    Prompt and confirm by hitting Enter. This is required because otherwise VS Code
    can’t properly activate Conda environments.'
  id: totrans-221
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '打开命令面板并输入 `default shell`。选择“Terminal: Select Default Shell”并按 Enter。在下拉菜单中选择
    Command Prompt，并确认按 Enter。这是必需的，否则 VS Code 无法正确激活 Conda 环境。'
- en: macOS
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: 'Open the Command Palette and type `shell command`. Select the entry that reads
    “Shell Command: Install ‘code’ command in PATH” and hit Enter. This is required
    so that you can start VS Code conveniently from the Anaconda Prompt (i.e., the
    Terminal).'
  id: totrans-223
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '打开命令面板并输入 `shell command`。选择“Shell Command: Install ‘code’ command in PATH”并按
    Enter。这是必需的，这样你就可以方便地从 Anaconda Prompt（即终端）启动 VS Code。'
- en: Now that VS Code is installed and configured, let’s use it to write and run
    our first Python script!
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 VS Code 已经安装和配置好了，让我们使用它来编写并运行我们的第一个 Python 脚本！
- en: Running a Python Script
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Python 脚本
- en: 'While you can open VS Code via the Start menu on Windows or Launchpad on macOS,
    it’s often faster to open VS Code from the Anaconda Prompt, where you are able
    to launch it via the `code` command. Therefore, open a new Anaconda Prompt and
    change into the directory where you want to work by using the `cd` command, then
    instruct VS Code to open the current directory (represented by the dot):'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以通过 Windows 的“开始”菜单或 macOS 的“启动台”打开 VS Code，但是通过 Anaconda Prompt 打开 VS Code
    通常更快，你可以通过 `code` 命令启动它。因此，打开一个新的 Anaconda Prompt，并使用 `cd` 命令切换到你想要工作的目录，然后指示
    VS Code 打开当前目录（用点表示）：
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `code .`'
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `code .`'
- en: Starting VS Code this way will cause the Explorer on the Activity Bar to automatically
    show the contents of the directory you were in when you ran the `code` command.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式启动 VS Code 将会导致活动栏上的资源管理器自动显示运行 `code` 命令时所在目录的内容。
- en: 'Alternatively, you could also open a directory via File > Open Folder (on macOS:
    File > Open), but this might cause permission errors on macOS when we start using
    xlwings in Part IV. When you hover over the file list in the Explorer on the Activity
    Bar, you will see the New File button appear as shown in [Figure 2-6](#filepos167792).
    Click on New File and call your file hello_world.py, then hit Enter. Once it opens
    in the editor, write the following line of code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以通过 File > Open Folder 打开目录（在 macOS 上为 File > Open），但在我们在第四部分开始使用 xlwings
    时，这可能会在 macOS 上引起权限错误。当您在活动栏的资源管理器上悬停文件列表时，您会看到新文件按钮出现，如 [图 2-6](#filepos167792)
    所示。单击新文件并命名为 hello_world.py，然后按 Enter。一旦在编辑器中打开，请写入以下代码行：
- en: '`print``(``"hello world!"``)`'
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`print``(``"hello world!"``)`'
- en: Remember that Jupyter notebooks conveniently print the return value of the last
    line automatically? When you run a traditional Python script, you need to tell
    Python explicitly what to print, which is why you need to use the `print` function
    here. In the Status Bar, you should now see your Python version, e.g., “Python
    3.8.5 64-bit (conda).” If you click on it, the Command Palette will open and allow
    you to select a different Python interpreter if you have more than one (this includes
    Conda environments). Your set up should now look like the one in [Figure 2-6](#filepos167792).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Jupyter 笔记本方便地自动打印最后一行的返回值？当您运行传统的 Python 脚本时，您需要明确告诉 Python 要打印什么，这就是为什么在这里需要使用
    `print` 函数的原因。在状态栏中，您现在应该看到您的 Python 版本，例如，“Python 3.8.5 64-bit (conda)”。如果单击它，命令面板将打开，并允许您选择不同的
    Python 解释器（如果您有多个，包括 Conda 环境）。您的设置现在应该看起来像 [图 2-6](#filepos167792) 中的设置。
- en: '![](images/00018.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00018.jpg)'
- en: Figure 2-6\. VS Code with hello_world.py open
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2-6\. 打开 hello_world.py 的 VS Code 界面
- en: Before we can run the script, make sure to save it by hitting Ctrl+S on Windows
    or Command-S on macOS. With Jupyter notebooks, we could simply select a cell and
    hit Shift+Enter to run that cell. With VS Code, you can run your code from either
    the Anaconda Prompt or by clicking the Run button. Running Python code from the
    Anaconda Prompt is how you most likely run scripts that are on a server, so it’s
    important to know how this works.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本之前，请确保按下 Windows 上的 Ctrl+S 或 macOS 上的 Command-S 保存它。在 Jupyter 笔记本中，我们可以简单地选择一个单元格，然后按
    Shift+Enter 运行该单元格。在 VS Code 中，您可以从 Anaconda Prompt 或点击运行按钮运行代码。从 Anaconda Prompt
    运行 Python 代码是您可能在服务器上运行脚本的方式，因此了解这个过程非常重要。
- en: Anaconda Prompt
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda Prompt
- en: 'Open an Anaconda Prompt, `cd` into the directory with the script, then run
    the script like so:'
  id: totrans-236
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 打开 Anaconda Prompt，`cd` 到包含脚本的目录，然后像这样运行脚本：
- en: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `python hello_world.py`
    `hello world!`'
  id: totrans-237
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `cd C:\Users\``username``\python-for-excel` `(base)>` `python hello_world.py`
    `hello world!`'
- en: 'The last line is the output that is printed by the script. Note that if you
    are not in the same directory as your Python file, you need to use the full path
    to your Python file:'
  id: totrans-238
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最后一行是脚本打印的输出。请注意，如果您不在与 Python 文件相同的目录中，您需要使用完整路径到您的 Python 文件：
- en: '`(base)>` `python C:\Users\``username``\python-for-excel\hello_world.py` `hello
    world!`'
  id: totrans-239
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `python C:\Users\``username``\python-for-excel\hello_world.py` `hello
    world!`'
- en: LONG FILE PATHS ON THE ANACONDA PROMPT
  id: totrans-240
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Anaconda Prompt 上的长文件路径
- en: A convenient way to deal with long file paths is to drag and drop the file onto
    your Anaconda Prompt. This will write the full path wherever the cursor is.
  id: totrans-241
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 处理长文件路径的便捷方式是将文件拖放到 Anaconda Prompt 中。这将在光标所在处写入完整路径。
- en: Anaconda Prompt in VS Code
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 中的 Anaconda Prompt
- en: 'You don’t need to switch away from VS Code to work with the Anaconda Prompt:
    VS Code has an integrated Terminal that you can show via the keyboard shortcut
    Ctrl+` or via View > Terminal. Since it opens in the project folder, you don’t
    need to change the directory first:'
  id: totrans-243
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您无需切换到 Anaconda Prompt 就能使用它：VS Code 有一个集成的终端，您可以通过键盘快捷键 Ctrl+` 或通过 View > Terminal
    打开。由于它在项目文件夹中打开，您无需先更改目录：
- en: '`(base)>` `python hello_world.py` `hello world!`'
  id: totrans-244
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `python hello_world.py` `hello world!`'
- en: Run Button in VS Code
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VS Code 中的运行按钮
- en: 'In VS code, there is an easy way to run your code without having to use the
    Anaconda Prompt: when you edit a Python file, you will see a green Play icon at
    the top right—this is the Run File button, as shown in [Figure 2-6](#filepos167792).
    Clicking it will open the Terminal at the bottom automatically and run the code
    there.'
  id: totrans-246
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 VS Code 中，有一种简单的方法可以运行代码，而不必使用 Anaconda Prompt：当您编辑 Python 文件时，您将在右上角看到一个绿色的播放图标——这是运行文件按钮，如
    [图 2-6](#filepos167792) 所示。单击它将自动在底部打开终端并在那里运行代码。
- en: OPENING FILES IN VS CODE
  id: totrans-247
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 VS Code 中打开文件
- en: 'VS Code has an unconventional default behavior when you single-click a file
    in the Explorer (Activity Bar): the file is opened in preview mode, which means
    that the next file that you single-click will replace it in the tab unless you
    have made some changes to the file. If you want to switch off the single-click
    behavior (so a single-click will select a file and a double-click will open it),
    go to Preferences > Settings (Ctrl+, on Windows or Command-, on macOS) and set
    the dropdown under Workbench > “List: Open Mode” to “doubleClick.”'
  id: totrans-248
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你在资源管理器（活动栏）中单击文件时，VS Code 有一个不同寻常的默认行为：文件会以预览模式打开，这意味着你接下来单击的文件将替换它在标签中的位置，除非你对文件进行了一些更改。如果你想关闭单击行为（这样单击将选择文件，双击将打开它），请转到“首选项”
    > “设置”（在 Windows 上按 Ctrl+, 或在 macOS 上按 Command-,）并将“工作台”下拉菜单下的“列表：打开模式”设置为“双击”。
- en: 'At this point, you know how to create, edit, and run Python scripts in VS Code.
    VS Code can do quite a bit more, though: in [Appendix B](index_split_030.html#filepos1820886),
    I explain how to use the debugger and how you can run Jupyter notebooks with VS
    Code.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经知道如何在 VS Code 中创建、编辑和运行 Python 脚本。但是 VS Code 还可以做更多：在 [附录 B](index_split_030.html#filepos1820886)
    中，我解释了如何使用调试器以及如何在 VS Code 中运行 Jupyter 笔记本。
- en: ALTERNATIVE TEXT EDITORS AND IDES
  id: totrans-250
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 替代文本编辑器和 IDE
- en: Tools are something individual, and just because this book is based on Jupyter
    notebooks and VS Code doesn’t mean you shouldn’t have a look at other options.
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 工具是个人的选择，仅因为本书基于 Jupyter 笔记本和 VS Code，并不意味着你不应该看看其他选项。
- en: 'Some popular text editors include:'
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一些流行的文本编辑器包括：
- en: Sublime Text
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Sublime Text
- en: '[Sublime](https://oreil.ly/9FVLD) is a fast commercial text editor.'
  id: totrans-254
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Sublime](https://oreil.ly/9FVLD) 是一个快速的商业文本编辑器。'
- en: Notepad++
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Notepad++
- en: '[Notepad++](https://oreil.ly/7Ksk9) is free and has been around for a very
    long time but is Windows-only.'
  id: totrans-256
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Notepad++](https://oreil.ly/7Ksk9) 是免费的，已经存在很长时间，但只能在 Windows 上使用。'
- en: Vim or Emacs
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Vim 或 Emacs
- en: '[Vim](https://vim.org) or [Emacs](https://oreil.ly/z__Kz) may not be the best
    options for beginner programmers due to their steep learning curve, but they are
    very popular among professionals. The rivalry between the two free editors is
    so big that Wikipedia describes it as the “editor war.”'
  id: totrans-258
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Vim](https://vim.org) 或者 [Emacs](https://oreil.ly/z__Kz) 对于初学者程序员来说可能不是最佳选择，因为它们的学习曲线陡峭，但它们在专业人士中非常受欢迎。这两款免费编辑器之间的竞争是如此激烈，以至于维基百科将其描述为“编辑器之战”。'
- en: 'Popular IDEs include:'
  id: totrans-259
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 流行的 IDE 包括：
- en: PyCharm
  id: totrans-260
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PyCharm
- en: The [PyCharm](https://oreil.ly/OrIj-) community edition is free and very powerful,
    while the professional edition is commercial and adds support for scientific tools
    and web development.
  id: totrans-261
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PyCharm](https://oreil.ly/OrIj-) 社区版是免费且功能强大的，而专业版是商业版，增加了对科学工具和 Web 开发的支持。'
- en: Spyder
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Spyder
- en: '[Spyder](https://spyder-ide.org) is similar to MATLAB’s IDE and comes with
    a variable explorer. Since it’s included in the Anaconda distribution, you can
    give it a try by running the following on an Anaconda Prompt: `(base)>` `spyder`.'
  id: totrans-263
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Spyder](https://spyder-ide.org) 类似于 MATLAB 的 IDE，并带有一个变量资源管理器。由于它包含在 Anaconda
    分发中，你可以在 Anaconda Prompt 上运行以下命令进行尝试：`(base)>` `spyder`。'
- en: JupyterLab
  id: totrans-264
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: JupyterLab
- en: '[JupyterLab](https://jupyter.org) is a web-based IDE developed by the team
    behind Jupyter notebooks and can, of course, run Jupyter notebooks. Other than
    that, it tries to integrate everything else you need for your data science tasks
    into a single tool.'
  id: totrans-265
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[JupyterLab](https://jupyter.org) 是由 Jupyter 笔记本团队开发的基于 Web 的 IDE，当然，它也可以运行
    Jupyter 笔记本。除此之外，它还试图将你在数据科学任务中所需的一切整合到一个工具中。'
- en: Wing Python IDE
  id: totrans-266
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Wing Python IDE
- en: '[Wing Python IDE](https://wingware.com) is an IDE that has been around for
    a long time. There are free simplified versions and a commercial version called
    Wing Pro.'
  id: totrans-267
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Wing Python IDE](https://wingware.com) 是一个存在很长时间的 IDE。有免费的简化版本和一个商业版本称为 Wing
    Pro。'
- en: Komodo IDE
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Komodo IDE
- en: '[Komodo IDE](https://oreil.ly/Cdtab) is a commercial IDE developed by ActiveState
    and supports many other languages apart from Python.'
  id: totrans-269
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Komodo IDE](https://oreil.ly/Cdtab) 是由 ActiveState 开发的商业 IDE，除了 Python 之外还支持许多其他语言。'
- en: PyDev
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PyDev
- en: '[PyDev](https://pydev.org) is a Python IDE based on the popular Eclipse IDE.'
  id: totrans-271
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[PyDev](https://pydev.org) 是基于流行的 Eclipse IDE 的 Python IDE。'
- en: Conclusion
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this chapter, I showed you how to install and use the tools we will work
    with: the Anaconda Prompt, Jupyter notebooks, and VS Code. We also ran a tiny
    bit of Python code in a Python REPL, in a Jupyter notebook, and as script in VS
    Code.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我向你展示了如何安装和使用我们将要使用的工具：Anaconda Prompt、Jupyter 笔记本和 VS Code。我们还在 Python
    REPL、Jupyter 笔记本和 VS Code 中运行了一小部分 Python 代码。
- en: I do recommend you get comfortable with the Anaconda Prompt, as it will give
    you a lot of power once you get used to it. The ability to work with Jupyter notebooks
    in the cloud is also very comfortable, as it allows you to run the code samples
    of the first three parts of this book in your browser.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你熟悉Anaconda Prompt，因为一旦你习惯了它，它会给你带来很大的帮助。在云端使用Jupyter笔记本的能力也非常方便，因为它允许你在浏览器中运行本书前三部分的代码示例。
- en: With a working development environment, you are now ready to tackle the next
    chapter, where you’ll learn enough Python to be able to follow the rest of the
    book.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有了一个工作的开发环境，现在你已经准备好了解接下来的章节，这里你将学到足够的Python知识，以便能够跟上本书的其余内容。
- en: '[1  ](index_split_008.html#filepos100206) 32-bit systems only exist with Windows
    and have become rare. An easy way to find out which Windows version you have is
    by going to the C:\ drive in the File Explorer. If you can see both the Program
    Files and Program Files (x86) folders, you are on a 64-bit version of Windows.
    If you can only see the Program Files folder, you are on a 32-bit system.'
  id: totrans-276
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[1  ](index_split_008.html#filepos100206) 32位系统仅存在于Windows中，并且已经变得很少见。找出你的Windows版本的简单方法是在文件资源管理器中转到C:\驱动器。如果你可以看到Program
    Files和Program Files (x86)文件夹，那么你使用的是64位版本的Windows。如果你只能看到Program Files文件夹，那么你使用的是32位系统。'
