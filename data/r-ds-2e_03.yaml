- en: 'Chapter 2\. Workflow: Basics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章。工作流：基础
- en: 'You now have some experience running R code. We didn’t give you many details,
    but you’ve obviously figured out the basics or you would’ve thrown this book away
    in frustration! Frustration is natural when you start programming in R because
    it is such a stickler for punctuation, and even one character out of place can
    cause it to complain. But while you should expect to be a little frustrated, take
    comfort in that this experience is typical and temporary: it happens to everyone,
    and the only way to get over it is to keep trying.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有一些运行 R 代码的经验了。我们没有给你太多细节，但显然你已经掌握了基础，否则你早就会因为挫败而扔掉这本书了！开始在 R 中编程时自然会感到挫折，因为它对标点符号要求严格，即使一个字符放错位置也会导致报错。但是，尽管你可能会有些挫折，要记住这是正常且暂时的经历：每个人都会经历，唯一的克服方法就是继续努力。
- en: Before we go any further, let’s ensure you’ve got a solid foundation in running
    R code and that you know some of the most helpful RStudio features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们确保你对运行 R 代码有坚实的基础，并且了解一些最有用的 RStudio 功能。
- en: Coding Basics
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码基础
- en: 'Let’s review some basics we’ve omitted so far in the interest of getting you
    plotting as quickly as possible. You can use R to do basic math calculations:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些基础知识，这些知识我们之前为了尽快让你绘图而省略了。你可以使用 R 进行基本的数学计算：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can create new objects with the assignment operator `<-`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用赋值操作符 `<-` 创建新的对象：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the value of `x` is not printed, it’s just stored. If you want to
    view the value, type `x` in the console.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，变量 `x` 的值并不会被打印出来，它只是被存储起来了。如果你想查看这个值，在控制台输入 `x` 即可。
- en: 'You can *c*ombine multiple elements into a vector with [`c()`](https://rdrr.io/r/base/c.xhtml):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 [`c()`](https://rdrr.io/r/base/c.xhtml) 将多个元素组合成一个向量：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And basic arithmetic on vectors is applied to every element of the vector:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对向量的基本算术运算会被应用到向量的每个元素上：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All R statements where you create objects, *assignment* statements, have the
    same form:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有创建对象的 R 语句，*赋值* 语句，都具有相同的形式：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When reading that code, say “object name gets value” in your head.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读代码时，可以在脑海中说 “对象名得到值”。
- en: 'You will make lots of assignments, and `<-` is a pain to type. You can save
    time with RStudio’s keyboard shortcut: Alt+– (the minus sign). Notice that RStudio
    automatically surrounds `<-` with spaces, which is a good code formatting practice.
    Code can be miserable to read on a good day, so giveyoureyesabreak and use spaces.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你会做很多赋值操作，而 `<-` 输入起来有些麻烦。你可以使用 RStudio 的键盘快捷键来节省时间：Alt+–（减号）。注意，RStudio 会自动在
    `<-` 周围加上空格，这是良好的代码格式化实践。即使在好日子里阅读代码也可能令人沮丧，所以让你的眼睛休息一下，使用空格。
- en: Comments
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: R will ignore any text after `#` for that line. This allows you to write *comments*,
    text that is ignored by R but read by humans. We’ll sometimes include comments
    in examples to explain what’s happening with the code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: R 将忽略每行中 `#` 后面的文本。这允许你编写 *注释*，这些文本会被 R 忽略，但是会被人类读取。我们有时在示例中包含注释来解释代码的执行过程。
- en: 'Comments can be helpful for briefly describing what the code does:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以帮助简要描述代码的功能：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With short pieces of code like this, leaving a comment for every single line
    of code might not be necessary. But as the code you’re writing gets more complex,
    comments can save you (and your collaborators) a lot of time figuring out what
    was done in the code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的短小代码，可能并不需要为每一行代码都留下注释。但是当你写的代码变得更加复杂时，注释可以节省你（和你的合作者）大量的时间，用来弄清楚代码的执行过程。
- en: Use comments to explain the *why* of your code, not the *how* or the *what*.
    The *what* and *how* of your code are always possible to figure out, even if it
    might be tedious, by carefully reading it. If you describe every step in the comments
    and then change the code, you will have to remember to update the comments as
    well or it will be confusing when you return to your code in the future.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注释来解释代码的 *为什么* 而不是 *如何* 或 *什么*。代码的 *如何* 和 *什么* 总是可以通过仔细阅读来弄清楚，即使这可能有些繁琐。如果你在注释中描述每一个步骤，然后又改变了代码，你就必须记得更新注释，否则当你将来回到代码时会感到困惑。
- en: 'Figuring out *why* something was done is much more difficult, if not impossible.
    For example, `geom_smooth()` has an argument called `span`, which controls the
    smoothness of the curve, with larger values yielding a smoother curve. Suppose
    you decide to change the value of `span` from its default of 0.75 to 0.9: it’s
    easy for a future reader to understand *what* is happening, but unless you note
    your thinking in a comment, no one will understand *why* you changed the default.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 弄清楚*为什么*做某事要困难得多，甚至不可能。例如，`geom_smooth()`有一个名为`span`的参数，用于控制曲线的平滑度，较大的值会产生更平滑的曲线。假设您决定将`span`的值从默认值0.75更改为0.9：对于未来的读者来说，理解*正在发生什么*很容易，但除非您在注释中记录您的思考，否则没有人会理解*为什么*您更改了默认值。
- en: For data analysis code, use comments to explain your overall plan of attack
    and record important insights as you encounter them. There’s no way to re-capture
    this knowledge from the code itself.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据分析代码，请使用注释来解释您的整体攻击计划，并在遇到重要见解时记录它们。无法从代码本身重新捕获这些知识。
- en: What’s in a Name?
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 名称的重要性？
- en: Object names must start with a letter and can contain only letters, numbers,
    `_`, and `.`. You want your object names to be descriptive, so you’ll need to
    adopt a convention for multiple words. We recommend *snake_case*, where you separate
    lowercase words with `_`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对象名称必须以字母开头，只能包含字母、数字、`_`和`.`。您希望对象名称具有描述性，因此需要采用多词的约定。我们推荐使用*snake_case*，其中您用`_`分隔小写单词。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’ll return to names again when we discuss code style in [Chapter 4](ch04.xhtml#chp-workflow-style).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在讨论代码风格的[第4章](ch04.xhtml#chp-workflow-style)时再次谈到名称。
- en: 'You can inspect an object by typing its name:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入其名称来检查对象：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make another assignment:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再做一个赋值：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To inspect this object, try RStudio’s completion facility: type *this*, press
    Tab, add characters until you have a unique prefix, and then press Return.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查此对象，请尝试使用RStudio的完成功能：输入*this*，按Tab键，添加字符直到有一个唯一的前缀，然后按Enter键。
- en: Let’s assume you made a mistake and that the value of `this_is_a_really_long_name`
    should be 3.5, not 2.5\. You can use another keyboard shortcut to help you fix
    it. For example, you can press ↑ to bring the last command you typed and edit
    it. Or, type *this* and then press Cmd/Ctrl+↑ to list all the commands you’ve
    typed that start with those letters. Use the arrow keys to navigate and then press
    Enter to retype the command. Change 2.5 to 3.5 and rerun.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您犯了一个错误，`this_is_a_really_long_name`的值应该是3.5，而不是2.5。您可以使用另一个键盘快捷键来帮助您进行更正。例如，您可以按↑键来获取您最后输入的命令并进行编辑。或者，输入*this*，然后按Cmd/Ctrl+↑列出以这些字母开头的所有命令。使用箭头键进行导航，然后按Enter键重新输入命令。将2.5更改为3.5并重新运行。
- en: 'Make yet another assignment:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 再做一个赋值：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s try to inspect it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试检查它：
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This illustrates the implied contract between you and R: R will do the tedious
    computations for you, but in exchange, you must be completely precise in your
    instructions. If not, you’re likely to get an error that says the object you’re
    looking for was not found. Typos matter; R can’t read your mind and say, “Oh,
    they probably meant `r_rocks` when they typed `r_rock`.” Case matters; similarly,
    R can’t read your mind and say, “Oh, they probably meant `r_rocks` when they typed
    `R_rocks`.”'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了您与R之间的隐含契约：R将为您执行繁琐的计算，但作为交换，您必须在指令中完全精确。如果不这样做，您可能会收到一个错误消息，指出您要查找的对象未找到。拼写错误很重要；R无法猜测你的意图并说：“哦，他们在键入`r_rock`时可能指的是`r_rocks`。”大小写很重要；类似地，R无法猜测你的意图并说：“哦，他们在键入`R_rocks`时可能指的是`r_rocks`。”
- en: Calling Functions
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用函数
- en: 'R has a large collection of built-in functions that are called like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: R具有大量内置函数，可以这样调用它们：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let’s try using [`seq()`](https://rdrr.io/r/base/seq.xhtml), which makes regular
    *seq*uences of numbers and, while we’re at it, learn more helpful features of
    RStudio. Type `se` and hit Tab. A pop-up shows you possible completions. Specify
    [`seq()`](https://rdrr.io/r/base/seq.xhtml) by typing more (a `q`) to disambiguate
    or by using ↑/↓ arrows to select. Notice the floating tooltip that pops up, reminding
    you of the function’s arguments and purpose. If you want more help, press F1 to
    get all the details on the help tab in the lower-right pane.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用[`seq()`](https://rdrr.io/r/base/seq.xhtml)，它可以创建数字的*seq*序列，并且在我们进行学习RStudio的更多有用功能时。输入`se`并按Tab键。弹出窗口会显示可能的完成项。通过键入更多内容（如`q`）来明确或使用↑/↓箭头选择[`seq()`](https://rdrr.io/r/base/seq.xhtml)。注意浮动工具提示窗口，提醒您函数的参数和目的。如果需要更多帮助，请按F1键获取右下角帮助选项卡上的所有详细信息。
- en: When you’ve selected the function you want, press Tab again. RStudio will add
    matching opening (`(`) and closing (`)`) parentheses for you. Type the name of
    the first argument, `from`, and set it equal to `1`. Then, type the name of the
    second argument, `to`, and set it equal to `10`. Finally, hit Return.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 选择了您想要的函数后，再次按Tab。RStudio会为您添加匹配的开括号`(`和闭括号`)`。键入第一个参数`from`并设置为`1`。然后，键入第二个参数`to`并设置为`10`。最后，按回车。
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We often omit the names of the first several arguments in function calls, so
    we can rewrite this as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常省略函数调用中前几个参数的名称，因此我们可以将其重写如下：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Type the following code and notice that RStudio provides similar assistance
    with the paired quotation marks:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下代码，并注意RStudio提供了与成对引号相似的帮助：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Quotation marks and parentheses must always come in a pair. RStudio does its
    best to help you, but it’s still possible to mess up and end up with a mismatch.
    If this happens, R will show you the continuation character, +:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 引号和括号必须成对出现。RStudio会尽力帮助您，但仍然有可能出错，导致括号不匹配。如果出现这种情况，R会显示续行字符+：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `+` tells you that R is waiting for more input; it doesn’t think you’re
    done yet. Usually, this means you’ve forgotten either a `"` or a `)`. Either add
    the missing pair, or press Esc to abort the expression and try again.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`表示R正在等待更多输入；它认为您还没有完成。通常，这意味着您忘记了`"`或`)`。要么添加丢失的配对，要么按Esc中止表达式，然后重试。'
- en: 'Note that the Environment tab in the upper-right pane displays all of the objects
    that you’ve created:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，右上角的环境选项卡显示了您创建的所有对象：
- en: '![Environment tab of RStudio which shows r_rocks, this_is_a_really_long_name,
    x, and y in the Global Environment.](assets/rds2_02in01.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![RStudio的环境选项卡显示了全局环境中的r_rocks、this_is_a_really_long_name、x和y。](assets/rds2_02in01.png)'
- en: Exercises
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Why does this code not work?
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么这段代码不起作用？
- en: '[PRE16]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Look carefully! (This may seem like an exercise in pointlessness, but training
    your brain to notice even the tiniest difference will pay off when programming.)
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仔细观察！（这可能看起来毫无意义，但是当您编程时，训练大脑注意甚至最微小的差异将会带来回报。）
- en: 'Tweak each of the following R commands so that they run correctly:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整以下每个R命令，使其正确运行：
- en: '[PRE17]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Press Option+Shift+K/Alt+Shift+K. What happens? How can you get to the same
    place using the menus?
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按Option+Shift+K/Alt+Shift+K。会发生什么？如何使用菜单达到相同的位置？
- en: Let’s revisit an exercise from [“Saving Your Plots”](ch01.xhtml#sec-ggsave).
    Run the following lines of code. Which of the two plots is saved as `mpg-plot.png`?
    Why?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回顾一下[“保存您的图形”](ch01.xhtml#sec-ggsave)中的练习。运行以下代码行。哪个图表保存为`mpg-plot.png`？为什么？
- en: '[PRE18]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now that you’ve learned a little more about how R code works and gotten some
    tips to help you understand your code when you come back to it in the future,
    in the next chapter, we’ll continue your data science journey by teaching you
    about dplyr, the tidyverse package that helps you transform data, whether it’s
    selecting important variables, filtering down to rows of interest, or computing
    summary statistics.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对R代码的工作原理有了更多了解，并获得了一些帮助您在未来回顾代码时理解的提示，在下一章中，我们将继续您的数据科学之旅，教您有关dplyr的内容，这是一个帮助您转换数据的tidyverse包，无论是选择重要变量，过滤感兴趣的行，还是计算摘要统计数据。
