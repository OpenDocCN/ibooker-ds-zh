- en: Chapter 11\. Managing the Machine Learning Lifecycle with MLflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。使用 MLflow 管理机器学习生命周期
- en: As machine learning gains prominence across industries and is deployed in production
    environments, the level of collaboration and complexity surrounding it has increased
    as well. Thankfully, platforms and tools have cropped up to help manage the machine
    learning lifecycle in a structured manner. One such platform that works well with
    PySpark is MLflow. In this chapter, we will show how MLflow can be used with PySpark.
    Along the way, we’ll introduce key practices that you can incorporate in your
    data science workflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着机器学习在各行各业中的重要性不断增加，并在生产环境中部署，围绕其的协作和复杂性也在增加。幸运的是，出现了一些平台和工具，可以帮助以结构化的方式管理机器学习生命周期。其中一个与
    PySpark 配合良好的平台就是 MLflow。在本章中，我们将展示如何将 MLflow 与 PySpark 结合使用。在此过程中，我们将介绍您可以在数据科学工作流中采用的关键实践。
- en: Rather than starting from scratch, we’ll build upon the work that we did in
    [Chapter 4](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests).
    We will revisit our decision tree implementation using the Covtype dataset. Only
    this time, we’ll use MLflow for managing the machine learning lifecycle.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不打算从头开始，而是要建立在我们在 [第 4 章](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests)
    中所做的工作基础上。我们将使用 Covtype 数据集重新访问我们的决策树实现。这一次，我们将使用 MLflow 管理机器学习生命周期。
- en: We’ll start by explaining the challenges and processes that encompass the machine
    learning lifecycle. We will then introduce MLflow and its components, as well
    as cover MLflow’s support for PySpark. This will be followed by an introduction
    to tracking machine learning training runs using MLflow. We’ll then learn how
    to manage machine learning models using MLflow Models. Then we’ll discuss deployment
    of our PySpark model and do an implementation for it. We’ll end the chapter by
    creating an MLflow Project. This will show how we can make our work so far reproducible
    for collaborators. Let’s get started by discussing the machine learning lifecycle.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先解释涵盖机器学习生命周期的挑战和过程。然后，我们将介绍 MLflow 及其组件，以及 MLflow 对 PySpark 的支持。接下来，我们将介绍如何使用
    MLflow 跟踪机器学习训练运行。然后，我们将学习如何使用 MLflow Models 管理机器学习模型。然后，我们将讨论部署我们的 PySpark 模型并对其进行实施。最后，我们将创建一个
    MLflow 项目来展示如何使我们迄今为止的工作能够为合作者复现。让我们开始讨论机器学习生命周期吧。
- en: Machine Learning Lifecycle
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习生命周期
- en: There are multiple ways to describe the machine learning lifecycle. One simple
    way is to break it down into various components or steps, as shown in [Figure 11-1](#ml_lifecycle).
    These steps may not necessarily be in sequence for every project, and the lifecycle
    is cyclic more often than not.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 描述机器学习生命周期的方式有多种。一个简单的方法是将其分解为各种组件或步骤，如 [图 11-1](#ml_lifecycle) 所示。这些步骤不一定适用于每个项目的顺序，而生命周期通常是循环的。
- en: Business project definition and stakeholder alignment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务项目定义与利益相关者的对齐
- en: Data acquisition and exploration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据获取与探索
- en: Data modeling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据建模
- en: Interpretation and communication of results
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果的解释与沟通
- en: Model implementation and deployment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型实施与部署
- en: '![machine learning lifecycle](assets/machine_learning_lifecycle.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![machine learning lifecycle](assets/machine_learning_lifecycle.png)'
- en: Figure 11-1\. ML lifecycle
  id: totrans-12
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-1。ML 生命周期
- en: The speed at which you can iterate through the ML lifecycle affects how fast
    you can put your work to practical use. For example, an implemented model can
    become outdated due to a change in underlying data. In that case, you will need
    to revisit past work and build upon it again.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您能够迭代通过 ML 生命周期的速度影响您能够将工作投入实际使用的速度。例如，由于底层数据的变化，已实施的模型可能会过时。在这种情况下，您需要重新审视过去的工作并再次建立其基础。
- en: 'Examples of challenges that can show up during a machine learning project’s
    lifecycle are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习项目生命周期中可能出现的挑战示例包括：
- en: Lack of reproducibility
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏可复现性
- en: Data scientists on the same team may not be able to reproduce each other’s results
    even if the code and parameters have been tracked. This can be a result of the
    execution environment (system configuration or library dependencies) being different.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 即使代码和参数已被跟踪，同一团队的数据科学家也可能无法复现彼此的结果。这可能是由于执行环境（系统配置或库依赖关系）的不同造成的。
- en: Lack of standardization of models
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模型标准化的缺乏
- en: Different teams may use different libraries and different conventions for storing
    machine learning models. This can become a problem when sharing work across teams.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 不同团队可能会使用不同的库和不同的存储机器学习模型的约定。在跨团队共享工作时，这可能会成为问题。
- en: Trying to structure your work while going through the ML lifecycle can quickly
    become overwhelming. In light of such challenges, multiple open source and proprietary
    platforms are available to help. One leading open source platform is MLflow, which
    we will introduce in the upcoming section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行 ML 生命周期时，试图组织您的工作可能会迅速变得令人不知所措。面对这样的挑战，有多个开源和专有平台可供选择。其中一个领先的开源平台是 MLflow，我们将在接下来的部分进行介绍。
- en: MLflow
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MLflow
- en: MLflow is an open source platform for managing the end-to-end machine learning
    lifecycle. It helps us reproduce and share experiments, manage models, and deploy
    models for end users. In addition to a REST API and CLI, it also provides APIs
    for Python, R, and Java/Scala.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个用于管理端到端机器学习生命周期的开源平台。它帮助我们复现和共享实验，管理模型，并将模型部署给最终用户。除了REST API和CLI，它还提供了Python、R和Java/Scala的API。
- en: 'It has four main components, as shown in [Figure 11-2](#mlflow_components):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它有四个主要组件，如图 [11-2](#mlflow_components) 所示：
- en: MLflow Tracking
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 跟踪
- en: This component records parameters, metrics, code versions, models, and artifacts
    such as plots and text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件记录参数、度量、代码版本、模型和绘图文本等工件。
- en: MLflow Projects
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 项目
- en: This component provides you with a reusable, reproducible format to share with
    other data scientists or transfer to production. It helps you manage the model
    training process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件为您提供一种可重用、可重现的格式，以便与其他数据科学家共享或转移到生产环境。它帮助您管理模型训练过程。
- en: MLflow Models
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型
- en: This component enables you to package models to deploy to a variety of model
    serving and inference platforms. It provides a consistent API for loading and
    applying models, regardless of the underlying library used to build the model.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使您能够将模型打包部署到各种模型服务和推断平台。它提供了一致的API，用于加载和应用模型，无论所用于构建模型的基础库是什么。
- en: MLflow Registry
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 注册
- en: This component enables you to collaboratively keep track of model lineage, model
    versions, stage transitions, and annotations in a central store.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此组件使您能够协作跟踪模型衍生、模型版本、阶段转换和中心存储中的注释。
- en: '![MLflow components](assets/aaps_1102.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow 组件](assets/aaps_1102.png)'
- en: Figure 11-2\. MLflow components
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-2\. MLflow 组件
- en: 'Let’s install MLflow. It’s straightforward to do so using pip:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装 MLflow。使用 pip 安装非常简单：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That’s it!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: MLflow integrates with many popular machine learning frameworks such as Spark,
    TensorFlow, PyTorch, and others. We will be using its native support for Spark
    over the next few sections. Importing the Spark-specific MLflow component is as
    easy as running `import mlflow.spark`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 与许多流行的机器学习框架集成，如Spark、TensorFlow、PyTorch等。在接下来的几节中，我们将使用其对Spark的原生支持。导入与Spark特定的
    MLflow 组件就像运行 `import mlflow.spark` 一样简单。
- en: In the next section, we’ll introduce MLflow Tracking and add it to our decision
    tree code from [Chapter 4](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍 MLflow 跟踪，并将其添加到我们从 [第4章](ch04.xhtml#making_predictions_with_decision_trees_and_decision_forests)
    的决策树代码中。
- en: Experiment Tracking
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实验跟踪
- en: A typical machine learning project involves experimenting with several algorithms
    and models to solve a problem. The associated datasets, hyperparameters, and metrics
    need to be tracked. Typically, experiment tracking is done using makeshift tools
    such as spreadsheets and can be inefficient or, worse, unreliable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的机器学习项目涉及尝试多种算法和模型来解决问题。需要跟踪相关的数据集、超参数和度量标准。通常使用临时工具（如电子表格）进行实验跟踪可能效率低下，甚至不可靠。
- en: MLflow Tracking is an API and UI for logging parameters, code versions, metrics,
    and artifacts when running your machine learning code and for later visualizing
    the results. You can use MLflow Tracking in any environment (for example, a standalone
    script or a notebook) to log results to local files or to a server and then compare
    multiple runs. It is library-agnostic and integrates with multiple frameworks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 跟踪是一个API和UI，用于在运行机器学习代码时记录参数、代码版本、度量和工件，并在稍后可视化结果。您可以在任何环境中（例如独立脚本或笔记本）使用
    MLflow 跟踪将结果记录到本地文件或服务器，然后比较多个运行。它与多个框架集成，不依赖于特定库。
- en: 'MLflow Tracking is organized around the concept of *runs*, which are executions
    of some piece of data science code. MLflow Tracking provides a UI that lets you
    visualize, search, and compare runs, as well as download run artifacts or metadata
    for analysis in other tools. It contains the following key features:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow跟踪围绕“运行”的概念组织，这些运行是某段数据科学代码的执行。MLflow跟踪提供了一个UI，让您可以可视化、搜索和比较运行，以及下载运行的工件或元数据，以在其他工具中进行分析。它包含以下关键功能：
- en: Experiment-based run listing and comparison
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于实验的运行列表和比较
- en: Searching for runs by parameter or metric value
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据参数或指标值搜索运行
- en: Visualizing run metrics
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化运行指标
- en: Downloading run results
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载运行结果
- en: Let’s add MLflow Tracking to our decision tree code in the PySpark shell. It’s
    assumed that you have downloaded the [Covtype dataset](https://oreil.ly/0xyky)
    and are familiar with it. The Covtype dataset is available online as a compressed
    CSV-format data file, *covtype.data.gz*, and accompanying info file, *covtype.info*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在PySpark shell中为我们的决策树代码添加MLflow跟踪。假设您已经下载了[Covtype数据集](https://oreil.ly/0xyky)并且对其熟悉。Covtype数据集以压缩的CSV格式数据文件
    *covtype.data.gz* 和配套的信息文件 *covtype.info* 的形式在线提供。
- en: Start `pyspark-shell`. As mentioned previously, building decision trees can
    be resource intensive. If you have the memory, specify `--driver-memory 8g` or
    similar.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 `pyspark-shell`。如前所述，构建决策树可能会消耗大量资源。如果有足够的内存，请指定 `--driver-memory 8g` 或类似的参数。
- en: 'We start by preparing the data and machine learning pipeline:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先准备数据和机器学习流水线：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To start logging with MLflow, we start a run using `mlflow.start_run`. We will
    use a `with` clause to automatically end the run at the end of the block:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用MLflow进行日志记录，我们使用 `mlflow.start_run` 开始一个运行。我们将使用 `with` 子句来在块结束时自动结束运行：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can now access our experiment data via the tracking UI. Start it by running
    the `mlflow ui` command. By default it starts on port 5000\. You can use the `-p
    <port_name>` option to change the default port. Once you have successfully started
    the UI, go to *[*http://localhost:5000/*](http://localhost:5000/)*. You will see
    a UI as shown in [Figure 11-3](#mlflow_ui). You can search across all the runs,
    filter for those that meet particular criteria, compare runs side by side, etc.
    If you wish, you can also export the contents as a CSV file to analyze locally.
    Click the run in the UI named `decision-tree`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过追踪界面访问我们的实验数据。通过运行 `mlflow ui` 命令来启动它。默认情况下，它会在5000端口启动。您可以使用 `-p <port_name>`
    选项来更改默认端口。一旦成功启动界面，请访问 [*http://localhost:5000/*](http://localhost:5000/)。您将看到一个如图 11-3所示的界面。您可以搜索所有运行，按特定标准过滤运行，进行并列比较等。如果需要，您还可以将内容导出为CSV文件以进行本地分析。在UI中点击名为
    `decision-tree` 的运行。
- en: '![MLflow UI 1](assets/aaps_1103.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow UI 1](assets/aaps_1103.png)'
- en: Figure 11-3\. MLflow UI 1
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-3\. MLflow UI 1
- en: When viewing an individual run, as shown in [Figure 11-4](#mlflow_ui_2), you’ll
    notice that MLflow stores all the corresponding parameters, metrics, etc. You
    can add notes about this run in free text, as well as tags.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看单个运行时，如[图 11-4](#mlflow_ui_2)，您会注意到MLflow存储了所有对应的参数、指标等。您可以在自由文本中添加关于此运行的注释，以及标签。
- en: '![MLflow UI 2](assets/aaps_1104.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow UI 2](assets/aaps_1104.png)'
- en: Figure 11-4\. MLflow UI 2
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-4\. MLflow UI 2
- en: We are now able to track and reproduce our experiments. Let’s now discuss managing
    our models using MLflow.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够跟踪和重现我们的实验。现在让我们讨论如何使用MLflow管理我们的模型。
- en: Managing and Serving ML Models
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理和提供ML模型
- en: An MLflow Model is a standard format for packaging machine learning models that
    can be used in a variety of downstream tools—for example, real-time serving through
    a REST API or batch inference on Apache Spark. The format defines a convention
    that lets you save a model in different “flavors” that can be understood by different
    libraries.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow模型是打包机器学习模型的标准格式，可以在各种下游工具中使用，例如通过REST API进行实时服务或在Apache Spark上进行批量推断。该格式定义了一种约定，使您可以保存具有不同“风味”的模型，这些风味可以被不同的库理解。
- en: Flavors are the key concept that makes MLflow Models powerful. They make it
    possible to write tools that work with models from any ML library without having
    to integrate each tool with each library. MLflow defines several “standard” flavors
    that all of its built-in deployment tools support, such as a “Python function”
    flavor that describes how to run the model as a Python function. However, libraries
    can also define and use other flavors. For example, MLflow’s `mlflow.sklearn`
    library allows loading models back as a scikit-learn `Pipeline` object for use
    in code that is aware of scikit-learn, or as a generic Python function for use
    in tools that just need to apply the model (for example, the `mlflow.sagemaker`
    tool for deploying models to Amazon SageMaker).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Flavors 是使 MLflow 模型强大的关键概念。它们使得可以编写能够与任何 ML 库中的模型一起工作的工具，而无需将每个工具与每个库集成。MLflow
    定义了几种“标准” flavors，其内置的部署工具都支持，例如描述如何将模型作为 Python 函数运行的“Python function” flavor。但是，库也可以定义和使用其他
    flavors。例如，MLflow 的`mlflow.sklearn`库允许将模型加载回来作为 scikit-learn 的`Pipeline`对象，以供了解
    scikit-learn 的代码使用，或者作为通用 Python 函数，以供只需应用模型的工具使用（例如用于将模型部署到 Amazon SageMaker
    的`mlflow.sagemaker`工具）。
- en: An MLflow Model is a directory containing a set of files. We had earlier logged
    our model using the `log_model` API. This created a file called *MLmodel*. Open
    the decision-tree run and scroll down to the “Artifacts” section. Check out the
    *MLmodel* file. Its contents should be similar to what’s depicted in [Figure 11-5](#mlflow_model).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型是一个包含一组文件的目录。我们之前使用`log_model` API 记录了我们的模型。这创建了一个名为*MLmodel*的文件。打开决策树运行并向下滚动到“Artifacts”部分。查看*MLmodel*文件。其内容应类似于
    [图 11-5](#mlflow_model) 中所示。
- en: '![MLflow Model](assets/aaps_1105.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![MLflow 模型](assets/aaps_1105.png)'
- en: Figure 11-5\. MLflow Model
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-5\. MLflow 模型
- en: The file captures our model’s metadata, signature, and flavors. The Model signature
    defines the schema of a model’s inputs and outputs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件捕获了我们模型的元数据、签名和 flavors。模型签名定义了模型输入和输出的模式。
- en: 'Our model file has two flavors: python_function and spark. The python_function
    flavor enables MLflow’s model deployment and serving tools to work with any Python
    model regardless of which ML library trained the model. As a result, any Python
    model can be easily productionalized in a variety of runtime environments.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型文件有两种 flavors：python_function 和 spark。python_function flavor 使得 MLflow
    的模型部署和服务工具能够与任何 Python 模型一起工作，无论该模型使用了哪个 ML 库进行训练。因此，任何 Python 模型都可以轻松地在各种运行时环境中投入生产。
- en: 'The spark model flavor enables exporting Spark MLlib models as MLflow Models.
    For example, to make predictions on a Spark DataFrame using the logged model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Spark 模型 flavor 使得可以将 Spark MLlib 模型导出为 MLflow 模型。例如，可以使用记录的模型对 Spark DataFrame
    进行预测：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-1)'
- en: This ID can be obtained from the tracking UI in the relevant *MLmodel* file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从相关的*MLmodel*文件在追踪 UI 中获取此 ID。
- en: '[![2](assets/2.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO1-2)'
- en: We use Python f-strings for adding the relevant run ID.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Python f-strings 来添加相关的运行 ID。
- en: We can also use the `mlflow serve` command-line tool to serve the model corresponding
    to a particular run ID.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`mlflow serve`命令行工具来为特定运行 ID 对应的模型提供服务。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You have successfully deployed your model as a REST API!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将您的模型部署为 REST API！
- en: 'We can now use this endpoint to perform inference. Let’s prepare and send a
    request to the endpoint to see it in action. We’ll use the `requests` library
    to do this. Install it using pip first if you don’t yet have it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用此端点执行推理。让我们准备并发送一个请求到端点，看看它的工作原理。我们将使用`requests`库来完成这个操作。如果你还没有安装它，请先使用
    pip 安装：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we’ll send a request containing a JSON object in a pandas-split orientation
    to the model server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向模型服务器发送包含 JSON 对象的请求，其方向为 pandas-split。
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We not only loaded a saved model but also deployed it as a REST API and performed
    inference in real time!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅加载了保存的模型，还将其部署为 REST API 并实时执行推理！
- en: Let us now learn how to create an MLflow Project for the work we have done so
    far.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们学习如何为我们迄今所做的工作创建一个 MLflow 项目。
- en: Creating and Using MLflow Projects
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用 MLflow 项目
- en: MLflow Projects is a standard format for reusable and reproducible packaging.
    It’s a self-contained unit that bundles all the machine code and dependencies
    required to execute a machine learning workflow and enables you to produce a particular
    model run on any system or environment. MLflow Projects includes an API and command-line
    tools for running projects. It can also be used to chain projects together into
    workflows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 项目是可重用和可复制的打包的标准格式。它是一个自包含的单元，捆绑了执行机器学习工作流所需的所有机器代码和依赖项，并使您能够在任何系统或环境上运行特定的模型运行。MLflow
    项目包括用于运行项目的 API 和命令行工具。它还可以用于将项目链接在一起形成工作流。
- en: Each project is simply a directory of files, or a Git repository, containing
    your code. MLflow can run some projects based on a convention for placing files
    in this directory (for example, a *conda.yml* file is treated as a Conda environment),
    but you can describe your project in more detail by adding an MLproject file,
    which is a YAML-formatted text file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目实际上是一个文件目录，或者是一个包含您代码的 Git 存储库。MLflow 可以根据在此目录中放置文件的约定运行某些项目（例如，*conda.yml*
    文件被视为 Conda 环境），但是您可以通过添加 MLproject 文件（一个 YAML 格式的文本文件）更详细地描述您的项目。
- en: 'MLflow currently supports the following project environments: Conda environment,
    Docker container environment, and system environment. By default, MLflow uses
    the system path to find and run the Conda binary.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 目前支持以下项目环境：Conda 环境、Docker 容器环境和系统环境。默认情况下，MLflow 使用系统路径来查找并运行 Conda
    二进制文件。
- en: Creating a basic MLflow project is straightforward. The required steps are listed
    in [Figure 11-6](#how_to_build_an_mflow_project).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个基本的 MLflow 项目非常简单。所需步骤在 [图 11-6](#how_to_build_an_mflow_project) 中列出。
- en: '![How to build an MLflow Project](assets/aaps_1106.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![如何构建 MLflow 项目](assets/aaps_1106.png)'
- en: Figure 11-6\. How to build an MLflow Project
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11-6\. 如何构建 MLflow 项目
- en: 'We will start by creating our project directory named *decision_tree_project*:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建名为 *decision_tree_project* 的项目目录开始：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we’ll first create an MLproject file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们首先会创建一个 MLproject 文件：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now need our *conda.yml* file. We can get this from the MLflow UI introduced
    in a previous section. Go inside the decision-tree run that we previously saw.
    Scroll down to the Artifacts, click the conda YAML file, and copy its contents
    into *conda.yml* in our project directory:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要我们的 *conda.yml* 文件。我们可以从之前介绍的 MLflow UI 中获取这个文件。进入我们之前看到的决策树运行。滚动到工件部分，点击
    conda YAML 文件，并将其内容复制到我们项目目录中的 *conda.yml* 中：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will now create the Python script that will be used to train a decision
    tree model upon the MLflow project being executed. For this, we’ll use the code
    from a previous section:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建用于在执行 MLflow 项目时训练决策树模型的 Python 脚本。为此，我们将使用之前章节中的代码：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO2-1)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_managing_the_machine_learning___span_class__keep_together__lifecycle_with_mlflow__span__CO2-1)'
- en: Data is assumed to be one directory level above the MLflow project directory
    being executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设数据位于执行的 MLflow 项目目录的上一级目录。
- en: Data can also be included inside an MLflow project. In this case, we don’t do
    so because of the large size. In such a case, data can be shared using cloud storage
    such as AWS S3 or GCS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据量大，数据也可以包含在 MLflow 项目中。在这种情况下，我们不这样做。在这种情况下，数据可以使用 AWS S3 或 GCS 等云存储进行共享。
- en: You can simulate how it will work for a collaborator locally before sharing,
    too. We do that using the `mlflow run` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在分享之前模拟它如何在本地与协作者协作。我们使用 `mlflow run` 命令来执行此操作。
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We now have a reproducible MLflow project. We can upload it to a GitHub repository
    and share it with a collaborator who will be able to reproduce our work.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个可复制的 MLflow 项目。我们可以将其上传到 GitHub 存储库，并与协作者分享，他们将能够复制我们的工作。
- en: Where to Go from Here
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何继续
- en: This chapter introduced the MLflow project and guided you through its implementation
    for a straightforward project. There is a lot to explore within the MLflow project
    itself. You can find more information in the [official docs](https://mlflow.org).
    There are other tools out there that can serve as alternatives as well. These
    include open source projects, such as Metaflow and Kubeflow, as well as proprietary
    offerings by big cloud providers including Amazon SageMaker and the Databricks
    platform.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了MLflow项目，并指导您在简单项目中的实施。在MLflow项目本身中有很多可以探索的内容。您可以在[官方文档](https://mlflow.org)中找到更多信息。还有其他可以作为替代方案的工具。这些包括开源项目，如Metaflow和Kubeflow，以及亚马逊SageMaker和Databricks平台等大型云服务提供商的专有产品。
- en: Of course, tools are only part of the solution to the challenges that a real-world
    machine learning project offers. Processes need to be defined by the people working
    on any project. We hope that you will build upon the foundations offered in this
    chapter and contribute to successful machine learning projects in the wild.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，工具只是解决现实世界机器学习项目挑战的一部分。任何项目的工作人员需要定义流程。我们希望你能在本章提供的基础上构建，并为野外成功的机器学习项目做出贡献。
