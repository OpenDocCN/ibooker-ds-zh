- en: Part IV. Visualization with Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：Matplotlib 可视化
- en: We’ll now take an in-depth look at the Matplotlib package for visualization
    in Python. Matplotlib is a multiplatform data visualization library built on NumPy
    arrays and designed to work with the broader SciPy stack. It was conceived by
    John Hunter in 2002, originally as a patch to IPython for enabling interactive
    MATLAB-style plotting via `gnuplot` from the IPython command line. IPython’s creator,
    Fernando Perez, was at the time scrambling to finish his PhD, and let John know
    he wouldn’t have time to review the patch for several months. John took this as
    a cue to set out on his own, and the Matplotlib package was born, with version
    0.1 released in 2003\. It received an early boost when it was adopted as the plotting
    package of choice of the Space Telescope Science Institute (the folks behind the
    Hubble Telescope), which financially supported Matplotlib’s development and greatly
    expanded its capabilities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将深入研究 Python 中用于可视化的 Matplotlib 包。Matplotlib 是一个建立在 NumPy 数组上的跨平台数据可视化库，旨在与更广泛的
    SciPy 栈配合使用。它由 John Hunter 在 2002 年构思，最初作为 IPython 的补丁，用于通过 IPython 命令行从`gnuplot`实现交互式
    MATLAB 风格的绘图。当时，IPython 的创始人 Fernando Perez 正在忙于完成他的博士论文，没有时间几个月内审查该补丁。John 将此视为自己行动的信号，于是
    Matplotlib 包诞生了，版本 0.1 于 2003 年发布。当它被采纳为太空望远镜科学研究所（背后是哈勃望远镜的人们）首选的绘图包，并得到财政支持以及大幅扩展其功能时，Matplotlib
    得到了早期的推广。
- en: One of Matplotlib’s most important features is its ability to play well with
    many operating systems and graphics backends. Matplotlib supports dozens of backends
    and output types, which means you can count on it to work regardless of which
    operating system you are using or which output format you desire. This cross-platform,
    everything-to-everyone approach has been one of the great strengths of Matplotlib.
    It has led to a large user base, which in turn has led to an active developer
    base and Matplotlib’s powerful tools and ubiquity within the scientific Python
    world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 最重要的特点之一是其与多种操作系统和图形后端的良好兼容性。Matplotlib 支持数十种后端和输出类型，这意味着无论您使用哪种操作系统或希望使用哪种输出格式，它都能正常工作。这种跨平台、面面俱到的方法一直是
    Matplotlib 的一大优势。它导致了大量用户的使用，进而促使了活跃的开发者基础以及 Matplotlib 在科学 Python 社区中强大的工具和普及率。
- en: In recent years, however, the interface and style of Matplotlib have begun to
    show their age. Newer tools like `ggplot` and `ggvis` in the R language, along
    with web visualization toolkits based on D3js and HTML5 canvas, often make Matplotlib
    feel clunky and old-fashioned. Still, I’m of the opinion that we cannot ignore
    Matplotlib’s strength as a well-tested, cross-platform graphics engine. Recent
    Matplotlib versions make it relatively easy to set new global plotting styles
    (see [Chapter 34](ch34.xhtml#section-0411-settings-and-stylesheets)), and people
    have been developing new packages that build on its powerful internals to drive
    Matplotlib via cleaner, more modern APIs—for example, Seaborn (discussed in [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)),
    [`ggpy`](http://yhat.github.io/ggpy), [HoloViews](http://holoviews.org), and even
    Pandas itself can be used as wrappers around Matplotlib’s API. Even with wrappers
    like these, it is still often useful to dive into Matplotlib’s syntax to adjust
    the final plot output. For this reason, I believe that Matplotlib itself will
    remain a vital piece of the data visualization stack, even if new tools mean the
    community gradually moves away from using the Matplotlib API directly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，然而，Matplotlib 的界面和风格开始显得有些过时。像 R 语言中的`ggplot`和`ggvis`以及基于 D3js 和 HTML5 canvas
    的 Web 可视化工具包，常使 Matplotlib 感觉笨重和老旧。尽管如此，我认为我们不能忽视 Matplotlib 作为一个经过良好测试的跨平台图形引擎的优势。最近的
    Matplotlib 版本使得设置新的全局绘图样式相对容易（参见 [第 34 章](ch34.xhtml#section-0411-settings-and-stylesheets)），人们一直在开发新的包，利用其强大的内部机制通过更清晰、更现代的
    API 驱动 Matplotlib，例如 Seaborn（在 [第 36 章](ch36.xhtml#section-0414-visualization-with-seaborn)
    讨论），[`ggpy`](http://yhat.github.io/ggpy)，[HoloViews](http://holoviews.org)，甚至
    Pandas 本身可以作为 Matplotlib API 的封装器使用。即使有了这些封装器，深入了解 Matplotlib 的语法来调整最终的绘图输出仍然经常很有用。因此，我认为即使新工具意味着社区逐渐不再直接使用
    Matplotlib API，Matplotlib 本身仍将保持数据可视化堆栈中不可或缺的一部分。
