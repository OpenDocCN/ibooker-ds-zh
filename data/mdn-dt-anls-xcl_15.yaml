- en: Chapter 12\. Python with Excel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章. Python与Excel
- en: Up to this point, this book has primarily focused on tools designed specifically
    for the Microsoft ecosystem, such as Power Pivot and Power Query. However, it
    concludes here with a discussion of an important programming language that has
    risen in popularity and become compatible with virtually every computer application
    imaginable, Excel included. Welcome to an introductory exploration of how Python
    can enhance your Excel experience.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书主要关注专为Microsoft生态系统设计的工具，如Power Pivot和Power Query。但是，本章结尾讨论的是一种日益流行并与几乎所有可想象的计算机应用兼容的重要编程语言，包括Excel在内。欢迎初探Python如何增强您的Excel体验。
- en: This chapter is intentionally placed at the end of the book because I am aware
    of the apprehension it may cause among typical Excel users. Nevertheless, if you
    have reached this stage and are interested in advancing Excel’s capabilities in
    the realm of modern analytics, I strongly recommend giving Python a try.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章故意放置在书的末尾，因为我知道这可能会引起典型Excel用户的担忧。尽管如此，如果您已经达到这个阶段并且有兴趣在现代分析领域提升Excel的能力，我强烈建议您尝试Python。
- en: 'And it’s not just my opinion that you should consider: Microsoft itself has
    endorsed the synergy between Python and Excel by developing an official native
    Python application within Excel, significantly broadening the scope of what you,
    as an analyst, can accomplish by leveraging these two powerful tools together.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，不仅仅是我个人的意见，Microsoft本身也通过在Excel中开发官方的本地Python应用程序来认可Python与Excel之间的协同作用，显著扩展了分析师利用这两个强大工具共同实现的范围。
- en: However, this represents just one of the newer, specialized applications of
    Python with Excel, and it doesn’t fully capture the breadth of what Python can
    offer Excel users. In this chapter, we’ll explore the broader conceptual relationship
    between the two, accompanied by some examples. If you find this chapter intriguing,
    I encourage you to delve deeper into the native integration of Python into Excel.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是Python与Excel结合的较新的专业应用之一，并未完全展示Python为Excel用户提供的广泛功能。在本章中，我们将探讨两者之间更广泛的概念关系，并附有一些示例。如果您发现本章内容有趣，我鼓励您深入了解Python在Excel中的原生集成。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The examples provided in this chapter do not utilize the native Python integration
    in Excel. Instead, they showcase alternative methods for combining these tools
    to achieve automation that surpasses the capabilities of the current Python-Excel
    integration.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供的示例并未利用Excel中的原生Python集成。相反，它们展示了结合这些工具以实现超越当前Python-Excel集成能力的自动化的替代方法。
- en: Reader Prerequisites
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者先决条件
- en: Although this chapter can be completed without prior knowledge of Python, familiarity
    with concepts such as lists, indexing, loops, and the pandas and seaborn packages
    will greatly enhance your understanding.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章可以在不具备Python先验知识的情况下完成，但熟悉列表、索引、循环以及pandas和seaborn包等概念将极大地增强您的理解能力。
- en: 'If you’d like to learn more about Python before reading, I recommend starting
    with my book [*Advancing into Analytics: From Excel to Python and R*](https://www.oreilly.com/library/view/advancing-into-analytics/9781492094333),
    for a basic introduction to Python for Excel users. To delve even deeper into
    the subject, check out Felix Zumstein’s [*Python for Excel: A Modern Environment
    for Automation and Data Analysis*](https://www.oreilly.com/library/view/python-for-excel/9781492080992)
    (O’Reilly, 2021).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您在阅读前想更多了解Python，我建议先阅读我的书籍[*深入分析：从Excel到Python和R*](https://www.oreilly.com/library/view/advancing-into-analytics/9781492094333)，为Excel用户提供了Python的基本介绍。要更深入地了解这个主题，请查阅Felix
    Zumstein的[*Python for Excel: A Modern Environment for Automation and Data Analysis*](https://www.oreilly.com/library/view/python-for-excel/9781492080992)（O’Reilly，2021）。'
- en: This chapter is primarily a hands-on demonstration of Python coding. To gain
    the most from it, I encourage you to participate actively using your own computer.
    All that’s required is a completely free version of Python, for which I recommend
    downloading the [Anaconda distribution](https://www.anaconda.com).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要是Python编程的实际演示。为了从中获得最大收益，我鼓励您积极参与并使用自己的计算机。您只需下载[Anaconda发行版](https://www.anaconda.com)，即可免费获得Python的完全版本。
- en: The Role of Python in Modern Excel
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python在现代Excel中的角色
- en: Prospective learners often find Python, an Excel-adjacent tool, intimidating.
    Many Excel users believe it should be the last tool on their learning list as
    it’s not a Microsoft product and requires acquiring a new language proficiency.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有意向的学习者经常觉得Python，作为Excel相关的工具，令人生畏。许多Excel用户认为它应该是他们学习列表中的最后一项，因为它不是微软产品，并且需要掌握一门新的语言能力。
- en: Python may not be the best choice for every Excel user, but it’s worth serious
    consideration for those looking to build complex automations, version-controlled
    projects, and other advanced development products. Let’s explore the role of Python
    in modern analytics and its relationship with modern Excel.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个Excel用户来说，Python可能并不是最佳选择，但对于那些希望构建复杂自动化、版本控制项目和其他高级开发产品的人来说，认真考虑它是值得的。让我们探讨Python在现代分析中的角色及其与现代Excel的关系。
- en: A Growing Stack Requires Glue
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日益增长的技术栈需要胶水
- en: When I first started as an analyst, my toolkit began and ended with Excel. Data
    management, reporting, dashboards—all were housed under the familiar green-and-white
    interface of Excel.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我刚开始作为分析师时，我的工具箱从头到尾都是Excel。数据管理、报告、仪表板——一切都在熟悉的绿白界面下。
- en: 'A few years on, the landscape has dramatically changed with the introduction
    of Power BI, Office Scripts, Jupyter Notebooks, and even Python integration within
    Excel. This expansion reflects broader technological shifts: moving from a single,
    all-encompassing application to a network of specialized, interconnected tools.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 几年过去了，随着Power BI、Office Scripts、Jupyter Notebooks甚至是Excel内部的Python集成的引入，整个景观发生了巨大变化。这种扩展反映了更广泛的技术转变：从单一的全能应用向专业化、互连的工具网络转变。
- en: Navigating this diverse ecosystem requires a “conductor” or “glue” to seamlessly
    integrate various components. Whether it’s transferring data between platforms,
    visualizing it in a new way, or deploying a cloud-based machine learning model
    to a user’s dashboard, Python stands out as an exemplary choice. Its versatility
    spans from crafting simple scripts to developing complex, enterprise-level solutions,
    making it compatible with a wide range of operating systems and programming languages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览这个多样化的生态系统需要一个“指挥家”或“胶水”，无缝地整合各种组件。无论是在平台间传输数据、以新方式可视化数据，还是将基于云的机器学习模型部署到用户的仪表板上，Python都是一个出色的选择。其多才多艺涵盖了从编写简单脚本到开发复杂企业级解决方案的各个领域，使其与多种操作系统和编程语言兼容。
- en: Microsoft has celebrated Python’s role as a versatile “glue” language, incorporating
    its use across Azure, Power BI, SQL Server, and more. Python’s popularity among
    developers and organizations alike has led to a thriving community of users and
    an abundance of resources.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 微软赞扬Python作为一种多才多艺的“胶水”语言，在Azure、Power BI、SQL Server等各个领域中广泛应用。Python在开发者和组织中的普及使其拥有了一个充满活力的用户社区和丰富的资源。
- en: Network Effects Mean Faster Development Time
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络效应意味着更快的开发时间
- en: “Everybody’s doing it” isn’t usually a good reason to engage in something, but
    in the case of programming languages it may hold merit.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “每个人都在做”通常不是参与某事的好理由，但在编程语言的情况下可能有其道理。
- en: '*Network effect*, the concept that the value of something increases with its
    user base, applies to programming languages. As more programmers join, code sharing
    expands, providing a larger codebase for usage and further development, creating
    a virtuous cycle.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*网络效应*，即价值随用户基础增长而增加的概念，适用于编程语言。随着更多程序员的加入，代码共享扩展，为使用和进一步开发提供了更大的代码库，创造了一个良性循环。'
- en: Python’s versatility as a neutral “glue” language has led to its adoption in
    various professions, including database management, web development, and data
    analytics. This implies that regardless of the direction your Excel project takes
    or the tools you require, there’s a high likelihood of finding collaborators who
    “speak” Python.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种中性的“胶水”语言的多才多艺性导致它在各种职业中被采纳，包括数据库管理、Web开发和数据分析。这意味着，无论您的Excel项目走向何方或需要哪些工具，都很有可能找到“懂”Python的合作者。
- en: For example, imagine developing an inventory tracker or a similar tool using
    Excel, only to find that it has become too intricate for a basic workbook or so
    popular that there’s a demand to transform it into a standalone web application.
    This transition typically represents a considerable challenge. However, if the
    original programming was done in Python, this shift can be notably more efficient
    and faster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下使用 Excel 开发库存跟踪器或类似工具，只发现它对于基本工作簿来说变得过于复杂，或者因其受欢迎程度而需求转变为独立的 Web 应用程序。这种转变通常代表着一项相当大的挑战。然而，如果最初的编程是用
    Python 完成的，这种转变可以显著更加高效和快速。
- en: Python’s versatility and widespread support in the web development realm facilitate
    smoother integration with various web technologies and platforms. Consequently,
    the time needed to evolve your Excel-based solution into a fully operational web
    application is greatly minimized. Essentially, starting with Python positions
    you advantageously and provides a robust foundation for future growth or adaptation,
    thereby optimizing the development trajectory as your project expands.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在 Web 开发领域的多功能性和广泛支持，有助于与各种 Web 技术和平台更顺畅地集成。因此，将你基于 Excel 的解决方案演变为完全运作的
    Web 应用程序所需的时间大大缩短。基于 Python 开始使你处于有利地位，并为未来的增长或调整提供了坚实的基础，从而优化项目扩展的发展轨迹。
- en: Bring Modern Development to Excel
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将现代开发引入 Excel
- en: Python enables modern Excel developers to implement best practices in software
    development, including unit testing, version control, and package development.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使现代 Excel 开发者能够在软件开发中实施最佳实践，包括单元测试、版本控制和包开发。
- en: Unit testing
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing involves testing individual components or units of software to
    verify that each one functions correctly on its own. It helps developers identify
    and fix bugs early in the development process, ensuring the reliability and performance
    of the final product.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试涉及测试软件的各个组件或单元，以验证每个单元在独立运行时的正确功能。它帮助开发者在开发过程的早期阶段识别和修复错误，确保最终产品的可靠性和性能。
- en: Many programming languages offer *unit testing* features to guarantee that code
    operates as intended. However, Excel does not natively support this capability.
    While there are alternative tools available, Python stands out as an excellent
    option for unit testing because of its extensive network effects and the wealth
    of packages it offers. Automated unit testing improves reliability and decreases
    the chance of errors, which is particularly beneficial for Excel workbooks used
    by individuals with varying levels of technical expertise.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言提供单元测试功能，以保证代码按预期运行。然而，Excel 并不原生支持这一能力。虽然有替代工具可用，但 Python 凭借其广泛的网络效应和丰富的包装择，成为单元测试的优秀选择。自动化单元测试提高了可靠性，减少了错误的发生几率，这对技术水平各异的个人使用的
    Excel 工作簿尤为有益。
- en: Version control
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本控制
- en: A *version control system* tracks changes in a repository, enabling users to
    view contributions, revert to previous versions, and so on. If you’ve ever struggled
    to differentiate between multiple workbooks like *budget-model-final.xlsx* and
    *budget-model-FINAL-final.xlsx*, you can appreciate the usefulness of version
    control.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统追踪仓库中的更改，使用户能够查看贡献、恢复到先前版本等操作。如果你曾经为区分多个类似于 *budget-model-final.xlsx*
    和 *budget-model-FINAL-final.xlsx* 的工作簿而苦恼过，你一定能体会到版本控制的实用性。
- en: Although Excel offers limited version control features, like viewing version
    history in OneDrive and using the Spreadsheet Inquire add-in, it falls short compared
    to the extensive features available when transitioning code production to Python.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Excel 提供了有限的版本控制功能，如在 OneDrive 中查看版本历史和使用 Spreadsheet Inquire 插件，但与将代码制作过程转移到
    Python 时可用的广泛功能相比，仍然不足。
- en: Package development and distribution
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包开发和分发
- en: 'If you’re looking for an immediate reason to embrace Python for your daily
    analytical tasks, allow me to highlight a key advantage: *packages*.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一个立即采纳 Python 进行日常分析任务的理由，让我来强调一个关键优势：*包*。
- en: While developing my own tools is something I enjoy, I also believe in the value
    of leveraging existing solutions when they meet my requirements. Python’s robust
    capabilities for creating and distributing packages, especially via the Python
    Package Index, open up a universe of tools that are difficult to match with Excel
    add-ins or VBA modules. The vast majority of these tools are open source and freely
    available.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我喜欢开发自己的工具，但我也相信在满足需求时利用现有解决方案的价值。Python 强大的创建和分发包能力，尤其是通过 Python Package
    Index，为难以与 Excel 插件或 VBA 模块匹配的工具打开了一扇门。其中绝大多数工具都是开源的，且免费提供。
- en: Whether your goal is to collect data from an application programming interface
    (API), analyze images, or simply generate descriptive statistics, the wide availability
    of Python packages makes a compelling case for investing time in learning Python.
    Notably, some of these packages are even designed to integrate smoothly with Excel.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的目标是从应用程序编程接口（API）收集数据、分析图像还是简单地生成描述性统计信息，Python 包的广泛可用性都充分说明值得投资学习 Python。值得注意的是，其中一些包甚至专为与
    Excel 平稳集成而设计。
- en: Using Python and Excel Together with pandas and openpyxl
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 和 Excel 与 pandas 和 `openpyxl` 结合使用
- en: With Python’s role in modern Excel in mind, let’s explore how the two can work
    together. Two key packages to facilitate this integration are pandas and openpyxl.
    Let’s consider the two in turn.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 Python 在现代 Excel 中的角色，让我们探讨两者如何共同工作。促进此集成的两个关键包是 pandas 和 `openpyxl`。让我们依次考虑这两个。
- en: Why pandas for Excel?
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择 pandas 作为 Excel？
- en: 'If you’re working with any kind of tabular data in Python, you won’t get far
    without pandas. This package lets you, among other operations:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Python 中处理任何类型的表格数据，没有 pandas 是无法为您提供帮助的。该包允许您执行以下操作之一：
- en: Sort and filter rows
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序和筛选行
- en: Add, remove, and transform columns
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加、删除和转换列
- en: Aggregate and reshape a table
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚合和重塑表格
- en: Merge or append multiple tables
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并或附加多个表格
- en: This is Python’s equivalent to Power Query, enabling you to create reusable
    data cleaning and transformation workflows. And just like Power Query, pandas
    can effortlessly import data from diverse sources, including Excel, and even export
    the results of your analysis back to Excel.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于 Power Query 的 Python 等效物，使您能够创建可重用的数据清理和转换工作流程。就像 Power Query 一样，pandas
    可以轻松地从各种来源（包括 Excel）导入数据，甚至将分析结果再次导出到 Excel。
- en: The limitations of working with pandas for Excel
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pandas 在处理 Excel 中的限制
- en: 'That said, pandas has limited features for deeply interacting with Excel workbooks.
    For example, it cannot help with the following tasks:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，pandas 在与 Excel 工作簿的深度交互方面功能有限。例如，它无法处理以下任务：
- en: Advanced formatting options for cells, such as applying specific styles or conditional
    formatting
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元格的高级格式选项，如应用特定样式或条件格式
- en: Support for executing Excel macros or VBA code within workbooks
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在工作簿内执行 Excel 宏或 VBA 代码
- en: Direct access to Excel-specific features like data validation, charts, PivotTables,
    or formulas
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接访问 Excel 特定功能，如数据验证、图表、数据透视表或公式
- en: The ability to manipulate worksheets, such as modifying or deleting data
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作工作表，如修改或删除数据
- en: Fortunately, several packages exist to provide these more advanced Python/Excel
    features, most notably openpyxl.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，存在几个包来提供这些更高级的 Python/Excel 功能，其中最显著的是 `openpyxl`。
- en: What openpyxl contributes
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`openpyxl` 的贡献'
- en: openpyxl (pronounced *open pie Excel*) is a Python package providing functionality
    for working with Excel files, specifically the *.xlsx* file format. It allows
    users to read, write, and modify Excel spreadsheets programmatically. openpyxl
    integrates smoothly with pandas, allowing users to clean data using pandas and
    add additional functionality to the workbook using openpyxl.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`openpyxl`（发音为 *open pie Excel*）是一个 Python 包，提供处理 Excel 文件（特别是 *.xlsx* 文件格式）的功能。它允许用户以编程方式读取、写入和修改
    Excel 电子表格。`openpyxl` 与 pandas 无缝集成，允许用户使用 pandas 清洗数据，并使用 `openpyxl` 为工作簿添加附加功能。'
- en: Although openpyxl has limitations and cannot cover every Excel use case, it
    remains the single best Python package to get started with automating Excel tasks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `openpyxl` 有其局限性，无法覆盖每种 Excel 使用情况，但它仍然是开始自动化 Excel 任务的最佳 Python 包。
- en: How to use openpyxl with pandas
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 `openpyxl` 与 pandas
- en: 'Let’s take a typical use case for automating a routine Excel business report
    where an analyst needs to generate monthly sales reports from multiple Excel worksheets.
    For these and other tasks, the basic workflow for using pandas with openpyxl is
    like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个典型的用例，即自动化常规的Excel业务报告，分析师需要从多个Excel工作表中生成每月销售报告。对于这些及其他任务，使用pandas与openpyxl的基本工作流程如下：
- en: 'Read the data: use pandas to extract data from a variety of sources into tabular
    DataFrames.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据：使用pandas从各种来源提取数据到表格DataFrame中。
- en: 'Clean and analyze the data: use pandas to clean and manipulate the data, perform
    calculations, apply filters, handle missing values, and derive relevant insights.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理和分析数据：使用pandas清理和操作数据，执行计算，应用过滤器，处理缺失值，并得出相关的见解。
- en: 'Generate the report: use openpyxl to create a new Excel workbook or select
    an existing one. Populate the workbook with the consolidated data, apply conditional
    formatting, create charts, and incorporate any required visual elements.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成报告：使用openpyxl创建一个新的Excel工作簿或选择一个现有的工作簿。用整理后的数据填充工作簿，应用条件格式，创建图表，并添加任何所需的视觉元素。
- en: 'Save the report: save the updated Excel workbook using openpyxl, specifying
    the desired filename and location.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存报告：使用openpyxl保存更新后的Excel工作簿，指定所需的文件名和位置。
- en: 'Distribute and automate the report: send the generated report to the intended
    recipients through email, file sharing platforms, or any preferred method.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分发和自动化报告：通过电子邮件、文件共享平台或任何首选方法将生成的报告发送给预期的接收者。
- en: Other Python Packages for Excel
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他用于Excel的Python包
- en: 'Powerful as it is for Excel tasks, especially when combined with pandas, openpyxl
    has limitations. Thankfully, other packages are available to handle specific use
    cases. Here are some other packages to be aware of:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在与pandas特别是结合使用时对Excel任务非常强大，但openpyxl有其局限性。幸运的是，其他可以处理特定用例的包也是可用的。以下是一些需要注意的其他包：
- en: '[XlsxWriter](https://pypi.org/project/XlsxWriter)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[XlsxWriter](https://pypi.org/project/XlsxWriter)'
- en: Similar to openpyxl, XlsxWriter can be used to write data, add formatting, and
    create charts to Excel files in the *.xlsx* format. This package is optimized
    for performance, particularly when working with large datasets. That said, as
    the name implies, XlsxWriter can only handle writing data to Excel, while openpyxl
    can both read and write.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与openpyxl类似，XlsxWriter可用于在*.xlsx*格式中编写数据、添加格式和创建图表到Excel文件中。该包在处理大型数据集时性能优化良好。尽管如此，顾名思义，XlsxWriter只能处理向Excel写入数据，而openpyxl可以读写数据。
- en: '[xlwings](https://www.xlwings.org)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[xlwings](https://www.xlwings.org)'
- en: This package enables the automation of Excel tasks, including interacting with
    Excel workbooks, running VBA macros, and accessing Excel’s COM (Component Object
    Model) API on Windows. It provides complete two-way communication between Excel
    and Python in a way that openpyxl does not. On the other hand, this package requires
    a more complex development environment, with many features only available on Windows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此包使Excel任务自动化成为可能，包括与Excel工作簿交互、运行VBA宏以及在Windows上访问Excel的COM（组件对象模型）API。它提供了Excel与Python之间的完全双向通信，这是openpyxl所不能实现的。另一方面，此包需要更复杂的开发环境，在Windows上提供许多功能。
- en: '[PyXLL](https://www.pyxll.com)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyXLL](https://www.pyxll.com)'
- en: This is a paid library that enables users to write Excel add-ins using Python.
    Instead of automating Excel workbooks, PyXLL allows developers to build standalone
    applications for data science, financial trading, and other purposes. This enables
    users to engage with applications developed in Python directly within Excel, without
    the need to execute any Python code or understand the underlying Python mechanics.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个付费库，允许用户使用Python编写Excel插件。PyXLL不仅可以自动化Excel工作簿，还允许开发人员构建独立的数据科学、金融交易和其他用途的应用程序。这使用户可以直接在Excel中使用Python开发的应用程序，而无需执行任何Python代码或理解底层Python机制。
- en: Many other Python packages exist for Excel-related tasks, each with unique strengths
    and weaknesses.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 存在许多其他用于Excel相关任务的Python包，每个都有其独特的优势和劣势。
- en: Demonstration of Excel Automation with pandas and openpyxl
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示Excel自动化演示与pandas和openpyxl
- en: Time to stop discussing and start building! In this section we’ll automate production
    of a small report from Python using pandas, openpyxl, and more.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候停止讨论并开始构建了！在本节中，我们将使用pandas、openpyxl等工具从Python自动化生成一个小报告。
- en: First, we’ll use pandas to perform complex data cleaning and analysis tasks
    that are difficult to achieve in Excel. After that, we’ll create an overview worksheet
    consisting of a brief data summary and two charts, one from native Excel and one
    from Python. Finally, we’ll load the entire dataset to a new worksheet and format
    the results.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用 pandas 执行在 Excel 中难以实现的复杂数据清理和分析任务。然后，我们将创建一个概述工作表，包括简要的数据摘要和两个图表，一个来自原生
    Excel，另一个来自 Python。最后，我们将加载整个数据集到一个新的工作表中，并格式化结果。
- en: 'A completed version of this script is available as *ch_12.ipynb* in the *ch_12*
    folder of the book’s companion repository. If you’re not sure how to open, navigate,
    or interact with this file, check out Part 3 of [*Advancing into Analytics: From
    Excel to Python and R*](https://www.oreilly.com/library/view/advancing-into-analytics/9781492094333)
    as a primer to Python and Jupyter Notebooks.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的完成版本可以在书的配套存储库的 *ch_12* 文件夹中的 *ch_12.ipynb* 中找到。如果你不确定如何打开、导航或与该文件进行交互，请参阅
    [*进阶数据分析：从 Excel 到 Python 和 R*](https://www.oreilly.com/library/view/advancing-into-analytics/9781492094333)
    的第三部分，作为 Python 和 Jupyter Notebooks 的入门。
- en: 'Let’s import the relevant modules and dataset to get started:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入相关的模块和数据集，开始工作：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The pandas library is capable of importing data from a variety of formats,
    including Excel workbooks, through the use of the `read_excel()` function. Let’s
    import the *contestants.xlsx* file and name the resulting DataFrame `contestants`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 库能够通过 `read_excel()` 函数从各种格式（包括 Excel 工作簿）中导入数据。让我们导入 *contestants.xlsx*
    文件，并将结果命名为 `contestants` 的 DataFrame：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Cleaning Up the Data in pandas
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理 pandas 中的数据
- en: 'A pandas DataFrame can contain thousands, or even millions, of rows, making
    it impractical and computationally inefficient to print them all at every step
    of the analysis. Nevertheless, visually inspecting the data is essential for understanding
    its contents—a benefit well-known to Excel users. To quickly review the data and
    ensure it meets our expectations, we can use the `head()` method, which displays
    the first five rows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 pandas DataFrame 可能包含数千甚至数百万行数据，因此在每个分析步骤都打印所有行数据是不切实际且计算效率低下的。然而，通过目视检查数据来理解其内容是非常重要的，这是
    Excel 用户熟知的好处。为了快速审查数据并确保其符合我们的预期，我们可以使用 `head()` 方法，它显示前五行数据：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Based on this data preview, we identified a few issues that need to be addressed.
    First, it appears that some of the emails contain an invalid format. We also have
    a value in the `EDUCATION` column called `NaN`, which doesn’t seem to belong.
    We can address these and other issues in the dataset in ways that would be difficult
    or impossible to do with Excel’s features.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些数据预览，我们发现了一些需要解决的问题。首先，似乎一些电子邮件地址的格式不正确。此外，`EDUCATION` 列中有一个名为 `NaN` 的值，看起来不合适。我们可以通过一些方法解决数据集中的这些和其他问题，这在
    Excel 的功能中很难或不可能完成。
- en: Working with the metadata
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理元数据
- en: A good data analysis and transformation program should be equally proficient
    in handling both data and metadata, such as column header names. In this regard,
    pandas stands out as a particularly suitable tool.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个良好的数据分析和转换程序应同样擅长处理数据和元数据，例如列标题。在这方面，pandas 是一款特别适合的工具。
- en: 'Currently, our DataFrame has column names in uppercase. To make typing column
    names easier, I prefer using lowercase names. Fortunately, in pandas, we can accomplish
    this with a single line of code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的 DataFrame 的列名都是大写的。为了更容易输入列名，我更喜欢使用小写名称。幸运的是，在 pandas 中，我们可以用一行代码完成这个操作：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Pattern matching/regular expressions
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式匹配/正则表达式
- en: The `email` column in this DataFrame lists the email addresses of each contest
    participant. Our objective is to eliminate any rows containing invalid email addresses
    from this column.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 DataFrame 中的 `email` 列列出了每个参赛者的电子邮件地址。我们的目标是从该列中消除任何包含无效电子邮件地址的行。
- en: To achieve this, we can employ text pattern matching, which is facilitated by
    a toolkit known as *regular expressions*. Although Power Query provides fundamental
    text manipulation features, such as converting text case, it does not support
    searching for specific text patterns—a capability that Python offers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们可以使用文本模式匹配，这是由一个称为*正则表达式*的工具包来实现的。尽管 Power Query 提供了基本的文本操作功能，如转换文本大小写，但它不支持搜索特定的文本模式——这是
    Python 提供的一项功能。
- en: 'Crafting and validating regular expressions can be complex; however, numerous
    online resources such as ChatGPT are available to aid in this process. This is
    the regular expression we will use:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 制作和验证正则表达式可能很复杂；然而，有许多在线资源如ChatGPT可以帮助完成这个过程。这是我们将使用的正则表达式：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we can use the `str.contains()` method to keep only the records that
    match the pattern:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用`str.contains()`方法仅保留符合模式的记录：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To confirm how many rows have been filtered out, we can compare the `shape`
    attribute of the two DataFrames:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认有多少行已被过滤掉，我们可以比较两个DataFrame的`shape`属性：
- en: '[PRE6]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Refining our selection to include only participants with valid email addresses
    reduces the number from 100 to 82 contestants.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的选择精简为仅包含有效电子邮件地址的参与者，将参与者数量从100减少到82。
- en: Analyzing missing values
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析缺失值
- en: 'The `info()` method offers a comprehensive overview of the DataFrame’s dimensions
    and additional properties:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`info()`方法提供了DataFrame的维度和附加属性的全面概述：'
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In many computer programs, including Power Query, the term `null` signifies
    a missing or undefined value. Within pandas DataFrames, this concept is represented
    as `NaN`, an abbreviation for “Not a Number.”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在包括Power Query在内的许多计算机程序中，术语`null`表示缺失或未定义的值。在pandas的DataFrame中，这个概念表示为`NaN`，即“不是一个数字”。
- en: Although basic Excel does not offer an exact counterpart to `null`, Power Query
    (as explained in [Chapter 2](ch02.html#ch_02)) incorporates this value, significantly
    enhancing data management and inspection processes. Nonetheless, handling these
    missing values programmatically in Power Query, such as eliminating them across
    all columns, can pose challenges. This task is simplified with pandas.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基本的Excel没有确切对应于`null`，Power Query（如[第2章](ch02.html#ch_02)中所述）包含了这个值，显著增强了数据管理和检查过程。然而，在Power
    Query中以编程方式处理这些缺失值，比如在所有列中消除它们，可能会带来挑战。使用pandas可以简化这个任务。
- en: 'For instance, if one wishes to identify which columns contain the highest percentage
    of missing values, pandas facilitates this analysis effortlessly:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果希望确定哪些列包含最高百分比的缺失值，pandas可以轻松地进行此分析：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Because there are so few missing values and only in one column, we will simply
    drop any row that has a missing observation in any column:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于缺失值很少，且只在一列中，我们将简单地删除任何一行，只要该行的任何一列中存在缺失观察值：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To confirm that all missing observations have been cleared from the DataFrame,
    we can use the `info()` method again:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认DataFrame中已清除所有缺失观察值，我们可以再次使用`info()`方法：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a percentile
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个百分位数
- en: 'Using pandas, we’ll create a percentile rank for the `post` column and confirm
    its validity by running descriptive statistics with `describe()`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pandas，我们将为`post`列创建一个百分位数排名，并通过`describe()`运行描述性统计以确认其有效性：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating a percentile column in Excel is straightforward, but validating results
    is easier in pandas with its statistical functions, methods for handling missing
    values, and more.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Excel中创建百分位数列很简单，但通过pandas的统计函数、处理缺失值的方法等验证结果更容易。
- en: 'Let’s confirm that our dataset has been cleaned and transformed using pandas:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认我们的数据集已经通过pandas进行了清理和转换：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now let’s use openpyxl to create a styled summary report.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用openpyxl创建一个样式化的摘要报告。
- en: Summarizing Findings with openpyxl
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用openpyxl汇总结果
- en: Now that we’ve properly prepared the data using various techniques in pandas,
    we’ll use openpyxl to create a summary in Excel. This will include both key figures
    and labels, as well as data visualizations.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用pandas中的各种技术正确准备了数据，我们将使用openpyxl在Excel中创建一个摘要。这将包括关键数字和标签，以及数据可视化。
- en: Creating a summary worksheet
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个摘要工作表
- en: 'To get started building an Excel workbook with openpyxl, we’ll declare variables
    representing workbook and worksheet objects:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用openpyxl构建Excel工作簿，我们将声明表示工作簿和工作表对象的变量：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'From there, we can populate any cell of the active sheet using its alphanumeric
    reference. I am going to insert and label the average pre and post scores in cells
    `A1:B2`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们可以使用其字母数字引用在活动表的任何单元格中填充。我将在单元格`A1:B2`中插入和标记平均前后分数：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Inserting data into the workbook in this manner merely constitutes a basic data
    dump; it does not impact how the data is displayed in Excel. Based on my experience
    with data formatting, I anticipate that the labels in column A will need additional
    width. I’ll proceed to adjust this now through the `width` property of the worksheet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式将数据插入工作簿仅构成基本的数据转储；它不会影响数据在 Excel 中的显示方式。根据我的数据格式化经验，我预计 A 列中的标签将需要额外的宽度。我将通过工作表的
    `width` 属性来调整它。
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Later in this chapter, we’ll cover achieving autofit-like adjustments for column
    widths. But for now, let’s shift our focus to adding charts to this summary.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面，我们将讨论如何实现类似自动适应的列宽调整。但现在，让我们将注意力转移到向摘要中添加图表上。
- en: There are two methods for generating Excel charts using Python. One approach
    involves scripting the creation of an Excel chart directly from Python code, while
    the other involves crafting a plot in Python and then inserting it into an Excel
    workbook. Both strategies have their advantages and disadvantages, which will
    be explored in turn.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 生成 Excel 图表有两种方法。一种方法是直接从 Python 代码脚本化创建 Excel 图表，另一种方法是在 Python 中制作图表，然后将其插入到
    Excel 工作簿中。这两种策略各有优缺点，将依次探讨。
- en: Inserting charts
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入图表
- en: There are two methods for generating Excel charts using Python. One approach
    involves scripting the creation of an Excel chart directly from Python code, while
    the other involves crafting a plot in Python and then inserting it into an Excel
    workbook. Both strategies have their advantages and disadvantages, which will
    be explored in turn.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 生成 Excel 图表有两种方法。一种方法是直接从 Python 代码脚本化创建 Excel 图表，另一种方法是在 Python 中制作图表，然后将其插入到
    Excel 工作簿中。这两种策略各有优缺点，将依次探讨。
- en: 'Option A: Create a native Excel plot'
  id: totrans-130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项 A：创建本机 Excel 图表
- en: Excel’s data visualization features are popular because they are easy to use
    and effective for basic visualization tasks. Let’s explore how to create native
    Excel charts from Python using openpyxl.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 的数据可视化功能很受欢迎，因为它们易于使用且对于基本的可视化任务非常有效。让我们探讨如何使用 openpyxl 从 Python 创建本机
    Excel 图表。
- en: 'To begin, we need to specify the type of Excel chart we want to create and
    identify the location of the data for the chart within the worksheet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要指定要创建的 Excel 图表类型，并在工作表中标识图表数据的位置：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, we’ll add this data source to the chart and label the chart’s title and
    axes:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将将此数据源添加到图表中，并为图表的标题和轴添加标签：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s further customize this chart. We’ll set category labels to reflect the
    data in the first column and also eliminate the chart legend:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步定制这个图表。我们将设置类别标签以反映第一列中的数据，并且还将删除图例：
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the chart fully defined and styled, it’s time to insert it into the worksheet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表完全定义并样式化后，现在是将其插入工作表的时候了：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Option B: Insert a Python image'
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选项 B：插入 Python 图像
- en: Python offers advantages in data visualization compared to Excel, as it provides
    more diverse visualization options and allows for easier customization of plots.
    For example, Excel lacks a built-in solution for analyzing relationships between
    multiple variables simultaneously. However, the seaborn data visualization package
    offers the `pairplot()` function, which provides a quick and convenient way to
    explore such relationships.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在数据可视化方面相比 Excel 具有优势，因为它提供了更多样化的可视化选项，并允许更轻松地定制绘图。例如，Excel 缺乏一种内置解决方案，用于同时分析多个变量之间的关系。然而，seaborn
    数据可视化包提供了 `pairplot()` 函数，提供了一种快速方便的方法来探索这些关系。
- en: 'The following block visualizes these relationships across the selected variables
    of contestants. You can see the results in [Figure 12-1](#seaborn-pairplot):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的区块可视化了参赛选手在所选变量之间的关系。您可以在[图 12-1](#seaborn-pairplot)中查看结果：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Pairplot](assets/mdae_1201.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Pairplot](assets/mdae_1201.png)'
- en: Figure 12-1\. Pairplot created in `seaborn`
  id: totrans-145
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 使用`seaborn`创建的 Pairplot
- en: 'Not only does Python include a number of chart types that are difficult to
    build in Excel, they are easy to customize as well. For example, I’d like to see
    this visualization broken down by `sex`, which can be done by passing it to the
    `hue` parameter. I’m going to save the results of this plot (seen in [Figure 12-2](#pairplot-sex))
    as `sns_plot` so I can refer to it later:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不仅包含了一些在 Excel 中难以构建的图表类型，而且它们也很容易进行定制。例如，我想按`sex`来查看这个可视化效果，可以通过将其传递给
    `hue` 参数来实现。我将保存此图的结果（见[图 12-2](#pairplot-sex)）为 `sns_plot`，以便稍后参考：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Pairplot by sex](assets/mdae_1202.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Pairplot by sex](assets/mdae_1202.png)'
- en: Figure 12-2\. Pairplot by sex
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. 按性别绘制的 Pairplot
- en: 'Next, let’s place a static image of this pairplot into the workbook. This requires
    first saving the image to disk, and then specifying where to place it into the
    workbook:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将这个 pairplot 的静态图像放入工作簿中。首先需要将图像保存到磁盘，然后指定放置到工作簿中的位置：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One of the aspects I particularly appreciate about Python plots is their ease
    of customization and the simplicity with which one can iterate between various
    types of plots. This kind of trial-and-error approach tends to be more challenging
    in Excel, due to its limited selection of chart options and the considerable effort
    required to enhance their visual appeal.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我特别喜欢 Python 绘图的一个方面是它们易于定制，并且可以在各种类型的图之间轻松迭代。这种试错的方法在 Excel 中更具挑战性，因为其图表选项有限，而且增强它们的视觉吸引力需要相当大的努力。
- en: However, it’s important to note that Python plots imported into Excel are essentially
    static images. If the underlying data changes, these charts will not update automatically
    in the manner of native Excel charts. Additionally, imported Python plots lack
    interactive features, such as the tooltips that appear when you hover over elements
    in standard Excel charts.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重要的是要注意，导入到 Excel 中的 Python 绘图本质上是静态图像。如果底层数据发生变化，这些图表不会像本地 Excel 图表那样自动更新。此外，导入的
    Python 绘图缺乏诸如标准 Excel 图表中悬停在元素上时出现的工具提示等交互功能。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The recent integration of Python with Excel offers the ability to create Python
    plots that possess some level of interactivity and can update in response to changes
    in the source data. For an excellent demonstration of this feature, [check out
    this blog post](https://oreil.ly/jmS0f) by Excel MVP Mynda Treacy.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Python 最近与 Excel 的集成使得可以创建一些具有一定交互性并且可以根据源数据变化而更新的 Python 绘图。关于这一功能的出色演示，请参阅
    Excel MVP Mynda Treacy 的 [此博文](https://oreil.ly/jmS0f)。
- en: Excel versus Python charts
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Excel 与 Python 图表
- en: A summary of the pros and cons of these two methods is shown in [Table 12-1](#python-charts).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法的优缺点总结如 [Table 12-1](#python-charts) 所示。
- en: Table 12-1\. Pros and cons of Python versus Excel charts
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12-1\. Python 与 Excel 图表的优缺点
- en: '|  | Pros | Cons |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '|  | 优点 | 缺点 |'
- en: '| --- | --- | --- |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Building a native Excel plot |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 构建本地 Excel 图表 |'
- en: Plot will update with changes in Excel data.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表将随 Excel 数据的变化而更新。
- en: User can interact with and customize plot.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以与绘图进行交互并进行自定义。
- en: Plot can integrate with other Excel features like formulas and PivotTables.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图可以与 Excel 的其他功能（如公式和数据透视表）集成。
- en: '|'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Limited number of Excel plot types exist.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Excel 中存在的图表类型数量有限。
- en: It can be difficult to customize or iterate on Excel charts.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制或迭代 Excel 图表可能会有困难。
- en: '|'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Inserting an image of a Python plot |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 插入 Python 绘图的图像 |'
- en: Access to several powerful plotting libraries such as `matplotlib` and `seaborn`.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以访问几个强大的绘图库，如`matplotlib`和`seaborn`。
- en: Plot is easily audited and reproduced through the source code.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过源代码可以轻松审计和重现绘图。
- en: '|'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The plot is a static image and lacks interactivity.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该图是静态图像，缺乏交互性。
- en: Updating or refreshing the chart from Excel is not possible.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法从 Excel 更新或刷新图表。
- en: '|'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The choice between methods depends on different factors, such data refresh needs
    and the availability of specific chart types in Excel. That said, the flexibility
    and range of options available in itself highlight Python’s powerful capabilities
    for working with Excel.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 方法选择取决于不同因素，如数据刷新需求以及 Excel 中特定图表类型的可用性。尽管如此，Python 自身的灵活性和多样的选项显示了其在处理 Excel
    方面的强大能力。
- en: Adding a Styled Data Source
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个样式化的数据源
- en: 'Now that our summary worksheet has been created, we will create a second, styled
    worksheet consisting of the `complete_cases` DataFrame. The first step is to define
    this new worksheet:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了总结工作表，接下来我们将创建第二个样式化的工作表，其中包含`complete_cases` DataFrame。首先是定义这个新工作表：
- en: '[PRE24]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we’ll iterate through each row of `complete_cases` and individually insert
    the rows into the worksheet:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将遍历`complete_cases`的每一行，并将每一行单独插入到工作表中：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Inserting the DataFrame into the worksheet is a start, but the resulting data
    may be challenging for users to read and manipulate. Let’s make a few improvements.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将 DataFrame 插入工作表是一种开始，但由此产生的数据可能对用户阅读和操作有挑战性。让我们做一些改进。
- en: Formatting percentages
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化百分比
- en: By default, the `post_pct` column will be formatted as decimals instead of more
    readable percentages. To address this, we need to specify the location of this
    column in the worksheet and reformat it.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`post_pct`列将以小数形式而不是更易读的百分比形式格式化。为了解决这个问题，我们需要指定工作表中此列的位置并重新格式化它。
- en: 'I will use the `get_loc()` method to find the index position of the `post_pct`
    column in the DataFrame, adding 1 to the results to account for Excel’s 1-based
    indexing versus Python’s 0-based indexing. The `get_column_letter()` function
    will then convert this index number into Excel’s alphabetical column referencing:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用`get_loc()`方法来查找DataFrame中`post_pct`列的索引位置，并将结果加1以适应Excel的基于1的索引，而不是Python的基于0的索引。然后，`get_column_letter()`函数将把这个索引号转换为Excel的字母列引用：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'With the proper column identified, I will apply the desired number formatting
    to each row:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了适当的列之后，我将为每一行应用所需的数值格式：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Converting to a table
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 转换为表格
- en: 'As discussed in [Chapter 1](ch01.html#ch_01), Excel tables hold a number of
    benefits for data storage and analysis. We can convert this dataset into a table
    with the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第1章](ch01.html#ch_01)中讨论的，Excel表格在数据存储和分析中具有多种好处。我们可以使用以下代码将这个数据集转换为表格：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Applying conditional formatting
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用条件格式
- en: 'To enhance readability for end users, we can apply conditional formatting to
    the worksheet. The following code will apply a green background fill to participants
    above the 90th percentile and a yellow background fill to participants above the
    70th percentile:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高最终用户的可读性，我们可以对工作表应用条件格式。以下代码将对超过90分位数的参与者应用绿色背景填充，对超过70分位数的参与者应用黄色背景填充：
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Auto-fitting column widths
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自动调整列宽度
- en: 'Although openpyxl lacks an autofit feature to automatically resize worksheet
    columns, we can achieve a similar outcome with the following code. It finds the
    widest row in each column of the worksheet, then adds sufficient padding to adjust
    the width of that column accordingly:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管openpyxl缺乏自动调整工作表列宽的功能，我们可以使用以下代码实现类似的效果。它查找工作表每列中最宽的行，然后添加足够的填充来相应调整该列的宽度：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After completing the workbook, we can save the results to *ch12-output.xlsx*:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 完成工作簿后，我们可以将结果保存到*ch12-output.xlsx*中：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Conclusion
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter delved into the significant role of Python in enhancing modern
    Excel, underscoring its versatility as a “glue” language for development and its
    capability to augment Excel’s functionalities. Through a practical demonstration,
    it illustrated how Python can automate Excel tasks, introducing features that
    are challenging or unattainable within the spreadsheet program alone.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了Python在增强现代Excel中的重要作用，强调了其作为开发中“胶水”语言的多功能性以及增强Excel功能的能力。通过实际演示，它展示了Python如何自动化Excel任务，引入了在仅仅电子表格程序内部难以实现的功能特性。
- en: As Microsoft continues to integrate Python into its data analytics suite, the
    synergy between Python and Excel is set to evolve. Nevertheless, this chapter
    lays down a robust foundation for leveraging Python and Excel in tandem, unlocking
    their full potential.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微软继续将Python整合到其数据分析套件中，Python与Excel之间的协同作用将不断发展。尽管如此，本章为同时利用Python和Excel打下了坚实的基础，释放它们的全部潜力。
- en: Exercises
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: To create a concise summary report of the *websites.xlsx* file in the *exercises\ch_12_exercises*
    folder in the book’s [companion repository](https://oreil.ly/modern-analytics-excel-exercises),
    start by using the *ch_12_exercises.ipynb* Jupyter Notebook provided as a foundation.
    Complete the missing sections of this Notebook to reach the solution, which is
    available in the same folder named *ch_12_exercise_solutions.ipynb*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要在书的[配套存储库](https://oreil.ly/modern-analytics-excel-exercises)中的*exercises\ch_12_exercises*文件夹中的*websites.xlsx*文件的简明汇总报告中创建，首先使用提供的*ch_12_exercises.ipynb*
    Jupyter Notebook作为基础。完成该Notebook中的缺失部分，以达到解决方案，解决方案在同一文件夹中命名为*ch_12_exercise_solutions.ipynb*中可用。
- en: For guidance on writing the code accurately, refer to the examples provided
    in this chapter. You are encouraged to enhance your work by integrating additional
    automated features.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 要准确编写代码，请参考本章提供的示例。鼓励您通过集成额外的自动化功能来增强您的工作。
