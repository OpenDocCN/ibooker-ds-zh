- en: Chapter 22\. Vectorized String Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第22章。向量化字符串操作
- en: 'One strength of Python is its relative ease in handling and manipulating string
    data. Pandas builds on this and provides a comprehensive set of *vectorized string
    operations* that are an important part of the type of munging required when working
    with (read: cleaning up) real-world data. In this chapter, we’ll walk through
    some of the Pandas string operations, and then take a look at using them to partially
    clean up a very messy dataset of recipes collected from the internet.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python的一个优点是相对容易处理和操作字符串数据。Pandas在此基础上构建，并提供了一套全面的*向量化字符串操作*，这是处理（即：清理）现实世界数据时必不可少的部分。在本章中，我们将逐步介绍一些Pandas字符串操作，然后看看如何使用它们部分清理从互联网收集的非常混乱的食谱数据集。
- en: Introducing Pandas String Operations
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Pandas字符串操作
- en: 'We saw in previous chapters how tools like NumPy and Pandas generalize arithmetic
    operations so that we can easily and quickly perform the same operation on many
    array elements. For example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们看到工具如NumPy和Pandas如何将算术操作泛化，以便我们可以轻松快速地在许多数组元素上执行相同的操作。例如：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This *vectorization* of operations simplifies the syntax of operating on arrays
    of data: we no longer have to worry about the size or shape of the array, but
    just about what operation we want done. For arrays of strings, NumPy does not
    provide such simple access, and thus you’re stuck using a more verbose loop syntax:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种操作的*向量化*简化了操作数组数据的语法：我们不再需要担心数组的大小或形状，而只需关注我们想要进行的操作。对于字符串数组，NumPy没有提供如此简单的访问方式，因此你只能使用更冗长的循环语法：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is perhaps sufficient to work with some data, but it will break if there
    are any missing values, so this approach requires putting in extra checks:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能足以处理一些数据，但如果有任何缺失值，它将会出错，因此这种方法需要额外的检查：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This manual approach is not only verbose and inconvenient, it can be error-prone.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种手动方法不仅冗长且不方便，还容易出错。
- en: 'Pandas includes features to address both this need for vectorized string operations
    as well as the need for correctly handling missing data via the `str` attribute
    of Pandas `Series` and `Index` objects containing strings. So, for example, if
    we create a Pandas `Series` with this data we can directly call the `str.capitalize`
    method, which has missing value handling built in:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas包括功能来同时解决对向量化字符串操作的需求以及通过Pandas `Series`和`Index`对象的`str`属性正确处理缺失数据的需求。因此，例如，如果我们创建一个包含这些数据的Pandas
    `Series`，我们可以直接调用`str.capitalize`方法，其中内置了缺失值处理：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tables of Pandas String Methods
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas字符串方法表
- en: 'If you have a good understanding of string manipulation in Python, most of
    the Pandas string syntax is intuitive enough that it’s probably sufficient to
    just list the available methods. We’ll start with that here, before diving deeper
    into a few of the subtleties. The examples in this section use the following `Series`
    object:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Python中的字符串操作有很好的理解，大部分Pandas字符串语法都足够直观，可能只需列出可用的方法就足够了。我们先从这里开始，然后深入探讨一些细微之处。本节的示例使用以下`Series`对象：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Methods Similar to Python String Methods
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类似于Python字符串方法的方法
- en: 'Nearly all of Python’s built-in string methods are mirrored by a Pandas vectorized
    string method. The following Pandas `str` methods mirror Python string methods:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有Python内置的字符串方法都有与之对应的Pandas向量化字符串方法。以下Pandas `str`方法与Python字符串方法相对应：
- en: '| `len` | `lower` | `translate` | `islower` | `ljust` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `len` | `lower` | `translate` | `islower` | `ljust` |'
- en: '| `upper` | `startswith` | `isupper` | `rjust` | `find` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `upper` | `startswith` | `isupper` | `rjust` | `find` |'
- en: '| `endswith` | `isnumeric` | `center` | `rfind` | `isalnum` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `endswith` | `isnumeric` | `center` | `rfind` | `isalnum` |'
- en: '| `isdecimal` | `zfill` | `index` | `isalpha` | `split` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `isdecimal` | `zfill` | `index` | `isalpha` | `split` |'
- en: '| `strip` | `rindex` | `isdigit` | `rsplit` | `rstrip` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `strip` | `rindex` | `isdigit` | `rsplit` | `rstrip` |'
- en: '| `capitalize` | `isspace` | `partition` | `lstrip` | `swapcase` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `capitalize` | `isspace` | `partition` | `lstrip` | `swapcase` |'
- en: 'Notice that these have various return values. Some, like `lower`, return a
    series of strings:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这些具有不同的返回值。一些像`lower`这样的方法返回一系列字符串：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But some others return numbers:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但有些返回数字：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or Boolean values:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者布尔值：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Still others return lists or other compound values for each element:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些方法返回每个元素的列表或其他复合值：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We’ll see further manipulations of this kind of series-of-lists object as we
    continue our discussion.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们继续讨论时，我们将看到这种系列列表对象的进一步操作。
- en: Methods Using Regular Expressions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用正则表达式的方法
- en: In addition, there are several methods that accept regular expressions (regexps)
    to examine the content of each string element, and follow some of the API conventions
    of Python’s built-in `re` module (see [Table 22-1](#table-22-1)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有几种方法接受正则表达式（regexps）来检查每个字符串元素的内容，并遵循 Python 内置 `re` 模块的一些 API 约定（参见 [Table 22-1](#table-22-1)）。
- en: Table 22-1\. Mapping between Pandas methods and functions in Python’s `re` module
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Table 22-1\. Pandas 方法与 Python `re` 模块函数的映射关系
- en: '| Method | Description |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `match` | Calls `re.match` on each element, returning a Boolean. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `match` | 对每个元素调用 `re.match`，返回布尔值。 |'
- en: '| `extract` | Calls `re.match` on each element, returning matched groups as
    strings. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `extract` | 对每个元素调用 `re.match`，返回匹配的字符串组。 |'
- en: '| `findall` | Calls `re.findall` on each element |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `findall` | 对每个元素调用 `re.findall` |'
- en: '| `replace` | Replaces occurrences of pattern with some other string |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `replace` | 用其他字符串替换模式的出现 |'
- en: '| `contains` | Calls `re.search` on each element, returning a boolean |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `contains` | 对每个元素调用 `re.search`，返回布尔值 |'
- en: '| `count` | Counts occurrences of pattern |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `count` | 计算模式的出现次数 |'
- en: '| `split` | Equivalent to `str.split`, but accepts regexps |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `split` | 等同于 `str.split`，但接受正则表达式 |'
- en: '| `rsplit` | Equivalent to `str.rsplit`, but accepts regexps |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `rsplit` | 等同于 `str.rsplit`，但接受正则表达式 |'
- en: 'With these, we can do a wide range of operations. For example, we can extract
    the first name from each element by asking for a contiguous group of characters
    at the beginning of each element:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法，我们可以进行各种操作。例如，通过请求每个元素开头的一组连续字符，我们可以从中提取每个元素的名字：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Or we can do something more complicated, like finding all names that start
    and end with a consonant, making use of the start-of-string (`^`) and end-of-string
    (`$`) regular expression characters:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以做一些更复杂的事情，比如找出所有以辅音开头和结尾的名字，利用正则表达式的开头（`^`）和结尾（`$`）字符：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The ability to concisely apply regular expressions across `Series` or `DataFrame`
    entries opens up many possibilities for analysis and cleaning of data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 能够简洁地应用正则表达式于 `Series` 或 `DataFrame` 条目之上，为数据的分析和清理开辟了许多可能性。
- en: Miscellaneous Methods
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杂项方法
- en: Finally, [Table 22-2](#table-22-2) lists miscellaneous methods that enable other
    convenient operations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[Table 22-2](#table-22-2) 列出了使其他便捷操作得以实现的杂项方法。
- en: Table 22-2\. Other Pandas string methods
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Table 22-2\. 其他 Pandas 字符串方法
- en: '| Method | Description |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `get` | Indexes each element |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `get` | 对每个元素进行索引 |'
- en: '| `slice` | Slices each element |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `slice` | 对每个元素进行切片 |'
- en: '| `slice_replace` | Replaces slice in each element with the passed value |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `slice_replace` | 用传递的值替换每个元素中的片段 |'
- en: '| `cat` | Concatenates strings |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `cat` | 连接字符串 |'
- en: '| `repeat` | Repeats values |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `repeat` | 重复值 |'
- en: '| `normalize` | Returns Unicode form of strings |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `normalize` | 返回字符串的 Unicode 形式 |'
- en: '| `pad` | Adds whitespace to left, right, or both sides of strings |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `pad` | 在字符串的左侧、右侧或两侧添加空格 |'
- en: '| `wrap` | Splits long strings into lines with length less than a given width
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `wrap` | 将长字符串分割成长度小于给定宽度的行 |'
- en: '| `join` | Joins strings in each element of the `Series` with the passed separator
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `join` | 将 `Series` 中每个元素的字符串用指定分隔符连接起来 |'
- en: '| `get_dummies` | Extracts dummy variables as a `DataFrame` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `get_dummies` | 提取作为 `DataFrame` 的虚拟变量 |'
- en: Vectorized item access and slicing
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向量化项访问和切片
- en: 'The `get` and `slice` operations, in particular, enable vectorized element
    access from each array. For example, we can get a slice of the first three characters
    of each array using `str.slice(0, 3)`. This behavior is also available through
    Python’s normal indexing syntax; for example, `df.str.slice(0, 3)` is equivalent
    to `df.str[0:3]`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是 `get` 和 `slice` 操作，使得可以从每个数组中进行向量化元素访问。例如，我们可以使用 `str.slice(0, 3)` 获取每个数组的前三个字符的片段。这种行为也可以通过
    Python 的正常索引语法实现；例如，`df.str.slice(0, 3)` 相当于 `df.str[0:3]`：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Indexing via `df.str.get(i)` and `df.str[i]` are likewise similar.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `df.str.get(i)` 和 `df.str[i]` 进行的索引与之类似。
- en: 'These indexing methods also let you access elements of arrays returned by `split`.
    For example, to extract the last name of each entry, combine `split` with `str`
    indexing:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些索引方法还允许您访问由 `split` 返回的数组的元素。例如，结合 `split` 和 `str` 索引，可以提取每个条目的姓氏：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Indicator variables
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指标变量
- en: 'Another method that requires a bit of extra explanation is the `get_dummies`
    method. This is useful when your data has a column containing some sort of coded
    indicator. For example, we might have a dataset that contains information in the
    form of codes, such as A = “born in America,” B = “born in the United Kingdom,”
    C = “likes cheese,” D = “likes spam”:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种需要额外解释的方法是`get_dummies`方法。当你的数据包含某种编码指示器时，这将非常有用。例如，我们可能有一个数据集，其中包含以代码形式的信息，比如
    A = “出生在美国”，B = “出生在英国”，C = “喜欢奶酪”，D = “喜欢午餐肉”：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `get_dummies` routine lets us split out these indicator variables into
    a `DataFrame`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_dummies`例程允许我们将这些指示变量拆分成一个`DataFrame`：'
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With these operations as building blocks, you can construct an endless range
    of string processing procedures when cleaning your data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些操作作为构建块，您可以在清理数据时构建各种无穷无尽的字符串处理过程。
- en: We won’t dive further into these methods here, but I encourage you to read through
    [“Working with Text Data”](https://oreil.ly/oYgWA) in the Pandas online documentation,
    or to refer to the resources listed in [“Further Resources”](ch24.xhtml#section-0313-further-resources).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会进一步深入这些方法，但我鼓励您阅读 [“处理文本数据”](https://oreil.ly/oYgWA) 在 Pandas 在线文档中，或参考
    [“进一步资源”](ch24.xhtml#section-0313-further-resources) 中列出的资源。
- en: 'Example: Recipe Database'
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：食谱数据库
- en: These vectorized string operations become most useful in the process of cleaning
    up messy, real-world data. Here I’ll walk through an example of that, using an
    open recipe database compiled from various sources on the web. Our goal will be
    to parse the recipe data into ingredient lists, so we can quickly find a recipe
    based on some ingredients we have on hand. The scripts used to compile this can
    be found on [GitHub](https://oreil.ly/3S0Rg), and the link to the most recent
    version of the database is found there as well.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在清理混乱的现实世界数据时，这些向量化的字符串操作变得非常有用。这里我将通过一个例子详细介绍这一点，使用从网上各种来源编译的开放食谱数据库。我们的目标是将食谱数据解析成成分列表，以便我们可以根据手头上的一些成分快速找到一个食谱。用于编译这些脚本的代码可以在
    [GitHub](https://oreil.ly/3S0Rg) 找到，并且数据库的最新版本链接也可以在那里找到。
- en: 'This database is about 30 MB, and can be downloaded and unzipped with these
    commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据库大小约为 30 MB，可以使用以下命令下载并解压：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The database is in JSON format, so we will use `pd.read_json` to read it (`lines=True`
    is required for this dataset because each line of the file is a JSON entry):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库以 JSON 格式存在，因此我们将使用`pd.read_json`来读取它（对于这个数据集，需要使用`lines=True`，因为文件的每一行都是一个
    JSON 条目）：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We see there are nearly 175,000 recipes, and 17 columns. Let’s take a look
    at one row to see what we have:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有将近 175,000 个食谱和 17 列。让我们看看一行，看看我们有什么：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There is a lot of information there, but much of it is in a very messy form,
    as is typical of data scraped from the web. In particular, the ingredient list
    is in string format; we’re going to have to carefully extract the information
    we’re interested in. Let’s start by taking a closer look at the ingredients:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那里有很多信息，但其中大部分都是以非常混乱的形式存在的，这是从网上爬取数据的典型情况。特别是成分列表以字符串格式存在；我们需要仔细提取我们感兴趣的信息。让我们先仔细查看一下这些成分：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The ingredient lists average 250 characters long, with a minimum of 0 and a
    maximum of nearly 10,000 characters!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 成分列表平均长度为 250 个字符，最小为 0，最大接近 10,000 个字符！
- en: 'Just out of curiosity, let’s see which recipe has the longest ingredient list:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 出于好奇，让我们看看哪个食谱的成分列表最长：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can do other aggregate explorations; for example, we can see how many of
    the recipes are for breakfast foods (using regular expression syntax to match
    both lowercase and capital letters):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进行其他聚合探索；例如，我们可以查看有多少食谱是早餐食品（使用正则表达式语法匹配小写和大写字母）：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Or how many of the recipes list cinnamon as an ingredient:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 或者有多少食谱将肉桂列为成分：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We could even look to see whether any recipes misspell the ingredient as “cinamon”:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以查看是否有任何食谱将成分拼错为“cinamon”：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is the type of data exploration that is possible with Pandas string tools.
    It is data munging like this that Python really excels at.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Pandas 字符串工具可以实现的数据探索类型。Python 在这类数据整理方面表现得非常出色。
- en: A Simple Recipe Recommender
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的食谱推荐器
- en: 'Let’s go a bit further, and start working on a simple recipe recommendation
    system: given a list of ingredients, we want to find any recipes that use all
    those ingredients. While conceptually straightforward, the task is complicated
    by the heterogeneity of the data: there is no easy operation, for example, to
    extract a clean list of ingredients from each row. So, we will cheat a bit: we’ll
    start with a list of common ingredients, and simply search to see whether they
    are in each recipe’s ingredient list. For simplicity, let’s just stick with herbs
    and spices for the time being:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再进一步，开始制作一个简单的菜谱推荐系统：给定一系列食材，我们希望找到使用所有这些食材的任何菜谱。虽然概念上很简单，但由于数据的异构性而变得复杂：例如，从每行提取一个干净的食材列表并不容易。因此，我们会稍微作弊一点：我们将从常见食材列表开始，然后简单地搜索是否在每个菜谱的食材列表中。为简单起见，我们暂时只使用香草和香料：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can then build a Boolean `DataFrame` consisting of `True` and `False` values,
    indicating whether each ingredient appears in the list:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以构建一个由`True`和`False`值组成的布尔`DataFrame`，指示每种食材是否出现在列表中：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, as an example, let’s say we’d like to find a recipe that uses parsley,
    paprika, and tarragon. We can compute this very quickly using the `query` method
    of `DataFrame`s, discussed further in [Chapter 24](ch24.xhtml#section-0312-performance-eval-and-query):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，举个例子，假设我们想找到使用欧芹、辣椒粉和龙蒿的菜谱。我们可以使用`DataFrame`的`query`方法快速计算这一点，有关详细信息，请参阅
    [第 24 章](ch24.xhtml#section-0312-performance-eval-and-query)：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We find only 10 recipes with this combination. Let’s use the index returned
    by this selection to discover the names of those recipes:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只找到了这种组合的 10 个菜谱。让我们使用此选择返回的索引来发现这些菜谱的名称：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now that we have narrowed down our recipe selection from 175,000 to 10, we are
    in a position to make a more informed decision about what we’d like to cook for
    dinner.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将菜谱选择从 175,000 缩减到了 10，我们可以更加明智地决定晚餐要做什么了。
- en: Going Further with Recipes
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步探索菜谱
- en: Hopefully this example has given you a bit of a flavor (heh) of the types of
    data cleaning operations that are efficiently enabled by Pandas string methods.
    Of course, building a robust recipe recommendation system would require a *lot*
    more work! Extracting full ingredient lists from each recipe would be an important
    piece of the task; unfortunately, the wide variety of formats used makes this
    a relatively time-consuming process. This points to the truism that in data science,
    cleaning and munging of real-world data often comprises the majority of the work—and
    Pandas provides the tools that can help you do this efficiently.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个例子给了你一点关于 Pandas 字符串方法能够高效实现的数据清理操作类型的味道（嘿）。当然，构建一个健壮的菜谱推荐系统需要 *很多* 工作！从每个菜谱中提取完整的食材列表将是任务的重要部分；不幸的是，使用的各种格式的广泛变化使得这成为一个相对耗时的过程。这表明在数据科学中，清理和整理真实世界数据通常占据了大部分工作量—而
    Pandas 提供了可以帮助您高效完成这项工作的工具。
