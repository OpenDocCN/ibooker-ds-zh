- en: 'Chapter 5\. OpenStreetMap: Accessing Geospatial Data with OSMnx'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用OSMnx访问地理空间数据
- en: '[OpenStreetMap (OSM)](https://oreil.ly/UWkLH) is an editable geographic database
    of the entire world built by volunteers with an auspicious goal: to create geographic
    data and distribute it to all of us for free. You have interacted with OSM already
    on your smartphone if you use GPS for directions—or any location-enabled device.
    Python offers a package called [OSMnx](https://oreil.ly/CR2vV) that lets urban
    planners and a wide variety of other users create street networks and interact
    with and analyze otherwise “hidden” geographic information. You can find walkable,
    drivable, or bikeable urban networks for your own personal use or for research,
    such as to study characteristics of urban environments. Robust analytics reveal
    infrastructure frameworks that disclose inefficiencies when analyzing the network
    and interrelated nature of roadways, for example.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[开放街图（OSM）](https://oreil.ly/UWkLH)是一个由志愿者建立的可编辑的全球地理数据库，其宏伟目标是为我们所有人创建地理数据并免费分发。如果您使用GPS进行导航或任何启用位置的设备，您已经在智能手机上与OSM互动过了。Python提供了一个名为[OSMnx](https://oreil.ly/CR2vV)的包，允许城市规划者和其他各种用户创建街道网络，并与和分析通常“隐藏”的地理信息互动。您可以找到适合步行、驾驶或骑行的城市网络，用于个人使用或研究，比如研究城市环境的特征。强大的分析揭示了基础设施框架，例如在分析道路网络和道路相互关联的性质时揭示了低效率。'
- en: Personally, I think street networks are works of art. But their real use, which
    is perhaps underutilized, is adding geometric shapes to your built infrastructure.
    You can add buildings (hospitals, schools, and grocery stores, for example), parks,
    and other dataframes categorized as edges, buildings, and areas. The term *building*
    is defined loosely, and there is a Wiki for [building tags](https://oreil.ly/ZuB1n).
    A great resource to find place names is [OSM Nominatim](https://oreil.ly/tmo4M).
    You can also add points of interest, elevations, and much more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我认为街道网络是艺术作品。但它们真正的用途可能被低估了，即为您的建筑基础设施添加几何形状。您可以添加建筑物（例如医院、学校和杂货店）、公园和其他数据框架，分类为边缘、建筑物和区域。术语*建筑物*定义宽泛，有一个关于[建筑标签](https://oreil.ly/ZuB1n)的维基。查找地名的好资源是[OSM
    Nominatim](https://oreil.ly/tmo4M)。您还可以添加兴趣点、海拔高度等等。
- en: At first glance, OSMnx may seem a bit technical and complicated. But as you
    build street networks with OSM in this chapter, you’ll learn to apply and interact
    with this powerful, customizable package.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，OSMnx可能看起来有些技术性和复杂。但随着您在本章中使用OSM建立街道网络，您将学会应用和互动这个功能强大、可定制的包。
- en: A Conceptual Model of OpenStreetMap
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放街图的概念模型
- en: The [OSM database](https://oreil.ly/pPT7s) contains more than 80,000 tag keys
    and 600 relation types, so you can define the appropriate granularity for your
    map. In this chapter, you will learn how to access these features, customize them,
    add them to your map, and perform analyses. For example, you can identify a location
    and explore the distribution of agricultural, commercial, or residential land
    use. (A snapshot of different land-use values you can access by querying the database
    is shown in [Figure 5-2](#some_of_the_tags_available_in_the_osm_d), later in this
    section.) Understanding the distribution of land use in an area may be important
    if you are interested in how much flooding occurs there or how to calculate storm
    runoff. The most popular tags in the database as of this writing include data
    about buildings, highways, land surface, and waterways.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[OSM数据库](https://oreil.ly/pPT7s)包含超过80,000个标签键和600种关系类型，因此您可以为地图定义适当的粒度。在本章中，您将学习如何访问这些功能，自定义它们，将它们添加到您的地图中，并进行分析。例如，您可以识别一个位置并探索农业、商业或住宅用地的分布。（您可以通过查询数据库获取的不同土地使用价值的快照显示在本节后面的[图5-2](#some_of_the_tags_available_in_the_osm_d)中。）了解一个区域的土地利用分布可能很重要，如果您对该地区发生的洪水量或如何计算暴雨径流感兴趣的话。截至撰写本文时，数据库中最流行的标签包括关于建筑物、高速公路、地表和水路的数据。'
- en: OSM’s structure has a few rules, but they are relatively straightforward. For
    example, nodes can be arbitrary (*hashable*) Python objects, with both nodes and
    edges as optional key/value attributes. To view these optional values in their
    entirety, head over to either OSM [map features](https://oreil.ly/XDg2a) or [tag
    info](https://oreil.ly/oOkoG) (or follow along in the text).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: OSM的结构有一些规则，但它们相对来说很简单。例如，节点可以是任意（*可散列*）的Python对象，节点和边缘都可以是可选的键/值属性。要查看这些可选值的全部内容，请前往OSM的[地图功能](https://oreil.ly/XDg2a)或[标签信息](https://oreil.ly/oOkoG)（或者在文本中跟随）。
- en: You can put a mutable object (like a list) inside a tuple. The tuple is still
    immutable, but you can change the list inside it, so it’s not hashable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将可变对象（如列表）放在元组中。元组仍然是不可变的，但是您可以更改其中的列表，因此它不可哈希。
- en: Tags
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签
- en: OSM applies a *tag* made up of a key-value pair. You will see these defined
    in the code cells we will write in this chapter. Their format is a *key* and its
    corresponding *value*, formatted as `key=value`. For example, if your key for
    a location is set to `highway` and the value is `residential`, you can tell that
    this is a road where people live.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OSM应用一个由键-值对组成的*标签*。您将在我们将编写的代码单元中看到这些定义。它们的格式是`key=value`，例如，如果您的位置键设置为`highway`，值设置为`residential`，则可以知道这是一条人们居住的道路。
- en: 'Here are a few examples of tags:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个标签的示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Depending on what you’re looking for, this level of granularity may be useful
    in your data exploration. I have used these tags to explore impervious surfaces
    in urban settings, for example. Impervious surfaces tend to trap heat, and places
    with a lot of them tend to have higher rates of flooding—important information
    when comparing the characteristics of different neighborhoods. As another example,
    you might simply want a map of all the buildings in a neighborhood. The default
    value `buildings="all"` will then be uploaded. We’ll look at the utility of including
    tags in the code examples and sample Notebook for this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的需求，这种粒度可能在数据探索中很有用。例如，我曾使用这些标签来探索城市环境中的不透水表面。不透水表面往往会吸热，而且这些地方往往有较高的洪水发生率——这在比较不同社区特征时是重要信息。举个例子，你可能只是想要一个某社区内所有建筑物的地图。然后默认值`buildings="all"`将被上传。我们将探讨包含标签在本章代码示例和示例笔记本中的实用性。
- en: OSMnx extracts OSM data and creates a routable [Python NetworkX](https://networkx.github.io)
    object for working with complex networks. This is needed to convert edges and
    nodes from OSM, as shown in [Figure 5-1](#a_map_of_the_walkable_street_network_in),
    to links and junctions characteristic of routable networks. These routable maps
    are a network with features like travel time, speed limit, and shortest distance
    between locations allowing routing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OSMnx提取OSM数据并创建一个可用于处理复杂网络的可路由的[Python NetworkX](https://networkx.github.io)对象。这是将来自OSM的边缘和节点转换为具有路由特性的链接和交叉点所需的。这些可路由的地图是具有诸如行驶时间、速度限制和位置之间的最短距离等功能的网络，允许进行路径规划。
- en: '![A map of the walkable street network in Manhattan’s Chelsea neighborhood](assets/pgda_0501.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![曼哈顿切尔西社区可行走街道网络地图](assets/pgda_0501.png)'
- en: Figure 5-1\. A map of the walkable street network in Manhattan’s Chelsea neighborhood
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-1\. 曼哈顿切尔西社区的可行走街道网络地图
- en: OSMnx automates several mapping capabilities, including downloads of geometries
    like states, cities, neighborhoods, building footprints, customized street networks,
    and topology. In addition, OSMnx has built-in capabilities for analysis based
    on the foundation of graph theory. Simply defined, *graph theory* represents connections
    between elements and their locations within spatial networks, including both nodes
    and edges. The NetworkX integration allows you to customize nodes and edges to
    hold a variety of data, images, graph algorithms, and network structures for analysis.
    Instead of solely geographic coordinates, vast amounts of information are stored
    for each location. We will begin exploring the types of data shortly. First, here’s
    a brief introduction to what’s under the hood.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OSMnx自动化了多个地图功能，包括下载像州、城市、社区、建筑物轮廓、定制街道网络和拓扑结构等几何图形。此外，OSMnx还具有基于图论基础的分析功能。简单来说，*图论*
    表示空间网络中元素及其位置之间的连接，包括节点和边缘。NetworkX集成允许您自定义节点和边缘以容纳各种数据、图算法和用于分析的网络结构。除了地理坐标外，每个位置还存储大量信息。我们将很快开始探索这些数据类型。首先，这里是引擎盖下的简要介绍。
- en: Multidigraphs
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多重图
- en: '[Figure 5-1](#a_map_of_the_walkable_street_network_in) shows edges between
    nodes. This is a preview of what we will build later in this chapter. The nodes
    are corners connected by street segments, which are weighted by length in this
    example. (You could also weight them by travel time, for example). This is one
    way to calculate the shortest paths between two places.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-1](#a_map_of_the_walkable_street_network_in) 显示节点之间的边缘。这是本章稍后将要构建的一个预览。节点是通过街道段连接的角落，例如本例中按长度加权。你也可以按行驶时间加权。这是计算两地之间最短路径的一种方式。'
- en: The data you are going to request in the next section will be in the format
    of a NetworkX multidigraph. *Multidigraphs* are abstract representations of objects
    or elements with multiple edges between the same nodes. They are directional,
    reflecting, for example, whether traffic on a specific city street is one-way
    or flows in both directions. Digraphs have edges that point from node to node,
    but not necessarily in both directions. Once you have multiple edges in parallel,
    you have a multidigraph.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在下一节中请求的数据将以NetworkX多重有向图的格式呈现。*多重有向图*是对具有多条边的对象或元素的抽象表示。它们是有向的，反映了例如特定城市街道上的交通是单向的还是双向的。有向图的边从节点指向节点，但不一定是双向的。一旦您有了多个平行的边，您就有了一个多重有向图。
- en: OSM is a *wiki*, an open source, editable geographic database. Its conceptual
    model includes *nodes* that define points in space, *ways* defining linear features
    and boundaries, and *relations* that explain how nodes and ways work together.
    Think of a *node* as like a coordinate defined by latitude and longitude, with
    the *way* representing a list of nodes (called a *polyline*), or the boundaries
    of a polygon.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OSM是一个*维基*，是一个开源的可编辑地理数据库。其概念模型包括*节点*定义空间中的点，*道路*定义线性特征和边界，以及*关系*解释节点和道路如何共同工作。将*节点*看作是由纬度和经度定义的坐标，*道路*代表节点列表（称为*折线*）或多边形的边界。
- en: You might initially think of these spatial networks as simple planes, but there
    are plenty of nonplanar structures such as bridges, tunnels, and a variety of
    grade-separated structures like expressways, on- and off-ramps, and overpasses.
    You can evaluate these using topological measures and *metric structures*, or
    length and area described in spatial units (such as meters). The wiki description
    defines the relationship between the land-use tag and the values available to
    be assigned to a key, as shown in [Figure 5-2](#some_of_the_tags_available_in_the_osm_d).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能最初将这些空间网络视为简单的平面，但实际上有很多非平面结构，比如桥梁、隧道以及各种等级分隔的结构，如高速公路、上下匝道和过街天桥。您可以使用拓扑测量和*度量结构*或以空间单位（如米）描述的长度和面积来评估这些结构。维基描述了土地利用标签与可以分配给关键的值之间的关系，如[图5-2](#some_of_the_tags_available_in_the_osm_d)所示。
- en: 'Geographical data questions are often defined based on a specific location
    and usually have real-world implications. They often involve things like land
    use, road surfaces, number and types of buildings, or locations of community facilities,
    such as museums, bars, or internet access. For example, your data question might
    be something like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 地理数据问题通常基于特定位置进行定义，并且通常具有现实世界的影响。它们经常涉及土地利用、道路表面、建筑物的数量和类型，或者社区设施的位置，比如博物馆、酒吧或互联网接入点。例如，您的数据问题可能是这样的：
- en: How many supermarkets are there in the seventh ward of Washington, DC?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 华盛顿特区第七选区有多少个超市？
- en: How many green spaces or parks are located in a particular neighborhood?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定社区有多少个绿地或公园？
- en: How walkable is Chicago, Illinois?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 芝加哥伊利诺伊州有多少步行街？
- en: '![Some of the tags available in the OSM database to describe land use](assets/pgda_0502.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![OSM数据库中可用于描述土地利用的一些标签](assets/pgda_0502.png)'
- en: Figure 5-2\. Some of the tags available in the OSM database to describe land
    use
  id: totrans-27
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-2。OSM数据库中可用于描述土地利用的一些标签
- en: First, let’s install OSM.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装OSM。
- en: Installing OSMnx
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OSMnx
- en: 'Install OSMnx to a unique environment within your terminal. As I’ve noted before,
    I create different environments as a simple way to address dependencies and updates.
    Another lesson learned the hard way: if you need to update the package, delete
    and reinstall it into your environment. I often delete environments after specific
    projects because they can take up significant space on your hard drive if you
    create them willy-nilly and let them sit there once no longer needed. This is
    easier if you name them with specificity. This seems to be the only way to be
    certain you have all of the dependencies also updated. If you receive a message
    in your code that a function has been deprecated, return to the [user reference
    files](https://oreil.ly/MZLFQ) for clarification.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端中为OSMnx安装一个独特的环境。正如我之前所指出的，我创建不同的环境是为了简单地解决依赖关系和更新问题。另一个从艰难经验中学到的教训是：如果您需要更新软件包，请将其删除并重新安装到您的环境中。我经常在特定项目之后删除环境，因为如果您随意创建并让它们长时间停留在那里，它们可能会占用您硬盘上的大量空间。如果您以具体的方式命名它们，这将更加容易。这似乎是确保您所有依赖项也已更新的唯一方法。如果您在代码中收到一个函数已被弃用的消息，请返回至[用户参考文件](https://oreil.ly/MZLFQ)以获取澄清。
- en: 'In your terminal, enter:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中输入：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll be using OSMnx to retrieve the OSM data and matplotlib library to interact
    with and visualize your data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用OSMnx检索OSM数据和matplotlib库与数据进行交互和可视化。
- en: 'If you want to see the packages you’ve installed alongside OSMnx, after `conda
    activate env`, enter `**conda list**` into the terminal. If you forget the name
    of your environment, you can write `**conda env list**` and view all of them.
    Here, I’ve created a unique environment called `OSM`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看与OSMnx一起安装的软件包，进入`conda activate env`后，在终端中输入`**conda list**`。如果忘记了环境的名称，可以写`**conda
    env list**`并查看所有环境。在这里，我创建了一个名为`OSM`的唯一环境：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you are ready to launch a Notebook, type `**jupyter notebook**` into your
    terminal, and a Notebook will open.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备启动一个笔记本时，在你的终端中键入`**jupyter notebook**`，一个笔记本将会打开。
- en: Choosing a Location
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个位置
- en: To pass `place_name`, OSMnx uses OSM Nominatim API. The [Nominatim Documentation](https://oreil.ly/AZvAG)
    includes an API reference guide to search for geocoding (see [Figure 5-3](#using_nominatim_to_query_an_api_request)).
    If you enter incorrect information (for example, if you’re seeking a neighborhood
    by name but misspell it), you will likely get an error. Open [Nominatim](https://oreil.ly/AP9Sd),
    and you will be taken to a debugging interface for the search engine that will
    look for the place you are requesting. I start there to make sure I am querying
    correctly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了传递`place_name`，OSMnx使用OSM Nominatim API。[Nominatim文档](https://oreil.ly/AZvAG)包含一个API参考指南，用于搜索地理编码（参见[图5-3](#using_nominatim_to_query_an_api_request)）。如果输入不正确的信息（例如，如果你按名称寻找但拼写错误），你可能会收到错误。打开[Nominatim](https://oreil.ly/AP9Sd)，你将进入一个用于搜索所请求位置的调试界面。我从那里开始确保我查询正确。
- en: '![Using Nominatim to query an API request for place_name](assets/pgda_0503.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![使用Nominatim查询`place_name`的API请求](assets/pgda_0503.png)'
- en: Figure 5-3\. Using Nominatim to query an API request for `place_name`
  id: totrans-40
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-3\. 使用Nominatim查询`place_name`的API请求
- en: Although you can add a place name as a string, it is best to check Nominatim
    and see how the location is listed to avoid conflicting or incorrect data. For
    example, I was looking for Brentwood, California, and got an error, so I ran it
    through Nominatim. It turned out that the boundaries were different for Brentwood
    as a neighborhood and for Brentwood’s administrative boundaries—and then there’s
    Brentwood Heights. I needed to make a minor adjustment in how I referred to the
    neighborhood.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以将地名作为字符串添加，但最好先检查Nominatim，并查看位置如何列出，以避免冲突或不正确的数据。例如，我想查找加利福尼亚州的Brentwood，但出现了错误，所以我通过Nominatim运行了它。结果发现Brentwood作为一个社区的边界与Brentwood的行政边界不同，还有Brentwood
    Heights。我需要稍微调整如何称呼这个社区。
- en: This will make more sense when we begin working with these relationships. Refer
    to the [OSMnx documentation](https://oreil.ly/ZY8Nr) for more, but you can also
    query directly inside of your code cell.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始处理这些关系时，这将更加清晰。查阅[OSMnx文档](https://oreil.ly/ZY8Nr)获取更多信息，但你也可以直接在你的代码单元格中查询。
- en: 'Let’s say you want a detailed street map of Los Angeles. In the following code,
    you’ll begin by importing the required packages: osmnx and matplotlib. Include
    `place_name` and set it equal to the desired location (within quotation marks
    in code). If you’re looking at something more specific than city and state, the
    more detail you include, the better. Run the following code (it may take some
    time):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要洛杉矶的详细街道地图。在以下代码中，你将从导入所需的包开始：osmnx和matplotlib。包括`place_name`并将其设置为所需位置（在代码中用引号括起来）。如果你看的不仅仅是城市和州，你包含的细节越多越好。运行以下代码（可能需要一些时间）：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Functions are written in the format `ox.module_name.function_name()`. The previous
    code snippet references the `osmnx.graph` module and the `graph_from_place` function.
    Most functions can be called with `ox.function_name()` only. This will retrieve
    the geocoded information from `Los Angeles,California,United States`, along with
    drivable-street-network data within the boundaries ([Figure 5-4](#street_networks_in_the_municipality_of)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 函数以`ox.module_name.function_name()`的格式编写。之前的代码片段引用了`osmnx.graph`模块和`graph_from_place`函数。大多数函数只需调用`ox.function_name()`即可。这将获取`洛杉矶,加利福尼亚州,美国`内的地理编码信息，以及边界内的可驾驶街道网络数据（参见[图5-4](#street_networks_in_the_municipality_of)）。
- en: Go ahead and pick a smaller location if you prefer. Larger cities are resource
    intensive and may take a few minutes to load. Later in the chapter we will explore
    Culver City, California.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢，可以选择一个较小的位置。较大的城市需要大量资源，可能需要几分钟来加载。本章后面我们将探索加利福尼亚州卡尔弗城。
- en: 'Place your cursor inside the parenthesis in your code where the ☞ icon is pointing.
    Here is the snippet isolated for clarity:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的光标放在你的代码中指向的☞图标指向的括号内。这里是为了清晰起见而隔离的片段：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While your cursor is inside the parentheses, select Tab + Shift on your keyboard.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的光标位于括号内时，选择键盘上的Tab + Shift。
- en: '![Street networks in the municipality of Los Angeles, generated by OSMnx](assets/pgda_0504.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![由OSMnx生成的洛杉矶市街道网络](assets/pgda_0504.png)'
- en: Figure 5-4\. Street networks in the municipality of Los Angeles, generated by
    OSMnx
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-4\. 由OSMnx生成的洛杉矶市街道网络
- en: Let’s see what parameters are possible!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看可能的参数！
- en: For example, [Figure 5-5](#discovering_arguments_available_within) displays
    the characteristics of the signature. This is a list of the arguments, and they
    need to match the arguments listed in the signature of the function. Try the different
    options and see how the map changes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[图5-5](#discovering_arguments_available_within)显示了签名的特征。这是参数列表，它们需要与函数签名中列出的参数匹配。尝试不同的选项，看看地图如何变化。
- en: '![Discovering arguments available within functions](assets/pgda_0505.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![发现函数内可用的参数](assets/pgda_0505.png)'
- en: Figure 5-5\. Discovering arguments available within functions
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-5\. 在函数内发现可用参数
- en: 'The `network_type` options for the function shown in [Figure 5-5](#discovering_arguments_available_within)
    are:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 函数选项的`network_type`如[图5-5](#discovering_arguments_available_within)所示：
- en: '`drive`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`drive`'
- en: Drivable public streets (not service roads)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可行驶的公共街道（不包括服务道）
- en: '`drive_service`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`drive_service`'
- en: Drivable public streets, including service roads
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可行驶的公共街道，包括服务道
- en: '`walk`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`walk`'
- en: All streets and paths that pedestrians can use (ignores one-way directionality
    by always connecting adjacent nodes with reciprocal directed edges)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可供行人使用的街道和路径（忽略单向性，始终使用相邻节点之间的相互连接有向边）
- en: '`bike`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`bike`'
- en: All streets and paths that cyclists can use
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可供自行车使用的街道和路径
- en: '`all`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`all`'
- en: All (nonprivate) OSM streets and paths
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有（非私有）OSM街道和路径
- en: '`all_private`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`all_private`'
- en: All OSM streets and paths, including private access
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有OSM街道和路径，包括私人通道
- en: Understanding Arguments and Parameters
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解参数和参数
- en: Have you ever heard the expression, “Nobody is coming to save you”? I am convinced
    it was first uttered by a data scientist. When your code won’t execute (and, trust
    me, that isn’t an “if” so much as a “when”), you will need to go read the user
    documentation. That might be documentation about the package itself or perhaps
    a GitHub repository. Features and arguments are deprecated and updated with newer
    versions. Knowing how to find them is an important skill to develop.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你听过这句话吗，“没有人会来救你”？我确信这是由数据科学家首次说出的。当你的代码无法执行（相信我，这不是“如果”，而是“何时”），你需要阅读用户文档。这可能是关于软件包本身的文档，或者可能是一个GitHub存储库。功能和参数已经过时并且用新版本进行更新。知道如何找到它们是一个重要的技能。
- en: If you scroll down past the parameters, you will notice customizations of these
    variables in the code snippets. I can’t include every function and associated
    argument here, but let’s take some examples. Select the inverted chevron in the
    upper right corner to display the contents of the box (^, as shown in [Figure 5-5](#discovering_arguments_available_within)).
    Scroll down and you will see a section called “Docstring.”
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在参数下滚动，你会注意到这些变量在代码片段中的定制。我不能在这里包含每个函数和相关的参数，但我们来看一些例子。选择右上角的倒置尖角以显示框的内容（如[图5-5](#discovering_arguments_available_within)所示）。向下滚动，你会看到一个名为“文档字符串”的部分。
- en: '*Docstrings* provide quick information about a class, function, or method.
    I look here for hints on how to formulate my query. When you need additional information
    about a function, return your cursor inside the parentheses and select Tab + Shift.
    Here is an example of the type of documentation available:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*文档字符串*提供了有关类、函数或方法的快速信息。我在这里寻找如何构建我的查询的提示。当你需要关于函数的额外信息时，在括号内返回你的光标并选择Tab
    + Shift。这里有一个可用文档的示例：'
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you continue to scroll down in the interface, you will see a “Parameters”
    section. This section provides information about data types and how to complete
    the query. Not all parameters are needed, depending on your query. If you leave
    some parameters out, the defaults will be displayed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在界面中继续向下滚动时，您将看到一个“参数”部分。该部分提供关于数据类型的信息以及如何完成查询的说明。根据您的查询，不是所有参数都是必需的。如果您省略了一些参数，则会显示默认值。
- en: 'Take another look at the code snippet you used to generate the Los Angeles
    map in [Figure 5-4](#street_networks_in_the_municipality_of). This map requires
    entering information for the `network_type` parameter: in this case, `network_type="drive"`.
    The function takes a string (hence the quotation marks), and the options are listed
    and must be within parentheses. Here they are, as listed in the documentation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 再看一下用于生成 [图 5-4](#street_networks_in_the_municipality_of) 中洛杉矶地图的代码片段。此地图需要为`network_type`参数输入信息：在本例中，`network_type="drive"`。该函数接受一个字符串（因此要用引号括起来），选项在括号内列出并且必须在括号内。这些选项如文档中所列：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Calculating Travel Times
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算旅行时间
- en: 'A popular type of data question involves travel time: *how long will it take
    to get from point A to point B?*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一种受欢迎的数据问题类型涉及到旅行时间：*从点A到点B需要多长时间？*
- en: To answer this kind of question, you can plot *networks* (where edges intersect)
    and calculate *free-flow travel time*, using the imputed maximum speed allowed
    on a specific highway type. In other words, when considering the maximum speed
    on a road, the time calculated to drive the distance is defined as *free-flow*.
    The `osmnx.speed` module calculates speed and travel times by providing kilometers
    per hour as `speed_kph` edge attributes. Complex networks are formed from the
    connections between nodes and edges. Analyzing these structures with the NetworkX
    Python package allows you to view a node as an element and the connection between
    nodes as an edge to study their relationship.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答这类问题，您可以绘制*网络*（其中边交叉）并计算*自由流行驶时间*，使用在特定公路类型上允许的最大速度。换句话说，当考虑到道路上的最大速度时，计算驾驶距离所需的时间定义为*自由流行*。`osmnx.speed`
    模块通过提供每小时公里数作为 `speed_kph` 边属性来计算速度和旅行时间。复杂的网络由节点和边之间的连接形成。使用NetworkX Python包分析这些结构允许您将节点视为元素，并将节点之间的连接视为边以研究它们的关系。
- en: 'Let’s try running a function to calculate travel time:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试运行一个计算旅行时间的函数：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Notice that you have four inputs here. Let’s break these down and look at how
    the OSM documentation defines them:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此处您有四个输入。让我们对此进行分解，并查看OSM文档如何定义它们：
- en: '`G`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`G`'
- en: The input graph
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 输入图
- en: '`hwy_speeds`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`hwy_speeds`'
- en: The mean speed value of all edges in highway type (if empty)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 公路类型中所有边的平均速度值（如果为空）
- en: '`f``allback`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`f``allback`'
- en: A backup speed, in case the road type has no preexisting value
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果道路类型没有预设值，则备用速度
- en: '`p``recision`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`p``recision`'
- en: Rounding to the desired decimal precision
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 舍入到所需的小数精度
- en: Only `G`, the NetworkX MultiGraph, is being passed into the function. If the
    origin (`orig`) and destination (`dest`) are both specified, you’ll get a single
    list of nodes in a shortest path from the source to the target. These routes are
    distinct, to show how you can plot `travel_times` and `edge_speeds` to find the
    shortest routes between destinations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 只传递`G`，即NetworkX MultiGraph，到函数中。如果同时指定了起点(`orig`)和终点(`dest`)，您将得到从源到目标的最短路径的单个节点列表。这些路线是不同的，用于展示如何绘制`travel_times`和`edge_speeds`以找到目的地之间的最短路径。
- en: 'You are setting weight to equal `w` instead of the default none. Here’s what
    it looks like:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您正在将权重设置为等于`w`，而不是默认的空值。看起来是这样的：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 5-6](#calculating_the_shortest_distance_betwe) uses OSMnx’s color options
    as well. *Color options* can be described as attribute values for each edge in
    a path. *Attribute values* can represent a property, such as data about how the
    graph was constructed, the color of the vertices when the graph is plotted, or
    simply the weights of the edges in a weighted graph. In [Figure 5-6](#calculating_the_shortest_distance_betwe),
    the routes are represented by different colors.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-6](#calculating_the_shortest_distance_betwe) 也使用了OSMnx的颜色选项。*颜色选项* 可以描述作为路径中每个边的属性值。*属性值*
    可以表示属性，例如有关如何构造图的数据、在绘制图时顶点的颜色或仅是加权图中边的权重。在 [图 5-6](#calculating_the_shortest_distance_betwe)
    中，路线用不同的颜色表示。'
- en: '![Calculating the shortest distance between points in Los Angeles by computing
    weighted travel times](assets/pgda_0506.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![计算洛杉矶点之间的最短距离，通过计算加权旅行时间](assets/pgda_0506.png)'
- en: Figure 5-6\. Calculating the shortest distance between points in Los Angeles
    by computing weighted travel times
  id: totrans-96
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-6\. 计算洛杉矶点之间的最短距离，通过计算加权旅行时间
- en: 'The full street network does consume resources, so let’s select a specific
    neighborhood to get a more manageable visualization to query. In the code snippet
    that follows, I designated Culver City, California, to include all the private
    roads within the city limits (see [Figure 5-7](#a_neighborhood_level_street_network_map)):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的街道网络确实会消耗资源，因此让我们选择一个特定的社区来获取一个更可管理的可视化查询。在随后的代码片段中，我指定了加州卡尔弗城（Culver City），包括城市边界内的所有私人道路（请参见
    [图 5-7](#a_neighborhood_level_street_network_map)）：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![A neighborhood-level street network map of Culver City, California](assets/pgda_0507.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![加州卡尔弗城（Culver City）的街道网络地图](assets/pgda_0507.png)'
- en: Figure 5-7\. A neighborhood-level street network map of Culver City, California
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-7\. 加州卡尔弗城的街道网络地图（邻里级别）
- en: If you are curious about colorizing nodes or edges, you can explore [`key:colour`](https://oreil.ly/zjof8)
    options on the OSM wiki page or in the user reference documentation. [Figure 5-8](#key_color_options_in_osm_left_parenthes)
    shows the most common color codes but is certainly not exhaustive. The color variation
    is somewhat self-explanatory, but you can refer to the exact color on the [OSM
    wiki](https://oreil.ly/zjof8). I find the chart useful to grab the color codes
    I use most frequently.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对节点或边缘的着色感兴趣，可以在 OSM wiki 页面或用户参考文档中探索 [`key:colour`](https://oreil.ly/zjof8)
    选项。[图 5-8](#key_color_options_in_osm_left_parenthes) 显示了最常见的颜色代码，但并非穷尽所有。颜色变化在某种程度上是不言自明的，但您可以在
    [OSM wiki](https://oreil.ly/zjof8) 上查看确切的颜色。我发现这个图表对获取我经常使用的颜色代码非常有用。
- en: '![Key color options in OSM (not exhaustive, but a handy reference)](assets/pgda_0508.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![OSM 中的关键颜色选项（非穷尽，但是一个方便的参考）](assets/pgda_0508.png)'
- en: Figure 5-8\. Key color options in OSM (not exhaustive, but a handy reference)
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-8\. OSM 中的关键颜色选项（非穷尽，但是一个方便的参考）
- en: You have built a few street networks and maps in OSMnx. Now let’s see what additional
    information you can extract.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在 OSMnx 中构建了几个街道网络和地图。现在让我们看看您可以提取哪些额外信息。
- en: Basic Statistical Measures in OSMnx
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OSMnx 中的基本统计量
- en: Visualizing street networks is meaningful, but the OSMnx framework also allows
    you to generate descriptive geometric and topological measures. Topographic measures
    can offer insights like the average number of nodes per street.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化街道网络是有意义的，但 OSMnx 框架还允许您生成描述性的几何和拓扑测量。地形测量可以提供像每条街道平均节点数这样的见解。
- en: Circuity
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迂回度
- en: To introduce the concept of circuity, let’s calculate the average circuity in
    Manhattan and compare it to Staten Island. *Circuity* is the ratio of network
    distances to straight-line distances. Circuity is an important measure in urban
    networks; it indicates transportation efficiencies and may also show inequities
    between different geographic areas and populations. Circuity averages differ in
    different neighborhoods, on different subway routes, and with the length and time
    of travel. Researchers used circuity as part of a study that found a correlation
    between [subway turnstile entries in New York City and COVID-19 cases and deaths](https://oreil.ly/7qGjF)
    between March and May 2020.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了介绍迂回度的概念，让我们计算曼哈顿的平均迂回度，并将其与斯塔滕岛进行比较。*迂回度* 是网络距离与直线距离的比率。迂回度是城市网络中的重要指标；它显示了交通效率，并可能显示出不同地理区域和人口之间的不平等。不同社区、不同地铁路线以及旅行的长度和时间的迂回度平均值不同。研究人员在研究中使用迂回度作为发现纽约市地铁闸机进入次数与
    COVID-19 病例和死亡之间关联的一部分，该研究跨越了 2020 年 3 月至 5 月。
- en: How circuitous your journey from point A to point B is, compared to other journeys,
    relies on a variety of factors, such as land-use systems, the design of transportation
    options, hubs, and cost. Network distances like circuity are calculated based
    on the actual grid and layout of a city, instead of “as the crow flies”—that is,
    a simple straight line between two points. You can always assume that actual distances
    to locations are quite a bit farther.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您从点 A 到点 B 的迂回程度与其他旅程相比，依赖于多种因素，例如土地利用系统、交通选项设计、枢纽和成本。诸如迂回度这样的网络距离是基于城市的实际网格和布局计算的，而不是“鸟儿飞行”——也就是说，两点之间的简单直线。您可以始终假设到达位置的实际距离要远得多。
- en: 'I will repeat the import details in case you are moving between different sections.
    There is a new line in the code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在不同的章节之间移动，我将重复导入的详细信息。代码中有一个新行：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The % character indicates this is a Python “magic function.” The argument is
    the line that follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 百分号表示这是Python的“魔法函数”。参数是接下来的行：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These *magic functions* (or dunder methods) with double underscores provide
    additional functionality. In this example, matplotlib will display the plotting
    command within the Jupyter Notebook right below the code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*魔法函数*（或者双下划线的方法）提供了额外的功能。在这个例子中，matplotlib将在Jupyter Notebook中的代码正下方显示绘图命令。
- en: 'Parentheses are not needed. This places the plotting output inside the Jupyter
    Notebook beneath the coding cell:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 圆括号不是必需的。这将把绘图输出放在Jupyter Notebook的编码单元格下面：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is a value for travel in Manhattan, which has a robust transportation
    framework:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是曼哈顿旅行的一个值，它有一个健全的交通框架：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output is 1.0366712806100773.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 1.0366712806100773。
- en: 'You can now compare this value to other boroughs. Lower circuity values indicate
    higher efficiency. The other four boroughs of New York City present different
    transportation challenges. Traveling within Staten Island, for instance, is 4%
    less direct than traveling within Manhattan, as the output of the following code
    indicates:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以将这个值与其他行政区进行比较。较低的回路度值表示更高的效率。纽约市的其他四个行政区提出了不同的交通挑战。例如，在Staten Island内部旅行，比在曼哈顿内部旅行要间接多4%，正如以下代码的输出所示：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This output is 1.0732034499369911.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 1.0732034499369911。
- en: 'Network Analysis: Circuity in Paris, France'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络分析：巴黎，法国的回路度
- en: 'Let’s have a little fun and explore Paris, specifically, part of its urban
    infrastructure—the roadways. First, let’s calculate circuity:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来玩一点，探索巴黎，具体来说是它的城市基础设施的一部分——道路。首先，让我们计算回路度：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And the output: 1.0377408863844562.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果为：1.0377408863844562。
- en: 'Viewing the network statistics for a place is as simple as updating the place
    name (according to the Nominatim standards of OSM) and running the cell. The street
    network is then loaded, along with the area in square meters. Let’s get Paris’s
    street network and area:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 查看一个地方的网络统计数据就像更新地方名称（根据OSM的Nominatim标准）并运行单元格一样简单。然后将加载街道网络以及以平方米为单位的区域。让我们获取巴黎的街道网络和区域：
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now let’s calculate and merge the statistics:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算并合并统计数据：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The counts of streets and networks are stored as nested dictionaries inside
    the statistics dictionary. The following code unpacks those nested dictionaries
    and then converts them to a pandas dataframe:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 街道和网络的计数存储为统计字典中的嵌套字典。以下代码展开了这些嵌套字典，然后将它们转换为一个pandas数据框架：
- en: '[PRE18]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This example is probably more granular than most of what you’ll need, but I
    want you to see the data you can use to calculate measures such as shortest distance.^([1](ch05.xhtml#ch01fn9))
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子可能比大多数情况都更详细，但我希望你能看到用来计算诸如最短距离之类的测量数据。^([1](ch05.xhtml#ch01fn9))
- en: At a glance, you can determine the number of streets emerging from each node.
    If you are interested in density, you can count the number of intersections or
    meters of linear street distance. Specifically, *linear street distance* represents
    a sum of total street length in an undirected representation of a network, meaning
    directionality (one-way and two-way streets) is not captured. That information
    is important for driving directions but not as important for walking directions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一目了然，您可以确定从每个节点出来的街道数。如果您对密度感兴趣，您可以计算交叉口的数量或线性街道距离的米数。具体而言，*线性街道距离*表示网络的无向表示中总街道长度的总和，意味着未捕获方向性（单向和双向街道）。这些信息对于驾驶指南很重要，但对于步行指南则不那么重要。
- en: Betweenness Centrality
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中介中心度
- en: 'Let’s ask a data question: *how long is the average Parisian street?* Average
    street length is a nice linear proxy for block size. These measures provide urban-planning
    information about walkability and housing prices; for instance, a smaller block
    size translates to higher walkability and higher home prices. [Figure 5-9](#network_statistics_for_the_city_of_pari)
    shows the overall output of our statistics.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们问一个数据问题：*巴黎街道的平均长度是多少？*平均街道长度是块大小的一个很好的线性代理。这些测量数据提供了关于步行便利性和房屋价格的城市规划信息；例如，较小的块大小转化为更高的步行便利性和更高的房价。[图 5-9](#network_statistics_for_the_city_of_pari)
    展示了我们统计数据的总体输出。
- en: '*Betweenness centrality* measures how central a location or node is within
    a larger network or neighborhood. You can see that in Paris, the area with the
    highest betweenness centrality has 11% of all the shortest paths running through
    its boundaries. What does this tell us? Shorter road segments typically cluster
    around central business districts or historical districts or serve as conduits
    for navigating throughout a city.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*介数中心性* 衡量了一个位置或节点在更大网络或邻域中的中心性。您可以看到在巴黎，介数中心性最高的区域有所有最短路径的 11% 通过其边界。这告诉我们什么？较短的道路段通常围绕中央商务区或历史区聚集，或者作为导航城市的导管。'
- en: '![Network statistics for the city of Paris, France](assets/pgda_0509.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![巴黎市的网络统计数据](assets/pgda_0509.png)'
- en: Figure 5-9\. Network statistics for the city of Paris, France
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-9\. 巴黎市的网络统计数据
- en: 'How important is the node? Think about a chain of command where information
    has to travel through a single person to be dispensed to the rest of the organization.
    If only 11% of the information has to pass through it, then in general, it isn’t
    critical to the flow through the network. You can see the max node as a small
    red dot in the lefthand image (A) in [Figure 5-10](#left_parenthesisaright_parenthesis_digr).
    In the following code cell, the shortest path between the nodes is calculated.
    The parameter weight considers the edge attribute length. The function will return
    the betweenness centrality:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 节点有多重要？想象一下信息必须通过一个人才能传递给组织的其余部分的命令链。如果只有 11% 的信息必须通过它传递，那么通常它对网络流动并不重要。您可以在
    [图 5-10](#left_parenthesisaright_parenthesis_digr) 的左侧图像 (A) 中看到最大节点作为一个小红点。在下面的代码单元格中，计算节点之间的最短路径。参数权重考虑了边属性长度。该函数将返回介数中心性：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output is `(332476877, 0.1128095261389006)`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为 `(332476877, 0.1128095261389006)`。
- en: '![(A) Digraph (max node) of betweenness in Paris highlighting the maximum node
    of betweenness centrality; (B) Visualizing every node in the graph](assets/pgda_0510.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![(A) 巴黎介数图中介数最大节点的有向图; (B) 可视化图中的每个节点](assets/pgda_0510.png)'
- en: Figure 5-10\. (A) Digraph (max node) of betweenness in Paris highlighting the
    maximum node of betweenness centrality; (B) Visualizing every node in the graph
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-10\. (A) 巴黎介数图中介数最大节点的有向图; (B) 可视化图中的每个节点
- en: 'Node color (`nc`) will retrieve a node with the highest centrality and observe
    the result in the graph object shown in [Figure 5-10](#left_parenthesisaright_parenthesis_digr).
    Node size (`ns`) is calculated as well. You can adjust these values based on your
    desired visualization:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 节点颜色 (`nc`) 将检索出具有最高中心性的节点，并在图对象中观察结果，如 [图 5-10](#left_parenthesisaright_parenthesis_digr)
    所示。节点大小 (`ns`) 也已计算。您可以根据您想要的可视化调整这些值：
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, try adding color to every node, to visualize 11% of all shortest paths
    relative to all nodes in [Figure 5-10](#left_parenthesisaright_parenthesis_digr)
    (B):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，尝试为每个节点添加颜色，以可视化相对于 [图 5-10](#left_parenthesisaright_parenthesis_digr) (B)
    中所有节点的所有最短路径的 11%：
- en: '[PRE21]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When observing street networks visually, it can be a challenge to identify important
    nodes and measures of centrality. Plotting the node attributes gives you an easily
    identifiable region for a deeper review. What other features are located nearby?
    How might this influence the values we observe at this node?
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉上观察街道网络时，识别重要节点和中心度量可能是一项挑战。绘制节点属性为您提供了一个易于识别的区域进行深入审查。附近还有哪些其他特征？这如何影响我们在这个节点上观察到的值？
- en: Network Types
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络类型
- en: 'How about we stick around in France a little longer? In Jupyter Notebooks,
    I often repeat the import functions for simplicity, to avoid scrolling up and
    down when running or rerunning a section. I will do the same thing here:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在法国再逗留一会儿怎么样？在 Jupyter 笔记本中，我经常重复导入函数以简化操作，避免在运行或重新运行部分时上下滚动。我在这里也会做同样的事情：
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are a few network types to explore. The most common are `walk`, `bike`,
    and `drive`, or you can even explore `all`. Some of those options can be quite
    congested in a city like Paris. Let’s try `drive` and explore what that measures.
    Generate the figure in your Notebook:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种网络类型可以探索。最常见的是 `walk`、`bike` 和 `drive`，或者您甚至可以探索 `all`。在像巴黎这样的城市中，一些选项可能非常拥挤。让我们试试
    `drive`，并探索它的测量结果。在您的笔记本中生成该图：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You want edges (streets), so you will need to create a variable:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要边缘（街道），因此您需要创建一个变量：
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'What type of columns? What is the projection? The following code cells provide
    this information:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 列类型是什么？投影是什么？以下代码单元格提供了此信息：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output is:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You also will need to know the CRS to identify location in geographic space:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要了解CRS以识别地理空间中的位置：
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And the output:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 并且输出如下：
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'I am a visual person, so I like to see the column headings with a sample of
    the data. Set that up next:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个视觉人士，所以我喜欢看到带有数据样本的列标题。接下来设置好这个：
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now you can run the following code for a summary of the types of roads and
    how they are classified:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以运行以下代码，以了解各种道路类型及其分类的摘要：
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the output:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: OSM contains information about roadways that you can access for a wide variety
    of uses. The infrastructure of any location or city can provide information about
    how easy it is to access transportation into and out of that location, which might
    influence the social nature of neighborhoods, communities, and larger networks
    of populations.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: OSM 包含关于道路的信息，您可以为各种用途访问这些信息。任何位置或城市的基础设施都可以提供关于如何轻松进出该位置的交通信息，这可能会影响社区、社区以及更大的人口网络的社交性质。
- en: Customizing Your Neighborhood Maps
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义您的社区地图
- en: Let’s look at how you can create, customize, automatically download, and compare
    street network maps. For this exercise, we’ll travel back to Culver City and generate
    a neighborhood map.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建、自定义、自动下载和比较街道网络地图。对于此练习，我们将回到库尔弗城并生成一个社区地图。
- en: Geometries from Place
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地点的几何图形
- en: 'The following code generates the map of Culver City, California, in [Figure 5-11](#using_place_to_call_a_specific_geometry);
    including the tag `building` will add building footprints to the map:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成了加利福尼亚库尔弗城的地图，见[图 5-11](#using_place_to_call_a_specific_geometry)；包括标签
    `building` 将在地图上添加建筑物轮廓：
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'I am defaulting to `#FFFFFF` (white) as a background color to make the map
    more easily printable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我默认使用 `#FFFFFF`（白色）作为背景色，以便更容易打印地图：
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Go ahead and see what you can create. [Figure 5-11](#using_place_to_call_a_specific_geometry)
    shows the city geometry with building footprints.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 请继续看看你能创造出什么。[图 5-11](#using_place_to_call_a_specific_geometry) 展示了具有建筑物轮廓的城市几何图形。
- en: '![Using place to call a specific geometry by location in OSMnx for Culver City,
    California](assets/pgda_0511.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![使用地点调用特定地理位置的几何图形，来自加利福尼亚库尔弗城的OSMnx](assets/pgda_0511.png)'
- en: Figure 5-11\. Using place to call a specific geometry by location in OSMnx for
    Culver City, California
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-11\. 使用地点调用加利福尼亚库尔弗城的OSMnx中特定几何图形
- en: Geometries from Address
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自地址的几何图形
- en: Perhaps you have geographic coordinates for a location. You can explore that
    location by passing those coordinates to the `geometries_from_address` function
    ([Figure 5-12](#viewing_amsterdam_in_the_netherlands_by)). All of the geometries
    will transform to the CRS you select. For example, the projected coordinate system
    for the Netherlands is EPSG:28992.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 也许您有一个地理坐标，您可以通过将这些坐标传递给 `geometries_from_address` 函数来探索该位置（见[图 5-12](#viewing_amsterdam_in_the_netherlands_by)）。所有几何图形都将转换为您选择的CRS。例如，荷兰的投影坐标系统是EPSG:28992。
- en: 'Here is the code that generates the map in [Figure 5-12](#viewing_amsterdam_in_the_netherlands_by):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成[图 5-12](#viewing_amsterdam_in_the_netherlands_by) 中地图的代码：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![Viewing Amsterdam in the Netherlands by geographic coordinates and EPSG projection](assets/pgda_0512.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![通过地理坐标和EPSG投影查看荷兰阿姆斯特丹](assets/pgda_0512.png)'
- en: Figure 5-12\. Viewing Amsterdam in the Netherlands by geographic coordinates
    and EPSG projection
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-12\. 通过地理坐标和EPSG投影查看荷兰阿姆斯特丹
- en: 'You can also change the arguments to explore other geographies. Make sure to
    change the projection for the highest level of accuracy. (As a friendly reminder:
    the Earth is not a perfect sphere, so you need to select the best projection for
    the geographical area of interest to minimize distortion.) The following code
    includes additional tags:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以更改参数来探索其他地理区域。确保更改投影以获得最高级别的准确性。（友情提醒：地球不是一个完美的球体，因此您需要选择最适合地理区域的投影以最小化失真。）以下代码包含额外的标签：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[Figure 5-13](#using_tags_to_add_features_to_a_map) shows the output of this
    code. Thanks to the tags, this map shows water, commercial buildings, commercial
    and residential land use, and highways. These tags are explorative. See what happens
    with different combinations.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-13](#using_tags_to_add_features_to_a_map) 展示了此代码的输出。多亏了这些标签，该地图显示了水域、商业建筑、商业和住宅用地以及高速公路。这些标签是探索性的。看看使用不同组合会发生什么。'
- en: '![Using tags to add features to a map](assets/pgda_0513.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![使用标签为地图添加特征](assets/pgda_0513.png)'
- en: Figure 5-13\. Using tags to add features to a map
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-13\. 使用标签为地图添加特征
- en: In the next example, you’ll use `custom_filter` to query specific ways to include
    in your graph, such as `motorway`. Specifying what you want with `custom_filter`
    will significantly reduce the resources needed to assemble the graph.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，你将使用 `custom_filter` 查询要包含在图中的特定路径，例如 `motorway`。使用 `custom_filter`
    指定你想要的内容将大大减少组装图所需的资源。
- en: 'The terms `motorway_link` and `trunk_link` have specific meanings in OSM (as
    [OpenStreetMap Wiki](https://oreil.ly/DHjM8) explains). They describe how highways
    are connected: on- and off-ramps, for example (see [Figure 5-14](#motorways_in_madrid_using_a_custom_filt)).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 术语 `motorway_link` 和 `trunk_link` 在 OSM 中具有特定含义（如 [OpenStreetMap Wiki](https://oreil.ly/DHjM8)
    所解释）。它们描述了高速公路如何连接：例如匝道（查看 [图 5-14](#马德里高速公路使用自定义过滤器)）。
- en: 'Input the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `custom_filter` (`cf`) requires a `network_type` preset like `"highway"~"motorway"`.
    We want highways that are also motorways and the binary OR (|) operator in Python.
    The argument addresses both values, motorways and trunks (the ramps for entering
    and entering highways).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`custom_filter` (`cf`) 需要像 `"highway"~"motorway"` 这样的 `network_type` 预设。我们想要同时是高速公路和主干道的高速公路，以及
    Python 中的二进制 OR (|) 运算符。该参数同时涵盖了高速公路和主干道（进出高速公路的匝道）的值。'
- en: The output ([Figure 5-14](#motorways_in_madrid_using_a_custom_filt)) shows a
    map of only motorways, this time in Madrid, Spain.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 ([图 5-14](#马德里高速公路使用自定义过滤器)) 显示了一张地图，仅显示了马德里，西班牙的高速公路。
- en: '![Motorways in Madrid using a custom filter (cf) to query only motorways](assets/pgda_0514.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义过滤器查询马德里高速公路](assets/pgda_0514.png)'
- en: Figure 5-14\. Motorways in Madrid using a custom filter (`cf`) to query only
    motorways
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-14\. 使用自定义过滤器 (`cf`) 查询马德里高速公路的高速公路
- en: 'To appreciate the motorway map in context, you can readily bring up a more
    detailed map of Madrid with building footprints ([Figure 5-15](#building_footprints_in_madridcomma_spai))
    using the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面了解高速公路地图，你可以轻松地使用以下代码调出马德里更详细的地图，其中包括建筑轮廓 ([图 5-15](#马德里逗号西班牙逗号建筑轮廓))：
- en: '[PRE37]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Notice that `save` is set to `True`. It is important to save your files. I am
    using the default `filepath`, but you can specify a precise folder or location,
    such as your Downloads folder.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`save` 设置为 `True`。保存文件很重要。我正在使用默认的 `filepath`，但你可以指定一个精确的文件夹或位置，比如你的下载文件夹。
- en: '![Building footprints in Madrid, Spain](assets/pgda_0515.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![马德里，西班牙的建筑轮廓](assets/pgda_0515.png)'
- en: Figure 5-15\. Building footprints in Madrid, Spain
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-15\. 马德里，西班牙的建筑轮廓
- en: '[Figure 5-16](#the_networkx_function_brings_all_the_ne) is an example of downloading
    the whole network (`network_type="drive"`) in the absence of a filter or customization.
    These renderings can be quite artistic and are often integrated into cartography
    and mapmaking or commercial products. Run this code to generate the map:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 5-16](#networkx函数将所有网络带入图中) 是下载整个网络 (`network_type="drive"`) 的示例，在没有过滤器或自定义的情况下。这些渲染可以是非常艺术的，并经常被整合到制图和地图制作或商业产品中。运行此代码以生成地图：'
- en: '[PRE38]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![The networkx function brings all the networks into the graph](assets/pgda_0516.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![networkx 函数将所有网络带入图中](assets/pgda_0516.png)'
- en: Figure 5-16\. The `networkx` function brings all the networks into the graph
  id: totrans-209
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-16\. `networkx` 函数将所有网络带入图中。
- en: 'The last graph in this chapter is created with a different value for `network_type="all"`.
    [Figure 5-17](#madridcomma_spaincomma_observed_in_netw) shows what happens to
    the output if you change the geocode queries by swapping out the strings (`all_private`,
    `all`, `bike`, `drive`, `drive_service`, `walk`):'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个图是使用 `network_type="all"` 的不同值创建的。[图 5-17](#马德里逗号西班牙逗号观察到的网络) 显示了如果通过交换字符串
    (`all_private`、`all`、`bike`、`drive`、`drive_service`、`walk`) 更改地理编码查询的输出会发生什么。
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '![Madrid, Spain, observed in network_type=“all” in OSMnx](assets/pgda_0517.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![在OSMnx中观察到的马德里，西班牙，网络类型为“all”](assets/pgda_0517.png)'
- en: Figure 5-17\. Madrid, Spain, observed in `network_type="all"` in OSMnx
  id: totrans-213
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 5-17\. 在 OSMnx 中以 `network_type="all"` 观察到的马德里，西班牙。
- en: You can experiment by choosing the other `network_type` options and observing
    how the output changes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过选择其他 `network_type` 选项进行实验，并观察输出如何变化。
- en: Working with QuickOSM in QGIS
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 QGIS 中使用 QuickOSM
- en: You got acquainted with QGIS in [Chapter 3](ch03.xhtml#qgis_exploring_pyqgis_and_native_algori),
    and I want to point out briefly that you can also use QGIS to interact with OSM
    data. QuickOSM in QGIS works similarly within a GUI. Open QGIS and select Vector
    in the toolbar, and you will see a “Quick query” option for Quick OSM ([Figure 5-18](#integrating_osm_keyvalue_pairs_in_qgis)).
    QuickOSM allows you to run these quick queries in the console and display results
    directly on a canvas.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您在[第3章](ch03.xhtml#qgis_exploring_pyqgis_and_native_algori)中熟悉了QGIS，我想简要指出，您也可以使用QGIS与OSM数据进行交互。在QGIS中，QuickOSM与GUI类似工作。打开QGIS，选择工具栏中的矢量，您将看到“快速查询”选项用于QuickOSM（[图5-18](#integrating_osm_keyvalue_pairs_in_qgis)）。QuickOSM允许您在控制台中运行这些快速查询，并直接在画布上显示结果。
- en: Getting access to the level of data in GIS format within QGIS allows you to
    select a variety of amenities to include in a single map layer. This is an opportunity
    to explore `key:value` relationships outside of a Notebook as your data questions
    grow in scope.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 获取QGIS格式中的GIS数据访问权限，允许您选择多种设施并包含在单个地图图层中。当您的数据问题在范围上增长时，这是探索`key:value`关系的机会，可以超出笔记本之外。
- en: '![Integrating OSM key:value pairs in QGIS](assets/pgda_0518.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![在QGIS中集成OSM key:value对](assets/pgda_0518.png)'
- en: Figure 5-18\. Integrating OSM `key:value` pairs in QGIS
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5-18\. 在QGIS中集成OSM `key:value`对
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you explored OpenStreetMap and learned how to generate street
    networks across the world as well as to use functions to calculate travel times,
    circuity, and other important measures.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您探索了OpenStreetMap，并学习了如何生成全球街道网络，以及使用函数计算旅行时间、回路性和其他重要指标。
- en: OSM contains a wealth of open source geospatial data that you can access, model,
    project, visualize, and use to explore real-world street networks, points of interest,
    building locations, elevations, and more. I hope you will continue to play with
    it. Now I want to show you how to integrate this new skill with another tool,
    the ArcGIS Python API.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: OSM包含丰富的开源地理空间数据，您可以访问、建模、投影、可视化，并用于探索现实世界的街道网络、兴趣点、建筑位置、高程等。希望您继续使用它进行探索。现在我想向您展示如何将这种新技能与另一种工具，即ArcGIS
    Python API集成。
- en: '^([1](ch05.xhtml#ch01fn9-marker)) If you would like the details behind these
    calculations and a case study, see Boeing, G. 2017\. “OSMnx: New Methods for Acquiring,
    Constructing, Analyzing, and Visualizing Complex Street Networks.” *Computers,
    Environment and Urban Systems,* 65: 126–139\. [*https://doi.org/10.1016/j.compenvurbsys.2017.05.004*](https://doi.org/10.1016/j.compenvurbsys.2017.05.004).
    The user reference also provides a summary of the dictionary with attributes included.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '^([1](ch05.xhtml#ch01fn9-marker)) 如果您希望了解这些计算背后的详细信息和案例研究，请参阅Boeing，G. 2017\.
    “OSMnx: New Methods for Acquiring, Constructing, Analyzing, and Visualizing Complex
    Street Networks.” *Computers, Environment and Urban Systems,* 65: 126–139\. [*https://doi.org/10.1016/j.compenvurbsys.2017.05.004*](https://doi.org/10.1016/j.compenvurbsys.2017.05.004)。用户参考还提供了包含属性的字典摘要。'
