- en: Chapter 1\. Analysis with SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 数据分析与 SQL
- en: 'If you’re reading this book, you’re probably interested in data analysis and
    in using SQL to accomplish it. You may be experienced with data analysis but new
    to SQL, or perhaps you’re experienced with SQL but new to data analysis. Or you
    may be new to both topics entirely. Whatever your starting point, this chapter
    lays the groundwork for the topics covered in the rest of the book and makes sure
    we have a common vocabulary. I’ll start with a discussion of what data analysis
    is and then move on to a discussion of SQL: what it is, why it’s so popular, how
    it compares to other tools, and how it fits into data analysis. Then, since modern
    data analysis is so intertwined with the technologies that have enabled it, I’ll
    conclude with a discussion of different types of databases that you may encounter
    in your work, why they’re used, and what all of that means for the SQL you write.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书，你可能对数据分析感兴趣，并希望使用 SQL 来完成它。你可能对数据分析有经验，但对 SQL 比较新，或者你可能对 SQL 有经验，但对数据分析比较新。或者你可能对这两个主题都很陌生。无论你的起点如何，本章为本书其余部分涵盖的主题奠定基础，并确保我们有共同的词汇。我将首先讨论什么是数据分析，然后转向
    SQL 的讨论：它是什么，为什么如此流行，它与其他工具的比较，以及它如何融入数据分析中。然后，由于现代数据分析与使其成为可能的技术密切相关，我将结束本章讨论您在工作中可能遇到的不同类型的数据库，它们的用途以及这对您编写的
    SQL 的意义。
- en: What Is Data Analysis?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是数据分析？
- en: Collecting and storing data for analysis is a very human activity. Systems to
    track stores of grain, taxes, and the population go back thousands of years, and
    the [roots of statistics](https://oreil.ly/1W6Jf) date back hundreds of years.
    Related disciplines, including statistical process control, operations research,
    and cybernetics, exploded in the 20th century. Many different names are used to
    describe the discipline of data analysis, such as business intelligence (BI),
    analytics, data science, and decision science, and practitioners have a range
    of job titles. Data analysis is also done by marketers, product managers, business
    analysts, and a variety of other people. In this book, I’ll use the terms *data
    analyst* and *data scientist* interchangeably to mean the person working with
    SQL to understand data. I will refer to the software used to build reports and
    dashboards as *BI tools*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 收集和存储数据以进行分析是一项非常人性化的活动。用于跟踪粮食存储、税收和人口的系统可以追溯到数千年前，而统计学的根源可以追溯到数百年前。相关学科，包括统计过程控制、运营研究和控制论，在20世纪蓬勃发展。有许多不同的名称用来描述数据分析学科，如商业智能（BI）、分析学、数据科学和决策科学，从业者有各种各样的职称。营销人员、产品经理、业务分析师和其他各种人群也进行数据分析。在本书中，我将使用术语“数据分析师”和“数据科学家”互换地表示使用
    SQL 理解数据的人。我将称用于构建报告和仪表板的软件为“BI工具”。
- en: Data analysis in the contemporary sense was enabled by, and is intertwined with,
    the history of computing. Trends in both research and commercialization have shaped
    it, and the story includes a who’s who of researchers and major companies, which
    we’ll talk about in the section on SQL. Data analysis blends the power of computing
    with techniques from traditional statistics. Data analysis is part data discovery,
    part data interpretation, and part data communication. Very often the purpose
    of data analysis is to improve decision making, by humans and increasingly by
    machines through automation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当代意义上的数据分析得以实现，并且与计算历史交织在一起。研究和商业化的趋势共同塑造了它，并且其中包含了一些重要研究人员和大公司的故事，我们将在 SQL
    部分讨论这些内容。数据分析将计算的力量与传统统计学的技术融合在一起。数据分析既是数据发现的一部分，也是数据解释和数据沟通的一部分。数据分析的目的很常见是通过人类甚至是通过自动化逐渐增加的机器来改进决策制定。
- en: Sound methodology is critical, but analysis is about more than just producing
    the right number. It’s about curiosity, asking questions, and the “why” behind
    the numbers. It’s about patterns and anomalies, discovering and interpreting clues
    about how businesses and humans behave. Sometimes analysis is done on a data set
    gathered to answer a specific question, as in a scientific setting or an online
    experiment. Analysis is also done on data that is generated as a result of doing
    business, as in sales of a company’s products, or that is generated for analytics
    purposes, such as user interaction tracking on websites and mobile apps. This
    data has a wide range of possible applications, from troubleshooting to planning
    user interface (UI) improvements, but it often arrives in a format and volume
    such that the data needs processing before yielding answers. [Chapter 2](ch02.xhtml#preparing_data_for_analysis)
    will cover preparing data for analysis, and [Chapter 8](ch08.xhtml#creating_complex_data_sets_for_analysis)
    will discuss some of the ethical and privacy concerns with which all data practitioners
    should be familiar.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 健全的方法论至关重要，但分析不仅仅是生成正确的数字。它关乎好奇心、提问以及数字背后的“为什么”。它关乎模式和异常，发现和解释关于企业和人类行为的线索。有时分析是基于特定问题而收集的数据集进行的，如科学研究或在线实验。分析也可以针对因业务活动产生的数据，如公司产品的销售，或出于分析目的生成的数据，比如网站和移动应用的用户交互跟踪。这些数据具有广泛的应用可能性，从故障排除到规划用户界面（UI）改进，但通常以一种需要处理才能得出答案的格式和数量到达。[第2章](ch02.xhtml#preparing_data_for_analysis)将讨论数据分析准备工作，[第8章](ch08.xhtml#creating_complex_data_sets_for_analysis)将讨论所有数据从业者都应熟悉的一些伦理和隐私问题。
- en: 'It’s hard to think of an industry that hasn’t been touched by data analysis:
    manufacturing, retail, finance, health care, education, and even government have
    all been changed by it. Sports teams have employed data analysis since the early
    years of Billy Beane’s term as general manager of the Oakland Athletics, made
    famous by Michael Lewis’s book *Moneyball* (Norton). Data analysis is used in
    marketing, sales, logistics, product development, user experience design, support
    centers, human resources, and more. The combination of techniques, applications,
    and computing power has led to the explosion of related fields such as data engineering
    and data science.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析已经触及几乎所有行业：制造业、零售业、金融业、医疗保健、教育以及甚至政府都受其影响。体育队伍自从比利·比恩担任奥克兰运动家队总经理之初便采用数据分析，这在迈克尔·刘易斯的书籍《金球》（Norton）中得到了广泛传播。数据分析应用于市场营销、销售、物流、产品开发、用户体验设计、支持中心、人力资源等领域。技术、应用和计算能力的结合导致了数据工程和数据科学等相关领域的蓬勃发展。
- en: Data analysis is by definition done on historical data, and it’s important to
    remember that the past doesn’t necessarily predict the future. The world is dynamic,
    and organizations are dynamic as well—new products and processes are introduced,
    competitors rise and fall, sociopolitical climates change. Criticisms are leveled
    against data analysis for being backward looking. Though that characterization
    is true, I have seen organizations gain tremendous value from analyzing historical
    data. Mining historical data helps us understand the characteristics and behavior
    of customers, suppliers, and processes. Historical data can help us develop informed
    estimates and predicted ranges of outcomes, which will sometimes be wrong but
    quite often will be right. Past data can point out gaps, weaknesses, and opportunities.
    It allows organizations to optimize, save money, and reduce risk and fraud. It
    can also help organizations find opportunity, and it can become the building blocks
    of new products that delight customers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析本质上是基于历史数据进行的，重要的是要记住过去并不一定预测未来。世界在变化，组织也在变化——新产品和流程被引入，竞争对手崛起和衰落，社会政治气候变化。批评声音指责数据分析只是在回顾过去。尽管这种说法有一定道理，但我见过组织通过分析历史数据获得了巨大价值。挖掘历史数据有助于我们理解客户、供应商和流程的特征和行为。历史数据可以帮助我们制定明智的估计和预测结果的范围，有时会错误，但很多时候会正确。过去的数据可以指出缺口、弱点和机会。它让组织优化、节省资金，并降低风险和欺诈。它还可以帮助组织发现机会，并成为让客户满意的新产品的基石。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Organizations that don’t do some form of data analysis are few and far between
    these days, but there are still some holdouts. Why do some organizations not use
    data analysis? One argument is the cost-to-value ratio. Collecting, processing,
    and analyzing data takes work and some level of financial investment. Some organizations
    are too new, or they’re too haphazard. If there isn’t a consistent process, it’s
    hard to generate data that’s consistent enough to analyze. Finally, there are
    ethical considerations. Collecting or storing data about certain people in certain
    situations may be regulated or even banned. Data about children and health-care
    interventions is sensitive, for example, and there are extensive regulations around
    its collection. Even organizations that are otherwise data driven need to take
    care around customer privacy and to think hard about what data should be collected,
    why it is needed, and how long it should be stored. Regulations such as the European
    Union’s General Data Protection Regulation, or GDPR, and the California Consumer
    Privacy Act, or CCPA, have changed the way businesses think about consumer data.
    We’ll discuss these regulations in more depth in [Chapter 8](ch08.xhtml#creating_complex_data_sets_for_analysis).
    As data practitioners, we should always be thinking about the ethical implications
    of our work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，几乎没有不进行某种形式的数据分析的组织，但仍然有一些顽固的例外。为什么一些组织不使用数据分析？一个论点是成本与价值的比例。收集、处理和分析数据需要工作和一定程度的财务投入。有些组织可能太新，或者过于随意。如果没有一个一致的流程，很难生成足够一致的数据进行分析。最后，还有伦理考量。收集或存储某些人在某些情况下的数据可能受到监管甚至禁止。例如，有关儿童和医疗干预的数据是敏感的，围绕其收集有广泛的法规。即使是其他方面数据驱动的组织也需要注意客户隐私，并深思熟虑应收集哪些数据、为什么需要这些数据以及应该存储多长时间。欧盟的《通用数据保护条例》（GDPR）和加州消费者隐私法案（CCPA）等法规已改变了企业对消费者数据的看法。我们将在[第8章](ch08.xhtml#creating_complex_data_sets_for_analysis)中更深入地讨论这些法规。作为数据从业者，我们应始终思考我们工作的伦理意涵。
- en: When working with organizations, I like to tell people that data analysis is
    not a project that wraps up at a fixed date—it’s a way of life. Developing a data-informed
    mindset is a process, and reaping the rewards is a journey. Unknowns become known,
    difficult questions are chipped away at until there are answers, and the most
    critical information is embedded in dashboards that power tactical and strategic
    decisions. With this information, new and harder questions are asked, and then
    the process repeats.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我与组织合作时，我喜欢告诉人们，数据分析不是一个在固定日期结束的项目，而是一种生活方式。培养数据驱动的思维是一个过程，收获成果是一段旅程。未知变为已知，困难问题被逐步解答直至找到答案，最关键的信息被嵌入到支持战术和战略决策的仪表板中。有了这些信息，新的更难的问题被提出，然后这个过程重复。
- en: Data analysis is both accessible for those looking to get started and hard to
    master. The technology can be learned, particularly SQL. Many problems, such as
    optimizing marketing spend or detecting fraud, are familiar and translate across
    businesses. Every organization is different and every data set has quirks, so
    even familiar problems can pose new challenges. Communicating results is a skill.
    Learning to make good recommendations and becoming a trusted partner to an organization
    take time. In my experience, simple analysis presented persuasively has more impact
    than sophisticated analysis presented poorly. Successful data analysis also requires
    partnership. You can have great insights, but if there is no one to execute on
    them, you haven’t really made an impact. Even with all the technology, it’s still
    about people, and relationships matter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析对于想要开始学习的人来说很容易接触，但要掌握却很困难。技术可以学习，特别是SQL。许多问题，如优化营销支出或检测欺诈，是熟悉的并且可以跨行业转换。每个组织都是不同的，每个数据集都有其特点，所以即使是熟悉的问题也可能带来新的挑战。传达结果是一种技能。学会提出良好的建议，并成为组织的信任伙伴需要时间。根据我的经验，简单而有说服力的分析比复杂而表达不清的分析更具有影响力。成功的数据分析还需要伙伴关系。你可能有很好的见解，但如果没有人来执行，你并没有真正产生影响。即使拥有所有技术，关键仍然在于人，关系至关重要。
- en: Why SQL?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择SQL？
- en: This section describes what SQL is, the benefits of using it, how it compares
    to other languages commonly used for analysis, and finally how SQL fits into the
    analysis workflow.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了什么是SQL，使用它的好处，它与其他常用于分析的语言的比较，以及最后SQL如何融入分析工作流程。
- en: What Is SQL?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是SQL？
- en: SQL is the language used to communicate with databases. The acronym stands for
    Structured Query Language and is pronounced either like “sequel” or by saying
    each letter, as in “ess cue el.” This is only the first of many controversies
    and inconsistencies surrounding SQL that we’ll see, but most people will know
    what you mean regardless of how you say it. There is some debate as to whether
    SQL is or isn’t a programming language. It isn’t a general purpose language in
    the way that C or Python are. SQL without a database and data in tables is just
    a text file. SQL can’t build a website, but it is powerful for working with data
    in databases. On a practical level, what matters most is that SQL can help you
    get the job of data analysis done.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是与数据库通信的语言。这个缩写代表结构化查询语言，可以发音为“sequel”，也可以按每个字母发音，如“ess cue el”。这只是我们将看到的许多关于SQL的争议和不一致之一，但无论你如何发音，大多数人都会明白你的意思。关于SQL是否是编程语言存在一些争论。它不像C或Python那样是通用的编程语言。没有数据库和表中的数据，SQL只是一个文本文件。SQL不能建立网站，但它在与数据库中的数据工作时非常强大。在实际层面上，最重要的是SQL可以帮助你完成数据分析工作。
- en: IBM was the first to develop SQL databases, from the relational model invented
    by Edgar Codd in the 1960s. The relational model was a theoretical description
    for managing data using relationships. By creating the first databases, IBM helped
    to advance the theory, but it also had commercial considerations, as did Oracle,
    Microsoft, and every other company that has commercialized a database since. From
    the beginning, there has been tension between computer theory and commercial reality.
    SQL became an International Organization for Standards (ISO) standard in 1987
    and an American National Standards Institute (ANSI) standard in 1986\. Although
    all major databases start from these standards in their implementation of SQL,
    many have variations and functions that make life easier for the users of those
    databases. These come at the cost of making SQL more difficult to move between
    databases without some modifications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: IBM是第一个开发SQL数据库的公司，使用了1960年代Edgar Codd发明的关系模型。关系模型是使用关系管理数据的理论描述。通过创建第一个数据库，IBM帮助推动了这一理论，但它也考虑到了商业因素，正如Oracle、Microsoft和其他所有商业化数据库的公司一样。从一开始，计算机理论与商业现实之间存在紧张关系。SQL在1987年成为国际标准化组织（ISO）标准，1986年成为美国国家标准化组织（ANSI）标准。尽管所有主要数据库在实现SQL时都遵循这些标准，但许多数据库具有使用户更轻松的变体和功能。这些变体使得在不进行某些修改的情况下在数据库之间移动SQL更加困难。
- en: SQL is used to access, manipulate, and retrieve data from objects in a database.
    Databases can have one or more *schemas*, which provide the organization and structure
    and contain other objects. Within a schema, the objects most commonly used in
    data analysis are tables, views, and functions. Tables contain fields, which hold
    the data. Tables may have one or more *indexes*; an index is a special kind of
    data structure that allows data to be retrieved more efficiently. Indexes are
    usually defined by a database administrator. Views are essentially stored queries
    that can be referenced in the same way as a table. Functions allow commonly used
    sets of calculations or procedures to be stored and easily referenced in queries.
    They are usually created by a database administrator, or DBA. [Figure 1-1](#overview_of_database_organization_and_o)
    gives an overview of the organization of databases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: SQL用于访问、操作和检索数据库中对象的数据。数据库可以有一个或多个*模式*，提供组织和结构，并包含其他对象。在模式内，数据分析中最常用的对象是表、视图和函数。表包含字段，用于保存数据。表可以有一个或多个*索引*；索引是一种特殊的数据结构，允许更有效地检索数据。索引通常由数据库管理员定义。视图本质上是存储的查询，可以像表一样引用。函数允许常用的计算或过程集存储，并在查询中轻松引用。它们通常由数据库管理员或DBA创建。[图 1-1](#overview_of_database_organization_and_o)概述了数据库的组织。
- en: '![](Images/sfda_0101.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/sfda_0101.png)'
- en: Figure 1-1\. Overview of database organization and objects in a database
  id: totrans-19
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 数据库组织和数据库对象概述
- en: To communicate with databases, SQL has four sublanguages for tackling different
    jobs, and these are mostly standard across database types. Most people who work
    in data analysis don’t need to recall the names of these sublanguages on a daily
    basis, but they might come up in conversation with database administrators or
    data engineers, so I’ll briefly introduce them. The commands all work fluidly
    together, and some may coexist in the same SQL statement.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要   要与数据库通信，SQL有四种子语言用于处理不同的工作，这些在大多数数据库类型中都是标准的。大多数从事数据分析工作的人不需要每天记住这些子语言的名称，但在与数据库管理员或数据工程师的交流中可能会涉及到，因此我会简要介绍它们。这些命令可以在同一SQL语句中流畅地运行，有些可以同时存在于同一个SQL语句中。
- en: '*DQL*, or *data query language*, is what this book is mainly about. It’s used
    for *querying* data, which you can think of as using code to ask questions of
    a database. DQL commands include *SELECT*, which will be familiar to prior users
    of SQL, but the acronym DQL is not frequently used in my experience. SQL queries
    can be as short as a single line or span many tens of lines. SQL queries can access
    a single table (or view), can combine data from multiple tables through the use
    of joins, and can also query across multiple schemas in the same database. SQL
    queries generally cannot query across databases, but in some cases clever network
    settings or additional software can be used to retrieve data from multiple sources,
    even databases of different types. SQL queries are self-contained and, apart from
    tables, do not reference variables or outputs from previous steps not contained
    in the query, unlike scripting languages.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*DQL*，或者*数据查询语言*，是本书的主要内容。它用于查询数据，可以理解为使用代码向数据库提问。DQL命令包括*SELECT*，对于之前使用过SQL的用户来说应该很熟悉，但根据我的经验，DQL这个缩写并不经常使用。SQL查询可以只有一行，也可以跨越多行。SQL查询可以访问单个表（或视图），可以通过连接从多个表中组合数据，也可以在同一数据库中查询多个模式。SQL查询通常不能跨数据库查询，但在某些情况下，可以通过巧妙的网络设置或额外的软件从多个来源检索数据，甚至可以是不同类型的数据库。SQL查询是自包含的，除了表之外，不引用变量或前面步骤中的输出，不像脚本语言那样。'
- en: '*DDL*, or *data definition language*, is used to create and modify tables,
    views, users, and other objects in the database. It affects the structure but
    not the contents. There are three common commands: *CREATE*, *ALTER*, and *DROP*.
    *CREATE* is used to make new objects. *ALTER* changes the structure of an object,
    such as by adding a column to a table. *DROP* deletes the entire object and its
    structure. You might hear DBAs and data engineers talk about working with DDLs—this
    is really just shorthand for the files or pieces of code that do the creates,
    alters, or drops. An example of how DDL is used in the context of analysis is
    the code to create temporary tables.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*DDL*，或者*数据定义语言*，用于在数据库中创建和修改表、视图、用户和其他对象。它影响结构但不影响内容。有三个常见的命令：*CREATE*用于创建新对象，*ALTER*用于更改对象的结构，比如向表中添加列，*DROP*删除整个对象及其结构。你可能会听到DBA和数据工程师谈论与DDL相关的工作，这实际上是指用于创建、修改或删除的文件或代码片段。在分析环境中使用DDL的例子包括创建临时表的代码。'
- en: '*DCL*, or *data control language*, is used for access control. Commands include
    *GRANT* and *REVOKE*, which give permission and remove permission, respectively.
    In an analysis context, *GRANT* might be needed to allow a colleague to query
    a table you created. You might also encounter such a command when someone has
    told you a table exists in the database but you can’t see it—permissions might
    need to be *GRANT*ed to your user.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*DCL*，或者*数据控制语言*，用于访问控制。命令包括*GRANT*和*REVOKE*，分别用于授予权限和撤销权限。在分析环境中，*GRANT*可能需要用于允许同事查询你创建的表。当有人告诉你数据库中存在一个表但你看不到时，可能需要对你的用户授予权限。'
- en: '*DML*, or *data manipulation language*, is used to act on the data itself.
    The commands are *INSERT*, *UPDATE*, and *DELETE*. *INSERT* adds new records and
    is essentially the “load” step in extract, transform, load (ETL). *UPDATE* changes
    values in a field, and *DELETE* removes rows. You will encounter these commands
    if you have any kind of self-managed tables—temp tables, sandbox tables—or if
    you find yourself in the role of both owner and analyzer of the database.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*DML*，或者*数据操作语言*，用于操作数据本身。命令包括*INSERT*用于添加新记录，基本上是ETL中的“加载”步骤，*UPDATE*用于更改字段中的值，*DELETE*用于删除行。如果你有任何类型的自管理表（如临时表、沙箱表），或者扮演数据库所有者和分析者的角色，你将遇到这些命令。'
- en: These four sublanguages are present in all major databases. In this book, I’ll
    focus mainly on DQL. We will touch on a few DDL and DML commands in [Chapter 8](ch08.xhtml#creating_complex_data_sets_for_analysis),
    and you will also see some examples in the [GitHub site for the book](https://github.com/cathytanimura/sql_book),
    where they are used to create and populate the data used in examples. Thanks to
    this common set of commands, SQL code written for any database will look familiar
    to anyone used to working with SQL. However, reading SQL from another database
    may feel a bit like listening to someone who speaks the same language as you but
    comes from another part of the country or the world. The basic structure of the
    language is the same, but the slang is different, and some words have different
    meanings altogether. Variations in SQL from database to database are often termed
    *dialects*, and database users will reference Oracle SQL, MSSQL, or other dialects.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这四种子语言存在于所有主要的数据库中。在本书中，我主要将专注于DQL。我们将在[第8章](ch08.xhtml#creating_complex_data_sets_for_analysis)中涉及到一些DDL和DML命令，并且您也会在[书籍的GitHub网站](https://github.com/cathytanimura/sql_book)中看到一些示例，这些示例用于创建和填充示例中使用的数据。由于这些共同的命令集，任何数据库编写的SQL代码对于习惯于使用SQL的人来说都会很熟悉。然而，从另一个数据库中阅读SQL可能会感觉有点像听一个使用与您相同语言但来自其他国家或地区的人说话。语言的基本结构是相同的，但俚语不同，有些词甚至有完全不同的意义。数据库之间SQL的变化通常被称为*方言*，数据库用户会提到Oracle
    SQL、MSSQL或其他方言。
- en: Still, once you know SQL, you can work with different database types as long
    as you pay attention to details such as the handling of nulls, dates, and timestamps;
    the division of integers; and case sensitivity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦您掌握了SQL，只要注意到如空值、日期和时间戳的处理、整数的除法以及大小写敏感等细节，您就可以与不同类型的数据库一起工作。
- en: This book uses PostgreSQL, or Postgres, for the examples, though I will try
    to point out where the code would be meaningfully different in other types of
    databases. You can install [Postgres](https://www.postgresql.org/download) on
    a personal computer in order to follow along with the examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书以PostgreSQL或Postgres作为示例，尽管我会尝试指出在其他类型数据库中代码可能会有意义上的不同。您可以在个人计算机上安装[Postgres](https://www.postgresql.org/download)来跟随示例操作。
- en: Benefits of SQL
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL的好处
- en: There are many good reasons to use SQL for data analysis, from computing power
    to its ubiquity in data analysis tools and its flexibility.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQL进行数据分析有很多好处，从计算能力到数据分析工具中的普及性和其灵活性都是如此。
- en: Perhaps the best reason to use SQL is that much of the world’s data is already
    in databases. It’s likely your own organization has one or more databases. Even
    if data is not already in a database, loading it into one can be worthwhile in
    order to take advantage of the storage and computing advantages, especially when
    compared to alternatives such as spreadsheets. Computing power has exploded in
    recent years, and data warehouses and data infrastructure have evolved to take
    advantage of it. Some newer cloud databases allow massive amounts of data to be
    queried in memory, speeding things up further. The days of waiting minutes or
    hours for query results to return may be over, though analysts may just write
    more complex queries in response.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或许使用SQL的最佳理由是，世界上大部分的数据已经存储在数据库中。很可能您自己的组织已经有一个或多个数据库。即使数据尚未存储在数据库中，将其加载到数据库中也可能值得，以便利用存储和计算优势，尤其是与电子表格等替代方案相比。近年来，计算能力有了爆炸性增长，数据仓库和数据基础设施已经发展出来以利用这种增长。一些新的云数据库允许在内存中查询大量数据，进一步加快速度。等待查询结果返回几分钟或几小时的时代可能已经结束，尽管分析师可能会因此编写更复杂的查询。
- en: SQL is the de facto standard for interacting with databases and retrieving data
    from them. A wide range of popular software connects to databases with SQL, from
    spreadsheets to BI and visualization tools and coding languages such as Python
    and R (discussed in the next section). Due to the computing resources available,
    performing as much data manipulation and aggregation as possible in the database
    often has advantages downstream. We’ll discuss strategies for building complex
    data sets for downstream tools in depth in [Chapter 8](ch08.xhtml#creating_complex_data_sets_for_analysis).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是与数据库交互和从中检索数据的事实标准。许多流行软件都使用SQL连接数据库，从电子表格到商业智能和可视化工具以及编程语言如Python和R（在下一节讨论）。由于可用的计算资源，尽可能在数据库中执行尽可能多的数据操作和聚合通常有下游优势。我们将在[第8章](ch08.xhtml#creating_complex_data_sets_for_analysis)深入讨论构建复杂数据集以供下游工具使用的策略。
- en: The basic SQL building blocks can be combined in an endless number of ways.
    Starting with a relatively small number of building blocks—the syntax—SQL can
    accomplish a wide array of tasks. SQL can be developed iteratively, and it’s easy
    to review the results as you go. It may not be a full-fledged programming language,
    but it can do a lot, from transforming data to performing complex calculations
    and answering questions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的基本构建块可以以无数种方式组合起来。从相对较少的构建块——语法——开始，SQL就可以完成广泛的任务。SQL可以进行迭代开发，并且在进行过程中轻松审查结果。它可能不是一个完整的编程语言，但它可以做很多事情，从数据转换到复杂计算再到回答问题。
- en: Last, SQL is relatively easy to learn, with a finite amount of syntax. You can
    learn the basic keywords and structure quickly and then hone your craft over time
    working with varied data sets. Applications of SQL are virtually infinite, when
    you take into account the range of data sets in the world and the possible questions
    that can be asked of data. SQL is taught in many universities, and many people
    pick up some skills on the job. Even employees who don’t already have SQL skills
    can be trained, and the learning curve may be easier than that for other programming
    languages. This makes storing data for analysis in relational databases a logical
    choice for organizations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，SQL相对容易学习，具有有限的语法量。您可以快速学习基本关键字和结构，然后随着时间的推移在处理各种数据集时不断完善自己的技能。考虑到世界上各种数据集和可能提出的问题范围，SQL的应用几乎是无限的。SQL在许多大学教授，并且许多人在工作中掌握了一些技能。即使没有SQL技能的员工也可以接受培训，学习曲线可能比其他编程语言更容易。这使得将数据存储在关系数据库中进行分析成为组织的合乎逻辑的选择。
- en: SQL Versus R or Python
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL与R或Python的比较
- en: While SQL is a popular language for data analysis, it isn’t the only choice.
    R and Python are among the most popular of the other languages used for data analysis.
    R is a statistical and graphing language, while Python is a general-purpose programming
    language that has strengths in working with data. Both are open source, can be
    installed on a laptop, and have active communities developing packages, or extensions,
    that tackle various data manipulation and analysis tasks. Choosing between R and
    Python is beyond the scope of this book, but there are many discussions online
    about the relative advantages of each. Here I will consider them together as coding-language
    alternatives to SQL.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SQL是数据分析中流行的语言，但它并不是唯一的选择。R和Python是用于数据分析的其他流行语言之一。R是统计和绘图语言，而Python是一种通用编程语言，在处理数据方面有优势。两者都是开源的，可以安装在笔记本电脑上，并有活跃的社区开发处理各种数据操作和分析任务的包或扩展。在选择R和Python之间，超出了本书的范围，但在线上有许多关于它们各自优势的讨论。这里将它们作为SQL的编码语言替代品来考虑。
- en: 'One major difference between SQL and other coding languages is where the code
    runs and, therefore, how much computing power is available. SQL always runs on
    a database server, taking advantage of all its computing resources. For doing
    analysis, R and Python are usually run locally on your machine, so computing resources
    are capped by whatever is available locally. There are, of course, lots of exceptions:
    databases can run on laptops, and R and Python can be run on servers with more
    resources. When you are performing anything other than the simplest analysis on
    large data sets, pushing work onto a database server with more resources is a
    good option. Since databases are usually set up to continually receive new data,
    SQL is also a good choice when a report or dashboard needs to update periodically.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SQL与其他编程语言的一个主要区别在于代码运行的位置以及因此可用的计算资源。SQL始终在数据库服务器上运行，利用其所有的计算资源。对于分析，R和Python通常在您的本地机器上运行，因此计算资源受本地可用资源的限制。当在大数据集上执行除最简单分析以外的任何工作时，将工作推向具有更多资源的数据库服务器是一个不错的选择。由于数据库通常设置为持续接收新数据，所以当需要定期更新报告或仪表板时，SQL也是一个不错的选择。
- en: A second difference is in how data is stored and organized. Relational databases
    always organize data into rows and columns within tables, so SQL assumes this
    structure for every query. R and Python have a wider variety of ways to store
    data, including variables, lists, and dictionaries, among other options. These
    provide more flexibility, but at the cost of a steeper learning curve. To facilitate
    data analysis, R has data frames, which are similar to database tables and organize
    data into rows and columns. The pandas package makes DataFrames available in Python.
    Even when other options are available, the table structure remains valuable for
    analysis.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个区别在于数据的存储和组织方式。关系型数据库总是将数据组织成表内的行和列，因此对于每个查询，SQL都假设这种结构。R和Python有更多种存储数据的方式，包括变量、列表和字典等多种选项。这些提供了更大的灵活性，但学习曲线更陡峭。为了便于数据分析，R拥有数据框架（data
    frames），类似于数据库表格，将数据组织成行和列。而pandas包则使得数据框架在Python中得以使用。即使存在其他选项，表格结构仍然对于分析是宝贵的。
- en: Looping is another major difference between SQL and most other computer programming
    languages. A *loop* is an instruction or a set of instructions that repeats until
    a specified condition is met. SQL aggregations implicitly loop over the set of
    data, without any additional code. We will see later how the lack of ability to
    loop over fields can result in lengthy SQL statements when pivoting or unpivoting
    data. While deeper discussion is beyond the scope of this book, some vendors have
    created extensions to SQL, such as PL/SQL in Oracle and T-SQL in Microsoft SQL
    Server, that allow functionality such as looping.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是SQL与大多数其他计算机编程语言之间的另一个主要区别。*循环*是一种指令或一组指令，重复执行直到满足指定条件。SQL聚合隐式地循环处理数据集，无需额外的代码。稍后我们将看到，在数据透视或反透视时，无法循环处理字段可能导致SQL语句冗长。虽然深入讨论超出了本书的范围，一些供应商已经为SQL创建了扩展，例如Oracle的PL/SQL和Microsoft
    SQL Server的T-SQL，这些扩展允许功能，例如循环。
- en: A drawback of SQL is that your data must be in a database,^([1](ch01.xhtml#ch01fn1))
    whereas R and Python can import data from files stored locally or can access files
    stored on servers or websites. This is convenient for many one-off projects. A
    database can be installed on a laptop, but this does add an extra layer of overhead.
    In the other direction, packages such as dbplyr for R and SQLAlchemy for Python
    allow programs written in those languages to connect to databases, execute SQL
    queries, and use the results in further processing steps. In this sense, R or
    Python can be complementary to SQL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SQL的一个缺点是你的数据必须在数据库中^([1](ch01.xhtml#ch01fn1))，而R和Python可以从本地存储的文件导入数据，也可以访问存储在服务器或网站上的文件。这对于许多临时项目是方便的。数据库可以安装在笔记本电脑上，但这确实增加了额外的开销。另一方面，例如R的dbplyr包和Python的SQLAlchemy包允许使用这些语言编写的程序连接到数据库，执行SQL查询，并在进一步处理步骤中使用结果。在这方面，R或Python可以与SQL互补。
- en: R and Python both have sophisticated statistical functions that are either built
    in or available in packages. Although SQL has, for example, functions to calculate
    average and standard deviation, calculations of p-values and statistical significance
    that are needed in experiment analysis (discussed in [Chapter 7](ch07.xhtml#experiment_analysis))
    cannot be performed with SQL alone. In addition to sophisticated statistics, machine
    learning is another area that is better tackled with one of these other coding
    languages.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: R和Python都具有复杂的统计函数，这些函数可以是内置的或者在包中可用。尽管SQL有例如计算平均值和标准偏差的函数，但是在实验分析中需要的p值和统计显著性的计算（详见[第7章](ch07.xhtml#experiment_analysis)）无法仅使用SQL完成。除了复杂的统计学外，机器学习是另一个最好使用这些其他编程语言来处理的领域。
- en: 'When deciding whether to use SQL, R, or Python for an analysis, consider:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定是否使用SQL、R或Python进行分析时，请考虑：
- en: Where is the data located—in a database, a file, a website?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据位于何处——是在数据库、文件还是网站中？
- en: What is the volume of data?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据量有多大？
- en: Where is the data going—into a report, a visualization, a statistical analysis?
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据将用于何处——报告、可视化、统计分析？
- en: Will it need to be updated or refreshed with new data? How often?
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要使用新数据进行更新或刷新？更新频率是多少？
- en: What does your team or organization use, and how important is it to conform
    to existing standards?
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的团队或组织使用什么，以及符合现有标准有多重要？
- en: There is no shortage of debate around which languages and tools are best for
    doing data analysis or data science. As with many things, there’s often more than
    one way to accomplish an analysis. Programming languages evolve and change in
    popularity, and we’re lucky to live and work in a time with so many good choices.
    SQL has been around for a long time and will likely remain popular for years to
    come. The ultimate goal is to use the best available tool for the job. This book
    will help you get the most out of SQL for data analysis, regardless of what else
    is in your toolkit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于哪种语言和工具最适合进行数据分析或数据科学存在很多争论。与许多事物一样，通常有多种方法可以完成分析。编程语言在流行度上不断演变和变化，我们很幸运生活和工作在一个有这么多好选择的时代。SQL已经存在很长时间，可能在未来几年仍然流行。最终目标是使用最适合工作的最佳工具。本书将帮助您充分利用SQL进行数据分析，无论您的工具包中还有什么其他工具。
- en: SQL as Part of the Data Analysis Workflow
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL作为数据分析工作流的一部分
- en: Now that I’ve explained what SQL is, discussed some of its benefits, and compared
    it to other languages, we’ll turn to a discussion of where SQL fits in the data
    analysis process. Analysis work always starts with a question, which may be about
    how many new customers have been acquired, how sales are trending, or why some
    users stick around for a long time while others try a service and never return.
    Once the question is framed, we consider where the data originated, where the
    data is stored, the analysis plan, and how the results will be presented to the
    audience. [Figure 1-2](#steps_in_the_data_analysis_process) shows the steps in
    the process. Queries and analysis are the focus of this book, though I will discuss
    the other steps briefly in order to put the queries and analysis stage into a
    broader context.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经解释了SQL是什么，讨论了它的一些好处，并将其与其他语言进行了比较，我们将转向讨论SQL在数据分析过程中的位置。分析工作总是从一个问题开始，可能是关于新客户数量、销售趋势如何，或者为什么有些用户长时间停留，而其他人试用服务后就不再返回。一旦问题被确定，我们考虑数据的来源、数据存储位置、分析计划以及如何向观众呈现结果。[图1-2](#steps_in_the_data_analysis_process)展示了这个过程中的步骤。本书的重点是查询和分析，尽管我会简要讨论其他步骤，以便将查询和分析阶段放入更广泛的背景中。
- en: '![](Images/sfda_0102.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/sfda_0102.png)'
- en: Figure 1-2\. Steps in the data analysis process
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. 数据分析过程中的步骤
- en: First, data is generated by *source systems*, a term that includes any human
    or machine process that generates data of interest. Data can be generated by people
    by hand, such as when someone fills out a form or takes notes during a doctor’s
    visit. Data can also be machine generated, such as when an application database
    records a purchase, an event-streaming system records a website click, or a marketing
    management tool records an email open. Source systems can generate many different
    types and formats of data, and [Chapter 2](ch02.xhtml#preparing_data_for_analysis)
    will discuss them, and how the type of source may impact the analysis, in more
    detail.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数据由*源系统*生成，这个术语包括任何生成感兴趣数据的人或机器过程。数据可以由人工生成，例如某人填写表格或在医生就诊时记录笔记。数据也可以是机器生成的，例如应用程序数据库记录购买、事件流系统记录网站点击，或者营销管理工具记录电子邮件打开。源系统可以生成多种不同类型和格式的数据，[第二章](ch02.xhtml#preparing_data_for_analysis)将更详细地讨论它们以及源类型可能如何影响分析。
- en: The second step is moving the data and storing it in a database for analysis.
    I will use the terms *data warehouse*, which is a database that consolidates data
    from across an organization into a central repository, and *data store*, which
    refers to any type of data storage system that can be queried. Other terms you
    might come across are *data mart*, which is typically a subset of a data warehouse,
    or a more narrowly focused data warehouse; and *data lake*, a term that can mean
    either that data resides in a file storage system or that it is stored in a database
    but without the degree of data transformation that is common in data warehouses.
    Data warehouses range from small and simple to huge and expensive. A database
    running on a laptop will be sufficient for you to follow along with the examples
    in this book. What matters is having the data you need to perform an analysis
    together in one place.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是将数据移动并存储到数据库进行分析。我将使用术语*数据仓库*，这是一个将组织中各处的数据整合到一个中央库中的数据库，以及*数据存储*，它是指可以查询的任何类型的数据存储系统。您可能会遇到的其他术语包括*数据集市*，它通常是数据仓库的一个子集，或者更专注的数据仓库；以及*数据湖*，一个术语，它可以意味着数据驻留在文件存储系统中，或者它存储在数据库中，但没有数据仓库中常见的数据转换程度。数据仓库可以从简单小型到庞大昂贵。在本书的示例中，运行在笔记本电脑上的数据库就足够了。重要的是将您需要进行分析的数据集中在一个地方。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Usually a person or team is responsible for getting data into the data warehouse.
    This process is called *ETL*, or extract, transform, load. Extract pulls the data
    from the source system. Transform optionally changes the structure of the data,
    performs data quality cleaning, or aggregates the data. Load puts the data into
    the database. This process can also be called *ELT*, for extract, load, transform—the
    difference being that, rather than transformations being done before data is loaded,
    all the data is loaded and then transformations are performed, usually using SQL.
    You might also hear the terms *source* and *target* in the context of ETL. The
    source is where the data comes from, and the target is the destination, i.e.,
    the database and the tables within it. Even when SQL is used to do the transforming,
    another language such as Python or Java is used to glue the steps together, coordinate
    scheduling, and raise alerts when something goes wrong. There are a number of
    commercial products as well as open source tools available, so teams don’t have
    to create an ETL system entirely from scratch.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常由个人或团队负责将数据加载到数据仓库中。这个过程称为*ETL*，即抽取、转换、加载。抽取从源系统中提取数据。转换可选地更改数据结构，执行数据质量清洗或聚合数据。加载将数据放入数据库中。这个过程也可以称为*ELT*，即抽取、加载、转换——区别在于，在加载数据之后才执行转换，通常使用SQL。在ETL的上下文中，您可能还会听到*源*和*目标*这些术语。源是数据来源，目标是目的地，即数据库及其中的表格。即使使用SQL进行转换，也会使用其他语言如Python或Java来将步骤粘合在一起，协调调度，并在出现问题时发出警报。市场上有许多商业产品以及开源工具可用，因此团队不必完全从头开始创建ETL系统。
- en: Once the data is in a database, the next step is performing queries and analysis.
    In this step, SQL is applied to explore, profile, clean, shape, and analyze the
    data. [Figure 1-3](#stages_within_the_queries_and_analysis) shows the general
    flow of the process. Exploring the data involves becoming familiar with the topic,
    where the data was generated, and the database tables in which it is stored. Profiling
    involves checking the unique values and distribution of records in the data set.
    Cleaning involves fixing incorrect or incomplete data, adding categorization and
    flags, and handling null values. Shaping is the process of arranging the data
    into the rows and columns needed in the result set. Finally, analyzing the data
    involves reviewing the output for trends, conclusions, and insights. Although
    this process is shown as linear, in practice it is often cyclical—for example,
    when shaping or analysis reveals data that should be cleaned.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据进入数据库，下一步是执行查询和分析。在这一步骤中，应用SQL来探索、分析、清洗、整理和分析数据。[图 1-3](#stages_within_the_queries_and_analysis)展示了这个过程的一般流程。探索数据包括熟悉主题、数据生成地点以及存储数据的数据库表格。分析包括检查数据集中的唯一值和记录分布。清洗包括修复不正确或不完整的数据，添加分类和标志，处理空值。整理是将数据排列成结果集中所需的行和列的过程。最后，分析数据涉及审查输出以发现趋势、结论和洞察。虽然这个过程被展示为线性的，但在实践中，它往往是循环的——例如，当整理或分析显示需要清洗的数据时。
- en: '![](Images/sfda_0103.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/sfda_0103.png)'
- en: Figure 1-3\. Stages within the queries and analysis step of the analysis workflow
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. 分析工作流程中查询和分析步骤内的阶段
- en: Presentation of the data into a final output form is the last step in the overall
    workflow. Businesspeople won’t appreciate receiving a file of SQL code; they expect
    you to present graphs, charts, and insights. Communication is key to having an
    impact with analysis, and for that we need a way to share the results with other
    people. At other times, you may need to apply more sophisticated statistical analysis
    than is possible in SQL, or you may want to feed the data into a machine learning
    (ML) algorithm. Fortunately, most reporting and visualization tools have SQL connectors
    that allow you to pull in data from entire tables or prewritten SQL queries. Statistical
    software and languages commonly used for ML also usually have SQL connectors.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据呈现为最终输出形式是整体工作流程的最后一步。商业人士不会希望收到一份 SQL 代码的文件；他们期待你呈现图表、图形和见解。沟通是通过分析产生影响的关键因素，为此我们需要一种与他人共享结果的方式。有时候，你可能需要应用比
    SQL 更复杂的统计分析，或者想将数据输入到机器学习（ML）算法中。幸运的是，大多数报告和可视化工具都有 SQL 连接器，可以让你从整个表或预先编写的 SQL
    查询中提取数据。通常用于 ML 的统计软件和语言也通常具有 SQL 连接器。
- en: Analysis workflows encompass a number of steps and often include multiple tools
    and technologies. SQL queries and analysis are at the heart of many analyses and
    are what we will focus on in the following chapters. [Chapter 2](ch02.xhtml#preparing_data_for_analysis)
    will discuss types of source systems and the types of data they generate. The
    rest of this chapter will take a look at the types of databases you are likely
    to encounter in your analysis journey.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 分析工作流程包括多个步骤，并且通常涉及多种工具和技术。SQL 查询和分析是许多分析的核心，也是我们将在接下来的章节中重点讨论的内容。[第二章](ch02.xhtml#preparing_data_for_analysis)将讨论源系统的类型及其生成的数据类型。本章的其余部分将介绍你在分析过程中可能会遇到的数据库类型。
- en: Database Types and How to Work with Them
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库类型及其处理方式
- en: If you’re working with SQL, you’ll be working with databases. There is a range
    of database types—open source to proprietary, row-store to column-store. There
    are on-premises databases and cloud databases, as well as hybrid databases, where
    an organization runs the database software on a cloud vendor’s infrastructure.
    There are also a number of data stores that aren’t databases at all but can be
    queried with SQL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 SQL，那么你就在处理数据库。数据库类型各不相同——从开源到专有，从行存储到列存储。有本地数据库和云数据库，还有混合数据库，组织在云供应商基础设施上运行数据库软件。还有许多根本不是数据库但可以用
    SQL 查询的数据存储。
- en: Databases are not all created equal; each database type has its strengths and
    weaknesses when it comes to analysis work. Unlike tools used in other parts of
    the analysis workflow, you may not have much say in which database technology
    is used in your organization. Knowing the ins and outs of the database you have
    will help you work more efficiently and take advantage of any special SQL functions
    it offers. Familiarity with other types of databases will help you if you find
    yourself working on a project to build or migrate to a new data warehouse. You
    may want to install a database on your laptop for personal, small-scale projects,
    or get an instance of a cloud warehouse for similar reasons.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的数据库各有千秋；在进行分析工作时，每种数据库类型都有其优势和劣势。与分析工作流程的其他部分使用的工具不同，你可能对组织中使用的数据库技术没有太多发言权。了解你所使用的数据库的细节将帮助你更高效地工作，并利用它提供的任何特殊
    SQL 函数。熟悉其他类型的数据库将有助于你在进行构建或迁移数据仓库的项目时使用。你可能希望在个人、小规模项目中在笔记本电脑上安装数据库，或者出于类似原因获取云数据仓库的实例。
- en: Databases and data stores have been a dynamic area of technology development
    since they were introduced. A few trends since the turn of the 21st century have
    driven the technology in ways that are really exciting for data practitioners
    today. First, data volumes have increased incredibly with the internet, mobile
    devices, and the Internet of Things (IoT). In 2020 [IDC predicted](https://oreil.ly/oEWDD)
    that the amount of data stored globally will grow to 175 zettabytes by 2025\.
    This scale of data is hard to even think about, and not all of it will be stored
    in databases for analysis. It’s not uncommon for companies to have data in the
    scale of terabytes and petabytes these days, a scale that would have been impossible
    to process with the technology of the 1990s and earlier. Second, decreases in
    data storage and computing costs, along with the advent of the cloud, have made
    it cheaper and easier for organizations to collect and store these massive amounts
    of data. Computer memory has gotten cheaper, meaning that large amounts of data
    can be loaded into memory, calculations performed, and results returned, all without
    reading and writing to disk, greatly increasing the speed. Third, distributed
    computing has allowed the breaking up of workloads across many machines. This
    allows a large and tunable amount of computing to be pointed to complex data tasks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自引入以来，数据库和数据存储一直是技术发展的一个动态领域。自21世纪初以来，几项趋势驱动了技术的发展，这些趋势对今天的数据从业者来说真是令人兴奋。首先，随着互联网、移动设备和物联网（IoT）的发展，数据量急剧增加。2020年，[IDC预测](https://oreil.ly/oEWDD)，到2025年，全球存储的数据量将增长到175ZB。这种数据规模难以想象，并且并非所有数据都将存储在用于分析的数据库中。如今，公司拥有的数据规模达到了TB和PB级，这在20世纪90年代及更早时期的技术下是不可能处理的。其次，数据存储和计算成本的降低，以及云计算的出现，使组织更便宜、更容易地收集和存储这些海量数据。计算机内存价格下降，意味着大量数据可以加载到内存中，执行计算，并返回结果，而无需读写磁盘，大大提高了速度。第三，分布式计算使得能够将工作负载分散到许多机器上。这使得大量可调整的计算能力能够用于复杂的数据任务中。
- en: 'Databases and data stores have combined these technological trends in a number
    of different ways in order to optimize for particular types of tasks. There are
    two broad categories of databases that are relevant for analysis work: row-store
    and column-store. In the next section I’ll introduce them, discuss what makes
    them similar to and different from each other, and talk about what all of this
    means as far as doing analysis with data stored in them. Finally, I’ll introduce
    some additional types of data infrastructure beyond databases that you may encounter.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库和数据存储以多种不同方式结合这些技术趋势，以优化特定类型的任务。对于分析工作，有两种广泛的数据库类别是相关的：行存储和列存储。在下一节中，我将介绍它们，讨论它们的相似性和不同之处，以及在这些数据库中存储数据时的分析意义。最后，我将介绍一些超出数据库的其他类型的数据基础设施，您可能会遇到。
- en: Row-Store Databases
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行存储数据库
- en: '*Row-store* databases—also called *transactional* databases—are designed to
    be efficient at processing transactions: *INSERT*s, *UPDATE*s, and *DELETE*s.
    Popular open source row-store databases include MySQL and Postgres. On the commercial
    side, Microsoft SQL Server, Oracle, and Teradata are widely used. Although they’re
    not really optimized for analysis, for a number of years row-store databases were
    the only option for companies building data warehouses. Through careful tuning
    and schema design, these databases can be used for analytics. They are also attractive
    due to the low cost of open source options and because they’re familiar to the
    database administrators who maintain them. Many organizations replicate their
    production database in the same technology as a first step toward building out
    data infrastructure. For all of these reasons, data analysts and data scientists
    are likely to work with data in a row-store database at some point in their career.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*行存储*数据库，也称为*事务性*数据库，旨在高效处理事务：*插入*、*更新*和*删除*。流行的开源行存储数据库包括MySQL和Postgres。在商业领域，Microsoft
    SQL Server、Oracle和Teradata被广泛使用。虽然它们并非专为分析而优化，但多年来，行存储数据库是建立数据仓库的唯一选择。通过精心调整和模式设计，这些数据库可以用于分析。由于开源选项成本低廉，并且熟悉维护的数据库管理员，它们也很有吸引力。许多组织在数据基础设施建设的第一步中，将生产数据库复制到相同的技术中。因此，数据分析师和数据科学家在职业生涯中可能会与行存储数据库中的数据打交道。'
- en: We think of a table as rows and columns, but data has to be serialized for storage.
    A query searches a hard disk for the needed data. Hard disks are organized in
    a series of blocks of a fixed size. Scanning the hard disk takes both time and
    resources, so minimizing the amount of the disk that needs to be scanned to return
    query results is important. Row-store databases approach this problem by serializing
    data in a row. [Figure 1-4](#row_wise_storageem_dasheach_row_is_stor) shows an
    example of row-wise data storage. When querying, the whole row is read into memory.
    This approach is fast when making row-wise updates, but it’s slower when making
    calculations across many rows if only a few columns are needed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将表格看作行和列，但是数据必须进行序列化以便存储。查询会在硬盘上搜索所需数据。硬盘被组织成一系列固定大小的块。扫描硬盘既耗时又耗资源，因此尽量减少需要扫描的磁盘量以返回查询结果至关重要。行存储数据库通过将数据按行序列化来解决这个问题。[图 1-4](#row_wise_storageem_dasheach_row_is_stor)展示了行存储数据的示例。在查询时，整行数据被读入内存。这种方法在进行行级更新时速度快，但如果需要跨多行进行计算且只需要少数列，则速度较慢。
- en: '![](Images/sfda_0104.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/sfda_0104.png)'
- en: Figure 1-4\. Row-wise storage, in which each row is stored together on disk
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. 行存储，即将每行数据一起存储在磁盘上
- en: To reduce the width of tables, row-store databases are usually modeled in *third
    normal form*, which is a database design approach that seeks to store each piece
    of information only once, to avoid duplication and inconsistencies. This is efficient
    for transaction processing but often leads to a large number of tables in the
    database, each with only a few columns. To analyze such data, many joins may be
    required, and it can be difficult for nondevelopers to understand how all of the
    tables relate to each other and where a particular piece of data is stored. When
    doing analysis, the goal is usually denormalization, or getting all the data together
    in one place.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少表格的宽度，行存储数据库通常按照*第三范式*进行建模，这是一种数据库设计方法，旨在仅存储每个信息片段一次，以避免重复和不一致性。这对事务处理非常高效，但通常会导致数据库中存在大量表格，每个表格只有少数列。分析这样的数据通常需要进行多次连接，非开发人员可能很难理解所有表格之间的关系以及特定数据存储在哪里。在进行分析时，通常的目标是反范式化，或者将所有数据聚集在一个地方。
- en: Tables typically have a *primary key* that enforces uniqueness—in other words,
    it prevents the database from creating more than one record for the same thing.
    Tables will often have an `id` column that is an auto-incrementing integer, where
    each new record gets the next integer after the last one inserted, or an alphanumeric
    value that is created by a primary key generator. There should also be a set of
    columns that together make the row unique; this combination of fields is called
    a *composite key*, or sometimes a *business key*. For example, in a table of people,
    the columns `first_name`, `last_name`, and `birthdate` together might make the
    row unique. `Social_security_id` would also be a unique identifier, in addition
    to the table’s `person_id` column.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 表格通常有一个*主键*来确保唯一性——换句话说，它防止数据库为相同内容创建多条记录。表格通常会有一个`id`列，它是一个自增整数，每次插入新记录时都会获得上次插入记录之后的下一个整数，或者是由主键生成器创建的字母数字值。还应该有一组列，这些列一起使得行数据唯一；这些字段的组合被称为*复合键*，有时也称为*业务键*。例如，在一个人员表中，`first_name`、`last_name`和`birthdate`一起可能使得行数据唯一。`Social_security_id`也可以是唯一标识符，除了表的`person_id`列。
- en: 'Tables also optionally have indexes that make looking up specific records faster
    and make joins involving these columns faster. Indexes store the values in the
    field or fields indexed as single pieces of data along with a row pointer, and
    since the indexes are smaller than the whole table, they are faster to scan. Usually
    the primary key is indexed, but other fields or groups of fields can be indexed
    as well. When working with row-store databases, it’s useful to get to know which
    fields in the tables you use have indexes. Common joins can be sped up by adding
    indexes, so it’s worth investigating whether analysis queries take a long time
    to run. Indexes don’t come for free: they take up storage space, and they slow
    down loading, as new values need to be added with each insert. DBAs may not index
    everything that might be useful for analysis. Beyond reporting, analysis work
    may not be routine enough to bother with optimizing indexes either. Exploratory
    and complex queries often use complex join patterns, and we may throw out one
    approach when we figure out a new way to solve a problem.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 表还可以选择性地添加索引，以加快查找特定记录和涉及这些列的连接速度。索引将字段的值以单个数据片段的形式存储，同时存储行指针。由于索引比整个表小，因此扫描速度更快。通常会对主键建立索引，但也可以对其他字段或字段组建立索引。在使用行存储数据库时，了解所使用的表中哪些字段有索引非常有用。通过添加索引可以加快常见连接操作的速度，因此值得调查分析查询是否运行时间过长。索引并非免费：它们占用存储空间，并减慢加载速度，因为每次插入新值都需要更新。数据库管理员可能不会为所有可能有助于分析的内容建立索引。除了报告外，分析工作可能不足以优化索引。在解决问题的新方法时，通常会放弃一种方法。
- en: '[Star schema modeling](https://oreil.ly/5WiSp) was developed in part to make
    row-store databases more friendly to analytic workloads. The foundations are laid
    out in the book *The Data Warehouse Toolkit*,^([2](ch01.xhtml#ch01fn2)) which
    advocates modeling the data as a series of fact and dimension tables. Fact tables
    represent events, such as retail store transactions. Dimensions hold descriptors
    such as customer name and product type. Since data doesn’t always fit neatly into
    fact and dimension categories, there’s an extension called the [snowflake schema](https://oreil.ly/rpj4N)
    in which some dimensions have dimensions of their own.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[星型模式建模](https://oreil.ly/5WiSp)部分是为了使行存储数据库更适合分析工作负载而开发的。其基础在《数据仓库工具包》一书中详细阐述，推崇将数据建模为一系列事实表和维度表。事实表代表事件，如零售店交易。维度包含描述符，如客户姓名和产品类型。由于数据并不总是完全适合事实和维度的分类，因此有一个名为[snowflake模式](https://oreil.ly/rpj4N)的扩展，其中一些维度具有自己的维度。'
- en: Column-Store Databases
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列存储数据库
- en: '*Column-store* databases took off in the early part of the 21st century, though
    their theoretical history goes back as far as that of row-store databases. Column-store
    databases store the values of a column together, rather than storing the values
    of a row together. This design is optimized for queries that read many records
    but not necessarily all the columns. Popular column-store databases include Amazon
    Redshift, Snowflake, and Vertica.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*列存储*数据库在21世纪初蓬勃发展，尽管它们的理论历史可以追溯到行存储数据库的历史。列存储数据库将一列的值存储在一起，而不是将一行的值存储在一起。这种设计优化了读取多条记录但不一定读取所有列的查询。流行的列存储数据库包括Amazon
    Redshift、Snowflake和Vertica。'
- en: Column-store databases are efficient at storing large volumes of data thanks
    to compression. Missing values and repeating values can be represented by very
    small marker values instead of the full value. For example, rather than storing
    “United Kingdom” thousands or millions of times, a column-store database will
    store a surrogate value that takes up very little storage space, along with a
    lookup that stores the full “United Kingdom” value. Column-store databases also
    compress data by taking advantage of repetitions of values in sorted data. For
    example, the database can store the fact that the marker value for “United Kingdom”
    is repeated 100 times, and this takes up even less space than storing that marker
    100 times.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于压缩技术，列存储数据库在存储大容量数据方面非常高效。缺失值和重复值可以用非常小的标记值表示，而不是完整的值。例如，列存储数据库不会将“United
    Kingdom”存储成成千上万次，而是存储一个占用极小空间的代理值，同时存储完整的“United Kingdom”值的查找。列存储数据库还通过利用排序数据中值的重复性来压缩数据。例如，数据库可以存储“United
    Kingdom”标记值重复100次的事实，这比重复存储该标记100次还要节省空间。
- en: Column-store databases do not enforce primary keys and do not have indexes.
    Repeated values are not problematic, thanks to compression. As a result, schemas
    can be tailored for analysis queries, with all the data together in one place
    as opposed to being in multiple tables that need to be joined. Duplicate data
    can easily sneak in without primary keys, however, so understanding the source
    of the data and quality checking are important.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 列存储数据库不强制执行主键，也没有索引。重复值由于压缩而不成问题。因此，模式可以针对分析查询进行定制，所有数据都在一个地方，而不是分布在多个需要联接的表中。但是，没有主键可能会导致重复数据轻易混入，因此了解数据来源和质量检查非常重要。
- en: Updates and deletes are expensive in most column-store databases, since data
    for a single row is distributed rather than stored together. For very large tables,
    a write-only policy may exist, so we also need to know something about how the
    data is generated in order to figure out which records to use. The data can also
    be slower to read, as it needs to be uncompressed before calculations are applied.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数列存储数据库中更新和删除操作成本很高，因为单个行的数据是分布式存储而不是存储在一起的。对于非常大的表，可能存在只写策略，因此我们还需要了解一些关于数据生成的信息，以便确定要使用的记录。数据读取速度也可能较慢，因为在应用计算之前需要对其进行解压缩。
- en: Column-store databases are generally the gold standard for fast analysis work.
    They use standard SQL (with some vendor-specific variations), and in many ways
    working with them is no different from working with a row-store database in terms
    of the queries you write. The size of the data matters, as do the computing and
    storage resources that have been allocated to the database. I have seen aggregations
    run across millions and billions of records in seconds. This does wonders for
    productivity.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 列存储数据库通常是快速分析工作的黄金标准。它们使用标准的SQL（带有一些特定供应商的变化），在写查询时在很多方面与行存储数据库的工作没有什么不同。数据的大小很重要，以及为数据库分配的计算和存储资源。我见过在几秒钟内跨百万甚至十亿条记录运行的聚合操作。这对生产力大有裨益。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: There are a few tricks to be aware of. Since certain types of compression rely
    on sorting, knowing the fields that the table is sorted on and using them to filter
    queries improves performance. Joining tables can be slow if both tables are large.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技巧需要注意。由于某些类型的压缩依赖于排序，了解表上进行排序的字段，并将它们用于过滤查询，可以提高性能。如果两个表都很大，则联接表可能很慢。
- en: At the end of the day, some databases will be easier or faster to work with,
    but there is nothing inherent in the type of database that will prevent you from
    performing any of the analysis in this book. As with all things, using a tool
    that’s properly powerful for the volume of data and complexity of the task will
    allow you to focus on creating meaningful analysis.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，某些数据库可能更容易或更快速地进行操作，但数据库类型本身不会阻止您执行本书中的任何分析。与所有工具一样，使用适合数据量和任务复杂性的工具将使您能够专注于创建有意义的分析。
- en: Other Types of Data Infrastructure
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他类型的数据基础设施
- en: Databases aren’t the only way data can be stored, and there is an increasing
    variety of options for storing data needed for analysis and powering applications.
    File storage systems, sometimes called *data lakes*, are probably the main alternative
    to database warehouses. NoSQL databases and search-based data stores are alternative
    data storage systems that offer low latency for application development and searching
    log files. Although not typically part of the analysis process, they are increasingly
    part of organizations’ data infrastructure, so I will introduce them briefly in
    this section as well. One interesting trend to point out is that although these
    newer types of infrastructure at first aimed to break away from the confines of
    SQL databases, many have ended up implementing some kind of SQL interface to query
    the data.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库并非存储数据的唯一方式，现在有越来越多的选择，可以存储分析和支持应用程序所需的数据。文件存储系统，有时被称为*数据湖*，可能是数据库仓库的主要替代方案。NoSQL数据库和基于搜索的数据存储是提供低延迟应用程序开发和搜索日志文件的替代数据存储系统。虽然它们通常不是分析过程的一部分，但它们越来越成为组织数据基础设施的一部分，因此我也会在本节简要介绍它们。一个有趣的趋势值得指出的是，尽管这些新类型的基础设施最初旨在摆脱SQL数据库的限制，但许多都最终实现了某种SQL接口来查询数据。
- en: 'Hadoop, also known as HDFS (for “Hadoop distributed filesystem”), is an open
    source file storage system that takes advantage of the ever-falling cost of data
    storage and computing power, as well as distributed systems. Files are split into
    blocks, and Hadoop distributes them across a filesystem that is stored on nodes,
    or computers, in a cluster. The code to run operations is sent to the nodes, and
    they process the data in parallel. Hadoop’s big breakthrough was to allow huge
    amounts of data to be stored cheaply. Many large internet companies, with massive
    amounts of often unstructured data, found this to be an advantage over the cost
    and storage limitations of traditional databases. Hadoop’s early versions had
    two major downsides: specialized coding skills were needed to retrieve and process
    data since it was not SQL compatible, and execution time for the programs was
    often quite long. Hadoop has since matured, and various tools have been developed
    that allow SQL or SQL-like access to the data and speed up query times.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Hadoop，也称为 HDFS（“Hadoop 分布式文件系统”），是一个利用数据存储和计算能力成本不断下降以及分布式系统的开源文件存储系统。文件被分割成块，并且
    Hadoop 将它们分布在存储在集群中的节点或计算机的文件系统上。运行操作的代码被发送到节点，它们并行处理数据。Hadoop 的一个重大突破是允许大量数据以低廉的价格存储。许多大型互联网公司发现，与传统数据库的成本和存储限制相比，这是一个优势，特别是面对大量通常是非结构化数据的情况。Hadoop
    的早期版本有两个主要缺点：需要专门的编码技能来检索和处理数据，因为它与 SQL 不兼容，并且程序的执行时间通常相当长。Hadoop 已经成熟，开发了各种工具，允许对数据进行
    SQL 或类 SQL 的访问，并加快查询时间。
- en: Other commercial and open source products have been introduced in the last few
    years to take advantage of cheap data storage and fast, often in-memory data processing,
    while offering SQL querying ability. Some of them even permit the analyst to write
    a single query that returns data from multiple underlying sources. This is exciting
    for anyone who works with large amounts of data, and it is validation that SQL
    is here to stay.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年中，还推出了其他商业和开源产品，利用廉价的数据存储和快速的内存数据处理，同时提供 SQL 查询功能。其中一些甚至允许分析人员编写单个查询，从多个底层源返回数据。这对于处理大量数据的任何人都是令人兴奋的，并且证明了
    SQL 的重要性。
- en: NoSQL is a technology that allows for data modeling that is not strictly relational.
    It allows for very low latency storage and retrieval, critical in many online
    applications. The class includes key-value pair storage and graph databases, which
    store in a node-edge format, and document stores. Examples of these data stores
    that you might hear about in your organization are Cassandra, Couchbase, DynamoDB,
    Memcached, Giraph, and Neo4j. Early on, NoSQL was marketed as making SQL obsolete,
    but the acronym has more recently been marketed as “not only SQL.” For analysis
    purposes, using data stored in a NoSQL key-value store for analysis typically
    requires moving it to a more traditional SQL data warehouse, since NoSQL is not
    optimized for querying many records at once. Graph databases have applications
    such as network analysis, and analysis work may be done directly in them with
    special query languages. The tool landscape is always evolving, however, and perhaps
    someday we’ll be able to analyze this data with SQL as well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL 是一种允许非严格关系型数据建模的技术。它允许非常低延迟的存储和检索，这在许多在线应用中至关重要。该类别包括键值对存储和图数据库，后者以节点-边格式存储，以及文档存储。你可能在组织中听说过的这些数据存储的例子有
    Cassandra、Couchbase、DynamoDB、Memcached、Giraph 和 Neo4j。早期，NoSQL 被宣传为使 SQL 过时，但最近该首字母缩略词被市场宣传为“不仅仅是
    SQL”。为了分析目的，通常需要将存储在 NoSQL 键值存储中的数据移动到更传统的 SQL 数据仓库中，因为 NoSQL 并不优化于一次查询多条记录。图数据库有网络分析等应用，分析工作可以直接在其中使用特定的查询语言进行。然而，工具景观一直在不断演变，也许将来我们能够用
    SQL 分析这些数据。
- en: Search-based data stores include Elasticsearch and Splunk. Elasticsearch and
    Splunk are often used to analyze machine-generated data, such as logs. These and
    similar technologies have non-SQL query languages, but if you know SQL, you can
    often understand them. Recognizing how common SQL skills are, some data stores,
    such as Elasticsearch, have added SQL querying interfaces. These tools are useful
    and powerful for the use cases they were designed for, but they’re usually not
    well suited to the types of analysis tasks this book is covering. As I’ve explained
    to people over the years, they are great for finding needles in haystacks. They’re
    not as great at measuring the haystack itself.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 基于搜索的数据存储包括Elasticsearch和Splunk。Elasticsearch和Splunk通常用于分析机器生成的数据，例如日志。这些以及类似的技术具有非SQL查询语言，但如果您了解SQL，通常也能理解它们。鉴于SQL技能的普遍性，一些数据存储，如Elasticsearch，已添加了SQL查询接口。这些工具在它们设计的用例中非常有用且功能强大，但通常不适合本书涵盖的分析任务类型。多年来我向人们解释过，它们非常适合在大海中寻找针，但并不太适合测量大海本身。
- en: 'Regardless of the type of database or other data storage technology, the trend
    is clear: even as data volumes grow and use cases become more complex, SQL is
    still the standard tool for accessing data. Its large existing user base, approachable
    learning curve, and power for analytical tasks mean that even technologies that
    try to move away from SQL come back around and accommodate it.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是哪种类型的数据库或其他数据存储技术，趋势是明确的：即使数据量增长并且用例变得更加复杂，SQL仍然是访问数据的标准工具。其庞大的现有用户群、易学习曲线和强大的分析任务能力意味着，即使是试图摆脱SQL的技术也会回归并适应它。
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Data analysis is an exciting discipline with a range of applications for businesses
    and other organizations. SQL has many benefits for working with data, particularly
    any data stored in a database. Querying and analyzing data is part of the larger
    analysis workflow, and there are several types of data stores that a data scientist
    might expect to work with. Now that we’ve set the groundwork for analysis, SQL,
    and data stores, the rest of the book will cover using SQL for analysis in depth.
    [Chapter 2](ch02.xhtml#preparing_data_for_analysis) focuses on data preparation,
    starting with an introduction to data types and then moving on to profiling, cleaning,
    and shaping data. Chapters [3](ch03.xhtml#time_series_analysis) through [7](ch07.xhtml#experiment_analysis)
    present applications of data analysis, focusing on time series analysis, cohort
    analysis, text analysis, anomaly detection, and experiment analysis. [Chapter 8](ch08.xhtml#creating_complex_data_sets_for_analysis)
    covers techniques for developing complex data sets for further analysis in other
    tools. Finally, [Chapter 9](ch09.xhtml#conclusion-id000010) concludes with thoughts
    on how types of analysis can be combined for new insights and lists some additional
    resources to support your analytics journey.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析是一个令人兴奋的学科，对于企业和其他组织有多种应用。SQL在处理数据方面有许多优点，特别是对于任何存储在数据库中的数据。查询和分析数据是更大分析工作流的一部分，数据科学家可能预期使用多种数据存储类型。既然我们已经奠定了分析、SQL和数据存储的基础，本书的其余部分将深入探讨如何使用SQL进行分析。[第2章](ch02.xhtml#preparing_data_for_analysis)重点介绍了数据准备，从数据类型的介绍开始，然后转向分析数据的配置、清理和塑形。第[3](ch03.xhtml#time_series_analysis)至第[7](ch07.xhtml#experiment_analysis)章介绍了数据分析的应用，重点关注时间序列分析、队列分析、文本分析、异常检测和实验分析。[第8章](ch08.xhtml#creating_complex_data_sets_for_analysis)介绍了在其他工具中进行进一步分析的复杂数据集开发技术。最后，[第9章](ch09.xhtml#conclusion-id000010)总结了如何将不同类型的分析结合起来获得新的见解，并列出了一些额外资源来支持您的分析旅程。
- en: ^([1](ch01.xhtml#ch01fn1-marker)) There are some newer technologies that allow
    SQL queries on data stored in nonrelational sources.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#ch01fn1-marker)) 有一些较新的技术允许对非关系型数据源中存储的数据进行SQL查询。
- en: '^([2](ch01.xhtml#ch01fn2-marker)) Ralph Kimball and Margy Ross, *The Data Warehouse
    Toolkit*, 3rd ed. (Indianapolis: Wiley, 2013).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.xhtml#ch01fn2-marker)) Ralph Kimball 和 Margy Ross，*数据仓库工具包*，第3版（印第安纳波利斯：Wiley，2013年）。
