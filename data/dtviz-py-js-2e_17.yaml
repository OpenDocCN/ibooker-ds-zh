- en: Chapter 12\. Delivering the Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。传递数据
- en: '[Chapter 6](ch06.xhtml#chapter_heavy_scraping) showed how to grab your data
    of interest from the web with a web scraper. We used Scrapy to fetch a dataset
    of Nobel Prize winners and then in Chapters [9](ch09.xhtml#chapter_cleaning) and
    [11](ch11.xhtml#chapter_pandas_exploring) we cleaned and explored the Nobel Prize
    dataset using pandas.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.xhtml#chapter_heavy_scraping)展示了如何使用网络爬虫从网上获取你感兴趣的数据。我们使用Scrapy获取了一个诺贝尔奖获得者的数据集，然后在第[9章](ch09.xhtml#chapter_cleaning)和第[11章](ch11.xhtml#chapter_pandas_exploring)中使用pandas对诺贝尔奖数据集进行了清洗和探索。'
- en: This chapter will show you how to deliver data statically or dynamically from
    a Python server to JavaScript on the client browser, using our Nobel Prize dataset
    as an example. This data is stored in the JSON format and consists of a list of
    Nobel Prize–winner objects like the one shown in [Example 12-1](#delivery_JSON).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向你展示如何从Python服务器静态或动态地将数据传递到客户端浏览器的JavaScript，以我们的诺贝尔奖数据集为例。这些数据以JSON格式存储，包含一个诺贝尔奖获得者对象列表，就像在[例子12-1](#delivery_JSON)中所示的那样。
- en: Example 12-1\. Our Nobel Prize JSON data, scraped and then cleaned
  id: totrans-3
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 例子12-1。我们的诺贝尔奖JSON数据，被爬取然后清洗
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As with the rest of this book, the emphasis will be on minimizing the amount
    of web development so you can get down to the business of building the web visualization
    in JavaScript.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本书的其余部分一样，重点是尽量减少Web开发的量，这样你就可以专注于在JavaScript中构建Web可视化。
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: A good rule of thumb is to aim to do as much data manipulation as possible with
    Python—it’s much less painful than equivalent operations in JavaScript. Following
    from this, the data delivered should be as close as possible to the form it will
    be consumed in (i.e., for D3 this will usually be a JSON array of objects, such
    as the one we produced in [Chapter 9](ch09.xhtml#chapter_cleaning)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的经验法则是尽量使用Python进行尽可能多的数据操作——这比在JavaScript中进行等效操作要少痛苦得多。由此而来，传递的数据应尽可能接近它将被消费的形式（即对于D3，这通常是一个包含对象的JSON数组，就像我们在[第9章](ch09.xhtml#chapter_cleaning)中生成的那样）。
- en: Serving the Data
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供数据
- en: You’ll need a web server to process HTTP requests from the browser, for the
    initial static HTML and CSS files used to build the web page, and for any subsequent
    AJAX requests for data. During development, this server will typically be running
    on a port of localhost (on most systems this has an IP address of 127.0.0.1).
    Conventionally, an *index.xhtml* HTML file is used to initialize the website or,
    in our case, the [single-page application (SPA)](https://oreil.ly/23h3Y) constituting
    our web visualization.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个Web服务器来处理浏览器发来的HTTP请求，用于构建网页的初始静态HTML和CSS文件，以及任何后续的AJAX请求数据。在开发过程中，该服务器通常运行在localhost的某个端口上（在大多数系统上，这个IP地址是127.0.0.1）。按照惯例，*index.xhtml*
    HTML文件用于初始化网站或我们的情况下，构成我们Web可视化的[单页面应用（SPA）](https://oreil.ly/23h3Y)。
- en: Serving your SPA with a single-line server can be fine for visualization prototyping
    and sketching out ideas but gives you no control over even basic server functionality,
    such as URL routing or the use of dynamic templates. Thankfully, Python has a
    great little web server that provides all the functionality a web visualizer could
    need without sacrificing our aim to minimize the boilerplate standing between
    our Python-processed data and JavaScripted visualization masterwork. Flask is
    the mini web server in question and a worthy addition to our best-of-breed toolchain.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单行服务器为可视化原型设计和构思提供服务可能是合适的，但无法控制基本的服务器功能，如URL路由或动态模板的使用。幸运的是，Python有一个很棒的小型Web服务器，提供了Web可视化器所需的所有功能，而不会牺牲我们旨在最大程度减少Python处理数据与JavaScript可视化杰作之间模板代码的目标。Flask就是这个小型Web服务器，是我们最佳工具链中的一个值得推荐的补充。
- en: Organizing Your Flask Files
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织你的Flask文件
- en: How to organize your project files is one of those really useful bits of information
    that is often neglected in tutorials and the like, possibly because things can
    get opinionated fast and at the end of the day, it’s a personal preference. Nevertheless,
    good file organization can really pay off, especially when you start collaborating.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如何组织项目文件是那些经常被忽视的非常有用的信息之一，可能是因为在教程中很容易变得主观化，而且最终归根结底，这是个人偏好。尽管如此，良好的文件组织确实能带来很多好处，尤其是当你开始合作时。
- en: '[Figure 12-1](#file_structure) gives a rough idea of where your files should
    go as you move from the basic dataviz JavaScript prototype using a one-line server
    labeled `basic`, through a more complex project labeled `basic+`, to a typical,
    simple Flask setup labeled `flask_project`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-1](#file_structure)提供了一个大致的想法，即在从使用一个标记为`basic`的单行服务器的基本数据可视化JavaScript原型转移到使用一个标记为`basic+`的更复杂项目，再到一个典型的简单Flask设置标记为`flask_project`时，应该将文件放在哪里。'
- en: '![dpj2 1201](assets/dpj2_1201.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1201](assets/dpj2_1201.png)'
- en: Figure 12-1\. Organizing your server project files
  id: totrans-15
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-1\. 组织您的服务器项目文件
- en: The key thing with file organization is consistency. It helps enormously to
    have the position of files in your procedural memory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文件组织的关键是一致性。在过程记忆中，文件的位置对帮助是极大的。
- en: Serving Data with Flask
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Flask提供数据
- en: 'If you’re using Python’s Anaconda packages (see [Chapter 1](ch01.xhtml#chapter_install)),
    then Flask is already available to you. Otherwise, a simple `pip` install should
    make it available:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Python的Anaconda包（请参阅[第1章](ch01.xhtml#chapter_install)），那么Flask已经可用。否则，简单的`pip`安装应该可以让其可用：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the Flask modules in hand, we can set up a server with a few lines to
    serve the universal programming greeting:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 手头有了Flask模块，我们可以用几行代码设置一个服务器，用来提供一个通用的编程问候：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_delivering_the_data_CO1-1)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_delivering_the_data_CO1-1)'
- en: Flask routes allow you to direct your web traffic. This is the root route (i.e.,
    *http://localhost:8000*).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Flask路由允许您指导网络流量。这是根路由（即，*http://localhost:8000*）。
- en: '[![2](assets/2.png)](#co_delivering_the_data_CO1-2)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_delivering_the_data_CO1-2)'
- en: Sets the localhost port the server will run on (default 5000). In debug mode,
    Flask will provide useful logging to screen and in the event of an error, a browser-based
    report.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设置本地主机端口，服务器将在此端口上运行（默认为5000）。在调试模式下，Flask会向屏幕提供有用的日志记录，并在错误发生时提供基于浏览器的报告。
- en: 'Now, just go to the directory containing *nobel_viz.py* and run the module:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需转到包含*nobel_viz.py*的目录，并运行该模块：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can now go to your web browser of choice and see the emphatic result shown
    in [Figure 12-2](#delivery_hello_world).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以转到您选择的网络浏览器，并查看在[图 12-2](#delivery_hello_world)中显示的强调结果。
- en: '![dpj2 1202](assets/dpj2_1202.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1202](assets/dpj2_1202.png)'
- en: Figure 12-2\. A simple message served to the browser
  id: totrans-30
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-2\. 一个简单的消息提供给浏览器
- en: As we’ll see in [“Dynamic Data with Flask APIs”](#dynamic_data), pattern matching
    with Flask routing makes it trivial to roll out a simple web API. It’s also easy
    to use templates to generate dynamic web pages as shown in [Figure 12-4](#flask_hello_world).
    Templates can be useful in visualizations for composing essentially static HTML
    pages server-side, but generally you’ll be delivering a simple HTML backbone on
    which to build a visualization with JavaScript. With the visualization being configured
    in JavaScript, the chief job of the server (aside from delivering the static files
    needed to seed the process) is to dynamically negotiate data (usually providing
    it) with the browser’s and JavaScript AJAX requests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在[“使用Flask API提供动态数据”](#dynamic_data)中看到的，Flask路由的模式匹配使得轻松实现简单的Web API成为可能。还可以使用模板来生成动态网页，如图 12-4所示。模板在组成基本静态HTML页面时非常有用，但通常会使用JavaScript构建可视化效果。在JavaScript中配置可视化效果时，服务器的主要工作（除了提供种子过程所需的静态文件之外）是通过AJAX请求动态地处理数据。
- en: '![dpj2 1204](assets/dpj2_1204.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1204](assets/dpj2_1204.png)'
- en: Figure 12-4\. (1) An index.xhtml template is used to create a web page using
    a *message* variable, which is then (2) served to the browser
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-4\. (1) 使用一个*message*变量创建一个网页模板，然后 (2) 将其提供给浏览器
- en: Flask is perfectly capable of delivering full websites, with powerful HTML templating,
    [blueprints](https://oreil.ly/Y1PxL) for modularizing large sites and supporting
    common usage patterns, and a slew of useful plug-ins and extensions. [The Flask
    user’s guide](https://oreil.ly/aoqYy) is a good starting point for learning more,
    and the API specifics can be found [in this subsection of the guide](https://oreil.ly/kpFpw).
    The single-page apps that characterize most web visualizations don’t need a lot
    of bells and whistles server-side to deliver the necessary static files. Our key
    interest in Flask is its ability to provide simple, efficient data servers, with
    robust RESTful web APIs available in a few lines of Python. But before dipping
    our toes in data APIs, let’s look at how we deliver and use file-based data assets
    such as JSON and CSV files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Flask完全能够提供完整的网站，具有强大的HTML模板化功能，用于模块化大型站点的[蓝图](https://oreil.ly/Y1PxL)和支持常见使用模式的插件和扩展。[Flask用户指南](https://oreil.ly/aoqYy)是学习更多内容的良好起点，API的具体信息可以在[指南的这一小节](https://oreil.ly/kpFpw)中找到。大多数Web可视化的单页面应用不需要大量的服务器端功能来交付必要的静态文件。我们对Flask的关键兴趣在于其提供简单高效的数据服务器，几行Python代码即可实现强大的RESTful
    Web API。但在涉足数据API之前，让我们先看看如何交付和使用基于文件的数据资产，如JSON和CSV文件。
- en: Delivering Data Files
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交付数据文件
- en: Many websites that don’t need the overhead of dynamically configured data choose
    to deliver their data in a *static* form, which essentially means that all the
    HTML files and, crucially, data (usually in JSON or CSV format), exist as files
    on the server’s filesystem, ready to be delivered without, for example, making
    calls to a database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 许多不需要动态配置数据开销的网站选择以*静态*形式提供它们的数据，这基本上意味着所有HTML文件和关键的数据（通常是JSON或CSV格式）作为文件存在于服务器文件系统中，可以直接交付，例如，无需调用数据库。
- en: Static pages are easy to cache, meaning their delivery can be much faster. It
    can also be more secure, as those database calls can be a common attack vector
    for nefarious hackers (e.g., [injection attacks](https://oreil.ly/SY92s)). The
    price paid for this increased speed and security is a loss of flexibility. Being
    limited to a set of preassembled pages means prohibiting user interactions that
    might demand multivariate combinations of data.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 静态页面易于缓存，这意味着它们的交付速度可以更快。它还可能更安全，因为那些数据库调用可以是恶意黑客的常见攻击向量（例如，[注入攻击](https://oreil.ly/SY92s)）。为了获得这种增加的速度和安全性所付出的代价是灵活性的丧失。限制在预组装页面集合上意味着禁止可能需要多变数据组合的用户交互。
- en: For the budding data visualizer, there is an attraction in supplying static
    data. You can easily create a standalone project without needing a web API and
    are able to deliver your work (in progress) as a single folder of HTML, CSS, and
    JSON files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者的数据可视化者，提供静态数据具有吸引力。您可以轻松创建一个独立的项目，无需Web API，并且可以将您的工作（进行中）作为一个包含HTML、CSS和JSON文件的单个文件夹交付。
- en: The simplest example of data-driven web visualizations with static files is
    probably that seen in the many cool D3 examples at [*https://bl.ocks.org/mbostock*](https://bl.ocks.org/mbostock).^([1](ch12.xhtml#idm45607760514784))
    They follow a similar structure to the basic page we discussed in [“A Basic Page
    with Placeholders”](ch04.xhtml#webdev101_basic_page).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用静态文件进行数据驱动的Web可视化的最简单示例可能是在[*https://bl.ocks.org/mbostock*](https://bl.ocks.org/mbostock)上看到的许多酷炫的D3示例。它们遵循与我们在[“具有占位符的基本页面”](ch04.xhtml#webdev101_basic_page)中讨论的基本页面类似的结构。
- en: Although the examples use `<script>` and `<style>` tags to embed JavaScript
    and CSS in the HTML page, I’d recommend keeping your CSS and JavaScript in separate
    files, where you get the advantages of a decent format-aware editor and easier
    debugging.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然示例中使用`<script>`和`<style>`标签将JavaScript和CSS嵌入HTML页面，但我建议将CSS和JavaScript保留在单独的文件中，这样可以获得良好的格式感知编辑器和更容易的调试。
- en: '[Example 12-2](#delivery_static_source) shows such an *index.xhtml* basic page
    with `<h2>` and `<div>` data placeholders and a `<script>` tag that loads a local
    *script.js* file. As we’re only setting the `font-family` style, we’ll inline
    the CSS in the page. With our *nobel_winners.json* dataset in a *data* subdirectory,
    this gives us the following file structure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-2](#delivery_static_source)展示了一个包含`<h2>`和`<div>`数据占位符以及加载本地*script.js*文件的*index.xhtml*基本页面。由于我们只设置了`font-family`样式，所以我们将在页面中内联CSS。在*data*子目录中使用我们的*nobel_winners.json*数据集，这给我们带来以下文件结构：'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Example 12-2\. A basic HTML page with data placeholders
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-2\. 带有数据占位符的基本HTML页面
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The static data file for these examples consists of a single JSON file (*nobel_winners.json*)
    sitting in a *data* subdirectory. Consuming this data requires a JavaScript [AJAX](https://oreil.ly/5w6MQ)
    call to our server. D3 provides convenient libraries for making AJAX calls, with
    D3’s format-specific `json`, `csv`, and `tsv` methods being handier for web visualizers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例的静态数据文件包含在一个单独的JSON文件（*nobel_winners.json*），位于*data*子目录中。消费这些数据需要通过JavaScript进行一个[AJAX](https://oreil.ly/5w6MQ)调用到我们的服务器。D3提供了方便的库来进行AJAX调用，D3的特定格式的`json`、`csv`和`tsv`方法对于Web可视化程序非常方便。
- en: '[Example 12-3](#delivery_d3json) shows how to load data with D3’s `json` method
    using a callback function. Behind the scenes, D3 is using JavaScript’s [Fetch
    API](https://oreil.ly/D5wut) to fetch the data. This returns a JavaScript [Promise](https://oreil.ly/K570a),
    which can be resolved using its `then` method, returning the data unless an error
    has occurred.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 12-3](#delivery_d3json)展示了如何使用D3的`json`方法通过回调函数加载数据。在幕后，D3使用JavaScript的[Fetch
    API](https://oreil.ly/D5wut)来获取数据。这返回一个JavaScript的[Promise](https://oreil.ly/K570a)，可以使用其`then`方法解析，返回数据，除非发生错误。'
- en: Example 12-3\. Using D3’s `json` method to load data
  id: totrans-47
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 12-3\. 使用D3的`json`方法加载数据
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](assets/1.png)](#co_delivering_the_data_CO2-1)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_delivering_the_data_CO2-1)'
- en: JavaScript’s [`JSON.stringify` method](https://oreil.ly/65ZTd) is a handy way
    to prettify a JavaScript object for output. Here we insert some whitespace to
    indent the output by four spaces.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的[`JSON.stringify`方法](https://oreil.ly/65ZTd)是一种方便的方法，可以使JavaScript对象输出漂亮。在这里，我们插入一些空格以使输出缩进四个空格。
- en: If you run a one-line server (e.g., `python -m http.server`) in your *viz* directory
    and open the localhost page in your web browser, you should see something similar
    to [Figure 12-5](#delivery_browser_json), indicating the data has been successfully
    delivered to JavaScript, ready to be visualized.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在*viz*目录中运行一个单行服务器（例如，`python -m http.server`）并在浏览器中打开本地主机页面，你应该会看到类似于[图 12-5](#delivery_browser_json)，表明数据已成功传递给JavaScript，准备好被可视化。
- en: '![dpj2 1205](assets/dpj2_1205.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1205](assets/dpj2_1205.png)'
- en: Figure 12-5\. Delivering JSON to the browser
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-5\. 将JSON传递给浏览器
- en: 'The *nobel_winners.json* dataset we’re using isn’t particularly large, but
    if we were to start adding biographical body text or other textual data, it could
    easily grow to a size that strains available browser bandwidth and starts to make
    the user wait uncomfortably. One strategy to limit loading times is to break the
    data down into subsets based on one of the dimensions. An obvious way to do this
    with our data is to store the winners by country. A few lines of pandas does the
    job of creating a suitable *data* directory:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用的*nobel_winners.json*数据集并不是特别大，但是如果我们开始添加传记正文或其他文本数据，它很容易会增长到超出浏览器带宽限制并且使用户等待变得不舒服的程度。限制加载时间的一种策略是根据其中一个维度将数据分解为子集。对于我们的数据来说，显而易见的方法是按国家存储获奖者。几行pandas代码就可以创建一个合适的*data*目录：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](assets/1.png)](#co_delivering_the_data_CO3-1)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_delivering_the_data_CO3-1)'
- en: Groups the winners DataFrame by `country` and iterates over the group name and
    members.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将获奖者DataFrame按`country`分组，并迭代组名和成员。
- en: 'This should give us a `winners_by_country` *data* subdirectory:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个`winners_by_country` *data*子目录：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can now consume our data by country using a little tailor-made function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用一个小小的定制函数按国家消费我们的数据：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following function call will select all the Australian Nobel Prize winners,
    producing [Figure 12-6](#delivery_oz):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数调用将选择所有澳大利亚的诺贝尔奖获得者，生成[图 12-6](#delivery_oz)：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![dpj2 1206](assets/dpj2_1206.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 1206](assets/dpj2_1206.png)'
- en: Figure 12-6\. Selecting winners by country
  id: totrans-65
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-6\. 按国家选择获奖者
- en: For the right visualization, the ability to select winners by country could
    reduce the data bandwidth and subsequent lag, but what if we wanted winners by
    year or gender? Each division by dimension (categorical, temporal, etc.) would
    require its own subdirectory, creating a mess of files and all the bookkeeping
    that entails. What if we wanted to make fine-grained requests for data (e.g.,
    all US prize winners since 2000)? At this point, we need a data server that can
    respond dynamically to such requests, usually driven by user interaction. The
    next section will show you how to start crafting such a server with Flask.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正确的可视化，通过国家选择获奖者可以减少数据带宽和随后的延迟，但是如果我们想按年份或性别获取获奖者呢？每个维度（分类、时间等）的分割都需要自己的子目录，从而创建文件的混乱和所有相关的簿记工作。如果我们想对数据进行精细的请求（例如，自2000年以来所有美国的奖项获得者）怎么办？在这一点上，我们需要一个可以动态响应此类请求的数据服务器，通常由用户交互驱动。接下来的部分将向您展示如何开始使用
    Flask 制作这样的服务器。
- en: Dynamic Data with Flask APIs
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flask APIs 实现动态数据
- en: Delivering data to web pages with JSON or CSV files is the basis for many of
    the most impressive dataviz examples seen on the web and is perfect for small
    demos and prototypes. But there are constraints to the form, most obviously in
    the size of the datasets that can be realistically delivered. As the datasets
    increase in size and the files start to tip into megabytes, page loading slows
    down and user frustration mounts with every spin of the spinner. For much dataviz,
    particularly dashboards or exploratory charts, it makes sense to deliver the data
    as needed and in response to user requests generated by a user interface of some
    form. For this kind of data delivery a small data server is often perfect for
    the job, and Python’s Flask has everything you need to craft one of these.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 JSON 或 CSV 文件向网页传递数据是许多令人印象深刻的数据可视化示例的基础，也非常适合小型演示和原型。但是，在表单方面存在一些约束，最明显的是可以实际传递的数据集大小。随着数据集的增大和文件开始超过几兆字节，页面加载变慢，用户在旋转加载器的每次旋转时会越来越沮丧。对于大多数数据可视化，特别是仪表板或探索性图表，根据需要和响应用户界面生成的用户请求传递数据是有意义的。对于这种数据传递，一个小型数据服务器通常非常适合工作，并且
    Python 的 Flask 拥有您制作这些内容所需的一切。
- en: If we’re delivering data dynamically, we’re going to need some kind of API to
    enable our JavaScript to request data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要动态地提供数据，我们需要某种 API 来让我们的 JavaScript 请求数据。
- en: A Simple Data API with Flask
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用 Flask 构建简单的数据 API
- en: 'Using Dataset (see [“Easier SQL with Dataset”](ch03.xhtml#dataset)), we can
    easily adapt our existing server for an SQL database. Here we use Dataset for
    convenience and the specialized JSON encoder (see [Example 3-2](ch03.xhtml#data_json_time))
    to convert Python datatimes to a JSON-friendly ISO string:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dataset（参见 [“使用 Dataset 更轻松的 SQL”](ch03.xhtml#dataset)），我们可以轻松地为 SQL 数据库调整我们现有的服务器。在这里，我们为了方便使用
    Dataset 和专用的 JSON 编码器（参见 [示例 3-2](ch03.xhtml#data_json_time)），将 Python datatimes
    转换为 JSON 友好的 ISO 字符串：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](assets/1.png)](#co_delivering_the_data_CO4-1)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_delivering_the_data_CO4-1)'
- en: Restricts our database queries to keys in this list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 限制我们数据库查询的键在这个列表中。
- en: '[![2](assets/2.png)](#co_delivering_the_data_CO4-2)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_delivering_the_data_CO4-2)'
- en: '`request.args` gives us access to the arguments of the request (e.g., `''?country=Australia&category=Chemistry''`).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`request.args` 让我们能够访问请求的参数（例如，`''?country=Australia&category=Chemistry''`）。'
- en: '[![3](assets/3.png)](#co_delivering_the_data_CO4-3)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_delivering_the_data_CO4-3)'
- en: '`dataset`’s `find` method requires our argument dictionary to be unpacked with
    ** (i.e., `find(country=''Australia'', category=''Literature'')`). We convert
    the iterator to a list, ready to serialize.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataset` 的 `find` 方法要求我们的参数字典使用 ** 解包（即 `find(country=''Australia'', category=''Literature'')`）。我们将迭代器转换为列表，以便进行序列化。'
- en: '[![4](assets/4.png)](#co_delivering_the_data_CO4-4)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_delivering_the_data_CO4-4)'
- en: This is the specialized JSON encoder detailed in [Example 3-2](ch03.xhtml#data_json_time).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在 [示例 3-2](ch03.xhtml#data_json_time) 中详细介绍的专用 JSON 编码器。
- en: 'We can test this little API with [curl](https://curl.se) after starting the
    server (`python server_sql.py`). Let’s get all Japanese Physics prizewinners:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动服务器后，我们可以用 [curl](https://curl.se) 测试这个小小的 API (`python server_sql.py`)。让我们获取所有日本的物理学奖获得者：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You’ve now seen how easy it is to start creating a simple API. There are lots
    of ways one can extend it, but for fast and dirty prototyping, this is a handy
    little form.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了开始创建简单 API 有多么容易。有很多方法可以扩展它，但是对于快速而肮脏的原型设计，这是一个非常方便的形式。
- en: But what if you want pagination, authentication, and a host of other things
    a sophisticated RESTful API would provide? In the next chapter, we’ll see how
    easy it is to extend our simple data API into something more powerful and extendible,
    using some brilliant Python libraries like marmalade.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您想要分页、认证以及诸如此类的复杂RESTful API所提供的其他功能呢？在下一章中，我们将看到如何将我们简单的数据API扩展为更强大和可扩展的东西，使用一些出色的Python库，如marmalade。
- en: Using Static or Dynamic Delivery
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态或动态交付
- en: When to use static or dynamic delivery is highly dependent on context and is
    an inevitable compromise. Bandwidths vary regionally and with devices. For example,
    if you’re developing a visualization that should be accessible from a smartphone
    in a rural context, the data constraints are very different from those of an in-house
    data app running on a local network.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用静态或动态交付很大程度上取决于上下文，并且是一个不可避免的妥协。带宽在不同地区和设备上有所不同。例如，如果您正在开发一个可从农村环境中的智能手机访问的可视化效果，那么数据限制与内部数据应用程序在本地网络上运行时的情况大不相同。
- en: The ultimate guide is user experience. If a little wait at the beginning while
    the data caches leads to a lightning-fast JavaScript dataviz, then purely static
    delivery may well be the answer. If you are allowing the user to cut and slice
    a large, multivariate dataset, then this probably won’t be possible without an
    annoyingly long wait time. As a rough rule of thumb, any dataset less than 200
    KB should be fine with purely static delivery. As you move into the megabytes
    of data and beyond, you’ll probably need a database-driven API from which to fetch
    your data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验是最终指南。如果在数据缓存的开始稍等片刻可以获得闪电般快速的JavaScript数据可视化，那么纯静态交付可能是答案。如果允许用户剪切和切片大型多变量数据集，则可能需要耐心等待。粗略的经验法则是，任何小于
    200 KB 的数据集在纯静态交付下应该都没问题。随着数据量增加到兆字节及以上，您可能需要一个数据库驱动的 API 来获取数据。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: This chapter explained the rudiments of static data delivery of files on the
    web server, and dynamic delivery of data, sketching the basis of a simple Flask-based
    RESTful web server. Although Flask makes rolling a basic data API pretty trivial,
    adding such bells and whistles as pagination, selective data queries, and the
    full complement of HTTP verbs requires a little more work. In the first edition
    of this book I turned to some off-the-shelf Python RESTful libraries, but these
    tend to have a short expiry date, probably because it’s so easy to string together
    some single-purpose Python libraries to achieve the same end, with more flexibility.
    It’s also a great way to learn those tools, so building just such a RESTful API
    is the topic of the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在Web服务器上静态数据传递文件的基础知识，以及动态数据传递，勾勒出基于简单Flask的RESTful Web服务器的基础。虽然Flask使得创建基本数据API变得非常轻松，但添加分页、选择性数据查询和HTTP动词的全套功能需要更多的工作。在本书的第一版中，我转向了一些现成的Python
    RESTful库，但这些库往往很快就会过时，可能是因为可以如此轻松地串联一些单一用途的Python库来实现相同的目标，并具有更高的灵活性。这也是学习这些工具的好方法，因此，建立一个正是这样的RESTful
    API是下一章的主题。
- en: ^([1](ch12.xhtml#idm45607760514784-marker)) Mike Bostock, D3’s creator, is a
    big advocate of examples. Here’s a [great talk](https://oreil.ly/QsMfK) where
    he emphasizes the role examples have played in the success of D3.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.xhtml#idm45607760514784-marker)) 迈克·博斯托克，D3 的创造者，是一个例子的强烈支持者。在这里有一个[精彩的演讲](https://oreil.ly/QsMfK)，他强调了例子在
    D3 成功中所起的作用。
