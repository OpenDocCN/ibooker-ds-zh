- en: Chapter 8\. Advanced Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 高级主题
- en: In the previous chapter, you had an overview of implementing GitOps workflows
    using Argo CD recipes. Argo CD is a famous and influential open source project
    that helps with both simple use cases and more advanced ones. In this chapter,
    we will discuss topics needed when you move forward in your GitOps journey, and
    you need to manage security, automation, and advanced deployment models for multicluster
    scenarios.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，您已经概述了使用 Argo CD 配方实施 GitOps 工作流的概述。Argo CD 是一个著名且具有影响力的开源项目，既适用于简单的用例，也适用于更复杂的用例。在本章中，我们将讨论在您在
    GitOps 旅程中前进时所需的主题，以及在多集群场景下管理安全性、自动化和高级部署模型的内容。
- en: Security is a critical aspect of automation and DevOps. DevSecOps is a new definition
    of an approach where security is a shared responsibility throughout the entire
    IT lifecycle. Furthermore, the [DevSecOps Manifesto](https://www.devsecops.org)
    specifies security as code to operate and contribute value with less friction.
    And this goes in the same direction as GitOps principles, where everything is
    declarative.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是自动化和 DevOps 的关键方面。 DevSecOps 是一个新的定义，其中安全性是整个 IT 生命周期中共享的责任。此外，《DevSecOps
    宣言》（https://www.devsecops.org）将安全性视为操作和减少摩擦的价值贡献代码的一部分。这与 GitOps 原则相一致，其中一切都是声明性的。
- en: 'On the other hand, this also poses the question of avoiding storing unencrypted
    plain-text credentials in Git. As stated in the book *Path to GitOps* by Christian
    Hernandez, Argo CD luckily currently provides two patterns to manage security
    in GitOps workflows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，这也引出了一个问题，即如何避免在 Git 中存储未加密的明文凭证。正如克里斯蒂安·埃尔南德斯的书《通往 GitOps 的路径》中所述，Argo
    CD 目前幸运地提供了两种模式来管理 GitOps 工作流中的安全性：
- en: Storing encrypted secrets in Git, such as with a Sealed Secret (see [Recipe
    8.1](#recipe_8_1))
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Git 中存储加密的秘密，例如使用 Sealed Secret（见[食谱 8.1](#recipe_8_1)）
- en: Storing secrets in external services or vaults, then storing only the reference
    to such secrets in Git (see [Recipe 8.2](#recipe_8_2))
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将秘密存储在外部服务或保险库中，然后只在 Git 中存储对这些秘密的引用（参见[食谱 8.2](#recipe_8_2)）
- en: The chapter then moves to advanced deployment techniques, showing how to manage
    webhooks with Argo CD (see [Recipe 8.3](#recipe_8_3)) and with ApplicationSets
    (see [Recipe 8.4](#recipe_8_4)). ApplicationSets is a component of Argo CD that
    allows management deployments of many applications, repositories, or clusters
    from a single Kubernetes resource. In essence, a templating system for the GitOps
    application is ready to be deployed and synced in multiple Kubernetes clusters
    (see [Recipe 8.5](#recipe_8_5)).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章随后介绍了高级部署技术，展示了如何使用 Argo CD 管理 Webhooks（参见[食谱 8.3](#recipe_8_3)）和 ApplicationSets（参见[食谱
    8.4](#recipe_8_4)）。ApplicationSets 是 Argo CD 的一个组件，允许从单个 Kubernetes 资源管理多个应用程序、存储库或集群的部署。从本质上讲，这是一个模板化系统，可以在多个
    Kubernetes 集群中部署和同步 GitOps 应用程序（参见[食谱 8.5](#recipe_8_5)）。
- en: Last but not least, the book ends with a recipe on Progressive Delivery for
    Kubernetes with Argo Rollouts ([Recipe 8.6](#recipe_8_6)), useful for deploying
    the application using an advanced deployment technique such as blue-green or canary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，本书以使用 Argo Rollouts 实现 Kubernetes 的渐进式交付结束（[食谱 8.6](#recipe_8_6)），这对于使用蓝绿或金丝雀等先进部署技术部署应用程序非常有用。
- en: 8.1 Encrypt Sensitive Data (Sealed Secrets)
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.1 加密敏感数据（密封密钥）
- en: Problem
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to manage Kubernetes Secrets and encrypted objects in Git.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望在 Git 中管理 Kubernetes Secrets 和加密对象。
- en: Solution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: '[Sealed Secrets](https://oreil.ly/MWTNB) is an open source project by Bitnami
    used to encrypt a Kubernetes Secrets into a `SealedSecret` Kubernetes Custom Resource,
    representing an encrypted object safe to store in Git.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[密封密钥](https://oreil.ly/MWTNB) 是 Bitnami 的一个开源项目，用于将 Kubernetes Secrets 加密为
    `SealedSecret` Kubernetes 自定义资源，表示一个安全存储在 Git 中的加密对象。'
- en: 'Sealed Secrets uses public-key cryptography and consists of two main components:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 密封密钥使用公钥加密技术，由两个主要组件组成：
- en: A Kubernetes controller that has knowledge about the private and public key
    used to decrypt and encrypt encrypted secrets and is responsible for reconciliation.
    The controller also supports automatic secret rotation for the private key and
    key expiration management in order to enforce the re-encryption of secrets.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Kubernetes 控制器，了解用于解密和加密加密秘密的私钥和公钥，并负责协调。该控制器还支持私钥的自动轮换和密钥过期管理，以强制重新加密秘密。
- en: '`kubeseal`, a CLI used by developers to encrypt their secrets before committing
    them to a Git repository.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeseal` 是开发人员用来在提交到 Git 存储库之前加密其秘密的命令行界面。'
- en: The `SealedSecret` object is encrypted and decrypted only by the `SealedSecret`
    controller running in the target Kubernetes cluster. This operation is exclusive
    only to this component, thus nobody else can decrypt the object. The `kubeseal`
    CLI allows the developer to take a normal Kubernetes Secret resource and convert
    it to a `SealedSecret` resource definition as shown in [Figure 8-1](#fig8-1).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`SealedSecret` 对象仅由运行在目标 Kubernetes 集群中的 `SealedSecret` 控制器加密和解密。这个操作仅由这个组件独占，因此没有其他人可以解密该对象。`kubeseal`
    CLI 允许开发者将普通的 Kubernetes Secret 资源转换为 `SealedSecret` 资源定义，如 [Figure 8-1](#fig8-1)
    所示。'
- en: In your Kubernetes cluster with Argo CD, you can install the `kubeseal` CLI
    for your operating system from the [GitHub project’s releases](https://oreil.ly/zmEh3).
    At the time of writing this book, we are using version 0.18.2.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Kubernetes 集群中使用 Argo CD，您可以从 [GitHub 项目的发布版本](https://oreil.ly/zmEh3) 中为您的操作系统安装
    `kubeseal` CLI。在撰写本书时，我们使用的是版本 0.18.2。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'On macOS, `kubeseal` is available through [Homebrew](https://brew.sh) as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，`kubeseal` 可以通过 [Homebrew](https://brew.sh) 安装如下：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Sealed Secrets with GitOps](assets/gocb_0801.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Sealed Secrets with GitOps](assets/gocb_0801.png)'
- en: Figure 8-1\. Sealed Secrets with GitOps
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-1\. Sealed Secrets with GitOps
- en: 'After you install the CLI, you can install the controller as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 CLI 后，您可以按如下方式安装控制器：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should have output similar to the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As an example, let’s create a Secret for the Pac-Man game deployed in [Chapter 5](ch05.xhtml#ch_Helm):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们为部署在 [第五章](ch05.xhtml#ch_Helm) 中的 Pac-Man 游戏创建一个 Secret：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should have the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该有以下输出：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here you can see the YAML representation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里您可以看到 YAML 表示：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, you can convert the Secret into a `SealedSecret` in this way:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过以下方式将 Secret 转换为 `SealedSecret`：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO1-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO1-1)'
- en: Here you find the data encrypted by the Sealed Secrets controller.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里找到由 Sealed Secrets 控制器加密的数据。
- en: 'Now you can safely push your `SealedSecret` to your Kubernetes manifests repo
    and create the Argo CD application. Here’s an example from [this book’s repository](https://oreil.ly/TXHRa):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以安全地将您的 `SealedSecret` 推送到 Kubernetes 部署清单存储库并创建 Argo CD 应用程序。这是来自 [本书仓库的示例](https://oreil.ly/TXHRa)：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check if the app is running and healthy:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 检查应用程序是否正在运行并且健康：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should get output similar to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该获得类似以下的输出：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 8.2 Encrypt Secrets with ArgoCD (ArgoCD + HashiCorp Vault + External Secret)
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.2 使用 ArgoCD 加密 Secrets（ArgoCD + HashiCorp Vault + External Secret）
- en: Problem
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to avoid storing credentials in Git and you want to manage them in
    external services or vaults.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望避免在 Git 中存储凭据，并希望在外部服务或保险库中管理它们。
- en: Solution
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: In [Recipe 8.1](#recipe_8_1) you saw how to manage encrypted data in Git following
    the GitOps declarative way, but how do you avoid storing even encrypted credentials
    with GitOps?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Recipe 8.1](#recipe_8_1) 中，您看到了如何按照 GitOps 声明式方式管理 Git 中的加密数据，但如何避免即使加密凭据也与
    GitOps 一起存储？
- en: One solution is [External Secrets](https://oreil.ly/ytBeU), an open source project
    initially created by GoDaddy, which aims at storing secrets in external services
    or vaults from different vendors, then storing only the reference to such secrets
    in Git.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种解决方案是 [External Secrets](https://oreil.ly/ytBeU)，这是一个由 GoDaddy 最初创建的开源项目，旨在将密钥存储在不同供应商的外部服务或保险库中，然后仅在
    Git 中存储对这些密钥的引用。
- en: Today, External Secrets supports systems such as AWS Secrets Manager, HashiCorp
    Vault, Google Secrets Manager, Azure Key Vault, and more. The idea is to provide
    a user-friendly abstraction for the external API that stores and manages the lifecycles
    of the secrets.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，External Secrets 支持诸如 AWS Secrets Manager、HashiCorp Vault、Google Secrets
    Manager、Azure Key Vault 等系统。其思想是为存储和管理密钥生命周期的外部 API 提供用户友好的抽象。
- en: In depth, ExternalSecrets is a Kubernetes controller that reconciles Secrets
    into the cluster from a Custom Resource that includes a reference to a secret
    in an external key management system. The Custom Resource `SecretStore` specifies
    the backend containing the confidential data, and how it should be transformed
    into a Secret by defining a template, as you can see in [Figure 8-2](#fig8-2).
    The SecretStore has the configuration to connect to the external secret manager.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalSecrets 深度上是一个 Kubernetes 控制器，它从包含指向外部密钥管理系统中密钥的参考的自定义资源中调解 Secrets
    到集群。自定义资源 `SecretStore` 指定了包含机密数据的后端，并定义了模板，通过它可以将其转换为 Secret，如您在 [Figure 8-2](#fig8-2)
    中看到的那样。SecretStore 具有配置以连接到外部密钥管理系统。
- en: Thus, the `ExternalSecrets` objects can be safely stored in Git, as they do
    not contain any confidential information, but just the references to the external
    services managing credentials.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`ExternalSecrets` 对象可以安全地存储在 Git 中，因为它们不包含任何机密信息，只包含管理凭据的外部服务的引用。
- en: '![External Secrets with Argo CD](assets/gocb_0802.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Argo CD 的外部 Secrets](assets/gocb_0802.png)'
- en: Figure 8-2\. External Secrets with Argo CD
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-2\. 使用 Argo CD 的外部 Secrets
- en: 'You can install External Secrets with a Helm Chart as follows. At the time
    of writing this book, we are using version 0.5.9:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤使用 Helm Chart 安装 External Secrets。在撰写本书时，我们使用的是版本 0.5.9：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should get output similar to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到类似以下的输出：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In order to begin using ExternalSecrets, you will need to set up a SecretStore
    or ClusterSecretStore resource (for example, by creating a *vault* SecretStore).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 ExternalSecrets，您需要设置一个 SecretStore 或 ClusterSecretStore 资源（例如，通过创建一个
    *vault* SecretStore）。
- en: More information on the different types of SecretStores and how to configure
    them can be found in our [GitHub page](https://oreil.ly/LQzEh).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于不同类型的 SecretStores 及如何配置它们的信息可以在我们的 [GitHub 页面](https://oreil.ly/LQzEh)
    找到。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can also install the External Secrets Operator with OLM from [OperatorHub.io](https://oreil.ly/w3x71).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过 [OperatorHub.io](https://oreil.ly/w3x71) 从 OLM 安装 External Secrets Operator。
- en: As an example with one of the providers supported, such as [HashiCorp Vault](https://oreil.ly/sg7yS),
    you can do the following.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用支持的提供商之一，如 [HashiCorp Vault](https://oreil.ly/sg7yS)，执行以下操作。
- en: 'First download and install [HashiCorp Vault](https://oreil.ly/vjGSq) for your
    operating system and get your [Vault Token](https://oreil.ly/6Y5cS). Then create
    a Kubernetes Secret as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载并安装适用于您操作系统的 [HashiCorp Vault](https://oreil.ly/vjGSq)，并获取您的 [Vault Token](https://oreil.ly/6Y5cS)。然后按照以下步骤创建一个
    Kubernetes Secret：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then create a `SecretStore` as a reference to this external system:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个 `SecretStore` 作为对这个外部系统的引用：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO2-1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO2-1)'
- en: Hostname where your Vault is running
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的 Vault 的主机名
- en: '[![2](assets/2.png)](#co_advanced_topics_CO2-2)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO2-2)'
- en: Name of the Kubernetes Secret containing the vault token
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 vault 令牌的 Kubernetes Secret 的名称
- en: '[![3](assets/3.png)](#co_advanced_topics_CO2-3)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO2-3)'
- en: 'Key to address the value in the Kubernetes Secret containing the vault token
    content:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用于访问包含 vault 令牌内容的 Kubernetes Secret 中的值的关键：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now you can create a Secret in your Vault as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照以下步骤在您的 Vault 中创建一个 Secret：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And then reference it from the `ExternalSecret` as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从 `ExternalSecret` 中引用它，如下所示：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now you can deploy the Pac-Man game with Argo CD using External Secrets as
    follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照以下步骤使用 External Secrets 使用 Argo CD 部署 Pac-Man 游戏：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 8.3 Trigger the Deployment of an Application Automatically (Argo CD Webhooks)
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.3 自动触发应用程序部署（Argo CD Webhooks）
- en: Problem
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You don’t want to wait for Argo CD syncs and you want to immediately deploy
    an application when a change occurs in Git.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您不想等待 Argo CD 同步，而是希望在 Git 中发生更改时立即部署应用程序。
- en: Solution
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: While Argo CD polls Git repositories every three minutes to detect changes to
    the monitored Kubernetes manifests, it also supports an event-driven approach
    with webhooks notifications from popular Git servers such as GitHub, GitLab, or
    Bitbucket.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Argo CD 每三分钟轮询 Git 仓库以检测受监视的 Kubernetes manifests 的更改，但它也支持来自流行 Git 服务器（如
    GitHub、GitLab 或 Bitbucket）的 webhook 通知的事件驱动方法。
- en: '[Argo CD Webhooks](https://oreil.ly/3Ab46) are enabled in your Argo CD installation
    and available at the endpoint `/api/webhooks`.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Argo CD 安装中启用了 [Argo CD Webhooks](https://oreil.ly/3Ab46)，并且可以在端点 `/api/webhooks`
    处使用。
- en: 'To test webhooks with Argo CD using Minikube you can use Helm to install a
    local Git server such as [Gitea](https://docs.gitea.io), an open source lightweight
    server written in Go, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Minikube 测试 Argo CD 的 webhook，您可以使用 Helm 安装一个本地 Git 服务器，如 [Gitea](https://docs.gitea.io)，一个用
    Go 编写的开源轻量级服务器，如下所示：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should have output similar to the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到类似以下的输出：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: Log in to the Gitea server with the default credentials you find the in the
    *values.yaml* file from the Helm Chart [here](https://oreil.ly/Nkaeu) or define
    new ones via overriding them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认凭据登录到 Gitea 服务器，您可以在 Helm Chart 的 *values.yaml* 文件中找到它们，或者通过覆盖定义新的凭据。您可以在这里找到
    Helm Chart 的链接：[here](https://oreil.ly/Nkaeu)。
- en: Import the [Pac-Man](https://oreil.ly/LwTaC) manifests repo into Gitea.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [Pac-Man](https://oreil.ly/LwTaC) manifests 仓库导入 Gitea。
- en: 'Configure the Argo app:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Argo 应用：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To add a webhook to Gitea, navigate to the top-right corner and click Settings.
    Select the Webhooks tab and configure it as shown in [Figure 8-3](#fig8-3):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要向 Gitea 添加 Webhook，请导航到右上角，然后单击“设置”。选择“Webhooks”选项卡，并按照[图 8-3](#fig8-3)中所示进行配置：
- en: 'Payload URL: `http://localhost:9090/api/webhooks`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载 URL：`http://localhost:9090/api/webhooks`
- en: 'Content type: `application/json`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容类型：`application/json`
- en: '![Gitea Webhooks](assets/gocb_0803.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Gitea Webhooks](assets/gocb_0803.png)'
- en: Figure 8-3\. Gitea Webhooks
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-3\. Gitea Webhooks
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: You can omit the Secret for this example; however, it’s best practice to configure
    secrets for your webhooks. Read more from the [docs](https://oreil.ly/udDkS).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您可以忽略密钥；但是，最佳实践是为您的 Webhooks 配置密钥。从[文档](https://oreil.ly/udDkS)中了解更多信息。
- en: Save it and push your change to the repo on Gitea. You will see a new sync from
    Argo CD immediately after your push.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并推送更改到 Gitea 上的仓库。在您推送后，您将立即看到来自 Argo CD 的新同步。
- en: 8.4 Deploy to Multiple Clusters
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.4 部署到多个集群
- en: Problem
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy an application to different clusters.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要将应用程序部署到不同的集群。
- en: Solution
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Argo CD supports the `ApplicationSet` resource to “templetarize” an Argo CD
    `Application` resource. It covers different use cases, but the most important
    are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Argo CD 支持 `ApplicationSet` 资源来“模板化” Argo CD `Application` 资源。它涵盖了不同的用例，但最重要的是：
- en: Use a Kubernetes manifest to target multiple Kubernetes clusters.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 清单来针对多个 Kubernetes 集群。
- en: Deploy multiple applications from one or multiple Git repositories.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个或多个 Git 仓库部署多个应用程序。
- en: Since the `ApplicationSet` is a template file with placeholders to substitute
    at runtime, we need to feed these with some values. For this purpose, `ApplicationSet`
    has the concept of *generators*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `ApplicationSet` 是一个包含运行时占位符的模板文件，我们需要用一些值来填充这些占位符。为此，`ApplicationSet` 具有
    *生成器* 的概念。
- en: A generator is responsible for generating the parameters, which will finally
    be replaced in the template placeholders to generate a valid Argo CD `Application`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器负责生成参数，这些参数最终将替换模板占位符，以生成有效的 Argo CD `Application`。
- en: 'Create the following `ApplicationSet`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下 `ApplicationSet`：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO3-1)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO3-1)'
- en: Defines a generator
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个生成器
- en: '[![2](assets/2.png)](#co_advanced_topics_CO3-2)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO3-2)'
- en: Sets the value of the parameters
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 设置参数的值
- en: '[![3](assets/3.png)](#co_advanced_topics_CO3-3)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO3-3)'
- en: Defines the `Application` resource as a template
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `Application` 资源定义为模板
- en: '[![4](assets/4.png)](#co_advanced_topics_CO3-4)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_advanced_topics_CO3-4)'
- en: '`cluster` placeholder'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`cluster` 占位符'
- en: '[![5](assets/5.png)](#co_advanced_topics_CO3-5)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_advanced_topics_CO3-5)'
- en: '`url` placeholder'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`url` 占位符'
- en: 'Apply the previous file by running the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令应用先前的文件：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When this `ApplicationSet` is applied to the cluster, Argo CD generates and
    automatically registers two `Application` resources. The first one is:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当将此 `ApplicationSet` 应用于集群时，Argo CD 会生成并自动注册两个 `Application` 资源。第一个是：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And the second one:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Inspect the creation of both `Application` resources by running the following
    command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查两个 `Application` 资源的创建：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And the output should be similar to (trunked):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于（已截断）：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Delete both applications by deleting the `ApplicationSet` file:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除 `ApplicationSet` 文件来删除这两个应用程序：
- en: '[PRE30]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Discussion
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'We’ve seen the simplest generator, but there are eight generators in total
    at the time of writing this book:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了最简单的生成器，但截至本书编写时总共有八个生成器：
- en: List
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 列表
- en: Generates `Application` definitions through a fixed list of clusters. (It’s
    the one we’ve seen previously).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个固定的集群列表生成 `Application` 定义。（这是我们之前看到的那个）。
- en: Cluster
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 集群
- en: Similar to *List* but based on the list of clusters defined in Argo CD.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 *List*，但基于 Argo CD 中定义的集群列表。
- en: Git
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Git
- en: Generates `Application` definitions based on a JSON/YAML properties file within
    a Git repository or based on the directory layout of the repository.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Git 仓库中的 JSON/YAML 属性文件或仓库的目录布局生成 `Application` 定义。
- en: SCM Provider
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: SCM 提供者
- en: Generates `Application` definitions from repositories within an organization.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组织内的仓库生成 `Application` 定义。
- en: Pull Request
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求
- en: Generates `Application` definitions from open pull requests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 从开放式拉取请求生成 `Application` 定义。
- en: Cluster Decision Resource
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 集群决策资源
- en: Generates `Application` definitions using [duck-typing](https://oreil.ly/kpRkV).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [鸭子类型](https://oreil.ly/kpRkV) 生成 `Application` 定义。
- en: Matrix
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵
- en: Combines values of two separate generators.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 结合两个独立生成器的值。
- en: Merge
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 合并
- en: Merges values from two or more generators.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 合并两个或更多生成器的值。
- en: In the previous example, we created the `Application` objects from a fixed list
    of elements. This is fine when the number of configurable environments is small;
    in the example, two clusters refer to two Git folders (`ch08/bgd-gen/staging`
    and `ch08/bgd-gen/prod`). In the case of multiple environments (which means various
    folders), we can dynamically use the *Git* generator to generate one `Application`
    per directory.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们从一个固定的元素列表中创建了`Application`对象。当可配置环境的数量较少时，这样做是合适的；例如，在示例中，两个集群分别指代两个
    Git 文件夹（`ch08/bgd-gen/staging`和`ch08/bgd-gen/prod`）。对于多个环境的情况（即多个文件夹），我们可以动态地使用*Git*生成器来为每个目录生成一个`Application`。
- en: 'Let’s migrate the previous example to use the Git generator. As a reminder,
    the Git directory layout used was:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前面的示例迁移到使用 Git 生成器。作为提醒，使用的 Git 目录布局是：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new file of type `ApplicationSet` generating an `Application` for
    each directory of the configured Git repo:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建类型为`ApplicationSet`的新文件，为配置的 Git 存储库中的每个目录生成一个`Application`：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO4-1)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO4-1)'
- en: Configures the Git repository to read layout
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Git 存储库以读取布局
- en: '[![2](assets/2.png)](#co_advanced_topics_CO4-2)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO4-2)'
- en: Initial path to start scanning directories
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 开始扫描目录的初始路径
- en: '[![3](assets/3.png)](#co_advanced_topics_CO4-3)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO4-3)'
- en: '`Application` definition'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application`定义'
- en: '[![4](assets/4.png)](#co_advanced_topics_CO4-4)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_advanced_topics_CO4-4)'
- en: The directory paths within the Git repository matching the path wildcard (`staging`
    or `prod`)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Git 存储库中与路径通配符（`staging`或`prod`）匹配的目录路径
- en: '[![5](assets/5.png)](#co_advanced_topics_CO4-5)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_advanced_topics_CO4-5)'
- en: Directory path (full path)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 目录路径（完整路径）
- en: '[![6](assets/6.png)](#co_advanced_topics_CO4-6)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_advanced_topics_CO4-6)'
- en: The rightmost pathname
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最右边的路径名
- en: 'Apply the resource:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 应用资源：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Argo CD creates two applications as there are two directories:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有两个目录，Argo CD 创建了两个应用程序：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Also, this generator is handy when your application is composed of different
    components (service, database, distributed cache, email server, etc.), and deployment
    files for each element are placed in other directories. Or, for example, a repository
    with all operators required to be installed in the cluster:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当您的应用程序由不同组件（服务、数据库、分布式缓存、电子邮件服务器等）组成，并且每个元素的部署文件放置在其他目录中时，此生成器也非常方便。或者，例如，一个包含所有要安装在集群中的操作器的存储库：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Instead of reacting to directories, Git generator can create `Application` objects
    with parameters specified in JSON/YAML files.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Git 生成器可以创建具有在 JSON/YAML 文件中指定的参数的`Application`对象，而不是响应目录。
- en: 'The following snippet shows an example JSON file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段显示了一个示例 JSON 文件：
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This is an excerpt of the `ApplicationSet` to react to these files:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于响应这些文件的`ApplicationSet`的节选：
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO5-1)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO5-1)'
- en: Finds all *config.json* files placed in all subdirectories of the `app`
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查找放置在`app`所有子目录中的所有*config.json*文件
- en: '[![2](assets/2.png)](#co_advanced_topics_CO5-2)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO5-2)'
- en: Injects the value set in *config.json*
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注入在*config.json*中设置的值
- en: This `ApplicationSet` will generate one `Application` for each *config.json*
    file in the folders matching the `path` expression.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 此`ApplicationSet`将为匹配`path`表达式的文件夹中的每个*config.json*文件生成一个`Application`。
- en: See Also
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Argo CD Generators](https://oreil.ly/EnOfl)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Argo CD 生成器](https://oreil.ly/EnOfl)'
- en: '[Duck Types](https://oreil.ly/tEFQW)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[鸭子类型](https://oreil.ly/tEFQW)'
- en: 8.5 Deploy a Pull Request to a Cluster
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.5 将拉取请求部署到集群
- en: Problem
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy a preview of the application when a pull request is created.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序预览时，希望在创建拉取请求时进行。
- en: Solution
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the *pull request* generator to automatically discover open pull requests
    within a repository and create an `Application` object.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*pull request*生成器自动发现存储库中的所有打开拉取请求，并创建一个`Application`对象。
- en: Let’s create an `ApplicationSet` reacting to any GitHub pull request annotated
    with the `preview` label created on the configured repository.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`ApplicationSet`来响应在配置的存储库上创建带有`preview`标签的 GitHub 拉取请求。
- en: 'Create a new file named *bgd-pr-application-set.yaml* with the following content:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建名为*bgd-pr-application-set.yaml*的新文件，其内容如下：
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO6-1)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO6-1)'
- en: GitHub pull request generator
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 拉取请求生成器
- en: '[![2](assets/2.png)](#co_advanced_topics_CO6-2)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO6-2)'
- en: Organization/user
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 组织/用户
- en: '[![3](assets/3.png)](#co_advanced_topics_CO6-3)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO6-3)'
- en: Repository
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库
- en: '[![4](assets/4.png)](#co_advanced_topics_CO6-4)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_advanced_topics_CO6-4)'
- en: Select the target PRs
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 选择目标 PR
- en: '[![5](assets/5.png)](#co_advanced_topics_CO6-5)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_advanced_topics_CO6-5)'
- en: Polling time in seconds to check if there is a new PR (60 seconds)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 轮询时间以检查是否有新的 PR（60 秒）
- en: '[![6](assets/6.png)](#co_advanced_topics_CO6-6)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_advanced_topics_CO6-6)'
- en: Sets the name with branch name and number
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分支名称和编号设置名称
- en: '[![7](assets/7.png)](#co_advanced_topics_CO6-7)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_advanced_topics_CO6-7)'
- en: Sets the Git SHA number
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Git SHA 号码
- en: 'Apply the previous file by running the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令应用先前的文件：
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, if you list the Argo CD applications, you’ll see that none are registered.
    The reason is there is no pull request yet in the repository labeled with `preview`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您列出 Argo CD 应用程序，您会发现没有注册任何应用程序。原因是仓库中尚未带有`preview`标签的拉取请求：
- en: '[PRE40]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create a pull request against the repository and label it with `preview`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 对仓库创建拉取请求并标记为`preview`。
- en: In GitHub, the pull request window should be similar to [Figure 8-4](#fig-851).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中，拉取请求窗口应类似于[图 8-4](#fig-851)。
- en: '![Pull request in GitHub](assets/gocb_0804.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![GitHub 中的拉取请求](assets/gocb_0804.png)'
- en: Figure 8-4\. Pull request in GitHub
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 8-4\. GitHub 中的拉取请求
- en: Wait for one minute until the `ApplicationSet` detects the change and creates
    the `Application` object.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 等待一分钟，直到`ApplicationSet`检测到更改并创建`Application`对象。
- en: 'Run the following command to inspect that the change has been detected and
    registered:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来检查是否已检测和注册更改：
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Check the registration of the `Application` to the pull request:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`Application`对拉取请求的注册：
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `Application` object is automatically removed when the pull request is closed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当拉取请求关闭时，`Application`对象会自动删除。
- en: Discussion
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: 'At the time of writing this book, the following pull request providers are
    supported:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写本书时，支持以下拉取请求提供者：
- en: GitHub
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Bitbucket
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Gitea
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gitea
- en: GitLab
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: The ApplicationSet controller polls every `requeueAfterSeconds` interval to
    detect changes but also supports using webhook events.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ApplicationSet 控制器每隔`requeueAfterSeconds`时间间隔轮询以检测变更，同时还支持使用 Webhook 事件。
- en: To configure it, follow [Recipe 8.3](#recipe_8_3), but also enable sending pull
    requests events too in the Git provider.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行配置，请参考[Recipe 8.3](#recipe_8_3)，但同时在 Git 提供商中也启用发送拉取请求事件。
- en: 8.6 Use Advanced Deployment Techniques
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.6 使用高级部署技术
- en: Problem
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You want to deploy the application using an advanced deployment technique such
    as blue-green or canary.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您希望使用蓝绿部署或金丝雀发布等先进的部署技术来部署应用程序。
- en: Solution
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决方案
- en: Use the [Argo Rollouts](https://oreil.ly/g4mlf) project to roll out updates
    to an application.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Argo Rollouts](https://oreil.ly/g4mlf) 项目来更新应用程序的部署。
- en: Argo Rollouts is a Kubernetes controller providing advanced deployment techniques
    such as blue-green, canary, mirroring, dark canaries, traffic analysis, etc. to
    Kubernetes. It integrates with many Kubernetes projects like Ambassador, Istio,
    AWS Load Balancer Controller, NGNI, SMI, or Traefik for traffic management, and
    projects like Prometheus, Datadog, and New Relic to perform analysis to drive
    progressive delivery.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Argo Rollouts 是一个 Kubernetes 控制器，提供先进的部署技术，如蓝绿部署、金丝雀发布、镜像、暗金丝雀、流量分析等，以供 Kubernetes
    使用。它与许多 Kubernetes 项目集成，如 Ambassador、Istio、AWS 负载均衡器控制器、NGNI、SMI 或 Traefik 用于流量管理，以及
    Prometheus、Datadog 和 New Relic 等项目用于执行分析以推动渐进式交付。
- en: 'To install Argo Rollouts to the cluster, run the following command in a terminal
    window:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Argo Rollouts 安装到集群中，请在终端窗口中运行以下命令：
- en: '[PRE43]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Although it’s not mandatory, we recommend you install the Argo Rollouts Kubectl
    Plugin to visualize rollouts. Follow the [instructions](https://oreil.ly/1GWsz)
    to install it. With everything in place, let’s deploy the initial version of the
    BGD application.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是强制性的，但我们建议您安装 Argo Rollouts Kubectl 插件以可视化部署过程。请按照[说明](https://oreil.ly/1GWsz)安装它。一切就绪后，让我们部署
    BGD 应用程序的初始版本。
- en: Argo Rollouts doesn’t use the standard Kubernetes `Deployment` file, but a specific
    new Kubernetes resource named `Rollout`. It’s like a `Deployment` object, hence
    all its options are supported, but it adds some fields to configure the rolling
    update.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Argo Rollouts 不使用标准 Kubernetes `Deployment` 文件，而是一个名为 `Rollout` 的特定新 Kubernetes
    资源。它类似于`Deployment`对象，因此支持其所有选项，但它添加了一些字段以配置滚动更新。
- en: 'Let’s deploy the first version of the application. We’ll define the canary
    release process when Kubernetes executes a rolling update, which in this case
    follows these steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署应用程序的第一个版本。当 Kubernetes 执行滚动更新时，我们将定义金丝雀发布过程，本例中的步骤如下：
- en: Forward 20% of traffic to the new version.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将20%的流量转发到新版本。
- en: Wait until a human decides to proceed with the process.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待人类决定是否继续进行。
- en: Forward 40%, 60%, 80% of the traffic to the new version automatically, waiting
    30 seconds between every increase.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动将40%、60%、80%的流量转发到新版本，每次增加后等待30秒。
- en: 'Create a new file named *bgd-rollout.yaml* with the following content:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为*bgd-rollout.yaml*的新文件，内容如下：
- en: '[PRE44]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO7-1)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO7-1)'
- en: Canary release
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀发布
- en: '[![2](assets/2.png)](#co_advanced_topics_CO7-2)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO7-2)'
- en: List of steps to execute
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行的步骤列表
- en: '[![3](assets/3.png)](#co_advanced_topics_CO7-3)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO7-3)'
- en: Sets the ratio of canary
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 设置金丝雀比例
- en: '[![4](assets/4.png)](#co_advanced_topics_CO7-4)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_advanced_topics_CO7-4)'
- en: Rollout is paused
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 发布被暂停
- en: '[![5](assets/5.png)](#co_advanced_topics_CO7-5)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_advanced_topics_CO7-5)'
- en: Pauses the rollout for 30 seconds
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停30秒后继续发布
- en: '[![6](assets/6.png)](#co_advanced_topics_CO7-6)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_advanced_topics_CO7-6)'
- en: '`template` Deployment definition'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`template`部署定义'
- en: 'Apply the resource to deploy the application. Since there is no previous deployment,
    the canary part is ignored:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 应用资源以部署应用程序。由于没有先前的部署，金丝雀部分被忽略：
- en: '[PRE45]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Currently, there are five pods as specified in the `replicas` field:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，根据`replicas`字段指定了五个Pod：
- en: '[PRE46]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'And using the Argo Rollout Kubectl Plugin:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用Argo Rollout Kubectl插件：
- en: '[PRE47]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let’s deploy a new version to trigger a canary rolling update. Create a new
    file named *bgd-rollout-v2.yaml* with exactly the same content as the previous
    one, but change the environment variable `COLOR` value to `green`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署一个新版本以触发金丝雀滚动更新。创建一个名为*bgd-rollout-v2.yaml*的新文件，内容与上一个文件完全相同，但将环境变量`COLOR`的值更改为`green`：
- en: '[PRE48]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Apply the previous resource and check how Argo Rollouts executes the rolling
    update. List the pods again to check that 20% of the pods are new while the other
    80% are the old version:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 应用先前的资源并检查Argo Rollouts如何执行滚动更新。再次列出Pod以确保20%的Pod是新的，而另外80%是旧版本：
- en: '[PRE49]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO8-1)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO8-1)'
- en: New version pod
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本Pod
- en: 'And do the same using the Argo Rollout Kubectl Plugin:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用Argo Rollout Kubectl插件执行相同操作：
- en: '[PRE50]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Remember that the rolling update process is paused until the operator executes
    a manual step to let the process continue. In a terminal window, run the following
    command:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，滚动更新过程暂停，直到操作员执行手动步骤才能让进程继续。在终端窗口中运行以下命令：
- en: '[PRE51]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The rollout is promoted and continues with the following steps, which is substituting
    the old version pods with new versions every 30 seconds:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 该发布被提升并继续以下步骤，即每30秒替换旧版本Pod为新版本：
- en: '[PRE52]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The rolling update finishes with the new version progressively deployed to the
    cluster.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本逐步部署到集群完成滚动更新。
- en: Discussion
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 讨论
- en: Kubernetes doesn’t implement advanced deployment techniques natively. For this
    reason, Argo Rollouts uses the number of deployed pods to implement the canary
    release.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes不原生实现高级部署技术。因此，Argo Rollouts使用已部署的Pod数量来实现金丝雀发布。
- en: As mentioned before, Argo Rollouts integrates with Kubernetes products that
    offer advanced traffic management capabilities like [Istio](https://istio.io).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Argo Rollouts与像[Istio](https://istio.io)这样提供高级流量管理功能的Kubernetes产品集成。
- en: Using Istio, the traffic splitting is done correctly at the infrastructure level
    instead of playing with replica numbers like in the first example. Argo Rollouts
    integrates with Istio to execute a canary release, automatically updating the
    Istio `VirtualService` object.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Istio，在基础设施级别正确执行流量分流，而不像第一个示例中玩弄副本数量。Argo Rollouts与Istio集成以执行金丝雀发布，自动更新Istio的`VirtualService`对象。
- en: Assuming you already know Istio and have a Kubernetes cluster with Istio installed,
    you can perform integration between Argo Rollouts and Istio by setting the `trafficRouting`
    from `Rollout` resource to `Istio`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已了解Istio并且具有安装了Istio的Kubernetes集群，您可以通过将`Rollout`资源的`trafficRouting`设置为`Istio`来执行Argo
    Rollouts与Istio的集成。
- en: 'First, create a `Rollout` file with Istio configured:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个带有Istio配置的`Rollout`文件：
- en: '[PRE53]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO9-1)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO9-1)'
- en: Canary section
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀部分
- en: '[![2](assets/2.png)](#co_advanced_topics_CO9-2)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO9-2)'
- en: Reference to a Kubernetes Service pointing to the new service version
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 引用指向新服务版本的Kubernetes Service
- en: '[![3](assets/3.png)](#co_advanced_topics_CO9-3)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO9-3)'
- en: Reference to a Kubernetes Service pointing to the old service version
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 指向旧服务版本的 Kubernetes 服务的引用
- en: '[![4](assets/4.png)](#co_advanced_topics_CO9-4)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_advanced_topics_CO9-4)'
- en: Configures Istio
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Istio
- en: '[![5](assets/5.png)](#co_advanced_topics_CO9-5)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_advanced_topics_CO9-5)'
- en: Reference to the `VirtualService` where weight is updated
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 更新权重的 `VirtualService` 的参考
- en: '[![6](assets/6.png)](#co_advanced_topics_CO9-6)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_advanced_topics_CO9-6)'
- en: Name of the `VirtualService`
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`VirtualService` 的名称'
- en: '[![7](assets/7.png)](#co_advanced_topics_CO9-7)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_advanced_topics_CO9-7)'
- en: Route name within `VirtualService`
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`VirtualService` 中的路由名称'
- en: '[![8](assets/8.png)](#co_advanced_topics_CO9-8)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_advanced_topics_CO9-8)'
- en: Deploys the Istio sidecar container
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Istio 边车容器
- en: Then, we create two Kubernetes Services pointing to the same deployment used
    to redirect traffic to the old or the new one.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建两个 Kubernetes 服务，指向相同的部署，用于将流量重定向到旧版本或新版本。
- en: 'The following Kubernetes Service is used in the `stableService` field:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 Kubernetes 服务用于 `stableService` 字段：
- en: '[PRE54]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And the Canary one is the same but with a different name. It’s the one used
    in the `canaryService` field:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀版本与之相同，但名称不同。它是在 `canaryService` 字段中使用的服务：
- en: '[PRE55]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Finally, create the Istio Virtual Service to be updated by Argo Rollouts to
    update the canary traffic for each service:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建 Istio 虚拟服务，由 Argo Rollouts 更新每个服务的金丝雀流量：
- en: '[PRE56]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[![1](assets/1.png)](#co_advanced_topics_CO10-1)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_advanced_topics_CO10-1)'
- en: Stable Kubernetes Service
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定的 Kubernetes 服务
- en: '[![2](assets/2.png)](#co_advanced_topics_CO10-2)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_advanced_topics_CO10-2)'
- en: Canary Kubernetes Service
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 金丝雀 Kubernetes 服务
- en: '[![3](assets/3.png)](#co_advanced_topics_CO10-3)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_advanced_topics_CO10-3)'
- en: Route name
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 路由名称
- en: 'After applying these resources, we’ll get the first version of the application
    up and running:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 应用这些资源后，我们将启动应用程序的第一个版本：
- en: '[PRE57]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: When any update occurs on the `Rollout` object, the canary release will start
    as described in the Solution. Now, Argo Rollouts updates the *bgd virtual service*
    weights automatically instead of playing with pod numbers.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `Rollout` 对象上发生任何更新时，将按照解决方案中描述的方式启动金丝雀发布。现在，Argo Rollouts 自动更新 *bgd 虚拟服务*
    的权重，而不是调整 Pod 数量。
- en: See Also
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Argo Rollouts - Kubernetes Progressive Delivery Controller](https://oreil.ly/XQ64b)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Argo Rollouts - Kubernetes 渐进交付控制器](https://oreil.ly/XQ64b)'
- en: '[Istio - Argo Rollouts](https://oreil.ly/lKDYH)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Istio - Argo Rollouts](https://oreil.ly/lKDYH)'
- en: '[Istio](https://istio.io)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Istio](https://istio.io)'
- en: '[Istio Tutorial from Red Hat](https://oreil.ly/Vzk9G)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[来自 Red Hat 的 Istio 教程](https://oreil.ly/Vzk9G)'
