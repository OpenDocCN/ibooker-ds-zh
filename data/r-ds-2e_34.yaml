- en: Chapter 28\. Quarto
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第28章 Quarto
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Quarto provides a unified authoring framework for data science, combining your
    code, its results, and your prose. Quarto documents are fully reproducible and
    support dozens of output formats, such as PDFs, Word files, presentations, and
    more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto为数据科学提供了一个统一的创作框架，结合了您的代码、其结果和您的文本。Quarto文档完全可重现，并支持多种输出格式，如PDF、Word文件、演示文稿等。
- en: 'Quarto files are designed to be used in three ways:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto文件设计用于三种方式：
- en: For communicating to decision-makers, who want to focus on the conclusions,
    not the code behind the analysis
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了向决策者传达重点结论，而非分析背后的代码
- en: For collaborating with other data scientists (including future you!), who are
    interested in both your conclusions and how you reached them (i.e., the code)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了与其他数据科学家（包括未来的自己）合作，他们对您的结论和您达到这些结论的方式（即代码）都感兴趣
- en: As an environment in which to *do* data science, as a modern-day lab notebook
    where you can capture not only what you did but also what you were thinking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一个环境，用于*进行*数据科学，作为一个现代化的实验笔记本，在这里您不仅可以记录您的操作，还可以记录您的思考过程
- en: Quarto is a command-line interface tool, not an R package. This means that help
    is, by and large, not available through `?`. Instead, as you work through this
    chapter and use Quarto in the future, you should refer to the [Quarto documentation](https://oreil.ly/_6LNH).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto是一个命令行界面工具，而不是一个R包。这意味着帮助通常不能通过`?`获得。因此，在您阅读本章并在将来使用Quarto时，您应参考[Quarto文档](https://oreil.ly/_6LNH)。
- en: If you’re an R Markdown user, you might be thinking, “Quarto sounds a lot like
    R Markdown.” You’re not wrong! Quarto unifies the functionality of many packages
    from the R Markdown ecosystem (rmarkdown, bookdown, distill, xaringan, etc.) into
    a single consistent system as well as extends it with native support for multiple
    programming languages such as Python and Julia in addition to R. In a way, Quarto
    reflects everything that was learned from expanding and supporting the R Markdown
    ecosystem for a decade.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是R Markdown用户，您可能会想：“Quarto听起来很像R Markdown。” 您没有错！ Quarto将R Markdown生态系统中许多包的功能统一到一个一致的系统中，并通过本地支持多种编程语言（例如Python和Julia，除了R）来扩展它。在某种程度上，Quarto反映了十年来扩展和支持R
    Markdown生态系统所学到的一切。
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: You need the Quarto command-line interface (Quarto CLI), but you don’t need
    to explicitly install it or load it, as RStudio automatically does both when needed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用Quarto命令行界面（Quarto CLI），但不需要显式安装或加载它，因为RStudio在需要时会自动完成。
- en: Quarto Basics
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Quarto基础
- en: 'This is a Quarto file—a plain-text file that has the extension `.qmd`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Quarto文件，即扩展名为`.qmd`的纯文本文件：
- en: '[PRE0]{r}'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]{r}'
- en: '#| label: setup'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: setup'
- en: '#| include: false'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '#| include: false'
- en: library(tidyverse)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: smaller <- diamonds |>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: smaller <- diamonds |>
- en: filter(carat <= 2.5)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: filter(carat <= 2.5)
- en: '[PRE1]{r}'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]{r}'
- en: '#| label: plot-smaller-diamonds'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: plot-smaller-diamonds'
- en: '#| echo: false'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '#| echo: false'
- en: smaller |>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: smaller |>
- en: ggplot(aes(x = carat)) +
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(aes(x = carat)) +
- en: geom_freqpoly(binwidth = 0.01)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: geom_freqpoly(binwidth = 0.01)
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It contains three important types of content:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含三种重要类型的内容：
- en: An (optional) *YAML header* surrounded by `---`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`---`包围的（可选的）*YAML头部*
- en: '*Chunks* of R code surrounded by [PRE3]'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R代码*块*，用[PRE3]包围
- en: Text mixed with simple text formatting like `# heading` and `_italics_`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本与简单文本格式化，如`# heading`和 `_italics_`
- en: '[Figure 28-1](#fig-diamond-sizes-notebook) shows a `.qmd` document in RStudio
    with a notebook interface where code and output are interleaved. You can run each
    code chunk by clicking the Run icon (it looks like a play button at the top of
    the chunk) or by pressing Cmd/Ctrl+Shift+Enter. RStudio executes the code and
    displays the results inline with the code.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[图28-1](#fig-diamond-sizes-notebook)显示了在RStudio中具有笔记本界面的`.qmd`文档，其中代码和输出交错显示。您可以通过单击代码块顶部的播放按钮（看起来像一个播放按钮）或按下Cmd/Ctrl+Shift+Enter来运行每个代码块。
    RStudio会执行代码并将结果与代码内联显示。'
- en: '![RStudio window with a Quarto document titled "diamond-sizes.qmd" on the left
    and a blank Viewer window on the right. The Quarto document has a code chunk that
    creates a frequency plot of diamonds that weigh less than 2.5 carats. The plot
    shows that the frequency decreases as the weight increases.](assets/rds2_2801.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![在左侧显示名为“diamond-sizes.qmd”的Quarto文档的RStudio窗口，右侧是空白的Viewer窗口。Quarto文档包含一个代码块，用于创建少于2.5克拉钻石频率图。该图表明随着重量增加，频率减少。](assets/rds2_2801.png)'
- en: Figure 28-1\. A Quarto document in RStudio. Code and output are interleaved
    in the document, with the plot output appearing right underneath the code.
  id: totrans-32
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-1\. 在 RStudio 中显示的 Quarto 文档。代码和输出交错显示，绘图输出紧跟在代码下方。
- en: If you don’t like seeing your plots and output in your document and would rather
    make use of RStudio’s Console and Plots panes, you can click the gear icon next
    to Render and switch to Chunk Output in Console, as shown in [Figure 28-2](#fig-diamond-sizes-console-output).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不喜欢在文档中看到图表和输出，并且宁愿使用 RStudio 的 Console 和 Plot 窗格，您可以单击“Render”旁边的齿轮图标，切换到
    Console 中显示块输出选项，如 [图 28-2](#fig-diamond-sizes-console-output) 所示。
- en: '![RStudio window with a Quarto document titled "diamond-sizes.qmd" on the left
    and the Plot pane on the bottom right. The Quarto document has a code chunk that
    creates a frequency plot of diamonds that weigh less than 2.5 carats. The plot
    is displayed in the Plot pane and shows that the frequency decreases as the weight
    increases. The RStudio option to show Chunk Output in Console is also highlighted.](assets/rds2_2802.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![RStudio 窗口左侧显示名为 "diamond-sizes.qmd" 的 Quarto 文档，右下方显示 Plot 窗格。Quarto 文档包含一个代码块，用于创建少于
    2.5 克拉钻石的频率图。Plot 窗格显示频率随重量增加而减少的情况。RStudio 中显示在 Console 中显示块输出选项也被突出显示。](assets/rds2_2802.png)'
- en: Figure 28-2\. A Quarto document in RStudio with the plot output in the Plots
    pane.
  id: totrans-35
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-2\. 在 RStudio 中显示的带有绘图输出的 Quarto 文档。
- en: To produce a complete report containing all text, code, and results, click Render
    or press Cmd/Ctrl+Shift+K. You can also do this programmatically with `quarto::quarto_render("diamond-sizes.qmd")`.
    This will display the report in the viewer pane as shown in [Figure 28-3](#fig-diamond-sizes-report)
    and create an HTML file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成包含所有文本、代码和结果的完整报告，请单击“Render”或按下 Cmd/Ctrl+Shift+K。您还可以使用 `quarto::quarto_render("diamond-sizes.qmd")`
    进行编程方式操作。这将在 [图 28-3](#fig-diamond-sizes-report) 中显示报告，并创建一个 HTML 文件。
- en: '![RStudio window with a Quarto document titled "diamond-sizes.qmd" on the left
    and the Plot pane on the bottom right. The rendered document does not show any
    of the code, but the code is visible in the source document.](assets/rds2_2803.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![RStudio 窗口左侧显示名为 "diamond-sizes.qmd" 的 Quarto 文档，右下方显示 Plot 窗格。渲染后的文档不显示任何代码，但源文件中可见代码。](assets/rds2_2803.png)'
- en: Figure 28-3\. A Quarto document in RStudio with the rendered document in the
    Viewer pane.
  id: totrans-38
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-3\. 在 RStudio 中使用渲染后的 Viewer 窗格显示的 Quarto 文档。
- en: When you render the document, Quarto sends the `.qmd` file to [knitr](https://oreil.ly/HvFDz),
    which executes all of the code chunks and creates a new Markdown (`.md`) document
    that includes the code and its output. The Markdown file generated by knitr is
    then processed by [pandoc](https://oreil.ly/QxUsn), which is responsible for creating
    the finished file. [Figure 28-4](#fig-quarto-flow) shows this process. The advantage
    of this two-step workflow is that you can create a very wide range of output formats,
    as you’ll learn about in [Chapter 29](ch29.xhtml#chp-quarto-formats).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您渲染文档时，Quarto 将 `.qmd` 文件发送到 [knitr](https://oreil.ly/HvFDz)，后者执行所有代码块并创建包含代码及其输出的新
    Markdown（`.md`）文档。knitr 生成的 Markdown 文件随后由 [pandoc](https://oreil.ly/QxUsn) 处理，负责创建最终的文件。[图
    28-4](#fig-quarto-flow) 展示了这一过程。这种两步工作流的优势在于您可以创建多种输出格式，详细内容请参见 [第 29 章](ch29.xhtml#chp-quarto-formats)。
- en: '![Workflow diagram starting with a qmd file, then knitr, then md, then pandoc,
    then PDF, MS Word, or HTML. ](assets/rds2_2804.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![工作流程图从 qmd 文件开始，然后经过 knitr、md、pandoc，最终生成 PDF、MS Word 或 HTML 文件。](assets/rds2_2804.png)'
- en: Figure 28-4\. Diagram of Quarto workflow from qmd, to knitr, to md, to pandoc,
    to output in PDF, MS Word, or HTML formats.
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-4\. Quarto 工作流程图，从 qmd 到 knitr，再到 md，最后由 pandoc 输出为 PDF、MS Word 或 HTML
    格式。
- en: To get started with your own `.qmd` file, select File > New File > Quarto Document…
    in the menu bar. RStudio will launch a wizard that you can use to prepopulate
    your file with useful content that reminds you how the key features of Quarto
    work.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用您自己的 `.qmd` 文件，请在菜单栏中选择“文件 > 新建文件 > Quarto 文档…”。RStudio 将启动一个向导，您可以使用它来预填充文件，以提醒您
    Quarto 的关键功能如何工作。
- en: 'The following sections dive into the three components of a Quarto document
    in more details: the Markdown text, the code chunks, and the YAML header.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的章节详细介绍了 Quarto 文档的三个组成部分：Markdown 文本、代码块和 YAML 头部。
- en: Exercises
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Create a new Quarto document by selecting File > New File > Quarto Document.
    Read the instructions. Practice running the chunks individually. Then render the
    document by clicking the appropriate button and then by using the appropriate
    keyboard shortcut. Verify that you can modify the code, rerun it, and see modified
    output.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择 文件 > 新文件 > Quarto 文档 创建一个新的 Quarto 文档。阅读说明。练习逐个运行代码块。然后通过单击适当的按钮以及使用适当的键盘快捷键来渲染文档。验证您可以修改代码、重新运行它并查看修改后的输出。
- en: 'Create one new Quarto document for each of the three built-in formats: HTML,
    PDF, and Word. Render each of the three documents. How do the outputs differ?
    How do the inputs differ? (You may need to install LaTeX to build the PDF output—RStudio
    will prompt you if this is necessary.)'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每种内置格式（HTML、PDF 和 Word）创建一个新的 Quarto 文档。渲染这三个文档。它们的输出有什么不同？它们的输入又有什么不同？（如果需要，您可能需要安装
    LaTeX 来构建 PDF 输出 —— 如果需要，RStudio 将提示您。）
- en: Visual Editor
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化编辑器
- en: The visual editor in RStudio provides a [WYSIWYM interface](https://oreil.ly/nEiGf)
    for authoring Quarto documents. Under the hood, prose in Quarto documents (`.qmd`
    files) is written in Markdown, a lightweight set of conventions for formatting
    plain-text files. In fact, Quarto uses Pandoc markdown (a slightly extended version
    of Markdown that Quarto understands), including tables, citations, cross-references,
    footnotes, divs/spans, definition lists, attributes, raw HTML/TeX, and more, as
    well as support for executing code cells and viewing their output inline. While
    Markdown is designed to be easy to read and write, as you will see in [“Source
    Editor”](#sec-source-editor), it still requires learning new syntax. Therefore,
    if you’re new to computational documents like `.qmd` files but have experience
    using tools like Google Docs or MS Word, the easiest way to get started with Quarto
    in RStudio is the visual editor.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: RStudio 中的可视化编辑器为编写 Quarto 文档提供了所见即所得的界面。在幕后，Quarto 文档（`.qmd` 文件）中的文本是用 Markdown
    编写的，这是一种用于格式化纯文本文件的轻量级约定。事实上，Quarto 使用 Pandoc markdown（Quarto 理解的略微扩展版本的 Markdown），包括表格、引用、交叉引用、脚注、div/span、定义列表、属性、原始
    HTML/TeX 等，以及支持执行代码单元格并在行内查看其输出。虽然 Markdown 设计成易于阅读和书写，正如您将在 [“源编辑器”](#sec-source-editor)
    中看到的那样，但仍然需要学习新的语法。因此，如果您是新手，对于像 `.qmd` 文件这样的计算文档但有使用 Google Docs 或 MS Word 等工具的经验，开始使用
    RStudio 中的 Quarto 最简单的方法是使用可视化编辑器。
- en: In the visual editor either you can use the buttons on the menu bar to insert
    images, tables, cross-references, etc., or you can use the catch-all `Cmd/Ctrl+/`
    shortcut to insert just about anything. If you are at the beginning of a line
    (as shown in [Figure 28-5](#fig-visual-editor)), you can also enter just `/` to
    invoke the shortcut.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化编辑器中，您可以使用菜单栏上的按钮来插入图片、表格、交叉引用等，或者您可以使用全能的 `Cmd/Ctrl+/` 快捷键来插入几乎任何内容。如果您在一行的开头（如在
    [图 28-5](#fig-visual-editor) 中所示），您还可以仅输入 `/` 来调用该快捷方式。
- en: '![A Quarto document displaying various features of the visual editor such as
    text formatting (italic, bold, underline, small caps, code, superscript, and subscript),
    first through third level headings, bulleted and numbered lists, links, linked
    phrases, and images (along with a pop-up window for customizing image size, adding
    a caption and alt text, etc.), tables with a header row, and the insert anything
    tool with options to insert an R code chunk, a Python code chunk, a div, a bullet
    list, a numbered list, or a first level heading (the top few choices in the tool).](assets/rds2_2805.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![一个 Quarto 文档展示了视觉编辑器的各种功能，如文本格式（斜体、粗体、下划线、小型大写字母、代码、上标和下标）、一到三级标题、项目符号和编号列表、链接、链接短语和图片（包括用于自定义图片大小、添加标题和
    alt 文本等的弹出窗口）、带有标题行的表格，以及插入任何内容工具，可选项包括插入 R 代码块、Python 代码块、div、项目符号列表、编号列表或一级标题（工具中的前几个选择）。](assets/rds2_2805.png)'
- en: Figure 28-5\. Quarto visual editor.
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 28-5\. Quarto 可视化编辑器。
- en: Inserting images and customizing how they are displayed is also facilitated
    with the visual editor. Either you can paste an image from your clipboard directly
    into the visual editor (and RStudio will place a copy of that image in the project
    directory and link to it) or you can use the visual editor’s Insert > Figure/Image
    menu to browse to the image you want to insert or paste its URL. In addition,
    using the same menu you can resize the image as well as add a caption, alternative
    text, and a link.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 插入图像并自定义其显示方式也可以通过视觉编辑器轻松完成。您可以直接将图像从剪贴板粘贴到视觉编辑器中（RStudio将在项目目录中放置该图像的副本并链接到它），或者您可以使用视觉编辑器的插入
    > 图片/图形菜单浏览要插入的图像或粘贴其URL。此外，使用相同的菜单，您还可以调整图像的大小，并添加标题、替代文本和链接。
- en: The visual editor has many more features that we haven’t enumerated here that
    you might find useful as you gain experience authoring with it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉编辑器有许多我们未在此列出的功能，当您使用它撰写文稿时，您可能会发现它们非常有用。
- en: Most importantly, while the visual editor displays your content with formatting,
    under the hood, it saves your content in plain Markdown, and you can switch back
    and forth between the visual and source editors to view and edit your content
    using either tool.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，虽然视觉编辑器显示带有格式的内容，但在幕后，它会将您的内容保存为纯Markdown，并且您可以在视觉和源编辑器之间切换，以查看和编辑您的内容。
- en: Exercises
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Re-create the document in [Figure 28-5](#fig-visual-editor) using the visual
    editor.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用视觉编辑器重新创建[图 28-5](#fig-visual-editor)中的文档。
- en: Using the visual editor, insert a code chunk using the Insert menu and then
    the insert anything tool.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用视觉编辑器，使用插入菜单和插入任何工具插入代码块。
- en: 'Using the visual editor, figure out how to:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用视觉编辑器，找出如何：
- en: Add a footnote.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个脚注。
- en: Add a horizontal rule.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个水平分隔线。
- en: Add a block quote.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个块引用。
- en: In the visual editor, select Insert > Citation and insert a citation to the
    paper titled [“Welcome to the Tidyverse”](https://oreil.ly/I9_I7) using its digital
    object identifier (DOI), which is [10.21105/joss.01686](https://oreil.ly/H_Xn-).
    Render the document and observe how the reference shows up in the document. What
    change do you observe in the YAML of your document?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视觉编辑器中，选择插入 > 引用，并使用其数字对象标识符（DOI）插入标题为[“欢迎来到Tidyverse”](https://oreil.ly/I9_I7)的论文的引用，其DOI是[10.21105/joss.01686](https://oreil.ly/H_Xn-)。渲染文档并观察引用如何显示在文档中。您在文档的YAML中观察到了什么变化？
- en: Source Editor
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源编辑器
- en: You can also edit Quarto documents using the source editor in RStudio, without
    the assist of the visual editor. While the visual editor will feel familiar to
    those with experience writing in tools like Google Docs, the source editor will
    feel familiar to those with experience writing R scripts or R Markdown documents.
    The source editor can also be useful for debugging any Quarto syntax errors since
    it’s often easier to catch these in plain text.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在RStudio中使用源编辑器编辑Quarto文档，无需视觉编辑器的帮助。虽然对于那些习惯于使用Google Docs等工具进行编写的人来说，视觉编辑器会感觉很熟悉，但对于那些有编写R脚本或R
    Markdown文档经验的人来说，源编辑器会更为熟悉。源编辑器还可以用于调试任何Quarto语法错误，因为通常更容易在纯文本中捕捉这些错误。
- en: 'The following guide shows how to use Pandoc’s Markdown for authoring Quarto
    documents in the source editor:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指南展示了如何在源编辑器中使用Pandoc的Markdown来撰写Quarto文档：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The best way to learn these is simply to try them. It will take a few days,
    but soon they will become second nature, and you won’t need to think about them.
    If you forget, you can get to a handy reference sheet with Help > Markdown Quick
    Reference.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 学习这些内容的最佳方式就是简单地尝试它们。这可能需要几天时间，但很快它们就会成为第二天性，您不需要再去考虑它们。如果您忘记了，您可以通过帮助 > Markdown快速参考来获取便捷的参考表。
- en: Exercises
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Practice what you’ve learned by creating a brief résumé. The title should be
    your name, and you should include headings for (at least) education or employment.
    Each of the sections should include a bulleted list of jobs/degrees. Highlight
    the year in bold.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个简要的简历来实践所学内容。标题应为您的姓名，并包括至少教育或就业的标题。每个部分应包括职位/学位的项目列表。用粗体标出年份。
- en: 'Using the source editor and the Markdown quick reference, figure out how to:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用源编辑器和Markdown快速参考，找出如何：
- en: Add a footnote.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个脚注。
- en: Add a horizontal rule.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个水平分隔线。
- en: Add a block quote.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个块引用。
- en: Copy and paste the contents of [`diamond-sizes.qmd`](https://oreil.ly/Auuh2)
    into a local R Quarto document. Check that you can run it, and then add text after
    the frequency polygon that describes its most striking features.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将[`diamond-sizes.qmd`](https://oreil.ly/Auuh2)的内容复制并粘贴到本地的R Quarto文档中。检查是否可以运行它，然后在频率多边形之后添加文本，描述其最引人注目的特点。
- en: Create a document in Google Docs or MS Word (or locate a document you have created
    previously) with some content in it such as headings, hyperlinks, formatted text,
    etc. Copy the contents of this document and paste it into a Quarto document in
    the visual editor. Then, switch to the source editor and inspect the source code.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google Docs或MS Word中创建文档（或找到之前创建的文档），其中包含标题、超链接、格式化文本等内容。将此文档的内容复制并粘贴到视觉编辑器中的Quarto文档中。然后切换到源编辑器并检查源代码。
- en: Code Chunks
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码块
- en: 'To run code inside a Quarto document, you need to insert a chunk. There are
    three ways to do so:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Quarto文档中运行代码，您需要插入一个代码块。有三种方法可以做到这一点：
- en: Pressing the keyboard shortcut Cmd+Option+I/Ctrl+Alt+I
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下键盘快捷键Cmd+Option+I/Ctrl+Alt+I
- en: Clicking the insert button icon in the editor toolbar
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击编辑器工具栏中的插入按钮图标
- en: Manually typing the chunk delimiters [PRE5] and [PRE6]
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动键入代码块界定符[PRE5]和[PRE6]
- en: We’d recommend you learn the keyboard shortcut. It will save you a lot of time
    in the long run!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议您学习这个键盘快捷键。长远来看，这将为您节省大量时间！
- en: 'You can continue to run the code using the keyboard shortcut that by now (we
    hope!) you know and love: Cmd/Ctrl+Enter. However, chunks get a new keyboard shortcut,
    Cmd/Ctrl+Shift+Enter, which runs all the code in the chunk. Think of a chunk like
    a function. A chunk should be relatively self-contained and focused around a single
    task.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以继续使用键盘快捷键运行代码，到现在为止（我们希望如此！）您已经熟悉并喜爱：Cmd/Ctrl+Enter。然而，代码块有一个新的键盘快捷键，Cmd/Ctrl+Shift+Enter，它运行代码块中的所有代码。将代码块视为函数。代码块应该相对独立，并围绕单个任务进行重点。
- en: The following sections describe the chunk header that consists of [PRE7], followed
    by an optional chunk label and various other chunk options, each on their own
    line, marked by `#|`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的部分描述了由[PRE7]组成的代码块头部，后跟可选的代码块标签和各种其他代码块选项，每个选项占据一行，由`#|`标记。
- en: Chunk Label
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码块标签
- en: 'Chunks can be given an optional label:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块可以有一个可选的标签：
- en: '[PRE8]{r}'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE8]{r}'
- en: '#| label: simple-addition'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '#| 标签：simple-addition'
- en: 1 + 1
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 1 + 1
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This has three advantages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这有三个优点：
- en: 'You can more easily navigate to specific chunks using the drop-down code navigator
    in the bottom left of the script editor:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以更轻松地使用位于脚本编辑器左下角的下拉式代码导航器导航到特定的代码块：
- en: '![Snippet of RStudio IDE showing only the drop-down code navigator which shows
    three chunks. Chunk 1 is setup. Chunk 2 is cars and it is in a section called
    Quarto. Chunk 3 is pressure and it is in a section called Including plots.](assets/rds2_28in01.png)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示仅显示三个代码块的RStudio IDE截图。第1个块是设置。第2个块是汽车，位于Quarto部分。第3个块是压力，位于包含图表的部分。](assets/rds2_28in01.png)'
- en: Graphics produced by the chunks will have useful names that make them easier
    to use elsewhere. More on that in [“Figures”](#sec-figures).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由代码块生成的图形将具有有用的名称，使它们更容易在其他地方使用。更多信息请参阅[“图形”](#sec-figures)。
- en: You can set up networks of cached chunks to avoid re-performing expensive computations
    on every run. More on that in [“Caching”](#sec-caching).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以设置缓存代码块的网络，以避免在每次运行时重新执行昂贵的计算。更多信息请参阅[“缓存”](#sec-caching)。
- en: Your chunk labels should be short but evocative and should not contain spaces.
    We recommend using dashes (`-`) to separate words (instead of underscores, `_`)
    and avoiding other special characters in chunk labels.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码块标签应该简短而富有启发性，并且不应包含空格。我们建议使用破折号（`-`）来分隔单词（而不是下划线`_`），并避免在代码块标签中使用其他特殊字符。
- en: 'You are generally free to label your chunk however you like, but there is one
    chunk name that imbues special behavior: `setup`. When you’re in a notebook mode,
    the chunk named `setup` will be run automatically once, before any other code
    is run.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以自由地对代码块进行标记，但有一个特殊行为的代码块名称：`setup`。当您处于笔记本模式时，名为`setup`的代码块将在运行任何其他代码之前自动运行一次。
- en: Additionally, chunk labels cannot be duplicated. Each chunk label must be unique.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，代码块标签不能重复。每个代码块标签必须是唯一的。
- en: Chunk Options
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码块选项
- en: Chunk output can be customized with *options*, fields supplied to the chunk
    header. Knitr provides almost 60 options that you can use to customize your code
    chunks. Here we’ll cover the most important chunk options that you’ll use frequently.
    You can see the full list [here](https://oreil.ly/38bld).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块输出可以通过 *选项* 自定义，这些选项是提供给代码块标题的字段。Knitr 提供了近 60 个选项，您可以使用它们来自定义代码块。在这里，我们将涵盖您经常使用的最重要的代码块选项。您可以在
    [这里](https://oreil.ly/38bld) 查看完整列表。
- en: 'The most important set of options controls if your code block is executed and
    what results are inserted in the finished report:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一组选项控制代码块是否执行以及在最终报告中插入的结果：
- en: '`eval: false`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`eval: false`'
- en: Prevents code from being evaluated. (And obviously if the code is not run, no
    results will be generated.) This is useful for displaying example code, or for
    disabling a large block of code without commenting each line.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 防止代码被评估。（显然，如果代码未运行，则不会生成结果。）这对显示示例代码或禁用大块代码而不是每行注释非常有用。
- en: '`include: false`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`include: false`'
- en: Runs the code but doesn’t show the code or results in the final document. Use
    this for setup code that you don’t want cluttering your report.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码，但不在最终文档中显示代码或结果。用于不想在报告中看到的设置代码。
- en: '`echo: false`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo: false`'
- en: Prevents code, but not the results, from appearing in the finished file. Use
    this when writing reports aimed at people who don’t want to see the underlying
    R code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 防止代码，但结果不会出现在最终文件中。用于写给不想看到底层 R 代码的人的报告。
- en: '`message: false` or `warning: false`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`message: false` 或 `warning: false`'
- en: Prevents messages or warnings from appearing in the finished file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 防止消息或警告出现在最终文件中。
- en: '`results: hide`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`results: hide`'
- en: Hides printed output.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏打印输出。
- en: '`fig-show: hide`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`fig-show: hide`'
- en: Hides plots.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏绘图。
- en: '`error: true`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`error: true`'
- en: 'Causes the render to continue even if code returns an error. This is rarely
    something you’ll want to include in the final version of your report, but can
    be useful if you need to debug exactly what is going on inside your `.qmd`. It’s
    also useful if you’re teaching R and want to deliberately include an error. The
    default, `error: false`, causes rendering to fail if there is a single error in
    the document.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '导致渲染继续即使代码返回错误。这在最终版本的报告中很少出现，但如果需要调试 `.qmd` 中发生的情况，则非常有用。如果您正在教学 R 并希望故意包含错误，则也很有用。默认情况下，`error:
    false` 会导致文档中有一个错误时渲染失败。'
- en: 'Each of these chunk options gets added to the header of the chunk, following
    `#|`. For example, in the following chunk, the result is not printed since `eval`
    is set to false:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代码块选项都添加到代码块标题后面，例如，在下面的代码块中，由于 `eval` 设置为 false，结果不会打印：
- en: '[PRE11]{r}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11]{r}'
- en: '#| label: simple-multiplication'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: simple-multiplication'
- en: '#| eval: false'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '#| eval: false'
- en: 2 * 2
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 2 * 2
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following table summarizes which types of output each option suppresses:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了每个选项抑制的输出类型：
- en: '| Option | Run Code | Show Code | Output | Plots | Messages | Warnings |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 运行代码 | 显示代码 | 输出 | 绘图 | 消息 | 警告 |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| `eval: false` | X |   | X | X | X | X |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `eval: false` | X |   | X | X | X | X |'
- en: '| `include: false` |   | X | X | X | X | X |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `include: false` |   | X | X | X | X | X |'
- en: '| `echo: false` |   | X |   |   |   |   |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `echo: false` |   | X |   |   |   |   |'
- en: '| `results: hide` |   |   | X |   |   |   |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `results: hide` |   |   | X |   |   |   |'
- en: '| `fig-show: hide` |   |   |   | X |   |   |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `fig-show: hide` |   |   |   | X |   |   |'
- en: '| `message: false` |   |   |   |   | X |   |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `message: false` |   |   |   |   | X |   |'
- en: '| `warning: false` |   |   |   |   |   | X |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `warning: false` |   |   |   |   |   | X |'
- en: Global Options
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局选项
- en: As you work more with knitr, you will discover that some of the default chunk
    options don’t fit your needs and you want to change them.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您与 knitr 的更多工作，您会发现一些默认代码块选项不符合您的需求，您希望更改它们。
- en: 'You can do this by adding the preferred options in the document YAML, under
    `execute`. For example, if you are preparing a report for an audience who does
    not need to see your code but only your results and narrative, you might set `echo:
    false` at the document level. That will hide the code by default and show only
    the chunks you deliberately choose to show (with `echo: true`). You might consider
    setting `message: false` and `warning: false`, but that would make it harder to
    debug problems because you wouldn’t see any messages in the final document.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以通过在文档 YAML 下的 `execute` 中添加首选选项来实现此目的。例如，如果您正在为一个不需要看到您的代码但只需要看到结果和叙述的受众准备报告，可以在文档级别设置
    `echo: false`。这将默认隐藏代码，并仅显示您选择显示的块（`echo: true`）。您可能考虑设置 `message: false` 和 `warning:
    false`，但这会使调试问题更困难，因为您在最终文档中看不到任何消息。'
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since Quarto is designed to be multilingual (it works with R as well as other
    languages like Python, Julia, etc.), all of the knitr options are not available
    at the document execution level since some of them work only with knitr and not
    other engines Quarto uses for running code in other languages (e.g., Jupyter).
    You can, however, still set these as global options for your document under the
    `knitr` field, under `opts_chunk`. For example, when writing books and tutorials
    we set:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Quarto 被设计为多语言（它与 R 以及其他语言如 Python，Julia 等一起工作），文档执行级别上并不可用所有的 knitr 选项，因为其中一些只能与
    knitr 一起使用，并不能与 Quarto 用于其他语言的引擎（例如 Jupyter）一起使用。然而，您仍然可以将它们作为文档的全局选项设置在 `knitr`
    字段下的 `opts_chunk` 下。例如，在编写书籍和教程时，我们设置：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This uses our preferred comment formatting and ensures that the code and output
    are kept closely entwined.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了我们首选的注释格式，并确保代码和输出紧密相关。
- en: Inline Code
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联代码
- en: 'There is one other way to embed R code into a Quarto document: directly into
    the text, with `` `r ` ``. This can be useful if you mention properties of your
    data in the text. For example, the example document used at the start of the chapter
    had:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有另一种方法可以将 R 代码嵌入到 Quarto 文档中：直接在文本中使用 `` `r ` ``。如果您在文本中提及数据的属性，这将非常有用。例如，在本章开头使用的示例文档中有：
- en: 'We have data about `` `r nrow(diamonds)` `` diamonds. Only `` `r nrow(diamonds)
    - nrow(smaller)` `` are larger than 2.5 carats. The distribution of the remainder
    is shown below:'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们有关于 `` `r nrow(diamonds)` `` 颗钻石的数据。只有 `` `r nrow(diamonds) - nrow(smaller)`
    `` 颗大于 2.5 克拉。其余的分布如下所示：
- en: 'When the report is rendered, the results of these computations are inserted
    into the text:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当报告被渲染时，这些计算结果将插入到文本中：
- en: 'We have data about 53940 diamonds. Only 126 are larger than 2.5 carats. The
    distribution of the remainder is shown below:'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们有关于 53940 颗钻石的数据。只有 126 颗大于 2.5 克拉。其余的分布如下所示：
- en: 'When inserting numbers into text, [`format()`](https://rdrr.io/r/base/format.xhtml)
    is your friend. It allows you to set the number of `digits` so you don’t print
    to a ridiculous degree of accuracy, and you can use `big.mark` to make numbers
    easier to read. You might combine these into a helper function:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当将数字插入文本时，[`format()`](https://rdrr.io/r/base/format.xhtml) 是你的好帮手。它允许你设置 `digits`
    的数量，以避免打印到荒谬的精度，并且你可以使用 `big.mark` 使数字更容易阅读。你可以将它们组合成一个辅助函数：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Exercises
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Add a section that explores how diamond sizes vary by cut, color, and clarity.
    Assume you’re writing a report for someone who doesn’t know R, and instead of
    setting `echo: false` on each chunk, set a global option.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '添加一个部分，探讨钻石尺寸如何根据切割，颜色和净度变化。假设你为一个不懂 R 语言的人写报告，而不是在每个块上设置 `echo: false`，可以设置一个全局选项。'
- en: Download [`diamond-sizes.qmd`](https://oreil.ly/Auuh2). Add a section that describes
    the largest 20 diamonds, including a table that displays their most important
    attributes.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 [`diamond-sizes.qmd`](https://oreil.ly/Auuh2)。添加一个部分，描述最大的 20 颗钻石，包括显示它们最重要属性的表格。
- en: Modify `diamonds-sizes.qmd` to use `label_comma()` to produce nicely formatted
    output. Also include the percentage of diamonds that are larger than 2.5 carats.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `diamonds-sizes.qmd` 使用 `label_comma()` 生成格式良好的输出。还包括大于 2.5 克拉的钻石百分比。
- en: Figures
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形
- en: The figures in a Quarto document can be embedded (e.g., a PNG or JPEG file)
    or generated as a result of a code chunk.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 文档中的图形可以嵌入（例如 PNG 或 JPEG 文件）或作为代码块的结果生成。
- en: To embed an image from an external file, you can use the Insert menu in the
    Visual Editor RStudio and select Figure/Image. This will pop open a menu where
    you can browse to the image you want to insert as well as add alternative text
    or a caption to it and adjust its size. In the visual editor you can also simply
    paste an image from your clipboard into your document and RStudio will place a
    copy of that image in your project folder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要嵌入来自外部文件的图像，您可以在RStudio的可视化编辑器中使用“插入”菜单，选择“图像”。这将弹出一个菜单，您可以浏览到要插入的图像，并添加替代文本或标题，并调整其大小。在可视化编辑器中，您还可以简单地将图像从剪贴板粘贴到文档中，RStudio将在项目文件夹中放置该图像的副本。
- en: If you include a code chunk that generates a figure (e.g., includes a `ggplot()`
    call), the resulting figure will be automatically included in your Quarto document.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你包含一个生成图形的代码块（例如包含`ggplot()`调用），生成的图形将自动包含在你的Quarto文档中。
- en: Figure Sizing
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形大小
- en: 'The biggest challenge of graphics in Quarto is getting your figures the right
    size and shape. There are five main options that control figure sizing: `fig-width`,
    `fig-height`, `fig-asp`, `out-width`, and `out-height`. Image sizing is challenging
    because there are two sizes (the size of the figure created by R and the size
    at which it is inserted in the output document) and multiple ways of specifying
    the size (i.e., height, width, and aspect ratio: pick two of three).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在Quarto中图形的最大挑战是使您的图形大小和形状正确。有五个主要选项可以控制图形大小：`fig-width`、`fig-height`、`fig-asp`、`out-width`和`out-height`。图像大小具有挑战性，因为存在两种尺寸（由R创建的图形大小以及它在输出文档中插入的大小），以及多种指定大小的方式（即高度、宽度和纵横比：选择三个中的两个）。
- en: 'We recommend three of the five options:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们推荐五个选项中的三个：
- en: 'Plots tend to be more aesthetically pleasing if they have consistent width.
    To enforce this, set `fig-width: 6` (6”) and `fig-asp: 0.618` (the golden ratio)
    in the defaults. Then in individual chunks, adjust only `fig-asp`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果图形具有一致的宽度，通常更美观。为了实现这一点，在默认情况下设置`fig-width: 6`（6英寸）和`fig-asp: 0.618`（黄金比例）。然后在单个代码块中，仅调整`fig-asp`。'
- en: 'Control the output size with `out-width` and set it to a percentage of the
    body width of the output document. We suggest `out-width: "70%"` and `fig-align:
    center`. That gives plots room to breathe, without taking up too much space.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '使用`out-width`控制输出大小，并将其设置为输出文档正文宽度的百分比。我们建议使用`out-width: "70%"`和`fig-align:
    center`。这样可以使图形有足够的空间呼吸，而不会占用太多空间。'
- en: To put multiple plots in a single row, set `layout-ncol` to 2 for two plots,
    3 for three plots, etc. Depending on what you’re trying to illustrate (e.g., show
    data or show plot variations), you might also tweak `fig-width`, as discussed
    next.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在单行中放置多个图形，请将`layout-ncol`设置为2（两个图形）、3（三个图形）等。根据您试图说明的内容（例如显示数据或显示图形变化），您可能还需要调整`fig-width`，如下所讨论的。
- en: 'If you find that you’re having to squint to read the text in your plot, you
    need to tweak `fig-width`. If `fig-width` is larger than the size the figure is
    rendered in the final doc, the text will be too small; if `fig-width` is smaller,
    the text will be too big. You’ll often need to do a little experimentation to
    figure out the right ratio between the `fig-width` and the eventual width in your
    document. To illustrate the principle, the following three plots have `fig-width`
    of 4, 6, and 8, respectively:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现您需要眯起眼睛才能阅读图中的文本，则需要调整`fig-width`。如果`fig-width`大于图形在最终文档中呈现的大小，则文本将太小；如果`fig-width`较小，则文本将太大。通常需要进行一些实验来找出`fig-width`与文档最终宽度之间的正确比例。为了说明这个原则，以下三个图的`fig-width`分别为4、6和8：
- en: '![Scatterplot of highway mileage vs. displacement of cars, where the points
    are normally sized and the axis text and labels are in similar font size to the
    surrounding text.](assets/rds2_28in02.png)![Scatterplot of highway mileage vs.
    displacement of cars, where the points are smaller than in the previous plot and
    the axis text and labels are smaller than the surrounding text.](assets/rds2_28in03.png)![Scatterplot
    of highway mileage vs. displacement of cars, where the points are even smaller
    than in the previous plot and the axis text and labels are even smaller than the
    surrounding text.](assets/rds2_28in04.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![汽车排量与公路里程散点图，点的大小正常，轴文本和标签与周围文本大小相似。](assets/rds2_28in02.png)![汽车排量与公路里程散点图，点比前一个图小，轴文本和标签比周围文本小。](assets/rds2_28in03.png)![汽车排量与公路里程散点图，点比前一个图甚至更小，轴文本和标签比周围文本还要小。](assets/rds2_28in04.png)'
- en: 'If you want to make sure the font size is consistent across all your figures,
    whenever you set `out-width`, you’ll also need to adjust `fig-width` to maintain
    the same ratio with your default `out-width`. For example, if your default `fig-width`
    is 6 and `out-width` is “70%” when you set `out-width: "50%"`, you’ll need to
    set `fig-width` to 4.3 (6 * 0.5 / 0.7).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您希望确保所有图形的字体大小保持一致，每当您设置`out-width`时，您还需要调整`fig-width`以保持与默认`out-width`相同的比例。例如，如果您的默认`fig-width`为6，而`out-width`为“70%”，当您设置`out-width:
    "50%"`时，您需要将`fig-width`设置为4.3（6 * 0.5 / 0.7）。'
- en: Figure sizing and scaling is an art and science, and getting things right can
    require an iterative trial-and-error approach. You can learn more about figure
    sizing in the [“Taking Control of Plot Scaling” blog post](https://oreil.ly/EfKFq).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图片的大小和缩放是一门艺术和科学，正确调整可能需要迭代的试错方法。您可以在[“控制绘图缩放”博客文章](https://oreil.ly/EfKFq)中了解更多关于图片大小的信息。
- en: Other Important Options
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他重要选项
- en: 'When mingling code and text, like in this book, you can set `fig-show: hold`
    so that plots are shown after the code. This has the pleasant side effect of forcing
    you to break up large blocks of code with their explanations.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '在像本书这样混合代码和文本的情况下，您可以设置`fig-show: hold`，以便在代码后显示绘图。这样做的一个愉快的副作用是强迫您用解释来打破大块的代码。'
- en: To add a caption to the plot, use `fig-cap`. In Quarto this will change the
    figure from inline to “floating.”
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要向图表添加标题，请使用`fig-cap`。在Quarto中，这将使图表从内联变为“浮动”。
- en: 'If you’re producing PDF output, the default graphics type is PDF. This is a
    good default because PDFs are high-quality vector graphics. However, they can
    produce large and slow plots if you are displaying thousands of points. In that
    case, set `fig-format: "png"` to force the use of PNGs. They are slightly lower
    quality but will be much more compact.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您要生成PDF输出，则默认的图形类型是PDF。这是一个很好的默认设置，因为PDF是高质量的矢量图形。但是，如果您显示数千个点，则可能会产生大型和缓慢的绘图。在这种情况下，设置`fig-format:
    "png"`以强制使用PNG。它们的质量略低，但文件会更紧凑。'
- en: It’s a good idea to name code chunks that produce figures, even if you don’t
    routinely label other chunks. The chunk label is used to generate the filename
    of the graphic on disk, so naming your chunks makes it much easier to pick out
    plots and reuse them in other circumstances (e.g., if you want to quickly drop
    a single plot into an email).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您不经常标记其他块，为生成图形的代码块命名是一个好主意。代码块标签用于生成磁盘上图形的文件名，因此为代码块命名使得在其他情况下（例如，如果您想快速将单个图形插入电子邮件中），更容易选择和重用图形。
- en: Exercises
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Open `diamond-sizes.qmd` in the visual editor, find an image of a diamond, copy
    it, and paste it into the document. Double-click the image and add a caption.
    Resize the image and render your document. Observe how the image is saved in your
    current working directory.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视觉编辑器中打开`diamond-sizes.qmd`，找到一张钻石的图像，复制并粘贴到文档中。双击图像并添加标题。调整图像大小并渲染您的文档。观察图像如何保存在当前工作目录中。
- en: Edit the label of the code chunk in `diamond-sizes.qmd` that generates a plot
    to start with the prefix `fig-` and add a caption to the figure with the chunk
    option `fig-cap`. Then, edit the text above the code chunk to add a cross-reference
    to the figure with Insert > Cross Reference.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑生成绘图的`diamond-sizes.qmd`中代码块的标签，以`fig-`作为前缀开始，并通过插入 > 交叉引用在代码块上面的文本中添加一个标题。然后，编辑代码块上方的文本，添加到图表的交叉引用。
- en: Change the size of the figure with the following chunk options, one at a time;
    render your document; and describe how the figure changes.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块选项之一更改图形的大小；渲染您的文档；并描述图形的变化。
- en: '`fig-width: 10`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fig-width: 10`'
- en: '`fig-height: 3`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fig-height: 3`'
- en: '`out-width: "100%"`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out-width: "100%"`'
- en: '`out-width: "20%"`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`out-width: "20%"`'
- en: Tables
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表格
- en: Similar to figures, you can include two types of tables in a Quarto document.
    They can be Markdown tables that you create in directly in your Quarto document
    (using the Insert Table menu), or they can be tables generated as a result of
    a code chunk. In this section we will focus on the latter, tables generated via
    computation.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与图表类似，您可以在Quarto文档中包含两种类型的表格。它们可以是您直接在Quarto文档中创建的Markdown表格（使用插入表格菜单），也可以是作为代码块结果生成的表格。在本节中，我们将重点放在后者上，即通过计算生成的表格。
- en: 'By default, Quarto prints data frames and matrices as you’d see them in the
    console:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Quarto 将数据框架和矩阵打印为您在控制台中看到的样子。
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you prefer that data be displayed with additional formatting, you can use
    the [`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.xhtml) function. The
    following code generates [Table 28-1](#tbl-kable):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望数据显示带有额外的格式，可以使用[`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.xhtml)函数。下面的代码生成[Table 28-1](#tbl-kable)：
- en: '[PRE17]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Table 28-1\. A knitr kable
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 表28-1\. 一个knitr kable
- en: '|   | mpg | cyl | disp | hp | drat | wt | qsec | vs | am | gear | carb |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '|   | mpg | cyl | disp | hp | drat | wt | qsec | vs | am | gear | carb |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| Mazda RX4 | 21.0 | 6 | 160 | 110 | 3.90 | 2.620 | 16.46 | 0 | 1 | 4 | 4 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| Mazda RX4 | 21.0 | 6 | 160 | 110 | 3.90 | 2.620 | 16.46 | 0 | 1 | 4 | 4 |'
- en: '| Mazda RX4 Wag | 21.0 | 6 | 160 | 110 | 3.90 | 2.875 | 17.02 | 0 | 1 | 4 |
    4 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| Mazda RX4 Wag | 21.0 | 6 | 160 | 110 | 3.90 | 2.875 | 17.02 | 0 | 1 | 4 |
    4 |'
- en: '| Datsun 710 | 22.8 | 4 | 108 | 93 | 3.85 | 2.320 | 18.61 | 1 | 1 | 4 | 1 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| Datsun 710 | 22.8 | 4 | 108 | 93 | 3.85 | 2.320 | 18.61 | 1 | 1 | 4 | 1 |'
- en: '| Hornet 4 Drive | 21.4 | 6 | 258 | 110 | 3.08 | 3.215 | 19.44 | 1 | 0 | 3
    | 1 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| Hornet 4 Drive | 21.4 | 6 | 258 | 110 | 3.08 | 3.215 | 19.44 | 1 | 0 | 3
    | 1 |'
- en: '| Hornet Sportabout | 18.7 | 8 | 360 | 175 | 3.15 | 3.440 | 17.02 | 0 | 0 |
    3 | 2 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| Hornet Sportabout | 18.7 | 8 | 360 | 175 | 3.15 | 3.440 | 17.02 | 0 | 0 |
    3 | 2 |'
- en: Read the documentation for [`?knitr::kable`](https://rdrr.io/pkg/knitr/man/kable.xhtml)
    to see the other ways in which you can customize the table. For even deeper customization,
    consider the gt, huxtable, reactable, kableExtra, xtable, stargazer, pander, tables,
    and ascii packages. Each provides a set of tools for returning formatted tables
    from R code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读[`?knitr::kable`](https://rdrr.io/pkg/knitr/man/kable.xhtml)的文档，了解如何使用其他方式自定义表格。要进行更深入的定制，考虑使用gt、huxtable、reactable、kableExtra、xtable、stargazer、pander、tables和ascii包。每个包都提供了一套工具，用于从R代码返回格式化的表格。
- en: Exercises
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Open `diamond-sizes.qmd` in the visual editor, insert a code chunk, and add
    a table with [`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.xhtml) that
    shows the first five rows of the `diamonds` data frame.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可视编辑器中打开`diamond-sizes.qmd`，插入一个代码块，并使用[`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.xhtml)创建一个显示`diamonds`数据帧前五行的表格。
- en: Display the same table with [`gt::gt()`](https://gt.rstudio.com/reference/gt.xhtml)
    instead.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`gt::gt()`](https://gt.rstudio.com/reference/gt.xhtml)显示相同的表格。
- en: Add a chunk label that starts with the prefix `tbl-` and add a caption to the
    table with the chunk option `tbl-cap`. Then, edit the text above the code chunk
    to add a cross-reference to the table with Insert > Cross Reference.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个以`tbl-`前缀开头的块标签，并使用块选项`tbl-cap`为表格添加标题。然后，编辑代码块上方的文本，使用插入 > 交叉引用来引用表格。
- en: Caching
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存
- en: 'Normally, each render of a document starts from a completely clean slate. This
    is great for reproducibility, because it ensures that you’ve captured every important
    computation in code. However, it can be painful if you have some computations
    that take a long time. The solution is `cache: true`.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '通常，文档的每次渲染都从一个完全干净的状态开始。这对于可重现性很重要，因为它确保你已经在代码中捕获了每一个重要的计算过程。然而，如果有一些需要很长时间的计算，这可能会很痛苦。解决方案是`cache:
    true`。'
- en: 'You can enable the knitr cache at the document level for caching the results
    of all computations in a document using standard YAML options:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用标准的YAML选项在文档级别启用knitr缓存，用于缓存文档中所有计算的结果：
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also enable caching at the chunk level for caching the results of computation
    in a specific chunk:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在块级别启用缓存，用于缓存特定块中计算的结果：
- en: '[PRE19]{r}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19]{r}'
- en: '#| cache: true'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache: true'
- en: code for lengthy computation...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 长时间计算的代码...
- en: '[PRE20]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When set, this will save the output of the chunk to a specially named file on
    disk. On subsequent runs, knitr will check to see if the code has changed, and
    if it hasn’t, it will reuse the cached results.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 设置后，这将把块的输出保存到一个特别命名的文件中。在后续运行中，knitr会检查代码是否发生了变化，如果没有，它将重用缓存的结果。
- en: 'The caching system must be used with care, because by default it is based on
    the code only, not its dependencies. For example, here the `processed_data` chunk
    depends on the `raw-data` chunk:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存系统必须小心使用，因为默认情况下仅基于代码而不是其依赖项。例如，这里的`processed_data`块依赖于`raw-data`块：
- en: '[PRE21]{r}'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21]{r}'
- en: '#| label: raw-data'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: raw-data'
- en: '#| cache: true'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache: true'
- en: rawdata <- readr::read_csv("a_very_large_file.csv")
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: rawdata <- readr::read_csv("a_very_large_file.csv")
- en: '[PRE22]{r}'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE22]{r}'
- en: '#| label: processed_data'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: processed_data'
- en: '#| cache: true'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache: true'
- en: processed_data <- rawdata |>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: processed_data <- rawdata |>
- en: filter(!is.na(import_var)) |>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: filter(!is.na(import_var)) |>
- en: mutate(new_variable = complicated_transformation(x, y, z))
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(new_variable = complicated_transformation(x, y, z))
- en: '[PRE23]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Caching the `processed_data` chunk means that it will get rerun if the dplyr
    pipeline is changed, but it won’t get rerun if the `read_csv()` call changes.
    You can avoid that problem with the `dependson` chunk option:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存`processed_data`块意味着如果dplyr管道发生更改，它将重新运行，但如果`read_csv()`调用发生更改，则不会重新运行。您可以使用`dependson`块选项避免这个问题：
- en: '[PRE24]{r}'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE24]{r}'
- en: '#| label: processed-data'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: processed-data'
- en: '#| cache: true'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache: true'
- en: '#| dependson: "raw-data"'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '#| dependson: "raw-data"'
- en: processed_data <- rawdata |>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: processed_data <- rawdata |>
- en: filter(!is.na(import_var)) |>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: filter(!is.na(import_var)) |>
- en: mutate(new_variable = complicated_transformation(x, y, z))
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: mutate(new_variable = complicated_transformation(x, y, z))
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`dependson` should contain a character vector of *every* chunk that the cached
    chunk depends on. Knitr will update the results for the cached chunk whenever
    it detects that one of its dependencies has changed.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependson`应该包含一个字符向量，其中包含缓存块依赖的*每个*块。Knitr会在检测到其依赖项发生更改时更新缓存块的结果。'
- en: 'Note that the chunks won’t update if `a_very_large_file.csv` changes, because
    knitr caching tracks changes only within the `.qmd` file. If you want to also
    track changes to that file, you can use the `cache.extra` option. This is an arbitrary
    R expression that will invalidate the cache whenever it changes. A good function
    to use is [`file.mtime()`](https://rdrr.io/r/base/file.info.xhtml): it returns
    when it was last modified. Then you can write:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果`a_very_large_file.csv`发生更改，块将不会更新，因为knitr缓存仅跟踪`.qmd`文件内的更改。如果您还想跟踪该文件的更改，可以使用`cache.extra`选项。这是一个任意的R表达式，每当它更改时都会使缓存无效。可以使用一个好的函数[`file.mtime()`](https://rdrr.io/r/base/file.info.xhtml)：它返回文件的最后修改时间。然后您可以写：
- en: '[PRE26]{r}'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE26]{r}'
- en: '#| label: raw-data'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '#| label: raw-data'
- en: '#| cache: true'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache: true'
- en: '#| cache.extra: !expr file.mtime("a_very_large_file.csv")'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '#| cache.extra: !expr file.mtime("a_very_large_file.csv")'
- en: rawdata <- readr::read_csv("a_very_large_file.csv")
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: rawdata <- readr::read_csv("a_very_large_file.csv")
- en: '[PRE27]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We’ve followed the advice of [David Robinson](https://oreil.ly/yvPFt) to name
    these chunks: each chunk is named after the primary object that it creates. This
    makes it easier to understand the `dependson` specification.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循了[David Robinson](https://oreil.ly/yvPFt)的建议，为这些块命名：每个块都以它创建的主要对象命名。这样更容易理解`dependson`规范。
- en: As your caching strategies get progressively more complicated, it’s a good idea
    to regularly clear out all your caches with [`knitr::clean_cache()`](https://rdrr.io/pkg/knitr/man/clean_cache.xhtml).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的缓存策略变得越来越复杂，定期使用[`knitr::clean_cache()`](https://rdrr.io/pkg/knitr/man/clean_cache.xhtml)清除所有缓存是一个好主意。
- en: Exercises
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Set up a network of chunks where `d` depends on `c` and `b`, and both `b` and
    `c` depend on `a`. Have each chunk print [`lubridate::now()`](https://lubridate.tidyverse.org/reference/now.xhtml),
    set `cache: true`, and then verify your understanding of caching.'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '设置一个基于网络块的网络，其中`d`依赖于`c`和`b`，而`b`和`c`都依赖于`a`。让每个块打印[`lubridate::now()`](https://lubridate.tidyverse.org/reference/now.xhtml)，设置`cache:
    true`，然后验证你对缓存的理解。'
- en: Troubleshooting
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: Troubleshooting Quarto documents can be challenging because you are no longer
    in an interactive R environment, and you will need to learn some new tricks. Additionally,
    the error could be due to issues with the Quarto document itself or due to the
    R code in the Quarto document.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 调试Quarto文档可能会很具有挑战性，因为您不再处于交互式R环境中，您需要学习一些新技巧。此外，错误可能是由于Quarto文档本身的问题或Quarto文档中的R代码引起的。
- en: One common error in documents with code chunks is duplicated chunk labels, which
    are especially pervasive if your workflow involves copying and pasting code chunks.
    To address this issue, all you need to do is to change one of your duplicated
    labels.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块中常见的一个错误是重复的块标签，如果您的工作流程涉及复制和粘贴代码块，则这种错误尤其普遍。要解决此问题，您只需更改其中一个重复的标签即可。
- en: If the errors are due to the R code in the document, the first thing you should
    always try is to re-create the problem in an interactive session. Restart R, and
    then select “Run all chunks,” either from the Code menu, under the Run region,
    or by pressing the keyboard shortcut Ctrl+Alt+R. If you’re lucky, that will re-create
    the problem, and you can figure out what’s going on interactively.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错误是由文档中的R代码引起的，你应该尝试的第一件事是在交互式会话中重新创建问题。重新启动R，然后从代码菜单下的运行区域或按键盘快捷键Ctrl+Alt+R选择“运行所有块”。如果你幸运的话，这将重新创建问题，然后你可以进行交互式的问题排查。
- en: 'If that doesn’t help, there must be something different between your interactive
    environment and the Quarto environment. You’re going to need to systematically
    explore the options. The most common difference is the working directory: the
    working directory of a Quarto is the directory in which it lives. Check the working
    directory is what you expect by including [`getwd()`](https://rdrr.io/r/base/getwd.xhtml)
    in a chunk.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这没有帮助，可能是您的交互环境与 Quarto 环境之间有所不同。您需要系统地探索选项。最常见的差异是工作目录：Quarto 的工作目录是它所在的目录。通过在一个代码块中包含
    [`getwd()`](https://rdrr.io/r/base/getwd.xhtml) 来检查您所期望的工作目录是否正确。
- en: 'Next, brainstorm all the things that might cause the bug. You’ll need to systematically
    check that they’re the same in your R session and your Quarto session. The easiest
    way to do that is to set `error: true` on the chunk causing the problem and then
    use [`print()`](https://rdrr.io/r/base/print.xhtml) and [`str()`](https://rdrr.io/r/utils/str.xhtml)
    to check that settings are as you expect.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，列出可能导致错误的所有事项。您需要系统地检查这些事项在您的 R 会话和 Quarto 会话中是否相同。完成这项工作的最简单方法是在引起问题的代码块上设置
    `error: true`，然后使用 [`print()`](https://rdrr.io/r/base/print.xhtml) 和 [`str()`](https://rdrr.io/r/utils/str.xhtml)
    检查设置是否符合您的期望。'
- en: YAML Header
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML 头部
- en: 'You can control many other “whole document” settings by tweaking the parameters
    of the YAML header. You might wonder what YAML stands for: it’s “YAML Ain’t Markup
    Language,” which is designed for representing hierarchical data in a way that’s
    easy for humans to read and write. Quarto uses it to control many details of the
    output. Here we’ll discuss three: self-contained documents, document parameters,
    and bibliographies.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调整 YAML 头部参数，您可以控制许多其他“整个文档”设置。您可能会好奇 YAML 是什么意思：它代表“YAML Ain’t Markup Language”，旨在以一种易于人类阅读和编写的方式表示分层数据。Quarto
    使用它来控制输出的许多细节。在这里，我们将讨论三个方面：自包含文档、文档参数和文献目录。
- en: Self-Contained
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自包含
- en: HTML documents typically have a number of external dependencies (e.g., images,
    CSS style sheets, JavaScript, etc.) and, by default, Quarto places these dependencies
    in a `_files` folder in the same directory as your `.qmd` file. If you publish
    the HTML file on a hosting platform (e.g., [QuartoPub](https://oreil.ly/SF3Pm)),
    the dependencies in this directory are published with your document and hence
    are available in the published report. However, if you want to email the report
    to a colleague, you might prefer to have a single, self-contained, HTML document
    that embeds all of its dependencies. You can do this by specifying the `embed-resources`
    option.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档通常具有许多外部依赖项（例如图片、CSS 样式表、JavaScript 等），默认情况下，Quarto 将这些依赖项放在与您的 `.qmd`
    文件相同目录下的 `_files` 文件夹中。如果您将 HTML 文件发布到托管平台（例如 [QuartoPub](https://oreil.ly/SF3Pm)），此目录中的依赖项将与您的文档一起发布，因此在发布的报告中可用。然而，如果您希望将报告通过电子邮件发送给同事，您可能更喜欢拥有一个单一的、自包含的
    HTML 文档，其中嵌入了所有的依赖项。您可以通过指定 `embed-resources` 选项来实现这一点。
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: the resulting file will be self-contained, such that it will need no external
    files and no internet access to be displayed properly by a browser.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件将是自包含的，因此它将不需要外部文件，也不需要通过互联网访问才能由浏览器正确显示。
- en: Parameters
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: Quarto documents can include one or more parameters whose values can be set
    when you render the report. Parameters are useful when you want to re-render the
    same report with distinct values for various key inputs. For example, you might
    be producing sales reports per branch, exam results by student, or demographic
    summaries by country. To declare one or more parameters, use the `params` field.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 文档可以包含一个或多个参数，这些参数的值可以在渲染报告时设置。当您希望使用不同的值重新渲染相同的报告以获取各种关键输入时，参数非常有用。例如，您可能正在生成分部门的销售报告，按学生的考试成绩报告，或者按国家的人口统计摘要报告。要声明一个或多个参数，请使用
    `params` 字段。
- en: 'This example uses a `my_class` parameter to determine which class of cars to
    display:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用一个 `my_class` 参数来确定要显示哪个车型类别：
- en: '[PRE29]{r}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE29]{r}'
- en: '#| label: setup'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '#| 标签: setup'
- en: '#| include: false'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '#| 包含: false'
- en: library(tidyverse)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: library(tidyverse)
- en: class <- mpg |> filter(class == params$my_class)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: class <- mpg |> filter(class == params$my_class)
- en: '[PRE30]{r}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE30]{r}'
- en: '#| message: false'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '#| 消息: false'
- en: ggplot(class, aes(x = displ, y = hwy)) +
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot(class, aes(x = displ, y = hwy)) +
- en: geom_point() +
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: geom_point() +
- en: geom_smooth(se = FALSE)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: geom_smooth(se = FALSE)
- en: '[PRE31]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, parameters are available within the code chunks as a read-only
    list named `params`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，参数在代码块内部作为一个名为 `params` 的只读列表可用。
- en: You can write atomic vectors directly into the YAML header. You can also run
    arbitrary R expressions by prefacing the parameter value with `!expr`. This is
    a good way to specify date/time parameters.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接将原子向量写入 YAML 头文件中。您还可以通过在参数值前加上 `!expr` 来运行任意的 R 表达式。这是指定日期/时间参数的好方法。
- en: '[PRE32]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Bibliographies and Citations
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献和引文
- en: Quarto can automatically generate citations and a bibliography in a number of
    styles. The most straightforward way of adding citations and bibliographies to
    a Quarto document is using the visual editor in RStudio.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto 可以自动以多种样式生成引文和参考文献。向 Quarto 文档添加引文和参考文献的最简单方式是使用 RStudio 中的视觉编辑器。
- en: 'To add a citation using the visual editor, select Insert > Citation. Citations
    can be inserted from a variety of sources:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视觉编辑器中添加引用，请选择插入 > 引用。可以从多种来源插入引用：
- en: '[DOI](https://oreil.ly/sxxlC) references'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DOI](https://oreil.ly/sxxlC) 引用'
- en: '[Zotero](https://oreil.ly/BDpHv) personal or group libraries.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Zotero](https://oreil.ly/BDpHv) 个人或群组库。'
- en: Searches of [Crossref](https://oreil.ly/BpPdW), [DataCite](https://oreil.ly/vSwdK),
    or [PubMed](https://oreil.ly/Hd2Ey).
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Crossref](https://oreil.ly/BpPdW)、[DataCite](https://oreil.ly/vSwdK) 或 [PubMed](https://oreil.ly/Hd2Ey)
    的搜索。'
- en: Your document bibliography (a `.bib` file in the directory of your document)
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的文档参考文献（位于文档目录中的 `.bib` 文件）
- en: Under the hood, the visual mode uses the standard Pandoc Markdown representation
    for citations (e.g., `[@citation]`).
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉模式下，使用标准的 Pandoc Markdown 表示来引用（例如，`[@citation]`）。
- en: If you add a citation using one of the first three methods, the visual editor
    will automatically create a `bibliography.bib` file for you and add the reference
    to it. It will also add a `bibliography` field to the document YAML. As you add
    more references, this file will get populated with their citations. You can also
    directly edit this file using many common bibliography formats including BibLaTeX,
    BibTeX, EndNote, and Medline.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用前三种方法之一添加引用，视觉编辑器将自动为您创建一个 `bibliography.bib` 文件，并将引用添加到其中。它还将在文档 YAML 中添加一个
    `bibliography` 字段。随着您添加更多引用，该文件将填充其引文。您还可以直接使用包括 BibLaTeX、BibTeX、EndNote 和 Medline
    在内的多种常见参考文献格式编辑此文件。
- en: 'To create a citation within your `.qmd` file in the source editor, use a key
    composed of @ plus the citation identifier from the bibliography file. Then place
    the citation in square brackets. Here are some examples:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要在源编辑器中的 `.qmd` 文件中创建引用，请使用由参考文献文件中引用标识符组成的键。然后将引用放在方括号内。以下是一些示例：
- en: '[PRE33]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: When Quarto renders your file, it will build and append a bibliography to the
    end of your document. The bibliography will contain each of the cited references
    from your bibliography file, but it will not contain a section heading. As a result
    it is common practice to end your file with a section header for the bibliography,
    such as `# References` or `# Bibliography`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Quarto 渲染您的文件时，它将构建并附加参考文献到文档的末尾。参考文献将包含您的参考文献文件中每个引用的引文，但不会包含章节标题。因此，通常建议在文档的末尾加上一个参考文献的章节标题，例如
    `# References` 或 `# Bibliography`。
- en: 'You can change the style of your citations and bibliography by referencing
    a citation style language (CSL) file in the `csl` field:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过引用引文样式语言（CSL）文件中的 `csl` 字段来更改引文和参考文献的样式：
- en: '[PRE34]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As with the bibliography field, your CSL file should contain a path to the file.
    Here we assume that the CSL file is in the same directory as the `.qmd` file.
    A good place to find CSL style files for common bibliography styles is the [official
    repository for citation styles](https://oreil.ly/bYJez).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 与参考文献字段一样，您的 CSL 文件应包含指向文件的路径。在这里，我们假设 CSL 文件与 `.qmd` 文件在同一个目录中。查找常见参考文献样式的
    CSL 样式文件的好地方是 [citation styles 的官方仓库](https://oreil.ly/bYJez)。
- en: Workflow
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流程
- en: Earlier, we discussed a basic workflow for capturing your R code where you work
    interactively in the *console* and then capture what works in the *script editor*.
    Quarto brings together the console and the script editor, blurring the lines between
    interactive exploration and long-term code capture. You can rapidly iterate within
    a chunk, editing and re-executing with Cmd/Ctrl+Shift+Enter. When you’re happy,
    you move on and start a new chunk.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们讨论了一个捕获您的 R 代码的基本工作流程，您可以在其中以交互方式在 *控制台* 中工作，然后在 *脚本编辑器* 中捕获有效的内容。Quarto
    将控制台和脚本编辑器结合在一起，模糊了交互式探索和长期代码捕获之间的界限。您可以在一个代码块内快速迭代，编辑并重新执行，快捷键为 Cmd/Ctrl+Shift+Enter。当您满意时，可以继续并开始一个新的代码块。
- en: 'Quarto is also important because it so tightly integrates prose and code. This
    makes it a great *analysis notebook* because it lets you develop code and record
    your thoughts. An analysis notebook shares many of the same goals as a classic
    lab notebook in the physical sciences. It:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Quarto也很重要，因为它紧密集成了文本和代码。这使它成为一个很棒的*分析笔记本*，因为它允许你开发代码并记录你的想法。分析笔记本与物理科学中的经典实验室笔记有许多相同的目标。它：
- en: Records what you did and why you did it. Regardless of how great your memory
    is, if you don’t record what you do, there will come a time when you have forgotten
    important details. Write them down so you don’t forget!
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录你做了什么以及为什么这样做。无论你的记忆力有多好，如果不记录你的行动，总会有一天你会忘记重要的细节。记下来，这样你就不会忘记！
- en: Supports rigorous thinking. You are more likely to come up with a strong analysis
    if you record your thoughts as you go and continue to reflect on them. This also
    saves you time when you eventually write up your analysis to share with others.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持严谨的思维。如果你记录下你的思考过程并持续反思，你很可能会得出一个强大的分析结果。这也会节省你在最终撰写分析报告时的时间，以便与他人分享。
- en: Helps others understand your work. It is rare to do data analysis by yourself,
    and you’ll often be working as part of a team. A lab notebook helps you share
    not only what you’ve done but why you did it with your colleagues or lab mates.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助他人理解你的工作。很少有人单独进行数据分析，你经常会作为团队的一部分工作。实验室笔记帮助你与同事或实验室伙伴分享你做了什么以及为什么这样做。
- en: 'Much of the good advice about using lab notebooks effectively can also be translated
    to analysis notebooks. We’ve drawn on our own experiences and Colin Purrington’s
    advice on [lab notebooks](https://oreil.ly/n1pLD) to come up with the following
    tips:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 许多关于有效使用实验室笔记的好建议也可以转化为分析笔记。我们借鉴了我们自己的经验和Colin Purrington关于[实验室笔记](https://oreil.ly/n1pLD)的建议，提出以下几点建议：
- en: Ensure each notebook has a descriptive title, an evocative filename, and a first
    paragraph that briefly describes the aims of the analysis.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每个笔记本都有一个描述性的标题，一个唤起兴趣的文件名，以及一个简要描述分析目标的第一个段落。
- en: 'Use the YAML header date field to record the date you started working on the
    notebook:'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YAML头部的日期字段记录你开始在笔记本上工作的日期：
- en: '[PRE35]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Use ISO8601 YYYY-MM-DD format so that’s there no ambiguity. Use it even if you
    don’t normally write dates that way!
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用ISO8601的YYYY-MM-DD格式以消除任何歧义。即使你平时不以这种方式写日期也要使用它！
- en: If you spend a lot of time on an analysis idea and it turns out to be a dead
    end, don’t delete it! Write up a brief note about why it failed and leave it in
    the notebook. That will help you avoid going down the same dead end when you come
    back to the analysis in the future.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你花费了大量时间在一个分析想法上，结果发现是死胡同，不要删除它！写下一个简短的说明，解释为什么失败，并将其留在笔记本中。这样做将有助于你在未来回到分析时避免陷入同样的死胡同。
- en: Generally, you’re better off doing data entry outside of R. But if you do need
    to record a small snippet of data, clearly lay it out using [`tibble::tribble()`](https://tibble.tidyverse.org/reference/tribble.xhtml).
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般来说，最好在R之外进行数据输入。但如果你确实需要记录一小段数据，清晰地使用[`tibble::tribble()`](https://tibble.tidyverse.org/reference/tribble.xhtml)布局它。
- en: If you discover an error in a data file, never modify it directly, but instead
    write code to correct the value. Explain why you made the fix.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你发现数据文件中的错误，永远不要直接修改它，而是编写代码来更正值。解释为什么进行了修正。
- en: Before you finish for the day, make sure you can render the notebook. If you’re
    using caching, make sure to clear the caches. That will let you fix any problems
    while the code is still fresh in your mind.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一天结束前，确保你可以渲染笔记本。如果你使用了缓存，请确保清除缓存。这样做可以让你在代码还在脑海中清晰时解决任何问题。
- en: If you want your code to be reproducible in the long run (i.e., so you can come
    back to run it next month or next year), you’ll need to track the versions of
    the packages that your code uses. A rigorous approach is to use [*renv*](https://oreil.ly/_I4xb),
    which stores packages in your project directory. A quick and dirty hack is to
    include a chunk that runs [`sessionInfo()`](https://rdrr.io/r/utils/sessionInfo.xhtml)—that
    won’t let you easily re-create your packages as they are today, but at least you’ll
    know what they were.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你希望你的代码长期可复制（即，你可以在下个月或明年回来运行它），你需要追踪你的代码使用的包的版本。一个严谨的方法是使用[*renv*](https://oreil.ly/_I4xb)，它将包存储在你的项目目录中。一个快速而不太正式的方法是包含一个运行[`sessionInfo()`](https://rdrr.io/r/utils/sessionInfo.xhtml)的代码块——这不会让你轻松地重新创建今天的包，但至少你会知道它们是什么。
- en: You are going to create many, many, many analysis notebooks over the course
    of your career. How are you going to organize them so you can find them again
    in the future? We recommend storing them in individual projects and coming up
    with a good naming scheme.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的职业生涯中，您将创建许多分析笔记本。您要如何组织它们以便将来再次找到？我们建议将它们存储在单独的项目中，并制定一个良好的命名方案。
- en: Summary
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to Quarto for authoring and publishing reproducible
    computational documents that include your code and your prose in one place. You
    learned about writing Quarto documents in RStudio with the visual or source editor,
    how code chunks work and how to customize options for them, how to include figures
    and tables in your Quarto documents, and options for caching for computations.
    Additionally, you learned about adjusting YAML header options for creating self-contained
    or parameterized documents as well as including citations and a bibliography.
    We also gave you some troubleshooting and workflow tips.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您介绍了 Quarto，用于编写和发布包含代码和文本的可重现计算文档。您了解了如何在 RStudio 中使用可视化或源代码编辑器编写 Quarto
    文档，代码块的工作原理以及如何自定义其选项，如何在 Quarto 文档中包含图形和表格，以及计算缓存的选项。此外，您还学习了如何调整 YAML 头部选项以创建自包含或参数化文档，以及如何包含引用和参考文献。我们还为您提供了一些故障排除和工作流程提示。
- en: While this introduction should be sufficient to get you started with Quarto,
    there is still a lot more to learn. Quarto is still relatively young and is still
    growing rapidly. The best place to stay on top of innovations is the official
    [Quarto website](https://oreil.ly/_6LNH).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本介绍足以让您开始使用 Quarto，但还有很多内容需要学习。Quarto 目前仍然比较年轻，并且正在快速发展中。保持最新的最佳方式是访问官方[Quarto
    网站](https://oreil.ly/_6LNH)。
- en: 'There are two important topics that we haven’t covered here: collaboration
    and the details of accurately communicating your ideas to other humans. Collaboration
    is a vital part of modern data science, and you can make your life much easier
    by using version control tools, like Git and GitHub. We recommend *Happy Git with
    R*, a user-friendly introduction to Git and GitHub from R users, by Jenny Bryan.
    The book is freely available [online](https://oreil.ly/bzjrw).'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个重要的主题我们在这里没有涉及到：协作和准确传达您的想法细节给其他人。协作是现代数据科学的重要组成部分，您可以通过使用像 Git 和 GitHub
    这样的版本控制工具大大简化生活。我们推荐由 Jenny Bryan 撰写的《Happy Git with R》，这是一本面向 R 用户的用户友好的介绍 Git
    和 GitHub 的书籍，可以在[网上免费阅读](https://oreil.ly/bzjrw)。
- en: 'We have also not touched on what you should actually write to clearly communicate
    the results of your analysis. To improve your writing, we highly recommend reading
    either *Style: Lessons in Clarity and Grace* by Joseph M. Williams & Joseph Bizup
    (Pearson) or *The Sense of Structure: Writing from the Reader’s Perspective* by
    George Gopen (Pearson). Both books will help you understand the structure of sentences
    and paragraphs and give you the tools to make your writing clearer. (These books
    are rather expensive if purchased new, but they’re used by many English classes,
    so there are plenty of cheap second-hand copies.) George Gopen also has a number
    of [short articles on writing](https://oreil.ly/qS7tS). They are aimed at lawyers,
    but almost everything applies to data scientists too.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论您实际应该写什么来清楚地传达分析结果。为了提高您的写作水平，我们强烈推荐阅读约瑟夫·M·威廉姆斯和约瑟夫·比扎普合著的《风格：清晰与优雅的写作课程》（Pearson），或者乔治·戈彭的《结构的感觉：从读者的角度写作》（Pearson）。这两本书将帮助您理解句子和段落的结构，并为您提供使写作更清晰的工具。（这些书籍如果新购买会比较昂贵，但很多英语课程使用，因此有很多便宜的二手复印本。）乔治·戈彭还有一些关于写作的[短文](https://oreil.ly/qS7tS)，虽然主要面向律师，但几乎所有内容也适用于数据科学家。
