- en: Chapter 17\. Dates and Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章。日期和时间
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter will show you how to work with dates and times in R. At first glance,
    dates and times seem simple. You use them all the time in your regular life, and
    they don’t seem to cause much confusion. However, the more you learn about dates
    and times, the more complicated they seem to get!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您展示如何在R中处理日期和时间。乍一看，日期和时间似乎很简单。您在日常生活中经常使用它们，并且似乎并没有引起太多混淆。然而，您越了解日期和时间，它们似乎就越复杂！
- en: 'To warm up, think about how many days there are in a year and how many hours
    there are in a day. You probably remembered that most years have 365 days, but
    leap years have 366\. Do you know the full rule for determining if a year is a
    leap year?^([1](ch17.xhtml#idm44771289225952)) The number of hours in a day is
    a little less obvious: most days have 24 hours, but in places that use daylight
    saving time (DST), one day each year has 23 hours and another has 25.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了热身，想想一年有多少天，一天有多少小时。你可能记得大多数年份有365天，但闰年有366天。你知道如何准确判断一个年份是否是闰年吗？^([1](ch17.xhtml#idm44771289225952))
    一天有多少小时不那么明显：大多数日子有24小时，但在使用夏令时（DST）的地方，每年会有一天有23小时，另一天有25小时。
- en: Dates and times are hard because they have to reconcile two physical phenomena
    (the rotation of Earth and its orbit around the sun) with a whole raft of geopolitical
    phenomena including months, time zones, and DST. This chapter won’t teach you
    every last detail about dates and times, but it will give you a solid grounding
    of practical skills that will help you with common data analysis challenges.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 日期和时间之所以困难，是因为它们需要协调两个物理现象（地球的自转和绕太阳公转），以及一系列地缘政治现象，包括月份、时区和夏令时。本章不会教会您关于日期和时间的每一个细节，但它将为您提供实用技能的坚实基础，帮助您解决常见的数据分析挑战。
- en: We’ll begin by showing you how to create date-times from various inputs, and
    then once you’ve got a date-time, you’ll learn how you can extract components
    such as year, month, and day. We’ll then dive into the tricky topic of working
    with time spans, which come in a variety of flavors depending on what you’re trying
    to do. We’ll conclude with a brief discussion of the additional challenges posed
    by time zones.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从展示如何从不同输入创建日期时间开始，一旦您有了日期时间，您将学习如何提取年、月和日等组件。然后我们将深入讨论处理时间跨度的复杂主题，这取决于您尝试做什么，有多种不同的选择。最后我们将简要讨论时区带来的额外挑战。
- en: Prerequisites
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: This chapter will focus on the lubridate package, which makes it easier to work
    with dates and times in R. As of the latest tidyverse release, lubridate is part
    of core tidyverse. We will also need nycflights13 for practice data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将专注于lubridate包，在R中更轻松地处理日期和时间。截至最新的tidyverse发布版本，lubridate已成为核心tidyverse的一部分。我们还需要nycflights13作为实践数据。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating Date/Times
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建日期/时间
- en: 'There are three types of date/time data that refer to an instant in time:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种时间/日期数据类型指代某一时刻：
- en: A *date*. Tibbles print this as `<date>`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*日期*。Tibbles打印为 `<date>`。'
- en: A *time* within a day. Tibbles print this as `<time>`.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一天内的时间*。Tibbles打印为 `<time>`。'
- en: 'A *date-time* is a date plus a time: it uniquely identifies an instant in time
    (typically to the nearest second). Tibbles print this as `<dttm>`. Base R calls
    these POSIXct, but that doesn’t exactly trip off the tongue.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*日期时间*是日期加时间：它唯一标识一个时刻（通常精确到最近的秒）。Tibbles打印为 `<dttm>`。基础R称之为POSIXct，但这个术语不太口语化。'
- en: In this chapter we are going to focus on dates and date-times as R doesn’t have
    a native class for storing times. If you need one, you can use the hms package.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于日期和日期时间，因为R没有用于存储时间的本机类。如果需要，您可以使用hms包。
- en: You should always use the simplest possible data type that works for your needs.
    That means if you can use a date instead of a date-time, you should. Date-times
    are substantially more complicated because of the need to handle time zones, which
    we’ll come back to at the end of the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该始终使用最简单可能的数据类型来满足您的需求。这意味着如果可以使用日期而不是日期时间，您应该这样做。由于需要处理时区，日期时间要复杂得多，我们将在本章末尾回顾这一点。
- en: 'To get the current date or date-time, you can use [`today()`](https://lubridate.tidyverse.org/reference/now.xhtml)
    or [`now()`](https://lubridate.tidyverse.org/reference/now.xhtml):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取当前日期或日期时间，您可以使用[`today()`](https://lubridate.tidyverse.org/reference/now.xhtml)或[`now()`](https://lubridate.tidyverse.org/reference/now.xhtml)：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Otherwise, the following sections describe the four ways you’re likely to create
    a date/time:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下各节描述了您可能会创建日期/时间的四种常见方式：
- en: While reading a file with readr
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用readr读取文件时
- en: From a string
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从字符串
- en: From individual date-time components
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单独的日期时间组件
- en: From an existing date/time object
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有的日期/时间对象
- en: During Import
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在导入期间
- en: 'If your CSV contains an ISO8601 date or date-time, you don’t need to do anything;
    readr will automatically recognize it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的CSV包含ISO8601日期或日期时间，则无需进行任何操作；readr将自动识别它：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you haven’t heard of *ISO8601* before, it’s an [international standard](https://oreil.ly/19K7t)
    for writing dates where the components of a date are organized from biggest to
    smallest separated by `-`. For example, in ISO8601 May 3, 2022, is `2022-05-03`.
    ISO8601 dates can also include times, where hour, minute, and second are separated
    by `:`, and the date and time components are separated by either a `T` or a space.
    For example, you could write 4:26 p.m. on May 3, 2022, as either `2022-05-03 16:26`
    or `2022-05-03T16:26`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前没有听说过*ISO8601*，它是一个[国际标准](https://oreil.ly/19K7t)，用于编写日期，其中日期的组成部分从最大到最小排列，用`-`分隔。例如，在ISO8601中，2022年5月3日写作`2022-05-03`。ISO8601日期还可以包括时间，其中小时、分钟和秒以`:`分隔，日期和时间组件以`T`或空格分隔。例如，您可以将2022年5月3日下午4点26分写为`2022-05-03
    16:26`或`2022-05-03T16:26`。
- en: For other date-time formats, you’ll need to use `col_types` plus [`col_date()`](https://readr.tidyverse.org/reference/parse_datetime.xhtml)
    or [`col_datetime()`](https://readr.tidyverse.org/reference/parse_datetime.xhtml)
    along with a date-time format. The date-time format used by readr is a standard
    used across many programming languages, describing a date component with a `%`
    followed by a single character. For example, `%Y-%m-%d` specifies a date that’s
    a year, `-`, month (as number) `-`, day. [Table 17-1](#tbl-date-formats) lists
    all the options.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他日期时间格式，您需要使用`col_types`加上[`col_date()`](https://readr.tidyverse.org/reference/parse_datetime.xhtml)或[`col_datetime()`](https://readr.tidyverse.org/reference/parse_datetime.xhtml)，以及日期时间格式。readr使用的日期时间格式是许多编程语言中通用的标准，描述日期组件的方式为`%`后跟单个字符。例如，`%Y-%m-%d`指定了一个日期，年份`-`月份（数字）`-`日。[表17-1](#tbl-date-formats)列出了所有选项。
- en: Table 17-1\. All date formats understood by readr
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 表17-1。readr理解的所有日期格式
- en: '| Type | Code | Meaning | Example |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 代码 | 意义 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Year | `%Y` | 4-digit year | 2021 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 年份 | `%Y` | 4位数年份 | 2021 |'
- en: '|  | `%y` | 2-digit year | 21 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|  | `%y` | 2位数年份 | 21 |'
- en: '| Month | `%m` | Number | 2 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 月份 | `%m` | 数字 | 2 |'
- en: '|  | `%b` | Abbreviated name | Feb |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|  | `%b` | 缩写名 | 二月 |'
- en: '|  | `%B` | Full name | February |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|  | `%B` | 全名 | 二月 |'
- en: '| Day | `%d` | Two digits | 02 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 日 | `%d` | 两位数 | 02 |'
- en: '|  | `%e` | One or two digits | 2 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '|  | `%e` | 一位或两位数字 | 2 |'
- en: '| Time | `%H` | 24-hour hour | 13 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | `%H` | 24小时制小时 | 13 |'
- en: '|  | `%I` | 12-hour hour | 1 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | `%I` | 12小时制小时 | 1 |'
- en: '|  | `%p` | a.m./p.m. | pm |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|  | `%p` | 上午/下午 | 下午 |'
- en: '|  | `%M` | Minutes | 35 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|  | `%M` | 分钟 | 35 |'
- en: '|  | `%S` | Seconds | 45 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|  | `%S` | 秒数 | 45 |'
- en: '|  | `%OS` | Seconds with decimal component | 45.35 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|  | `%OS` | 带小数部分的秒 | 45.35 |'
- en: '|  | `%Z` | Time zone name | America/Chicago |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '|  | `%Z` | 时区名称 | 美国/芝加哥 |'
- en: '|  | `%z` | Offset from UTC | +0800 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '|  | `%z` | 与UTC的偏移 | +0800 |'
- en: '| Other | `%.` | Skip one nondigit | : |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 其他 | `%.` | 跳过一个非数字 | : |'
- en: '|  | `%*` | Skip any number of nondigits |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '|  | `%*` | 跳过任意数量的非数字 |  |'
- en: 'This code shows a few options applied to a very ambiguous date:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码显示应用于非常模糊日期的几个选项：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that no matter how you specify the date format, it’s always displayed the
    same way once you get it into R.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无论您如何指定日期格式，一旦将其输入到 R 中，它始终以相同的方式显示。
- en: If you’re using `%b` or `%B` and working with non-English dates, you’ll also
    need to provide a [`locale()`](https://readr.tidyverse.org/reference/locale.xhtml).
    See the list of built-in languages in [`date_names_langs()`](https://readr.tidyverse.org/reference/date_names.xhtml),
    or create your own with [`date_names()`](https://readr.tidyverse.org/reference/date_names.xhtml).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`%b`或`%B`并处理非英文日期，则还需要提供[`locale()`](https://readr.tidyverse.org/reference/locale.xhtml)。请参阅[`date_names_langs()`](https://readr.tidyverse.org/reference/date_names.xhtml)中的内置语言列表，或使用[`date_names()`](https://readr.tidyverse.org/reference/date_names.xhtml)创建自己的语言。
- en: From Strings
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从字符串
- en: 'The date-time specification language is powerful but requires careful analysis
    of the date format. An alternative approach is to use lubridate’s helpers, which
    attempt to automatically determine the format once you specify the order of the
    component. To use them, identify the order in which year, month, and day appear
    in your dates; then arrange “y,” “m,” and “d” in the same order. That gives you
    the name of the lubridate function that will parse your date. For example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 日期时间规范语言功能强大，但需要仔细分析日期格式。另一种方法是使用lubridate的辅助函数，它们会在你指定组件顺序后尝试自动确定格式。要使用它们，确定年、月和日在你的日期中的顺序；然后以相同的顺序排列“y”、“m”和“d”。这将为你提供一个lubridate函数的名称，该函数将解析你的日期。例如：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[`ymd()`](https://lubridate.tidyverse.org/reference/ymd.xhtml) and friends
    create dates. To create a date-time, add an underscore and one or more of “h”,
    “m”, and “s” to the name of the parsing function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ymd()`](https://lubridate.tidyverse.org/reference/ymd.xhtml) 和其它函数用于创建日期。要创建日期时间，只需在解析函数的名称后面加上一个或多个“h”、“m”和“s”的下划线：'
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also force the creation of a date-time from a date by supplying a time
    zone:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过指定时区强制创建一个日期时间：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here I use the UTC^([2](ch17.xhtml#idm44771288853952)) timezone, which you might
    also know as GMT, or Greenwich Mean Time, the time at 0° longitude.^([3](ch17.xhtml#idm44771288853216))
    It doesn’t use daylight saving time, making it a bit easier to compute with.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的时区是UTC^([2](ch17.xhtml#idm44771288853952))，你可能也知道它作为GMT或格林尼治标准时间，即0°经线处的时间^([3](ch17.xhtml#idm44771288853216))。这个时区不使用夏令时，计算起来更加简单。
- en: From Individual Components
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从个别组件
- en: 'Instead of a single string, sometimes you’ll have the individual components
    of the date-time spread across multiple columns. This is what we have in the `flights`
    data:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会有日期时间的各个组件分布在多个列中，这就是我们在`flights`数据中遇到的情况：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To create a date/time from this sort of input, use [`make_date()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml)
    for dates, or use [`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml)
    for date-times:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要从这种输入创建日期/时间，请使用[`make_date()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml)用于日期，或使用[`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml)用于日期时间：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s do the same thing for each of the four time columns in `flights`. The
    times are represented in a slightly odd format, so we use modulus arithmetic to
    pull out the hour and minute components. Once we’ve created the date-time variables,
    we focus in on the variables we’ll explore in the rest of the chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对`flights`中的四个时间列做同样的事情。这些时间以稍微奇怪的格式表示，因此我们使用模数运算来提取小时和分钟组件。创建了日期时间变量后，我们将重点放在本章余下部分将要探索的变量上。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this data, we can visualize the distribution of departure times across
    the year:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些数据，我们可以可视化整年出发时间的分布情况：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![A frequency polyon with departure time (Jan-Dec 2013) on the x-axis and number
    of flights on the y-axis (0-1000). The frequency polygon is binned by day so you
    see a time series of flights by day. The pattern is dominated by a weekly pattern;
    there are fewer flights on weekends. The are few days that stand out as having
    a surprisingly few flights in early February, early July, late November, and late
    December.](assets/rds2_17in01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![一个频率多边形图，横轴是出发时间（2013年1月至12月），纵轴是航班数（0-1000）。频率多边形按天进行分箱，因此可以看到航班的时间序列。图案由周模式主导；周末航班较少。少数日期在二月初、七月初、十一月末和十二月末的航班明显较少。](assets/rds2_17in01.png)'
- en: 'Or within a single day:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在同一天内：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![A frequency polygon with departure time (6am - midnight Jan 1) on the x-axis,
    number of flights on the y-axis (0-17), binned into 10 minute increments. It''s
    hard to see much pattern because of high variability, but most bins have 8-12
    flights, and there are markedly fewer flights before 6am and after 8pm.](assets/rds2_17in02.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![一个频率多边形图，横轴是出发时间（6点到午夜1月1日），纵轴是航班数（0-17），分为10分钟间隔。由于高度变异性，很难看出明显模式，但大多数区段有8-12次航班，而在凌晨6点前和晚上8点后的航班明显较少。](assets/rds2_17in02.png)'
- en: Note that when you use date-times in a numeric context (like in a histogram),
    1 means 1 second, so a binwidth of 86400 means one day. For dates, 1 means 1 day.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你在数值上下文中（比如直方图）使用日期时间时，1代表1秒，因此86400的区间宽度代表一天。对于日期，1表示1天。
- en: From Other Types
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从其他类型
- en: 'You may want to switch between a date-time and a date. That’s the job of [`as_datetime()`](https://lubridate.tidyverse.org/reference/as_date.xhtml)
    and [`as_date()`](https://lubridate.tidyverse.org/reference/as_date.xhtml):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要在日期时间和日期之间切换。这就是[`as_datetime()`](https://lubridate.tidyverse.org/reference/as_date.xhtml)和[`as_date()`](https://lubridate.tidyverse.org/reference/as_date.xhtml)的作用：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Sometimes you’ll get date/times as numeric offsets from the “Unix epoch,” 1970-01-01\.
    If the offset is in seconds, use [`as_datetime()`](https://lubridate.tidyverse.org/reference/as_date.xhtml);
    if it’s in days, use [`as_date()`](https://lubridate.tidyverse.org/reference/as_date.xhtml).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您会得到作为从“Unix纪元”1970-01-01开始的数值偏移的日期/时间。如果偏移以秒为单位，请使用[`as_datetime()`](https://lubridate.tidyverse.org/reference/as_date.xhtml)；如果以天数为单位，请使用[`as_date()`](https://lubridate.tidyverse.org/reference/as_date.xhtml)。
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Exercises
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: What happens if you parse a string that contains invalid dates?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果解析包含无效日期的字符串会发生什么？
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What does the `tzone` argument to [`today()`](https://lubridate.tidyverse.org/reference/now.xhtml)
    do? Why is it important?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`today()`](https://lubridate.tidyverse.org/reference/now.xhtml)函数的`tzone`参数是做什么的？为什么它很重要？'
- en: For each of the following date-times, show how you’d parse it using a readr
    column specification and a lubridate function.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于以下每个日期时间，展示您如何使用readr列规范和lubridate函数来解析它。
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Date-Time Components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日期时间组件
- en: Now that you know how to get date-time data into R’s date-time data structures,
    let’s explore what you can do with them. This section will focus on the accessor
    functions that let you get and set individual components. The next section will
    look at how arithmetic works with date-times.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道如何将日期时间数据输入到R的日期时间数据结构中，让我们探讨您可以用它们做什么。本节将重点介绍让您获取和设置单个组件的访问器函数。接下来的部分将介绍日期时间的算术运算如何工作。
- en: Getting Components
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取组件
- en: You can pull out individual parts of the date with the accessor functions [`year()`](https://lubridate.tidyverse.org/reference/year.xhtml),
    [`month()`](https://lubridate.tidyverse.org/reference/month.xhtml), [`mday()`](https://lubridate.tidyverse.org/reference/day.xhtml)
    (day of the month), [`yday()`](https://lubridate.tidyverse.org/reference/day.xhtml)
    (day of the year), [`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)
    (day of the week), [`hour()`](https://lubridate.tidyverse.org/reference/hour.xhtml),
    [`minute()`](https://lubridate.tidyverse.org/reference/minute.xhtml), and [`second()`](https://lubridate.tidyverse.org/reference/second.xhtml).
    These are effectively the opposites of [`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用访问器函数[`year()`](https://lubridate.tidyverse.org/reference/year.xhtml)、[`month()`](https://lubridate.tidyverse.org/reference/month.xhtml)、[`mday()`](https://lubridate.tidyverse.org/reference/day.xhtml)（月中的某一天）、[`yday()`](https://lubridate.tidyverse.org/reference/day.xhtml)（年中的某一天）、[`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)（星期几）、[`hour()`](https://lubridate.tidyverse.org/reference/hour.xhtml)、[`minute()`](https://lubridate.tidyverse.org/reference/minute.xhtml)和[`second()`](https://lubridate.tidyverse.org/reference/second.xhtml)来获取日期的各个部分。这些函数实际上是[`make_datetime()`](https://lubridate.tidyverse.org/reference/make_datetime.xhtml)的反向操作。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: For [`month()`](https://lubridate.tidyverse.org/reference/month.xhtml) and [`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)
    you can set `label = TRUE` to return the abbreviated name of the month or day
    of the week. Set `abbr = FALSE` to return the full name.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`month()`](https://lubridate.tidyverse.org/reference/month.xhtml)和[`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)，您可以设置`label
    = TRUE`以返回月份或星期几的缩写名称。将`abbr = FALSE`设置为返回完整名称。
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can use [`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)
    to see that more flights depart during the week than on the weekend:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[`wday()`](https://lubridate.tidyverse.org/reference/day.xhtml)来查看工作日比周末更多的航班离港情况：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![A bar chart with days of the week on the x-axis and number of flights on
    the y-axis. Monday-Friday have roughly the same number of flights, ~48,0000, decreasingly
    slightly over the course of the week. Sunday is a little lower (~45,000), and
    Saturday is much lower (~38,000).](assets/rds2_17in03.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![一张柱状图，x轴显示星期几，y轴显示航班数量。星期一至星期五的航班数量大约相同，约48,0000，随着一周的进展略有下降。星期日略低（约45,000），星期六更低（约38,000）。](assets/rds2_17in03.png)'
- en: 'We can also look at the average departure delay by minute within the hour.
    There’s an interesting pattern: flights leaving in minutes 20–30 and 50–60 have
    much lower delays than the rest of the hour!'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看每小时内按分钟计算的平均出发延误时间。有一个有趣的模式：在20-30分钟和50-60分钟离开的航班的延误要比整点其他时间段的航班低得多！
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![A line chart with minute of actual departure (0-60) on the x-axis and average
    delay (4-20) on the y-axis. Average delay starts at (0, 12), steadily increases
    to (18, 20), then sharply drops, hitting at minimum at ~23 minute past the hour
    and 9 minutes of delay. It then increases again to (17, 35), and sharply decreases
    to (55, 4). It finishes off with an increase to (60, 9).](assets/rds2_17in04.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![在 x 轴上显示实际出发时间（0-60 分钟）的线性图，y 轴显示平均延误（4-20 分钟）。平均延误从 (0, 12) 开始，稳步增加到 (18,
    20)，然后急剧下降，在小时过后大约 23 分钟和 9 分钟的延误。然后再次增加到 (17, 35)，急剧下降到 (55, 4)，最后增加到 (60, 9)。](assets/rds2_17in04.png)'
- en: 'Interestingly, if we look at the *scheduled* departure time, we don’t see such
    a strong pattern:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，如果我们看的是*计划*出发时间，我们就看不到这样强烈的模式：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![A line chart with minute of scheduled departure (0-60) on the x-axis and
    average delay (4-16). There is relatively little pattern, just a small suggestion
    that the average delay decreases from maybe 10 minutes to 8 minutes over the course
    of the hour.](assets/rds2_17in05.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![在 x 轴上显示计划出发时间（0-60 分钟）的线性图，y 轴显示平均延误（4-16 分钟）。没有明显的模式，只有一个小小的倾向，即平均延误从大约
    10 分钟降到 8 分钟左右。](assets/rds2_17in05.png)'
- en: So why do we see that pattern with the actual departure times? Well, like much
    data collected by humans, there’s a strong bias toward flights leaving at “nice”
    departure times, as [Figure 17-1](#fig-human-rounding) shows. Always be alert
    for this sort of pattern whenever you work with data that involves human judgment!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么我们在实际出发时间中看到这样的模式呢？嗯，像许多由人类收集的数据一样，这些数据显示出对“好”出发时间的强烈偏好，如 [图 17-1](#fig-human-rounding)
    所示。在处理涉及人类判断的数据时，务必警惕这种模式！
- en: '![A line plot with departure minute (0-60) on the x-axis and number of flights
    (0-60000) on the y-axis. Most flights are scheduled to depart on either the hour
    (~60,000) or the half hour (~35,000). Otherwise, all most all flights are scheduled
    to depart on multiples of five, with a few extra at 15, 45, and 55 minutes. ](assets/rds2_1701.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![在 x 轴上显示出发分钟（0-60 分钟）的线性图，y 轴显示航班数量（0-60000）。大多数航班计划在整点（约 60,000）或半小时（约 35,000）出发。除此之外，所有航班几乎都计划在
    5 的倍数出发，15、45 和 55 分钟也有一些额外的航班。](assets/rds2_1701.png)'
- en: Figure 17-1\. A frequency polygon showing the number of flights scheduled to
    depart each hour. You can see a strong preference for round numbers like 0 and
    30 and generally for numbers that are a multiple of five.
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 17-1\. 一个频率多边形展示每小时计划出发的航班数量。可以看到对于 0 和 30 这样的整数以及通常为 5 的倍数有很强的偏好。
- en: Rounding
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 舍入
- en: 'An alternative approach to plotting individual components is to round the date
    to a nearby unit of time, with [`floor_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml),
    [`round_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml),
    and [`ceiling_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml).
    Each function takes a vector of dates to adjust and then the name of the unit
    to round down (floor), round up (ceiling), or round to. This, for example, allows
    us to plot the number of flights per week:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种绘制单独组件的方法是将日期四舍五入到附近的时间单位，使用 [`floor_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml)、[`round_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml)
    和 [`ceiling_date()`](https://lubridate.tidyverse.org/reference/round_date.xhtml)。每个函数接受需要调整的日期向量，然后是要向下舍入（floor）、向上舍入（ceiling）或四舍五入到的单位名称。例如，这使我们可以绘制每周的航班数量：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![A line plot with week (Jan-Dec 2013) on the x-axis and number of flights
    (2,000-7,000) on the y-axis. The pattern is fairly flat from February to November
    with around 7,000 flights per week. There are far fewer flights on the first (approximately
    4,500 flights) and last weeks of the year (approximately 2,500 flights).](assets/rds2_17in06.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![在 x 轴上显示 2013 年 1 月至 12 月的周数，y 轴显示航班数量（2,000-7,000）。从 2 月到 11 月，每周航班数大致保持稳定在约
    7,000。年初（大约 4,500 航班）和年末（大约 2,500 航班）的航班数量要少得多。](assets/rds2_17in06.png)'
- en: 'You can use rounding to show the distribution of flights across the course
    of a day by computing the difference between `dep_time` and the earliest instant
    of that day:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用四舍五入来展示一天内航班的分布，方法是计算 `dep_time` 和当天最早时间的差：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![A line plot with depature time on the x-axis. This is units of seconds since
    midnight so it''s hard to interpret.](assets/rds2_17in07.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![在 x 轴上显示出发时间的线性图。这是自午夜以来的秒数单位，因此很难解释。](assets/rds2_17in07.png)'
- en: 'Computing the difference between a pair of date-times yields a difftime (more
    on that in [“Intervals”](#sec-intervals)). We can convert that to an `hms` object
    to get a more useful x-axis:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 计算一对日期时间之间的差异会产生一个difftime（关于此更多内容请参见[“间隔”](#sec-intervals)）。我们可以将其转换为一个`hms`对象以获得更有用的x轴：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![A line plot with departure time (midnight to midnight) on the x-axis and
    number of flights on the y-axis (0 to 15,000). There are very few (<100) flights
    before 5am. The number of flights then rises rapidly to 12,000 / hour, peaking
    at 15,000 at 9am, before falling to around 8,000 / hour for 10am to 2pm. Number
    of flights then increases to around 12,000 per hour until 8pm, when they rapidly
    drop again.](assets/rds2_17in08.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![一条线图，以起飞时间（午夜到午夜）为x轴，航班数量为y轴（0到15,000）。在凌晨5点之前几乎没有（<100）航班。然后，航班数量迅速上升到每小时12,000次，于早上9点达到最高峰，然后在上午10点到下午2点期间下降到每小时约8,000次。然后航班数量再次上升，直到晚上8点左右迅速下降。](assets/rds2_17in08.png)'
- en: Modifying Components
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改组件
- en: You can also use each accessor function to modify the components of a date/time.
    This doesn’t come up much in data analysis but can be useful when cleaning data
    that has clearly incorrect dates.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用每个访问函数来修改日期/时间的组件。这在数据分析中并不常见，但在清理明显错误日期的数据时可能很有用。
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Alternatively, rather than modifying an existing variable, you can create a
    new date-time with [`update()`](https://rdrr.io/r/stats/update.xhtml). This also
    allows you to set multiple values in one step:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，而不是修改现有的变量，你可以使用[`update()`](https://rdrr.io/r/stats/update.xhtml)创建一个新的日期时间。这还允许你一次设置多个值：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If values are too big, they will roll over:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值太大，它们会回滚：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Exercises
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: How does the distribution of flight times within a day change over the course
    of the year?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一年中一天内航班时间分布如何变化？
- en: Compare `dep_time`, `sched_dep_time`, and `dep_delay`. Are they consistent?
    Explain your findings.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`dep_time`、`sched_dep_time`和`dep_delay`。它们是否一致？解释你的发现。
- en: 'Compare `air_time` with the duration between the departure and arrival. Explain
    your findings. (Hint: Consider the location of the airport.)'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`air_time`和起飞到达之间的时间间隔。解释你的发现。（提示：考虑机场的位置。）
- en: How does the average delay time change over the course of a day? Should you
    use `dep_time` or `sched_dep_time`? Why?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一天中平均延误时间如何变化？应该使用`dep_time`还是`sched_dep_time`？为什么？
- en: On what day of the week should you leave if you want to minimize the chance
    of a delay?
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果想要最小化延误的机会，一周中哪一天应该出发？
- en: What makes the distribution of `diamonds$carat` and `flights$sched_dep_time`
    similar?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么使得`diamonds$carat`和`flights$sched_dep_time`的分布类似？
- en: 'Confirm our hypothesis that the early departures of flights in minutes 20–30
    and 50–60 are caused by scheduled flights that leave early. Hint: Create a binary
    variable that tells you whether a flight was delayed.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认我们的假设，即航班在20-30分钟和50-60分钟的早期离开是由提前出发的计划航班引起的。提示：创建一个二元变量，告诉你航班是否延误。
- en: Time Spans
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间跨度
- en: 'Next you’ll learn about how arithmetic with dates works, including subtraction,
    addition, and division. Along the way, you’ll learn about three important classes
    that represent time spans:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习日期运算的工作原理，包括减法、加法和除法。在此过程中，你将了解三个重要的表示时间跨度的类别：
- en: Durations
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间
- en: Represent an exact number of seconds
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 表示精确的秒数
- en: Periods
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 时间段
- en: Represent human units like weeks and months
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 表示像周和月这样的人类单位
- en: Intervals
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 间隔
- en: Represent a starting and ending point
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 表示起点和终点
- en: How do you pick between duration, periods, and intervals? As always, pick the
    simplest data structure that solves your problem. If you care only about physical
    time, use a duration; if you need to add human times, use a period; and if you
    need to figure out how long a span is in human units, use an interval.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续时间、时间段和间隔之间如何选择？与往常一样，选择最简单的数据结构来解决你的问题。如果你只关心物理时间，使用持续时间；如果你需要添加人类时间，使用时间段；如果你需要计算时间跨度的长度，则使用间隔。
- en: Durations
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续时间
- en: 'In R, when you subtract two dates, you get a `difftime` object:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在R语言中，当你减去两个日期时，会得到一个`difftime`对象：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A `difftime` class object records a time span of seconds, minutes, hours, days,
    or weeks. This ambiguity can make difftimes a little painful to work with, so
    lubridate provides an alternative that always uses seconds: the *duration*.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`difftime`类对象记录以秒、分钟、小时、天或周为单位的时间跨度。这种模棱两可可能会使difftime对象在处理时有点麻烦，因此lubridate提供了一种始终使用秒的替代方案：*持续时间*。'
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Durations come with a bunch of convenient constructors:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间配有一系列便捷的构造函数：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Durations always record the time span in seconds. Larger units are created
    by converting minutes, hours, days, weeks, and years to seconds: 60 seconds in
    a minute, 60 minutes in an hour, 24 hours in a day, and 7 days in a week. Larger
    time units are more problematic. A year uses the “average” number of days in a
    year, i.e., 365.25\. There’s no way to convert a month to a duration, because
    there’s just too much variation.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间总是以秒为单位记录时间跨度。较大的单位通过将分钟、小时、天、周和年转换为秒来创建：1分钟60秒，1小时60分钟，1天24小时，1周7天。较大的时间单位更加复杂。一年使用了“平均”每年的天数，即365.25。没有办法将一个月转换为持续时间，因为变化太大。
- en: 'You can add and multiply durations:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对持续时间进行加法和乘法运算：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can add and subtract durations to and from days:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将持续时间加减到天数中：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'However, because durations represent an exact number of seconds, sometimes
    you might get an unexpected result:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，因为持续时间表示确切的秒数，有时您可能会得到意外的结果：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Why is one day after 1 a.m. March 8, returning as 2 a.m. on March 9? If you
    look carefully at the date, you might also notice that the time zones have changed.
    March 8 has only 23 hours because it’s when DST starts, so if we add a full day’s
    worth of seconds, we end up with a different time.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么3月8日凌晨1点后一天是3月9日凌晨2点？如果您仔细查看日期，您可能还会注意到时区已经发生了变化。3月8日仅有23小时，因为这是夏令时开始的时候，因此如果我们增加一整天的秒数，最终得到的时间会有所不同。
- en: Periods
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时期
- en: 'To solve this problem, lubridate provides *periods*. Periods are time spans
    but don’t have a fixed length in seconds; instead, they work with “human” times,
    like days and months. That allows them to work in a more intuitive way:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，lubridate提供了*时期*。时期是时间跨度，但没有固定的秒数长度；相反，它们处理像天和月这样的“人类”时间，这使它们以更直观的方式工作：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Like durations, periods can be created with a number of friendly constructor
    functions:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于持续时间，时期可以使用多个友好的构造函数创建：
- en: '[PRE34]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can add and multiply periods:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对时期进行加法和乘法运算：
- en: '[PRE35]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And of course, add them to dates. Compared to durations, periods are more likely
    to do what you expect:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以将它们添加到日期中。与持续时间相比，时期更有可能做出您所期望的事情：
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let’s use periods to fix an oddity related to our flight dates. Some planes
    appear to have arrived at their destination *before* they departed from New York
    City:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用时期来修正与我们的航班日期相关的奇怪现象。有些飞机似乎在从纽约市出发之前就已经到达了目的地：
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'These are overnight flights. We used the same date information for both the
    departure and the arrival times, but these flights arrived on the following day.
    We can fix this by adding `days(1)` to the arrival time of each overnight flight:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是过夜航班。我们在出发时间和到达时间都使用了相同的日期信息，但这些航班到达时已经是第二天了。我们可以通过在每个过夜航班的到达时间上添加`days(1)`来修正这个问题：
- en: '[PRE38]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now all of our flights obey the laws of physics:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所有的航班都遵循物理定律：
- en: '[PRE39]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Intervals
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区间
- en: What does `dyears(1) / ddays(365)` return? It’s not quite 1, because `dyears()`
    is defined as the number of seconds per average year, which is 365.25 days.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`dyears(1) / ddays(365)`返回什么？它不完全是1，因为`dyears()`被定义为平均每年的秒数，即365.25天。'
- en: 'What does `years(1) / days(1)` return? Well, if the year is 2015, it should
    return 365, but if it is 2016, it should return 366! There’s not quite enough
    information for lubridate to give a single clear answer. What it does instead
    is give an estimate:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`years(1) / days(1)`返回什么？好吧，如果是2015年，应该返回365，但如果是2016年，应该返回366！lubridate没有足够的信息给出一个单一明确的答案。它所做的是给出一个估计值：'
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If you want a more accurate measurement, you’ll have to use an *interval*. An
    interval is a pair of starting and ending date times, or you can think of it as
    a duration with a starting point.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要更准确的测量结果，您将需要使用*区间*。区间是一对起始和结束日期时间，或者您可以将其视为具有起始点的持续时间。
- en: 'You can create an interval by writing `start %--% end`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过编写`start %--% end`来创建一个区间：
- en: '[PRE41]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You could then divide it by [`days()`](https://lubridate.tidyverse.org/reference/period.xhtml)
    to find out how many days fit in the year:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过[`days()`](https://lubridate.tidyverse.org/reference/period.xhtml)来将其除以，以找出一年中有多少天：
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Exercises
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Explain `days(!overnight)` and `days(overnight)` to someone who has just started
    learning R. What is the key fact you need to know?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向刚开始学习R的人解释`days(!overnight)`和`days(overnight)`，你需要知道的关键事实是什么？
- en: Create a vector of dates giving the first day of every month in 2015\. Create
    a vector of dates giving the first day of every month in the *current* year.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个向量，其中包含2015年每个月的第一天的日期。创建一个向量，其中包含*当前*年每个月的第一天的日期。
- en: Write a function that, given your birthday (as a date), returns how old you
    are in years.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个函数，给定您的生日（作为日期），返回您的年龄。
- en: Why can’t `(today() %--% (today() + years(1))) / months(1)` work?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 `(today() %--% (today() + years(1))) / months(1)` 不能工作？
- en: Time Zones
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时区
- en: Time zones are an enormously complicated topic because of their interaction
    with geopolitical entities. Fortunately we don’t need to dig into all the details
    as they’re not all important for data analysis, but there are a few challenges
    we’ll need to tackle head on.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 时区是一个极其复杂的主题，因为它们与地缘政治实体的互动。 幸运的是，我们不需要深入研究所有细节，因为它们对于数据分析并不都重要，但我们需要直面一些挑战。
- en: The first challenge is that everyday names of time zones tend to be ambiguous.
    For example, if you’re American, you’re probably familiar with Eastern Standard
    Time (EST). However, both Australia and Canada also have EST! To avoid confusion,
    R uses the international standard IANA time zones. These use a consistent naming
    scheme `{area}/{location}`, typically in the form `{continent}/{city}` or `{ocean}/{city}`.
    Examples include “America/New_York,” “Europe/Paris,” and “Pacific/Auckland.”
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个挑战是时区的日常名称往往是模糊的。 例如，如果您是美国人，您可能熟悉东部标准时间（EST）。 但是，澳大利亚和加拿大也都有 EST！ 为了避免混淆，R
    使用国际标准 IANA 时区。 这些使用一致的命名方案 `{area}/{location}`，通常以 `{continent}/{city}` 或 `{ocean}/{city}`
    的形式。 示例包括“America/New_York”、“Europe/Paris” 和 “Pacific/Auckland”。
- en: You might wonder why the time zone uses a city when typically you think of time
    zones as associated with a country or region within a country. This is because
    the IANA database has to record decades worth of time zone rules. Over the course
    of decades, countries change names (or break apart) fairly frequently, but city
    names tend to stay the same. Another problem is that the name needs to reflect
    not only the current behavior but also the complete history. For example, there
    are time zones for both “America/New_York” and “America/Detroit.” These cities
    both currently use Eastern Standard Time, but in 1969–1972 Michigan (the state
    in which Detroit is located) did not follow DST, so it needs a different name.
    It’s worth reading the [raw time zone database](https://oreil.ly/NwvsT) just to
    read some of these stories!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道为什么时区使用城市，而通常您认为时区与国家或国家内的地区相关联。 这是因为 IANA 数据库必须记录数十年的时区规则。 在几十年的时间里，国家经常更改名称（或分裂），但城市名称倾向于保持不变。
    另一个问题是，名称需要反映不仅当前行为还完整的历史。 例如，有“America/New_York”和“America/Detroit”的时区。 这些城市目前都使用东部标准时间，但在1969年至1972年间，密歇根州（底特律所在的州）不遵循夏令时，因此需要不同的名称。
    值得阅读 [原始时区数据库](https://oreil.ly/NwvsT) 以了解其中一些故事！
- en: 'You can find out what R thinks your current time zone is with [`Sys.timezone()`](https://rdrr.io/r/base/timezones.xhtml):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 [`Sys.timezone()`](https://rdrr.io/r/base/timezones.xhtml) 找出 R 认为您当前的时区是什么：
- en: '[PRE43]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: (If R doesn’t know, you’ll get an `NA`.)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: （如果 R 不知道，您将获得 `NA`。）
- en: 'And see the complete list of all time zone names with [`OlsonNames()`](https://rdrr.io/r/base/timezones.xhtml):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 并查看带有 [`OlsonNames()`](https://rdrr.io/r/base/timezones.xhtml) 的所有时区名称的完整列表：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In R, the time zone is an attribute of the date-time that only controls printing.
    For example, these three objects represent the same instant in time:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 R 中，时区是仅控制打印的日期时间的属性。 例如，这三个对象代表相同的时间瞬间：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You can verify that they’re the same time using subtraction:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过减法验证它们是否是同一时间：
- en: '[PRE46]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Unless otherwise specified, lubridate always uses UTC. UTC is the standard
    time zone used by the scientific community and is roughly equivalent to GMT. It
    does not have DST, which makes a convenient representation for computation. Operations
    that combine date-times, like [`c()`](https://rdrr.io/r/base/c.xhtml), will often
    drop the time zone. In that case, the date-times will display in the time zone
    of the first element:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，否则 lubridate 总是使用 UTC。 UTC 是科学界使用的标准时区，大致相当于 GMT。 它没有夏令时，这使得它成为计算的方便表示。
    像 [`c()`](https://rdrr.io/r/base/c.xhtml) 这样的组合日期时间的操作通常会丢弃时区。 在这种情况下，日期时间将以第一个元素的时区显示：
- en: '[PRE47]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You can change the time zone in two ways:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以两种方式更改时区：
- en: Keep the instant in time the same, and change how it’s displayed. Use this when
    the instant is correct but you want a more natural display.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持时间瞬间相同，更改其显示方式。 当瞬间是正确的，但您希望获得更自然的显示时，请使用此选项。
- en: '[PRE48]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '(This also illustrates another challenge of time zones: they’re not all integer
    hour offsets!)'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （这也说明了时区的另一个挑战：它们不全是整点偏移！）
- en: Change the underlying instant in time. Use this when you have an instant that
    has been labeled with the incorrect time zone and you need to fix it.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改底层的时间点。当你有一个带有错误时区标签的时间点，并且需要修正时使用这个选项。
- en: '[PRE49]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to the tools that lubridate provides to help you
    work with date-time data. Working with dates and times can seem harder than necessary,
    but we hope this chapter has helped you see why—date-times are more complex than
    they seem at first glance, and handling every possible situation adds complexity.
    Even if your data never crosses a DST boundary or involves a leap year, the functions
    need to be able to handle it.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向你介绍了 lubridate 提供的工具，帮助你处理日期时间数据。处理日期和时间可能比必要的更难，但我们希望这一章能帮助你看清楚原因——日期时间比一开始看起来的更复杂，处理每种可能的情况都增加了复杂性。即使你的数据从不跨越夏令时边界或涉及闰年，函数也需要能够处理。
- en: The next chapter gives a roundup of missing values. You’ve seen them in a few
    places and have no doubt encountered them in your own analysis, and it’s now time
    to provide a grab bag of useful techniques for dealing with them.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将总结缺失值。你已经在几个地方见过它们，并且无疑在自己的分析中遇到过，现在是时候提供一些有用的技术来处理它们了。
- en: ^([1](ch17.xhtml#idm44771289225952-marker)) A year is a leap year if it’s divisible
    by 4, unless it’s also divisible by 100, except if it’s also divisible by 400\.
    In other words, in every set of 400 years, there’s 97 leap years.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch17.xhtml#idm44771289225952-marker)) 如果一个年份能被4整除，则是闰年，除非它也能被100整除，除非它也能被400整除。换句话说，在每400年的周期中，有97个闰年。
- en: ^([2](ch17.xhtml#idm44771288853952-marker)) You might wonder what UTC stands
    for. It’s a compromise between the English “Coordinated Universal Time” and French
    “Temps Universel Coordonné.”
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch17.xhtml#idm44771288853952-marker)) 你可能想知道UTC是什么意思。它是英文“Coordinated
    Universal Time”和法文“Temps Universel Coordonné”的折衷结果。
- en: ^([3](ch17.xhtml#idm44771288853216-marker)) No prizes for guessing which country
    came up with the longitude system.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch17.xhtml#idm44771288853216-marker)) 猜猜看是哪个国家提出了经度系统，答对没有奖励。
