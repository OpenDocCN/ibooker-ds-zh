- en: Chapter 3\. Data Transformation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 数据转换
- en: Introduction
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Visualization is an important tool for generating insight, but it’s rare that
    you get the data in exactly the right form you need to make the graph you want.
    Often you’ll need to create some new variables or summaries to answer your questions
    with your data, or maybe you just want to rename the variables or reorder the
    observations to make the data a little easier to work with. You’ll learn how to
    do all that (and more!) in this chapter, which will introduce you to data transformation
    using the dplyr package and a new dataset on flights that departed New York City
    in 2013.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化是生成洞察力的重要工具，但很少有您能直接获取您需要的数据来制作想要的图形。通常，您需要创建一些新的变量或总结来回答您的数据问题，或者您可能只是想重新命名变量或重新排序观察以使数据更容易处理。在本章中，您将学习如何执行所有这些操作（以及更多！），介绍使用dplyr包和2013年离开纽约市的航班数据集进行数据转换。
- en: The goal of this chapter is to give you an overview of all the key tools for
    transforming a data frame. We’ll start with functions that operate on rows and
    then columns of a data frame, and then we’ll circle back to talk more about the
    pipe, an important tool that you use to combine verbs. We will then introduce
    the ability to work with groups. We will end the chapter with a case study that
    showcases these functions in action, and we’ll come back to the functions in more
    detail in later chapters, as we start to dig into specific types of data (e.g.,
    numbers, strings, dates).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是为您概述转换数据框的所有关键工具。我们将从操作数据框行和列的函数开始，然后我们将回到更多讨论管道，这是一个重要的工具，用于组合动词。然后，我们将介绍如何使用分组进行工作。最后，我们将以一个展示这些功能实际应用的案例研究结束，并在后续章节中更详细地回顾这些函数，深入挖掘特定类型的数据（例如数字、字符串、日期）。
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: In this chapter we’ll focus on the dplyr package, another core member of the
    tidyverse. We’ll illustrate the key ideas using data from the nycflights13 package
    and use ggplot2 to help us understand the data.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于dplyr包，这是tidyverse的另一个核心成员。我们将使用nycflights13包的数据来说明关键思想，并使用ggplot2帮助我们理解数据。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Take careful note of the conflicts message that’s printed when you load the
    tidyverse. It tells you that dplyr overwrites some functions in base R. If you
    want to use the base version of these functions after loading dplyr, you’ll need
    to use their full names: [`stats::filter()`](https://rdrr.io/r/stats/filter.xhtml)
    and [`stats::lag()`](https://rdrr.io/r/stats/lag.xhtml). So far we’ve mostly ignored
    which package a function comes from because most of the time it doesn’t matter.
    However, knowing the package can facilitate finding help as well as related functions,
    so when we need to be precise about which function a package comes from, we’ll
    use the same syntax as R: `packagename::functionname()`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载tidyverse时，务必注意冲突信息消息的内容。它告诉您，dplyr覆盖了base R中的某些函数。如果您希望在加载dplyr后使用这些函数的基本版本，则需要使用它们的全名：[`stats::filter()`](https://rdrr.io/r/stats/filter.xhtml)
    和 [`stats::lag()`](https://rdrr.io/r/stats/lag.xhtml)。到目前为止，我们大多数时间忽略了函数来自哪个包，因为大多数情况下这并不重要。然而，知道包的来源可以帮助您找到帮助以及相关函数，因此当我们需要准确指定函数来自哪个包时，我们将使用与R相同的语法：`包名::函数名()`。
- en: nycflights13
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: nycflights13
- en: To explore the basic dplyr verbs, we’re going to use [`nycflights13::flights`](https://rdrr.io/pkg/nycflights13/man/flights.xhtml).
    This dataset contains all 336,776 flights that departed from New York City in
    2013\. The data comes from the US Bureau of Transportation Statistics and is documented
    in [`?flights`](https://rdrr.io/pkg/nycflights13/man/flights.xhtml).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要探索基本的dplyr动词，我们将使用[`nycflights13::flights`](https://rdrr.io/pkg/nycflights13/man/flights.xhtml)。此数据集包含了2013年从纽约市起飞的所有336,776架次航班。数据来自美国运输统计局，并在[`?flights`](https://rdrr.io/pkg/nycflights13/man/flights.xhtml)中有详细记录。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`flights` is a tibble, a special type of data frame used by the tidyverse to
    avoid some common gotchas. The most important difference between tibbles and data
    frames is the way tibbles print; they are designed for large datasets, so they
    show only the first few rows and only the columns that fit on one screen. There
    are a few options to see everything. If you’re using RStudio, the most convenient
    is probably `View(flights)`, which will open an interactive scrollable and filterable
    view. Otherwise, you can use `print(flights, width = Inf)` to show all columns
    or use [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.xhtml):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`flights` 是一个 tibble，这是 tidyverse 中用来避免一些常见问题的一种特殊数据框。tibble 和数据框之间最重要的区别是它们的打印方式；它们被设计用于大型数据集，因此只显示前几行和能在一个屏幕上显示的列。有几种方法可以查看所有内容。如果你使用
    RStudio，最方便的可能是 `View(flights)`，它将打开一个交互式可滚动和可过滤的视图。否则，你可以使用 `print(flights, width
    = Inf)` 来显示所有列，或者使用 [`glimpse()`](https://pillar.r-lib.org/reference/glimpse.xhtml)。'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In both views, the variables names are followed by abbreviations that tell
    you the type of each variable: `<int>` is short for integer, `<dbl>` is short
    for double (aka real numbers), `<chr>` for character (aka strings), and `<dttm>`
    for date-time. These are important because the operations you can perform on a
    column depend so much on its “type.”'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种视图中，变量名后面跟着缩写，告诉你每个变量的类型：`<int>` 代表整数，`<dbl>` 代表双精度数（也就是实数），`<chr>` 代表字符（也就是字符串），`<dttm>`
    代表日期时间。这些很重要，因为你可以对列执行的操作很大程度上取决于它的“类型”。
- en: dplyr Basics
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dplyr 基础
- en: 'You’re about to learn the primary dplyr verbs (functions), which will allow
    you to solve the vast majority of your data manipulation challenges. But before
    we discuss their individual differences, it’s worth stating what they have in
    common:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你即将学习到主要的 dplyr 动词（函数），这将使你能够解决绝大多数的数据操作挑战。但在讨论它们的个别差异之前，值得声明它们的共同点：
- en: The first argument is always a data frame.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数始终是数据框。
- en: The subsequent arguments typically describe which columns to operate on, using
    the variable names (without quotes).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后续的参数通常描述要操作的列，使用变量名（无需引号）。
- en: The output is always a new data frame.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出始终是一个新的数据框。
- en: 'Because each verb does one thing well, solving complex problems will usually
    require combining multiple verbs, and we’ll do so with the pipe, `|>`. We’ll discuss
    the pipe more in [“The Pipe”](#sec-the-pipe), but in brief, the pipe takes the
    thing on its left and passes it along to the function on its right so that `x
    |> f(y)` is equivalent to `f(x, y)`, and `x |> f(y) |> g(z)` is equivalent to
    `g(f(x, y), z)`. The easiest way to pronounce the pipe is “then.” That makes it
    possible to get a sense of the following code even though you haven’t yet learned
    the details:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因为每个动词都能做好一件事情，解决复杂问题通常需要结合多个动词，并且我们将使用管道 `|>` 进行操作。我们将在[“管道”](#sec-the-pipe)中详细讨论管道，但简单来说，管道接受左边的内容并将其传递给右边的函数，所以
    `x |> f(y)` 等同于 `f(x, y)`，`x |> f(y) |> g(z)` 等同于 `g(f(x, y), z)`。最简单的方法是将管道读作“then”。这使得即使你尚未学习细节，也能对以下代码有所了解：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'dplyr’s verbs are organized into four groups based on what they operate on:
    *rows*, *columns*, *groups*, and *tables*. In the following sections, you’ll learn
    the most important verbs for rows, columns, and groups; then we’ll come back to
    the join verbs that work on tables in [Chapter 19](ch19.xhtml#chp-joins). Let’s
    dive in!'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: dplyr 的动词按照它们操作的内容分为四组：*行*、*列*、*组* 和 *表*。在接下来的章节中，你将学习行、列和组的最重要的动词；然后我们将回到在[第19章](ch19.xhtml#chp-joins)中操作表的连接动词。让我们开始吧！
- en: Rows
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行
- en: The most important verbs that operate on rows of a dataset are [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml),
    which changes which rows are present without changing their order, and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml),
    which changes the order of the rows without changing which are present. Both functions
    affect only the rows, and the columns are left unchanged. We’ll also discuss [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml),
    which finds rows with unique values, but unlike [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)
    and [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml), it can also
    optionally modify the columns.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数据集行的最重要动词是[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)，它更改出现的行而不更改它们的顺序，以及[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)，它更改行的顺序而不更改出现的行。这两个函数只影响行，而列保持不变。我们还将讨论[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)，它查找具有唯一值的行，但与[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)和[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)不同，它还可以选择修改列。
- en: filter()
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`filter()`'
- en: '[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml) allows you
    to keep rows based on the values of the columns.^([1](ch03.xhtml#idm44771332966640))
    The first argument is the data frame. The second and subsequent arguments are
    the conditions that must be true to keep the row. For example, we could find all
    flights that departed more than 120 minutes (two hours) late:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)允许您基于列的值保留行。^([1](ch03.xhtml#idm44771332966640))
    第一个参数是数据框。第二个及后续参数是必须为真的条件以保留行。例如，我们可以找到所有延误超过120分钟（两小时）的航班：'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As well as `>` (greater than), you can use `>=` (greater than or equal to),
    `<` (less than), `<=` (less than or equal to), `==` (equal to), and `!=` (not
    equal to). You can also combine conditions with `&` or `,` to indicate “and” (check
    for both conditions) or with `|` to indicate “or” (check for either condition):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `>`（大于），您还可以使用 `>=`（大于或等于），`<`（小于），`<=`（小于或等于），`==`（等于）和 `!=`（不等于）。您还可以使用
    `&` 或 `,` 结合条件表示“并且”（检查两个条件）或使用 `|` 表示“或”（检查任一条件）：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There’s a useful shortcut when you’re combining `|` and `==`: `%in%`. It keeps
    rows where the variable equals one of the values on the right:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您结合 `|` 和 `==` 时，有一个有用的快捷方式：`%in%`。它保留变量等于右侧值之一的行：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’ll come back to these comparisons and logical operators in more detail in
    [Chapter 12](ch12.xhtml#chp-logicals).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第12章](ch12.xhtml#chp-logicals)中更详细地讨论这些比较和逻辑运算符。
- en: 'When you run [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml),
    dplyr executes the filtering operation, creating a new data frame, and then prints
    it. It doesn’t modify the existing `flights` dataset because dplyr functions never
    modify their inputs. To save the result, you need to use the assignment operator,
    `<-`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)时，dplyr 执行过滤操作，创建一个新的数据框，然后将其打印出来。它不会修改现有的
    `flights` 数据集，因为 dplyr 函数从不修改它们的输入。要保存结果，您需要使用赋值运算符 `<-`：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Common Mistakes
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见错误
- en: 'When you’re starting out with R, the easiest mistake to make is to use `=`
    instead of `==` when testing for equality. [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    will let you know when this happens:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 R 时，最容易犯的错误是在测试相等性时使用 `=` 而不是 `==`。[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)会在发生这种情况时通知您：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another mistake is writing “or” statements like you would in English:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个错误是像在英语中那样编写“或”语句：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This “works” in the sense that it doesn’t throw an error, but it doesn’t do
    what you want because `|` first checks the condition `month == 1` and then checks
    the condition `2`, which is not a sensible condition to check. We’ll learn more
    about what’s happening here and why in [“Boolean Operations”](ch15.xhtml#sec-boolean-operations).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这“有效”，意味着它不会报错，但它不会做你想要的事情，因为 `|` 首先检查条件 `month == 1`，然后检查条件 `2`，这不是一个明智的条件。我们将在[“布尔运算”](ch15.xhtml#sec-boolean-operations)中详细了解这里发生的情况和原因。
- en: arrange()
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`arrange()`'
- en: '[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml) changes
    the order of the rows based on the value of the columns. It takes a data frame
    and a set of column names (or more complicated expressions) to order by. If you
    provide more than one column name, each additional column will be used to break
    ties in the values of preceding columns. For example, the following code sorts
    by the departure time, which is spread over four columns. We get the earliest
    years first, then within a year the earliest months, etc.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)根据列的值更改行的顺序。
    它接受数据框和一组列名（或更复杂的表达式）来排序。 如果提供多个列名，则每个额外的列将用于打破前面列值的关系。 例如，以下代码按出发时间排序，该时间分布在四列中。
    我们首先得到最早的年份，然后在一年内得到最早的月份，等等。'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can use [`desc()`](https://dplyr.tidyverse.org/reference/desc.xhtml) on
    a column inside of [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)
    to reorder the data frame based on that column in descending (big-to-small) order.
    For example, this code orders flights from most to least delayed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)内部的列上使用[`desc()`](https://dplyr.tidyverse.org/reference/desc.xhtml)来按降序（从大到小）重新排序数据框。
    例如，此代码按最长延误的航班排序：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that the number of rows has not changed. We’re only arranging the data;
    we’re not filtering it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，行数没有改变。 我们只是排列数据； 我们没有过滤它。
- en: distinct()
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: distinct()
- en: '[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml) finds
    all the unique rows in a dataset, so in a technical sense, it primarily operates
    on the rows. Most of the time, however, you’ll want the distinct combination of
    some variables, so you can also optionally supply column names:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)在数据集中找到所有唯一的行，因此在技术上，它主要操作行。
    大多数情况下，但是，您将希望某些变量的唯一组合，因此还可以选择提供列名：'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, if you want to keep the other columns when filtering for unique
    rows, you can use the `.keep_all = TRUE` option:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您想在过滤唯一行时保留其他列，可以使用`.keep_all = TRUE`选项：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It’s not a coincidence that all of these distinct flights are on January 1:
    [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml) will find
    the first occurrence of a unique row in the dataset and discard the rest.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些独特航班都是在1月1日，这并非偶然：[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)将找到数据集中唯一行的第一次出现并且丢弃其余。
- en: If you want to find the number of occurrences instead, you’re better off swapping
    [`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml) for [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml),
    and with the `sort = TRUE` argument you can arrange them in descending order of
    number of occurrences. You’ll learn more about count in [“Counts”](ch13.xhtml#sec-counts).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要找到发生的次数，最好将[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.xhtml)换成[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)，并且通过`sort
    = TRUE`参数，您可以按发生次数降序排列它们。 您将在[“计数”](ch13.xhtml#sec-counts)中了解更多信息。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exercises
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'In a single pipeline for each condition, find all flights that meet the condition:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个条件的单一管道，请查找满足条件的所有航班：
- en: Had an arrival delay of two or more hours
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达延误两个或更多小时
- en: Flew to Houston (`IAH` or `HOU`)
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞往休斯顿（`IAH`或`HOU`）
- en: Were operated by United, American, or Delta
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由联合、美国或达美运营
- en: Departed in summer (July, August, and September)
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在夏季（7月、8月和9月）起飞
- en: Arrived more than two hours late, but didn’t leave late
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达晚于两小时，但未晚点离开
- en: Were delayed by at least an hour, but made up more than 30 minutes in flight
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起飞至少推迟了一个小时，但在飞行中超过30分钟
- en: Sort `flights` to find the flights with the longest departure delays. Find the
    flights that left earliest in the morning.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`flights`进行排序，以找到出发延误最长的航班。 找到早晨出发最早的航班。
- en: 'Sort `flights` to find the fastest flights. (Hint: Try including a math calculation
    inside of your function.)'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`flights`进行排序，以找到最快的航班。（提示：尝试在函数内部包含数学计算。）
- en: Was there a flight on every day of 2013?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2013年每天都有航班吗？
- en: Which flights traveled the farthest distance? Which traveled the least distance?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些航班飞行的距离最远？ 哪些飞行的距离最短？
- en: Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml) if you’re
    using both? Why/why not? Think about the results and how much work the functions
    would have to do.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果同时使用[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)和[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)，使用顺序是否重要？为什么？考虑结果以及函数需要执行的工作量。
- en: Columns
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列
- en: 'There are four important verbs that affect the columns without changing the
    rows: [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml) creates
    new columns that are derived from the existing columns, [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)
    changes which columns are present, [`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml)
    changes the names of the columns, and [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)
    changes the positions of the columns.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个重要的动词会影响列而不改变行：[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)创建新列，这些列是从现有列派生出来的；[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)改变存在的列；[`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml)改变列的名称；以及[`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)改变列的位置。
- en: mutate()
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mutate()
- en: 'The job of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    is to add new columns that are calculated from the existing columns. In the transform
    chapters, you’ll learn a large set of functions that you can use to manipulate
    different types of variables. For now, we’ll stick with basic algebra, which allows
    us to compute the `gain`, how much time a delayed flight made up in the air, and
    the `speed` in miles per hour:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)的作用是添加新列，这些列是从现有列计算而来的。在后续的转换章节中，您将学习一系列函数，可以用来操作不同类型的变量。目前，我们将继续使用基本的代数，这样可以计算`gain`（延误航班在空中弥补的时间量）和以英里每小时计算的`speed`：'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: By default, [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    adds new columns on the right side of your dataset, which makes it difficult to
    see what’s happening here. We can use the `.before` argument to instead add the
    variables to the left side:^([2](ch03.xhtml#idm44771330064672))
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)会在数据集的右侧添加新列，这使得难以理解正在发生的情况。我们可以使用`.before`参数将变量添加到左侧：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `.` is a sign that `.before` is an argument to the function, not the name
    of a third new variable we are creating. You can also use `.after` to add after
    a variable, and in both `.before` and `.after` you can use the variable name instead
    of a position. For example, we could add the new variables after `day`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`.`是一个标志，指示`.before`是函数的参数，而不是我们正在创建的第三个新变量的名称。您还可以使用`.after`在变量后添加，`.before`和`.after`都可以使用变量名而不是位置。例如，我们可以在`day`后添加新变量：'
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternatively, you can control which variables are kept with the `.keep` argument.
    A particularly useful argument is `"used"`, which specifies that we keep only
    the columns that were involved or created in the [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)
    step. For example, the following output will contain only the variables `dep_delay`,
    `arr_delay`, `air_time`, `gain`, `hours`, and `gain_per_hour`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用`.keep`参数来控制保留哪些变量。特别有用的参数是`"used"`，它指定我们仅保留在[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)步骤中涉及或创建的列。例如，以下输出仅包含变量`dep_delay`、`arr_delay`、`air_time`、`gain`、`hours`和`gain_per_hour`：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that since we haven’t assigned the result of the previous computation back
    to `flights`, the new variables `gain,` `hours`, and `gain_per_hour` will be printed
    only and will not be stored in a data frame. And if we want them to be available
    in a data frame for future use, we should think carefully about whether we want
    the result to be assigned back to `flights`, overwriting the original data frame
    with many more variables, or to a new object. Often, the right answer is a new
    object that is named informatively to indicate its contents, e.g., `delay_gain`,
    but you might also have good reasons for overwriting `flights`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们尚未将上述计算的结果分配回`flights`，新变量`gain`、`hours`和`gain_per_hour`只会被打印出来，并不会存储在数据框中。如果我们希望它们在未来的使用中可用于数据框，我们应该仔细考虑是否希望将结果分配回`flights`，覆盖原始数据框并添加更多变量，或者分配到一个新对象。通常情况下，正确答案是创建一个具有信息性命名的新对象，例如`delay_gain`，但您可能也有充分的理由覆盖`flights`。
- en: select()
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: select()
- en: 'It’s not uncommon to get datasets with hundreds or even thousands of variables.
    In this situation, the first challenge is often just focusing on the variables
    you’re interested in. [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)
    allows you to rapidly zoom in on a useful subset using operations based on the
    names of the variables:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的情况是得到包含数百甚至数千个变量的数据集。在这种情况下，第一个挑战通常是集中精力处理你感兴趣的变量。[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)允许你通过基于变量名称的操作迅速缩小范围，聚焦于有用的子集：
- en: 'Select columns by name:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据名称选择列：
- en: '[PRE19]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Select all columns between year and day (inclusive):'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择从年到日之间的所有列（包括年和日）：
- en: '[PRE20]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Select all columns except those from year to day (inclusive):'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择除了年到日之间的所有列之外的列：
- en: '[PRE21]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can also use `-` instead of `!` (and you’re likely to see that in the wild);
    we recommend `!` because it reads as “not” and combines well with `&` and `|`.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用`-`代替`!`（在实际应用中可能会看到），但我们建议使用`!`，因为它表示“非”，并且与`&`和`|`结合使用效果更佳。
- en: 'Select all columns that are characters:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择所有字符类型的列
- en: '[PRE22]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are a number of helper functions you can use within [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)中可以使用多个辅助函数：
- en: '`starts_with("abc")`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`starts_with("abc")`'
- en: Matches names that begin with “abc”
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配以“abc”开头的名称
- en: '`ends_with("xyz")`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`ends_with("xyz")`'
- en: Matches names that end with “xyz”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配以“xyz”结尾的名称
- en: '`contains("ijk")`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`contains("ijk")`'
- en: Matches names that contain “ijk”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配包含“ijk”的名称
- en: '`num_range("x", 1:3)`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`num_range("x", 1:3)`'
- en: Matches `x1`, `x2`, and `x3`
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配`x1`、`x2`和`x3`
- en: See [`?select`](https://dplyr.tidyverse.org/reference/select.xhtml) for more
    details. Once you know regular expressions (the topic of [Chapter 15](ch15.xhtml#chp-regexps)),
    you’ll also be able to use [`matches()`](https://tidyselect.r-lib.org/reference/starts_with.xhtml)
    to select variables that match a pattern.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`?select`](https://dplyr.tidyverse.org/reference/select.xhtml)获取更多细节。一旦你掌握了正则表达式（第
    [15章](ch15.xhtml#chp-regexps)的主题），你还可以使用[`matches()`](https://tidyselect.r-lib.org/reference/starts_with.xhtml)选择与模式匹配的变量。
- en: 'You can rename variables as you [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)
    them by using `=`. The new name appears on the left side of the `=`, and the old
    variable appears on the right side:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)中通过使用`=`来重命名变量。新名称显示在`=`的左侧，旧变量显示在右侧：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: rename()
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: rename()
- en: 'If you want to keep all the existing variables and just want to rename a few,
    you can use [`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml) instead
    of [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保留所有现有的变量，只想重新命名其中的几个，可以使用[`rename()`](https://dplyr.tidyverse.org/reference/rename.xhtml)，而不是[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you have a bunch of inconsistently named columns and it would be painful
    to fix them all by hand, check out [`janitor::clean_names()`](https://rdrr.io/pkg/janitor/man/clean_names.xhtml),
    which provides some useful automated cleaning.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一堆命名不一致的列，并且手动修复它们都很麻烦，可以查看[`janitor::clean_names()`](https://rdrr.io/pkg/janitor/man/clean_names.xhtml)，它提供了一些有用的自动清理功能。
- en: relocate()
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: relocate()
- en: 'Use [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml) to
    move variables around. You might want to collect related variables together or
    move important variables to the front. By default [`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)
    moves variables to the front:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)移动变量。你可能希望将相关变量集中在一起或将重要变量移到前面。默认情况下，[`relocate()`](https://dplyr.tidyverse.org/reference/relocate.xhtml)将变量移到最前面：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also specify where to put them using the `.before` and `.after` arguments,
    just like in [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以像在[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)中一样使用`.before`和`.after`参数指定它们放置的位置：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Exercises
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect
    those three numbers to be related?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较`dep_time`、`sched_dep_time`和`dep_delay`。你会预期这三个数字有什么关系？
- en: Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`,
    and `arr_delay` from `flights`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 思考尽可能多的方法来从`flights`中选择`dep_time`、`dep_delay`、`arr_time`和`arr_delay`。
- en: What happens if you specify the name of the same variable multiple times in
    a [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml) call?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)调用中多次指定同一个变量的名称会发生什么？
- en: What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.xhtml)
    function do? Why might it be helpful in conjunction with this vector?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`any_of()`](https://tidyselect.r-lib.org/reference/all_of.xhtml)函数的作用是什么？为什么它在与这个向量结合时可能有帮助？'
- en: '[PRE27]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Does the result of running the following code surprise you? How do the select
    helpers deal with upper- and lowercase by default? How can you change that default?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码的结果是否让您惊讶？选择助手如何默认处理大写和小写？如何更改该默认设置？
- en: '[PRE28]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Rename `air_time` to `air_time_min` to indicate units of measurement and move
    it to the beginning of the data frame.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`air_time`重命名为`air_time_min`以指示测量单位，并将其移到数据框的开头。
- en: Why doesn’t the following work, and what does the error mean?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么以下方法不起作用，错误的含义是什么？
- en: '[PRE29]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The Pipe
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: We’ve shown you simple examples of the pipe, but its real power arises when
    you start to combine multiple verbs.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向您展示了管道的简单示例，但其真正的力量是当您开始组合多个动词时。
- en: 'For example, imagine that you wanted to find the fast flights to Houston’s
    IAH airport: you need to combine [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml),
    [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml), [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml),
    and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下，您想找到飞往休斯顿 IAH 机场的快速航班：您需要结合[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)、[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)、[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)和[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Even though this pipeline has four steps, it’s easy to skim because the verbs
    come at the start of each line: start with the `flights` data, then filter, then
    mutate, then select, and then arrange.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此管道有四个步骤，但它很容易浏览，因为每行的动词都在开头：从`flights`数据开始，然后过滤，然后变异，然后选择，最后安排。
- en: 'What would happen if we didn’t have the pipe? We could nest each function call
    inside the previous call:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有管道会发生什么？我们可以将每个函数调用嵌套在前一个调用内：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Or we could use a bunch of intermediate objects:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用一堆中间对象：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: While both forms have their time and place, the pipe generally produces data
    analysis code that is easier to write and read.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然两种形式各有各的时间和场合，但管道通常生成更容易编写和阅读的数据分析代码。
- en: To add the pipe to your code, we recommend using the built-in keyboard shortcut
    Ctrl/Cmd+Shift+M. You’ll need to make one change to your RStudio options to use
    `|>` instead of `%>%`, as shown in [Figure 3-1](#fig-pipe-options); more on `%>%`
    shortly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要将管道符添加到您的代码中，我们建议使用内置键盘快捷键 Ctrl/Cmd+Shift+M。您需要对您的 RStudio 选项进行一次更改，以使用`|>`代替`%>%`，如图[3-1](#fig-pipe-options)所示；稍后详细介绍`%>%`。
- en: '![Screenshot showing the "Use native pipe operator" option which can be found
    on the "Editing" panel of the "Code" options.](assets/rds2_0301.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![显示“使用本地管道运算符”选项的截图，该选项可以在“代码”选项的“编辑”面板中找到。](assets/rds2_0301.png)'
- en: Figure 3-1\. To insert `|>`, make sure the “Use native pipe operator” option
    is checked.
  id: totrans-134
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3-1\. 要插入`|>`，请确保选中“使用本地管道运算符”选项。
- en: magrittr
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: magrittr
- en: 'If you’ve been using the tidyverse for a while, you might be familiar with
    the `%>%` pipe provided by the magrittr package. The magrittr package is included
    in the core tidyverse, so you can use `%>%` whenever you load the tidyverse:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经使用 tidyverse 一段时间，您可能已经熟悉 magrittr 包提供的`%>%`管道。magrittr 包包含在核心 tidyverse
    中，因此您可以在加载 tidyverse 时使用`%>%`：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For simple cases, `|>` and `%>%` behave identically. So why do we recommend
    the base pipe? First, because it’s part of base R, it’s always available for you
    to use, even when you’re not using the tidyverse. Second, `|>` is quite a bit
    simpler than `%>%`: in the time between the invention of `%>%` in 2014 and the
    inclusion of `|>` in R 4.1.0 in 2021, we gained a better understanding of the
    pipe. This allowed the base implementation to jettison infrequently used and less
    important features.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的情况，`|>`和`%>%`行为完全相同。那么为什么我们推荐基本管道呢？首先，因为它是 base R 的一部分，所以您在不使用 tidyverse
    时仍然可以使用它。其次，`|>`比`%>%`简单得多：在 2014 年发明`%>%`和在 2021 年 R 4.1.0 中包含`|>`之间的时间内，我们对管道有了更好的理解。这使得基本实现可以舍弃不常用和不重要的功能。
- en: Groups
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组
- en: 'So far you’ve learned about functions that work with rows and columns. dplyr
    gets even more powerful when you add in the ability to work with groups. In this
    section, we’ll focus on the most important functions: [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml),
    [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml), and the
    slice family of functions.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学习了如何处理行和列的函数。当你添加对分组的处理能力时，dplyr变得更加强大。在这一节中，我们将重点介绍最重要的函数：[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)，[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)以及切片函数系列。
- en: group_by()
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: group_by()
- en: 'Use [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml) to
    divide your dataset into groups meaningful for your analysis:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)将数据集分成对你的分析有意义的组：
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml) doesn’t
    change the data, but if you look closely at the output, you’ll notice that the
    output indicates that it is “grouped by” month (`Groups: month [12]`). This means
    subsequent operations will now work “by month.” [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    adds this grouped feature (referred to as *class*) to the data frame, which changes
    the behavior of the subsequent verbs applied to the data.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)不会改变数据，但如果你仔细观察输出，你会注意到输出表明它是按月份分组的（`Groups:
    month [12]`）。这意味着接下来的操作将按“月份”进行。[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)将这种分组特性（称为*class*）添加到数据框中，这会改变对数据应用后续动词时的行为。'
- en: summarize()
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: summarize()
- en: 'The most important grouped operation is a summary, which, if being used to
    calculate a single summary statistic, reduces the data frame to have a single
    row for each group. In dplyr, this operation is performed by [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml),^([3](ch03.xhtml#idm44771326592976))
    as shown by the following example, which computes the average departure delay
    by month:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的分组操作是摘要，如果用于计算单一摘要统计量，则将数据框减少到每组一个行。在dplyr中，这个操作由[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)^([3](ch03.xhtml#idm44771326592976))执行，如下例所示，计算每月的平均出发延误：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Uh-oh! Something has gone wrong, and all of our results are `NA`s (pronounced
    “N-A”), R’s symbol for missing value. This happened because some of the observed
    flights had missing data in the delay column, so when we calculated the mean including
    those values, we got an `NA` result. We’ll come back to discuss missing values
    in detail in [Chapter 18](ch18.xhtml#chp-missing-values), but for now we’ll tell
    the [`mean()`](https://rdrr.io/r/base/mean.xhtml) function to ignore all missing
    values by setting the argument `na.rm` to `TRUE`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 啊哦！出了点问题，我们所有的结果都变成了`NA`（读作“N-A”），R中代表缺失值的符号。这是因为观察到的一些航班在延误列中有缺失数据，因此当我们计算包括这些值的均值时，得到了`NA`结果。我们将在[第18章](ch18.xhtml#chp-missing-values)中详细讨论缺失值，但现在我们告诉[`mean()`](https://rdrr.io/r/base/mean.xhtml)函数通过将参数`na.rm`设置为`TRUE`来忽略所有缺失值：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can create any number of summaries in a single call to [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml).
    You’ll learn various useful summaries in the upcoming chapters, but one useful
    summary is [`n()`](https://dplyr.tidyverse.org/reference/context.xhtml), which
    returns the number of rows in each group:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在单次调用[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)中，你可以创建任意数量的摘要。在接下来的章节中，你将学习到各种有用的摘要方式，但其中一个有用的摘要是[`n()`](https://dplyr.tidyverse.org/reference/context.xhtml)，它返回每个组中的行数：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Means and counts can get you a surprisingly long way in data science!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学中，均值和计数可以帮助你走得更远！
- en: The slice_ Functions
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片函数
- en: 'There are five handy functions that allow you extract specific rows within
    each group:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有五个便捷的函数允许你在每个组内提取特定的行：
- en: '`df |> slice_head(n = 1)`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`df |> slice_head(n = 1)`'
- en: Takes the first row from each group
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 取每个组的第一行。
- en: '`df |> slice_tail(n = 1)`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`df |> slice_tail(n = 1)`'
- en: Takes the last row in each group
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 取每个组的最后一行
- en: '`df |> slice_min(x, n = 1)`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`df |> slice_min(x, n = 1)`'
- en: Takes the row with the smallest value of column `x`
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 取`x`列中值最小的行。
- en: '`df |> slice_max(x, n = 1)`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`df |> slice_max(x, n = 1)`'
- en: Takes the row with the largest value of column `x`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 取`x`列中值最大的行。
- en: '`df |> slice_sample(n = 1)`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`df |> slice_sample(n = 1)`'
- en: takes one random row.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 取一个随机行。
- en: 'You can vary `n` to select more than one row, or instead of `n =`, you can
    use `prop = 0.1` to select, say, 10% of the rows in each group. For example, the
    following code finds the flights that are most delayed upon arrival at each destination:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以变化 `n` 以选择多于一个行，或者，您可以使用 `prop = 0.1` 代替 `n =` 来选择每个组中的，例如，10% 的行。例如，以下代码查找到达每个目的地时最延迟的航班：
- en: '[PRE38]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that there are 105 destinations but we get 108 rows here. What’s up? [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml)
    and [`slice_max()`](https://dplyr.tidyverse.org/reference/slice.xhtml) keep tied
    values, so `n = 1` means give us all rows with the highest value. If you want
    exactly one row per group, you can set `with_ties = FALSE`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里有 105 个目的地，但我们在这里得到了 108 行。怎么回事？[`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml)
    和 [`slice_max()`](https://dplyr.tidyverse.org/reference/slice.xhtml) 保留相同的值，所以
    `n = 1` 意味着给我们所有具有最高值的行。如果您希望每组确实只有一行，您可以设置 `with_ties = FALSE`。
- en: This is similar to computing the max delay with [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml),
    but you get the whole corresponding row (or rows if there’s a tie) instead of
    the single summary statistic.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于使用 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    计算最大延迟，但您将得到整个相应的行（如果有并列的话，可能是多行），而不是单个摘要统计。
- en: Grouping by Multiple Variables
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按多个变量分组
- en: 'You can create groups using more than one variable. For example, we could make
    a group for each date:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用多个变量创建分组。例如，我们可以为每个日期创建一个分组：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When you summarize a tibble grouped by more than one variable, each summary
    peels off the last group. In hindsight, this wasn’t a great way to make this function
    work, but it’s difficult to change without breaking existing code. To make it
    obvious what’s happening, dplyr displays a message that tells you how you can
    change this behavior:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当您对多个变量进行汇总后的表分组时，每个汇总都会去掉最后一个分组。事后看来，这不是使此函数工作的好方法，但如果不破坏现有代码，这很难更改。为了明确正在发生的事情，dplyr
    显示一条消息，告诉您如何更改此行为：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If you’re happy with this behavior, you can explicitly request it to suppress
    the message:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对此行为感到满意，您可以显式请求它以抑制消息：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Alternatively, change the default behavior by setting a different value, e.g.,
    `"drop"` to drop all grouping or `"keep"` to preserve the same groups.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过设置不同的值（例如 `"drop"` 以删除所有分组或 `"keep"` 以保留相同的分组）来改变默认行为：
- en: Ungrouping
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消分组
- en: 'You might also want to remove grouping from a data frame without using [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml).
    You can do this with [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还希望在不使用 [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    的情况下从数据框中移除分组。您可以使用 [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    来做到这一点：
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now let’s see what happens when you summarize an ungrouped data frame:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看当您对未分组的数据框进行汇总时会发生什么：
- en: '[PRE43]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: You get a single row back because dplyr treats all the rows in an ungrouped
    data frame as belonging to one group.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您会得到一行，因为 dplyr 将未分组的数据框的所有行视为属于一个组。
- en: .by
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .by
- en: 'dplyr 1.1.0 includes a new, experimental syntax for per-operation grouping,
    the `.by` argument. [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    and [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml) aren’t
    going away, but you can now also use the `.by` argument to group within a single
    operation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: dplyr 1.1.0 包含一个新的、实验性的句法，用于每个操作的分组，即 `.by` 参数。[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    和 [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml) 并未被淘汰，但现在你也可以使用
    `.by` 参数在单个操作内进行分组：
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Or if you want to group by multiple variables:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果您想按多个变量分组：
- en: '[PRE45]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`.by` works with all verbs and has the advantage that you don’t need to use
    the `.groups` argument to suppress the grouping message or [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    when you’re done.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`.by` 适用于所有动词，并且具有这样的优势，即您在完成时不需要使用 `.groups` 参数来抑制分组消息或使用 [`ungroup()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)。'
- en: We didn’t focus on this syntax in this chapter because it was very new when
    we wrote the book. We did want to mention it because we think it has a lot of
    promise and it’s likely to be quite popular. You can learn more about it in the
    [dplyr 1.1.0 blog post](https://oreil.ly/ySpmy).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中没有专注于此句法，因为在我们编写书籍时它是非常新的。我们想提一下它，因为我们认为它具有很大的潜力，并且很可能会相当受欢迎。您可以在 [dplyr
    1.1.0 博客文章](https://oreil.ly/ySpmy) 中了解更多信息。
- en: Exercises
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: 'Which carrier has the worst average delays? Challenge: Can you disentangle
    the effects of bad airports versus bad carriers? Why/why not? (Hint: Think about
    `flights |> group_by(carrier, dest) |> summarize(n())`.)'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个承运商的平均延误最严重？挑战：你能分辨出恶劣机场与糟糕航空公司的影响吗？为什么/为什么不？（提示：思考`flights |> group_by(carrier,
    dest) |> summarize(n())`。）
- en: Find the flights that are most delayed upon departure from each destination.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找出从每个目的地出发时延误最严重的航班。
- en: How do delays vary over the course of the day. Illustrate your answer with a
    plot.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一天中延误如何变化。用图表说明你的答案。
- en: What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml)
    and friends?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你给[`slice_min()`](https://dplyr.tidyverse.org/reference/slice.xhtml)等函数提供一个负的`n`会发生什么？
- en: Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)
    does in terms of the dplyr verbs you just learned. What does the `sort` argument
    to [`count()`](https://dplyr.tidyverse.org/reference/count.xhtml) do?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)在你刚学习的dplyr动词中的作用。[`count()`](https://dplyr.tidyverse.org/reference/count.xhtml)中的`sort`参数有何作用？
- en: 'Suppose we have the following tiny data frame:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们有以下微小的数据框：
- en: '[PRE46]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Write down what you think the output will look like; then check if you were
    correct and describe what [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    does.
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)的作用。
- en: '[PRE47]'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Write down what you think the output will look like; then check if you were
    correct and describe what [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)
    does. Also comment on how it’s different from the [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    in part (a).
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)的作用。还评论它与第（a）部分的[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)有何不同。
- en: '[PRE48]'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Write down what you think the output will look like; then check if you were
    correct and describe what the pipeline does.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述管道的作用。
- en: '[PRE49]'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Write down what you think the output will look like; then check if you were
    correct and describe what the pipeline does. Then, comment on what the message
    says.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述管道的作用。然后，评论消息的内容。
- en: '[PRE50]'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Write down what you think the output will look like; then check if you were
    correct and describe what the pipeline does. How is the output different from
    the one in part (d)?
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述管道的作用。输出与第（d）部分的有何不同？
- en: '[PRE51]'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Write down what you think the outputs will look like; then check if you were
    correct and describe what each pipeline does. How are the outputs of the two pipelines
    different?
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 写下你认为输出会是什么样子；然后检查你是否正确，并描述每个管道的作用。这两个管道的输出有何不同？
- en: '[PRE52]'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Case Study: Aggregates and Sample Size'
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究：聚合和样本大小
- en: 'Whenever you do any aggregation, it’s always a good idea to include a count
    ([`n()`](https://dplyr.tidyverse.org/reference/context.xhtml)). That way, you
    can ensure that you’re not drawing conclusions based on very small amounts of
    data. We’ll demonstrate this with some baseball data from the Lahman package.
    Specifically, we will compare what proportion of times a player gets a hit (`H`)
    versus the number of times they try to put the ball in play (`AB`):'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 每当进行任何聚合操作时，都建议包括一个计数（[`n()`](https://dplyr.tidyverse.org/reference/context.xhtml)）。这样，你可以确保不是基于非常少的数据得出结论。我们将使用Lahman包中的一些棒球数据来演示这一点。具体来说，我们将比较球员击中球（`H`）的次数与他们尝试击球（`AB`）的次数的比例：
- en: '[PRE53]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When we plot the skill of the batter (measured by the batting average, `performance`)
    against the number of opportunities to hit the ball (measured by times at bat,
    `n`), we see two patterns:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将击球手的技能（以击球率`performance`衡量）与击球次数（以击球数`n`衡量）进行绘图时，我们看到两种模式：
- en: 'The variation in `performance` is larger among players with fewer at-bats.
    The shape of this plot is very characteristic: whenever you plot a mean (or other
    summary statistics) versus group size, you’ll see that the variation decreases
    as the sample size increases.^([4](ch03.xhtml#idm44771326013808))'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在击球手的表现中，少量击球的球员变化较大。这种图形的形状非常特征化：每当你绘制平均值（或其他汇总统计信息）与组大小的关系时，你会看到随着样本大小增加，变化会减少。^([4](ch03.xhtml#idm44771326013808))
- en: There’s a positive correlation between skill (`performance`) and opportunities
    to hit the ball (`n`) because teams want to give their best batters the most opportunities
    to hit the ball.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技能（`performance`）和击球机会（`n`）之间存在正相关，因为球队希望让他们最擅长击球的击球手获得最多的击球机会。
- en: '[PRE54]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![A scatterplot of number of batting performance vs. batting opportunities
    overlaid with a smoothed line. Average performance increases sharply from 0.2
    at when n is 1 to 0.25 when n is ~1000\. Average performance continues to increase
    linearly at a much shallower slope reaching ~0.3 when n is ~15,000.](assets/rds2_03in01.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![一个散点图，显示击球表现次数与击球机会之间的关系，并覆盖一个平滑线。平均表现从 n 为 1 时的 0.2 急剧增加到 n 约为 1000 时的 0.25。当
    n 约为 15000 时，平均表现继续线性增长，但斜率更缓和，约为 0.3。](assets/rds2_03in01.png)'
- en: Note the handy pattern for combining ggplot2 and dplyr. You just have to remember
    to switch from `|>`, for dataset processing, to `+` for adding layers to your
    plot.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 注意将 ggplot2 和 dplyr 结合的方便模式。你只需记住从`|>`用于数据集处理，转换成`+`用于添加图层到你的图表。
- en: 'This also has important implications for ranking. If you naively sort on `desc(performance)`,
    the people with the best batting averages are clearly the ones who tried to put
    the ball in play very few times and happened to get a hit; they’re not necessarily
    the most skilled players:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这对排名也有重要影响。如果你天真地按照`desc(performance)`排序，那些击球率最高的人显然是那些很少尝试击球但偶尔击中的人；他们不一定是最有技能的球员：
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You can find a good explanation of this problem and how to overcome it on a
    blog posts by [David Robinson](https://oreil.ly/OjOwY) and [Evan Miller](https://oreil.ly/wgS7U).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [David Robinson](https://oreil.ly/OjOwY) 和 [Evan Miller](https://oreil.ly/wgS7U)
    的博客文章中找到对这个问题及其解决方法的详细解释。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: 'In this chapter, you’ve learned the tools that dplyr provides for working with
    data frames. The tools are roughly grouped into three categories: those that manipulate
    the rows (such as [`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)
    and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)), those
    that manipulate the columns (such as [`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)
    and [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)), and those
    that manipulate groups (such as [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)
    and [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)). In
    this chapter, we focused on these “whole data frame” tools, but you haven’t yet
    learned much about what you can do with the individual variable. We’ll come back
    to that in [Part III](part03.xhtml#part-transform), where each chapter will give
    you tools for a specific type of variable.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 dplyr 提供的用于处理数据框的工具。这些工具大致分为三类：操作行的（如[`filter()`](https://dplyr.tidyverse.org/reference/filter.xhtml)和[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.xhtml)），操作列的（如[`select()`](https://dplyr.tidyverse.org/reference/select.xhtml)和[`mutate()`](https://dplyr.tidyverse.org/reference/mutate.xhtml)），以及操作分组的（如[`group_by()`](https://dplyr.tidyverse.org/reference/group_by.xhtml)和[`summarize()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)）。在本章中，我们专注于这些“整个数据框”工具，但你还没有学到如何处理单个变量的内容。我们将在[第三部分](part03.xhtml#part-transform)回到这个问题。
- en: In the next chapter, we’ll pivot back to workflow to discuss the importance
    of code style, keeping your code well organized to make it easy for you and others
    to read and understand your code.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到工作流程，讨论代码风格的重要性，保持代码的良好组织，以便你和他人能够轻松地阅读和理解你的代码。
- en: ^([1](ch03.xhtml#idm44771332966640-marker)) Later, you’ll learn about the `slice_*()`
    family, which allows you to choose rows based on their positions.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch03.xhtml#idm44771332966640-marker)) 后来，你将学习到`slice_*()`系列函数，允许你根据它们的位置选择行。
- en: ^([2](ch03.xhtml#idm44771330064672-marker)) Remember that in RStudio, the easiest
    way to see a dataset with many columns is [`View()`](https://rdrr.io/r/utils/View.xhtml).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch03.xhtml#idm44771330064672-marker)) 请记住，在 RStudio 中，查看具有多列的数据集的最简单方法是使用[`View()`](https://rdrr.io/r/utils/View.xhtml)函数。
- en: ^([3](ch03.xhtml#idm44771326592976-marker)) Or [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)
    if you prefer British English.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch03.xhtml#idm44771326592976-marker)) 或者如果你更喜欢英式英语，可以使用[`summarise()`](https://dplyr.tidyverse.org/reference/summarise.xhtml)。
- en: ^([4](ch03.xhtml#idm44771326013808-marker)) *cough* the law of large numbers
    *cough*
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch03.xhtml#idm44771326013808-marker)) *咳咳* 大数定律 *咳咳*
