- en: Chapter 31\. Multiple Subplots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第31章\. 多个子图
- en: 'Sometimes it is helpful to compare different views of data side by side. To
    this end, Matplotlib has the concept of *subplots*: groups of smaller axes that
    can exist together within a single figure. These subplots might be insets, grids
    of plots, or other more complicated layouts. In this chapter we’ll explore four
    routines for creating subplots in Matplotlib. We’ll start by importing the packages
    we will use:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 有时将数据的不同视图并排比较会很有帮助。为此，Matplotlib有*子图*的概念：一组可以在单个图中存在的较小轴。这些子图可以是插图、网格图或其他更复杂的布局。在本章中，我们将探讨创建Matplotlib中子图的四种常规方法。我们将首先导入要使用的包：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'plt.axes: Subplots by Hand'
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: plt.axes：手动创建子图
- en: The most basic method of creating an axes is to use the `plt.axes` function.
    As we’ve seen previously, by default this creates a standard axes object that
    fills the entire figure. `plt.axes` also takes an optional argument that is a
    list of four numbers in the figure coordinate system (`[*left*, *bottom*, *width*,
    *height*]`), which ranges from 0 at the bottom left of the figure to 1 at the
    top right of the figure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 创建轴的最基本方法是使用`plt.axes`函数。正如我们之前看到的，默认情况下，这将创建一个填充整个图的标准轴对象。`plt.axes`还接受一个可选参数，即在图坐标系中的四个数字列表（`[*left*,
    *bottom*, *width*, *height*]`），它们的取值范围从图的左下角的0到右上角的1。
- en: 'For example, we might create an inset axes at the top-right corner of another
    axes by setting the *x* and *y* position to 0.65 (that is, starting at 65% of
    the width and 65% of the height of the figure) and the *x* and *y* extents to
    0.2 (that is, the size of the axes is 20% of the width and 20% of the height of
    the figure). [Figure 31-1](#fig_0408-multiple-subplots_files_in_output_4_0) shows
    the result:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以通过将*x*和*y*位置设置为0.65（即从图的宽度和高度的65%开始）并将*x*和*y*范围设置为0.2（即轴的大小为图宽度和高度的20%）在另一个轴的右上角创建一个插图轴。[图 31-1](#fig_0408-multiple-subplots_files_in_output_4_0)显示了结果：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![output 4 0](assets/output_4_0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![output 4 0](assets/output_4_0.png)'
- en: Figure 31-1\. Example of an inset axes
  id: totrans-8
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-1\. 插图轴示例
- en: The equivalent of this command within the object-oriented interface is `fig.add_axes`.
    Let’s use this to create two vertically stacked axes, as seen in [Figure 31-2](#fig_0408-multiple-subplots_files_in_output_6_0).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象接口中，该命令的等效命令是`fig.add_axes`。让我们使用它来创建两个垂直堆叠的轴，如[图 31-2](#fig_0408-multiple-subplots_files_in_output_6_0)所示。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now have two axes (the top with no tick labels) that are just touching:
    the bottom of the upper panel (at position 0.5) matches the top of the lower panel
    (at position 0.1 + 0.4).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个轴（顶部没有刻度标签），它们紧挨着：上面板的底部（在位置0.5处）与下面板的顶部（在位置0.1 + 0.4处）相匹配。
- en: '![output 6 0](assets/output_6_0.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![output 6 0](assets/output_6_0.png)'
- en: Figure 31-2\. Vertically stacked axes example
  id: totrans-13
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-2\. 垂直堆叠轴示例
- en: 'plt.subplot: Simple Grids of Subplots'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: plt.subplot：简单的子图网格
- en: Aligned columns or rows of subplots are a common enough need that Matplotlib
    has several convenience routines that make them easy to create. The lowest level
    of these is `plt.subplot`, which creates a single subplot within a grid. As you
    can see, this command takes three integer arguments—the number of rows, the number
    of columns, and the index of the plot to be created in this scheme, which runs
    from the upper left to the bottom right (see [Figure 31-3](#fig_0408-multiple-subplots_files_in_output_9_0)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对齐的列或行子图是一个常见的需求，Matplotlib提供了几个便利函数来轻松创建它们。其中最低级别的是`plt.subplot`，它在网格中创建一个单个子图。正如您所见，这个命令需要三个整数参数——行数、列数以及在此方案中要创建的图的索引，该索引从左上角到右下角依次排列（见[图 31-3](#fig_0408-multiple-subplots_files_in_output_9_0)）。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![output 9 0](assets/output_9_0.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![output 9 0](assets/output_9_0.png)'
- en: Figure 31-3\. A plt.subplot example
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-3\. plt.subplot 示例
- en: 'The command `plt.subplots_adjust` can be used to adjust the spacing between
    these plots. The following code uses the equivalent object-oriented command, `fig.add_subplot`;
    [Figure 31-4](#fig_0408-multiple-subplots_files_in_output_11_0) shows the result:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 命令`plt.subplots_adjust`可用于调整这些图之间的间距。以下代码使用了等效的面向对象的命令`fig.add_subplot`；[图 31-4](#fig_0408-multiple-subplots_files_in_output_11_0)显示了结果：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we’ve used the `hspace` and `wspace` arguments of `plt.subplots_adjust`,
    which specify the spacing along the height and width of the figure, in units of
    the subplot size (in this case, the space is 40% of the subplot width and height).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`plt.subplots_adjust`的`hspace`和`wspace`参数，它们分别指定了图的高度和宽度上的间距，单位为子图大小的百分比（在本例中，空间为子图宽度和高度的40%）。
- en: '![output 11 0](assets/output_11_0.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![output 11 0](assets/output_11_0.png)'
- en: Figure 31-4\. plt.subplot with adjusted margins
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-4\. 调整边距的 plt.subplot
- en: 'plt.subplots: The Whole Grid in One Go'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: plt.subplots：一次性创建整个网格
- en: The approach just described quickly becomes tedious when creating a large grid
    of subplots, especially if you’d like to hide the x- and y-axis labels on the
    inner plots. For this purpose, `plt.subplots` is the easier tool to use (note
    the `s` at the end of `subplots`). Rather than creating a single subplot, this
    function creates a full grid of subplots in a single line, returning them in a
    NumPy array. The arguments are the number of rows and number of columns, along
    with optional keywords `sharex` and `sharey`, which allow you to specify the relationships
    between different axes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建大量子图网格时，特别是如果您希望隐藏内部图的 x 和 y 轴标签时，刚刚描述的方法很快变得繁琐。为此，`plt.subplots` 是更易于使用的工具（注意
    `subplots` 末尾的 `s`）。该函数不是创建单个子图，而是一行内创建完整的子图网格，返回它们的 NumPy 数组。参数是行数和列数，以及可选的关键字
    `sharex` 和 `sharey`，允许您指定不同轴之间的关系。
- en: Let’s create a <math alttext="2 times 3"><mrow><mn>2</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    grid of subplots, where all axes in the same row share their y-axis scale, and
    all axes in the same column share their x-axis scale (see [Figure 31-5](#fig_0408-multiple-subplots_files_in_output_14_0)).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 <math alttext="2 times 3"><mrow><mn>2</mn> <mo>×</mo> <mn>3</mn></mrow></math>
    的子图网格，同一行内的所有轴共享其 y 轴比例，同一列内的所有轴共享其 x 轴比例（参见 [图 31-5](#fig_0408-multiple-subplots_files_in_output_14_0)）。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![output 14 0](assets/output_14_0.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![output 14 0](assets/output_14_0.png)'
- en: Figure 31-5\. Shared x and y axes in plt.subplots
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-5\. plt.subplots 中的共享 x 和 y 轴
- en: By specifying `sharex` and `sharey`, we’ve automatically removed inner labels
    on the grid to make the plot cleaner. The resulting grid of axes instances is
    returned within a NumPy array, allowing for convenient specification of the desired
    axes using standard array indexing notation (see [Figure 31-6](#fig_0408-multiple-subplots_files_in_output_16_0)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定 `sharex` 和 `sharey`，我们自动删除了网格内部的标签，使得绘图更清晰。生成的轴实例网格返回为 NumPy 数组，可以使用标准数组索引符号方便地指定所需的轴（参见
    [图 31-6](#fig_0408-multiple-subplots_files_in_output_16_0)）。
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In comparison to `plt.subplot`, `plt.subplots` is more consistent with Python’s
    conventional zero-based indexing, whereas `plt.subplot` uses MATLAB-style one-based
    indexing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于 `plt.subplot`，`plt.subplots` 更符合 Python 的传统零起始索引，而 `plt.subplot` 使用 MATLAB
    风格的一起始索引。
- en: '![output 16 0](assets/output_16_0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![output 16 0](assets/output_16_0.png)'
- en: Figure 31-6\. Identifying plots in a subplot grid
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-6\. 在子图网格中标识绘图
- en: 'plt.GridSpec: More Complicated Arrangements'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: plt.GridSpec：更复杂的排列
- en: 'To go beyond a regular grid to subplots that span multiple rows and columns,
    `plt.GridSpec` is the best tool. `plt.GridSpec` does not create a plot by itself;
    it is rather a convenient interface that is recognized by the `plt.subplot` command.
    For example, a `GridSpec` for a grid of two rows and three columns with some specified
    width and height space looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要超越常规网格，创建跨越多行和列的子图，`plt.GridSpec` 是最佳工具。 `plt.GridSpec` 本身不创建图形；它是一个方便的接口，被
    `plt.subplot` 命令识别。例如，一个具有两行三列、指定宽度和高度空间的 `GridSpec` 如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: From this we can specify subplot locations and extents using the familiar Python
    slicing syntax (see [Figure 31-7](#fig_0408-multiple-subplots_files_in_output_21_0)).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们可以使用熟悉的 Python 切片语法指定子图的位置和范围（参见 [图 31-7](#fig_0408-multiple-subplots_files_in_output_21_0)）。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![output 21 0](assets/output_21_0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![output 21 0](assets/output_21_0.png)'
- en: Figure 31-7\. Irregular subplots with `plt.GridSpec`
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-7\. 使用 `plt.GridSpec` 创建不规则子图
- en: This type of flexible grid alignment has a wide range of uses. I most often
    use it when creating multiaxes histogram plots like the ones shown in [Figure 31-8](#fig_0408-multiple-subplots_files_in_output_23_0).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种灵活的网格对齐方式有广泛的用途。我最常在创建像 [图 31-8](#fig_0408-multiple-subplots_files_in_output_23_0)
    中显示的多轴直方图图时使用它。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![output 23 0](assets/output_23_0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![output 23 0](assets/output_23_0.png)'
- en: Figure 31-8\. Visualizing multidimensional distributions with `plt.GridSpec`
  id: totrans-45
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 31-8\. 使用 `plt.GridSpec` 可视化多维分布
- en: This type of distribution plotted alongside its margins is common enough that
    it has its own plotting API in the Seaborn package; see [Chapter 36](ch36.xhtml#section-0414-visualization-with-seaborn)
    for more details.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分布类型以及其边距经常出现，Seaborn 包中有自己的绘图 API；详见 [第 36 章](ch36.xhtml#section-0414-visualization-with-seaborn)。
