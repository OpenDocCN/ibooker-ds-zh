- en: Chapter 7\. Graph Algorithms in Practice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 实践中的图算法
- en: The approach we take to graph analysis evolves as we become more familiar with
    the behavior of different algorithms on specific datasets. In this chapter, we’ll
    run through several examples to give you a better feeling for how to tackle large-scale
    graph data analysis using datasets from Yelp and the US Department of Transportation.
    We’ll walk through Yelp data analysis in Neo4j that includes a general overview
    of the data, combining algorithms to make trip recommendations, and mining user
    and business data for consulting. In Spark, we’ll look into US airline data to
    understand traffic patterns and delays as well as how airports are connected by
    different airlines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们对特定数据集上不同算法的行为越来越熟悉，我们对图分析的方法也在不断发展。在本章中，我们将通过几个示例来更好地理解如何使用来自Yelp和美国交通部的数据进行大规模图数据分析。我们将介绍Neo4j中的Yelp数据分析，包括数据的概述、结合算法进行旅行推荐以及挖掘用户和业务数据进行咨询。在Spark中，我们将研究美国航空数据，以了解交通模式和延误情况，以及不同航空公司之间的机场连接情况。
- en: 'Because pathfinding algorithms are straightforward, our examples will use these
    centrality and community detection algorithms:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因为路径查找算法非常简单，我们的示例将使用这些中心性和社区检测算法：
- en: PageRank to find influential Yelp reviewers and then correlate their ratings
    for specific hotels
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PageRank查找有影响力的Yelp评论者，然后将他们对特定酒店的评分进行关联
- en: Betweenness Centrality to uncover reviewers connected to multiple groups and
    then extract their preferences
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用介数中心性来发现连接到多个群体的评论者，然后提取他们的偏好
- en: Label Propagation with a projection to create supercategories of similar Yelp
    businesses
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签传播和投影创建类似Yelp业务的超级类别
- en: Degree Centrality to quickly identify airport hubs in the US transport dataset
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用度中心性快速识别美国交通数据集中的机场枢纽
- en: Strongly Connected Components to look at clusters of airport routes in the US
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用强连通分量来查看美国机场路线的群集
- en: Analyzing Yelp Data with Neo4j
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Neo4j分析Yelp数据
- en: Yelp helps people find local businesses based on reviews, preferences, and recommendations.
    Over 180 million reviews had been written on the platform as of the end of 2018.
    Since 2013, Yelp has run the [Yelp Dataset challenge](https://bit.ly/2Txz0rg),
    a competition that encourages people to explore and research Yelp’s open dataset.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Yelp帮助人们基于评论、偏好和推荐找到本地业务。截至2018年底，平台上已有超过1.8亿条评论。自2013年以来，Yelp一直举办[Yelp数据集挑战](https://bit.ly/2Txz0rg)，鼓励人们探索和研究Yelp的开放数据集。
- en: 'As of Round 12 (conducted in 2018) of the challenge, the open dataset contained:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到2018年第12轮（进行中）挑战为止，开放数据集包含：
- en: Over 7 million reviews plus tips
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过700万条评论和提示
- en: Over 1.5 million users and 280,000 pictures
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过150万用户和28万张图片
- en: Over 188,000 businesses with 1.4 million attributes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过18.8万家企业，拥有140万个属性
- en: 10 metropolitan areas
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10个大都市区
- en: Since its launch, the dataset has become popular, with [hundreds of academic
    papers](https://bit.ly/2upiaRz) written using this material. The Yelp dataset
    represents real data that is very well structured and highly interconnected. It’s
    a great showcase for graph algorithms that you can also download and explore.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自推出以来，该数据集变得非常受欢迎，已有[hundreds of academic papers](https://bit.ly/2upiaRz)使用这些材料进行撰写。Yelp数据集代表了非常结构良好且高度互联的真实数据。这是一个展示图算法的绝佳案例，您也可以下载并探索。
- en: Yelp Social Network
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yelp社交网络
- en: As well as writing and reading reviews about businesses, users of Yelp form
    a social network. Users can send friend requests to other users they’ve come across
    while browsing Yelp.com, or they can connect their address books or Facebook graphs.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了撰写和阅读有关企业的评论外，Yelp用户还形成了一个社交网络。用户可以在浏览Yelp.com时向其他用户发送朋友请求，或者他们可以连接他们的通讯录或Facebook图谱。
- en: The Yelp dataset also includes a social network. [Figure 7-1](#yelp_my_profile)
    is a screen capture of the Friends section of Mark’s Yelp profile.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Yelp数据集还包括一个社交网络。[图 7-1](#yelp_my_profile)是马克的Yelp档案中朋友部分的屏幕截图。
- en: '![gral 0701](Images/gral_0701.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0701](Images/gral_0701.png)'
- en: Figure 7-1\. Mark’s Yelp profile
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1. 马克的Yelp档案
- en: Apart from the fact that Mark needs a few more friends, we’re ready to start.
    To illustrate how we might analyze Yelp data in Neo4j, we’ll use a scenario where
    we work for a travel information business. We’ll first explore the Yelp data,
    and then look at how to help people plan trips with our app. We will walk through
    finding good recommendations for places to stay and things to do in major cities
    like Las Vegas.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Mark 需要更多朋友这一事实之外，我们已经准备就绪。为了说明我们如何在 Neo4j 中分析 Yelp 数据，我们将使用一个场景，假设我们为旅行信息业务工作。我们将首先探索
    Yelp 数据，然后看看如何帮助人们使用我们的应用程序计划旅行。我们将详细介绍如何为像拉斯维加斯这样的大城市找到住宿和活动的好推荐。
- en: Another part of our business scenario will involve consulting to travel-destination
    businesses. In one example we’ll help hotels identify influential visitors and
    then businesses that they should target for cross-promotion programs.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们业务场景的另一部分将涉及为旅行目的地企业提供咨询。在一个示例中，我们将帮助酒店识别有影响力的访客，然后确定他们应该针对的跨促销项目的企业。
- en: Data Import
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据导入
- en: There are many different methods for importing data into Neo4j, including the
    [Import tool](https://bit.ly/2UTx26g), the [`LOAD CSV` command](https://bit.ly/2CCfcgR)
    that we’ve seen in earlier chapters, and [Neo4j drivers](https://bit.ly/2JDAr7U).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方法可以将数据导入 Neo4j，包括 [导入工具](https://bit.ly/2UTx26g)、我们在早期章节中看到的 [`LOAD CSV`
    命令](https://bit.ly/2CCfcgR)，以及 [Neo4j 驱动程序](https://bit.ly/2JDAr7U)。
- en: For the Yelp dataset we need to do a one-off import of a large amount of data,
    so the Import tool is the best choice. See [“Neo4j Bulk Data Import and Yelp”](app01.xhtml#yelp_data_import)
    for more details.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Yelp 数据集，我们需要一次性导入大量数据，因此导入工具是最佳选择。详细信息请参见 [“Neo4j 批量数据导入和 Yelp”](app01.xhtml#yelp_data_import)。
- en: Graph Model
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图模型
- en: The Yelp data is represented in a graph model as shown in [Figure 7-2](#yelp_graph_model).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Yelp 数据以图模型的形式表示，如 [图 7-2](#yelp_graph_model) 所示。
- en: '![gral 0702](Images/gral_0702.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0702](Images/gral_0702.png)'
- en: Figure 7-2\. The Yelp graph model
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-2\. Yelp 图模型
- en: Our graph contains `User` labeled nodes, which have `FRIENDS` relationships
    with other `Users`. `Users` also write `Reviews` and tips about `Business`es.
    All of the metadata is stored as properties of nodes, except for business categories,
    which are represented by separate `Category` nodes. For location data we’ve extracted
    `City`, `Area`, and `Country` attributes into the subgraph. In other use cases
    it might make sense to extract other attributes to nodes such as dates, or collapse
    nodes to relationships such as reviews.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图包含带有 `User` 标签的节点，这些节点与其他 `Users` 具有 `FRIENDS` 关系。`Users` 还会对 `Business`
    写出 `Reviews` 和提示。所有元数据都存储为节点的属性，除了业务类别，业务类别由单独的 `Category` 节点表示。对于位置数据，我们已将 `City`、`Area`
    和 `Country` 属性提取到子图中。在其他用例中，将其他属性提取到节点中，如日期，或将节点折叠到关系中，如评论，可能也是有意义的。
- en: The Yelp dataset also includes user tips and photos, but we won’t use those
    in our example.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Yelp 数据集还包括用户提示和照片，但我们在示例中不会使用它们。
- en: A Quick Overview of the Yelp Data
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yelp 数据快速概述
- en: Once we have the data loaded in Neo4j, we’ll execute some exploratory queries.
    We’ll ask how many nodes are in each category or what types of relations exist,
    to get a feel for the Yelp data. Previously we’ve shown Cypher queries for our
    Neo4j examples, but we might be executing these from another programming language.
    As Python is the go-to language for data scientists, we’ll use Neo4j’s Python
    driver in this section when we want to connect the results to other libraries
    from the Python ecosystem. If we just want to show the result of a query we’ll
    use Cypher directly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在 Neo4j 中加载了数据，我们将执行一些探索性查询。我们会询问每个类别中有多少节点，或者存在什么类型的关系，以了解 Yelp 数据的概况。以前我们在
    Neo4j 示例中展示了 Cypher 查询，但我们可能会从另一种编程语言执行这些查询。由于 Python 是数据科学家首选的语言，因此在本节中，当我们想要将结果连接到
    Python 生态系统中的其他库时，我们将使用 Neo4j 的 Python 驱动程序。如果我们只想显示查询的结果，我们将直接使用 Cypher。
- en: We’ll also show how to combine Neo4j with the popular pandas library, which
    is effective for data wrangling outside of the database. We’ll see how to use
    the tabulate library to prettify the results we get from pandas, and how to create
    visual representations of data using matplotlib.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将展示如何将 Neo4j 与流行的 pandas 库结合使用，该库在数据库外进行数据整理非常有效。我们将看到如何使用 tabulate 库来美化我们从
    pandas 获取的结果，以及如何使用 matplotlib 创建数据的可视化表示。
- en: We’ll also be using Neo4j’s APOC library of procedures to help us write even
    more powerful Cypher queries. There’s more information about APOC in [“APOC and
    Other Neo4j Tools”](app01.xhtml#apoc_appendix).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用Neo4j的APOC库来帮助我们编写更强大的Cypher查询。关于APOC的更多信息，请参阅[“APOC和其他Neo4j工具”](app01.xhtml#apoc_appendix)。
- en: 'Let’s first install the Python libraries:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装Python库：
- en: pip install neo4j-driver tabulate pandas matplotlib
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: pip install neo4j-driver tabulate pandas matplotlib
- en: 'Once we’ve done that we’ll import those libraries:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们将导入这些库：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Importing matplotlib can be fiddly on macOS, but the following lines should
    do the trick:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上导入matplotlib可能有点麻烦，但以下几行代码应该可以解决问题：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you’re running on another operating system, the middle line may not be required.
    Now let’s create an instance of the Neo4j driver pointing at a local Neo4j database:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在其他操作系统上运行，可能不需要中间行。现在让我们创建一个指向本地Neo4j数据库的Neo4j驱动程序实例：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll need to update the initialization of the driver to use your own host
    and credentials.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要更新驱动程序的初始化，以使用您自己的主机和凭据。
- en: 'To get started, let’s look at some general numbers for nodes and relationships.
    The following code calculates the cardinalities of node labels (i.e., counts the
    number of nodes for each label) in the database:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们查看节点和关系的一些常规数字。以下代码计算数据库中节点标签的基数（即计算每个标签的节点数）：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we run that code we’ll see how many nodes we have for each label:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该代码，我们将看到每个标签的节点数：
- en: '| label | count |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | count |'
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Country | 17 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 国家 | 17 |'
- en: '| Area | 54 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 区域 | 54 |'
- en: '| City | 1093 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 城市 | 1093 |'
- en: '| Category | 1293 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 类别 | 1293 |'
- en: '| Business | 174567 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 业务 | 174567 |'
- en: '| User | 1326101 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 用户 | 1326101 |'
- en: '| Review | 5261669 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Review | 5261669 |'
- en: 'We could also create a visual representation of the cardinalities, with the
    following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过以下代码创建关系基数的视觉表示：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see the chart that gets generated by this code in [Figure 7-3](#node_cardinalities).
    Note that this chart is using log scale.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到此代码生成的图表在[图 7-3](#node_cardinalities)中。请注意，此图表使用对数刻度。
- en: '![gral 0703](Images/gral_0703.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0703](Images/gral_0703.png)'
- en: Figure 7-3\. The number of nodes for each label category
  id: totrans-62
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-3\. 每个标签类别的节点数
- en: 'Similarly, we can calculate the cardinalities of relationships:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以计算关系的基数：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we run that code we’ll see the number of each type of relationship:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该代码，我们将看到每种关系类型的数量：
- en: '| relType | count |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| relType | count |'
- en: '| --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| IN_COUNTRY | 54 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| IN_COUNTRY | 54 |'
- en: '| IN_AREA | 1154 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| IN_AREA | 1154 |'
- en: '| IN_CITY | 174566 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| IN_CITY | 174566 |'
- en: '| IN_CATEGORY | 667527 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| IN_CATEGORY | 667527 |'
- en: '| WROTE | 5261669 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 编写 | 5261669 |'
- en: '| REVIEWS | 5261669 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 评论 | 5261669 |'
- en: '| FRIENDS | 10645356 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 朋友 | 10645356 |'
- en: We can see a chart of the cardinalities in [Figure 7-4](#rel_cardinalities).
    As with the node cardinalities chart, this chart is using log scale.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到关系的图表在[图 7-4](#rel_cardinalities)中。与节点基数图表一样，此图表也使用对数刻度。
- en: '![gral 0704](Images/gral_0704.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0704](Images/gral_0704.png)'
- en: Figure 7-4\. The number of relationships by relationship type
  id: totrans-77
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-4\. 按关系类型计算的关系数量
- en: These queries shouldn’t reveal anything surprising, but they’re useful to get
    a feel for what’s in the data. This also serves as a quick check that the data
    imported correctly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些查询不应揭示任何令人惊讶的事情，但它们对于了解数据内容非常有用。这也作为确保数据正确导入的快速检查。
- en: 'We assume Yelp has many hotel reviews, but it makes sense to check before we
    focus on that sector. We can find out how many hotel businesses are in that data
    and how many reviews they have by running the following query:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设Yelp有很多酒店评论，但在我们专注于该行业之前，检查一下是有意义的。我们可以通过运行以下查询找出数据中有多少酒店业务以及它们有多少评论：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s the result:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '| businesses | reviews |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 企业 | 评论 |'
- en: '| --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2683 | 183759 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 2683 | 183759 |'
- en: We have many businesses to work with, and a lot of reviews! In the next section
    we’ll explore the data further with our business scenario.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多业务需要处理，还有很多评论！在下一节中，我们将根据我们的业务情景进一步探索数据。
- en: Trip Planning App
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旅行规划应用
- en: 'To add well-liked recommendations to our app, we start by finding the most-rated
    hotels as a heuristic for popular choices for reservations. We can add how well
    they’ve been rated to understand the actual experience. To see the 10 most-reviewed
    hotels and plot their rating distributions, we use the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们的应用程序添加受欢迎的推荐，我们首先找到评价最多的酒店，作为预订的热门选择的启发。我们可以添加它们的评级来了解实际体验。要查看评价最多的10家酒店并绘制它们的评分分布图，我们使用以下代码：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We’ve constrained by city and category to focus on Las Vegas hotels. We run
    that code we get the chart in [Figure 7-5](#hotel_ratings). Note that the x-axis
    represents the hotel’s star rating and the y-axis represents the overall percentage
    of each rating.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经限定在城市和类别上，专注于拉斯维加斯的酒店。如果我们运行该代码，我们将得到 [图 7-5](#hotel_ratings) 中的图表。请注意，x
    轴表示酒店的星级评分，y 轴表示每个评分的总百分比。
- en: '![gral 0705](Images/gral_0705.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0705](Images/gral_0705.png)'
- en: Figure 7-5\. The 10 most-reviewed hotels, with the number of stars on the x-axis
    and their overall rating percentage on the y-axis
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-5\. 评价最多的 10 家酒店，x 轴为星级数，y 轴为总体评分百分比
- en: These hotels have lots of reviews, far more than anyone would be likely to read.
    It would be better to show our users the content from the most relevant reviews
    and make them more prominent on our app. To do this analysis, we’ll move from
    basic graph exploration to using graph algorithms.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些酒店有很多评论，远远超过任何人可能阅读的数量。最好显示我们用户最相关的评论内容，并在我们的应用程序中突出显示它们。为了进行此分析，我们将从基本的图探索转向使用图算法。
- en: Finding influential hotel reviewers
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找有影响力的酒店评论者
- en: One way we can decide which reviews to post is by ordering reviews based on
    the *influence of the reviewer* on Yelp. We’ll run the PageRank algorithm over
    the projected graph of all users that have reviewed at least three hotels. Remember
    from earlier chapters that a projection can help filter out inessential information
    as well as add relationship data (sometimes inferred). We’ll use Yelp’s friend
    graph (introduced in [“Yelp Social Network”](#yelp_social_network)) as the relationships
    between users. The PageRank algorithm will uncover those reviewers with more sway
    over more users, even if they are not direct friends.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过根据 Yelp 上评论者的 *影响力* 对评论进行排序来决定发布哪些评论。我们将在所有至少评论了三家酒店的用户的投影图上运行 PageRank
    算法。从前面的章节中可以记得，投影可以帮助过滤掉不必要的信息，并且添加关系数据（有时是推测出来的）。我们将使用 Yelp 的朋友图（在 [“Yelp 社交网络”](#yelp_social_network)
    中介绍）作为用户之间的关系。PageRank 算法将揭示那些影响更多用户的评论者，即使他们并非直接的朋友关系。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If two people are Yelp friends there are two `FRIENDS` relationships between
    them. For example, if A and B are friends there will be a `FRIENDS` relationship
    from A to B and another from B to A.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个人在 Yelp 上是朋友，它们之间会有两个 `FRIENDS` 关系。例如，如果 A 和 B 是朋友，那么从 A 到 B 和从 B 到 A 都会有一个
    `FRIENDS` 关系。
- en: We need to write a query that projects a subgraph of users with more than three
    reviews and then executes the PageRank algorithm over that projected subgraph.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写一个查询，对具有三条以上评论的用户进行子图投影，然后在该投影子图上执行 PageRank 算法。
- en: It’s easier to understand how the subgraph projection works with a small example.
    [Figure 7-6](#friends_of_yelp) shows a graph of three mutual friends—Mark, Arya,
    and Praveena. Mark and Praveena have both reviewed three hotels and will be part
    of the projected graph. Arya, on the other hand, has only reviewed one hotel and
    will therefore be excluded from the projection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个小例子更容易理解子图投影的工作方式。[图 7-6](#friends_of_yelp) 显示了三位相互之间为朋友的 Mark、Arya 和 Praveena
    的图。Mark 和 Praveena 都评论了三家酒店，因此会成为投影图的一部分。而 Arya 只评论了一家酒店，因此会被排除在投影之外。
- en: '![gral 0706](Images/gral_0706.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0706](Images/gral_0706.png)'
- en: Figure 7-6\. A sample Yelp graph
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-6\. Yelp 示例图
- en: Our projected graph will only include Mark and Praveena, as shown in [Figure 7-7](#mark_praveena).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的投影图仅包括 Mark 和 Praveena，如 [图 7-7](#mark_praveena) 所示。
- en: '![gral 0707](Images/gral_0707.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0707](Images/gral_0707.png)'
- en: Figure 7-7\. Our sample projected graph
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-7\. 我们的样本投影图
- en: 'Now that we’ve seen how graph projections work, let’s move forward. The following
    query executes the PageRank algorithm over our projected graph and stores the
    result in the `hotelPageRank` property on each node:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了图投影的工作原理，让我们继续前进。以下查询在我们的投影图上执行 PageRank 算法，并将结果存储在每个节点的 `hotelPageRank`
    属性中：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You might have noticed that we didn’t set the damping factor or maximum iteration
    limit discussed in [Chapter 5](ch05.xhtml#centrality_algorithms). If not explicitly
    set, Neo4j defaults to a `0.85` damping factor with `maxIterations` set to 20`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们没有设置第 5 章讨论的阻尼因子或最大迭代限制（[Chapter 5](ch05.xhtml#centrality_algorithms)）。如果未显式设置，Neo4j
    默认的阻尼因子为 `0.85`，`maxIterations` 设置为 20。
- en: 'Now let’s look at the distribution of the PageRank values so we’ll know how
    to filter our data:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看 PageRank 值的分布，这样我们就能知道如何筛选我们的数据：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we run that query we’ll get this output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，将会得到以下输出：
- en: '| count | ave | 50% | 75% | 90% | 95% | 99% | 99.9% | 99.99% | 99.999% | 100%
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| count | ave | 50% | 75% | 90% | 95% | 99% | 99.9% | 99.99% | 99.999% | 100%
    |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| 1326101 | 0.1614898 | 0.15 | 0.15 | 0.157497 | 0.181875 | 0.330081 | 1.649511
    | 6.825738 | 15.27376 | 22.98046 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 1326101 | 0.1614898 | 0.15 | 0.15 | 0.157497 | 0.181875 | 0.330081 | 1.649511
    | 6.825738 | 15.27376 | 22.98046 |'
- en: To interpret this percentile table, the 90% value of 0.157497 means that 90%
    of users had a lower PageRank score. 99.99% reflects the influence rank for the
    top 0.0001% reviewers and 100% is simply the highest PageRank score.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要解释这个百分位表，0.157497的90%值意味着90%的用户PageRank得分更低。99.99%反映了排名前0.0001%评论者的影响力等级，而100%则是最高的PageRank得分。
- en: It’s interesting that 90% of our users have a score of under 0.16, which is
    close to the overall average—and only marginally more than the 0.15 that they
    are initialized with by the PageRank algorithm. It seems like this data reflects
    a power-law distribution with a few very influential reviewers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们用户中有90%的人得分低于0.16，接近总体平均值——比PageRank算法初始化的0.15稍高一点。这似乎反映了一种幂律分布，其中少数非常有影响力的评论者。
- en: 'Because we’re interested in finding only the most influential users, we’ll
    write a query that only finds users with a PageRank score in the top 0.001% of
    all users. The following query finds reviewers with a PageRank score *higher*
    than 1.64951 (notice that’s the 99.9% group):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们只对最有影响力的用户感兴趣，我们将编写一个查询，仅查找PageRank得分在所有用户中的前0.001%的用户。以下查询找到了PageRank得分*高于*1.64951的评论者（请注意这是99.9%组）：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we run that query we’ll get the results seen here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，我们将得到以下结果：
- en: '| name | pageRank | hotelReviews | totalReviews | friends |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| name | pageRank | hotelReviews | totalReviews | friends |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Phil | 17.361242 | 15 | 134 | 8154 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| Phil | 17.361242 | 15 | 134 | 8154 |'
- en: '| Philip | 16.871013 | 21 | 620 | 9634 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Philip | 16.871013 | 21 | 620 | 9634 |'
- en: '| Carol | 12.416060999999997 | 6 | 119 | 6218 |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| Carol | 12.416060999999997 | 6 | 119 | 6218 |'
- en: '| Misti | 12.239516000000004 | 19 | 730 | 6230 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| Misti | 12.239516000000004 | 19 | 730 | 6230 |'
- en: '| Joseph | 12.003887499999998 | 5 | 32 | 6596 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| Joseph | 12.003887499999998 | 5 | 32 | 6596 |'
- en: '| Michael | 11.460049 | 13 | 51 | 6572 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| Michael | 11.460049 | 13 | 51 | 6572 |'
- en: '| J | 11.431505999999997 | 103 | 1322 | 6498 |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| J | 11.431505999999997 | 103 | 1322 | 6498 |'
- en: '| Abby | 11.376136999999998 | 9 | 82 | 7922 |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| Abby | 11.376136999999998 | 9 | 82 | 7922 |'
- en: '| Erica | 10.993773 | 6 | 15 | 7071 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| Erica | 10.993773 | 6 | 15 | 7071 |'
- en: '| Randy | 10.748785999999999 | 21 | 125 | 7846 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| Randy | 10.748785999999999 | 21 | 125 | 7846 |'
- en: These results show us that Phil is the most credible reviewer, although he hasn’t
    reviewed many hotels. He’s likely connected to some very influential people, but
    if we wanted a stream of new reviews, his profile wouldn’t be the best selection.
    Philip has a slightly lower score, but has the most friends and has written five
    times more reviews than Phil. While J has written the most reviews of all and
    has a reasonable number of friends, J’s PageRank score isn’t the highest—but it’s
    still in the top 10. For our app we choose to highlight hotel reviews from Phil,
    Philip, and J to give us the right mix of influencers and number of reviews.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果告诉我们，Phil是最值得信赖的评论者，尽管他没有评论很多酒店。他可能与一些非常有影响力的人有联系，但如果我们想要一系列新评论，他的个人资料就不是最佳选择。Philip的得分略低，但是朋友最多，评论数量是Phil的五倍。虽然J写了最多的评论，并且有相当数量的朋友，但他的PageRank得分并不是最高的，但仍然进入前10。对于我们的应用程序，我们选择突出Phil、Philip和J的酒店评论，以获得合适的影响者和评论数量。
- en: 'Now that we’ve improved our in-app recommendations with relevant reviews, let’s
    turn to the other side of our business: consulting.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过相关评论改进了应用内推荐系统，让我们转向我们业务的另一面：咨询服务。
- en: Travel Business Consulting
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旅行业务咨询
- en: 'As part of our consulting service, hotels subscribe to be alerted when an influential
    visitor writes about their stay so they can take any necessary action. First,
    we’ll look at ratings of the Bellagio, sorted by the most influential reviewers:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为我们咨询服务的一部分，酒店会订阅关于他们住宿的重要访客的评论，以便能够采取必要的行动。首先，我们将查看贝拉吉奥酒店的评级，按最有影响力的评论者排序：
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we run that code we’ll get this output:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该代码，我们将得到以下输出：
- en: '| name | pageRank | stars |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| name | pageRank | stars |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Misti | 12.239516000000004 | 5 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| Misti | 12.239516000000004 | 5 |'
- en: '| Michael | 11.460049 | 4 |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| Michael | 11.460049 | 4 |'
- en: '| J | 11.431505999999997 | 5 |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| J | 11.431505999999997 | 5 |'
- en: '| Erica | 10.993773 | 4 |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| Erica | 10.993773 | 4 |'
- en: '| Christine | 10.740770499999998 | 4 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| Christine | 10.740770499999998 | 4 |'
- en: '| Jeremy | 9.576763499999998 | 5 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| Jeremy | 9.576763499999998 | 5 |'
- en: '| Connie | 9.118103499999998 | 5 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| Connie | 9.118103499999998 | 5 |'
- en: '| Joyce | 7.621449000000001 | 4 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| Joyce | 7.621449000000001 | 4 |'
- en: '| Henry | 7.299146 | 5 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| Henry | 7.299146 | 5 |'
- en: '| Flora | 6.7570075 | 4 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| Flora | 6.7570075 | 4 |'
- en: Note that these results are different from our previous table of the best hotel
    reviewers. That’s because here we are only looking at reviewers that have rated
    the Bellagio.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些结果与我们之前的最佳酒店评论者表格不同。这是因为这里我们只考虑对贝拉吉奥进行了评级的评论者。
- en: Things are looking good for the hotel customer service team at the Bellagio—the
    top 10 influencers all give their hotel good rankings. They may want to encourage
    these people to visit again and share their experiences.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 贝拉吉奥酒店客服团队的情况看起来不错——前十名影响力用户都给了酒店良好的评价。他们可能希望鼓励这些人再次光临并分享他们的经历。
- en: 'Are there any influential guests who haven’t had such a good experience? We
    can run the following code to find the guests with the highest PageRank that rated
    their experience with fewer than four stars:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 是否有一些有影响力的客人没有过好的体验？我们可以运行以下代码来找出评分低于四星的高PageRank客人：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we run that code we’ll get the following results:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，我们会得到以下结果：
- en: '| name | pageRank | stars |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| name | pageRank | stars |'
- en: '| --- | --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Chris | 5.84 | 3 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| Chris | 5.84 | 3 |'
- en: '| Lorrie | 4.95 | 2 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| Lorrie | 4.95 | 2 |'
- en: '| Dani | 3.47 | 1 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| Dani | 3.47 | 1 |'
- en: '| Victor | 3.35 | 3 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| Victor | 3.35 | 3 |'
- en: '| Francine | 2.93 | 3 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| Francine | 2.93 | 3 |'
- en: '| Rex | 2.79 | 2 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| Rex | 2.79 | 2 |'
- en: '| Jon | 2.55 | 3 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| Jon | 2.55 | 3 |'
- en: '| Rachel | 2.47 | 3 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| Rachel | 2.47 | 3 |'
- en: '| Leslie | 2.46 | 2 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| Leslie | 2.46 | 2 |'
- en: '| Benay | 2.46 | 3 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| Benay | 2.46 | 3 |'
- en: Our highest-ranked users giving the Bellagio lower ratings, Chris and Lorrie,
    are amongst the top 1,000 most influential users (as per the results of our earlier
    query), so perhaps a personal outreach is warranted. Also, because many reviewers
    write during their stay, real-time alerts about influencers may facilitate even
    more positive interactions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们评分最高但给贝拉吉奥评分较低的用户，Chris 和 Lorrie，都是前1000名最有影响力的用户之一（根据我们之前查询的结果），因此也许值得进行个性化的外联。此外，因为许多评论者在住宿期间写评论，实时关于影响者的提醒可能会促进更多积极的互动。
- en: Bellagio cross-promotion
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 贝拉吉奥交叉推广
- en: After we helped them find influential reviewers, the Bellagio has now asked
    us to help identify other businesses for cross-promotion with help from well-connected
    customers. In our scenario, we recommend that they increase their customer base
    by attracting new guests from different types of communities as a greenfield opportunity.
    We can use the Betweenness Centrality algorithm that we discussed earlier to work
    out which Bellagio reviewers are not only well connected across the whole Yelp
    network, but might also act as a bridge between different groups.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们帮助他们找到有影响力的评论者之后，贝拉吉奥现在要求我们帮助识别其他可以与好评客人进行交叉推广的企业。在我们的场景中，我们建议他们通过吸引来自不同社区类型的新客人来扩展客户群体，作为一个全新的机会。我们可以使用之前讨论过的中介中心性算法来确定哪些贝拉吉奥的评论者不仅在整个Yelp网络中具有良好的连接性，还可能充当不同群体之间的桥梁。
- en: 'We’re only interested in finding influencers in Las Vegas, so we’ll first tag
    those users:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只对拉斯维加斯的影响者感兴趣，因此我们首先给这些用户打上标签：
- en: '[PRE13]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It would take a long time to run the Betweenness Centrality algorithm over our
    Las Vegas users, so instead we’ll use the the RA-Brandes variant. This algorithm
    calculates a betweenness score by sampling nodes and only exploring shortest paths
    to a certain depth.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的拉斯维加斯用户上运行中介中心性算法需要很长时间，因此我们将使用RA-Brandes变体。该算法通过对节点进行采样并仅探索到特定深度的最短路径来计算介数分数。
- en: After some experimentation, we improved results with a few parameters set differently
    than the default values. We’ll use shortest paths of up to 4 hops (`maxDepth`
    of `4`) and sample 20% of the nodes (`probability` of `0.2`). Note that increasing
    the number of hops and nodes will generally increase the accuracy, but at the
    cost of more time to compute the results. For any particular problem, the optimal
    parameters typically require testing to identify the point of diminishing returns.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些实验，我们通过设置几个参数与默认值不同来改进了结果。我们将使用最多4跳的最短路径（`maxDepth`为`4`）并对节点进行20%的采样（`probability`为`0.2`）。请注意，增加跳数和节点通常会增加准确性，但会增加计算结果的时间成本。对于任何特定的问题，确定最佳参数通常需要测试以确定收益递减的点。
- en: 'The following query will execute the algorithm and store the result in the
    `between` property:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下查询将执行该算法并将结果存储在`between`属性中：
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Before we use these scores in our queries, let’s write a quick exploratory
    query to see how the scores are distributed:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在查询中使用这些分数之前，让我们编写一个快速的探索性查询，看看分数的分布情况：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run that query we’ll see the following output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，我们将看到以下输出：
- en: '| count | ave | 50% | 75% | 90% | 95% | 99% | 99.9% | 99.99% | 99.999% | 100%
    |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 计数 | 平均 | 50% | 75% | 90% | 95% | 99% | 99.9% | 99.99% | 99.999% | 100% |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| 506028 | 320538.6014 | 0 | 10005 | 318944 | 1001655 | 4436409 | 34854988
    | 214080923 | 621434012 | 1998032952 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 506028 | 320538.6014 | 0 | 10005 | 318944 | 1001655 | 4436409 | 34854988
    | 214080923 | 621434012 | 1998032952 |'
- en: Half of our users have a score of 0, meaning they are not well connected at
    all. The top 1 percentile (99% column) are on at least 4 million shortest paths
    between our set of 500,000 users. Considered together, we know that most of our
    users are poorly connected, but a few exert a lot of control over information;
    this is a classic behavior of small-world networks.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用户的一半得分为0，意味着他们根本不联系。顶部1%（99%列）至少在我们的50万用户集合中有400万条最短路径。总的来说，我们知道大多数用户联系不多，但少数人对信息有很大的控制力；这是小世界网络的经典行为。
- en: 'We can find out who our superconnectors are by running the following query:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下查询找出谁是我们的超级连接者：
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '| user | betweenness | pageRank | hotelReviews |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 用户 | 介数 | 页面排名 | 酒店评论 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Misti | 841707563 | 12.239516000000004 | 19 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 米斯蒂 | 841707563 | 12.239516000000004 | 19 |'
- en: '| Christine | 236269693 | 10.740770499999998 | 16 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 克里斯汀 | 236269693 | 10.740770499999998 | 16 |'
- en: '| Erica | 235806844 | 10.993773 | 6 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 艾瑞卡 | 235806844 | 10.993773 | 6 |'
- en: '| Mike | 215534452 | NULL | 2 |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 迈克 | 215534452 | NULL | 2 |'
- en: '| J | 192155233 | 11.431505999999997 | 103 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| J | 192155233 | 11.431505999999997 | 103 |'
- en: '| Michael | 161335816 | 5.105143 | 31 |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 迈克尔 | 161335816 | 5.105143 | 31 |'
- en: '| Jeremy | 160312436 | 9.576763499999998 | 6 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 杰里米 | 160312436 | 9.576763499999998 | 6 |'
- en: '| Michael | 139960910 | 11.460049 | 13 |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 迈克尔 | 139960910 | 11.460049 | 13 |'
- en: '| Chris | 136697785 | 5.838922499999999 | 5 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 克里斯 | 136697785 | 5.838922499999999 | 5 |'
- en: '| Connie | 133372418 | 9.118103499999998 | 7 |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 康妮 | 133372418 | 9.118103499999998 | 7 |'
- en: We see some of the same people here that we saw earlier in our PageRank query,
    with Mike being an interesting exception. He was excluded from that calculation
    because he hasn’t reviewed enough hotels (three was the cutoff), but it seems
    like he’s quite well connected in the world of Las Vegas Yelp users.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到在我们的页面排名查询中有一些相同的人物，迈克是一个有趣的例外。他被排除在那个计算之外，因为他还没有评论足够的酒店（三个是截止点），但看起来他在拉斯维加斯
    Yelp 用户中联系非常紧密。
- en: 'In an effort to reach a wider variety of customers, we’ll look at other preferences
    these “connectors” display to see what we should promote. Many of these users
    have also reviewed restaurants, so we write the following query to find out which
    ones they like best:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接触更多种类的客户，我们将查看这些“连接者”展示的其他偏好，以确定我们应该推广什么。许多用户还评论了餐厅，所以我们编写以下查询来找出他们最喜欢哪些餐厅：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This query finds our top 50 influential connectors, and finds the top 10 Las
    Vegas restaurants where at least 3of them have rated the restaurant. If we run
    it, we’ll see the output shown here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询找到我们的前50名有影响力的连接者，并找到至少有3位评价了该餐厅的前10家拉斯维加斯餐厅。如果我们运行它，我们将看到此处显示的输出：
- en: '| business | averageReview | numberOfReviews |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 商业 | 平均评论 | 评论数量 |'
- en: '| --- | --- | --- |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Jean Georges Steakhouse | 5.0 | 6 |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| Jean Georges Steakhouse | 5.0 | 6 |'
- en: '| Sushi House Goyemon | 5.0 | 6 |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| Sushi House Goyemon | 5.0 | 6 |'
- en: '| Art of Flavors | 5.0 | 4 |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| Art of Flavors | 5.0 | 4 |'
- en: '| é by José Andrés | 5.0 | 4 |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| é by José Andrés | 5.0 | 4 |'
- en: '| Parma By Chef Marc | 5.0 | 4 |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| Parma By Chef Marc | 5.0 | 4 |'
- en: '| Yonaka Modern Japanese | 5.0 | 4 |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| Yonaka Modern Japanese | 5.0 | 4 |'
- en: '| Kabuto | 5.0 | 4 |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| Kabuto | 5.0 | 4 |'
- en: '| Harvest by Roy Ellamar | 5.0 | 3 |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| Harvest by Roy Ellamar | 5.0 | 3 |'
- en: '| Portofino by Chef Michael LaPlaca | 5.0 | 3 |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| Portofino by Chef Michael LaPlaca | 5.0 | 3 |'
- en: '| Montesano’s Eateria | 5.0 | 3 |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| Montesano’s Eateria | 5.0 | 3 |'
- en: We can now recommend that the Bellagio run a joint promotion with these restaurants
    to attract new guests from groups they might not typically reach. Superconnectors
    who rate the Bellagio well become our proxy for estimating which restaurants might
    catch the eye of new types of target visitors.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们建议贝拉吉欧与这些餐厅合作推广活动，以吸引通常不会接触到的新客人。给贝拉吉欧评分高的超级连接者成为我们估计哪些餐厅可能吸引新目标访客的代理人。
- en: Now that we have helped the Bellagio reach new groups, we’re going to see how
    we can use community detection to further improve our app.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经帮助贝拉吉奥吸引了新的群体，接下来我们将看看如何使用社区检测进一步改进我们的应用程序。
- en: Finding Similar Categories
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找相似类别
- en: While our end users are using the app to find hotels, we want to showcase other
    businesses they might be interested in. The Yelp dataset contains more than 1,000
    categories, and it seems likely that some of those categories are similar to each
    other. We’ll use that similarity to make in-app recommendations for new businesses
    that our users will likely find interesting.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的最终用户在使用应用程序查找酒店时，我们希望展示其他可能感兴趣的企业。Yelp 数据集包含超过 1,000 个类别，很可能其中一些类别彼此相似。我们将利用这种相似性为我们的用户在应用内推荐新的可能感兴趣的企业。
- en: Our graph model doesn’t have any relationships between categories, but we can
    use the ideas described in [“Monopartite, Bipartite, and k-Partite Graphs”](ch02.xhtml#ch2-projected-graphs)
    to build a category similarity graph based on how businesses categorize themselves.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的图模型在类别之间没有任何关系，但我们可以借鉴 [“单分图、双分图和 k-分图”](ch02.xhtml#ch2-projected-graphs)
    中描述的思想，基于企业自己分类的方式构建一个类别相似性图。
- en: For example, imagine that only one business categorizes itself under both Hotels
    and Historical Tours, as seen in [Figure 7-8](#projection1).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下，只有一家企业将自己分类为旅馆和历史游览，如图 [7-8](#projection1) 所示。
- en: '![gral 0708](Images/gral_0708.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0708](Images/gral_0708.png)'
- en: Figure 7-8\. A business with two categories
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-8\. 一个有两个类别的企业
- en: This would result in a projected graph that has a link between Hotels and Historical
    Tours with a weight of 1, as seen in [Figure 7-9](#projection2).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致一个投影图，它在酒店和历史游览之间有一个权重为 1 的链接，如图 [7-9](#projection2) 所示。
- en: '![gral 0709](Images/gral_0709.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0709](Images/gral_0709.png)'
- en: Figure 7-9\. A projected categories graph
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-9\. 一个类别投影图
- en: 'In this case, we don’t actually have to create the similarity graph—instead,
    we can run a community detection algorithm such as Label Propagation over a projected
    similarity graph. Using Label Propagation will effectively cluster businesses
    around the supercategory with which they have most in common:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们实际上不必创建相似性图 —— 反之，我们可以运行一个社区检测算法，如标签传播，来分析投影的相似性图。使用标签传播将有效地将企业聚类在它们与超类别最相似的类别周围：
- en: '[PRE18]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s give those supercategories a friendlier name—the name of their largest
    category works well here:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给这些超类别取一个更友好的名称 —— 他们最大类别的名称在这里非常适合：
- en: '[PRE19]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can see a sample of categories and supercategories in [Figure 7-10](#cat_super_cat).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在图 [7-10](#cat_super_cat) 中看到类别和超类别的示例。
- en: '![gral 0710](Images/gral_0710.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0710](Images/gral_0710.png)'
- en: Figure 7-10\. Categories and supercategories
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-10\. 类别和超类别
- en: 'The following query finds the most prevalent similar categories to Hotels in
    Las Vegas:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的查询找出拉斯维加斯最常见的与酒店相似的类别：
- en: '[PRE20]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we run that query we’ll see the following output:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，我们将看到以下输出：
- en: '| otherCategory | businesses |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 其他类别 | 企业 |'
- en: '| --- | --- |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Tours | 189 |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 旅游 | 189 |'
- en: '| Car Rental | 160 |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 租车 | 160 |'
- en: '| Limos | 84 |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 豪华轿车服务 | 84 |'
- en: '| Resorts | 73 |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 度假村 | 73 |'
- en: '| Airport Shuttles | 52 |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 机场班车 | 52 |'
- en: '| Taxis | 35 |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 出租车 | 35 |'
- en: '| Vacation Rentals | 29 |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 度假租赁 | 29 |'
- en: '| Airports | 25 |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 机场 | 25 |'
- en: '| Airlines | 23 |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 航空公司 | 23 |'
- en: '| Motorcycle Rental | 19 |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 摩托车租赁 | 19 |'
- en: Do these results seem odd? Obviously taxis and tours aren’t hotels, but remember
    that this is based on self-reported categorizations. What the Label Propagation
    algorithm is really showing us in this similarity group are adjacent businesses
    and services.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果看起来奇怪吗？显然，出租车和旅游并不是酒店，但请记住，这是基于自我报告的分类。标签传播算法在这个相似性组中实际上展示的是相邻的企业和服务。
- en: 'Now let’s find some businesses with an above-average rating in each of those
    categories:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们找一些在每个类别中评分高于平均水平的企业：
- en: '[PRE21]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this query we use [pattern comprehension](https://bit.ly/2HRa1gr) for the
    first time. Pattern comprehension is a syntax construction for creating a list
    based on pattern matching. It finds a specified pattern using a `MATCH` clause
    with a `WHERE` clause for predicates and then yields a custom projection. This
    Cypher feature was added based on inspiration from [GraphQL](https://graphql.org),
    a query language for APIs.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，我们第一次使用 [模式推导](https://bit.ly/2HRa1gr)。模式推导是一种基于模式匹配创建列表的语法结构。它使用 `MATCH`
    子句查找指定的模式和 `WHERE` 子句进行谓词，然后生成自定义投影。这个 Cypher 特性是受到 [GraphQL](https://graphql.org)
    的启发，GraphQL 是一个用于 API 的查询语言。
- en: 'If we run that query we see the following result:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，我们将看到以下结果：
- en: '| otherCategory | business | averageStars |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 其他类别 | 商业 | 平均评分 |'
- en: '| --- | --- | --- |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Motorcycle Rental | Adrenaline Rush Slingshot Rentals | 5.0 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 摩托车租赁 | Adrenaline Rush Slingshot Rentals | 5.0 |'
- en: '| Snorkeling | Sin City Scuba | 5.0 |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 浮潜 | Sin City Scuba | 5.0 |'
- en: '| Guest Houses | Hotel Del Kacvinsky | 5.0 |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 客房 | Hotel Del Kacvinsky | 5.0 |'
- en: '| Car Rental | The Lead Team | 5.0 |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 租车 | The Lead Team | 5.0 |'
- en: '| Food Tours | Taste BUZZ Food Tours | 5.0 |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 美食之旅 | Taste BUZZ美食之旅 | 5.0 |'
- en: '| Airports | Signature Flight Support | 5.0 |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 机场 | Signature Flight Support | 5.0 |'
- en: '| Public Transportation | JetSuiteX | 4.6875 |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 公共交通 | JetSuiteX | 4.6875 |'
- en: '| Ski Resorts | Trikke Las Vegas | 4.833333333333332 |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 滑雪胜地 | Trikke拉斯维加斯 | 4.833333333333332 |'
- en: '| Town Car Service | MW Travel Vegas | 4.866666666666665 |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| 小镇车服务 | MW Travel Vegas | 4.866666666666665 |'
- en: '| Campgrounds | McWilliams Campground | 3.875 |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| 营地 | McWilliams营地 | 3.875 |'
- en: We can then make real-time recommendations based on a user’s immediate app behavior.
    For example, while users are looking at Las Vegas hotels, we can now highlight
    a variety of adjacent Las Vegas businesses with good ratings. We can generalize
    these approaches to any business category, such as restaurants or theaters, in
    any location.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后可以根据用户的即时应用行为进行实时推荐。例如，当用户查看拉斯维加斯的酒店时，我们现在可以突出显示一系列评分良好的相邻拉斯维加斯企业。我们可以将这些方法推广到任何业务类别，如任何位置的餐厅或剧院。
- en: Analyzing Airline Flight Data with Apache Spark
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache Spark分析航空公司航班数据
- en: In this section, we’ll use a different scenario to illustrate the analysis of
    US airport data with Spark. Imagine you’re a data scientist with a considerable
    travel schedule and would like to dig into information about airline flights and
    delays. We’ll first explore airport and flight information and then look deeper
    into delays at two specific airports. Community detection will be used to analyze
    routes and find the best use of our frequent flyer points.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用不同的场景来说明如何使用Spark分析美国机场数据。想象一下，您是一位数据科学家，有很多的旅行计划，并且想要深入了解航班和延误信息。我们将首先探讨机场和航班信息，然后深入研究两个特定机场的延误情况。社区检测将用于分析路线，并找出最佳使用我们的常旅客积分的方式。
- en: The US Bureau of Transportation Statistics makes available a [significant amount
    of transportation information](https://bit.ly/2Fy0GHA). For our analysis, we’ll
    use their May 2018 air travel on-time performance data, which includes flights
    originating and ending in the United States in that month. To add more detail
    about airports, such as location information, we’ll also load data from a separate
    source, [OpenFlights](https://bit.ly/2Frv8TO).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 美国运输统计局提供了大量的[运输信息](https://bit.ly/2Fy0GHA)。对于我们的分析，我们将使用他们2018年5月的航空准时表现数据，该数据包括在该月起始和结束于美国的航班。为了增加机场的位置信息等更多细节，我们还将从另一个来源加载数据，[OpenFlights](https://bit.ly/2Frv8TO)。
- en: Let’s load the data in Spark. As was the case in previous sections, our data
    is in CSV files that are available on the [book’s Github repository](https://bit.ly/2FPgGVV).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Spark中加载数据。和之前的部分一样，我们的数据存储在[书的Github仓库](https://bit.ly/2FPgGVV)的CSV文件中。
- en: '[PRE22]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We have to do some cleanup on the nodes because some airports don’t have valid
    airport codes. We’ll give the columns more descriptive names and convert some
    items into appropriate numeric types. We also need to make sure that we have columns
    named `id`, `dst`, and `src`, as this is expected by Spark’s GraphFrames library.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对节点进行一些清理，因为一些机场没有有效的机场代码。我们将为列提供更具描述性的名称，并将一些项目转换为适当的数值类型。我们还需要确保我们有`id`、`dst`和`src`命名的列，因为这是Spark的GraphFrames库所期望的。
- en: 'We’ll also create a separate DataFrame that maps airline codes to airline names.
    We’ll use this later in this chapter:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个单独的DataFrame，将航空公司代码映射到航空公司名称。我们稍后在本章中会用到这个DataFrame：
- en: '[PRE23]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Exploratory Analysis
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索性分析
- en: Let’s start with some exploratory analysis to see what the data looks like.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些探索性分析开始，看看数据是什么样子的。
- en: 'First let’s see how many airports we have:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们看看我们有多少个机场：
- en: '[PRE24]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: And how many connections do we have between these airports?
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们这些机场之间有多少连接呢？
- en: '[PRE26]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Popular Airports
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热门机场
- en: 'Which airports have the most departing flights? We can work out the number
    of outgoing flights from an airport using the Degree Centrality algorithm:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些机场有最多的出发航班？我们可以使用度中心性算法计算从一个机场出发的出站航班数量：
- en: '[PRE28]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we run that code we’ll see the following output:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该代码，我们将看到以下输出：
- en: '| id | name | outDegree |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| id | 名称 | 出度 |'
- en: '| --- | --- | --- |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ATL | Hartsfield Jackson Atlanta International Airport | 33837 |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| ATL | 哈茨菲尔德-杰克逊亚特兰大国际机场 | 33837 |'
- en: '| ORD | Chicago O’Hare International Airport | 28338 |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| ORD | 芝加哥奥黑尔国际机场 | 28338 |'
- en: '| DFW | Dallas Fort Worth International Airport | 23765 |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| DFW | 达拉斯-沃斯堡国际机场 | 23765 |'
- en: '| CLT | Charlotte Douglas International Airport | 20251 |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| CLT | 夏洛特道格拉斯国际机场 | 20251 |'
- en: '| DEN | Denver International Airport | 19836 |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| DEN | 丹佛国际机场 | 19836 |'
- en: '| LAX | Los Angeles International Airport | 19059 |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| LAX | 洛杉矶国际机场 | 19059 |'
- en: '| PHX | Phoenix Sky Harbor International Airport | 15103 |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| PHX | 凤凰城天港国际机场 | 15103 |'
- en: '| SFO | San Francisco International Airport | 14934 |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| SFO | 旧金山国际机场 | 14934 |'
- en: '| LGA | La Guardia Airport | 14709 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| LGA | 拉瓜迪亚机场 | 14709 |'
- en: '| IAH | George Bush Intercontinental Houston Airport | 14407 |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| IAH | 乔治布什国际机场 | 14407 |'
- en: 'Most large US cities show up on this list—Chicago, Atlanta, Los Angeles, and
    New York all have popular airports. We can also create a visual representation
    of the outgoing flights using the following code:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数大型美国城市都在此列表上——芝加哥、亚特兰大、洛杉矶和纽约都有热门机场。我们还可以使用以下代码创建出发航班的可视化表示：
- en: '[PRE29]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The resulting chart can be seen in [Figure 7-11](#airports-outgoing).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的图表可以在[图 7-11](#airports-outgoing)中看到。
- en: '![gral 0711](Images/gral_0711.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0711](Images/gral_0711.png)'
- en: Figure 7-11\. Outgoing flights by airport
  id: totrans-299
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-11\. 按机场的出发航班
- en: It’s quite striking how suddenly the number of flights drops off. Denver International
    Airport (DEN), the fifth most popular airport, has just over half as many outgoing
    fights as Hartsfield Jackson Atlanta International Airport (ATL), in first place.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 航班数量突然减少是相当引人注目的。第五大热门机场丹佛国际机场（DEN）的出发航班数量仅为首位的哈茨菲尔德-杰克逊亚特兰大国际机场（ATL）的一半多一点。
- en: Delays from ORD
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORD的延误
- en: In our scenario, we frequently travel between the west and east coasts and want
    to see delays through a midpoint hub like Chicago O’Hare International Airport
    (ORD). This dataset contains flight delay data, so we can dive right in.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情境中，我们经常在西岸和东岸之间旅行，并希望通过芝加哥奥黑尔国际机场（ORD）这样的中间枢纽查看延误情况。这个数据集包含航班延误数据，所以我们可以直接深入研究。
- en: 'The following code finds the average delay of flights departing from ORD grouped
    by the destination airport:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码找出从ORD出发的航班平均延误时间：
- en: '[PRE30]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Once we’ve calculated the average delay grouped by destination we join the resulting
    Spark DataFrame with a DataFrame containing all vertices, so that we can print
    the full name of the destination airport.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们计算出按目的地分组的平均延误时间，我们将结果的Spark DataFrame与包含所有顶点的DataFrame连接，以便打印目的地机场的全名。
- en: 'Running this code returns the 10 destinations with the worst delays:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码将返回延误最严重的10个目的地：
- en: '| dst | name | averageDelay | numberOfDelays |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| dst | name | averageDelay | numberOfDelays |'
- en: '| --- | --- | --- | --- |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| CKB | North Central West Virginia Airport | 145.08 | 12 |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| CKB | 西弗吉尼亚州中北部机场 | 145.08 | 12 |'
- en: '| OGG | Kahului Airport | 119.67 | 9 |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| OGG | 卡胡卢伊机场 | 119.67 | 9 |'
- en: '| MQT | Sawyer International Airport | 114.75 | 12 |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| MQT | 索耶尔国际机场 | 114.75 | 12 |'
- en: '| MOB | Mobile Regional Airport | 102.2 | 10 |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| MOB | 莫比尔地区机场 | 102.2 | 10 |'
- en: '| TTN | Trenton Mercer Airport | 101.18 | 17 |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| TTN | 特伦顿默瑟机场 | 101.18 | 17 |'
- en: '| AVL | Asheville Regional Airport | 98.5 | 28 |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| AVL | 阿什维尔地区机场 | 98.5 | 28 |'
- en: '| ISP | Long Island Mac Arthur Airport | 94.08 | 13 |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| ISP | 纽约长岛麦克阿瑟机场 | 94.08 | 13 |'
- en: '| ANC | Ted Stevens Anchorage International Airport | 83.74 | 23 |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| ANC | 泰德·史蒂文斯安克雷奇国际机场 | 83.74 | 23 |'
- en: '| BTV | Burlington International Airport | 83.2 | 25 |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| BTV | 伯灵顿国际机场 | 83.2 | 25 |'
- en: '| CMX | Houghton County Memorial Airport | 79.18 | 17 |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| CMX | 霍顿县纪念机场 | 79.18 | 17 |'
- en: 'This is interesting, but one data point really stands out: 12 flights from
    ORD to CKB have been delayed by more than 2 hours on average! Let’s find the flights
    between those airports and see what’s going on:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有趣，但一个数据点真的很突出：从ORD到CKB的12个航班平均延误超过2小时！让我们找出这两个机场之间的航班，看看到底发生了什么：
- en: '[PRE31]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can then plot the flights with the following code:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后可以使用以下代码绘制这些航班：
- en: '[PRE32]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If we run that code we’ll get the chart in [Figure 7-12](#ord-ckb-flights).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，我们将会得到[图 7-12](#ord-ckb-flights)中的图表。
- en: '![gral 0712](Images/gral_0712.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0712](Images/gral_0712.png)'
- en: Figure 7-12\. Flights from ORD to CKB
  id: totrans-325
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-12\. 从ORD到CKB的航班
- en: About half of the flights were delayed, but the delay of more than 14 hours
    on May 2, 2018, has massively skewed the average.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 大约一半的航班延误了，但2018年5月2日超过14小时的延误大大偏离了平均值。
- en: What if we want to find delays coming into and going out of a coastal airport?
    Those airports are often affected by adverse weather conditions, so we might be
    able to find some interesting delays.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要查找进出沿海机场的延误怎么办？这些机场通常受不良天气条件的影响，因此我们可能会找到一些有趣的延误情况。
- en: Bad Day at SFO
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SFO的糟糕一天
- en: 'Let’s consider delays at an airport known for fog-related “low ceiling” issues:
    San Francisco International Airport (SFO). One method for analysis would be to
    look at *motifs*, which are recurrent subgraphs or patterns.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个以“低云”问题闻名的机场的延误情况：旧金山国际机场（SFO）。一种分析方法是查看*模式*，这些是经常出现的子图或模式。
- en: Note
  id: totrans-330
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The equivalent to motifs in Neo4j is graph patterns, which are found using the
    `MATCH` clause or with pattern expressions in Cypher.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在Neo4j中，与模式相当的是图案，可以使用`MATCH`子句或Cypher中的模式表达式找到。
- en: 'GraphFrames lets us [search for motifs](http://bit.ly/2TZQ89B), so we can use
    the structure of flights as part of a query. Let’s use motifs to find the most-delayed
    flights going into and out of SFO on May 11, 2018. The following code will find
    these delays:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: GraphFrames允许我们[搜索模式](http://bit.ly/2TZQ89B)，因此我们可以使用飞行的结构作为查询的一部分。让我们使用模式找出2018年5月11日进出SFO最延误的航班。以下代码将找到这些延误：
- en: '[PRE33]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The motif `(a)-[ab]->(b); (b)-[bc]->(c)` finds flights coming into and out
    from the same airport. We then filter the resulting pattern to find flights with:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图案`(a)-[ab]->(b); (b)-[bc]->(c)`找到进出同一机场的航班。然后我们过滤结果模式以找到以下航班：
- en: A sequence where the first flight arrives at SFO and the second flight departs
    from SFO
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个序列，第一班抵达SFO，第二班从SFO出发
- en: Delays of over 30 minutes when arriving at *or* departing from SFO
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到达或离开SFO时超过30分钟的延误
- en: The same flight number and airline
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一航班号和航空公司
- en: 'We can then take the result and select the columns we’re interested in:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以获取结果并选择我们感兴趣的列：
- en: '[PRE34]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We’re also calculating the *delta* between the arriving and departing flights
    to see which delays we can truly attribute to SFO.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在计算抵达和出发航班之间的*delta*，以查看我们真正可以归因于SFO的延误情况。
- en: 'If we execute this code we’ll get the following result:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行此代码，我们将得到以下结果：
- en: '| airline | flightNumber | a1 | a1DeptTime | arrDelay | a2 | a2DeptTime | deptDelay
    | a3 | delta |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| airline | flightNumber | a1 | a1DeptTime | arrDelay | a2 | a2DeptTime | deptDelay
    | a3 | delta |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |'
- en: '| WN | 1454 | PDX | 1130 | -18.0 | SFO | 1350 | 178.0 | BUR | 196.0 |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| WN | 1454 | PDX | 1130 | -18.0 | SFO | 1350 | 178.0 | BUR | 196.0 |'
- en: '| OO | 5700 | ACV | 1755 | -9.0 | SFO | 2235 | 64.0 | RDM | 73.0 |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| OO | 5700 | ACV | 1755 | -9.0 | SFO | 2235 | 64.0 | RDM | 73.0 |'
- en: '| UA | 753 | BWI | 700 | -3.0 | SFO | 1125 | 49.0 | IAD | 52.0 |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| UA | 753 | BWI | 700 | -3.0 | SFO | 1125 | 49.0 | IAD | 52.0 |'
- en: '| UA | 1900 | ATL | 740 | 40.0 | SFO | 1110 | 77.0 | SAN | 37.0 |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| UA | 1900 | ATL | 740 | 40.0 | SFO | 1110 | 77.0 | SAN | 37.0 |'
- en: '| WN | 157 | BUR | 1405 | 25.0 | SFO | 1600 | 39.0 | PDX | 14.0 |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| WN | 157 | BUR | 1405 | 25.0 | SFO | 1600 | 39.0 | PDX | 14.0 |'
- en: '| DL | 745 | DTW | 835 | 34.0 | SFO | 1135 | 44.0 | DTW | 10.0 |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| DL | 745 | DTW | 835 | 34.0 | SFO | 1135 | 44.0 | DTW | 10.0 |'
- en: '| WN | 1783 | DEN | 1830 | 25.0 | SFO | 2045 | 33.0 | BUR | 8.0 |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| WN | 1783 | DEN | 1830 | 25.0 | SFO | 2045 | 33.0 | BUR | 8.0 |'
- en: '| WN | 5789 | PDX | 1855 | 119.0 | SFO | 2120 | 117.0 | DEN | -2.0 |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| WN | 5789 | PDX | 1855 | 119.0 | SFO | 2120 | 117.0 | DEN | -2.0 |'
- en: '| WN | 1585 | BUR | 2025 | 31.0 | SFO | 2230 | 11.0 | PHX | -20.0 |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| WN | 1585 | BUR | 2025 | 31.0 | SFO | 2230 | 11.0 | PHX | -20.0 |'
- en: The worst offender, WN 1454, is shown in the top row; it arrived early but departed
    almost three hours late. We can also see that there are some negative values in
    the `arrDelay` column; this means that the flight into SFO was early.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 最严重的违规行为，WN 1454，显示在顶部行；它提前到达，但几乎晚了三个小时。我们还可以看到`arrDelay`列中有一些负值；这意味着飞往SFO的航班提前到达。
- en: Also notice that some flights, such as WN 5789 and WN 1585, made up time while
    on the ground in SFO, as shown with a negative delta.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 同样请注意，有些航班，如WN 5789和WN 1585，在SFO地面上补时，显示为负数。
- en: Interconnected Airports by Airline
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 航空公司间的互联机场
- en: Now let’s say we’ve traveled a lot, and those frequent flyer points we’re determined
    to use to see as many destinations as efficiently as possible are soon to expire.
    If we start from a specific US airport, how many different airports can we visit
    and come back to the starting airport using the same airline?
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们旅行很多次，而且那些积累的飞行积分我们决定尽可能高效地使用，很快就会过期。如果我们从一个特定的美国机场出发，使用同一航空公司可以去多少个不同的机场并返回起始机场？
- en: 'Let’s first identify all the airlines and work out how many flights there are
    on each of them:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先识别所有航空公司，并计算每家公司的航班数量：
- en: '[PRE35]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And now let’s create a bar chart showing our airlines:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个条形图显示我们的航空公司：
- en: '[PRE36]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: If we run that query we’ll get the output in [Figure 7-13](#airline-counts).
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，将在 [图 7-13](#airline-counts) 中得到输出。
- en: '![gral 0713](Images/gral_0713.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0713](Images/gral_0713.png)'
- en: Figure 7-13\. The number of flights by airline
  id: totrans-363
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-13\. 各航空公司的航班数量
- en: 'Now let’s write a function that uses the Strongly Connected Components algorithm
    to find airport groupings for each airline where all the airports have flights
    to and from all the other airports in that group:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一个函数，使用强连通分量算法来查找每个航空公司的机场分组，其中所有机场都有往来于该组内所有其他机场的航班：
- en: '[PRE37]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can write the following code to create a DataFrame containing each airline
    and the number of airports of its largest strongly connected component:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以编写以下代码来创建一个包含每个航空公司及其最大强连通分量中机场数量的 DataFrame：
- en: '[PRE38]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'And now let’s create a bar chart showing our airlines:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个条形图显示我们的航空公司：
- en: '[PRE39]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: If we run that query we’ll get the output in [Figure 7-14](#airlines-scc-counts).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，将在 [图 7-14](#airlines-scc-counts) 中得到输出。
- en: '![gral 0714](Images/gral_0714.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0714](Images/gral_0714.png)'
- en: Figure 7-14\. The number of reachable airports by airline
  id: totrans-372
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-14\. 各航空公司可达机场数量
- en: SkyWest has the largest community, with over 200 strongly connected airports.
    This might partially reflect its business model as an affiliate airline which
    operates aircraft used on flights for partner airlines. Southwest, on the other
    hand, has the highest number of flights but only connects around 80 airports.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: SkyWest 是最大的社区，拥有超过 200 个强连通机场。这可能部分反映了其作为联营航空公司的商业模式，该公司为合作伙伴航空公司的航班运营飞机。另一方面，Southwest
    航空虽然航班数量最多，但只连接了大约 80 个机场。
- en: Now let’s say most of the frequent flyer points we have are with Delta Airlines
    (DL). Can we find airports that form communities within the network for that particular
    airline carrier?
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们手头大多数的常旅客积分是与 Delta 航空（DL）相关的。我们能否找到在该特定航空公司网络中形成社区的机场？
- en: '[PRE40]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If we run that query we’ll see the following output:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，将看到以下输出：
- en: '| label | airports | count |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| label | airports | count |'
- en: '| --- | --- | --- |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1606317768706 | [IND, ORF, ATW, RIC, TRI, XNA, ECP, AVL, JAX, SYR, BHM, GSO,
    MEM, C… | 89 |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| 1606317768706 | [IND, ORF, ATW, RIC, TRI, XNA, ECP, AVL, JAX, SYR, BHM, GSO,
    MEM, C… | 89 |'
- en: '| 1219770712067 | [GEG, SLC, DTW, LAS, SEA, BOS, MSN, SNA, JFK, TVC, LIH, JAC,
    FLL, M… | 53 |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| 1219770712067 | [GEG, SLC, DTW, LAS, SEA, BOS, MSN, SNA, JFK, TVC, LIH, JAC,
    FLL, M… | 53 |'
- en: '| 17179869187 | [RHV] | 1 |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| 17179869187 | [RHV] | 1 |'
- en: '| 25769803777 | [CWT] | 1 |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| 25769803777 | [CWT] | 1 |'
- en: '| 25769803776 | [CDW] | 1 |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| 25769803776 | [CDW] | 1 |'
- en: '| 25769803782 | [KNW] | 1 |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| 25769803782 | [KNW] | 1 |'
- en: '| 25769803778 | [DRT] | 1 |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 25769803778 | [DRT] | 1 |'
- en: '| 25769803779 | [FOK] | 1 |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| 25769803779 | [FOK] | 1 |'
- en: '| 25769803781 | [HVR] | 1 |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| 25769803781 | [HVR] | 1 |'
- en: '| 42949672962 | [GTF] | 1 |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| 42949672962 | [GTF] | 1 |'
- en: 'Most of the airports DL uses have clustered into two groups; let’s drill down
    into those. There are too many airports to show here, so we’ll just show the airports
    with the biggest degree (ingoing and outgoing flights). We can write the following
    code to calculate airport degree:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Delta 航空使用的机场都聚集成两个群组；让我们深入研究这些。由于机场太多，无法在此显示所有，因此我们只显示度数最大的机场（进出航班）。我们可以编写以下代码来计算机场的度数：
- en: '[PRE41]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We’ll then combine this with the airports that belong to the largest cluster:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将此与属于最大集群的机场结合起来：
- en: '[PRE42]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we run that query we’ll get this output:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，将得到以下输出：
- en: '| id | name | degree |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| id | name | degree |'
- en: '| --- | --- | --- |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| DFW | Dallas Fort Worth International Airport | 47514 |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| DFW | 达拉斯-沃斯堡国际机场 | 47514 |'
- en: '| CLT | Charlotte Douglas International Airport | 40495 |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| CLT | 夏洛特·道格拉斯国际机场 | 40495 |'
- en: '| IAH | George Bush Intercontinental Houston Airport | 28814 |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| IAH | 乔治·布什国际机场 | 28814 |'
- en: '| EWR | Newark Liberty International Airport | 25131 |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| EWR | 纽瓦克自由国际机场 | 25131 |'
- en: '| PHL | Philadelphia International Airport | 20804 |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| PHL | 费城国际机场 | 20804 |'
- en: '| BWI | Baltimore/Washington International Thurgood Marshall Airport | 18989
    |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| BWI | 巴尔的摩/华盛顿国际萨瑟兰·马歇尔机场 | 18989 |'
- en: '| MDW | Chicago Midway International Airport | 15178 |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| MDW | 芝加哥中途国际机场 | 15178 |'
- en: '| BNA | Nashville International Airport | 12455 |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| BNA | 纳什维尔国际机场 | 12455 |'
- en: '| DAL | Dallas Love Field | 12084 |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| DAL | 达拉斯爱田机场 | 12084 |'
- en: '| IAD | Washington Dulles International Airport | 11566 |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| IAD | 华盛顿杜勒斯国际机场 | 11566 |'
- en: '| STL | Lambert St Louis International Airport | 11439 |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| STL | 圣路易斯兰伯特国际机场 | 11439 |'
- en: '| HOU | William P Hobby Airport | 9742 |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| HOU | 威廉·P·霍比机场 | 9742 |'
- en: '| IND | Indianapolis International Airport | 8543 |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| IND | 印第安纳波利斯国际机场 | 8543 |'
- en: '| PIT | Pittsburgh International Airport | 8410 |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| PIT | 匹兹堡国际机场 | 8410 |'
- en: '| CLE | Cleveland Hopkins International Airport | 8238 |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| CLE | 克利夫兰霍普金斯国际机场 | 8238 |'
- en: '| CMH | Port Columbus International Airport | 7640 |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| CMH | 科伦布港国际机场 | 7640 |'
- en: '| SAT | San Antonio International Airport | 6532 |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| SAT | 圣安东尼奥国际机场 | 6532 |'
- en: '| JAX | Jacksonville International Airport | 5495 |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| JAX | 杰克逊维尔国际机场 | 5495 |'
- en: '| BDL | Bradley International Airport | 4866 |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| BDL | 布拉德利国际机场 | 4866 |'
- en: '| RSW | Southwest Florida International Airport | 4569 |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| RSW | 西南佛罗里达国际机场 | 4569 |'
- en: In [Figure 7-15](#cluster-1-airports) we can see that this cluster is actually
    focused on the East Coast to the Midwest of the United States.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Figure 7-15](#cluster-1-airports) 中，我们可以看到这个集群实际上集中在美国东海岸到中西部。
- en: '![gral 0715](Images/gral_0715.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0715](Images/gral_0715.png)'
- en: Figure 7-15\. Cluster 1606317768706 airports
  id: totrans-418
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-15\. 集群 1606317768706 个机场
- en: 'And now let’s do the same thing with the second-largest cluster:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用第二大集群做同样的事情：
- en: '[PRE43]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If we run that query we get this output:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行该查询，我们会得到以下输出：
- en: '| id | name | degree |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| id | name | degree |'
- en: '| --- | --- | --- |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ATL | Hartsfield Jackson Atlanta International Airport | 67672 |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| ATL | 亚特兰大哈茨菲尔德-杰克逊国际机场 | 67672 |'
- en: '| ORD | Chicago O’Hare International Airport | 56681 |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| ORD | 芝加哥奥黑尔国际机场 | 56681 |'
- en: '| DEN | Denver International Airport | 39671 |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| DEN | 丹佛国际机场 | 39671 |'
- en: '| LAX | Los Angeles International Airport | 38116 |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| LAX | 洛杉矶国际机场 | 38116 |'
- en: '| PHX | Phoenix Sky Harbor International Airport | 30206 |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| PHX | 菲尼克斯天港国际机场 | 30206 |'
- en: '| SFO | San Francisco International Airport | 29865 |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| SFO | 旧金山国际机场 | 29865 |'
- en: '| LGA | La Guardia Airport | 29416 |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| LGA | 拉瓜迪亚机场 | 29416 |'
- en: '| LAS | McCarran International Airport | 27801 |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| LAS | 麦卡伦国际机场 | 27801 |'
- en: '| DTW | Detroit Metropolitan Wayne County Airport | 27477 |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| DTW | 底特律大都会韦恩县机场 | 27477 |'
- en: '| MSP | Minneapolis-St Paul International/Wold-Chamberlain Airport | 27163
    |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| MSP | 明尼阿波利斯-圣保罗国际/沃尔德-张伯伦机场 | 27163 |'
- en: '| BOS | General Edward Lawrence Logan International Airport | 26214 |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| BOS | 一般爱德华·劳伦斯·洛根国际机场 | 26214 |'
- en: '| SEA | Seattle Tacoma International Airport | 24098 |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| SEA | 西雅图-塔科马国际机场 | 24098 |'
- en: '| MCO | Orlando International Airport | 23442 |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| MCO | 奥兰多国际机场 | 23442 |'
- en: '| JFK | John F Kennedy International Airport | 22294 |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| JFK | 约翰·F·肯尼迪国际机场 | 22294 |'
- en: '| DCA | Ronald Reagan Washington National Airport | 22244 |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| DCA | 罗纳德·里根华盛顿国家机场 | 22244 |'
- en: '| SLC | Salt Lake City International Airport | 18661 |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| SLC | 盐湖城国际机场 | 18661 |'
- en: '| FLL | Fort Lauderdale Hollywood International Airport | 16364 |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| FLL | 劳德代尔堡-好莱坞国际机场 | 16364 |'
- en: '| SAN | San Diego International Airport | 15401 |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| SAN | 圣迭戈国际机场 | 15401 |'
- en: '| MIA | Miami International Airport | 14869 |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| MIA | 迈阿密国际机场 | 14869 |'
- en: '| TPA | Tampa International Airport | 12509 |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| TPA | 坦帕国际机场 | 12509 |'
- en: In [Figure 7-16](#cluster-2-airports) we can see that this cluster is apparently
    more hub-focused, with some additional northwestern stops along the way.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Figure 7-16](#cluster-2-airports) 中，我们可以看到这个集群显然更加以枢纽为中心，沿途还有一些西北方向的停靠点。
- en: '![gral 0716](Images/gral_0716.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![gral 0716](Images/gral_0716.png)'
- en: Figure 7-16\. Cluster 1219770712067 airports
  id: totrans-446
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-16\. 集群 1219770712067 个机场
- en: The code we used to generate these maps is available in the [book’s GitHub repository](https://bit.ly/2FPgGVV).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这些地图的代码可以在[书籍的 GitHub 仓库](https://bit.ly/2FPgGVV)中找到。
- en: When checking the DL website for frequent flyer programs, we notice a use-two-get-one-free
    promotion. If we use our points for two flights, we get another for free—but only
    if we fly within one of the two clusters! Perhaps it’s a better use of our time,
    and certainly our points, to stay in a cluster.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看 DL 网站的常旅客计划时，我们注意到有一个使用两次免费获取一次的促销活动。如果我们用我们的积分买两次机票，我们就能免费再得到一次——但只限于在两个集群内飞行！也许把我们的时间，尤其是我们的积分用在一个集群内是更好的选择。
- en: Summary
  id: totrans-449
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In the last few chapters we’ve provided details on how key graph algorithms
    for pathfinding, centrality, and community detection work in Apache Spark and
    Neo4j. In this chapter we walked through workflows that included using several
    algorithms in context with other tasks and analysis. We used a travel business
    scenario to analyze Yelp data in Neo4j and a personal air travel scenario to evaluate
    US airline data in Spark.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几章中，我们详细介绍了在Apache Spark和Neo4j中用于路径查找、中心性和社区检测的关键图算法的工作原理。在本章中，我们讨论了包括在其他任务和分析背景下使用多种算法的工作流程。我们使用旅行业务场景分析了Neo4j中的Yelp数据，以及使用个人航空旅行场景评估了Spark中的美国航空数据。
- en: 'Next, we’ll look at a use for graph algorithms that’s becoming increasingly
    important: graph-enhanced machine learning.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一个越来越重要的图增强机器学习用途。
