- en: Chapter 9\. Excel Automation
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 9 章：Excel 自动化
- en: So far, we’ve learned how to replace typical Excel tasks with pandas ([Part II](index_split_013.html#filepos433190))
    and how to use Excel files both as a data source as well as a file format for
    your reports ([Part III](index_split_018.html#filepos863198)). This chapter kicks
    off [Part IV](index_split_023.html#filepos1235617), where we switch away from
    manipulating Excel files with the reader and writer packages and begin automating
    the Excel application with xlwings.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何用 pandas 替换典型的 Excel 任务（[第 II 部分](index_split_013.html#filepos433190)），以及如何将
    Excel 文件作为数据源和报告文件格式（[第 III 部分](index_split_018.html#filepos863198)）。本章开启了[第 IV
    部分](index_split_023.html#filepos1235617)，在这一部分中，我们不再使用读者和写者包来操作 Excel 文件，而是开始使用
    xlwings 自动化 Excel 应用程序。
- en: The main use case of xlwings is to build interactive applications where Excel
    spreadsheets act as the user interface, allowing you to call Python by clicking
    a button or calling a user-defined function—that’s the type of functionality that
    isn’t covered by the reader and writer packages. But that doesn’t mean that xlwings
    can’t be used to read and write files, as long as you are on either macOS or Windows
    and have Excel installed. One advantage that xlwings has in this area is the ability
    to truly edit Excel files, in all formats, without changing or losing any of the
    existing content or formatting. Another advantage is that you can read the cell
    values from an Excel workbook without the need to save it first. It can, however,
    also make perfect sense to use an Excel reader/writer package and xlwings together,
    as we will see when we pick up the reporting case study from [Chapter 7](index_split_019.html#filepos863345)
    one more time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings 的主要用途是构建交互式应用程序，其中 Excel 电子表格充当用户界面，允许您通过单击按钮或调用用户定义函数来调用 Python ——
    这种功能不被读取器和写入器包覆盖。但这并不意味着 xlwings 不能用于读写文件，只要您在 macOS 或 Windows 上安装了 Excel。xlwings
    在这方面的一个优势是能够真正编辑 Excel 文件，而不改变或丢失任何现有内容或格式。另一个优势是，您可以从 Excel 工作簿中读取单元格值，而无需先保存它。然而，将
    Excel 读取器/写入器包和 xlwings 结合使用也是完全合理的，正如我们将在[第 7 章](index_split_019.html#filepos863345)的报告案例研究中看到的那样。
- en: 'I’ll start this chapter by introducing you to the Excel object model as well
    as xlwings: we’ll first learn the basics like connecting to a workbook or reading
    and writing cell values before digging a bit deeper to understand how converters
    and options allow us to work with pandas DataFrames and NumPy arrays. We also
    look at how to interact with charts, pictures, and defined names before moving
    on to the last section, which explains how xlwings works under the hood: this
    will give you the required knowledge to make your scripts performant as well as
    work around missing functionality. From this chapter on, you will need to run
    the code samples on either Windows or macOS, as they depend on a local installation
    of Microsoft Excel.[1](index_split_025.html#filepos1437419)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先介绍 Excel 对象模型以及 xlwings：我们将首先学习如何连接工作簿、读写单元格数值等基础知识，然后深入了解转换器和选项是如何允许我们处理
    pandas 数据帧和 NumPy 数组的。我们还将看看如何与图表、图片和定义名称进行交互，然后转向最后一节，解释 xlwings 在幕后的工作原理：这将为您提供所需的知识，使您的脚本性能更高，并解决缺少功能的问题。从本章开始，您需要在
    Windows 或 macOS 上运行代码示例，因为它们依赖于本地安装的 Microsoft Excel。[1](index_split_025.html#filepos1437419)
- en: Getting Started with xlwings
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 xlwings
- en: One goal of xlwings is to serve as a drop-in replacement for VBA, allowing you
    to interact with Excel from Python on Windows and macOS. Since Excel’s grid is
    the perfect layout to display Python’s data structures like nested lists, NumPy
    arrays, and pandas DataFrames, one of xlwings’ core features is to make reading
    and writing them from and to Excel as easy as possible. I’ll start this section
    by introducing you to Excel as a data viewer—this is useful when you are interacting
    with DataFrames in a Jupyter notebook. I’ll then explain the Excel object model
    before exploring it interactively with xlwings. To wrap this section up, I’ll
    show you how to call VBA code that you may still have in legacy workbooks. Since
    xlwings is part of Anaconda, we don’t need to install it manually.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings的一个目标是作为VBA的替代品，允许您在Windows和macOS上从Python与Excel进行交互。由于Excel的网格是显示Python数据结构（如嵌套列表、NumPy数组和pandas
    DataFrame）的理想布局，xlwings的核心特性之一是尽可能地简化从Excel读取和写入这些数据结构。我将从介绍Excel作为数据查看器开始这一节——当您在Jupyter笔记本中与DataFrame交互时，这非常有用。然后我将解释Excel对象模型，然后使用xlwings进行交互式探索。最后，我将向您展示如何调用可能仍在遗留工作簿中的VBA代码。由于xlwings是Anaconda的一部分，我们不需要手动安装它。
- en: Using Excel as Data Viewer
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Excel作为数据查看器
- en: 'You probably noticed in the previous chapters that by default, Jupyter notebooks
    hide the majority of data for bigger DataFrames and only show the top and bottom
    rows as well as the first and last few columns. One way to get a better feeling
    for your data is to plot it—this allows you to spot outliers or other irregularities.
    Sometimes, however, it’s just really helpful to be able to scroll through a data
    table. After reading [Chapter 7](index_split_019.html#filepos863345), you know
    how to use the `to_excel` method on your DataFrame. While this works, it can be
    a bit cumbersome: you need to give the Excel file a name, find it on the file
    system, open it, and, after making changes to your DataFrame, you need to close
    the Excel file and run the whole process again. A better idea may be to run `df.to_clipboard()`,
    which copies the DataFrame `df` to the clipboard, allowing you to paste it into
    Excel, but there is an even simpler way—use the `view` function that comes with
    xlwings:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，您可能已经注意到，默认情况下，Jupyter笔记本会隐藏更大的DataFrame的大部分数据，仅显示顶部和底部的行以及前几列和最后几列。了解数据的更好方法之一是绘制它——这使您能够发现异常值或其他不规则情况。然而，有时，能够滚动查看数据表确实非常有帮助。在阅读[第7章](index_split_019.html#filepos863345)之后，您已经了解如何在DataFrame上使用`to_excel`方法。虽然这样做可以实现，但可能有些繁琐：您需要为Excel文件命名，找到它在文件系统中的位置，打开它，在对DataFrame进行更改后，您需要关闭Excel文件，并重新运行整个过程。更好的方法可能是运行`df.to_clipboard()`，它将DataFrame
    `df`复制到剪贴板，使您可以将其粘贴到Excel中，但更简单的方法是使用xlwings提供的`view`函数：
- en: '`In``[``1``]:``# First, let''s import the packages that we"ll use in this chapter``import``datetime``as``dt``import``xlwings``as``xw``import``pandas``as``pd``import``numpy``as``np`'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``1``]:``# 首先，让我们导入本章将要使用的包``import``datetime``as``dt``import``xlwings``as``xw``import``pandas``as``pd``import``numpy``as``np`'
- en: '`In``[``2``]:``# Let''s create a DataFrame based on pseudorandom numbers and``#
    with enough rows that only the head and tail are shown``df``=``pd``.``DataFrame``(``data``=``np``.``random``.``randn``(``100``,``5``),``columns``=``[``f``"Trial
    {i}"``for``i``in``range``(``1``,``6``)])``df`'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``2``]:``# 让我们创建一个基于伪随机数的DataFrame，并且有足够的行数，以至于只显示头部和尾部``df``=``pd``.``DataFrame``(``data``=``np``.``random``.``randn``(``100``,``5``),``columns``=``[``f``"试验
    {i}"``for``i``in``range``(``1``,``6``)])``df``'
- en: '`Out[2]:      Trial 1   Trial 2   Trial 3   Trial 4   Trial 5         0  -1.313877 
    1.164258 -1.306419 -0.529533 -0.524978         1  -0.854415  0.022859 -0.246443
    -0.229146 -0.005493         2  -0.327510 -0.492201 -1.353566 -1.229236  0.024385
            3  -0.728083 -0.080525  0.628288 -0.382586 -0.590157         4  -1.227684 
    0.498541 -0.266466  0.297261 -1.297985         ..       ...       ...       ...      
    ...       ...         95 -0.903446  1.103650  0.033915  0.336871  0.345999        
    96 -1.354898 -1.290954 -0.738396 -1.102659  0.115076         97 -0.070092 -0.416991
    -0.203445 -0.686915 -1.163205         98 -1.201963  0.471854 -0.458501 -0.357171 
    1.954585         99  1.863610  0.214047 -1.426806  0.751906 -2.338352         
    [100 rows x 5 columns]`'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[2]:      Trial 1   Trial 2   Trial 3   Trial 4   Trial 5         0  -1.313877 
    1.164258 -1.306419 -0.529533 -0.524978         1  -0.854415  0.022859 -0.246443
    -0.229146 -0.005493         2  -0.327510 -0.492201 -1.353566 -1.229236  0.024385
            3  -0.728083 -0.080525  0.628288 -0.382586 -0.590157         4  -1.227684 
    0.498541 -0.266466  0.297261 -1.297985         ..       ...       ...       ...      
    ...       ...         95 -0.903446  1.103650  0.033915  0.336871  0.345999        
    96 -1.354898 -1.290954 -0.738396 -1.102659  0.115076         97 -0.070092 -0.416991
    -0.203445 -0.686915 -1.163205         98 -1.201963  0.471854 -0.458501 -0.357171 
    1.954585         99  1.863610  0.214047 -1.426806  0.751906 -2.338352         
    [100 rows x 5 columns]`'
- en: '`In``[``3``]:``# View the DataFrame in Excel``xw``.``view``(``df``)`'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``3``]:``# 在Excel中查看DataFrame``xw``.``view``(``df``)`'
- en: 'The `view` function accepts all common Python objects, including numbers, strings,
    lists, dictionaries, tuples, NumPy arrays, and pandas DataFrames. By default,
    it opens a new workbook and pastes the object into cell A1 of the first sheet—it
    even adjusts the column widths by using Excel’s AutoFit functionality. Instead
    of opening a new workbook every time, you can also reuse the same one by providing
    the `view` function an xlwings `sheet` object as the second argument: `xw.view(df,
    mysheet)`. How you get access to such a `sheet` object and how it fits into the
    Excel object model is what I will explain next.[2](index_split_025.html#filepos1437838)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`view` 函数接受所有常见的 Python 对象，包括数字、字符串、列表、字典、元组、NumPy 数组和 pandas 数据框。默认情况下，它会打开一个新工作簿，并将对象粘贴到第一个工作表的
    A1 单元格中——甚至可以使用 Excel 的自动调整功能调整列宽。您还可以通过将 xlwings 的 `sheet` 对象作为第二个参数提供给 `view`
    函数，以重复使用同一个工作簿：`xw.view(df, mysheet)`。如何获取这样的 `sheet` 对象以及它如何适配到 Excel 对象模型中，这就是我接下来将要解释的内容。[2](index_split_025.html#filepos1437838)'
- en: 'MACOS: PERMISSIONS AND PREFERENCES'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MACOS：权限和偏好
- en: 'On macOS, make sure to run Jupyter notebooks and VS Code from an Anaconda Prompt
    (i.e., via Terminal) as shown in [Chapter 2](index_split_008.html#filepos96824).
    This ensures that you will be greeted by two pop-ups when you use xlwings for
    the first time: the first one is “Terminal wants access to control System Events”
    and the second one is “Terminal wants access to control Microsoft Excel.” You
    will need to confirm both pop-ups to allow Python to automate Excel. In theory,
    these pop-ups should be triggered by any application from which you run xlwings
    code, but in practice, that’s often not the case, so running them via the Terminal
    will keep you out of trouble. Also, you’ll need to open Excel’s Preferences and
    uncheck “Show Workbook Gallery when opening Excel” under the General category.
    This opens Excel directly on an empty workbook instead of opening the gallery
    first, which would get in your way when you open a new Excel instance via xlwings.'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，请确保从 Anaconda Prompt（即通过终端）运行 Jupyter 笔记本和 VS Code，如 [第 2 章](index_split_008.html#filepos96824)
    所示。这样可以确保第一次使用 xlwings 时会弹出两个弹窗：第一个是“终端想要控制系统事件”，第二个是“终端想要控制 Microsoft Excel”。您需要确认这两个弹窗以允许
    Python 自动化 Excel。理论上，任何从中运行 xlwings 代码的应用程序都应该触发这些弹窗，但实际上，通常并非如此，因此通过终端运行它们可以避免麻烦。此外，您需要打开
    Excel 的偏好设置，并取消“打开 Excel 时显示工作簿库”选项，该选项在“常规”类别下。这样可以直接在空工作簿中打开 Excel，而不是首先打开库，这样当您通过
    xlwings 打开新的 Excel 实例时就不会受到干扰。
- en: The Excel Object Model
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Excel对象模型
- en: 'When you work with Excel programmatically, you interact with its components
    like a workbook or a sheet. These components are organized in the Excel object
    model, a hierarchical structure that represents Excel’s graphical user interface
    (see [Figure 9-1](#filepos1253700)). Microsoft largely uses the same object model
    with all programming languages they officially support, whether that’s VBA, Office
    Scripts (the JavaScript interface for Excel on the web), or C#. In contrast to
    the reader and writer packages from [Chapter 8](index_split_020.html#filepos959867),
    xlwings follows the Excel object model very closely, only with a breath of fresh
    air: for example, xlwings uses the names `app` instead of `application` and `book`
    instead of `workbook`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你以编程方式使用 Excel 时，你会与其组件进行交互，比如工作簿或工作表。这些组件在 Excel 对象模型中组织，这是一个层次结构，代表了 Excel
    的图形用户界面（见[图 9-1](#filepos1253700)）。Microsoft 在所有官方支持的编程语言中基本上使用相同的对象模型，无论是 VBA、Office
    脚本（Excel 在 Web 上的 JavaScript 接口）还是 C#。与第[8章](index_split_020.html#filepos959867)中的读写包相比，xlwings
    非常紧密地遵循了 Excel 对象模型，只是稍微有所创新：例如，xlwings 使用`app`代替`application`，`book`代替`workbook`：
- en: An `app` contains the `books` collection
  id: totrans-17
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个`app`包含`books`集合
- en: A `book` contains the `sheets` collection
  id: totrans-18
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个`book`包含`sheets`集合
- en: A `sheet` gives access to `range` objects and collections such as `charts`
  id: totrans-19
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个`sheet`提供对`range`对象和集合（如`charts`）的访问
- en: A `range` contains one or more contiguous cells as its items
  id: totrans-20
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个`range`包含一个或多个连续的单元格作为其项目
- en: 'The dashed boxes are collections and contain one or more objects of the same
    type. An `app` corresponds to an Excel instance, i.e., an Excel application that
    runs as a separate process. Power users sometimes use multiple Excel instances
    in parallel to open the same workbook twice, for example, to calculate a workbook
    with different inputs in parallel. With the more recent versions of Excel, Microsoft
    made it slightly more complicated to open multiple instances of Excel manually:
    start Excel, then right-click on its icon in the Windows taskbar. In the appearing
    menu, left-click on the Excel entry while holding down the Alt key at the same
    time (make sure to keep the Alt key pressed until after you release your mouse
    button)—a pop-up will ask if you want to start a new instance of Excel. On macOS,
    there is no manual way of launching more than one instance of the same program
    but you can launch multiple Excel instances programmatically via xlwings, as we
    will see later. To summarize, an Excel instance is a sandboxed environment, which
    means that one instance can’t communicate with the other one.[3](index_split_025.html#filepos1438450)
    The `sheet` object gives you access to collections like charts, pictures, and
    defined names—topics that we will look into in the second section of this chapter.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虚线框是集合，包含同一类型的一个或多个对象。一个`app`对应于一个 Excel 实例，即运行为单独进程的 Excel 应用程序。高级用户有时会并行使用多个
    Excel 实例打开同一工作簿，例如，为了并行计算带有不同输入的工作簿。在更近期的 Excel 版本中，Microsoft 稍微增加了手动打开多个 Excel
    实例的复杂性：启动 Excel，然后在 Windows 任务栏中右键单击其图标。在出现的菜单中，同时按住 Alt 键单击 Excel 条目（确保在释放鼠标按钮之后继续按住
    Alt 键）——一个弹出窗口会询问是否要启动新的 Excel 实例。在 macOS 上，没有手动启动多个相同程序实例的方式，但是可以通过 xlwings 在编程方式下启动多个
    Excel 实例，稍后我们将看到。总之，Excel 实例是一个隔离环境，这意味着一个实例无法与另一个实例通信。[3](index_split_025.html#filepos1438450)
    `sheet`对象让您访问诸如图表、图片和定义名称等集合——这些是我们将在本章第二部分中探讨的主题。
- en: '![](images/00006.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00006.jpg)'
- en: Figure 9-1\. The Excel object model as implemented by xlwings (excerpt)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-1\. 由 xlwings 实现的 Excel 对象模型（节选）
- en: LANGUAGE AND REGIONAL SETTINGS
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 语言和区域设置
- en: 'This book is based on the US-English version of Excel. I will occasionally
    refer to default names like “Book1” or “Sheet1,” which will be different if you
    use Excel in another language. For example, “Sheet1” is called “Feuille1” in French
    and “Hoja1” in Spanish. Also, the list separator, which is the separator that
    Excel uses in cell formulas, depends on your settings: I will be using the comma,
    but your version may require a semicolon or another character. For example, instead
    of writing `=SUM(A1, A2)`, you will need to write `=SUMME(A1; A2)` on a computer
    with German regional settings.'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本书基于 Excel 的美国英语版本。我偶尔会提到默认名称如“Book1”或“Sheet1”，如果你使用其他语言的 Excel，则名称会不同。例如，法语中的“Sheet1”称为“Feuille1”，西班牙语中称为“Hoja1”。此外，列表分隔符，即
    Excel 在单元格公式中使用的分隔符，取决于您的设置：我将使用逗号，但您的版本可能需要分号或其他字符。例如，不是写`=SUM(A1, A2)`，而是在具有德国区域设置的计算机上写`=SUMME(A1;
    A2)`。
- en: 'On Windows, if you wanted to change the list separator from a semicolon to
    a comma, you need to change it outside of Excel via your Windows settings: click
    on the Windows start button, search for Settings (or click the cog icon), then
    go to “Time & Language” > “Region & language” > “Additional date, time & regional
    settings” where you finally click on “Region” > “Change location.” Under “List
    separator,” you will be able to change it from a semicolon to a comma. Bear in
    mind that this only works if your “Decimal symbol” (in the same menu) is not also
    a comma. To override the system-wide decimal and thousands separators (but not
    the list separator), in Excel go to “Options” > “Advanced,” where you will find
    the settings under “Editing Options.”'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果您想将列表分隔符从分号更改为逗号，需要在 Excel 之外的 Windows 设置中更改它：点击 Windows 开始按钮，搜索“设置”（或点击齿轮图标），然后转到“时间与语言”
    > “地区与语言” > “附加日期、时间和区域设置”，最后点击“区域” > “更改位置”。在“列表分隔符”下，您将能够将其从分号更改为逗号。请注意，仅当您的“小数符号”（在同一菜单中）不是逗号时，此设置才有效。要覆盖系统范围内的小数和千位分隔符（但不更改列表分隔符），请在
    Excel 中转到“选项” > “高级”，在“编辑选项”下找到相关设置。
- en: 'On macOS, it works similarly, except that you can’t change the list separator
    directly: under System Preferences of your macOS (not Excel), select Language
    & Region. There, set a specific region either globally (under the General tab)
    or specifically for Excel (under the Apps tab).'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，操作类似，不过你无法直接更改列表分隔符：在 macOS 的系统偏好设置（而非 Excel）中，选择“语言与地区”。在那里，为 Excel（在“应用程序”选项卡下）或全局（在“常规”选项卡下）设置特定的地区。
- en: 'To get a feeling for the Excel object model, as usual, it’s best to play around
    with it interactively. Let’s start with the `Book` class: it allows you to create
    new workbooks and connect to existing ones; see [Table 9-1](#filepos1256373) for
    an overview.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要熟悉 Excel 对象模型，通常最好是通过互动方式来操作。让我们从 `Book` 类开始：它允许您创建新工作簿并连接到现有工作簿；参见[表格 9-1](#filepos1256373)以获取概述。
- en: Table 9-1\. Working with Excel workbooks
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 9-1\. 使用 Excel 工作簿
- en: '|  Command  |  Description  |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '|  命令  |  描述  |'
- en: '|   `xw.Book()` |  Returns a  `book` object representing a new Excel workbook
    in the active Excel instance. If there is no active instance, Excel will be started.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '|   `xw.Book()` |  返回一个表示活动 Excel 实例中新 Excel 工作簿的`book`对象。如果没有活动实例，Excel 将会启动。
    |'
- en: '|   `xw.Book("Book1")` |  Returns a  `book` object representing an unsaved
    workbook with the name Book1 (name without file extension). |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '|   `xw.Book("Book1")` |  返回一个表示未保存的名为 Book1 的工作簿的`book`对象（不带文件扩展名）。 |'
- en: '|   `xw.Book("Book1.xlsx")` |  Returns a  `book` object representing a previously
    saved workbook with the name Book1.xlsx (name with file extension). The file has
    to be either open or in the current working directory. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   `xw.Book("Book1.xlsx")` |  返回一个表示已保存的名为 Book1.xlsx 的工作簿的`book`对象（带有文件扩展名）。文件必须是打开的或者在当前工作目录中。
    |'
- en: '|   `xw.Book(r"C:\path\Book1.xlsx")` |  Returns a  `book` object of a previously
    saved workbook (full file path). The file can be open or closed. The leading `r`
    turns the string into a raw string so the backslashes (`\`) of the path are interpreted
    literally on Windows (I introduced raw strings in [Chapter 5](index_split_015.html#filepos482650)).
    On macOS, the `r` isn’t required as file paths use forward slashes instead of
    backslashes. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '|   `xw.Book(r"C:\path\Book1.xlsx")` |  返回一个表示已保存的完整文件路径的工作簿的`book`对象。文件可以是打开的或关闭的。使用前缀
    `r` 将字符串转换为原始字符串，使得 Windows 下的反斜杠（`\`）被直接解释（我在[第五章](index_split_015.html#filepos482650)介绍了原始字符串）。在
    macOS 上，不需要 `r` 前缀，因为文件路径使用正斜杠而不是反斜杠。 |'
- en: '|   `xw.books.active` |  Returns a  `book` object representing the active workbook
    in the active Excel instance. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '|   `xw.books.active` |  返回活动 Excel 实例中活动工作簿的`book`对象。 |'
- en: 'Let’s see how we can walk through the object model hierarchy from the `book`
    object down to the `range` object:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从 `book` 对象逐步遍历对象模型层次结构到 `range` 对象：
- en: '`In``[``4``]:``# Create a new empty workbook and print its name. This is the``#
    book we will use to run most of the code samples in this chapter.``book``=``xw``.``Book``()``book``.``name`'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``4``]:``# 创建一个新的空工作簿并打印其名称。这是我们将在本章中大多数代码示例中使用的`book`。``book``=``xw``.``Book``()``book``.``name`'
- en: '`Out[4]: ''Book2''`'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[4]: ''Book2''`'
- en: '`In``[``5``]:``# Accessing the sheets collection``book``.``sheets`'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``5``]:``# 访问工作表集合``book``.``sheets`'
- en: '`Out[5]: Sheets([<Sheet [Book2]Sheet1>])`'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[5]: Sheets([<Sheet [Book2]Sheet1>])`'
- en: '`In``[``6``]:``# Get a sheet object by index or name. You will need to adjust``#
    "Sheet1" if your sheet is called differently.``sheet1``=``book``.``sheets``[``0``]``sheet1``=``book``.``sheets``[``"Sheet1"``]`'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``6``]:``# 通过索引或名称获取工作表对象。如果您的工作表名称不同，您需要调整`Sheet1`。``sheet1``=``book``.``sheets``[``0``]``sheet1``=``book``.``sheets``[``"Sheet1"``]`'
- en: '`In``[``7``]:``sheet1``.``range``(``"A1"``)`'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``7``]:``sheet1``.``range``(``"A1"``)`'
- en: '`Out[7]: <Range [Book2]Sheet1!$A$1>`'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[7]: <Range [Book2]Sheet1!$A$1>`'
- en: 'With the `range` object, we have arrived at the bottom of the hierarchy. The
    string that gets printed in between angle brackets gives you useful information
    about that object, but to do something, you usually use the object with an attribute,
    as the next sample shows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `range` 对象，我们已经到达了层次结构的底部。尖括号中打印的字符串为您提供有关该对象的有用信息，但通常要使用具有属性的对象，如下一个示例所示：
- en: '`In``[``8``]:``# Most common tasks: write values...``sheet1``.``range``(``"A1"``)``.``value``=``[[``1``,``2``],``[``3``,``4``]]``sheet1``.``range``(``"A4"``)``.``value``=``"Hello!"`'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``8``]:``# 最常见的任务：写入值...``sheet1``.``range``(``"A1"``)``.``value``=``[[``1``,``2``],``[``3``,``4``]]``sheet1``.``range``(``"A4"``)``.``value``=``"Hello!"`'
- en: '`In``[``9``]:``# ...and read values``sheet1``.``range``(``"A1:B2"``)``.``value`'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``9``]:``# ...和读取值``sheet1``.``range``(``"A1:B2"``)``.``value`'
- en: '`Out[9]: [[1.0, 2.0], [3.0, 4.0]]`'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[9]: [[1.0, 2.0], [3.0, 4.0]]`'
- en: '`In``[``10``]:``sheet1``.``range``(``"A4"``)``.``value`'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``10``]:``sheet1``.``range``(``"A4"``)``.``value`'
- en: '`Out[10]: ''Hello!''`'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[10]: ''Hello!''`'
- en: 'As you can see, by default, the `value` attribute of an xlwings `range` object
    accepts and returns a nested list for two-dimensional ranges and a scalar for
    a single cell. Everything we’ve used so far is almost identical to VBA: assuming
    that `book` is a VBA or xlwings workbook object, respectively, this is how you
    access the `value` attribute from cells A1 to B2 in VBA and with xlwings:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，xlwings 的 `range` 对象的 `value` 属性默认接受和返回两维范围的嵌套列表和单个单元格的标量。到目前为止，我们几乎与
    VBA 完全一致：假设 `book` 分别是 VBA 或 xlwings 工作簿对象，这是如何从 A1 到 B2 的单元格访问 `value` 属性的方法：
- en: '`book``.``Sheets``(``1``)``.``Range``(``"A1:B2"``)``.``Value``# VBA``book``.``sheets``[``0``]``.``range``(``"A1:B2"``)``.``value``#
    xlwings`'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`book``.``Sheets``(``1``)``.``Range``(``"A1:B2"``)``.``Value``# VBA``book``.``sheets``[``0``]``.``range``(``"A1:B2"``)``.``value``#
    xlwings`'
- en: 'The differences are:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 差异在于：
- en: Attributes
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 属性
- en: Python uses lowercase letters, potentially with underscores as suggested by
    PEP 8, Python’s style guide that I introduced in [Chapter 3](index_split_010.html#filepos178328).
  id: totrans-54
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 使用小写字母，可能带有下划线，如 PEP 8 所建议的 Python 样式指南，我在 [第 3 章](index_split_010.html#filepos178328)
    中介绍过。
- en: Indexing
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 索引
- en: Python uses square brackets and zero-based indices to access an element in the
    `sheets` collection.
  id: totrans-56
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 使用方括号和从零开始的索引来访问 `sheets` 集合中的元素。
- en: '[Table 9-2](#filepos1273710) gives you an overview of the strings that an xlwings
    `range` accepts.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 9-2](#filepos1273710) 提供了 xlwings `range` 接受的字符串的概述。'
- en: Table 9-2\. Strings to define a range in A1 notation
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-2\. 使用 A1 表示法定义范围的字符串
- en: '|  Reference  |  Description  |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|  引用  |  描述  |'
- en: '|   `"A1"` |  A Single Cell  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|   `"A1"` |  单个单元格  |'
- en: '|   `"A1:B2"` |  Cells from A1 to B2  |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|   `"A1:B2"` |  从 A1 到 B2 的单元格  |'
- en: '|   `"A:A"` |  Column A  |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|   `"A:A"` |  A 列  |'
- en: '|   `"A:B"` |  Columns A to B  |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|   `"A:B"` |  A 到 B 列  |'
- en: '|   `"1:1"` |  Row 1  |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|   `"1:1"` |  第 1 行  |'
- en: '|   `"1:2"` |  Rows 1 to 2  |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '|   `"1:2"` |  1 到 2 行  |'
- en: 'Indexing and slicing work with xlwings `range` objects—watch the address in
    between angle brackets (the printed object representation) to see what cell range
    you end up with:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 索引和切片适用于 xlwings 的 `range` 对象 — 注意尖括号中的地址（打印的对象表示）以查看您最终使用的单元格范围：
- en: '`In``[``11``]:``# Indexing``sheet1``.``range``(``"A1:B2"``)[``0``,``0``]`'
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``11``]:``# 索引``sheet1``.``range``(``"A1:B2"``)[``0``,``0``]`'
- en: '`Out[11]: <Range [Book2]Sheet1!$A$1>`'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[11]: <Range [Book2]Sheet1!$A$1>`'
- en: '`In``[``12``]:``# Slicing``sheet1``.``range``(``"A1:B2"``)[:,``1``]`'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``12``]:``# 切片``sheet1``.``range``(``"A1:B2"``)[:,``1``]`'
- en: '`Out[12]: <Range [Book2]Sheet1!$B$1:$B$2>`'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[12]: <Range [Book2]Sheet1!$B$1:$B$2>`'
- en: 'Indexing corresponds to using the `Cells` property in VBA:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 索引对应于在 VBA 中使用 `Cells` 属性：
- en: '`book``.``Sheets``(``1``)``.``Range``(``"A1:B2"``)``.``Cells``(``1``,``1``)``#
    VBA``book``.``sheets``[``0``]``.``range``(``"A1:B2"``)[``0``,``0``]``# xlwings`'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`book``.``Sheets``(``1``)``.``Range``(``"A1:B2"``)``.``Cells``(``1``,``1``)``#
    VBA``book``.``sheets``[``0``]``.``range``(``"A1:B2"``)[``0``,``0``]``# xlwings`'
- en: 'Instead of using `range` explicitly as an attribute of the `sheet` object,
    you can also get a `range` object by indexing and slicing the `sheet` object.
    Using this with A1 notation will allow you to type less, and using this with integer
    indices makes the Excel sheet feel like a NumPy array:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 相反地，您也可以通过索引和切片`sheet`对象来获取`range`对象，而不是显式地使用`range`作为`sheet`对象的属性。使用A1表示法可以减少输入，使用整数索引可以使Excel工作表感觉像NumPy数组：
- en: '`In``[``13``]:``# Single cell: A1 notation``sheet1``[``"A1"``]`'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``13``]:``# 单个单元格：A1表示法``sheet1``[``"A1"``]`'
- en: '`Out[13]: <Range [Book2]Sheet1!$A$1>`'
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[13]: <Range [Book2]Sheet1!$A$1>`'
- en: '`In``[``14``]:``# Multiple cells: A1 notation``sheet1``[``"A1:B2"``]`'
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``14``]:``# 多个单元格：A1表示法``sheet1``[``"A1:B2"``]`'
- en: '`Out[14]: <Range [Book2]Sheet1!$A$1:$B$2>`'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[14]: <Range [Book2]Sheet1!$A$1:$B$2>`'
- en: '`In``[``15``]:``# Single cell: indexing``sheet1``[``0``,``0``]`'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``15``]:``# 单个单元格：索引``sheet1``[``0``,``0``]`'
- en: '`Out[15]: <Range [Book2]Sheet1!$A$1>`'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[15]: <Range [Book2]Sheet1!$A$1>`'
- en: '`In``[``16``]:``# Multiple cells: slicing``sheet1``[:``2``,``:``2``]`'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``16``]:``# 多个单元格：切片``sheet1``[:``2``,``:``2``]`'
- en: '`Out[16]: <Range [Book2]Sheet1!$A$1:$B$2>`'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[16]: <Range [Book2]Sheet1!$A$1:$B$2>`'
- en: 'Sometimes, however, it may be more intuitive to define a range by referring
    to the top-left and bottom-right cell of a range. The following samples refer
    to the cell ranges D10 and D10:F11, respectively, allowing you to understand the
    difference between indexing/slicing a `sheet` object and working with a `range`
    object:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，通过引用范围的左上角和右下角单元格来定义范围可能更直观。下面的示例分别引用了单元格范围D10和D10:F11，使您可以理解索引/切片`sheet`对象与处理`range`对象之间的区别：
- en: '`In``[``17``]:``# D10 via sheet indexing``sheet1``[``9``,``3``]`'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``17``]:``# 通过工作表索引访问D10``sheet1``[``9``,``3``]`'
- en: '`Out[17]: <Range [Book2]Sheet1!$D$10>`'
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[17]: <Range [Book2]Sheet1!$D$10>`'
- en: '`In``[``18``]:``# D10 via range object``sheet1``.``range``((``10``,``4``))`'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``18``]:``# 通过range对象访问D10``sheet1``.``range``((``10``,``4``))`'
- en: '`Out[18]: <Range [Book2]Sheet1!$D$10>`'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[18]: <Range [Book2]Sheet1!$D$10>`'
- en: '`In``[``19``]:``# D10:F11 via sheet slicing``sheet1``[``9``:``11``,``3``:``6``]`'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``19``]:``# 通过sheet切片访问D10:F11``sheet1``[``9``:``11``,``3``:``6``]`'
- en: '`Out[19]: <Range [Book2]Sheet1!$D$10:$F$11>`'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[19]: <Range [Book2]Sheet1!$D$10:$F$11>`'
- en: '`In``[``20``]:``# D10:F11 via range object``sheet1``.``range``((``10``,``4``),``(``11``,``6``))`'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``20``]:``# 通过range对象访问D10:F11``sheet1``.``range``((``10``,``4``),``(``11``,``6``))`'
- en: '`Out[20]: <Range [Book2]Sheet1!$D$10:$F$11>`'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[20]: <Range [Book2]Sheet1!$D$10:$F$11>`'
- en: 'Defining `range` objects with tuples is very similar to how the `Cells` property
    works in VBA, as the following comparison shows—this assumes again that `book`
    is either a VBA workbook object or an xlwings `book` object. Let’s first look
    at the VBA version:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用元组定义`range`对象与VBA中的`Cells`属性非常相似，如下面的比较所示——假设`book`再次是VBA工作簿对象或xlwings的`book`对象。让我们首先看看VBA版本：
- en: '`With``book``.``Sheets``(``1``)``myrange``=``.``Range``(.``Cells``(``10``,``4``),``.``Cells``(``11``,``6``))``End``With`'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`With``book``.``Sheets``(``1``)``myrange``=``.``Range``(.``Cells``(``10``,``4``),``.``Cells``(``11``,``6``))``End``With`'
- en: 'This is equivalent to the following xlwings expression:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下xlwings表达式等效：
- en: '`myrange``=``book``.``sheets``[``0``]``.``range``((``10``,``4``),``(``11``,``6``))`'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myrange``=``book``.``sheets``[``0``]``.``range``((``10``,``4``),``(``11``,``6``))`'
- en: ZERO VS. ONE-BASED INDICES
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 零索引与一索引
- en: As a Python package, xlwings consistently uses zero-based indexing whenever
    you access elements via Python’s index or slice syntax, i.e., via square brackets.
    xlwings `range` objects, however, use Excel’s one-based row and column indices.
    Having the same row/column indices as Excel’s user interface may sometimes be
    beneficial. If you prefer to only ever use Python’s zero-based indexing, simply
    use the `sheet[row_selection, column_selection]` syntax.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为Python包，xlwings在通过Python的索引或切片语法访问元素时始终使用零索引。然而，xlwings的`range`对象使用Excel的一索引行和列索引。与Excel用户界面具有相同的行/列索引有时可能是有益的。如果您希望仅使用Python的零索引，请简单地使用`sheet[row_selection,
    column_selection]`语法。
- en: 'The following sample shows you how to get from a `range` object (`sheet1["A1"]`)
    all the way up again to the `app` object. Remember that the `app` object represents
    an Excel instance (the output in between angle brackets represents Excel’s process
    ID and will therefore be different on your machine):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例向您展示如何从`range`对象(`sheet1["A1"]`)获取到`app`对象。请记住，`app`对象代表一个Excel实例（尖括号中的输出表示Excel的进程ID，因此在您的机器上可能会有所不同）：
- en: '`In``[``21``]:``sheet1``[``"A1"``]``.``sheet``.``book``.``app`'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``21``]:``sheet1``[``"A1"``]``.``sheet``.``book``.``app`'
- en: '`Out[21]: <Excel App 9092>`'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[21]: <Excel App 9092>`'
- en: 'Having arrived at the very top of the Excel object model, it’s a good moment
    to see how you can work with multiple Excel instances. You will need to use the
    `app` object explicitly if you want to open the same workbook in multiple Excel
    instances or if you specifically want to distribute your workbooks across different
    instances for performance reasons. Another common use case for working with an
    `app` object is to open your workbook in a hidden Excel instance: this allows
    you to run an xlwings script in the background without blocking you from doing
    other work in Excel in the meantime:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 已经到达Excel对象模型的顶端，现在是时候看看如何处理多个Excel实例了。如果您想在多个Excel实例中打开相同的工作簿，或者特别是出于性能原因希望在不同实例中分配您的工作簿，那么您需要明确使用`app`对象。使用`app`对象的另一个常见用例是在隐藏的Excel实例中打开工作簿：这使得您可以在后台运行xlwings脚本，同时又不会阻碍您在Excel中进行其他工作：
- en: '`In``[``22``]:``# Get one app object from the open workbook``# and create an
    additional invisible app instance``visible_app``=``sheet1``.``book``.``app``invisible_app``=``xw``.``App``(``visible``=``False``)`'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``22``]:``# 从打开的工作簿获取一个应用对象``# 并创建一个额外的不可见应用实例``visible_app``=``sheet1``.``book``.``app``invisible_app``=``xw``.``App``(``visible``=``False``)`'
- en: '`In``[``23``]:``# List the book names that are open in each instance``# by
    using a list comprehension``[``book``.``name``for``book``in``visible_app``.``books``]`'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``23``]:``# 使用列表推导列出每个实例中打开的书名``[``visible_app``.``books``中的`book.name`]'
- en: '`Out[23]: [''Book1'', ''Book2'']`'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[23]: [''Book1'', ''Book2'']`'
- en: '`In``[``24``]:``[``book``.``name``for``book``in``invisible_app``.``books``]`'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``24``]:``[``invisible_app``.``books``中的`book.name`]'
- en: '`Out[24]: [''Book3'']`'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[24]: [''Book3'']`'
- en: '`In``[``25``]:``# An app key represents the process ID (PID)``xw``.``apps``.``keys``()`'
  id: totrans-106
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``25``]:``# 应用密钥表示进程ID（PID）``xw``.``apps``.``keys``()``'
- en: '`Out[25]: [5996, 9092]`'
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[25]: [5996, 9092]`'
- en: '`In``[``26``]:``# It can also be accessed via the pid attribute``xw``.``apps``.``active``.``pid`'
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``26``]:``# 也可以通过pid属性访问``xw``.``apps``.``active``.``pid``'
- en: '`Out[26]: 5996`'
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[26]: 5996`'
- en: '`In``[``27``]:``# Work with the book in the invisible Excel instance``invisible_book``=``invisible_app``.``books``[``0``]``invisible_book``.``sheets``[``0``][``"A1"``]``.``value``=``"Created
    by an invisible app."`'
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``27``]:``# 在不可见的Excel实例中处理工作簿``invisible_book``=``invisible_app``.``books``[``0``]``invisible_book``.``sheets``[``0``][``"A1"``]``.``value``=``"由不可见应用程序创建。"``'
- en: '`In``[``28``]:``# Save the Excel workbook in the xl directory``invisible_book``.``save``(``"xl/invisible.xlsx"``)`'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``28``]:``# 将Excel工作簿保存在xl目录中``invisible_book``.``save``(``"xl/invisible.xlsx"``)`'
- en: '`In``[``29``]:``# Quit the invisible Excel instance``invisible_app``.``quit``()`'
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``29``]:``# 退出不可见的Excel实例``invisible_app``.``quit``()`'
- en: 'MACOS: ACCESSING THE FILE SYSTEM PROGRAMMATICALLY'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MACOS：以编程方式访问文件系统
- en: If you run the `save` command on macOS, you will get a Grant File Access pop-up
    in Excel that you will need to confirm by clicking the Select button before clicking
    on Grant Access. On macOS, Excel is sandboxed, which means that your program can
    only access files and folders outside of the Excel app by confirming this prompt.
    Once confirmed, Excel will remember the locations and won’t bug you again when
    you run the script the next time.
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您在macOS上运行`save`命令，Excel会弹出授权文件访问的提示窗口，您需要点击“选择”按钮确认，然后再点击“授权访问”。在macOS上，Excel是沙盒化的，这意味着您的程序只能通过确认此提示才能访问Excel应用程序外的文件和文件夹。确认后，Excel将记住位置，在下次运行脚本时再次运行时不会再打扰您。
- en: If you have the same workbook open in two instances of Excel or if you want
    to specify in which Excel instance you want to open a workbook, you can’t use
    `xw.Book` anymore. Instead, you need to use the `books` collection as laid out
    in [Table 9-3](#filepos1310515). Note that `myapp` stands for an xlwings `app`
    object. If you would replace `myapp.books` with `xw.books` instead, xlwings will
    use the active `app`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在两个Excel实例中打开相同的工作簿，或者想要指定在哪个Excel实例中打开工作簿，就不能再使用`xw.Book`了。相反，您需要使用在[表 9-3](#filepos1310515)中描述的`books`集合。请注意，`myapp`代表一个xlwings的`app`对象。如果您用`xw.books`替换`myapp.books`，xlwings将使用活动的`app`。
- en: Table 9-3\. Working with the `books` collection
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-3\. 使用`books`集合操作
- en: '|  Command  |  Description  |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '|  命令  |  描述  |'
- en: '|   `myapp.books.add()` |  Creates a new Excel workbook in the Excel instance
    that  `myapp` refers to and returns the corresponding `book` object. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '|   `myapp.books.add()` |  在`myapp`所引用的Excel实例中创建一个新的Excel工作簿，并返回相应的`book`对象。
    |'
- en: '|   `myapp.books.open(r"C:\path\Book.xlsx")` |  Returns the  `book` if it’s
    already open, otherwise opens it first in the Excel instance that `myapp` refers
    to. Remember that the leading `r` turns the file path into a raw string to interpret
    the backslashes literally. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '|   `myapp.books.open(r"C:\path\Book.xlsx")` |  如果该书已打开，则返回`book`，否则首先在`myapp`引用的Excel实例中打开。请记住，前导的`r`将文件路径转换为原始字符串，以字面上的方式解释反斜杠。
    |'
- en: '|   `myapp.books["Book1.xlsx"]` |  Returns the  `book` object if it’s open.
    This will raise a `KeyError` if it isn’t open yet. Make sure to use the name and
    not the full path. Use this if you need to know if a workbook is already open
    in Excel. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '|   `myapp.books["Book1.xlsx"]` |  如果该书已打开，则返回`book`对象。如果尚未打开，则会引发`KeyError`。如果你需要知道工作簿在Excel中是否已打开，请使用这个。请确保使用名称而不是完整路径。
    |'
- en: 'Before we dive deeper into how xlwings can replace your VBA macros, let’s see
    how xlwings can interact with your existing VBA code: this can be useful if you
    have a lot of legacy code and don’t have the time to migrate everything to Python.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨xlwings如何替代你的VBA宏之前，让我们看看xlwings如何与你现有的VBA代码交互：如果你有大量的遗留代码，没有时间将所有内容迁移到Python，这可能非常有用。
- en: Running VBA Code
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行VBA代码
- en: 'If you have legacy Excel projects with lots of VBA code, it may be a lot of
    work to migrate everything to Python. In that case, you can use Python to run
    your VBA macros. The following sample uses the vba.xlsm file that you will find
    in the xl folder of the companion repo. It contains the following code in Module1:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有大量的带有VBA代码的遗留Excel项目，将所有内容迁移到Python可能需要很多工作。在这种情况下，你可以使用Python来运行你的VBA宏。下面的示例使用了伴随库的xl文件夹中的vba.xlsm文件。它在Module1中包含以下代码：
- en: '`Function``MySum``(``x``As``Double``,``y``As``Double``)``As``Double``MySum``=``x``+``y``End``Function`'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Function``MySum``(``x``As``Double``,``y``As``Double``)``As``Double``MySum``=``x``+``y``End``Function`'
- en: '`Sub``ShowMsgBox``(``msg``As``String``)``MsgBox``msg``End``Sub`'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Sub``ShowMsgBox``(``msg``As``String``)``MsgBox``msg``End``Sub`'
- en: 'To call these functions via Python, you first need to instantiate an xlwings
    `macro` object that you subsequently call, making it feel as if it was a native
    Python function:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过Python调用这些函数，你首先需要实例化一个xlwings `macro`对象，然后调用它，使其感觉像是本地Python函数：
- en: '`In``[``30``]:``vba_book``=``xw``.``Book``(``"xl/vba.xlsm"``)`'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``30``]:``vba_book``=``xw``.``Book``(``"xl/vba.xlsm"``)`'
- en: '`In``[``31``]:``# Instantiate a macro object with the VBA function``mysum``=``vba_book``.``macro``(``"Module1.MySum"``)``#
    Call a VBA function``mysum``(``5``,``4``)`'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``31``]:``# 用VBA函数实例化宏对象``mysum``=``vba_book``.``macro``(``"Module1.MySum"``)``#
    调用VBA函数``mysum``(``5``,``4``)`'
- en: '`Out[31]: 9.0`'
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[31]: 9.0`'
- en: '`In``[``32``]:``# It works the same with a VBA Sub procedure``show_msgbox``=``vba_book``.``macro``(``"Module1.ShowMsgBox"``)``show_msgbox``(``"Hello
    xlwings!"``)`'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``32``]:``# 使用VBA Sub过程同样有效``show_msgbox``=``vba_book``.``macro``(``"Module1.ShowMsgBox"``)``show_msgbox``(``"Hello
    xlwings!"``)`'
- en: '`In``[``33``]:``# Close the book again (make sure to close the MessageBox first)``vba_book``.``close``()`'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``33``]:``# 再次关闭该书（确保先关闭MessageBox）``vba_book``.``close``()`'
- en: DON’T STORE VBA FUNCTIONS IN SHEET AND THISWORKBOOK MODULES
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不要将VBA函数存储在工作表和此工作簿模块中
- en: If you store the VBA function `MySum` in the workbook module `ThisWorkbook`
    or a sheet module (e.g., `Sheet1`), you have to refer to it as `ThisWorkbook.MySum`
    or `Sheet1.MySum`. However, you won’t be able to access the function’s return
    value from Python, so make sure to store VBA functions in a standard VBA code
    module that you insert by right-clicking on the Modules folder in the VBA editor.
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你将VBA函数`MySum`存储在工作簿模块`ThisWorkbook`或工作表模块（例如`Sheet1`）中，你必须将其称为`ThisWorkbook.MySum`或`Sheet1.MySum`。然而，你将无法从Python访问函数的返回值，所以请确保将VBA函数存储在通过在VBA编辑器中右键单击模块文件夹插入的标准VBA代码模块中。
- en: Now that you know how to interact with existing VBA code, we can continue our
    exploration of xlwings by looking at how to use it with DataFrames, NumPy arrays,
    and collections like charts, pictures, and defined names.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何与现有的VBA代码交互了，我们可以继续探索xlwings的使用方法，看看如何与数据框、NumPy数组和图表、图片以及已定义名称等集合一起使用它。
- en: Converters, Options, and Collections
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 转换器、选项和集合
- en: In the introductory code samples of this chapter, we were already reading and
    writing a string and a nested list from and to Excel by using the `value` attribute
    of an xlwings `range` object. I’ll start this section by showing you how this
    works with pandas DataFrames before having a closer look at the `options` method
    that allows us to influence how xlwings reads and writes values. We move on with
    charts, pictures, and defined names, the collections that you usually access from
    a `sheet` object. Armed with these xlwings basics, we’ll have another look at
    the reporting case study from [Chapter 7](index_split_019.html#filepos863345).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍性代码示例中，我们已经通过使用 xlwings 的 `range` 对象的 `value` 属性来读取和写入 Excel 中的字符串和嵌套列表。在深入研究允许我们影响
    xlwings 读取和写入值的 `options` 方法之前，我将向您展示如何使用 pandas DataFrames 进行操作。我们继续处理图表、图片和已定义名称，这些通常可以从
    `sheet` 对象访问。掌握这些 xlwings 基础知识后，我们将再次审视第 [7 章](index_split_019.html#filepos863345)
    中的报告案例。
- en: Working with DataFrames
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 处理数据框
- en: 'Writing a DataFrame to Excel is no different from writing a scalar or a nested
    list to Excel: simply assign the DataFrame to the top-left cell of an Excel range:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据框写入 Excel 与将标量或嵌套列表写入 Excel 没有任何区别：只需将数据框分配给 Excel 范围的左上角单元格：
- en: '`In``[``34``]:``data``=``[[``"Mark"``,``55``,``"Italy"``,``4.5``,``"Europe"``],``[``"John"``,``33``,``"USA"``,``6.7``,``"America"``]]``df``=``pd``.``DataFrame``(``data``=``data``,``columns``=``[``"name"``,``"age"``,``"country"``,``"score"``,``"continent"``],``index``=``[``1001``,``1000``])``df``.``index``.``name``=``"user_id"``df`'
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``34``]:``data``=``[[``"Mark"``,``55``,``"Italy"``,``4.5``,``"Europe"``],``[``"John"``,``33``,``"USA"``,``6.7``,``"America"``]]``df``=``pd``.``DataFrame``(``data``=``data``,``columns``=``[``"name"``,``"age"``,``"country"``,``"score"``,``"continent"``],``index``=``[``1001``,``1000``])``df``.``index``.``name``=``"user_id"``df`'
- en: '`Out[34]:          name  age country  score continent          user_id         
    1001     Mark   55   Italy    4.5    Europe          1000     John   33     USA   
    6.7   America`'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[34]:          name  age country  score continent          user_id         
    1001     Mark   55   Italy    4.5    Europe          1000     John   33     USA   
    6.7   America`'
- en: '`In``[``35``]:``sheet1``[``"A6"``]``.``value``=``df`'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``35``]:``sheet1``[``"A6"``]``.``value``=``df`'
- en: 'If, however, you would like to suppress the column headers and/or the index,
    use the `options` method like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想抑制列标题和/或索引，则使用以下`options`方法：
- en: '`In``[``36``]:``sheet1``[``"B10"``]``.``options``(``header``=``False``,``index``=``False``)``.``value``=``df`'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``36``]:``sheet1``[``"B10"``]``.``options``(``header``=``False``,``index``=``False``)``.``value``=``df`'
- en: Reading Excel ranges as DataFrames requires you to provide the `DataFrame` class
    as the `convert` parameter in the `options` method. By default, it expects that
    your data has both a header and index, but you can again use the `index` and `header`
    parameters to change this. Instead of using the converter, you could also read
    in the values first as a nested list and then manually construct your DataFrame,
    but using the converter makes it quite a bit easier to handle the index and header.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Excel 范围作为数据框读取要求您在 `options` 方法中将 `DataFrame` 类作为 `convert` 参数提供。默认情况下，它期望您的数据具有标题和索引，但您可以再次使用
    `index` 和 `header` 参数进行更改。而不是使用转换器，您还可以首先将值读取为嵌套列表，然后手动构建数据框，但使用转换器可以更轻松地处理索引和标题。
- en: THE EXPAND METHOD
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: THE EXPAND METHOD
- en: In the following code sample, I am introducing the `expand` method that makes
    it easy to read a contiguous block of cells, delivering the same range as if you
    were doing Shift+Ctrl+Down-Arrow+Right-Arrow in Excel, except that `expand` jumps
    over an empty cell in the top-left corner.
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我将介绍 `expand` 方法，该方法使得读取一个连续的单元格块变得简单，提供与在 Excel 中执行 Shift+Ctrl+Down-Arrow+Right-Arrow
    相同的范围，不同之处在于 `expand` 会跳过左上角的空单元格。
- en: '`In``[``37``]:``df2``=``sheet1``[``"A6"``]``.``expand``()``.``options``(``pd``.``DataFrame``)``.``value``df2`'
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``37``]:``df2``=``sheet1``[``"A6"``]``.``expand``()``.``options``(``pd``.``DataFrame``)``.``value``df2`'
- en: '`Out[37]:          name   age country  score continent          user_id         
    1001.0   Mark  55.0   Italy    4.5    Europe          1000.0   John  33.0    
    USA    6.7   America`'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[37]:          name   age country  score continent          user_id         
    1001.0   Mark  55.0   Italy    4.5    Europe          1000.0   John  33.0    
    USA    6.7   America`'
- en: '`In``[``38``]:``# If you want the index to be an integer index,``# you can
    change its data type``df2``.``index``=``df2``.``index``.``astype``(``int``)``df2`'
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``38``]:``# 如果您希望索引是整数索引，则可以更改其数据类型``df2``.``index``=``df2``.``index``.``astype``(``int``)``df2`'
- en: '`Out[38]:       name   age country  score continent          1001  Mark  55.0  
    Italy    4.5    Europe          1000  John  33.0     USA    6.7   America`'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[38]:       name   age country  score continent          1001  Mark  55.0  
    Italy    4.5    Europe          1000  John  33.0     USA    6.7   America`'
- en: '`In``[``39``]:``# By setting index=False, it will put all the values from Excel
    into``# the data part of the DataFrame and will use the default index``sheet1``[``"A6"``]``.``expand``()``.``options``(``pd``.``DataFrame``,``index``=``False``)``.``value`'
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``39``]:``# 通过设置 index=False，它将把所有从 Excel 中获取的值放入 DataFrame 的数据部分，并使用默认索引``sheet1``[``"A6"``]``.``expand``()``.``options``(``pd``.``DataFrame``,``index``=``False``)``.``value`'
- en: '`Out[39]:    user_id  name   age country  score continent          0   1001.0 
    Mark  55.0   Italy    4.5    Europe          1   1000.0  John  33.0     USA   
    6.7   America`'
  id: totrans-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[39]:    user_id  name   age country  score continent          0   1001.0 
    Mark  55.0   Italy    4.5    Europe          1   1000.0  John  33.0     USA   
    6.7   America`'
- en: Reading and writing DataFrames was a first example of how converters and options
    work. How they are formally defined and how you use them with other data structures
    is what we will look into next.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 读取和写入 DataFrame 是转换器和选项如何工作的第一个示例。接下来我们将看一下它们是如何正式定义以及如何在其他数据结构中使用的。
- en: Converters and Options
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 转换器和选项
- en: 'As we have just seen, the `options` method of the xlwings `range` object allows
    you to influence the way that values are read and written from and to Excel. That
    is, `options` are only evaluated when you call the `value` attribute on a `range`
    object. The syntax is as follows (`myrange` is an xlwings `range` object):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才所看到的，xlwings `range` 对象的 `options` 方法允许您影响从Excel读取和写入值的方式。也就是说，只有在调用 `range`
    对象的 `value` 属性时才会评估 `options`。语法如下（`myrange` 是一个 xlwings 的 `range` 对象）：
- en: '`myrange``.``options``(``convert``=``None``,``option1``=``value1``,``option2``=``value2``,``...``)``.``value`'
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myrange``.``options``(``convert``=``None``,``option1``=``value1``,``option2``=``value2``,``...``)``.``value`'
- en: '[Table 9-4](#filepos1343026) shows the built-in converters, i.e., the values
    that the `convert` argument accepts. They are called built-in as xlwings offers
    a way to write your own converters, which could be useful if you have to repeatedly
    apply additional transformations before writing or after reading values—to see
    how it works, have a look at the [xlwings docs](https://oreil.ly/Ruw8v).'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 9-4](#filepos1343026) 显示了内置转换器，即 `convert` 参数接受的值。它们被称为内置，因为 xlwings 提供了一种方法来编写自己的转换器，如果需要重复应用额外的转换（例如在写入或读取值之前）时，这将非常有用——要了解它的工作原理，请参阅
    [xlwings 文档](https://oreil.ly/Ruw8v)。'
- en: Table 9-4\. Built-in converters
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-4\. 内置转换器
- en: '|  Converter  |  Description  |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '|  转换器  |  描述  |'
- en: '|   `dict` |  Simple dictionaries without nesting, i.e., in the form  `{key1:
    value1, key2: value2, ...}` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|   `dict` |  简单的无嵌套字典，即 `{key1: value1, key2: value2, ...}` 的形式 |'
- en: '|   `np.array` |  NumPy arrays, requires  `import numpy as np` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '|   `np.array` |  NumPy 数组，需要  `import numpy as np` |'
- en: '|   `pd.Series` |  pandas Series, requires  `import pandas as pd` |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '|   `pd.Series` |  pandas Series，需要  `import pandas as pd` |'
- en: '|   `pd.DataFrame` |  pandas DataFrame, requires  `import pandas as pd` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '|   `pd.DataFrame` |  pandas DataFrame，需要  `import pandas as pd` |'
- en: We have already used the `index` and `header` options with the DataFrame example,
    but there are more options available, as shown in [Table 9-5](#filepos1345335).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 DataFrame 示例中使用了 `index` 和 `header` 选项，但还有更多的选项可用，如 [表 9-5](#filepos1345335)
    所示。
- en: Table 9-5\. Built-in options
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9-5\. 内置选项
- en: '|  Option  |  Description  |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '|  选项  |  描述  |'
- en: '|   `empty` |  By default, empty cells are read as  `None`. Change this by
    providing a value for `empty`. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '|   `empty` |  默认情况下，空单元格被读取为  `None`。通过为 `empty` 提供值来更改这一点。 |'
- en: '|   `date` |  Accepts a function that is applied to values from date-formatted
    cells.  |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '|   `date` |  接受应用于日期格式单元格值的函数。  |'
- en: '|   `number` |  Accepts a function that is applied to numbers.  |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '|   `number` |  接受应用于数字的函数。  |'
- en: '|   `ndim` |   Number of dimensions: when reading, use `ndim` to force the
    values of a range to arrive in a certain dimensionality. Must be either `None`,
    `1`, or `2`. Can be used when reading values as lists or NumPy arrays. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '|   `ndim` |   维度数：在读取时，使用 `ndim` 强制将范围的值按特定维度到达。必须是 `None`、`1` 或 `2`。在读取值作为列表或
    NumPy 数组时可用。 |'
- en: '|   `transpose` |  Transposes the values, i.e., turns the columns into rows
    or vice versa.  |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '|   `transpose` |  转置值，即将列转换为行或反之。  |'
- en: '|   `index` |  To be used with pandas DataFrames and Series: when reading,
    use it to define whether the Excel range contains the index. Can be  `True`/`False`
    or an integer. The integer defines how many columns should be turned into a `MultiIndex`.
    For example, `2` will use the two left-most columns as index. When writing, you
    can decide if you want to write out the index by setting `index` to `True` or
    `False`. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '|   `index` |  用于pandas的DataFrame和Series：在读取时，用于定义Excel范围是否包含索引。可以是`True`/`False`或整数。整数定义将多少列转换为`MultiIndex`。例如，`2`将使用最左边的两列作为索引。在写入时，可以通过将`index`设置为`True`或`False`来决定是否写出索引。
    |'
- en: '|   `header` |  Works the same as  `index`, but applied to the column headers.
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '|   `header` |  与`index`相同，但应用于列标题。 |'
- en: 'Let’s have a closer look at `ndim`: by default, when you read in a single cell
    from Excel, you will get a scalar (e.g., a float or a string); when you read in
    a column or row, you will get a simple list; and finally, when you read in a two-dimensional
    range, you will get a nested (i.e., two-dimensional) list. This is not only consistent
    in itself, but it is also equivalent to how slicing works with NumPy arrays, as
    seen in [Chapter 4](index_split_014.html#filepos433313). The one-dimensional case
    is a special one: sometimes, a column may just be an edge case of what is otherwise
    a two-dimensional range. In this case, it makes sense to force a range to always
    arrive as a two-dimensional list by using `ndim=2`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`ndim`：默认情况下，从Excel读取单个单元格时，您会得到一个标量（例如，浮点数或字符串）；当从列或行读取时，您会得到一个简单的列表；最后，当从二维范围读取时，您会得到一个嵌套的（即二维的）列表。这不仅在自身上是一致的，而且等同于NumPy数组中切片的工作方式，正如在[第4章](index_split_014.html#filepos433313)中所见。一维情况是特例：有时，列可能只是否则是二维范围的边缘案例。在这种情况下，通过使用`ndim=2`强制范围始终以二维列表形式到达是有意义的：
- en: '`In``[``40``]:``# Horizontal range (one-dimensional)``sheet1``[``"A1:B1"``]``.``value`'
  id: totrans-175
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``40``]:``# 水平范围（一维）``sheet1``[``"A1:B1"``]``.``value`'
- en: '`Out[40]: [1.0, 2.0]`'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[40]: [1.0, 2.0]`'
- en: '`In``[``41``]:``# Vertical range (one-dimensional)``sheet1``[``"A1:A2"``]``.``value`'
  id: totrans-177
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``41``]:``# 垂直范围（一维）``sheet1``[``"A1:A2"``]``.``value`'
- en: '`Out[41]: [1.0, 3.0]`'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[41]: [1.0, 3.0]`'
- en: '`In``[``42``]:``# Horizontal range (two-dimensional)``sheet1``[``"A1:B1"``]``.``options``(``ndim``=``2``)``.``value`'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``42``]:``# 水平范围（二维）``sheet1``[``"A1:B1"``]``.``options``(``ndim``=``2``)``.``value`'
- en: '`Out[42]: [[1.0, 2.0]]`'
  id: totrans-180
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[42]: [[1.0, 2.0]]`'
- en: '`In``[``43``]:``# Vertical range (two-dimensional)``sheet1``[``"A1:A2"``]``.``options``(``ndim``=``2``)``.``value`'
  id: totrans-181
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``43``]:``# 垂直范围（二维）``sheet1``[``"A1:A2"``]``.``options``(``ndim``=``2``)``.``value`'
- en: '`Out[43]: [[1.0], [3.0]]`'
  id: totrans-182
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[43]: [[1.0], [3.0]]`'
- en: '`In``[``44``]:``# Using the NumPy array converter behaves the same:``# vertical
    range leads to a one-dimensional array``sheet1``[``"A1:A2"``]``.``options``(``np``.``array``)``.``value`'
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``44``]:``# 使用NumPy数组转换器的行为相同：``# 垂直范围导致一维数组``sheet1``[``"A1:A2"``]``.``options``(``np``.``array``)``.``value`'
- en: '`Out[44]: array([1., 3.])`'
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[44]: array([1., 3.])`'
- en: '`In``[``45``]:``# Preserving the column orientation``sheet1``[``"A1:A2"``]``.``options``(``np``.``array``,``ndim``=``2``)``.``value`'
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``45``]:``# 保留列的方向``sheet1``[``"A1:A2"``]``.``options``(``np``.``array``,``ndim``=``2``)``.``value`'
- en: '`Out[45]: array([[1.],                 [3.]])`'
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[45]: array([[1.],                 [3.]])`'
- en: '`In``[``46``]:``# If you need to write out a list vertically,``# the "transpose"
    option comes in handy``sheet1``[``"D1"``]``.``options``(``transpose``=``True``)``.``value``=``[``100``,``200``]`'
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``46``]:``# 如果需要垂直写出列表，则“transpose”选项非常方便``sheet1``[``"D1"``]``.``options``(``transpose``=``True``)``.``value``=``[``100``,``200``]`'
- en: 'Use `ndim=1` to force the value of a single cell to be read as a list instead
    of a scalar. You won’t need `ndim` with pandas, as a DataFrame is always two-dimensional
    and a Series is always one-dimensional. Here is one more example showing how the
    `empty`, `date`, and `number` options work:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ndim=1`强制将单个单元格的值读取为列表而不是标量。在pandas中，不需要`ndim`，因为DataFrame始终是二维的，Series始终是一维的。这里还有一个例子，展示了`empty`、`date`和`number`选项的工作方式：
- en: '`In``[``47``]:``# Write out some sample data``sheet1``[``"A13"``]``.``value``=``[``dt``.``datetime``(``2020``,``1``,``1``),``None``,``1.0``]`'
  id: totrans-189
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``47``]:``# 写入一些示例数据``sheet1``[``"A13"``]``.``value``=``[``dt``.``datetime``(``2020``,``1``,``1``),``None``,``1.0``]`'
- en: '`In``[``48``]:``# Read it back using the default options``sheet1``[``"A13:C13"``]``.``value`'
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``48``]:``# 使用默认选项读取它``sheet1``[``"A13:C13"``]``.``value`'
- en: '`Out[48]: [datetime.datetime(2020, 1, 1, 0, 0), None, 1.0]`'
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[48]: [datetime.datetime(2020, 1, 1, 0, 0), None, 1.0]`'
- en: '`In``[``49``]:``# Read it back using non-default options``sheet1``[``"A13:C13"``]``.``options``(``empty``=``"NA"``,``dates``=``dt``.``date``,``numbers``=``int``)``.``value`'
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``49``]:``# 使用非默认选项将其读取回来``sheet1``[``"A13:C13"``]``.``options``(``empty``=``"NA"``,``dates``=``dt``.``date``,``numbers``=``int``)``.``value`'
- en: '`Out[49]: [datetime.date(2020, 1, 1), ''NA'', 1]`'
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[49]: [datetime.date(2020, 1, 1), ''NA'', 1]`'
- en: So far, we have worked with the `book`, `sheet`, and `range` objects. Let’s
    now move on to learn how to deal with collections such as charts that you access
    from the `sheet` object!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了`book`、`sheet`和`range`对象。现在让我们继续学习如何处理从`sheet`对象访问的图表等集合！
- en: Charts, Pictures, and Defined Names
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图表、图片和定义名称
- en: 'In this section, I’ll show you how to work with three collections that you
    access via the `sheet` or `book` object: charts, pictures, and defined names.[4](#filepos1438843)
    xlwings only supports the most basic chart functionality, but since you can work
    with templates, you may not even be missing much. And to compensate, xlwings allows
    you to embed Matplotlib plots as pictures—you may remember from [Chapter 5](index_split_015.html#filepos482650)
    that Matplotlib is pandas’ default plotting backend. Let’s start by creating a
    first Excel chart!'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将向您展示如何处理通过`sheet`或`book`对象访问的三个集合：图表、图片和定义名称。[4](#filepos1438843) xlwings
    仅支持最基本的图表功能，但由于您可以使用模板工作，您可能甚至不会错过太多内容。而且，为了补偿，xlwings 允许您将 Matplotlib 绘图嵌入为图片——您可能还记得来自[第
    5 章](index_split_015.html#filepos482650)的信息，Matplotlib 是 pandas 的默认绘图后端。让我们从创建第一个
    Excel 图表开始吧！
- en: Excel charts
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Excel 图表
- en: 'To add a new chart, use the `add` method of the `charts` collection, and then
    set the chart type and source data:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新图表，请使用`charts`集合的`add`方法，然后设置图表类型和源数据：
- en: '`In``[``50``]:``sheet1``[``"A15"``]``.``value``=``[[``None``,``"North"``,``"South"``],``[``"Last
    Year"``,``2``,``5``],``[``"This Year"``,``3``,``6``]]`'
  id: totrans-199
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``50``]:``sheet1``[``"A15"``]``.``value``=``[[``无``,``"北"``,``"南"``],``[``"上年度"``,``2``,``5``],``[``"今年"``,``3``,``6``]]`'
- en: '`In``[``51``]:``chart``=``sheet1``.``charts``.``add``(``top``=``sheet1``[``"A19"``]``.``top``,``left``=``sheet1``[``"A19"``]``.``left``)``chart``.``chart_type``=``"column_clustered"``chart``.``set_source_data``(``sheet1``[``"A15"``]``.``expand``())`'
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``51``]:``chart``=``sheet1``.``charts``.``add``(``top``=``sheet1``[``"A19"``]``.``top``,``left``=``sheet1``[``"A19"``]``.``left``)``chart``.``chart_type``=``"column_clustered"``chart``.``set_source_data``(``sheet1``[``"A15"``]``.``expand``())`'
- en: This will produce the chart shown on the lefthand side of [Figure 9-2](#filepos1388244).
    To look up the available chart types, have a look at the [xlwings docs](https://oreil.ly/2B58q).
    If you enjoy working with pandas plots more than with Excel charts, or if you
    want to use a chart type that is not available in Excel, xlwings has you covered—let’s
    see how!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成左侧显示的图表，位于[图 9-2](#filepos1388244)。要查看可用的图表类型，请参阅[xlwings 文档](https://oreil.ly/2B58q)。如果你更喜欢使用
    pandas 绘图而不是 Excel 图表，或者想使用 Excel 中没有的图表类型，xlwings 已经为你准备好了——让我们看看吧！
- en: 'Pictures: Matplotlib plots'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图片：Matplotlib 绘图
- en: 'When you use pandas’ default plotting backend, you are creating a Matplotlib
    plot. To bring such a plot over to Excel, you first need to get ahold of its `figure`
    object, which you provide as an argument to `pictures.add`—this will convert the
    plot into a picture and send it over to Excel:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用 pandas 的默认绘图后端时，您正在创建一个 Matplotlib 绘图。要将这样的绘图移至 Excel，您首先需要获取其`figure`对象，然后将其作为参数提供给`pictures.add`——这将把绘图转换为图片并发送至
    Excel：
- en: '`In``[``52``]:``# Read in the chart data as DataFrame``df``=``sheet1``[``"A15"``]``.``expand``()``.``options``(``pd``.``DataFrame``)``.``value``df`'
  id: totrans-204
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``52``]:``# 将图表数据读取为 DataFrame``df``=``sheet1``[``"A15"``]``.``expand``()``.``options``(``pd``.``DataFrame``)``.``value``df`'
- en: '`Out[52]:            North  South          Last Year    2.0    5.0         
    This Year    3.0    6.0`'
  id: totrans-205
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[52]:            北      南        上年度    2.0    5.0        今年    3.0   
    6.0`'
- en: '`In``[``53``]:``# Enable Matplotlib by using the notebook magic command``#
    and switch to the "seaborn" style``%``matplotlib``inline``import``matplotlib.pyplot``as``plt``plt``.``style``.``use``(``"seaborn"``)`'
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``53``]:``# 通过使用 notebook 魔术命令启用 Matplotlib，并切换到“seaborn”风格``%``matplotlib``inline``import``matplotlib.pyplot``as``plt``plt``.``style``.``use``(``"seaborn"``)'
- en: '`In``[``54``]:``# The pandas plot method returns an "axis" object from``# where
    you can get the figure. "T" transposes the``# DataFrame to bring the plot into
    the desired orientation``ax``=``df``.``T``.``plot``.``bar``()``fig``=``ax``.``get_figure``()`'
  id: totrans-207
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``54``]:``# pandas 绘图方法返回一个“axis”对象，您可以从中获取图表。"T" 转置 DataFrame 以使绘图达到所需方向``ax``=``df``.``T``.``plot``.``bar``()``fig``=``ax``.``get_figure``()``'
- en: '`In``[``55``]:``# Send the plot to Excel``plot``=``sheet1``.``pictures``.``add``(``fig``,``name``=``"SalesPlot"``,``top``=``sheet1``[``"H19"``]``.``top``,``left``=``sheet1``[``"H19"``]``.``left``)``#
    Let''s scale the plot to 70%``plot``.``width``,``plot``.``height``=``plot``.``width``*``0.7``,``plot``.``height``*``0.7`'
  id: totrans-208
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``55``]:``# 将图表发送到Excel``plot``=``sheet1``.``pictures``.``add``(``fig``,``name``=``"SalesPlot"``,``top``=``sheet1``[``"H19"``]``.``top``,``left``=``sheet1``[``"H19"``]``.``left``)``#
    让我们将图表缩放到70%``plot``.``width``,``plot``.``height``=``plot``.``width``*``0.7``,``plot``.``height``*``0.7`'
- en: 'To update the picture with a new plot, simply use the `update` method with
    another `figure` object—technically, this will replace the picture in Excel but
    will preserve all properties like the location, size, and name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用新图表更新图片，只需使用`update`方法和另一个`figure`对象——这实际上将替换Excel中的图片，但会保留其所有属性，如位置、大小和名称：
- en: '`In``[``56``]:``ax``=``(``df``+``1``)``.``T``.``plot``.``bar``()``plot``=``plot``.``update``(``ax``.``get_figure``())`'
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``56``]:``ax``=``(``df``+``1``)``.``T``.``plot``.``bar``()``plot``=``plot``.``update``(``ax``.``get_figure``())`'
- en: '![](images/00059.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00059.jpg)'
- en: Figure 9-2\. An Excel chart (left) and Matplotlib plot (right)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-2\. Excel图表（左）和Matplotlib图表（右）
- en: '[Figure 9-2](#filepos1388244) shows how the Excel chart and the Matplotlib
    plot compare after the `update` call.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 9-2](#filepos1388244) 显示了Excel图表和Matplotlib图表在更新调用后的比较。'
- en: MAKE SURE THAT PILLOW IS INSTALLED
  id: totrans-214
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确保安装了PILLOW
- en: 'When working with pictures, make sure that [Pillow](https://oreil.ly/3HYkf),
    Python’s go-to library for pictures, is installed: this will make sure that the
    pictures arrive in the correct size and proportion in Excel. Pillow is part of
    Anaconda, so if you use a different distribution, you’ll need to install it by
    either running `conda install pillow` or `pip install pillow`. Note that `pictures.add`
    also accepts a path to a picture on disk instead of a Matplotlib figure.'
  id: totrans-215
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在处理图片时，请确保安装了[Pillow](https://oreil.ly/3HYkf)，Python的图片处理库：这将确保图片以正确的大小和比例到达Excel中。Pillow是Anaconda的一部分，因此如果您使用其他发行版，则需要通过运行`conda
    install pillow`或`pip install pillow`来安装它。请注意，`pictures.add`还可以接受磁盘上图片的路径，而不是Matplotlib图表。
- en: Charts and pictures are collections that are accessed via a `sheet` object.
    Defined names, the collection we are going to look at next, can be accessed from
    the `sheet` or the `book` object. Let’s see what difference this makes!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图表和图片是通过`sheet`对象访问的集合。下面我们将看看如何访问定义名称集合，可以从`sheet`或`book`对象中访问。让我们看看这样做有什么区别！
- en: Defined names
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 定义名称
- en: 'In Excel, you create a defined name by assigning a name to a range, a formula,
    or a constant.[5](#filepos1439272) Assigning a name to a range is probably the
    most common case and called a named range. With a named range, you can refer to
    the Excel range in formulas and code by using a descriptive name rather than an
    abstract address in the form of `A1:B2`. Using them with xlwings makes your code
    more flexible and solid: reading and writing values from and to named ranges gives
    you the flexibility to restructure your workbook without having to adjust your
    Python code: a name sticks to the cell, even if you move it around by inserting
    a new row, for example. Defined names can be set on either the global book scope
    or the local sheet scope. The advantage of a name with sheet scope is that you
    could copy the sheet without running into conflicts with duplicate named ranges.
    In Excel, you add defined names manually by going to Formulas > Define Name or
    by selecting a range, then writing the desired name into the Name Box—this is
    the text box to the left of the formula bar, where you see the cell address by
    default. Here is how you manage defined names with xlwings:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在Excel中，通过为范围、公式或常量分配名称来创建定义名称。[5](#filepos1439272) 将名称分配给范围可能是最常见的情况，称为命名范围。使用命名范围，您可以在公式和代码中使用描述性名称而不是形如`A1:B2`的抽象地址来引用Excel范围。与xlwings一起使用它们可以使您的代码更加灵活和稳固：从命名范围读取和写入值使您能够重新组织工作簿而无需调整Python代码：名称会粘附在单元格上，即使您通过插入新行等操作移动它。定义名称可以设置为全局工作簿范围或局部工作表范围。工作表范围的名称优势在于，您可以复制工作表而无需担心重复命名范围的冲突。在Excel中，您可以通过转到公式
    > 定义名称或选择范围，然后在名称框中写入所需名称来手动添加定义名称——名称框位于公式栏左侧，默认显示单元格地址。以下是如何使用xlwings管理定义名称的方法：
- en: '`In``[``57``]:``# The book scope is the default scope``sheet1``[``"A1:B2"``]``.``name``=``"matrix1"`'
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``57``]:``# 默认作用域为工作簿范围``sheet1``[``"A1:B2"``]``.``name``=``"matrix1"`'
- en: '`In``[``58``]:``# For the sheet scope, prepend the sheet name with``# an exclamation
    point``sheet1``[``"B10:E11"``]``.``name``=``"Sheet1!matrix2"`'
  id: totrans-220
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``58``]:``# 对于工作表范围，请使用叹号将工作表名称前缀``sheet1``[``"B10:E11"``]``.``name``=``"Sheet1!matrix2"`'
- en: '`In``[``59``]:``# Now you can access the range by name``sheet1``[``"matrix1"``]`'
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``59``]:``# 现在你可以通过名字访问范围``sheet1``[``"matrix1"``]`'
- en: '`Out[59]: <Range [Book2]Sheet1!$A$1:$B$2>`'
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[59]: <Range [Book2]Sheet1!$A$1:$B$2>`'
- en: '`In``[``60``]:``# If you access the names collection via the "sheet1" object,``#
    it contains only names with that sheet''s scope``sheet1``.``names`'
  id: totrans-223
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``60``]:``# 如果您通过"sheet1"对象访问名称集合，``# 它仅包含该工作表范围内的名称``sheet1``.``names`'
- en: '`Out[60]: [<Name ''Sheet1!matrix2'': =Sheet1!$B$10:$E$11>]`'
  id: totrans-224
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[60]: [<Name ''Sheet1!matrix2'': =Sheet1!$B$10:$E$11>]`'
- en: '`In``[``61``]:``# If you access the names collection via the "book" object,``#
    it contains all names, including book and sheet scope``book``.``names`'
  id: totrans-225
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``61``]:``# 如果您通过"book"对象访问名称集合，``# 它包含所有名称，包括书籍和工作表范围``book``.``names`'
- en: '`Out[61]: [<Name ''matrix1'': =Sheet1!$A$1:$B$2>, <Name ''Sheet1!matrix2'':
              =Sheet1!$B$10:$E$11>]`'
  id: totrans-226
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[61]: [<Name ''matrix1'': =Sheet1!$A$1:$B$2>, <Name ''Sheet1!matrix2'':
              =Sheet1!$B$10:$E$11>]`'
- en: '`In``[``62``]:``# Names have various methods and attributes.``# You can, for
    example, get the respective range object.``book``.``names``[``"matrix1"``]``.``refers_to_range`'
  id: totrans-227
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``62``]:``# 名称具有各种方法和属性。例如，您可以获取相应的范围对象。``book``.``names``[``"matrix1"``]``.``refers_to_range`'
- en: '`Out[62]: <Range [Book2]Sheet1!$A$1:$B$2>`'
  id: totrans-228
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[62]: <Range [Book2]Sheet1!$A$1:$B$2>`'
- en: '`In``[``63``]:``# If you want to assign a name to a constant``# or a formula,
    use the "add" method``book``.``names``.``add``(``"EURUSD"``,``"=1.1151"``)`'
  id: totrans-229
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``63``]:``# 如果您想要为常量或公式分配名称，请使用"add"方法``book``.``names``.``add``(``"EURUSD"``,``"=1.1151"``)`'
- en: '`Out[63]: <Name ''EURUSD'': =1.1151>`'
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Out[63]: <Name ''EURUSD'': =1.1151>`'
- en: Have a look at the generated defined names in Excel by opening the Name Manager
    via Formulas > Name Manager (see [Figure 9-3](#filepos1400210)). Note that Excel
    on macOS doesn’t have a Name Manager—instead, go to Formulas > Define Name, from
    where you will see the existing names.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 查看通过公式 > 名称管理器打开的 Excel 中生成的定义名称（见 [Figure 9-3](#filepos1400210)）。请注意，macOS
    上的 Excel 没有名称管理器，而是转到公式 > 定义名称，在那里你将看到现有的名称。
- en: '![](images/00014.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00014.jpg)'
- en: Figure 9-3\. Excel’s Name Manager after adding a few defined names via xlwings
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-3\. 在 xlwings 添加了几个定义名称后的 Excel 名称管理器
- en: 'At this point, you know how to work with the most commonly used components
    of an Excel workbook. This means that we can look at the reporting case study
    from [Chapter 7](index_split_019.html#filepos863345) one more time: let’s see
    what changes when we bring xlwings into the picture!'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您知道如何使用 Excel 工作簿的最常用组件。这意味着我们可以再次从 [Chapter 7](index_split_019.html#filepos863345)
    看看报告案例研究：让我们看看当我们引入 xlwings 时会发生什么变化！
- en: 'Case Study (Re-Revisited): Excel Reporting'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'Case Study (Re-Revisited): Excel Reporting'
- en: 'Being able to truly edit Excel files via xlwings enables us to work with template
    files that will be 100% preserved, no matter how complex they are or in which
    format they are stored—for example, you can easily edit an xlsb file, a case that
    is currently not supported by any of the writer packages we met in the previous
    chapter. When you look at sales_report_openpxyl.py in the companion repo, you
    will see that after preparing the `summary` DataFrame, we had to write almost
    forty lines of code to create one chart and style one DataFrame with OpenPyXL.
    With xlwings, you achieve the same in just six lines of code, as shown in [Example 9-1](#filepos1403182).
    Being able to handle the formatting in the Excel template will save you a lot
    of work. This, however, comes at a price: xlwings requires an installation of
    Excel to run—that’s usually fine if you have to create these reports infrequently
    on your own machine, but it may be less ideal if you try to create reports on
    a server as part of a web application.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 能够通过 xlwings 真正编辑 Excel 文件使我们能够处理模板文件，无论其多么复杂或存储在何种格式中，都将完全保留，例如，您可以轻松编辑 xlsb
    文件，这是当前所有之前章节中的写入包都不支持的情况。当您查看配套存储库中的 sales_report_openpxyl.py 时，您将看到在准备 `summary`
    DataFrame 后，我们需要编写将近四十行代码来创建一个图表并使用 OpenPyXL 样式化一个 DataFrame。而使用 xlwings，您只需六行代码即可实现相同效果，如
    [Example 9-1](#filepos1403182) 所示。能够处理 Excel 模板中的格式将为您节省大量工作。然而，这也是有代价的：xlwings
    需要安装 Excel 才能运行——如果您需要在自己的机器上偶尔创建这些报告，这通常是可以接受的，但如果您试图作为 Web 应用程序的一部分在服务器上创建报告，则可能不太理想。
- en: First, you need to make sure that your Microsoft Office license covers the installation
    on a server and second, Excel wasn’t made for unattended automation, which means
    that you may run into stability issues, especially if you need to generate many
    reports in a short amount of time. That being said, I have seen more than one
    client doing this successfully, so if you can’t use a writer package for whatever
    reason, running xlwings on a server may very well be an option worth exploring.
    Just make sure to run each script in a new Excel instance via `app = xw.App()`
    to ship around the typical stability issues.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要确保您的 Microsoft Office 许可证覆盖了服务器上的安装，其次，Excel 并不适用于无人值守自动化，这意味着您可能会遇到稳定性问题，尤其是在短时间内需要生成大量报告时。话虽如此，我见过不止一个客户成功地做到了这一点，因此，如果由于某种原因不能使用写入包，将
    xlwings 运行在服务器上可能是一个值得探索的选择。只需确保通过 `app = xw.App()` 在新的 Excel 实例中运行每个脚本，以规避典型的稳定性问题。
- en: 'You will find the full xlwings script under sales_report_xlwings.py in the
    companion repository (the first half is the same as we used with OpenPyXL and
    XlsxWriter). It is also a perfect example for combining a reader package with
    xlwings: while pandas (via OpenPyXL and xlrd) is faster with reading many files
    from disk, xlwings makes it easier to fill in a preformatted template.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在附属存储库中的 sales_report_xlwings.py 中找到完整的 xlwings 脚本（前半部分与我们使用的 OpenPyXL 和
    XlsxWriter 相同）。它也是一个完美的示例，展示了如何将读取包与 xlwings 结合使用：尽管 pandas（通过 OpenPyXL 和 xlrd）在从磁盘读取多个文件时更快，但
    xlwings 更容易填充预格式化的模板。
- en: Example 9-1\. sales_report_xlwings.py (second part only)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 9-1\. sales_report_xlwings.py（仅第二部分）
- en: '`# Open the template, paste the data, autofit the columns``# and adjust the
    chart source. Then save it under a different name.``template``=``xw``.``Book``(``this_dir``/``"xl"``/``"sales_report_template.xlsx"``)``sheet``=``template``.``sheets``[``"Sheet1"``]``sheet``[``"B3"``]``.``value``=``summary``sheet``[``"B3"``]``.``expand``()``.``columns``.``autofit``()``sheet``.``charts``[``"Chart
    1"``]``.``set_source_data``(``sheet``[``"B3"``]``.``expand``()[:``-``1``,``:``-``1``])``template``.``save``(``this_dir``/``"sales_report_xlwings.xlsx"``)`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 打开模板，粘贴数据，调整列宽``# 并调整图表数据源。然后以不同的名称保存。``template``=``xw``.``Book``(``this_dir``/``"xl"``/``"sales_report_template.xlsx"``)``sheet``=``template``.``sheets``[``"Sheet1"``]``sheet``[``"B3"``]``.``value``=``summary``sheet``[``"B3"``]``.``expand``()``.``columns``.``autofit``()``sheet``.``charts``[``"Chart
    1"``]``.``set_source_data``(``sheet``[``"B3"``]``.``expand``()[:``-``1``,``:``-``1``])``template``.``save``(``this_dir``/``"sales_report_xlwings.xlsx"``)`'
- en: When you run this script for the very first time on macOS (for example by opening
    it in VS Code and clicking the Run File button), you will have to again confirm
    a pop-up to grant access to the file system, something we’ve already come across
    earlier in this chapter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在 macOS 上首次运行此脚本（例如通过在 VS Code 中打开并点击“运行文件”按钮），您将再次确认弹出窗口以授予文件系统访问权限，这是本章早些时候已经遇到的内容。
- en: 'With formatted Excel templates, you can build beautiful Excel reports very
    quickly. You also get access to methods like `autofit`, something that’s not available
    with the writer packages as it relies on calculations done by the Excel application:
    this allows you to properly set the width and height of your cells according to
    their content. [Figure 9-4](#filepos1410076) shows you the upper part of the sales
    report as generated by xlwings with a customized table header as well as columns
    where the `autofit` method has been applied.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用格式化的 Excel 模板，你可以非常快速地创建漂亮的 Excel 报告。你还可以使用 `autofit` 等方法，这是写入包（如 writer packages）所不具备的功能，因为它依赖
    Excel 应用程序进行的计算：这使得你可以根据单元格内容适当设置它们的宽度和高度。[图 9-4](#filepos1410076) 展示了由 xlwings
    生成的销售报告的上部分，其中包括自定义表头以及应用了 `autofit` 方法的列。
- en: 'When you start using xlwings for more than just filling in a couple of cells
    in a template, it’s good to know a little bit about its internals: the next section
    looks at how xlwings works under the hood.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用 xlwings 不仅仅是填充模板中的几个单元格时，了解其内部机制会对你有所帮助：接下来的部分将深入探讨 xlwings 在幕后的工作原理。
- en: '![](images/00073.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](images/00073.jpg)'
- en: Figure 9-4\. The table of the sales report based on a preformatted template
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9-4\. 基于预格式化模板的销售报告表格
- en: Advanced xlwings Topics
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 xlwings 主题
- en: This section shows you how to make your xlwings code performant and how to work
    around missing functionality. To understand these topics, though, we first need
    to say a few words about the way xlwings communicates with Excel.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何使您的 xlwings 代码更高效，并解决缺少功能的问题。不过，要理解这些主题，我们首先需要简要介绍 xlwings 与 Excel
    通信的方式。
- en: xlwings Foundations
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings 基础知识
- en: 'xlwings depends on other Python packages to communicate with the automation
    mechanism of the respective operating system:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings 依赖于其他 Python 包来与操作系统的自动化机制进行通信：
- en: Windows
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Windows
- en: On Windows, xlwings relies on the COM technology, short for Component Object
    Model. COM is a standard that allows two processes to communicate with each other—in
    our case Excel and Python. xlwings uses the Python package [pywin32](https://oreil.ly/tm7sK)
    to handle the COM calls.
  id: totrans-251
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上，xlwings 依赖于 COM 技术，即组件对象模型。COM 是一种允许两个进程进行通信的标准——在我们的案例中是 Excel
    和 Python。xlwings 使用 Python 包 [pywin32](https://oreil.ly/tm7sK) 处理 COM 调用。
- en: macOS
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: macOS
- en: On macOS, xlwings relies on AppleScript. AppleScript is Apple’s scripting language
    to automate scriptable applications—fortunately, Excel is such a scriptable application.
    To run AppleScript commands, xlwings uses the Python package [appscript](https://oreil.ly/tIsDd).
  id: totrans-253
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 macOS 上，xlwings 依赖于 AppleScript。AppleScript 是苹果的脚本语言，用于自动化可脚本化的应用程序——幸运的是，Excel
    就是这样一个可脚本化的应用程序。为了运行 AppleScript 命令，xlwings 使用 Python 包 [appscript](https://oreil.ly/tIsDd)。
- en: 'WINDOWS: HOW TO PREVENT ZOMBIE PROCESSES'
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: WINDOWS：如何避免僵尸进程
- en: When you play around with xlwings on Windows, you will sometimes notice that
    Excel seems to be completely closed, yet when you open the Task Manager (right-click
    on the Windows taskbar, then select Task Manager), you will see Microsoft Excel
    under Background processes on the Processes tab. If you don’t see any tab, click
    on “More details” first. Alternatively, go to the Details tab, where you will
    see Excel listed as “EXCEL.EXE.” To terminate a zombie process, right-click the
    respective row and select “End task” to force Excel to close.
  id: totrans-255
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上使用 xlwings 时，有时会注意到 Excel 看起来完全关闭了，但是当您打开任务管理器（右键单击 Windows 任务栏，然后选择任务管理器）时，在进程选项卡的背景进程下会看到
    Microsoft Excel。如果您没有看到任何选项卡，请首先点击“更多详情”。或者，转到详细信息选项卡，在那里您将看到 Excel 列为“EXCEL.EXE”。要终止僵尸进程，请右键单击相应行，然后选择“结束任务”以强制关闭
    Excel。
- en: 'Because these processes are undead rather than properly terminated, they are
    often called zombie processes. Leaving them around uses resources and can lead
    to undesired behavior: for example, files may be blocked or add-ins may not be
    properly loaded when you open a new instance of Excel. The reason why Excel sometimes
    doesn’t manage to shut down properly is that processes can only be terminated
    once there are no more COM references, e.g., in the form of an xlwings `app` object.
    Most commonly, you end up with an Excel zombie process after killing the Python
    interpreter as this prevents it from properly cleaning up the COM references.
    Consider this example on an Anaconda Prompt:'
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因为这些进程是未终止的不死进程，通常被称为僵尸进程。保留它们会消耗资源，并可能导致不良行为：例如，当您打开新的 Excel 实例时，可能会出现文件被阻塞或加载项未能正确加载的情况。Excel
    有时无法正常关闭的原因在于只有在没有 COM 引用（例如 xlwings 的 `app` 对象形式）时，进程才能被终止。通常，在终止 Python 解释器后，您会遇到
    Excel 僵尸进程，因为这会阻止它正确清理 COM 引用。在 Anaconda Prompt 中考虑以下示例：
- en: '`(base)>` `python` `>>>` `import xlwings as xw` `>>>` `app = xw.App()`'
  id: totrans-257
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`(base)>` `python` `>>>` `import xlwings as xw` `>>>` `app = xw.App()`'
- en: 'Once the new Excel instance is running, quit it again via the Excel user interface:
    while Excel closes, the Excel process in the Task Manager will keep running. If
    you shut down the Python session properly by running `quit()` or by using the
    Ctrl+Z shortcut, the Excel process will eventually be shut down. If, however,
    you kill the Anaconda Prompt by clicking the “x” at the top right of the window,
    you will notice that the process sticks around as a zombie process. The same happens
    if you kill the Anaconda Prompt before closing Excel or if you kill it while it
    is running a Jupyter server and you hold an xlwings `app` object in one of the
    Jupyter notebook cells. To minimize the chances of ending up with Excel zombie
    processes, here are a few suggestions:'
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一旦新的 Excel 实例正在运行，请通过 Excel 用户界面再次退出它：虽然 Excel 关闭了，但任务管理器中的 Excel 进程将继续运行。如果您通过运行
    `quit()` 或使用 Ctrl+Z 快捷键来正确关闭 Python 会话，Excel 进程最终会被关闭。然而，如果您在关闭 Excel 之前杀死 Anaconda
    Prompt，您会注意到该进程作为僵尸进程存在。如果在运行 Jupyter 服务器并在其中一个 Jupyter 笔记本单元格中保持了 xlwings 的 `app`
    对象时杀死 Anaconda Prompt，情况也是如此。为了最小化出现 Excel 僵尸进程的可能性，这里有几个建议：
- en: Run `app.quit()` from Python instead of closing Excel manually. This makes sure
    that the references are cleaned up properly.
  id: totrans-259
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 Python 中运行 `app.quit()` 而不是手动关闭 Excel。这样可以确保引用被正确清理。
- en: Don’t kill interactive Python sessions when you work with xlwings, e.g., if
    you run a Python REPL on an Anaconda Prompt, shut the Python interpreter down
    properly by running `quit()` or by using the Ctrl+Z shortcut. When you work with
    Jupyter notebooks, shut the server down by clicking on Quit on the web interface.
  id: totrans-260
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当你使用xlwings时，不要关闭交互式Python会话，例如，如果你在Anaconda Prompt上运行Python REPL，请通过运行`quit()`或使用Ctrl+Z快捷键来正确关闭Python解释器。当你使用Jupyter笔记本时，通过在网页界面上点击退出来关闭服务器。
- en: With interactive Python sessions, it helps to avoid using the `app` object directly,
    e.g., by using `xw.Book()` instead of `myapp.books.add()`. This should properly
    terminate Excel even if the Python process is killed.
  id: totrans-261
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在交互式Python会话中，避免直接使用`app`对象是有帮助的，例如，可以使用`xw.Book()`代替`myapp.books.add()`。即使Python进程被终止，这样做也应该能正确地终止Excel。
- en: Now that you have an idea about the underlying technology of xlwings, let’s
    see how we can speed up slow scripts!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对xlwings的基础技术有了了解，让我们看看如何加快慢脚本的速度！
- en: Improving Performance
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 提高性能
- en: 'To keep your xlwings scripts performant, there are a few strategies: the most
    important one is to keep cross-application calls to an absolute minimum. Using
    raw values can be another option, and finally, setting the right `app` properties
    may also help. Let’s go through these options one after another!'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持xlwings脚本的性能，有几种策略：最重要的是尽量减少跨应用程序调用。使用原始值可能是另一种选择，最后，设置正确的`app`属性也可能有所帮助。让我们逐个讨论这些选项！
- en: Minimize cross-application calls
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量减少跨应用程序调用
- en: 'It’s crucial to know that every cross-application call from Python to Excel
    is “expensive,” i.e., slow. Therefore, such calls should be reduced as much as
    possible. The easiest way to do this is by reading and writing entire Excel ranges
    instead of looping through individual cells. In the following example, we read
    and write 150 cells, first by looping through every cell and then by dealing with
    the entire range in one call:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 至关重要的是要知道，从Python到Excel的每个跨应用程序调用都是“昂贵的”，即很慢。因此，应该尽可能减少此类调用。最简单的方法是通过读取和写入整个Excel范围而不是遍历单个单元格来实现这一点。在以下示例中，我们首先通过遍历每个单元格，然后通过一次调用处理整个范围，读取和写入150个单元格：
- en: '`In``[``64``]:``# Add a new sheet and write 150 values``# to it to have something
    to work with``sheet2``=``book``.``sheets``.``add``()``sheet2``[``"A1"``]``.``value``=``np``.``arange``(``150``)``.``reshape``(``30``,``5``)`'
  id: totrans-267
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``64``]:``# 添加一个新工作表并写入150个值``# 以便有点东西可以操作``sheet2``=``book``.``sheets``.``add``()``sheet2``[``"A1"``]``.``value``=``np``.``arange``(``150``)``.``reshape``(``30``,``5``)`'
- en: '`In``[``65``]:``%%``time``# This makes 150 cross-application calls``for``cell``in``sheet2``[``"A1:E30"``]:``cell``.``value``+=``1`'
  id: totrans-268
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``65``]:``%%``time``# 这进行了150次跨应用程序调用``for``cell``in``sheet2``[``"A1:E30"``]:``cell``.``value``+=``1`'
- en: '`Wall time: 909 ms`'
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Wall time: 909 ms`'
- en: '`In``[``66``]:``%%``time``# This makes just two cross-application calls``values``=``sheet2``[``"A1:E30"``]``.``options``(``np``.``array``)``.``value``sheet2``[``"A1"``]``.``value``=``values``+``1`'
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``66``]:``%%``time``# 这只进行了两次跨应用程序调用``values``=``sheet2``[``"A1:E30"``]``.``options``(``np``.``array``)``.``value``sheet2``[``"A1"``]``.``value``=``values``+``1`'
- en: '`Wall time: 97.2 ms`'
  id: totrans-271
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Wall time: 97.2 ms`'
- en: These numbers are even more extreme on macOS, where the second option is about
    50 times faster than the first one on my machine.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，这些数字甚至更加极端，第二个选项比我的机器上的第一个选项快大约50倍。
- en: Raw values
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 原始值
- en: 'xlwings was primarily designed with a focus on convenience rather than speed.
    However, if you deal with huge cell ranges, you may run into situations where
    you can save time by skipping xlwings’ data cleaning step: xlwings loops through
    each value when you read and write data, for example, to align data types between
    Windows and macOS. By using the string `raw` as converter in the `options` method,
    you skip this step. While this should make all operations faster, the difference
    may not be significant unless you write large arrays on Windows. Using raw values,
    however, means that you cannot directly work with DataFrames anymore. Instead,
    you need to provide your values as nested lists or tuples. Also, you will need
    to provide the full address of the range you are writing to—providing the top-left
    cell isn’t enough anymore:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings 主要设计用于方便使用，而不是速度。但是，如果处理大型单元格范围，可能会遇到可以通过跳过 xlwings 数据清理步骤来节省时间的情况：例如，在读写数据时，xlwings
    会遍历每个值，以在 Windows 和 macOS 之间对齐数据类型。通过在 `options` 方法中使用字符串 `raw` 作为转换器，可以跳过此步骤。尽管这应该使所有操作更快，但除非在
    Windows 上写入大数组，否则差异可能不显著。但是，使用原始值意味着你不能再直接使用 DataFrame 进行工作。相反，你需要将你的值提供为嵌套的列表或元组。此外，你还需要提供写入范围的完整地址——仅提供左上角的单元格不再足够：
- en: '`In``[``67``]:``# With raw values, you must provide the full``# target range,
    sheet["A35"] doesn''t work anymore``sheet1``[``"A35:B36"``]``.``options``(``"raw"``)``.``value``=``[[``1``,``2``],``[``3``,``4``]]`'
  id: totrans-275
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`In``[``67``]:``# 使用原始值时，必须提供完整的目标范围，sheet["A35"] 不再有效``sheet1``[``"A35:B36"``]``.``options``(``"raw"``)``.``value``=``[[``1``,``2``],``[``3``,``4``]]`'
- en: App properties
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序属性
- en: 'Depending on the content of your workbook, changing the properties of your
    `app` objects can also help to make code run faster. Usually, you want to look
    at the following properties (`myapp` is an xlwings `app` object):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 根据工作簿的内容，更改 `app` 对象的属性也可以帮助加快代码运行速度。通常，你需要查看以下属性（`myapp` 是 xlwings 的 `app`
    对象）：
- en: '`myapp.screen_updating = False`'
  id: totrans-278
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myapp.screen_updating = False`'
- en: '`myapp.calculation = "manual"`'
  id: totrans-279
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myapp.calculation = "manual"`'
- en: '`myapp.display_alerts = False`'
  id: totrans-280
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`myapp.display_alerts = False`'
- en: At the end of the script, make sure to set the attributes back to their original
    state. If you are on Windows, you may also see a slight performance improvement
    by running your script in a hidden Excel instance via `xw.App(visible=False)`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本末尾，确保将属性设置回它们的原始状态。如果你在 Windows 上，通过 `xw.App(visible=False)` 在隐藏的 Excel 实例中运行脚本，可能还会稍微提高性能。
- en: Now that you know how to keep performance under control, let’s have a look at
    how to extend the functionality of xlwings.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何控制性能了，让我们看看如何扩展 xlwings 的功能。
- en: How to Work Around Missing Functionality
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决缺失功能
- en: 'xlwings provides a Pythonic interface for the most commonly used Excel commands
    and makes them work across Windows and macOS. There are, however, many methods
    and attributes of the Excel object model that are not yet covered natively by
    xlwings—but all is not lost! xlwings gives you access to the underlying pywin32
    object on Windows and the appscript object on macOS by using the `api` attribute
    on any xlwings object. This way, you have access to the whole Excel object model,
    but in turn, you lose cross-platform compatibility. For example, assume you wanted
    to clear the formatting of a cell. Here is how you would go about this:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: xlwings 为最常用的 Excel 命令提供了 Pythonic 接口，并使其在 Windows 和 macOS 上都能正常工作。然而，Excel
    对象模型中有许多方法和属性目前尚未被 xlwings 原生支持，但并非没有办法！xlwings 通过在任何 xlwings 对象上使用 `api` 属性，让你可以访问
    Windows 上的 pywin32 对象和 macOS 上的 appscript 对象。这样一来，你就可以访问整个 Excel 对象模型，但也失去了跨平台兼容性。例如，假设你想清除单元格的格式。下面是如何操作：
- en: Check if the method is available on the xlwings `range` object, e.g., by using
    the Tab key after putting a dot at the end of a `range` object in a Jupyter notebook,
    by running `dir(sheet["A1"])` or by searching the [xlwings API reference](https://oreil.ly/EiXBc).
    On VS Code, the available methods should be shown automatically in a tooltip.
  id: totrans-285
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 检查 xlwings `range` 对象上是否有可用的方法，例如，在 Jupyter notebook 中在 `range` 对象的末尾加上点后使用
    Tab 键，通过运行 `dir(sheet["A1"])` 或搜索 [xlwings API 参考](https://oreil.ly/EiXBc)。在 VS
    Code 中，可用方法应自动显示在工具提示中。
- en: 'If the desired functionality is missing, use the `api` attribute to get the
    underlying object: on Windows, `sheet["A1"].api` will give you a pywin32 object
    and an on macOS, you will get an appscript object.'
  id: totrans-286
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果所需功能不可用，请使用 `api` 属性获取底层对象：在 Windows 上，`sheet["A1"].api` 将给出一个 pywin32 对象，在
    macOS 上，将得到一个 appscript 对象。
- en: Check Excel’s object model in the [Excel VBA reference](https://oreil.ly/UILPo).
    To clear the format of a range, you would end up under [Range.ClearFormats](https://oreil.ly/kcEsw).
  id: totrans-287
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 查看 [Excel VBA 参考](https://oreil.ly/UILPo) 中的 Excel 对象模型。要清除范围的格式，您将最终进入 [Range.ClearFormats](https://oreil.ly/kcEsw)。
- en: 'On Windows, in most cases, you can use the VBA method or property directly
    with your `api` object. If it is a method, make sure to add parentheses in Python:
    `sheet["A1"].api.ClearFormats()`. If you are doing this on macOS, things are more
    complicated as appscript uses a syntax that can be difficult to guess. Your best
    approach is to look at the developer guide that is part of the [xlwings source
    code](https://oreil.ly/YSS0Y). Clearing the cell formatting, however, is easy
    enough: just apply Python’s syntax rules on the method name by using lowercase
    characters with underscores: `sheet["A1"].api.clear_formats()`.'
  id: totrans-288
  prefs:
  - PREF_UL
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 Windows 上，在大多数情况下，您可以直接使用 VBA 方法或属性与您的 `api` 对象。如果是方法，请确保在 Python 中加上括号：`sheet["A1"].api.ClearFormats()`。如果您在
    macOS 上进行此操作，则更复杂，因为 appscript 使用的语法可能很难猜测。您最好的方法是查看作为 [xlwings 源代码](https://oreil.ly/YSS0Y)
    一部分的开发者指南。然而，清除单元格格式很容易：只需按照 Python 的语法规则使用小写字符和下划线处理方法名称：`sheet["A1"].api.clear_formats()`。
- en: 'If you need to make sure that `ClearFormats` works across both platforms, you
    can do it as follows (`darwin` is the core of macOS and used as its name by `sys.platform`):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要确保 `ClearFormats` 在两个平台上都能正常工作，可以按以下方式执行（`darwin` 是 macOS 的核心，并由 `sys.platform`
    用作其名称）：
- en: '`import``sys``if``sys``.``platform``.``startswith``(``"darwin"``):``sheet``[``"A10"``]``.``api``.``clear_formats``()``elif``sys``.``platform``.``startswith``(``"win"``):``sheet``[``"A10"``]``.``api``.``ClearFormats``()`'
  id: totrans-290
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`import``sys``if``sys``.``platform``.``startswith``(``"darwin"``):``sheet``[``"A10"``]``.``api``.``clear_formats``()``elif``sys``.``platform``.``startswith``(``"win"``):``sheet``[``"A10"``]``.``api``.``ClearFormats``()`'
- en: In any case, it’s worth opening an issue on xlwings’ [GitHub repository](https://oreil.ly/kFkD0)
    to have the functionality included in a future version.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，值得在 xlwings 的 [GitHub 仓库](https://oreil.ly/kFkD0) 上提一个问题，以便在将来的版本中包含该功能。
- en: Conclusion
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 结论
- en: 'This chapter introduced you to the concept of Excel automation: via xlwings,
    you can use Python for tasks that you would traditionally do in VBA. We learned
    about the Excel object model and how xlwings allows you to interact with its components
    like the `sheet` and `range` objects. Equipped with this knowledge, we went back
    to the reporting case study from [Chapter 7](index_split_019.html#filepos863345)
    and used xlwings to fill in a preformatted report template; this showed you that
    there is a case for using the reader packages and xlwings side by side. We also
    learned about the libraries that xlwings uses under the hood to understand how
    we can improve performance and work around missing functionality. My favorite
    xlwings feature is that it works equally well on macOS as it does on Windows.
    This is even more exciting as Power Query on macOS doesn’t have all the features
    of the Windows version yet: whatever is missing, you should be able to easily
    replace it with a combination of pandas and xlwings.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了 Excel 自动化的概念：通过 xlwings，您可以使用 Python 完成传统上在 VBA 中完成的任务。我们了解了 Excel 对象模型以及
    xlwings 如何允许您与其组件如 `sheet` 和 `range` 对象交互。掌握了这些知识，我们回到了第 [7 章](index_split_019.html#filepos863345)
    的报告案例研究，并使用 xlwings 填写了一个预先格式化的报告模板；这展示了您可以在读取器包和 xlwings 并行使用的情况。我们还了解了 xlwings
    底层使用的库，以了解如何改进性能并解决缺少功能的问题。我最喜欢的 xlwings 功能是它在 macOS 和 Windows 上同样出色。这更令人兴奋，因为
    macOS 上的 Power Query 还没有 Windows 版本的所有功能：无论缺少什么功能，您都应该能够轻松用 pandas 和 xlwings 的组合替代它。
- en: 'Now that you know the xlwings basics, you are ready for the next chapter: there,
    we’re going to take the next step and call xlwings scripts from Excel itself,
    allowing you to build Excel tools that are powered by Python.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 xlwings 的基础知识，可以准备好进入下一章了：在那里，我们将迈出下一步，并从 Excel 本身调用 xlwings 脚本，使您能够构建由
    Python 驱动的 Excel 工具。
- en: '[1  ](index_split_024.html#filepos1238292) On Windows, you need at least Excel
    2007, and on macOS, you need at least Excel 2016\. Alternatively, you can install
    the desktop version of Excel, which is part of your Microsoft 365 subscription.
    Check your subscription for details on how to do this.'
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[1  ](index_split_024.html#filepos1238292) 在 Windows 上，您至少需要 Excel 2007，在 macOS
    上，您至少需要 Excel 2016。或者，您可以安装 Excel 的桌面版，这是 Microsoft 365 订阅的一部分。查看您的订阅以获取有关如何执行此操作的详细信息。'
- en: '[2  ](index_split_024.html#filepos1248734) Note that xlwings 0.22.0 introduced
    the `xw.load` function, which is similar to `xw.view`, but works in the opposite
    direction: it allows you to load an Excel range easily into a Jupyter notebook
    as a pandas DataFrame, see [the docs](https://oreil.ly/x7sTR).'
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[2  ](index_split_024.html#filepos1248734) 注意，xlwings 0.22.0 引入了 `xw.load`
    函数，它类似于 `xw.view`，但工作方向相反：它允许您轻松将 Excel 范围加载到 Jupyter 笔记本中作为 pandas DataFrame，详见
    [文档](https://oreil.ly/x7sTR)。'
- en: '[3  ](index_split_024.html#filepos1253391) See [“What are Excel instances,
    and why is this important?”](https://oreil.ly/L2FDT) for more information about
    separate Excel instances.'
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[3  ](index_split_024.html#filepos1253391) 有关单独的 Excel 实例以及其重要性的更多信息，请参见 [“什么是
    Excel 实例，以及为什么这很重要？”](https://oreil.ly/L2FDT)。'
- en: '[4  ](#filepos1367425) Another popular collection is `tables`. To use them,
    you need at least xlwings 0.21.0; see the [docs](https://oreil.ly/H2Imd).'
  id: totrans-298
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[4  ](#filepos1367425) 另一个流行的集合是 `tables`。要使用它们，至少需要 xlwings 0.21.0；请参阅 [文档](https://oreil.ly/H2Imd)。'
- en: '[5  ](#filepos1390175) Defined names with formulas are also used for lambda
    functions, a new way of defining user-defined functions without VBA or JavaScript,
    that Microsoft announced as a new feature for Microsoft 365 subscribers in December
    2020.'
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[5  ](#filepos1390175) 带有公式的定义名称也用于 lambda 函数，这是一种在不使用 VBA 或 JavaScript 的情况下定义用户自定义函数的新方法，微软在
    2020 年 12 月宣布为 Microsoft 365 订阅用户的新功能。'
