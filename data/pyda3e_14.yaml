- en: 11  Time Series
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11  时间序列
- en: 原文：[https://wesmckinney.com/book/time-series](https://wesmckinney.com/book/time-series)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://wesmckinney.com/book/time-series](https://wesmckinney.com/book/time-series)'
- en: '*This Open Access web version of *Python for Data Analysis 3rd Edition* is
    now available as a companion to the [print and digital editions](https://amzn.to/3DyLaJc).
    If you encounter any errata, [please report them here](https://oreilly.com/catalog/0636920519829/errata).
    Please note that some aspects of this site as produced by Quarto will differ from
    the formatting of the print and eBook versions from O’Reilly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个开放访问的网络版本*Python for Data Analysis 3rd Edition*现在作为[印刷版和数字版](https://amzn.to/3DyLaJc)的伴侣可用。如果您发现任何勘误，请[在此处报告](https://oreilly.com/catalog/0636920519829/errata)。请注意，由Quarto制作的本网站的某些方面与O’Reilly的印刷版和电子书版本的格式不同。'
- en: 'If you find the online edition of the book useful, please consider [ordering
    a paper copy](https://amzn.to/3DyLaJc) or a [DRM-free eBook](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)
    to support the author. The content from this website may not be copied or reproduced.
    The code examples are MIT licensed and can be found on GitHub or Gitee.*  *Time
    series data is an important form of structured data in many different fields,
    such as finance, economics, ecology, neuroscience, and physics. Anything that
    is recorded repeatedly at many points in time forms a time series. Many time series
    are *fixed frequency*, which is to say that data points occur at regular intervals
    according to some rule, such as every 15 seconds, every 5 minutes, or once per
    month. Time series can also be *irregular* without a fixed unit of time or offset
    between units. How you mark and refer to time series data depends on the application,
    and you may have one of the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现本书的在线版本有用，请考虑[订购纸质版](https://amzn.to/3DyLaJc)或[无DRM的电子书](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)以支持作者。本网站的内容不得复制或复制。代码示例采用MIT许可证，可在GitHub或Gitee上找到。*
    *时间序列数据是许多不同领域中的结构化数据的重要形式，如金融、经济、生态学、神经科学和物理学。任何在许多时间点重复记录的东西都构成一个时间序列。许多时间序列是*固定频率*的，也就是说，数据点按照某种规则定期发生，例如每15秒、每5分钟或每月一次。时间序列也可以是*不规则*的，没有固定的时间单位或单位之间的偏移。如何标记和引用时间序列数据取决于应用程序，您可能有以下之一：
- en: Timestamps
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳
- en: Specific instants in time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的时间点。
- en: Fixed periods
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 固定周期
- en: Such as the whole month of January 2017, or the whole year 2020.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如2017年1月的整个月，或2020年的整年。
- en: Intervals of time
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 时间间隔
- en: Indicated by a start and end timestamp. Periods can be thought of as special
    cases of intervals.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由开始和结束时间戳指示。周期可以被视为间隔的特殊情况。
- en: Experiment or elapsed time
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实验或经过的时间
- en: Each timestamp is a measure of time relative to a particular start time (e.g.,
    the diameter of a cookie baking each second since being placed in the oven), starting
    from 0.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个时间戳都是相对于特定开始时间的时间度量（例如，自放入烤箱以来每秒烘烤的饼干的直径），从0开始。
- en: In this chapter, I am mainly concerned with time series in the first three categories,
    though many of the techniques can be applied to experimental time series where
    the index may be an integer or floating-point number indicating elapsed time from
    the start of the experiment. The simplest kind of time series is indexed by timestamp.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我主要关注前三类时间序列，尽管许多技术也可以应用于实验时间序列，其中索引可能是整数或浮点数，表示从实验开始经过的时间。最简单的时间序列是由时间戳索引的。
- en: '*Tip* *pandas also supports indexes based on timedeltas, which can be a useful
    way of representing experiment or elapsed time. We do not explore timedelta indexes
    in this book, but you can learn more in the [pandas documentation](https://pandas.pydata.org).*  *pandas
    provides many built-in time series tools and algorithms. You can efficiently work
    with large time series, and slice and dice, aggregate, and resample irregular-
    and fixed-frequency time series. Some of these tools are useful for financial
    and economics applications, but you could certainly use them to analyze server
    log data, too.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*提示* *pandas还支持基于时间差的索引，这是一种表示实验或经过时间的有用方式。我们在本书中没有探讨时间差索引，但您可以在[pandas文档](https://pandas.pydata.org)中了解更多。*
    *pandas提供了许多内置的时间序列工具和算法。您可以高效地处理大型时间序列，对不规则和固定频率的时间序列进行切片、聚合和重采样。其中一些工具对金融和经济应用很有用，但您当然也可以用它们来分析服务器日志数据。'
- en: 'As with the rest of the chapters, we start by importing NumPy and pandas:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他章节一样，我们首先导入NumPy和pandas：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 11.1 Date and Time Data Types and Tools
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.1 日期和时间数据类型和工具
- en: 'The Python standard library includes data types for date and time data, as
    well as calendar-related functionality. The `datetime`, `time`, and `calendar`
    modules are the main places to start. The `datetime.datetime` type, or simply
    `datetime`, is widely used:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库包括用于日期和时间数据以及与日历相关的功能的数据类型。`datetime`、`time`和`calendar`模块是主要的起点。`datetime.datetime`类型，或简称`datetime`，被广泛使用：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`datetime` stores both the date and time down to the microsecond. `datetime.timedelta`,
    or simply `timedelta`, represents the temporal difference between two `datetime`
    objects:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime` 存储日期和时间，精确到微秒。`datetime.timedelta`，或简称`timedelta`，表示两个`datetime`对象之间的时间差：'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can add (or subtract) a `timedelta` or multiple thereof to a `datetime`
    object to yield a new shifted object:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`timedelta`或其倍数添加（或减去）到`datetime`对象中，以产生一个新的偏移对象：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Table 11.1](#tbl-table_datetime_module) summarizes the data types in the `datetime`
    module. While this chapter is mainly concerned with the data types in pandas and
    higher-level time series manipulation, you may encounter the `datetime`-based
    types in many other places in Python in the wild.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[表11.1](#tbl-table_datetime_module)总结了`datetime`模块中的数据类型。虽然本章主要关注pandas中的数据类型和高级时间序列操作，但您可能会在Python的许多其他地方遇到基于`datetime`的类型。'
- en: 'Table 11.1: Types in the `datetime` module'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.1：`datetime`模块中的类型
- en: '| Type | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `date` | Store calendar date (year, month, day) using the Gregorian calendar
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `date` | 使用公历存储日期（年，月，日） |'
- en: '| `time` | Store time of day as hours, minutes, seconds, and microseconds |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `time` | 以小时，分钟，秒和微秒存储一天中的时间 |'
- en: '| `datetime` | Store both date and time |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `datetime` | 存储日期和时间 |'
- en: '| `timedelta` | The difference between two `datetime` values (as days, seconds,
    and microseconds) |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `timedelta` | 两个`datetime`值之间的差异（以天，秒和微秒计） |'
- en: '| `tzinfo` | Base type for storing time zone information |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `tzinfo` | 存储时区信息的基本类型 |'
- en: Converting Between String and Datetime
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在字符串和日期时间之间转换
- en: 'You can format `datetime` objects and pandas `Timestamp` objects, which I’ll
    introduce later, as strings using `str` or the `strftime` method, passing a format
    specification:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`str`或`strftime`方法对`datetime`对象和pandas的`Timestamp`对象进行格式化为字符串，传递格式规范：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: See [Table 11.2](#tbl-table_datetime_formatting) for a complete list of the
    format codes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[表11.2](#tbl-table_datetime_formatting)以获取完整的格式代码列表。
- en: 'Table 11.2: `datetime` format specification (ISO C89 compatible)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.2：`datetime`格式规范（ISO C89兼容）
- en: '| Type | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `%Y` | Four-digit year |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `%Y` | 四位数年份 |'
- en: '| `%y` | Two-digit year |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `%y` | 两位数年份 |'
- en: '| `%m` | Two-digit month [01, 12] |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `%m` | 两位数月份[01, 12] |'
- en: '| `%d` | Two-digit day [01, 31] |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `%d` | 两位数日期[01, 31] |'
- en: '| `%H` | Hour (24-hour clock) [00, 23] |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `%H` | 小时（24小时制）[00, 23] |'
- en: '| `%I` | Hour (12-hour clock) [01, 12] |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `%I` | 小时（12小时制）[01, 12] |'
- en: '| `%M` | Two-digit minute [00, 59] |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `%M` | 两位数分钟[00, 59] |'
- en: '| `%S` | Second [00, 61] (seconds 60, 61 account for leap seconds) |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `%S` | 秒[00, 61]（秒60, 61表示闰秒） |'
- en: '| `%f` | Microsecond as an integer, zero-padded (from 000000 to 999999) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `%f` | 微秒作为整数，零填充（从000000到999999） |'
- en: '| `%j` | Day of the year as a zero-padded integer (from 001 to 336) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `%j` | 一年中的日期作为零填充的整数（从001到336） |'
- en: '| `%w` | Weekday as an integer [0 (Sunday), 6] |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `%w` | 星期几作为整数[0（星期日），6] |'
- en: '| `%u` | Weekday as an integer starting from 1, where 1 is Monday. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `%u` | 从1开始的星期几整数，其中1是星期一。 |'
- en: '| `%U` | Week number of the year [00, 53]; Sunday is considered the first day
    of the week, and days before the first Sunday of the year are “week 0” |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `%U` | 一年中的周数[00, 53]; 星期日被认为是一周的第一天，年初第一个星期日之前的日子被称为“第0周” |'
- en: '| `%W` | Week number of the year [00, 53]; Monday is considered the first day
    of the week, and days before the first Monday of the year are “week 0” |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `%W` | 一年中的周数[00, 53]; 星期一被认为是一周的第一天，年初第一个星期一之前的日子被称为“第0周” |'
- en: '| `%z` | UTC time zone offset as `+HHMM` or `-HHMM`; empty if time zone naive
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `%z` | UTC时区偏移为`+HHMM`或`-HHMM`; 如果时区是naive，则为空 |'
- en: '| `%Z` | Time zone name as a string, or empty string if no time zone |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `%Z` | 时区名称作为字符串，如果没有时区则为空字符串 |'
- en: '| `%F` | Shortcut for `%Y-%m-%d` (e.g., `2012-4-18`) |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `%F` | `%Y-%m-%d`的快捷方式（例如，`2012-4-18`） |'
- en: '| `%D` | Shortcut for `%m/%d/%y` (e.g., `04/18/12`) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `%D` | `%m/%d/%y`的快捷方式（例如，`04/18/12`） |'
- en: 'You can use many of the same format codes to convert strings to dates using
    `datetime.strptime` (but some codes, like `%F`, cannot be used):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用许多相同的格式代码使用`datetime.strptime`将字符串转换为日期（但是一些代码，如`%F`，不能使用）：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`datetime.strptime` is one way to parse a date with a known format.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime.strptime` 是一种解析具有已知格式的日期的方法。'
- en: 'pandas is generally oriented toward working with arrays of dates, whether used
    as an axis index or a column in a DataFrame. The `pandas.to_datetime` method parses
    many different kinds of date representations. Standard date formats like ISO 8601
    can be parsed quickly:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: pandas通常面向处理日期数组，无论是作为轴索引还是数据框中的列。`pandas.to_datetime`方法解析许多不同类型的日期表示。标准日期格式如ISO
    8601可以快速解析：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It also handles values that should be considered missing (`None`, empty string,
    etc.):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它还处理应被视为缺失的值（`None`，空字符串等）：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`NaT` (Not a Time) is pandas’s null value for timestamp data.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaT`（不是时间）是pandas中的时间戳数据的空值。'
- en: '*Caution* *`dateutil.parser` is a useful but imperfect tool. Notably, it will
    recognize some strings as dates that you might prefer that it didn’t; for example,
    `"42"` will be parsed as the year `2042` with today’s calendar date.*  *`datetime`
    objects also have a number of locale-specific formatting options for systems in
    other countries or languages. For example, the abbreviated month names will be
    different on German or French systems compared with English systems. See [Table 11.3](#tbl-table_datetime_formatting_locale)
    for a listing.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *`dateutil.parser`是一个有用但不完美的工具。值得注意的是，它会将一些字符串识别为日期，而您可能希望它不会；例如，“42”将被解析为年份`2042`与今天的日历日期相对应。*  *`datetime`对象还具有许多针对其他国家或语言系统的特定于区域的格式选项。例如，德国或法国系统上的缩写月份名称与英语系统上的不同。请参阅[表11.3](#tbl-table_datetime_formatting_locale)以获取列表。'
- en: 'Table 11.3: Locale-specific date formatting'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.3：特定于区域的日期格式化
- en: '| Type | Description |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `%a` | Abbreviated weekday name |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `%a` | 缩写的星期几名称 |'
- en: '| `%A` | Full weekday name |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `%A` | 完整的星期几名称 |'
- en: '| `%b` | Abbreviated month name |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `%b` | 缩写的月份名称 |'
- en: '| `%B` | Full month name |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `%B` | 完整的月份名称 |'
- en: '| `%c` | Full date and time (e.g., ‘Tue 01 May 2012 04:20:57 PM’) |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `%c` | 完整的日期和时间（例如，‘周二 2012年5月1日 下午04:20:57’） |'
- en: '| `%p` | Locale equivalent of AM or PM |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `%p` | AM或PM的本地等效 |'
- en: '| `%x` | Locale-appropriate formatted date (e.g., in the United States, May
    1, 2012 yields ‘05/01/2012’) |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `%x` | 本地适用的格式化日期（例如，在美国，2012年5月1日为‘05/01/2012’） |'
- en: '| `%X` | Locale-appropriate time (e.g., ‘04:24:12 PM’) |*  *## 11.2 Time Series
    Basics'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '| `%X` | 本地适用的时间（例如，‘下午04:24:12’） |*  *## 11.2 时间序列基础知识'
- en: 'A basic kind of time series object in pandas is a Series indexed by timestamps,
    which is often represented outside of pandas as Python strings or `datetime` objects:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: pandas中的一种基本类型的时间序列对象是由时间戳索引的Series，通常在pandas之外表示为Python字符串或`datetime`对象：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Under the hood, these `datetime` objects have been put in a `DatetimeIndex`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，这些`datetime`对象已被放入`DatetimeIndex`中：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Like other Series, arithmetic operations between differently indexed time series
    automatically align on the dates:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他Series一样，不同索引的时间序列之间的算术运算会自动对齐日期：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Recall that `ts[::2]` selects every second element in `ts`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`ts[::2]`选择`ts`中的每个第二个元素。
- en: 'pandas stores timestamps using NumPy’s `datetime64` data type at the nanosecond
    resolution:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: pandas使用NumPy的`datetime64`数据类型以纳秒分辨率存储时间戳：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Scalar values from a `DatetimeIndex` are pandas `Timestamp` objects:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 来自`DatetimeIndex`的标量值是pandas的`Timestamp`对象：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A `pandas.Timestamp` can be substituted most places where you would use a `datetime`
    object. The reverse is not true, however, because `pandas.Timestamp` can store
    nanosecond precision data, while `datetime` stores only up to microseconds. Additionally,
    `pandas.Timestamp` can store frequency information (if any) and understands how
    to do time zone conversions and other kinds of manipulations. More on both of
    these things later in [Time Zone Handling](#tseries_time_zones).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.Timestamp`可以替代大多数您将使用`datetime`对象的地方。然而，反之则不成立，因为`pandas.Timestamp`可以存储纳秒精度数据，而`datetime`仅存储微秒精度。此外，`pandas.Timestamp`可以存储频率信息（如果有的话），并且了解如何执行时区转换和其他类型的操作。稍后在[时区处理](#tseries_time_zones)中会更详细地介绍这两个方面。'
- en: Indexing, Selection, Subsetting
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 索引、选择、子集
- en: 'Time series behaves like any other Series when you are indexing and selecting
    data based on the label:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当您根据标签索引和选择数据时，时间序列的行为与任何其他Series相同：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As a convenience, you can also pass a string that is interpretable as a date:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，您还可以传递一个可解释为日期的字符串：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For longer time series, a year or only a year and month can be passed to easily
    select slices of data (`pandas.date_range` is discussed in more detail in [Generating
    Date Ranges](#tseries_fixed_date_range)):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更长的时间序列，可以传递一年或仅一年和一个月以轻松选择数据的片段（`pandas.date_range`在[生成日期范围](#tseries_fixed_date_range)中有更详细的讨论）：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here, the string `"2001"` is interpreted as a year and selects that time period.
    This also works if you specify the month:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，字符串“2001”被解释为一年，并选择了那个时间段。如果指定月份，也可以这样做：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Slicing with `datetime` objects works as well:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`datetime`对象进行切片也是有效的：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Because most time series data is ordered chronologically, you can slice with
    timestamps not contained in a time series to perform a range query:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因为大多数时间序列数据是按时间顺序排列的，所以可以使用不包含在时间序列中的时间戳进行切片以执行范围查询：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As before, you can pass a string date, `datetime`, or timestamp. Remember that
    slicing in this manner produces views on the source time series, like slicing
    NumPy arrays. This means that no data is copied, and modifications on the slice
    will be reflected in the original data.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，您可以传递字符串日期、`datetime`或时间戳。请记住，以这种方式切片会在源时间序列上产生视图，就像在NumPy数组上切片一样。这意味着不会复制任何数据，并且对切片的修改将反映在原始数据中。
- en: 'There is an equivalent instance method, `truncate`, that slices a Series between
    two dates:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个等效的实例方法，`truncate`，它在两个日期之间切片一个Series：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'All of this holds true for DataFrame as well, indexing on its rows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DataFrame来说，所有这些都是正确的，可以对其行进行索引：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Time Series with Duplicate Indices
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有重复索引的时间序列
- en: 'In some applications, there may be multiple data observations falling on a
    particular timestamp. Here is an example:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，可能会有多个数据观测值落在特定的时间戳上。这里是一个例子：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can tell that the index is not unique by checking its `is_unique` property:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查其`is_unique`属性来确定索引不是唯一的：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Indexing into this time series will now either produce scalar values or slices,
    depending on whether a timestamp is duplicated:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对这个时间序列进行索引将产生标量值或切片，具体取决于时间戳是否重复：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Suppose you wanted to aggregate the data having nonunique timestamps. One way
    to do this is to use `groupby` and pass `level=0` (the one and only level):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要聚合具有非唯一时间戳的数据。一种方法是使用`groupby`并传递`level=0`（唯一的级别）：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 11.3 Date Ranges, Frequencies, and Shifting
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.3 日期范围、频率和移位
- en: 'Generic time series in pandas are assumed to be irregular; that is, they have
    no fixed frequency. For many applications this is sufficient. However, it’s often
    desirable to work relative to a fixed frequency, such as daily, monthly, or every
    15 minutes, even if that means introducing missing values into a time series.
    Fortunately, pandas has a full suite of standard time series frequencies and tools
    for resampling (discussed in more detail later in [Resampling and Frequency Conversion](#tseries_resampling)),
    inferring frequencies, and generating fixed-frequency date ranges. For example,
    you can convert the sample time series to fixed daily frequency by calling `resample`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，通常假定通用时间序列是不规则的；也就是说，它们没有固定的频率。对于许多应用程序来说，这是足够的。然而，通常希望相对于固定频率（如每日、每月或每15分钟）进行工作，即使这意味着在时间序列中引入缺失值。幸运的是，pandas具有一整套标准时间序列频率和重新采样工具（稍后在[重新采样和频率转换](#tseries_resampling)中更详细地讨论），可以推断频率并生成固定频率的日期范围。例如，您可以通过调用`resample`将示例时间序列转换为固定的每日频率：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The string `"D"` is interpreted as daily frequency.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串“D”被解释为每日频率。
- en: Conversion between frequencies or *resampling* is a big enough topic to have
    its own section later ([Resampling and Frequency Conversion](#tseries_resampling)).
    Here, I’ll show you how to use the base frequencies and multiples thereof.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在频率之间的转换或*重新采样*是一个足够大的主题，后面会有自己的部分（[重新采样和频率转换](#tseries_resampling)）。在这里，我将向您展示如何使用基本频率及其倍数。
- en: Generating Date Ranges
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成日期范围
- en: 'While I used it previously without explanation, `pandas.date_range` is responsible
    for generating a `DatetimeIndex` with an indicated length according to a particular
    frequency:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我之前没有解释过，但`pandas.date_range`负责根据特定频率生成具有指定长度的`DatetimeIndex`：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'By default, `pandas.date_range` generates daily timestamps. If you pass only
    a start or end date, you must pass a number of periods to generate:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`pandas.date_range`生成每日时间戳。如果只传递开始或结束日期，必须传递一个周期数来生成：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The start and end dates define strict boundaries for the generated date index.
    For example, if you wanted a date index containing the last business day of each
    month, you would pass the `"BM"` frequency (business end of month; see a more
    complete listing of frequencies in [Table 11.4](#tbl-table_base_frequencies)),
    and only dates falling on or inside the date interval will be included:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和结束日期为生成的日期索引定义了严格的边界。例如，如果您想要一个包含每个月最后一个工作日的日期索引，您将传递 `"BM"` 频率（月底的工作日；请参阅
    [Table 11.4](#tbl-table_base_frequencies) 中更完整的频率列表），只有落在日期区间内或日期区间内的日期将被包括：
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Table 11.4: Base time series frequencies (not comprehensive)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'Table 11.4: 基础时间序列频率（不全面）'
- en: '| Alias | Offset type | Description |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 别名 | 偏移类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `D` | `Day` | Calendar daily |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `D` | `Day` | 日历日 |'
- en: '| `B` | `BusinessDay` | Business daily |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `B` | `BusinessDay` | 工作日 |'
- en: '| `H` | `Hour` | Hourly |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `H` | `Hour` | 每小时 |'
- en: '| `T` or `min` | `Minute` | Once a minute |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `T` 或 `min` | `Minute` | 每分钟一次 |'
- en: '| `S` | `Second` | Once a second |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `S` | `Second` | 每秒一次 |'
- en: '| `L` or `ms` | `Milli` | Millisecond (1/1,000 of 1 second) |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `L` 或 `ms` | `Milli` | 毫秒（1秒的1/1,000） |'
- en: '| `U` | `Micro` | Microsecond (1/1,000,000 of 1 second) |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `U` | `Micro` | 微秒（1秒的1/1,000,000） |'
- en: '| `M` | `MonthEnd` | Last calendar day of month |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `M` | `MonthEnd` | 月份的最后一个日历日 |'
- en: '| `BM` | `BusinessMonthEnd` | Last business day (weekday) of month |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `BM` | `BusinessMonthEnd` | 月份的最后一个工作日（工作日） |'
- en: '| `MS` | `MonthBegin` | First calendar day of month |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `MS` | `MonthBegin` | 月份的第一个日历日 |'
- en: '| `BMS` | `BusinessMonthBegin` | First weekday of month |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `BMS` | `BusinessMonthBegin` | 月份的第一个工作日 |'
- en: '| `W-MON, W-TUE, ...` | `Week` | Weekly on given day of week (MON, TUE, WED,
    THU, FRI, SAT, or SUN) |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `W-MON, W-TUE, ...` | `Week` | 每周在给定星期的某一天（MON、TUE、WED、THU、FRI、SAT 或 SUN）
    |'
- en: '| `WOM-1MON, WOM-2MON, ...` | `WeekOfMonth` | Generate weekly dates in the
    first, second, third, or fourth week of the month (e.g., `WOM-3FRI` for the third
    Friday of each month) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `WOM-1MON, WOM-2MON, ...` | `WeekOfMonth` | 在月份的第一、第二、第三或第四周生成每周日期（例如，每月的第三个星期五为
    `WOM-3FRI`） |'
- en: '| `Q-JAN, Q-FEB, ...` | `QuarterEnd` | Quarterly dates anchored on last calendar
    day of each month, for year ending in indicated month (JAN, FEB, MAR, APR, MAY,
    JUN, JUL, AUG, SEP, OCT, NOV, or DEC) |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `Q-JAN, Q-FEB, ...` | `QuarterEnd` | 季度日期锚定在每个月的最后一个日历日，年终在指定月份（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV
    或 DEC） |'
- en: '| `BQ-JAN, BQ-FEB, ...` | `BusinessQuarterEnd` | Quarterly dates anchored on
    last weekday day of each month, for year ending in indicated month |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `BQ-JAN, BQ-FEB, ...` | `BusinessQuarterEnd` | 季度日期锚定在每个月的最后一个工作日，年终在指定月份
    |'
- en: '| `QS-JAN, QS-FEB, ...` | `QuarterBegin` | Quarterly dates anchored on first
    calendar day of each month, for year ending in indicated month |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `QS-JAN, QS-FEB, ...` | `QuarterBegin` | 季度日期锚定在每个月的第一个日历日，年终在指定月份 |'
- en: '| `BQS-JAN, BQS-FEB, ...` | `BusinessQuarterBegin` | Quarterly dates anchored
    on first weekday day of each month, for year ending in indicated month |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `BQS-JAN, BQS-FEB, ...` | `BusinessQuarterBegin` | 季度日期锚定在每个月的第一个工作日，年终在指定月份
    |'
- en: '| `A-JAN, A-FEB, ...` | `YearEnd` | Annual dates anchored on last calendar
    day of given month (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, or
    DEC) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `A-JAN, A-FEB, ...` | `YearEnd` | 年度日期锚定在给定月份的最后一个日历日（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV
    或 DEC） |'
- en: '| `BA-JAN, BA-FEB, ...` | `BusinessYearEnd` | Annual dates anchored on last
    weekday of given month |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `BA-JAN, BA-FEB, ...` | `BusinessYearEnd` | 年度日期锚定在给定月份的最后一个工作日 |'
- en: '| `AS-JAN, AS-FEB, ...` | `YearBegin` | Annual dates anchored on first day
    of given month |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `AS-JAN, AS-FEB, ...` | `YearBegin` | 年度日期锚定在给定月份的第一天 |'
- en: '| `BAS-JAN, BAS-FEB, ...` | `BusinessYearBegin` | Annual dates anchored on
    first weekday of given month |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `BAS-JAN, BAS-FEB, ...` | `BusinessYearBegin` | 年度日期锚定在给定月份的第一个工作日 |'
- en: '`pandas.date_range` by default preserves the time (if any) of the start or
    end timestamp:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas.date_range` 默认保留开始或结束时间戳的时间（如果有）：'
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Sometimes you will have start or end dates with time information but want to
    generate a set of timestamps *normalized* to midnight as a convention. To do this,
    there is a `normalize` option:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您会有带有时间信息的开始或结束日期，但希望生成一组时间戳，*规范化* 为午夜作为约定。为此，有一个 `normalize` 选项：
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Frequencies and Date Offsets
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 频率和日期偏移
- en: 'Frequencies in pandas are composed of a *base frequency* and a multiplier.
    Base frequencies are typically referred to by a string alias, like `"M"` for monthly
    or `"H"` for hourly. For each base frequency, there is an object referred to as
    a *date offset*. For example, hourly frequency can be represented with the `Hour`
    class:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas 中，频率由 *基础频率* 和一个乘数组成。基础频率通常用字符串别名表示，如 `"M"` 表示每月或 `"H"` 表示每小时。对于每个基础频率，都有一个称为
    *日期偏移* 的对象。例如，小时频率可以用 `Hour` 类表示：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can define a multiple of an offset by passing an integer:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过传递一个整数来定义偏移的倍数：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In most applications, you would never need to explicitly create one of these
    objects; instead you''d use a string alias like `"H"` or `"4H"`. Putting an integer
    before the base frequency creates a multiple:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数应用程序中，您通常不需要显式创建这些对象之一；而是使用类似 `"H"` 或 `"4H"` 的字符串别名。在基础频率前放置一个整数会创建一个倍数：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Many offsets can be combined by addition:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 许多偏移可以通过加法组合：
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Similarly, you can pass frequency strings, like `"1h30min"`, that will effectively
    be parsed to the same expression:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以传递频率字符串，如 `"1h30min"`，这将有效地解析为相同的表达式：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Some frequencies describe points in time that are not evenly spaced. For example,
    `"M"` (calendar month end) and `"BM"` (last business/weekday of month) depend
    on the number of days in a month and, in the latter case, whether the month ends
    on a weekend or not. We refer to these as *anchored* offsets.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一些频率描述的是时间点，这些时间点不是均匀间隔的。例如，`"M"`（日历月底）和 `"BM"`（月底的最后一个工作日/工作日）取决于一个月的天数，以及在后一种情况下，月份是否在周末结束。我们将这些称为
    *锚定* 偏移。
- en: Refer to [Table 11.4](#tbl-table_base_frequencies) for a listing of frequency
    codes and date offset classes available in pandas.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [Table 11.4](#tbl-table_base_frequencies) 以获取 pandas 中可用的频率代码和日期偏移类的列表。
- en: '*Note* *Users can define their own custom frequency classes to provide date
    logic not available in pandas, though the full details of that are outside the
    scope of this book.*  *#### Week of month dates'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *用户可以定义自己的自定义频率类，以提供pandas中不可用的日期逻辑，但这些完整的细节超出了本书的范围。*  *#### 月份周日期'
- en: 'One useful frequency class is “week of month,” starting with `WOM`. This enables
    you to get dates like the third Friday of each month:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有用的频率类是“月份周”，从`WOM`开始。这使您可以获得每个月的第三个星期五这样的日期：
- en: '[PRE36]*  *### Shifting (Leading and Lagging) Data'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE36]*  *### 移动（领先和滞后）数据'
- en: '*Shifting* refers to moving data backward and forward through time. Both Series
    and DataFrame have a `shift` method for doing naive shifts forward or backward,
    leaving the index unmodified:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '*移动*指的是通过时间向后和向前移动数据。Series和DataFrame都有一个`shift`方法，用于进行简单的向前或向后移位，保持索引不变：'
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When we shift like this, missing data is introduced either at the start or the
    end of the time series.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们这样移动时，缺失数据会在时间序列的开始或结束引入。
- en: 'A common use of `shift` is computing consecutive percent changes in a time
    series or multiple time series as DataFrame columns. This is expressed as:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`shift`的一个常见用法是计算时间序列或多个时间序列的连续百分比变化作为DataFrame列。这表示为：'
- en: '[PRE38]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Because naive shifts leave the index unmodified, some data is discarded. Thus
    if the frequency is known, it can be passed to `shift` to advance the timestamps
    instead of simply the data:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 因为无时区移位会保持索引不变，所以会丢失一些数据。因此，如果知道频率，可以将其传递给`shift`以推进时间戳，而不仅仅是数据：
- en: '[PRE39]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Other frequencies can be passed, too, giving you some flexibility in how to
    lead and lag the data:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以传递其他频率，这样可以在如何领先和滞后数据方面提供一些灵活性：
- en: '[PRE40]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `T` here stands for minutes. Note that the `freq` parameter here indicates
    the offset to apply to the timestamps, but it does not change the underlying frequency
    of the data, if any.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`T`代表分钟。请注意，这里的`freq`参数表示要应用于时间戳的偏移量，但它不会改变数据的基础频率（如果有的话）。
- en: Shifting dates with offsets
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用偏移移动日期
- en: 'The pandas date offsets can also be used with `datetime` or `Timestamp` objects:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: pandas日期偏移也可以与`datetime`或`Timestamp`对象一起使用：
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'If you add an anchored offset like `MonthEnd`, the first increment will "roll
    forward" a date to the next date according to the frequency rule:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果添加像`MonthEnd`这样的锚定偏移，第一个增量将根据频率规则“向前滚动”日期到下一个日期：
- en: '[PRE42]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Anchored offsets can explicitly “roll” dates forward or backward by simply
    using their `rollforward` and `rollback` methods, respectively:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 锚定偏移可以通过简单使用它们的`rollforward`和`rollback`方法明确地“滚动”日期向前或向后：
- en: '[PRE43]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'A creative use of date offsets is to use these methods with `groupby`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 日期偏移的一个创造性用法是将这些方法与`groupby`一起使用：
- en: '[PRE44]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Of course, an easier and faster way to do this is with `resample` (we''ll discuss
    this in much more depth in [Resampling and Frequency Conversion](#tseries_resampling)):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，更简单更快的方法是使用`resample`（我们将在[重新采样和频率转换](#tseries_resampling)中更深入地讨论这个问题）：
- en: '[PRE45]*  *## 11.4 Time Zone Handling'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE45]*  *## 11.4 时区处理'
- en: Working with time zones can be one of the most unpleasant parts of time series
    manipulation. As a result, many time series users choose to work with time series
    in *coordinated universal time* or *UTC*, which is the geography-independent international
    standard. Time zones are expressed as offsets from UTC; for example, New York
    is four hours behind UTC during daylight saving time (DST) and five hours behind
    the rest of the year.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 与时区一起工作可能是时间序列操作中最不愉快的部分之一。因此，许多时间序列用户选择在*协调世界时*或*UTC*中处理时间序列，这是地理独立的国际标准。时区表示为与UTC的偏移；例如，纽约在夏令时（DST）期间比UTC晚四个小时，在其他时间比UTC晚五个小时。
- en: In Python, time zone information comes from the third-party `pytz` library (installable
    with pip or conda), which exposes the *Olson database*, a compilation of world
    time zone information. This is especially important for historical data because
    the DST transition dates (and even UTC offsets) have been changed numerous times
    depending on the regional laws. In the United States, the DST transition times
    have been changed many times since 1900!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，时区信息来自第三方`pytz`库（可通过pip或conda安装），该库公开了*Olson数据库*，这是世界时区信息的编译。这对于历史数据尤为重要，因为夏令时转换日期（甚至UTC偏移）已根据地区法律多次更改。在美国，自1900年以来，夏令时转换时间已经多次更改！
- en: 'For detailed information about the `pytz` library, you’ll need to look at that
    library’s documentation. As far as this book is concerned, pandas wraps `pytz`’s
    functionality so you can ignore its API outside of the time zone names. Since
    pandas has a hard dependency on `pytz`, it isn''t necessary to install it separately.
    Time zone names can be found interactively and in the docs:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`pytz`库的详细信息，您需要查看该库的文档。就本书而言，pandas封装了`pytz`的功能，因此您可以忽略其API以外的时区名称。由于pandas对`pytz`有硬性依赖，因此不需要单独安装它。时区名称可以在交互式和文档中找到：
- en: '[PRE46]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To get a time zone object from `pytz`, use `pytz.timezone`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`pytz`中获取时区对象，请使用`pytz.timezone`：
- en: '[PRE47]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Methods in pandas will accept either time zone names or these objects.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: pandas中的方法将接受时区名称或这些对象。
- en: Time Zone Localization and Conversion
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时区本地化和转换
- en: 'By default, time series in pandas are *time zone naive*. For example, consider
    the following time series:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，pandas中的时间序列是*时区无关*的。例如，考虑以下时间序列：
- en: '[PRE48]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The index’s `tz` field is `None`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 索引的`tz`字段为`None`：
- en: '[PRE49]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Date ranges can be generated with a time zone set:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 可以生成带有时区设置的日期范围：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Conversion from naive to *localized* (reinterpreted as having been observed
    in a particular time zone) is handled by the `tz_localize` method:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 从无时区转换为*本地化*（重新解释为在特定时区中观察到）由`tz_localize`方法处理：
- en: '[PRE51]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Once a time series has been localized to a particular time zone, it can be
    converted to another time zone with `tz_convert`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦时间序列被本地化到特定的时区，它可以使用`tz_convert`转换为另一个时区：
- en: '[PRE52]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the case of the preceding time series, which straddles a DST transition
    in the `America/New_York` time zone, we could localize to US Eastern time and
    convert to, say, UTC or Berlin time:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述时间序列的情况下，该时间序列跨越了`America/New_York`时区的夏令时转换，我们可以将其本地化为美国东部时间，然后转换为UTC或柏林时间：
- en: '[PRE53]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '`tz_localize` and `tz_convert` are also instance methods on `DatetimeIndex`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`tz_localize`和`tz_convert`也是`DatetimeIndex`的实例方法：'
- en: '[PRE54]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*Caution* *Localizing naive timestamps also checks for ambiguous or non-existent
    times around daylight saving time transitions.*  *### Operations with Time Zone-Aware
    Timestamp Objects'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *本地化无时区时间戳还会检查夏令时转换周围的模糊或不存在的时间。* *### 与时区感知时间戳对象的操作'
- en: 'Similar to time series and date ranges, individual `Timestamp` objects similarly
    can be localized from naive to time zone-aware and converted from one time zone
    to another:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于时间序列和日期范围，个别`Timestamp`对象也可以从无时区转换为时区感知，并从一个时区转换为另一个时区：
- en: '[PRE55]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You can also pass a time zone when creating the `Timestamp`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Timestamp`时也可以传递时区：
- en: '[PRE56]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Time zone-aware `Timestamp` objects internally store a UTC timestamp value
    as nanoseconds since the Unix epoch (January 1, 1970), so changing the time zone
    does not alter the internal UTC value:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 时区感知的`Timestamp`对象在内部以自Unix纪元（1970年1月1日）以来的纳秒为单位存储UTC时间戳值，因此更改时区不会改变内部UTC值：
- en: '[PRE57]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'When performing time arithmetic using pandas’s `DateOffset` objects, pandas
    respects daylight saving time transitions where possible. Here we construct timestamps
    that occur right before DST transitions (forward and backward). First, 30 minutes
    before transitioning to DST:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用pandas的`DateOffset`对象执行时间算术时，pandas会尽可能尊重夏令时转换。这里我们构造了发生在夏令时转换之前的时间戳（向前和向后）。首先，在转换为夏令时前30分钟：
- en: '[PRE58]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Then, 90 minutes before transitioning out of DST:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在夏令时转换前90分钟：
- en: '[PRE59]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Operations Between Different Time Zones
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不同时区之间的操作
- en: 'If two time series with different time zones are combined, the result will
    be UTC. Since the timestamps are stored under the hood in UTC, this is a straightforward
    operation and requires no conversion:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将具有不同时区的两个时间序列组合，结果将是UTC。由于时间戳在UTC下存储，这是一个简单的操作，不需要转换：
- en: '[PRE60]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Operations between time zone-naive and time zone-aware data are not supported
    and will raise an exception.*  *## 11.5 Periods and Period Arithmetic
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 不支持在时区无关和时区感知数据之间进行操作，会引发异常。*## 11.5 周期和周期算术
- en: '*Periods* represent time spans, like days, months, quarters, or years. The
    `pandas.Period` class represents this data type, requiring a string or integer
    and a supported frequency from [Table 11.4](#tbl-table_base_frequencies):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*Periods*代表时间跨度，如天、月、季度或年。`pandas.Period`类表示这种数据类型，需要一个字符串或整数和一个来自[Table 11.4](#tbl-table_base_frequencies)的支持频率：'
- en: '[PRE61]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In this case, the `Period` object represents the full time span from January
    1, 2011, to December 31, 2011, inclusive. Conveniently, adding and subtracting
    integers from periods has the effect of shifting their frequency:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`Period`对象表示从2011年1月1日到2011年12月31日的完整时间跨度。方便的是，从周期中添加和减去整数会改变它们的频率：
- en: '[PRE62]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'If two periods have the same frequency, their difference is the number of units
    between them as a date offset:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个周期具有相同的频率，则它们之间的差异是单位之间的数量作为日期偏移量：
- en: '[PRE63]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Regular ranges of periods can be constructed with the `period_range` function:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`period_range`函数构建周期的常规范围：
- en: '[PRE64]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `PeriodIndex` class stores a sequence of periods and can serve as an axis
    index in any pandas data structure:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`PeriodIndex`类存储一系列周期，并可以作为任何pandas数据结构中的轴索引：'
- en: '[PRE65]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'If you have an array of strings, you can also use the `PeriodIndex` class,
    where all of its values are periods:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个字符串数组，也可以使用`PeriodIndex`类，其中所有值都是周期：
- en: '[PRE66]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Period Frequency Conversion
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 周期频率转换
- en: 'Periods and `PeriodIndex` objects can be converted to another frequency with
    their `asfreq` method. As an example, suppose we had an annual period and wanted
    to convert it into a monthly period either at the start or end of the year. This
    can be done like so:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 周期和`PeriodIndex`对象可以使用它们的`asfreq`方法转换为另一个频率。例如，假设我们有一个年度周期，想要将其转换为每月周期，可以在年初或年末进行。可以这样做：
- en: '[PRE67]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You can think of `Period("2011", "A-DEC")` as being a sort of cursor pointing
    to a span of time, subdivided by monthly periods. See [Figure 11.1](#fig-figure_period_asfreq)
    for an illustration of this. For a *fiscal year* ending on a month other than
    December, the corresponding monthly subperiods are different:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将`Period("2011", "A-DEC")`看作是指向一段时间的光标，由月度周期细分。参见[Figure 11.1](#fig-figure_period_asfreq)以了解这一点。对于以12月以外的月份结束的*财政年度*，相应的月度子周期是不同的：
- en: '[PRE68]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '![](../Images/d8cb52110dd49d0ab8074f78afe0845d.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8cb52110dd49d0ab8074f78afe0845d.png)'
- en: 'Figure 11.1: Period frequency conversion illustration'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：周期频率转换示例
- en: 'When you are converting from high to low frequency, pandas determines the subperiod,
    depending on where the superperiod “belongs.” For example, in `A-JUN` frequency,
    the month `Aug-2011` is actually part of the `2012` period:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从高频率转换为低频率时，pandas会确定子周期，取决于超级周期“属于”哪里。例如，在`A-JUN`频率中，月份`Aug-2011`实际上是`2012`周期的一部分：
- en: '[PRE69]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Whole `PeriodIndex` objects or time series can be similarly converted with
    the same semantics:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`PeriodIndex`对象或时间序列也可以使用相同的语义进行类似转换：
- en: '[PRE70]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Here, the annual periods are replaced with monthly periods corresponding to
    the first month falling within each annual period. If we instead wanted the last
    business day of each year, we can use the `"B"` frequency and indicate that we
    want the end of the period:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，年度周期被替换为对应于每个年度周期中第一个月的月度周期。如果我们希望每年的最后一个工作日，可以使用“B”频率并指示我们想要周期的结束：
- en: '[PRE71]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Quarterly Period Frequencies
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 季度周期频率
- en: 'Quarterly data is standard in accounting, finance, and other fields. Much quarterly
    data is reported relative to a *fiscal year end*, typically the last calendar
    or business day of one of the 12 months of the year. Thus, the period `2012Q4`
    has a different meaning depending on fiscal year end. pandas supports all 12 possible
    quarterly frequencies as `Q-JAN` through `Q-DEC`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 季度数据在会计、金融和其他领域中很常见。许多季度数据是相对于*财年结束*报告的，通常是一年中的12个月的最后一个日历日或工作日。因此，期间 `2012Q4`
    根据财年结束日期的不同具有不同的含义。pandas 支持所有12种可能的季度频率，从 `Q-JAN` 到 `Q-DEC`：
- en: '[PRE72]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'In the case of a fiscal year ending in January, `2012Q4` runs from November
    2011 through January 2012, which you can check by converting to daily frequency:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '在财年结束于一月的情况下，`2012Q4` 从2011年11月到2012年1月，您可以通过转换为每日频率来检查： '
- en: '[PRE73]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: See [Figure 11.2](#fig-figure_quarterly_periods) for an illustration.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [Figure 11.2](#fig-figure_quarterly_periods) 进行说明。
- en: '![](../Images/09caf3da85296866437ce8e683dc7f92.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09caf3da85296866437ce8e683dc7f92.png)'
- en: 'Figure 11.2: Different quarterly frequency conventions'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 11.2: 不同的季度频率约定'
- en: 'Thus, it’s possible to do convenient period arithmetic; for example, to get
    the timestamp at 4 P.M. on the second-to-last business day of the quarter, you
    could do:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以进行方便的期间算术；例如，要获取季度倒数第二个工作日下午4点的时间戳，可以执行以下操作：
- en: '[PRE74]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `to_timestamp` method returns the `Timestamp` at the start of the period
    by default.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`to_timestamp` 方法默认返回期间开始的 `Timestamp`。'
- en: 'You can generate quarterly ranges using `pandas.period_range`. The arithmetic
    is identical, too:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `pandas.period_range` 生成季度范围。算术也是相同的：
- en: '[PRE75]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Converting Timestamps to Periods (and Back)
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将时间戳转换为期间（以及相反）
- en: 'Series and DataFrame objects indexed by timestamps can be converted to periods
    with the `to_period` method:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `to_period` 方法，以时间戳索引的 Series 和 DataFrame 对象可以转换为期间：
- en: '[PRE76]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Since periods refer to nonoverlapping time spans, a timestamp can only belong
    to a single period for a given frequency. While the frequency of the new `PeriodIndex`
    is inferred from the timestamps by default, you can specify any supported frequency
    (most of those listed in [Table 11.4](#tbl-table_base_frequencies) are supported).
    There is also no problem with having duplicate periods in the result:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 由于期间指的是不重叠的时间跨度，因此给定频率的时间戳只能属于一个期间。虽然新的 `PeriodIndex` 的频率默认情况下是根据时间戳推断的，但您可以指定任何支持的频率（大多数列在
    [Table 11.4](#tbl-table_base_frequencies) 中列出的频率都受支持）。在结果中有重复期间也没有问题：
- en: '[PRE77]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'To convert back to timestamps, use the `to_timestamp` method, which returns
    a `DatetimeIndex`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换回时间戳，请使用 `to_timestamp` 方法，该方法返回一个 `DatetimeIndex`：
- en: '[PRE78]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Creating a PeriodIndex from Arrays
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从数组创建 PeriodIndex
- en: 'Fixed frequency datasets are sometimes stored with time span information spread
    across multiple columns. For example, in this macroeconomic dataset, the year
    and quarter are in different columns:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 固定频率数据集有时会存储在跨多列的时间跨度信息中。例如，在这个宏观经济数据集中，年份和季度在不同的列中：
- en: '[PRE79]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'By passing these arrays to `PeriodIndex` with a frequency, you can combine
    them to form an index for the DataFrame:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些数组传递给 `PeriodIndex` 并指定频率，可以将它们组合成 DataFrame 的索引：
- en: '[PRE80]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 11.6 Resampling and Frequency Conversion
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.6 重新采样和频率转换
- en: '*Resampling* refers to the process of converting a time series from one frequency
    to another. Aggregating higher frequency data to lower frequency is called *downsampling*,
    while converting lower frequency to higher frequency is called *upsampling*. Not
    all resampling falls into either of these categories; for example, converting
    `W-WED` (weekly on Wednesday) to `W-FRI` is neither upsampling nor downsampling.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '*重新采样* 指的是将时间序列从一种频率转换为另一种频率的过程。将高频数据聚合到低频称为*下采样*，而将低频转换为高频称为*上采样*。并非所有重新采样都属于这两类；例如，将
    `W-WED`（每周三）转换为 `W-FRI` 既不是上采样也不是下采样。'
- en: 'pandas objects are equipped with a `resample` method, which is the workhorse
    function for all frequency conversion. `resample` has a similar API to `groupby`;
    you call `resample` to group the data, then call an aggregation function:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: pandas 对象配备有一个 `resample` 方法，这是所有频率转换的工作函数。`resample` 具有类似于 `groupby` 的 API；您调用
    `resample` 来对数据进行分组，然后调用聚合函数：
- en: '[PRE81]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`resample` is a flexible method that can be used to process large time series.
    The examples in the following sections illustrate its semantics and use. [Table 11.5](#tbl-table_resample_method)
    summarizes some of its options.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`resample` 是一个灵活的方法，可用于处理大型时间序列。以下部分的示例说明了其语义和用法。[Table 11.5](#tbl-table_resample_method)
    总结了一些选项。'
- en: 'Table 11.5: `resample` method arguments'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 'Table 11.5: `resample` 方法参数'
- en: '| Argument | Description |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `rule` | String, DateOffset, or timedelta indicating desired resampled frequency
    (for example, ’M'', ’5min'', or `Second(15)`) |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `rule` | 字符串、DateOffset 或时间增量，指示所需的重新采样频率（例如，’M''、’5min'' 或 `Second(15)`）
    |'
- en: '| `axis` | Axis to resample on; default `axis=0` |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `axis` | 要重新采样的轴；默认 `axis=0` |'
- en: '| `fill_method` | How to interpolate when upsampling, as in `"ffill"` or `"bfill"`;
    by default does no interpolation |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `fill_method` | 在上采样时如何插值，例如 `"ffill"` 或 `"bfill"`；默认情况下不进行插值 |'
- en: '| `closed` | In downsampling, which end of each interval is closed (inclusive),
    `"right"` or `"left"` |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `closed` | 在下采样时，每个间隔的哪一端是闭合的（包含的），`"right"` 或 `"left"` |'
- en: '| `label` | In downsampling, how to label the aggregated result, with the `"right"`
    or `"left"` bin edge (e.g., the 9:30 to 9:35 five-minute interval could be labeled
    `9:30` or `9:35`) |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `label` | 在下采样时，如何标记聚合结果，使用 `"right"` 或 `"left"` 边界（例如，9:30 到 9:35 五分钟间隔可以标记为
    `9:30` 或 `9:35`） |'
- en: '| `limit` | When forward or backward filling, the maximum number of periods
    to fill |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `limit` | 在向前或向后填充时，要填充的最大周期数 |'
- en: '| `kind` | Aggregate to periods (`"period"`) or timestamps (`"timestamp"`);
    defaults to the type of index the time series has |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `kind` | 聚合到期间（`"period"`）或时间戳（`"timestamp"`）；默认为时间序列具有的索引类型 |'
- en: '| `convention` | When resampling periods, the convention (`"start"` or `"end"`)
    for converting the low-frequency period to high frequency; defaults to `"start"`
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `convention` | 在重新采样周期时，用于将低频周期转换为高频的约定（`"start"`或`"end"`）；默认为`"start"` |'
- en: '| `origin` | The "base" timestamp from which to determine the resampling bin
    edges; can also be one of `"epoch"`, `"start"`, `"start_day"`, `"end"`, or `"end_day"`;
    see the `resample` docstring for full details |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `origin` | 用于确定重新采样箱边缘的“基准”时间戳；也可以是`"epoch"`、`"start"`、`"start_day"`、`"end"`或`"end_day"`之一；有关完整详细信息，请参阅`resample`文档字符串
    |'
- en: '| `offset` | An offset timedelta added to the origin; defaults to `None` |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `offset` | 添加到原点的偏移时间间隔；默认为`None` |'
- en: Downsampling
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下采样
- en: '*Downsampling* is aggregating data to a regular, lower frequency. The data
    you’re aggregating doesn’t need to be fixed frequently; the desired frequency
    defines *bin edges* that are used to slice the time series into pieces to aggregate.
    For example, to convert to monthly, `"M"` or `"BM"`, you need to chop up the data
    into one-month intervals. Each interval is said to be *half-open*; a data point
    can belong only to one interval, and the union of the intervals must make up the
    whole time frame. There are a couple things to think about when using `resample`
    to downsample data:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '*下采样*是将数据聚合到常规、较低的频率。您正在聚合的数据不需要经常固定；所需频率定义了用于将时间序列切片成块以进行聚合的*箱边缘*。例如，要转换为每月，`"M"`或`"BM"`，您需要将数据切割成一个月的间隔。每个间隔被称为*半开放*；数据点只能属于一个间隔，间隔的并集必须构成整个时间范围。在使用`resample`对数据进行下采样时，有几件事需要考虑：'
- en: Which side of each interval is *closed*
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个间隔的哪一侧是*关闭的*
- en: How to label each aggregated bin, either with the start of the interval or the
    end
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为每个聚合的箱子打标签，可以是间隔的开始或结束
- en: 'To illustrate, let’s look at some one-minute frequency data:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，让我们看一些一分钟频率的数据：
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Suppose you wanted to aggregate this data into five-minute chunks or *bars*
    by taking the sum of each group:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要通过将每组的总和来将这些数据聚合成五分钟的块或*条*：
- en: '[PRE83]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The frequency you pass defines bin edges in five-minute increments. For this
    frequency, by default the *left* bin edge is inclusive, so the `00:00` value is
    included in the `00:00` to `00:05` interval, and the `00:05` value is excluded
    from that interval.[¹](#fn1)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您传递的频率定义了以五分钟为增量的箱边缘。对于这个频率，默认情况下*左*箱边缘是包含的，因此`00:00`值包含在`00:00`到`00:05`间隔中，而`00:05`值不包含在该间隔中。[¹](#fn1)
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The resulting time series is labeled by the timestamps from the left side of
    each bin. By passing `label="right"` you can label them with the right bin edge:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的时间序列由每个箱子左侧的时间戳标记。通过传递`label="right"`，您可以使用右侧箱子边缘对它们进行标记：
- en: '[PRE85]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: See [Figure 11.3](#fig-figure_resample_conventions) for an illustration of minute
    frequency data being resampled to five-minute frequency.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[图11.3](#fig-figure_resample_conventions)，以了解将分钟频率数据重新采样为五分钟频率的示例。
- en: '![](../Images/21026aa76a40a42294e16b84e2d400ed.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21026aa76a40a42294e16b84e2d400ed.png)'
- en: 'Figure 11.3: Five-minute resampling illustration of closed, label conventions'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：五分钟重新采样示例，显示了闭合、标签约定
- en: 'Lastly, you might want to shift the result index by some amount, say subtracting
    one second from the right edge to make it more clear which interval the timestamp
    refers to. To do this, add an offset to the resulting index:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可能希望将结果索引向前移动一定量，例如从右边减去一秒，以便更清楚地了解时间戳所指的间隔。要执行此操作，请向结果索引添加一个偏移量：
- en: '[PRE86]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Open-high-low-close (OHLC) resampling
  id: totrans-315
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 开盘-最高-最低-收盘（OHLC）重新采样
- en: 'In finance, a popular way to aggregate a time series is to compute four values
    for each bucket: the first (open), last (close), maximum (high), and minimal (low)
    values. By using the `ohlc` aggregate function, you will obtain a DataFrame having
    columns containing these four aggregates, which are efficiently computed in a
    single function call:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融领域，聚合时间序列的一种流行方式是为每个桶计算四个值：第一个（开盘）、最后一个（收盘）、最大值（最高）和最小值（最低）。通过使用`ohlc`聚合函数，您将获得一个包含这四个聚合值的列的DataFrame，这四个值可以在单个函数调用中高效计算：
- en: '[PRE87]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Upsampling and Interpolation
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上采样和插值
- en: 'Upsampling is converting from a lower frequency to a higher frequency, where
    no aggregation is needed. Let’s consider a DataFrame with some weekly data:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 上采样是将数据从较低频率转换为较高频率，不需要聚合。让我们考虑一个包含一些周数据的DataFrame：
- en: '[PRE88]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'When you are using an aggregation function with this data, there is only one
    value per group, and missing values result in the gaps. We use the `asfreq` method
    to convert to the higher frequency without any aggregation:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用聚合函数处理这些数据时，每组只有一个值，缺失值会导致间隙。我们使用`asfreq`方法将其转换为更高的频率，而不进行任何聚合：
- en: '[PRE89]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Suppose you wanted to fill forward each weekly value on the non-Wednesdays.
    The same filling or interpolation methods available in the `fillna` and `reindex`
    methods are available for resampling:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望在非星期三填充每周值。与`fillna`和`reindex`方法中可用的填充或插值方法相同，对于重新采样也是可用的：
- en: '[PRE90]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'You can similarly choose to only fill a certain number of periods forward to
    limit how far to continue using an observed value:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择仅填充一定数量的周期，以限制使用观察值的范围：
- en: '[PRE91]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Notably, the new date index need not coincide with the old one at all:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，新的日期索引不一定与旧的完全重合：
- en: '[PRE92]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Resampling with Periods
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用周期重新采样
- en: 'Resampling data indexed by periods is similar to timestamps:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 按周期索引的数据重新采样类似于时间戳：
- en: '[PRE93]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Upsampling is more nuanced, as before resampling you must make a decision about
    which end of the time span in the new frequency to place the values. The `convention`
    argument defaults to `"start"` but can also be `"end"`:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 上采样更加微妙，因为在重新采样之前，您必须决定将值放在新频率的时间跨度的哪一端。`convention`参数默认为`"start"`，但也可以是`"end"`：
- en: '[PRE94]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Since periods refer to time spans, the rules about upsampling and downsampling
    are more rigid:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 由于周期指的是时间跨度，因此有关上采样和下采样的规则更为严格：
- en: In downsampling, the target frequency must be a *subperiod* of the source frequency.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下采样中，目标频率必须是源频率的*子周期*。
- en: In upsampling, the target frequency must be a *superperiod* of the source frequency.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上采样中，目标频率必须是源频率的*超周期*。
- en: 'If these rules are not satisfied, an exception will be raised. This mainly
    affects the quarterly, annual, and weekly frequencies; for example, the time spans
    defined by `Q-MAR` only line up with `A-MAR`, `A-JUN`, `A-SEP`, and `A-DEC`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些规则不满足，将会引发异常。这主要影响季度、年度和每周频率；例如，由`Q-MAR`定义的时间跨度只与`A-MAR`、`A-JUN`、`A-SEP`和`A-DEC`对齐：
- en: '[PRE95]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Grouped Time Resampling
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组时间重采样
- en: 'For time series data, the `resample` method is semantically a group operation
    based on a time intervalization. Here''s a small example table:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 对于时间序列数据，`resample`方法在时间间隔化的基础上是一个组操作。这里是一个小例子表：
- en: '[PRE96]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Here, we can index by `"time"` and then resample:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以按`"time"`索引，然后重采样：
- en: '[PRE97]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Suppose that a DataFrame contains multiple time series, marked by an additional
    group key column:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个DataFrame包含多个时间序列，由额外的分组键列标记：
- en: '[PRE98]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'To do the same resampling for each value of `"key"`, we introduce the `pandas.Grouper`
    object:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对每个`"key"`值执行相同的重采样，我们引入`pandas.Grouper`对象：
- en: '[PRE99]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'We can then set the time index, group by `"key"` and `time_key`, and aggregate:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以设置时间索引，按`"key"`和`time_key`分组，并进行聚合：
- en: '[PRE100]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: One constraint with using `pandas.Grouper` is that the time must be the index
    of the Series or DataFrame.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas.Grouper`的一个限制是时间必须是Series或DataFrame的索引。
- en: 11.7 Moving Window Functions
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.7 移动窗口函数
- en: An important class of array transformations used for time series operations
    are statistics and other functions evaluated over a sliding window or with exponentially
    decaying weights. This can be useful for smoothing noisy or gappy data. I call
    these *moving window functions*, even though they include functions without a
    fixed-length window like exponentially weighted moving average. Like other statistical
    functions, these also automatically exclude missing data.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 用于时间序列操作的一类重要的数组转换是在滑动窗口上评估统计数据和其他函数，或者使用指数衰减权重。这对于平滑嘈杂或有缺失数据的数据很有用。我将这些称为*移动窗口函数*，尽管它们包括没有固定长度窗口的函数，比如指数加权移动平均。与其他统计函数一样，这些函数也会自动排除缺失数据。
- en: 'Before digging in, we can load up some time series data and resample it to
    business day frequency:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究之前，我们可以加载一些时间序列数据并将其重采样为工作日频率：
- en: '[PRE101]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'I now introduce the `rolling` operator, which behaves similarly to `resample`
    and `groupby`. It can be called on a Series or DataFrame along with a `window`
    (expressed as a number of periods; see [Apple price with 250-day moving average](#apple_daily_ma250)
    for the plot created):'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在介绍`rolling`运算符，它的行为类似于`resample`和`groupby`。它可以与一个`window`（表示为一定数量的周期）一起在Series或DataFrame上调用（请参见[Apple价格与250日移动平均](#apple_daily_ma250)创建的图）：
- en: '[PRE102]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '![](../Images/592f0eb154cb8af5292d2a938f2b873c.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/592f0eb154cb8af5292d2a938f2b873c.png)'
- en: 'Figure 11.4: Apple price with 250-day moving average'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：苹果价格与250日移动平均值
- en: The expression `rolling(250)` is similar in behavior to `groupby`, but instead
    of grouping, it creates an object that enables grouping over a 250-day sliding
    window. So here we have the 250-day moving window average of Apple's stock price.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`rolling(250)`在行为上类似于`groupby`，但不是分组，而是创建一个对象，使得可以在250天滑动窗口上进行分组。因此，这里是苹果股价的250日移动窗口平均值。
- en: 'By default, rolling functions require all of the values in the window to be
    non-NA. This behavior can be changed to account for missing data and, in particular,
    the fact that you will have fewer than `window` periods of data at the beginning
    of the time series (see [Apple 250-day daily return standard deviation](#apple_daily_std250)):'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，滚动函数要求窗口中的所有值都不是NA。这种行为可以更改以考虑缺失数据，特别是在时间序列开始时将少于`window`周期的数据（请参见[苹果250日每日回报标准差](#apple_daily_std250)）：
- en: '[PRE103]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '![](../Images/d8892398961900d39bbbcf3f01d8da4c.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d8892398961900d39bbbcf3f01d8da4c.png)'
- en: 'Figure 11.5: Apple 250-day daily return standard deviation'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：苹果250日每日回报标准差
- en: 'To compute an *expanding window mean*, use the `expanding` operator instead
    of `rolling`. The expanding mean starts the time window from the same point as
    the rolling window and increases the size of the window until it encompasses the
    whole series. An expanding window mean on the `std250` time series looks like
    this:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算*扩展窗口均值*，请使用`expanding`运算符，而不是`rolling`。扩展均值从与滚动窗口相同的时间窗口开始，并增加窗口的大小，直到包含整个系列。`std250`时间序列上的扩展窗口均值如下所示：
- en: '[PRE104]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Calling a moving window function on a DataFrame applies the transformation
    to each column (see [Stock prices 60-day moving average (log y-axis)](#stocks_daily_ma60)):'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在DataFrame上调用移动窗口函数会将转换应用于每一列（请参见[股价60日移动平均（对数y轴）](#stocks_daily_ma60)）：
- en: '[PRE105]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '![](../Images/e8f4e446ffcb7dd48b59497f44f85dd4.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8f4e446ffcb7dd48b59497f44f85dd4.png)'
- en: 'Figure 11.6: Stock prices 60-day moving average (log y-axis)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：股价60日移动平均（对数y轴）
- en: 'The `rolling` function also accepts a string indicating a fixed-size time offset
    rolling() in moving window functions rather than a set number of periods. Using
    this notation can be useful for irregular time series. These are the same strings
    that you can pass to `resample`. For example, we could compute a 20-day rolling
    mean like so:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`rolling`函数还接受一个字符串，指示固定大小的时间偏移`rolling()`在移动窗口函数中，而不是一组周期。使用这种表示法对于不规则的时间序列很有用。这些是您可以传递给`resample`的相同字符串。例如，我们可以这样计算20天的滚动均值：'
- en: '[PRE106]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Exponentially Weighted Functions
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指数加权函数
- en: An alternative to using a fixed window size with equally weighted observations
    is to specify a constant *decay factor* to give more weight to more recent observations.
    There are a couple of ways to specify the decay factor. A popular one is using
    a *span*, which makes the result comparable to a simple moving window function
    with window size equal to the span.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 使用固定窗口大小和等权观测值的替代方法是指定一个恒定的*衰减因子*，以赋予更多权重给最近的观测值。有几种指定衰减因子的方法。一种流行的方法是使用*跨度*，使结果与窗口大小等于跨度的简单移动窗口函数可比较。
- en: Since an exponentially weighted statistic places more weight on more recent
    observations, it “adapts” faster to changes compared with the equal-weighted version.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 由于指数加权统计对最近的观察结果赋予更大的权重，与等权重版本相比，它更快地“适应”变化。
- en: 'pandas has the `ewm` operator (which stands for exponentially weighted moving)
    to go along with `rolling` and `expanding`. Here’s an example comparing a 30-day
    moving average of Apple’s stock price with an exponentially weighted (EW) moving
    average with `span=60` (see [Simple moving average versus exponentially weighted](#timeseries_ewma)):'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: pandas有`ewm`运算符（代表指数加权移动），与`rolling`和`expanding`配合使用。以下是一个示例，比较了苹果公司股价的30天移动平均值与指数加权（EW）移动平均值（`span=60`）（请参阅[简单移动平均与指数加权](#timeseries_ewma)）：
- en: '[PRE107]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '![](../Images/597f66552cc2eb32618fc4fb8471c04d.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/597f66552cc2eb32618fc4fb8471c04d.png)'
- en: 'Figure 11.7: Simple moving average versus exponentially weighted'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：简单移动平均与指数加权
- en: Binary Moving Window Functions
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二进制移动窗口函数
- en: 'Some statistical operators, like correlation and covariance, need to operate
    on two time series. As an example, financial analysts are often interested in
    a stock’s correlation to a benchmark index like the S&P 500\. To have a look at
    this, we first compute the percent change for all of our time series of interest:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 一些统计运算符，如相关性和协方差，需要在两个时间序列上操作。例如，金融分析师通常对股票与标普500等基准指数的相关性感兴趣。为了查看这一点，我们首先计算所有感兴趣时间序列的百分比变化：
- en: '[PRE108]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'After we call `rolling`, the `corr` aggregation function can then compute the
    rolling correlation with `spx_rets` (see [Six-month AAPL return correlation to
    S&P 500](#roll_correl_aapl) for the resulting plot):'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们调用`rolling`之后，`corr`聚合函数可以计算与`spx_rets`的滚动相关性（请参阅[苹果公司六个月回报与标普500的相关性](#roll_correl_aapl)以查看结果图）：
- en: '[PRE109]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '![](../Images/071a15ee104f8b18492d67565b62e3bc.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/071a15ee104f8b18492d67565b62e3bc.png)'
- en: 'Figure 11.8: Six-month AAPL return correlation to S&P 500'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8：苹果公司六个月回报与标普500的相关性
- en: Suppose you wanted to compute the rolling correlation of the S&P 500 index with
    many stocks at once. You could write a loop computing this for each stock like
    we did for Apple above, but if each stock is a column in a single DataFrame, we
    can compute all of the rolling correlations in one shot by calling `rolling` on
    the DataFrame and passing the `spx_rets` Series.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要计算S&P 500指数与多只股票的滚动相关性。您可以像我们上面为苹果公司所做的那样编写一个循环来计算每只股票的相关性，但如果每只股票是单个DataFrame中的一列，我们可以通过在DataFrame上调用`rolling`并传递`spx_rets`
    Series来一次性计算所有滚动相关性。
- en: 'See [Six-month return correlations to S&P 500](#roll_correl_all) for the plot
    of the result:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[与标普500的六个月回报相关性](#roll_correl_all)以查看结果图：
- en: '[PRE110]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '![](../Images/898f6a6974d281ac4a87524fcabc2566.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/898f6a6974d281ac4a87524fcabc2566.png)'
- en: 'Figure 11.9: Six-month return correlations to S&P 500'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9：与标普500的六个月回报相关性
- en: User-Defined Moving Window Functions
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户定义的移动窗口函数
- en: 'The `apply` method on `rolling` and related methods provides a way to apply
    an array function of your own creation over a moving window. The only requirement
    is that the function produce a single value (a reduction) from each piece of the
    array. For example, while we can compute sample quantiles using `rolling(...).quantile(q)`,
    we might be interested in the percentile rank of a particular value over the sample.
    The `scipy.stats.percentileofscore` function does just this (see [Percentile rank
    of 2% AAPL return over one-year window](#roll_apply_ex) for the resulting plot):'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`rolling`和相关方法上的`apply`方法提供了一种方法，可以在移动窗口上应用自己创建的数组函数。唯一的要求是函数从数组的每个部分产生一个单一值（一个减少）。例如，虽然我们可以使用`rolling(...).quantile(q)`计算样本分位数，但我们可能对特定值在样本中的百分位数感兴趣。`scipy.stats.percentileofscore`函数正是这样做的（请参阅[2%苹果公司回报在一年窗口内的百分位数](#roll_apply_ex)以查看结果图）：'
- en: '[PRE111]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '![](../Images/b686da0f6b499292c1b338fdebcddfef.png)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b686da0f6b499292c1b338fdebcddfef.png)'
- en: 'Figure 11.10: Percentile rank of 2% AAPL return over one-year window'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10：2%苹果公司回报在一年窗口内的百分位数
- en: 'If you don''t have SciPy installed already, you can install it with conda or
    pip:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装SciPy，可以使用conda或pip进行安装：
- en: '[PRE112]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 11.8 Conclusion
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.8 结论
- en: Time series data calls for different types of analysis and data transformation
    tools than the other types of data we have explored in previous chapters.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据需要不同类型的分析和数据转换工具，与我们在之前章节中探讨过的其他类型数据不同。
- en: In the following chapter, we will show how to start using modeling libraries
    like statsmodels and scikit-learn.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将展示如何开始使用建模库，如statsmodels和scikit-learn。
- en: '* * *'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The choice of the default values for `closed` and `label` might seem a bit odd
    to some users. The default is `closed="left"` for all but a specific set (`"M"`,
    `"A"`, `"Q"`, `"BM"`, `"BQ"`, and `"W"`) for which the default is `closed="right"`.
    The defaults were chosen to make the results more intuitive, but it is worth knowing
    that the default is not always one or the other.[↩︎](#fnref1)*****
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`closed`和`label`的默认值选择可能对一些用户来说有点奇怪。默认值为`closed="left"`，除了一组特定的值（`"M"`、`"A"`、`"Q"`、`"BM"`、`"BQ"`和`"W"`）默认为`closed="right"`。选择默认值是为了使结果更直观，但值得知道默认值并不总是一个或另一个。[↩︎](#fnref1)*****
