- en: Chapter 4\. Linear Algebra
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章\. 线性代数
- en: Is there anything more useless or less useful than algebra?
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有比代数更无用或更少有用的东西吗？
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Billy Connolly
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 比利·康诺利
- en: Linear algebra is the branch of mathematics that deals with *vector spaces*.
    Although I can’t hope to teach you linear algebra in a brief chapter, it underpins
    a large number of data science concepts and techniques, which means I owe it to
    you to at least try. What we learn in this chapter we’ll use heavily throughout
    the rest of the book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数是处理*向量空间*的数学分支。虽然我不能指望在简短的章节中教给您线性代数，但它是许多数据科学概念和技术的基础，这意味着我至少应该尝试一下。我们在本章学到的内容将在本书的其余部分中广泛使用。
- en: Vectors
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量
- en: Abstractly, *vectors* are objects that can be added together to form new vectors
    and that can be multiplied by *scalars* (i.e., numbers), also to form new vectors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象地说，*向量*是可以相加以形成新向量的对象，并且可以乘以*标量*（即数字），也可以形成新向量。
- en: Concretely (for us), vectors are points in some finite-dimensional space. Although
    you might not think of your data as vectors, they are often a useful way to represent
    numeric data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说（对于我们而言），向量是某个有限维空间中的点。尽管您可能不认为自己的数据是向量，但它们通常是表示数值数据的有用方式。
- en: For example, if you have the heights, weights, and ages of a large number of
    people, you can treat your data as three-dimensional vectors `[height, weight,
    age]`. If you’re teaching a class with four exams, you can treat student grades
    as four-dimensional vectors `[exam1, exam2, exam3, exam4]`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有许多人的身高、体重和年龄数据，您可以将您的数据视为三维向量`[height, weight, age]`。如果您正在教授一个有四次考试的班级，您可以将学生的成绩视为四维向量`[exam1,
    exam2, exam3, exam4]`。
- en: The simplest from-scratch approach is to represent vectors as lists of numbers.
    A list of three numbers corresponds to a vector in three-dimensional space, and
    vice versa.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始的最简单方法是将向量表示为数字列表。三个数字的列表对应于三维空间中的一个向量，反之亦然。
- en: 'We’ll accomplish this with a type alias that says a `Vector` is just a `list`
    of `float`s:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个类型别名来实现，即 `Vector` 只是 `float` 的 `list`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We’ll also want to perform *arithmetic* on vectors. Because Python `list`s aren’t
    vectors (and hence provide no facilities for vector arithmetic), we’ll need to
    build these arithmetic tools ourselves. So let’s start with that.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望在向量上执行*算术运算*。因为 Python 的 `list` 不是向量（因此不提供向量算术的工具），我们需要自己构建这些算术工具。所以让我们从这里开始。
- en: To begin with, we’ll frequently need to add two vectors. Vectors add *componentwise*.
    This means that if two vectors `v` and `w` are the same length, their sum is just
    the vector whose first element is `v[0] + w[0]`, whose second element is `v[1]
    + w[1]`, and so on. (If they’re not the same length, then we’re not allowed to
    add them.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们经常需要添加两个向量。向量是*分量相加*的。这意味着如果两个向量`v`和`w`长度相同，则它们的和就是一个向量，其第一个元素是`v[0] +
    w[0]`，第二个元素是`v[1] + w[1]`，依此类推。（如果它们长度不同，则不允许将它们相加。）
- en: For example, adding the vectors `[1, 2]` and `[2, 1]` results in `[1 + 2, 2
    + 1]` or `[3, 3]`, as shown in [Figure 4-1](#adding_two_vectors).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将向量 `[1, 2]` 和 `[2, 1]` 相加的结果是 `[1 + 2, 2 + 1]` 或 `[3, 3]`，如[图 4-1](#adding_two_vectors)所示。
- en: '![Adding two vectors.](assets/dsf2_0401.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![添加两个向量。](assets/dsf2_0401.png)'
- en: Figure 4-1\. Adding two vectors
  id: totrans-16
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 添加两个向量
- en: 'We can easily implement this by `zip`-ing the vectors together and using a
    list comprehension to add the corresponding elements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `zip` 将向量一起并使用列表推导来添加相应元素来轻松实现这一点：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, to subtract two vectors we just subtract the corresponding elements:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要减去两个向量，我们只需减去相应的元素：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We’ll also sometimes want to componentwise sum a list of vectors—that is, create
    a new vector whose first element is the sum of all the first elements, whose second
    element is the sum of all the second elements, and so on:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时还希望对向量列表进行分量求和，即创建一个新向量，其第一个元素是所有第一个元素的和，第二个元素是所有第二个元素的和，依此类推：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We’ll also need to be able to multiply a vector by a scalar, which we do simply
    by multiplying each element of the vector by that number:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要能够将向量乘以标量，这可以通过将向量的每个元素乘以该数来简单实现：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This allows us to compute the componentwise means of a list of (same-sized)
    vectors:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够计算（相同大小的）向量列表的分量均值：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A less obvious tool is the *dot product*. The dot product of two vectors is
    the sum of their componentwise products:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不那么明显的工具是*点积*。两个向量的点积是它们各分量的乘积之和：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If `w` has magnitude 1, the dot product measures how far the vector `v` extends
    in the `w` direction. For example, if `w = [1, 0]`, then `dot(v, w)` is just the
    first component of `v`. Another way of saying this is that it’s the length of
    the vector you’d get if you *projected* `v` onto `w` ([Figure 4-2](#dot_product_as_vector_projection)).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`w`的大小为1，则点积测量向量`v`在`w`方向延伸的距离。例如，如果`w = [1, 0]`，那么`dot(v, w)`就是`v`的第一个分量。另一种说法是，这是您在*将v投影到w*上时获得的向量的长度（[图4-2](#dot_product_as_vector_projection)）。
- en: '![Dot product as a vector projection.](assets/dsf2_0402.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![作为向量投影的点积。](assets/dsf2_0402.png)'
- en: Figure 4-2\. The dot product as vector projection
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4-2。向量投影的点积
- en: 'Using this, it’s easy to compute a vector’s *sum of squares*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个方法，计算一个向量的*平方和*很容易：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'which we can use to compute its *magnitude* (or length):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用它来计算其*大小*（或长度）：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now have all the pieces we need to compute the distance between two vectors,
    defined as:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经有了计算两个向量之间距离的所有要素，定义为：
- en: <math alttext="StartRoot left-parenthesis v 1 minus w 1 right-parenthesis squared
    plus ellipsis plus left-parenthesis v Subscript n Baseline minus w Subscript n
    Baseline right-parenthesis squared EndRoot" display="block"><msqrt><mrow><msup><mrow><mo>(</mo><msub><mi>v</mi>
    <mn>1</mn></msub> <mo>-</mo><msub><mi>w</mi> <mn>1</mn></msub> <mo>)</mo></mrow>
    <mn>2</mn></msup> <mo>+</mo> <mo>...</mo> <mo>+</mo> <msup><mrow><mo>(</mo><msub><mi>v</mi>
    <mi>n</mi></msub> <mo>-</mo><msub><mi>w</mi> <mi>n</mi></msub> <mo>)</mo></mrow>
    <mn>2</mn></msup></mrow></msqrt></math>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <math alttext="StartRoot left-parenthesis v 1 minus w 1 right-parenthesis squared
    plus ellipsis plus left-parenthesis v Subscript n Baseline minus w Subscript n
    Baseline right-parenthesis squared EndRoot" display="block"><msqrt><mrow><msup><mrow><mo>(</mo><msub><mi>v</mi>
    <mn>1</mn></msub> <mo>-</mo><msub><mi>w</mi> <mn>1</mn></msub> <mo>)</mo></mrow>
    <mn>2</mn></msup> <mo>+</mo> <mo>...</mo> <mo>+</mo> <msup><mrow><mo>(</mo><msub><mi>v</mi>
    <mi>n</mi></msub> <mo>-</mo><msub><mi>w</mi> <mi>n</mi></msub> <mo>)</mo></mrow>
    <mn>2</mn></msup></mrow></msqrt></math>
- en: 'In code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is possibly clearer if we write it as (the equivalent):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其写为（等价的）形式，则可能更清楚：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That should be plenty to get us started. We’ll be using these functions heavily
    throughout the book.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该足以让我们开始了。我们将在整本书中大量使用这些函数。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Using lists as vectors is great for exposition but terrible for performance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将列表用作向量在阐述上很好，但在性能上很差。
- en: In production code, you would want to use the NumPy library, which includes
    a high-performance array class with all sorts of arithmetic operations included.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产代码中，您会希望使用NumPy库，该库包括一个高性能的数组类，其中包括各种算术运算。
- en: Matrices
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 矩阵
- en: 'A *matrix* is a two-dimensional collection of numbers. We will represent matrices
    as lists of lists, with each inner list having the same size and representing
    a *row* of the matrix. If `A` is a matrix, then `A[i][j]` is the element in the
    *i*th row and the *j*th column. Per mathematical convention, we will frequently
    use capital letters to represent matrices. For example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*矩阵*是一种二维数字集合。我们将矩阵表示为列表的列表，每个内部列表具有相同的大小，并表示矩阵的一行。如果`A`是一个矩阵，那么`A[i][j]`是矩阵的第*i*行和第*j*列的元素。按照数学约定，我们经常使用大写字母表示矩阵。例如：'
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: In mathematics, you would usually name the first row of the matrix “row 1” and
    the first column “column 1.” Because we’re representing matrices with Python `list`s,
    which are zero-indexed, we’ll call the first row of a matrix “row 0” and the first
    column “column 0.”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学上，您通常会将矩阵的第一行命名为“第1行”，第一列命名为“第1列”。因为我们用Python `list`表示矩阵，而Python中的列表是从零开始索引的，所以我们将矩阵的第一行称为“第0行”，第一列称为“第0列”。
- en: 'Given this list-of-lists representation, the matrix `A` has `len(A)` rows and
    `len(A[0])` columns, which we consider its `shape`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这个列表的列表表示，矩阵`A`有`len(A)`行和`len(A[0])`列，我们将其称为其`形状`：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If a matrix has *n* rows and *k* columns, we will refer to it as an *n × k
    matrix*. We can (and sometimes will) think of each row of an *n × k* matrix as
    a vector of length *k*, and each column as a vector of length *n*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个矩阵有*n*行和*k*列，我们将其称为*n × k矩阵*。我们可以（有时会）将*n × k*矩阵的每一行视为长度为*k*的向量，将每一列视为长度为*n*的向量：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We’ll also want to be able to create a matrix given its shape and a function
    for generating its elements. We can do this using a nested list comprehension:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望能够根据其形状和生成其元素的函数创建一个矩阵。我们可以使用嵌套列表推导来实现这一点：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Given this function, you could make a 5 × 5 *identity matrix* (with 1s on the
    diagonal and 0s elsewhere) like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 给定此函数，您可以制作一个5 × 5 *单位矩阵*（对角线上为1，其他位置为0），如下所示：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Matrices will be important to us for several reasons.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵对我们来说将是重要的，有几个原因。
- en: 'First, we can use a matrix to represent a dataset consisting of multiple vectors,
    simply by considering each vector as a row of the matrix. For example, if you
    had the heights, weights, and ages of 1,000 people, you could put them in a 1,000
    × 3 matrix:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以使用矩阵来表示由多个向量组成的数据集，简单地将每个向量视为矩阵的一行。例如，如果您有1,000人的身高、体重和年龄，您可以将它们放在一个1,000
    × 3矩阵中：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Second, as we’ll see later, we can use an *n × k* matrix to represent a linear
    function that maps *k*-dimensional vectors to *n*-dimensional vectors. Several
    of our techniques and concepts will involve such functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，正如我们后面将看到的，我们可以使用*n × k*矩阵来表示将*k*维向量映射到*n*维向量的线性函数。我们的许多技术和概念都涉及这样的函数。
- en: Third, matrices can be used to represent binary relationships. In [Chapter 1](ch01.html#introduction),
    we represented the edges of a network as a collection of pairs `(i, j)`. An alternative
    representation would be to create a matrix `A` such that `A[i][j]` is 1 if nodes
    `i` and `j` are connected and 0 otherwise.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，矩阵可用于表示二元关系。在 [第1章](ch01.html#introduction) 中，我们将网络的边表示为一组对 `(i, j)`。另一种表示方法是创建一个矩阵
    `A`，使得如果节点 `i` 和 `j` 连接，则 `A[i][j]` 为 1，否则为 0。
- en: 'Recall that before we had:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在此之前我们有：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We could also represent this as:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将这表示为：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If there are very few connections, this is a much more inefficient representation,
    since you end up having to store a lot of zeros. However, with the matrix representation
    it is much quicker to check whether two nodes are connected—you just have to do
    a matrix lookup instead of (potentially) inspecting every edge:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接很少，这种表示方法会更加低效，因为你最终需要存储很多个零。然而，使用矩阵表示法可以更快地检查两个节点是否连接——你只需要进行矩阵查找，而不是（可能）检查每条边：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Similarly, to find a node’s connections, you only need to inspect the column
    (or the row) corresponding to that node:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要找到一个节点的连接，你只需要检查对应节点的列（或行）：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With a small graph you could just add a list of connections to each node object
    to speed up this process; but for a large, evolving graph that would probably
    be too expensive and difficult to maintain.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小图，你可以简单地为每个节点对象添加一个连接列表以加速这个过程；但对于一个大型、不断演化的图，这可能会太昂贵和难以维护。
- en: We’ll revisit matrices throughout the book.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中多次涉及矩阵。
- en: For Further Exploration
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步探索
- en: 'Linear algebra is widely used by data scientists (frequently implicitly, and
    not infrequently by people who don’t understand it). It wouldn’t be a bad idea
    to read a textbook. You can find several freely available online:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性代数被数据科学家广泛使用（通常是隐式地使用，并且经常被不理解它的人使用）。阅读一本教材并不是一个坏主意。你可以在网上找到几本免费的教材：
- en: '[*Linear Algebra*](http://joshua.smcvt.edu/linearalgebra/), by Jim Hefferon
    (Saint Michael’s College)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*线性代数*](http://joshua.smcvt.edu/linearalgebra/)，作者 Jim Hefferon（圣迈克尔学院）'
- en: '[*Linear Algebra*](https://www.math.ucdavis.edu/~linear/linear-guest.pdf),
    by David Cherney, Tom Denton, Rohit Thomas, and Andrew Waldron (UC Davis)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*线性代数*](https://www.math.ucdavis.edu/~linear/linear-guest.pdf)，作者 David Cherney、Tom
    Denton、Rohit Thomas 和 Andrew Waldron（加州大学戴维斯分校）'
- en: If you are feeling adventurous, [*Linear Algebra Done Wrong*](https://www.math.brown.edu/~treil/papers/LADW/LADW_2017-09-04.pdf),
    by Sergei Treil (Brown University), is a more advanced introduction.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你感觉有冒险精神，[*线性代数错误方法*](https://www.math.brown.edu/~treil/papers/LADW/LADW_2017-09-04.pdf)，作者
    Sergei Treil（布朗大学），是一个更高级的入门教程。
- en: All of the machinery we built in this chapter you get for free if you use [NumPy](http://www.numpy.org).
    (You get a lot more too, including much better performance.)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用 [NumPy](http://www.numpy.org)，那么我们在本章中构建的所有机制都是免费的。（你还会得到更多，包括更好的性能。）
