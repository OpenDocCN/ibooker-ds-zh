- en: Chapter 7\. Introduction to NumPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 介绍 NumPy
- en: This chapter aims to introduce the Numeric Python library (NumPy) to those unacquainted.
    NumPy is the key building block of pandas, the powerhouse data analysis library
    that we will be using in the upcoming chapters to clean and explore our recently
    scraped Nobel Prize dataset (see [Chapter 6](ch06.xhtml#chapter_heavy_scraping)).
    A basic understanding of NumPy’s core elements and principles is important if
    you are to get the most out of pandas. Therefore, the emphasis of the chapter
    is to provide a foundation for the upcoming introduction to pandas.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在向不熟悉的人介绍 Numeric Python 库（NumPy）。NumPy 是 pandas 的关键构建模块，pandas 是一个强大的数据分析库，我们将在接下来的章节中使用它来清理和探索最近抓取的诺贝尔奖数据集（参见
    [第 6 章](ch06.xhtml#chapter_heavy_scraping)）。如果你想充分利用 pandas，对 NumPy 的核心元素和原则有基本的了解是很重要的。因此，本章的重点是为即将介绍
    pandas 的内容奠定基础。
- en: NumPy is a Python module that allows access to very fast, multidimensional array
    manipulation, implemented by low-level libraries written in C and Fortran.^([1](ch07.xhtml#idm45607782330608))
    Python’s native performance with large quantities of data is relatively slow,
    but NumPy allows you to perform parallel operations on large arrays all at once,
    making it very fast. Given that NumPy is the chief building block of most of the
    heavyweight Python data-processing libraries, pandas included, it’s hard to argue
    with its status as linchpin of the Python data-processing world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 是一个 Python 模块，允许访问非常快速的、多维数组操作，由 C 和 Fortran 编写的底层库实现。^([1](ch07.xhtml#idm45607782330608))
    Python 对大量数据的本地性能相对较慢，但 NumPy 允许您一次在大数组上执行并行操作，使其非常快速。鉴于 NumPy 是大多数重量级 Python
    数据处理库的主要构建模块，包括 pandas，很难否认它作为 Python 数据处理世界的枢纽的地位。
- en: In addition to pandas, NumPy’s huge ecosystem includes Science Python (SciPy),
    which supplements NumPy with hardcore science and engineering modules; scikit-learn,
    which adds a host of modern machine-learning algorithms in such domains as classification
    and feature extraction; and many other specialized libraries that use NumPy’s
    multidimensional arrays as their primary data objects. In this sense, basic NumPy
    mastery can massively extend your Python range in the data-processing realm.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 pandas，NumPy 的庞大生态系统还包括科学 Python（SciPy），它用硬核科学和工程模块补充了 NumPy；scikit-learn，它添加了许多现代机器学习算法，如分类和特征提取；以及许多其他专门库，它们使用
    NumPy 的多维数组作为其主要数据对象。在这个意义上，基本的 NumPy 掌握可以极大地扩展你在数据处理领域的 Python 范围。
- en: The key to understanding NumPy is its arrays. If you understand how these work
    and how to manipulate them, then a lot of other stuff should follow painlessly.^([2](ch07.xhtml#idm45607782324304))
    The next few sections will cover basic array manipulation with a few examples
    of NumPy in action, setting the scene for the introduction of pandas’s datasets
    in [Chapter 8](ch08.xhtml#chapter_intro_to_pandas).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 NumPy 的关键在于其数组。如果你了解这些是如何工作的以及如何操作它们，那么其他很多东西应该会很容易跟上。^([2](ch07.xhtml#idm45607782324304))
    接下来的几节将涵盖基本的数组操作，并举几个 NumPy 实例，为 [第 8 章](ch08.xhtml#chapter_intro_to_pandas) 中
    pandas 数据集的介绍做铺垫。
- en: The NumPy Array
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy 数组
- en: 'Everything in NumPy is built around its homogeneous^([3](ch07.xhtml#idm45607782320288)),
    multidimensional `ndarray` object. Operations on these arrays are performed using
    very fast, compiled libraries, allowing NumPy to massively outperform native Python.
    Among other things you can perform standard arithmetic on these arrays, much as
    you would a Python `int` or `float`.^([4](ch07.xhtml#idm45607782315648)) In the
    following code, a whole array is added to itself as easily and as quickly as adding
    two integers:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 中，一切都是围绕其同构^([3](ch07.xhtml#idm45607782320288))、多维的 `ndarray` 对象构建的。对这些数组的操作是使用非常快速、编译的库执行的，使得
    NumPy 能够大大超越原生 Python。除此之外，你可以对这些数组执行标准算术，就像你对一个 Python `int` 或 `float` 执行的一样。^([4](ch07.xhtml#idm45607782315648))
    在下面的代码中，整个数组被添加到自身，就像添加两个整数一样容易和快速：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](assets/1.png)](#co_introduction_to_numpy_CO1-1)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_to_numpy_CO1-1)'
- en: The standard way to use the NumPy library and much preferred to `"from numpy
    import *"`.^([5](ch07.xhtml#idm45607782280784))
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NumPy 库的标准方法，远远优于 `"from numpy import *"`。^([5](ch07.xhtml#idm45607782280784))
- en: '[![2](assets/2.png)](#co_introduction_to_numpy_CO1-2)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_to_numpy_CO1-2)'
- en: Automatically converts a Python list of numbers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自动将 Python 列表转换为数字。
- en: Behind the scenes, NumPy can leverage the massively parallel computation available
    to modern CPUs allowing, for example, large matrices (2D arrays) to be crunched
    in acceptable times.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，NumPy可以利用现代CPU可用的大规模并行计算，允许例如在可接受的时间内压缩大矩阵（2D数组）。
- en: 'The key properties of the NumPy `ndarray` are its number of dimensions (`ndim`),
    shape (`shape`), and numeric type (`dtype`). The same array of numbers can be
    reshaped in place, which will sometimes involve changing the array’s number of
    dimensions. Let’s demonstrate some reshaping with a little eight-member array.
    We’ll use a `print_array_details` method to output the key array properties:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy `ndarray`的关键属性是其维数(`ndim`)、形状(`shape`)和数值类型(`dtype`)。同一组数字数组可以在原地重塑，有时这将涉及更改数组的维数。让我们使用`print_array_details`方法演示一些重塑的例子，用一个小八元素数组：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, we’ll create our one-dimensional array. As the printed details show,
    by default this has a 64-bit integer numeric type (`int64`):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建我们的一维数组。如打印的细节所示，默认情况下，这具有64位整数数值类型(`int64`)：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using the `reshape` method, we can change the shape and number of dimensions
    of `a`. Let’s reshape `a` into a two-dimensional array composed of two four-member
    arrays:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`reshape`方法，我们可以改变`a`的形状和维度数量。让我们将`a`重塑为一个由两个四元素数组组成的二维数组：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An eight-member array can also be reshaped into a three-dimensional array:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个八元素数组也可以重塑为三维数组：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The shape and numeric type can be specified on creation of the array or later.
    The easiest way to change an array’s numeric type is by using the `astype` method
    to make a resized copy of the original with the new type:^([6](ch07.xhtml#idm45607781871408))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 形状和数值类型可以在创建数组时或以后指定。改变数组的数值类型最简单的方法是使用`astype`方法，以制作具有新类型的原始调整大小副本：^([6](ch07.xhtml#idm45607781871408))
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](assets/1.png)](#co_introduction_to_numpy_CO2-1)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_to_numpy_CO2-1)'
- en: The array will convert a nested list of numbers into a suitably shaped multidimensional
    form.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数组将把一个数字的嵌套列表转换为合适形状的多维形式。
- en: Creating Arrays
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组
- en: 'As well as creating arrays with lists of numbers, NumPy provides some utility
    functions to create arrays with a specific shape. `zeros` and `ones` are the most
    common functions used, creating prefilled arrays. Here’s a couple of examples.
    Note that the default `dtype` of these methods is a 64-bit float (`float64`):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用数字列表创建数组外，NumPy还提供了一些实用函数来创建具有特定形状的数组。`zeros`和`ones`是最常用的函数，用于创建预填充的数组。以下是一些示例。注意，这些方法的默认`dtype`是64位浮点数(`float64`)：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The faster `empty` method just takes a memory block without the fill overhead,
    leaving the initialization up to you. This means you don’t know and can’t guarantee
    what values the array has, unlike `np.zeros`, so use with caution:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更快的`empty`方法只接受一个内存块而没有填充开销，留下初始化由您负责。这意味着与`np.zeros`不同，您不知道也无法保证数组具有哪些值，因此请谨慎使用：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Another useful utility function is `random`, found along with some useful siblings
    in NumPy’s `random` module. This creates a shaped random array:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的实用函数是`random`，它与NumPy的`random`模块中的一些有用的兄弟函数一起找到。这将创建一个形状随机数组：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](assets/1.png)](#co_introduction_to_numpy_CO3-1)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_to_numpy_CO3-1)'
- en: A 2×3 array of random numbers within the range 0 `<=` x < 1.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个2×3的随机数数组，在范围0 `<=` x < 1内。
- en: 'The handy `linspace` creates a specified number of evenly spaced samples over
    a set interval. `arange` is similar but uses a step-size argument:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的`linspace`在设置的区间内创建指定数量的均匀间隔样本。`arange`类似，但使用步长参数：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that unlike `arange`, `linspace` is inclusive of the upper value and that
    the array’s datatype is the default `float64`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`arange`不同，`linspace`包括上限值，并且数组的数据类型是默认的`float64`。
- en: Array Indexing and Slicing
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组索引和切片
- en: 'One-dimensional arrays are indexed and sliced much as Python lists:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一维数组的索引和切片与Python列表类似：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Indexing multidimensional arrays is similar to the *1-D* form. Each dimension
    has its own indexing/slicing operation and these are specified in a comma-separated
    tuple.^([7](ch07.xhtml#idm45607781252528)) [Figure 7-1](#numpy_indexing) shows
    how this works.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组的索引与*1-D*形式类似。每个维度都有自己的索引/切片操作，这些操作在以逗号分隔的元组中指定。^([7](ch07.xhtml#idm45607781252528))
    [图 7-1](#numpy_indexing)展示了这是如何工作的。
- en: '![dpj2 0701](assets/dpj2_0701.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0701](assets/dpj2_0701.png)'
- en: Figure 7-1\. Multidimensional indexing with NumPy
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-1\. 使用NumPy进行多维索引
- en: 'Note that if the number of objects in the selection tuple is less than the
    number of dimensions, the remaining dimensions are assumed to be fully selected
    (:). Ellipsis can also be used as a shorthand for full selection of all indices,
    expanding to the required number of : objects. We will use a three-dimensional
    array to demonstrate:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果选择元组中的对象数少于维数的数量，则假定其余维度完全选择（:）。省略号也可以用作所有索引的全选的缩写，扩展为所需数量的：对象。我们将使用一个三维数组来演示：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'NumPy has a handy `array_equal` method, which compares arrays by shape and
    elements. We can use it to show the equivalence of the following array selections,
    taking the second subarray of axis 0:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 提供了一个方便的 `array_equal` 方法，可以按形状和元素比较数组。我们可以用它来展示以下数组选择的等价性，获取轴 0 的第二个子数组：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Testing for equivalence:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 测试等价性：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A Few Basic Operations
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 几个基本操作
- en: One of the really cool things about NumPy arrays is that you can perform basic
    (and not so basic) math operations in much the same way that you would with normal
    numeric variables. [Figure 7-2](#numpy_maths) shows the use of some overloaded
    arithmetic operators on a two-dimensional array. The simple mathematical operations
    are applied to all members of the array. Note that where the array is divided
    by a floating-point value (2.0), the result is automatically converted to a float
    type (`float64`). Being able to manipulate arrays as easily as single numbers
    is a huge strength of NumPy and a large part of its expressive power.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组的一个非常酷的功能之一是，您可以像操作普通数值变量一样进行基本（以及不那么基本的）数学运算。[图 7-2](#numpy_maths)
    展示了如何在二维数组上使用一些重载的算术运算符。简单的数学运算适用于数组的所有成员。请注意，当数组除以浮点值（2.0）时，结果会自动转换为浮点类型（`float64`）。能够像操作单个数字一样操作数组是
    NumPy 的一大优势，也是其表现力的重要组成部分。
- en: '![dpj2 0702](assets/dpj2_0702.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![dpj2 0702](assets/dpj2_0702.png)'
- en: Figure 7-2\. A few basic math operations on a two-dimensional NumPy array
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7-2\. 在二维 NumPy 数组上进行的几个基本数学操作
- en: 'Boolean operators work in a similar way to the arithmetic ones. As we’ll see
    in the next chapter, this is a very useful way to create the Boolean masks often
    used in pandas. Here’s a little example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔运算符的工作方式与算术运算符类似。正如我们将在下一章看到的那样，这是创建 pandas 中经常使用的布尔掩码的非常有用的方式。这里有一个小例子：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Arrays also have a number of useful methods, a selection of which is demonstrated
    in [Example 7-1](#numpy_array_methods). You can get a comprehensive rundown in
    [the official NumPy docs](https://oreil.ly/qmnDX).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数组还有许多有用的方法，其中一部分在 [示例 7-1](#numpy_array_methods) 中进行了演示。您可以在 [NumPy 官方文档](https://oreil.ly/qmnDX)
    中获取全面的介绍。
- en: Example 7-1\. Some array methods
  id: totrans-56
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-1\. 一些数组方法
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](assets/1.png)](#co_introduction_to_numpy_CO4-1)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_to_numpy_CO4-1)'
- en: Average along second axis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 沿第二轴的平均值。
- en: '[![2](assets/2.png)](#co_introduction_to_numpy_CO4-3)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_introduction_to_numpy_CO4-3)'
- en: The standard deviation of [0, 1, 2, 3],…​
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[0, 1, 2, 3] 的标准差,…​'
- en: There are also a large number of built-in array functions. [Example 7-2](#numpy_maths2)
    demonstrates a selection of these, and you will find a comprehensive list of NumPy’s
    built-in mathematical routines [at the official NumPy site](https://oreil.ly/vvfzm).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有大量的内置数组函数。[示例 7-2](#numpy_maths2) 展示了其中的一些，您可以在 [NumPy 官方网站](https://oreil.ly/vvfzm)
    上找到 NumPy 内置数学函数的全面列表。
- en: Example 7-2\. Some NumPy array math functions
  id: totrans-63
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-2\. 一些 NumPy 数组数学函数
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](assets/1.png)](#co_introduction_to_numpy_CO5-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_introduction_to_numpy_CO5-1)'
- en: Note the floating-point rounding error for sin(pi).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 sin(pi) 的浮点舍入误差。
- en: Creating Array Functions
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数组函数
- en: Whether you’re using pandas or one of the many Python data-processing libraries,
    such as SciPy, scikit-learn, or PyTorch, chances are the core data structure being
    used is the NumPy array. The ability to craft little array processing functions
    is therefore a great addition to your data-processing toolkit and the data visualization
    toolchain. Often a short internet search will turn up a community solution, but
    there’s a lot of satisfaction to be gained from crafting your own, besides being
    a great way to learn. Let’s see how we can harness the NumPy array to calculate
    a [moving average](https://oreil.ly/ajLZJ). A moving average is a series of averages
    based on a moving window of the last *n* values, where *n* is variable, also known
    as a *moving mean* or *rolling mean*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用的是pandas还是诸如SciPy、scikit-learn或PyTorch等许多Python数据处理库之一，核心数据结构往往是NumPy数组。因此，掌握一些小的数组处理函数对您的数据处理工具包和数据可视化工具链来说是一个很好的补充。通常可以通过简短的互联网搜索找到社区解决方案，但自己动手编写代码不仅能够带来满足感，而且是学习的一个好方法。让我们看看如何利用NumPy数组来计算一个[移动平均](https://oreil.ly/ajLZJ)。移动平均是基于最近的
    *n* 个值的移动窗口的一系列平均值，其中 *n* 是可变的，也称为*滚动平均*。
- en: Calculating a Moving Average
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算移动平均
- en: '[Example 7-3](#numpy_moving_average) shows the few lines needed to calculate
    a moving average on a one-dimensional NumPy array.^([8](ch07.xhtml#idm45607780652944))
    As you can see, it’s nice and concise, but there’s a fair amount going on in those
    few lines. Let’s break it down a bit.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-3](#numpy_moving_average)展示了在一维NumPy数组上计算移动平均所需的几行代码。^([8](ch07.xhtml#idm45607780652944))正如您所见，这些代码既简洁又清晰，但其中确实包含了相当多的内容。让我们来详细分析一下。'
- en: Example 7-3\. A moving average with NumPy
  id: totrans-71
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 7-3\. 使用NumPy计算移动平均
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The function receives an array *a* and number *n* specifying the size of the
    moving window.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收一个数组 *a* 和一个指定移动窗口大小 *n* 的数字。
- en: 'We first calculate the cumulative sum of the array using NumPy’s built-in method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用NumPy的内置方法计算数组的累积和：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Starting at the *n*th index of the cumulative sum array, we subtract the *i*–*n*th
    value for all *i*, which means *i* now has the sum of the last *n* values of *a*,
    inclusive. Here’s an example with a window of size three:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '从累积和数组的第 *n* 个索引开始，我们对所有 *i* 减去 *i*–*n* 的值，这意味着 *i* 现在具有包括 *a* 的最后 *n* 个值的总和。以下是一个窗口大小为三的示例： '
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Comparing the array `a` with the final array `csum`, index 5 is now the sum
    of the window [3, 4, 5].
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 比较数组 `a` 与最终数组 `csum`，索引 5 现在是窗口 [3, 4, 5] 的总和。
- en: Because a moving average only makes sense for index (*n*–1) onward, it only
    remains to return these values, divided by the window size *n* to give the average.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 因为移动平均仅对索引 (*n*–1) 及之后有意义，所以只需返回这些值，除以窗口大小 *n* 得到平均值。
- en: The `moving_average` function takes a bit of time to get but is a good example
    of the concision and expressiveness that can be achieved with NumPy arrays and
    array slicing. You could easily write the function in vanilla Python, but it would
    likely be a fair bit more involved and, crucially, be much slower for arrays of
    significant size.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`moving_average` 函数需要一些时间才能理解，但它是使用NumPy数组和数组切片能够实现简洁和表达力的一个很好的例子。您也可以轻松地用纯Python编写该函数，但对于规模较大的数组来说，它可能会更加复杂，关键是速度更慢。'
- en: 'Putting the function to work:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 把函数投入实际运行：
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter laid the foundations of NumPy, focusing on its building block,
    the NumPy array or `ndarray`. Being proficient with NumPy is a core skill for
    any Pythonista working with data. It underpins most of Python’s hardcore data-processing
    stack, so for this reason alone, you should be comfortable with its array manipulations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章奠定了NumPy的基础，重点是其构建块，即NumPy数组或 `ndarray`。精通NumPy对于任何与数据相关的Python开发者来说都是一项核心技能。它支持大多数Python强大的数据处理堆栈，因此仅出于这个原因，您应该熟练掌握其数组操作。
- en: Being comfortable with NumPy will make pandas work that much easier and open
    up the rich NumPy ecosystem of scientific, engineering, machine learning, and
    statistical algorithmics to your pandas workflow. Although pandas hides its NumPy
    arrays behind data containers such as its DataFrame and Series, which are adapted
    to deal with heterogeneous data, these containers behave for the most part like
    NumPy arrays and will generally do the right thing when asked. Knowing that `ndarray`s
    are at its core also helps when you are trying to frame problems for pandas—​ultimately
    the requested data manipulation has to play nicely with NumPy. Now that we’ve
    got its building blocks in place, let’s see how pandas extends the homogeneous
    NumPy array into the realm of heterogeneous data, where much of data visualization
    work takes place.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 熟悉会使 pandas 的工作更加轻松，并打开丰富的 NumPy 生态系统，涵盖科学、工程、机器学习和统计算法。尽管 pandas 将其
    NumPy 数组隐藏在数据容器背后，如其 DataFrame 和 Series，这些容器被适配为处理异构数据，但这些容器在大多数情况下表现得像 NumPy
    数组，并且通常在需要时会表现出正确的行为。了解 `ndarray` 在其核心的事实，也有助于您在为 pandas 构建问题时考虑到 NumPy 的情况。现在我们已经掌握了其基本构建块，让我们看看
    pandas 如何将均匀的 NumPy 数组扩展到异构数据领域，在这里进行大部分数据可视化工作。
- en: ^([1](ch07.xhtml#idm45607782330608-marker)) Python’s scripted ease of use comes
    at the cost of raw speed. By wrapping fast, low-level libraries, initiatives like
    NumPy aim for simple, cruft-free programming and blinding performance.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch07.xhtml#idm45607782330608-marker)) Python 的脚本易用性是以性能的原始速度为代价的。通过封装快速的低级库，像
    NumPy 这样的项目旨在实现简单、无冗余的编程和极高的性能。
- en: ^([2](ch07.xhtml#idm45607782324304-marker)) NumPy is used to implement some
    very advanced math, so don’t expect to understand everything you see online—​just
    the building blocks.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch07.xhtml#idm45607782324304-marker)) NumPy 用于实现一些非常高级的数学功能，因此不要期望能够完全理解在线看到的所有内容—​只需理解其中的基本构建块。
- en: ^([3](ch07.xhtml#idm45607782320288-marker)) This means NumPy deals with arrays
    of the same datatype (dtype) rather than Python lists, for example, which can
    have strings, numbers, dates, etc.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch07.xhtml#idm45607782320288-marker)) 这意味着 NumPy 处理的是相同数据类型（dtype）的数组，而不是像
    Python 列表那样可以包含字符串、数字、日期等。
- en: ^([4](ch07.xhtml#idm45607782315648-marker)) This assumes the arrays meet shape
    and type constraints.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch07.xhtml#idm45607782315648-marker)) 这假设数组符合形状和类型的约束条件。
- en: ^([5](ch07.xhtml#idm45607782280784-marker)) Importing all module variables into
    your namespace using `*` is almost always a bad idea.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch07.xhtml#idm45607782280784-marker)) 使用 `*` 将所有模块变量导入到您的命名空间几乎总是一个坏主意。
- en: ^([6](ch07.xhtml#idm45607781871408-marker)) A more memory-efficient and performant
    way involves manipulating the array’s view, but it does involve some extra steps.
    See [this Stack Overflow article](https://oreil.ly/FOQWt) for some examples and
    a discussion of the pros and cons.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch07.xhtml#idm45607781871408-marker)) 更节省内存且性能更好的方法涉及操作数组的视图，但确实需要一些额外步骤。参见
    [这篇 Stack Overflow 文章](https://oreil.ly/FOQWt) 获取一些示例以及对其优缺点的讨论。
- en: ^([7](ch07.xhtml#idm45607781252528-marker)) There is a shorthand dot notation
    (e.g., `[..1:3]`) to select all indices.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch07.xhtml#idm45607781252528-marker)) 有一种简写的点符号表示法（例如，`[..1:3]`）用于选择所有索引。
- en: ^([8](ch07.xhtml#idm45607780652944-marker)) NumPy has a `convolve` method, which
    is the easiest way to calculate a simple moving average but less instructive.
    Also, pandas has a number of specialized methods for this.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch07.xhtml#idm45607780652944-marker)) NumPy 有一个 `convolve` 方法，这是计算简单移动平均的最简单方法，但不够具有指导意义。此外，pandas
    也有许多专门的方法来实现这一点。
