- en: 1  Preliminaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 初步
- en: 原文：[https://wesmckinney.com/book/preliminaries](https://wesmckinney.com/book/preliminaries)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://wesmckinney.com/book/preliminaries](https://wesmckinney.com/book/preliminaries)
- en: '*This Open Access web version of *Python for Data Analysis 3rd Edition* is
    now available as a companion to the [print and digital editions](https://amzn.to/3DyLaJc).
    If you encounter any errata, [please report them here](https://oreilly.com/catalog/0636920519829/errata).
    Please note that some aspects of this site as produced by Quarto will differ from
    the formatting of the print and eBook versions from O’Reilly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*这本《Python数据分析第三版》的开放获取网络版本现在作为[印刷版和数字版](https://amzn.to/3DyLaJc)的伴侣可用。如果您发现任何勘误，请[在此处报告](https://oreilly.com/catalog/0636920519829/errata)。请注意，由Quarto制作的本站的某些方面与O''Reilly的印刷版和电子书版本的格式不同。'
- en: If you find the online edition of the book useful, please consider [ordering
    a paper copy](https://amzn.to/3DyLaJc) or a [DRM-free eBook](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)
    to support the author. The content from this website may not be copied or reproduced.
    The code examples are MIT licensed and can be found on GitHub or Gitee.*  *##
    1.1 What Is This Book About?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现这本书的在线版本有用，请考虑[订购纸质版](https://amzn.to/3DyLaJc)或[无DRM的电子书](https://www.ebooks.com/en-us/book/210644288/python-for-data-analysis/wes-mckinney/?affId=WES398681F)以支持作者。本网站的内容不得复制或复制。代码示例采用MIT许可证，可在GitHub或Gitee上找到。*##
    1.1 这本书是关于什么的？
- en: This book is concerned with the nuts and bolts of manipulating, processing,
    cleaning, and crunching data in Python. My goal is to offer a guide to the parts
    of the Python programming language and its data-oriented library ecosystem and
    tools that will equip you to become an effective data analyst. While "data analysis"
    is in the title of the book, the focus is specifically on Python programming,
    libraries, and tools as opposed to data analysis methodology. This is the Python
    programming you need *for* data analysis.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书关注的是在Python中操纵、处理、清理和处理数据的基本原理。我的目标是为Python编程语言及其面向数据的库生态系统和工具提供指南，使您能够成为一名有效的数据分析师。虽然书名中有“数据分析”一词，但重点特别放在Python编程、库和工具上，而不是数据分析方法论。这是您进行数据分析所需的Python编程。
- en: Sometime after I originally published this book in 2012, people started using
    the term *data science* as an umbrella description for everything from simple
    descriptive statistics to more advanced statistical analysis and machine learning.
    The Python open source ecosystem for doing data analysis (or data science) has
    also expanded significantly since then. There are now many other books which focus
    specifically on these more advanced methodologies. My hope is that this book serves
    as adequate preparation to enable you to move on to a more domain-specific resource.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我2012年首次出版这本书之后不久，人们开始使用“数据科学”这个术语作为从简单的描述性统计到更高级的统计分析和机器学习等各种内容的总称。自那时以来，用于进行数据分析（或数据科学）的Python开源生态系统也显著扩展。现在有许多其他专门关注这些更高级方法的书籍。我希望这本书能够作为足够的准备，使您能够转向更具领域特定性的资源。
- en: '*Note* *Some might characterize much of the content of the book as "data manipulation"
    as opposed to "data analysis." We also use the terms *wrangling* or *munging*
    to refer to data manipulation.*  *### What Kinds of Data?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*注* *有些人可能将本书的大部分内容描述为“数据操纵”，而不是“数据分析”。我们还使用*整理*或*整理*这些术语来指代数据操纵。*### 什么样的数据？'
- en: 'When I say “data,” what am I referring to exactly? The primary focus is on
    *structured data*, a deliberately vague term that encompasses many different common
    forms of data, such as:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说“数据”时，我确切指的是什么？主要关注的是*结构化数据*，这是一个故意模糊的术语，包括许多不同形式的常见数据，例如：
- en: Tabular or spreadsheet-like data in which each column may be a different type
    (string, numeric, date, or otherwise). This includes most kinds of data commonly
    stored in relational databases or tab- or comma-delimited text files.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格或类似电子表格的数据，其中每列可能是不同类型（字符串、数字、日期或其他）。这包括通常存储在关系数据库或制表符或逗号分隔文本文件中的各种数据。
- en: Multidimensional arrays (matrices).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多维数组（矩阵）。
- en: Multiple tables of data interrelated by key columns (what would be primary or
    foreign keys for a SQL user).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由关键列相互关联的多个数据表（对SQL用户来说可能是主键或外键）。
- en: Evenly or unevenly spaced time series.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 均匀或不均匀间隔的时间序列。
- en: This is by no means a complete list. Even though it may not always be obvious,
    a large percentage of datasets can be transformed into a structured form that
    is more suitable for analysis and modeling. If not, it may be possible to extract
    features from a dataset into a structured form. As an example, a collection of
    news articles could be processed into a word frequency table, which could then
    be used to perform sentiment analysis.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝不是一个完整的列表。即使可能并不总是明显，大部分数据集都可以转换为更适合分析和建模的结构化形式。如果不行，可能可以从数据集中提取特征到结构化形式。例如，一组新闻文章可以处理成一个词频表，然后用于执行情感分析。
- en: Most users of spreadsheet programs like Microsoft Excel, perhaps the most widely
    used data analysis tool in the world, will not be strangers to these kinds of
    data.*  *## 1.2 Why Python for Data Analysis?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 像Microsoft Excel这样的电子表格程序的大多数用户，可能是世界上最广泛使用的数据分析工具，对这些数据类型并不陌生。*## 1.2 为什么选择Python进行数据分析？
- en: For many people, the Python programming language has strong appeal. Since its
    first appearance in 1991, Python has become one of the most popular interpreted
    programming languages, along with Perl, Ruby, and others. Python and Ruby have
    become especially popular since 2005 or so for building websites using their numerous
    web frameworks, like Rails (Ruby) and Django (Python). Such languages are often
    called *scripting* languages, as they can be used to quickly write small programs,
    or *scripts* to automate other tasks. I don’t like the term “scripting languages,”
    as it carries a connotation that they cannot be used for building serious software.
    Among interpreted languages, for various historical and cultural reasons, Python
    has developed a large and active scientific computing and data analysis community.
    In the last 20 years, Python has gone from a bleeding-edge or "at your own risk"
    scientific computing language to one of the most important languages for data
    science, machine learning, and general software development in academia and industry.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对许多人来说，Python编程语言具有很强的吸引力。自1991年首次亮相以来，Python已成为最受欢迎的解释性编程语言之一，与Perl、Ruby等一起。自2005年左右以来，Python和Ruby特别受欢迎，用于构建网站，使用它们众多的Web框架，如Rails（Ruby）和Django（Python）。这些语言通常被称为“脚本”语言，因为它们可以用于快速编写小程序或脚本来自动化其他任务。我不喜欢“脚本语言”这个术语，因为它带有一种暗示，即它们不能用于构建严肃的软件。出于各种历史和文化原因，在解释性语言中，Python已经发展成一个庞大而活跃的科学计算和数据分析社区。在过去的20年里，Python已经从一个前沿或“自担风险”的科学计算语言发展成为学术界和工业界数据科学、机器学习和通用软件开发中最重要的语言之一。
- en: For data analysis and interactive computing and data visualization, Python will
    inevitably draw comparisons with other open source and commercial programming
    languages and tools in wide use, such as R, MATLAB, SAS, Stata, and others. In
    recent years, Python’s improved open source libraries (such as pandas and scikit-learn)
    have made it a popular choice for data analysis tasks. Combined with Python’s
    overall strength for general-purpose software engineering, it is an excellent
    option as a primary language for building data applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据分析、交互式计算和数据可视化，Python不可避免地会与其他广泛使用的开源和商业编程语言和工具进行比较，如R、MATLAB、SAS、Stata等。近年来，Python改进的开源库（如pandas和scikit-learn）使其成为数据分析任务的热门选择。结合Python在通用软件工程方面的整体实力，它是构建数据应用程序的主要语言的绝佳选择。
- en: Python as Glue
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python作为胶水
- en: Part of Python’s success in scientific computing is the ease of integrating
    C, C++, and FORTRAN code. Most modern computing environments share a similar set
    of legacy FORTRAN and C libraries for doing linear algebra, optimization, integration,
    fast Fourier transforms, and other such algorithms. The same story has held true
    for many companies and national labs that have used Python to glue together decades'
    worth of legacy software.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python在科学计算中的成功部分在于轻松集成C、C++和FORTRAN代码。大多数现代计算环境共享一组类似的传统FORTRAN和C库，用于进行线性代数、优化、积分、快速傅里叶变换等算法。许多公司和国家实验室使用Python将几十年的传统软件粘合在一起的故事也是如此。
- en: Many programs consist of small portions of code where most of the time is spent,
    with large amounts of “glue code” that doesn’t run often. In many cases, the execution
    time of the glue code is insignificant; effort is most fruitfully invested in
    optimizing the computational bottlenecks, sometimes by moving the code to a lower-level
    language like C.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序由小部分代码组成，其中大部分时间都花在其中，大量“胶水代码”很少运行。在许多情况下，胶水代码的执行时间微不足道；最有价值的努力是在优化计算瓶颈上，有时通过将代码移动到像C这样的低级语言来实现。
- en: Solving the “Two-Language” Problem
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决“双语言”问题
- en: In many organizations, it is common to research, prototype, and test new ideas
    using a more specialized computing language like SAS or R and then later port
    those ideas to be part of a larger production system written in, say, Java, C#,
    or C++. What people are increasingly finding is that Python is a suitable language
    not only for doing research and prototyping but also for building the production
    systems. Why maintain two development environments when one will suffice? I believe
    that more and more companies will go down this path, as there are often significant
    organizational benefits to having both researchers and software engineers using
    the same set of programming tools.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多组织中，通常使用更专门的计算语言如SAS或R进行研究、原型设计和测试新想法，然后将这些想法移植为更大的生产系统的一部分，比如Java、C#或C++。人们越来越发现Python不仅适合用于研究和原型设计，也适合用于构建生产系统。当一个开发环境足够时，为什么要维护两个呢？我相信越来越多的公司会选择这条道路，因为让研究人员和软件工程师使用相同的编程工具集通常会带来重大的组织效益。
- en: Over the last decade some new approaches to solving the "two-language" problem
    have appeared, such as the Julia programming language. Getting the most out of
    Python in many cases *will* require programming in a low-level language like C
    or C++ and creating Python bindings to that code. That said, "just-in-time" (JIT)
    compiler technology provided by libraries like Numba have provided a way to achieve
    excellent performance in many computational algorithms without having to leave
    the Python programming environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，一些解决“双语言”问题的新方法出现了，比如Julia编程语言。在许多情况下，充分利用Python将需要使用低级语言如C或C++编程，并创建Python绑定到该代码。也就是说，像Numba这样的“即时”（JIT）编译器技术提供了一种在Python编程环境中实现出色性能的方法，而无需离开Python编程环境。
- en: Why Not Python?
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么不用Python？
- en: While Python is an excellent environment for building many kinds of analytical
    applications and general-purpose systems, there are a number of uses for which
    Python may be less suitable.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python是构建许多种分析应用程序和通用系统的优秀环境，但也有一些用途不太适合Python。
- en: As Python is an interpreted programming language, in general most Python code
    will run substantially slower than code written in a compiled language like Java
    or C++. As *programmer time* is often more valuable than *CPU time*, many are
    happy to make this trade-off. However, in an application with very low latency
    or demanding resource utilization requirements (e.g., a high-frequency trading
    system), the time spent programming in a lower-level (but also lower-productivity)
    language like C++ to achieve the maximum possible performance might be time well
    spent.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python是一种解释性编程语言，通常大多数Python代码运行速度会比像Java或C++这样的编译语言编写的代码慢得多。由于*程序员时间*通常比*CPU时间*更有价值，许多人愿意做出这种权衡。然而，在具有非常低延迟或对资源利用要求苛刻的应用程序中（例如高频交易系统），花费时间以低级语言（但也低生产力）如C++编程，以实现可能的最大性能，可能是值得的。
- en: Python can be a challenging language for building highly concurrent, multithreaded
    applications, particularly applications with many CPU-bound threads. The reason
    for this is that it has what is known as the *global interpreter lock* (GIL),
    a mechanism that prevents the interpreter from executing more than one Python
    instruction at a time. The technical reasons for why the GIL exists are beyond
    the scope of this book. While it is true that in many big data processing applications,
    a cluster of computers may be required to process a dataset in a reasonable amount
    of time, there are still situations where a single-process, multithreaded system
    is desirable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python可能是一个具有挑战性的语言，用于构建高度并发、多线程的应用程序，特别是具有许多CPU绑定线程的应用程序。造成这种情况的原因是它具有所谓的*全局解释器锁*（GIL），这是一种机制，防止解释器一次执行多个Python指令。GIL存在的技术原因超出了本书的范围。虽然在许多大数据处理应用中，可能需要一组计算机集群来在合理的时间内处理数据集，但仍然存在一些情况，其中单进程、多线程系统是可取的。
- en: This is not to say that Python cannot execute truly multithreaded, parallel
    code. Python C extensions that use native multithreading (in C or C++) can run
    code in parallel without being impacted by the GIL, as long as they do not need
    to regularly interact with Python objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说Python不能执行真正的多线程、并行代码。使用本地多线程（在C或C++中）的Python C扩展可以在不受GIL影响的情况下并行运行代码，只要它们不需要经常与Python对象交互。
- en: 1.3 Essential Python Libraries
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3必要的Python库
- en: For those who are less familiar with the Python data ecosystem and the libraries
    used throughout the book, I will give a brief overview of some of them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对Python数据生态系统和本书中使用的库不太熟悉的人，我将简要介绍其中一些。
- en: NumPy
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NumPy
- en: '[NumPy](https://numpy.org), short for Numerical Python, has long been a cornerstone
    of numerical computing in Python. It provides the data structures, algorithms,
    and library glue needed for most scientific applications involving numerical data
    in Python. NumPy contains, among other things:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy](https://numpy.org)，简称Numerical Python，长期以来一直是Python中数值计算的基石。它提供了大多数涉及Python中数值数据的科学应用所需的数据结构、算法和库粘合剂。NumPy包含，除其他内容外：'
- en: A fast and efficient multidimensional array object *ndarray*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速高效的多维数组对象*ndarray*
- en: Functions for performing element-wise computations with arrays or mathematical
    operations between arrays
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行数组元素计算或数组之间的数学运算的函数
- en: Tools for reading and writing array-based datasets to disk
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于读取和写入基于数组的数据集到磁盘的工具
- en: Linear algebra operations, Fourier transform, and random number generation
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线性代数运算、傅里叶变换和随机数生成
- en: A mature C API to enable Python extensions and native C or C++ code to access
    NumPy's data structures and computational facilities
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成熟的C API，用于使Python扩展和本地C或C++代码能够访问NumPy的数据结构和计算功能
- en: Beyond the fast array-processing capabilities that NumPy adds to Python, one
    of its primary uses in data analysis is as a container for data to be passed between
    algorithms and libraries. For numerical data, NumPy arrays are more efficient
    for storing and manipulating data than the other built-in Python data structures.
    Also, libraries written in a lower-level language, such as C or FORTRAN, can operate
    on the data stored in a NumPy array without copying data into some other memory
    representation. Thus, many numerical computing tools for Python either assume
    NumPy arrays as a primary data structure or else target interoperability with
    NumPy.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了NumPy为Python增加的快速数组处理功能外，它在数据分析中的主要用途之一是作为数据容器，在算法和库之间传递数据。对于数值数据，NumPy数组比其他内置Python数据结构更有效地存储和操作数据。此外，使用低级语言（如C或FORTRAN）编写的库可以在NumPy数组中存储的数据上操作，而无需将数据复制到其他内存表示中。因此，许多Python的数值计算工具要么将NumPy数组作为主要数据结构，要么针对与NumPy的互操作性。
- en: pandas
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pandas
- en: '[pandas](https://pandas.pydata.org) provides high-level data structures and
    functions designed to make working with structured or tabular data intuitive and
    flexible. Since its emergence in 2010, it has helped enable Python to be a powerful
    and productive data analysis environment. The primary objects in pandas that will
    be used in this book are the DataFrame, a tabular, column-oriented data structure
    with both row and column labels, and the Series, a one-dimensional labeled array
    object.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[pandas](https://pandas.pydata.org)提供了高级数据结构和函数，旨在使处理结构化或表格数据变得直观和灵活。自2010年出现以来，它已经帮助Python成为一个强大和高效的数据分析环境。本书中将使用的pandas中的主要对象是DataFrame，这是一个表格化的、以列为导向的数据结构，具有行和列标签，以及Series，这是一个一维带标签的数组对象。'
- en: pandas blends the array-computing ideas of NumPy with the kinds of data manipulation
    capabilities found in spreadsheets and relational databases (such as SQL). It
    provides convenient indexing functionality to enable you to reshape, slice and
    dice, perform aggregations, and select subsets of data. Since data manipulation,
    preparation, and cleaning are such important skills in data analysis, pandas is
    one of the primary focuses of this book.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: pandas将NumPy的数组计算思想与电子表格和关系数据库（如SQL）中发现的数据操作能力相结合。它提供了方便的索引功能，使您能够重新塑造、切片、执行聚合操作和选择数据子集。由于数据操作、准备和清理在数据分析中是如此重要，pandas是本书的主要关注点之一。
- en: 'As a bit of background, I started building pandas in early 2008 during my tenure
    at AQR Capital Management, a quantitative investment management firm. At the time,
    I had a distinct set of requirements that were not well addressed by any single
    tool at my disposal:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为背景，我在2008年初在AQR Capital Management期间开始构建pandas，这是一家量化投资管理公司。当时，我有一套明确的要求，任何单一工具都无法很好地满足：
- en: Data structures with labeled axes supporting automatic or explicit data alignment—this
    prevents common errors resulting from misaligned data and working with differently
    indexed data coming from different sources
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有带有标签轴的数据结构，支持自动或显式数据对齐——这可以防止由于数据不对齐和来自不同来源的不同索引数据而导致的常见错误
- en: Integrated time series functionality
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成的时间序列功能
- en: The same data structures handle both time series data and non-time series data
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的数据结构处理时间序列数据和非时间序列数据
- en: Arithmetic operations and reductions that preserve metadata
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留元数据的算术操作和减少
- en: Flexible handling of missing data
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活处理缺失数据
- en: Merge and other relational operations found in popular databases (SQL-based,
    for example)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在流行数据库（例如基于SQL的数据库）中找到的合并和其他关系操作
- en: I wanted to be able to do all of these things in one place, preferably in a
    language well suited to general-purpose software development. Python was a good
    candidate language for this, but at that time an integrated set of data structures
    and tools providing this functionality did not exist. As a result of having been
    built initially to solve finance and business analytics problems, pandas features
    especially deep time series functionality and tools well suited for working with
    time-indexed data generated by business processes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望能够在一个地方完成所有这些事情，最好是在一种适合通用软件开发的语言中。Python是这方面的一个很好的候选语言，但当时并不存在一个集成了这些功能的数据结构和工具集。由于最初构建是为了解决金融和业务分析问题，pandas具有特别深入的时间序列功能和适用于处理由业务流程生成的时间索引数据的工具。
- en: I spent a large part of 2011 and 2012 expanding pandas's capabilities with some
    of my former AQR colleagues, Adam Klein and Chang She. In 2013, I stopped being
    as involved in day-to-day project development, and pandas has since become a fully
    community-owned and community-maintained project with well over two thousand unique
    contributors around the world.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2011年和2012年的大部分时间里与我以前的AQR同事Adam Klein和Chang She一起扩展了pandas的功能。2013年，我停止了日常项目开发的参与，pandas自那时起已成为一个完全由社区拥有和维护的项目，全球范围内有超过两千名独特贡献者。
- en: For users of the R language for statistical computing, the DataFrame name will
    be familiar, as the object was named after the similar R `data.frame` object.
    Unlike Python, data frames are built into the R programming language and its standard
    library. As a result, many features found in pandas are typically either part
    of the R core implementation or provided by add-on packages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用R语言进行统计计算的用户，DataFrame这个名字将是熟悉的，因为该对象是根据类似的R `data.frame`对象命名的。与Python不同，数据框内置于R编程语言及其标准库中。因此，pandas中许多功能通常要么是R核心实现的一部分，要么是由附加包提供的。
- en: The pandas name itself is derived from *panel data*, an econometrics term for
    multidimensional structured datasets, and a play on the phrase *Python data analysis*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: pandas这个名字本身来源于*panel data*，这是一个描述多维结构化数据集的计量经济学术语，也是对*Python数据分析*这个短语的一种变换。
- en: matplotlib
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: matplotlib
- en: '[matplotlib](https://matplotlib.org) is the most popular Python library for
    producing plots and other two-dimensional data visualizations. It was originally
    created by John D. Hunter and is now maintained by a large team of developers.
    It is designed for creating plots suitable for publication. While there are other
    visualization libraries available to Python programmers, matplotlib is still widely
    used and integrates reasonably well with the rest of the ecosystem. I think it
    is a safe choice as a default visualization tool.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[matplotlib](https://matplotlib.org)是用于生成图表和其他二维数据可视化的最流行的Python库。最初由John D.
    Hunter创建，现在由一个庞大的开发团队维护。它专为创建适合出版的图表而设计。虽然Python程序员可以使用其他可视化库，但matplotlib仍然被广泛使用，并且与生态系统的其他部分相当好地集成。我认为它是默认可视化工具的一个安全选择。'
- en: IPython and Jupyter
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IPython和Jupyter
- en: The [IPython project](https://ipython.org) began in 2001 as Fernando Pérez’s
    side project to make a better interactive Python interpreter. Over the subsequent
    20 years it has become one of the most important tools in the modern Python data
    stack. While it does not provide any computational or data analytical tools by
    itself, IPython is designed for both interactive computing and software development
    work. It encourages an *execute-explore* workflow instead of the typical *edit-compile-run*
    workflow of many other programming languages. It also provides integrated access
    to your operating system’s shell and filesystem; this reduces the need to switch
    between a terminal window and a Python session in many cases. Since much of data
    analysis coding involves exploration, trial and error, and iteration, IPython
    can help you get the job done faster.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython项目](https://ipython.org)始于2001年，是Fernando Pérez的一个副业项目，旨在打造更好的交互式Python解释器。在随后的20年里，它已成为现代Python数据堆栈中最重要的工具之一。虽然它本身不提供任何计算或数据分析工具，但IPython旨在用于交互式计算和软件开发工作。它鼓励*执行-探索*工作流程，而不是许多其他编程语言的典型*编辑-编译-运行*工作流程。它还提供了对操作系统的shell和文件系统的集成访问；这在许多情况下减少了在终端窗口和Python会话之间切换的需求。由于许多数据分析编码涉及探索、试错和迭代，IPython可以帮助您更快地完成工作。'
- en: In 2014, Fernando and the IPython team announced the [Jupyter project](https://jupyter.org),
    a broader initiative to design language-agnostic interactive computing tools.
    The IPython web notebook became the Jupyter notebook, with support now for over
    40 programming languages. The IPython system can now be used as a *kernel* (a
    programming language mode) for using Python with Jupyter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，Fernando和IPython团队宣布了[Jupyter项目](https://jupyter.org)，这是一个更广泛的倡议，旨在设计与语言无关的交互式计算工具。IPython网络笔记本变成了Jupyter笔记本，现在支持超过40种编程语言。IPython系统现在可以作为使用Python与Jupyter的*内核*（编程语言模式）。
- en: IPython itself has become a component of the much broader Jupyter open source
    project, which provides a productive environment for interactive and exploratory
    computing. Its oldest and simplest "mode" is as an enhanced Python shell designed
    to accelerate the writing, testing, and debugging of Python code. You can also
    use the IPython system through the Jupyter notebook.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: IPython本身已成为更广泛的Jupyter开源项目的组成部分，为交互式和探索性计算提供了一个高效的环境。它最古老和最简单的“模式”是作为一个增强的Python
    shell，旨在加速Python代码的编写、测试和调试。您还可以通过Jupyter笔记本使用IPython系统。
- en: The Jupyter notebook system also allows you to author content in Markdown and
    HTML, providing you a means to create rich documents with code and text.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter笔记本系统还允许您在Markdown和HTML中编写内容，为您提供了一种创建包含代码和文本的丰富文档的方式。
- en: I personally use IPython and Jupyter regularly in my Python work, whether running,
    debugging, or testing code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人经常在我的Python工作中使用IPython和Jupyter，无论是运行、调试还是测试代码。
- en: In the [accompanying book materials on GitHub](https://github.com/wesm/pydata-book),
    you will find Jupyter notebooks containing all the code examples from each chapter.
    If you cannot access GitHub where you are, you can [try the mirror on Gitee](https://gitee.com/wesmckinn/pydata-book).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在[GitHub上的附带书籍材料](https://github.com/wesm/pydata-book)中，您将找到包含每章代码示例的Jupyter笔记本。如果您无法访问GitHub，您可以尝试[Gitee上的镜像](https://gitee.com/wesmckinn/pydata-book)。
- en: SciPy
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciPy
- en: '[SciPy](https://scipy.org) is a collection of packages addressing a number
    of foundational problems in scientific computing. Here are some of the tools it
    contains in its various modules:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[SciPy](https://scipy.org)是一个解决科学计算中一些基础问题的包集合。以下是它在各个模块中包含的一些工具：'
- en: '`scipy.integrate`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.integrate`'
- en: Numerical integration routines and differential equation solvers
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 数值积分例程和微分方程求解器
- en: '`scipy.linalg`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.linalg`'
- en: Linear algebra routines and matrix decompositions extending beyond those provided
    in `numpy.linalg`
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数例程和矩阵分解，扩展到`numpy.linalg`提供的范围之外
- en: '`scipy.optimize`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.optimize`'
- en: Function optimizers (minimizers) and root finding algorithms
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数优化器（最小化器）和根查找算法
- en: '`scipy.signal`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.signal`'
- en: Signal processing tools
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 信号处理工具
- en: '`scipy.sparse`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.sparse`'
- en: Sparse matrices and sparse linear system solvers
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏矩阵和稀疏线性系统求解器
- en: '`scipy.special`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.special`'
- en: Wrapper around SPECFUN, a FORTRAN library implementing many common mathematical
    functions, such as the `gamma` function
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SPECFUN的包装器，一个实现许多常见数学函数（如`gamma`函数）的FORTRAN库
- en: '`scipy.stats`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`scipy.stats`'
- en: Standard continuous and discrete probability distributions (density functions,
    samplers, continuous distribution functions), various statistical tests, and more
    descriptive statistics
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 标准连续和离散概率分布（密度函数、采样器、连续分布函数）、各种统计检验和更多描述性统计
- en: Together, NumPy and SciPy form a reasonably complete and mature computational
    foundation for many traditional scientific computing applications.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy和SciPy共同构成了许多传统科学计算应用的相当完整和成熟的计算基础。
- en: scikit-learn
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: scikit-learn
- en: 'Since the project''s inception in 2007, [scikit-learn](https://scikit-learn.org)
    has become the premier general-purpose machine learning toolkit for Python programmers.
    As of this writing, more than two thousand different individuals have contributed
    code to the project. It includes submodules for such models as:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 自2007年项目开始以来，[scikit-learn](https://scikit-learn.org)已成为Python程序员的首选通用机器学习工具包。截至撰写本文时，超过两千名不同的个人为该项目贡献了代码。它包括用于以下模型的子模块：
- en: 'Classification: SVM, nearest neighbors, random forest, logistic regression,
    etc.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类：SVM、最近邻、随机森林、逻辑回归等
- en: 'Regression: Lasso, ridge regression, etc.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归：Lasso、岭回归等
- en: 'Clustering: *k*-means, spectral clustering, etc.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聚类：*k*-means、谱聚类等
- en: 'Dimensionality reduction: PCA, feature selection, matrix factorization, etc.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降维：PCA、特征选择、矩阵分解等
- en: 'Model selection: Grid search, cross-validation, metrics'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型选择：网格搜索、交叉验证、度量
- en: 'Preprocessing: Feature extraction, normalization'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预处理：特征提取、归一化
- en: Along with pandas, statsmodels, and IPython, scikit-learn has been critical
    for enabling Python to be a productive data science programming language. While
    I won't be able to include a comprehensive guide to scikit-learn in this book,
    I will give a brief introduction to some of its models and how to use them with
    the other tools presented in the book.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 除了pandas、statsmodels和IPython之外，scikit-learn对于使Python成为一种高效的数据科学编程语言至关重要。虽然我无法在本书中包含对scikit-learn的全面指南，但我将简要介绍一些其模型以及如何将其与本书中提供的其他工具一起使用。
- en: statsmodels
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: statsmodels
- en: '[statsmodels](https://statsmodels.org) is a statistical analysis package that
    was seeded by work from Stanford University statistics professor Jonathan Taylor,
    who implemented a number of regression analysis models popular in the R programming
    language. Skipper Seabold and Josef Perktold formally created the new statsmodels
    project in 2010 and since then have grown the project to a critical mass of engaged
    users and contributors. Nathaniel Smith developed the Patsy project, which provides
    a formula or model specification framework for statsmodels inspired by R''s formula
    system.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[statsmodels](https://statsmodels.org)是一个统计分析包，由斯坦福大学统计学教授Jonathan Taylor的工作启发而来，他实现了R编程语言中流行的一些回归分析模型。Skipper
    Seabold和Josef Perktold于2010年正式创建了新的statsmodels项目，自那时以来，该项目已经发展成为一群积极参与的用户和贡献者。Nathaniel
    Smith开发了Patsy项目，该项目提供了一个受R公式系统启发的用于statsmodels的公式或模型规范框架。'
- en: 'Compared with scikit-learn, statsmodels contains algorithms for classical (primarily
    frequentist) statistics and econometrics. This includes such submodules as:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与scikit-learn相比，statsmodels包含用于经典（主要是频率主义）统计和计量经济学的算法。这包括诸如：
- en: 'Regression models: linear regression, generalized linear models, robust linear
    models, linear mixed effects models, etc.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归模型：线性回归、广义线性模型、鲁棒线性模型、线性混合效应模型等
- en: Analysis of variance (ANOVA)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方差分析（ANOVA）
- en: 'Time series analysis: AR, ARMA, ARIMA, VAR, and other models'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列分析：AR、ARMA、ARIMA、VAR和其他模型
- en: 'Nonparametric methods: Kernel density estimation, kernel regression'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非参数方法：核密度估计、核回归
- en: Visualization of statistical model results
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统计模型结果的可视化
- en: statsmodels is more focused on statistical inference, providing uncertainty
    estimates and *p*-values for parameters. scikit-learn, by contrast, is more prediction
    focused.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: statsmodels更专注于统计推断，为参数提供不确定性估计和*p*-值。相比之下，scikit-learn更注重预测。
- en: As with scikit-learn, I will give a brief introduction to statsmodels and how
    to use it with NumPy and pandas.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与scikit-learn一样，我将简要介绍statsmodels以及如何与NumPy和pandas一起使用它。
- en: Other Packages
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他包
- en: In 2022, there are many other Python libraries which might be discussed in a
    book about data science. This includes some newer projects like TensorFlow or
    PyTorch, which have become popular for machine learning or artificial intelligence
    work. Now that there are other books out there that focus more specifically on
    those projects, I would recommend using this book to build a foundation in general-purpose
    Python data wrangling. Then, you should be well prepared to move on to a more
    advanced resource that may assume a certain level of expertise.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在2022年，有许多其他Python库可能会在关于数据科学的书中讨论。这包括一些较新的项目，如TensorFlow或PyTorch，这些项目已经成为机器学习或人工智能工作中流行的工具。现在有其他更专注于这些项目的书籍，我建议使用本书来建立通用Python数据处理的基础。然后，您应该准备好转向更高级的资源，这些资源可能假定一定水平的专业知识。
- en: 1.4 Installation and Setup
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 安装和设置
- en: Since everyone uses Python for different applications, there is no single solution
    for setting up Python and obtaining the necessary add-on packages. Many readers
    will not have a complete Python development environment suitable for following
    along with this book, so here I will give detailed instructions to get set up
    on each operating system. I will be using Miniconda, a minimal installation of
    the conda package manager, along with [conda-forge](https://conda-forge.org),
    a community-maintained software distribution based on conda. This book uses Python
    3.10 throughout, but if you're reading in the future, you are welcome to install
    a newer version of Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个人都在不同的应用中使用Python，因此设置Python并获取必要的附加包没有单一的解决方案。许多读者可能没有完整的Python开发环境，适合跟随本书，因此我将在每个操作系统上提供详细的设置说明。我将使用Miniconda，这是conda软件包管理器的最小安装，以及[conda-forge](https://conda-forge.org)，这是一个基于conda的社区维护的软件分发。本书始终使用Python
    3.10，但如果您是在未来阅读，欢迎安装更新版本的Python。
- en: If for some reason these instructions become out-of-date by the time you are
    reading this, you can check out [my website for the book](https://wesmckinney.com/book)
    which I will endeavor to keep up to date with the latest installation instructions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，这些说明在您阅读时已过时，您可以查看[我的书籍网站](https://wesmckinney.com/book)，我将努力保持最新安装说明的更新。
- en: Miniconda on Windows
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows上的Miniconda
- en: To get started on Windows, download the Miniconda installer for the latest Python
    version available (currently 3.9) from [*https://conda.io*](https://conda.io).
    I recommend following the installation instructions for Windows available on the
    conda website, which may have changed between the time this book was published
    and when you are reading this. Most people will want the 64-bit version, but if
    that doesn't run on your Windows machine, you can install the 32-bit version instead.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上开始，请从[*https://conda.io*](https://conda.io)下载最新Python版本（目前为3.9）的Miniconda安装程序。我建议按照conda网站上提供的Windows安装说明进行安装，这些说明可能在本书出版时和您阅读时之间发生了变化。大多数人会想要64位版本，但如果这在您的Windows机器上无法运行，您可以安装32位版本。
- en: When prompted whether to install for just yourself or for all users on your
    system, choose the option that's most appropriate for you. Installing just for
    yourself will be sufficient to follow along with the book. It will also ask you
    whether you want to add Miniconda to the system PATH environment variable. If
    you select this (I usually do), then this Miniconda installation may override
    other versions of Python you have installed. If you do not, then you will need
    to use the Window Start menu shortcut that's installed to be able to use this
    Miniconda. This Start menu entry may be called "Anaconda3 (64-bit)."
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示是否仅为自己安装还是为系统上的所有用户安装时，请选择最适合您的选项。仅为自己安装将足以跟随本书。它还会询问您是否要将Miniconda添加到系统PATH环境变量中。如果选择此选项（我通常会这样做），则此Miniconda安装可能会覆盖您已安装的其他Python版本。如果不这样做，那么您将需要使用安装的Window开始菜单快捷方式才能使用此Miniconda。此开始菜单条目可能称为“Anaconda3
    (64位)”。
- en: 'I''ll assume that you haven''t added Miniconda to your system PATH. To verify
    that things are configured correctly, open the "Anaconda Prompt (Miniconda3)"
    entry under "Anaconda3 (64-bit)" in the Start menu. Then try launching the Python
    interpreter by typing `python`. You should see a message like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您还没有将Miniconda添加到系统路径中。要验证配置是否正确，请在“开始”菜单下的“Anaconda3 (64位)”中打开“Anaconda
    Prompt (Miniconda3)”条目。然后尝试通过输入`python`来启动Python解释器。您应该会看到类似以下的消息：
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To exit the Python shell, type `exit()` and press Enter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出Python shell，请输入`exit()`并按Enter键。
- en: GNU/Linux
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GNU/Linux
- en: 'Linux details will vary a bit depending on your Linux distribution type, but
    here I give details for such distributions as Debian, Ubuntu, CentOS, and Fedora.
    Setup is similar to macOS with the exception of how Miniconda is installed. Most
    readers will want to download the default 64-bit installer file, which is for
    x86 architecture (but it''s possible in the future more users will have aarch64-based
    Linux machines). The installer is a shell script that must be executed in the
    terminal. You will then have a file named something similar to *Miniconda3-latest-Linux-x86_64.sh*.
    To install it, execute this script with `bash`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Linux的详细信息会根据您的Linux发行版类型有所不同，但在这里我提供了Debian、Ubuntu、CentOS和Fedora等发行版的详细信息。设置与macOS类似，唯一的区别是Miniconda的安装方式。大多数读者会想要下载默认的64位安装程序文件，这是针对x86架构的（但未来可能会有更多用户使用基于aarch64的Linux机器）。安装程序是一个必须在终端中执行的shell脚本。然后您将会得到一个类似*Miniconda3-latest-Linux-x86_64.sh*的文件。要安装它，请使用`bash`执行此脚本：
- en: '[PRE1]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Note* *Some Linux distributions have all the required Python packages (although
    outdated versions, in some cases) in their package managers and can be installed
    using a tool like apt. The setup described here uses Miniconda, as it''s both
    easily reproducible across distributions and simpler to upgrade packages to their
    latest versions.*  *You will have a choice of where to put the Miniconda files.
    I recommend installing the files in the default location in your home directory;
    for example, */home/$USER/miniconda* (with your username, naturally).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *一些Linux发行版在其软件包管理器中具有所有所需的Python软件包（在某些情况下是过时版本），可以使用类似apt的工具进行安装。这里描述的设置使用Miniconda，因为它在各种发行版中都很容易重现，并且更简单地升级软件包到最新版本。*
    *您可以选择将Miniconda文件放在哪里。我建议将文件安装在您的主目录中的默认位置；例如，*/home/$USER/miniconda*（自然包括您的用户名）。'
- en: The installer will ask if you wish to modify your shell scripts to automatically
    activate Miniconda. I recommend doing this (select "yes") as a matter of convenience.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序会询问您是否希望修改您的shell脚本以自动激活Miniconda。我建议这样做（选择“是”）以方便起见。
- en: 'After completing the installation, start a new terminal process and verify
    that you are picking up the new Miniconda installation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动一个新的终端进程并验证您是否已经安装了新的Miniconda：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To exit the Python shell, type `exit()` and press Enter or press Ctrl-D.*  *###
    Miniconda on macOS
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出Python shell，请输入`exit()`并按Enter键或按Ctrl-D。*### macOS上的Miniconda
- en: 'Download the macOS Miniconda installer, which should be named something like
    *Miniconda3-latest-MacOSX-arm64.sh* for Apple Silicon-based macOS computers released
    from 2020 onward, or *Miniconda3-latest-MacOSX-x86_64.sh* for Intel-based Macs
    released before 2020\. Open the Terminal application in macOS, and install by
    executing the installer (most likely in your `Downloads` directory) with `bash`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下载macOS Miniconda安装程序，应该命名为*Miniconda3-latest-MacOSX-arm64.sh*，适用于2020年以后发布的基于Apple
    Silicon的macOS计算机，或者*Miniconda3-latest-MacOSX-x86_64.sh*，适用于2020年之前发布的基于Intel的Mac。在macOS中打开终端应用程序，并通过使用`bash`执行安装程序（很可能在您的`Downloads`目录中）来安装：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When the installer runs, by default it automatically configures Miniconda in
    your default shell environment in your default shell profile. This is probably
    located at */Users/$USER/.zshrc*. I recommend letting it do this; if you do not
    want to allow the installer to modify your default shell environment, you will
    need to consult the Miniconda documentation to be able to proceed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装程序运行时，默认情况下会自动在默认shell环境和默认shell配置文件中配置Miniconda。这可能位于*/Users/$USER/.zshrc*。我建议让它这样做；如果您不想让安装程序修改默认的shell环境，您需要查阅Miniconda文档以便继续。
- en: 'To verify everything is working, try launching Python in the system shell (open
    the Terminal application to get a command prompt):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证一切是否正常工作，请尝试在系统shell中启动Python（打开终端应用程序以获取命令提示符）：
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To exit the shell, press Ctrl-D or type `exit()` and press Enter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出shell，请按Ctrl-D或输入`exit()`并按Enter键。
- en: Installing Necessary Packages
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装必要的软件包
- en: 'Now that we have set up Miniconda on your system, it''s time to install the
    main packages we will be using in this book. The first step is to configure conda-forge
    as your default package channel by running the following commands in a shell:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在您的系统上设置了Miniconda，是时候安装本书中将要使用的主要软件包了。第一步是通过在shell中运行以下命令将conda-forge配置为您的默认软件包渠道：
- en: '[PRE5]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we will create a new conda "environment" with the `conda create` command
    using Python 3.10:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用Python 3.10使用`conda create`命令创建一个新的conda“环境”：
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the installation completes, activate the environment with `conda activate`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，请使用`conda activate`激活环境：
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Note* *It is necessary to use `conda activate` to activate your environment
    each time you open a new terminal. You can see information about the active conda
    environment at any time from the terminal by running `conda info`.*  *Now, we
    will install the essential packages used throughout the book (along with their
    dependencies) with `conda install`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *每次打开新终端时，都需要使用`conda activate`来激活您的环境。您可以随时通过在终端中运行`conda info`来查看有关活动conda环境的信息。*  *现在，我们将使用`conda
    install`安装整本书中使用的基本软件包（以及它们的依赖项）：'
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will be using some other packages, too, but these can be installed later
    once they are needed. There are two ways to install packages: with `conda install`
    and with `pip install`. `conda install` should always be preferred when using
    Miniconda, but some packages are not available through conda, so if `conda install
    $package_name` fails, try `pip install $package_name`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用其他软件包，但这些软件包可以在需要时稍后安装。有两种安装软件包的方法：使用`conda install`和`pip install`。在使用Miniconda时，应始终优先使用`conda
    install`，但某些软件包无法通过conda获得，因此如果`conda install $package_name`失败，请尝试`pip install
    $package_name`。
- en: '*Note* *If you want to install all of the packages used in the rest of the
    book, you can do that now by running:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *如果您想安装本书其余部分使用的所有软件包，现在可以通过运行：'
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'On Windows, substitute a carat `^` for the line continuation `\` used on Linux
    and macOS.*  *You can update packages by using the `conda` `update` command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，将`^`替换为Linux和macOS上使用的行继续符`\`。*  *您可以使用`conda` `update`命令更新软件包：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'pip also supports upgrades using the `--upgrade` flag:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: pip还支持使用`--upgrade`标志进行升级：
- en: '[PRE11]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will have several opportunities to try out these commands throughout the
    book.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您将有机会在整本书中尝试这些命令。
- en: '*Caution* *While you can use both conda and pip to install packages, you should
    avoid updating packages originally installed with conda using pip (and vice versa),
    as doing so can lead to environment problems. I recommend sticking to conda if
    you can and falling back on pip only for packages that are unavailable with `conda
    install`.***  ***### Integrated Development Environments and Text Editors'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意* *虽然您可以使用conda和pip来安装软件包，但应避免使用pip更新最初使用conda安装的软件包（反之亦然），因为这样做可能会导致环境问题。我建议尽可能使用conda，并仅在无法使用`conda
    install`安装软件包时才回退到pip。***  ***### 集成开发环境和文本编辑器'
- en: When asked about my standard development environment, I almost always say “IPython
    plus a text editor.” I typically write a program and iteratively test and debug
    each piece of it in IPython or Jupyter notebooks. It is also useful to be able
    to play around with data interactively and visually verify that a particular set
    of data manipulations is doing the right thing. Libraries like pandas and NumPy
    are designed to be productive to use in the shell.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当被问及我的标准开发环境时，我几乎总是说“IPython加上文本编辑器”。我通常会在IPython或Jupyter笔记本中编写程序，并逐步测试和调试每个部分。交互式地玩弄数据并直观验证特定数据操作是否正确也是很有用的。像pandas和NumPy这样的库旨在在shell中使用时提高生产力。
- en: 'When building software, however, some users may prefer to use a more richly
    featured integrated development environment (IDE) and rather than an editor like
    Emacs or Vim which provide a more minimal environment out of the box. Here are
    some that you can explore:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在构建软件时，一些用户可能更喜欢使用功能更丰富的集成开发环境（IDE），而不是像Emacs或Vim这样的编辑器，后者在开箱即用时提供了更简洁的环境。以下是一些您可以探索的内容：
- en: PyDev (free), an IDE built on the Eclipse platform
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyDev（免费），基于Eclipse平台构建的IDE
- en: PyCharm from JetBrains (subscription-based for commercial users, free for open
    source developers)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自JetBrains的PyCharm（面向商业用户的订阅制，对于开源开发者免费）
- en: Python Tools for Visual Studio (for Windows users)
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio的Python工具（适用于Windows用户）
- en: Spyder (free), an IDE currently shipped with Anaconda
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spyder（免费），目前与Anaconda捆绑的IDE
- en: Komodo IDE (commercial)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Komodo IDE（商业版）
- en: Due to the popularity of Python, most text editors, like VS Code and Sublime
    Text 2, have excellent Python support.****  ***## 1.5 Community and Conferences
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python的流行，大多数文本编辑器，如VS Code和Sublime Text 2，都具有出色的Python支持。****  ***## 1.5
    社区和会议
- en: 'Outside of an internet search, the various scientific and data-related Python
    mailing lists are generally helpful and responsive to questions. Some to take
    a look at include:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过互联网搜索外，各种科学和数据相关的Python邮件列表通常对问题有帮助并且响应迅速。一些可以参考的包括：
- en: 'pydata: A Google Group list for questions related to Python for data analysis
    and pandas'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pydata：一个Google Group列表，用于与Python数据分析和pandas相关的问题
- en: 'pystatsmodels: For statsmodels or pandas-related questions'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pystatsmodels：用于statsmodels或与pandas相关的问题
- en: Mailing list for scikit-learn (*scikit-learn@python.org*) and machine learning
    in Python, generally
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scikit-learn邮件列表（*scikit-learn@python.org*）和Python中的机器学习，一般
- en: 'numpy-discussion: For NumPy-related questions'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: numpy-discussion：用于与NumPy相关的问题
- en: 'scipy-user: For general SciPy or scientific Python questions'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: scipy-user：用于一般SciPy或科学Python问题
- en: I deliberately did not post URLs for these in case they change. They can be
    easily located via an internet search.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意没有发布这些URL，以防它们发生变化。它们可以通过互联网搜索轻松找到。
- en: 'Each year many conferences are held all over the world for Python programmers.
    If you would like to connect with other Python programmers who share your interests,
    I encourage you to explore attending one, if possible. Many conferences have financial
    support available for those who cannot afford admission or travel to the conference.
    Here are some to consider:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每年举办许多全球各地的Python程序员会议。如果您想与其他分享您兴趣的Python程序员联系，我鼓励您尽可能参加其中一个。许多会议为那些无法支付入场费或旅行费的人提供财政支持。以下是一些可以考虑的会议：
- en: 'PyCon and EuroPython: The two main general Python conferences in North America
    and Europe, respectively'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyCon和EuroPython：分别是在北美和欧洲举办的两个主要的一般Python会议
- en: 'SciPy and EuroSciPy: Scientific-computing-oriented conferences in North America
    and Europe, respectively'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SciPy和EuroSciPy：分别是在北美和欧洲举办的面向科学计算的会议
- en: 'PyData: A worldwide series of regional conferences targeted at data science
    and data analysis use cases'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyData：面向数据科学和数据分析用例的全球系列区域会议
- en: International and regional PyCon conferences (see [https://pycon.org](https://pycon.org)
    for a complete listing)
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际和地区 PyCon 会议（请参阅 [https://pycon.org](https://pycon.org) 获取完整列表）
- en: 1.6 Navigating This Book
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 浏览本书
- en: 'If you have never programmed in Python before, you will want to spend some
    time in Chapters [Ch 2: Python Language Basics, IPython, and Jupyter Notebooks](/book/python-basics)
    and [Ch 3: Built-in Data Structures, Functions, and Files](/book/python-builtin),
    where I have placed a condensed tutorial on Python language features and the IPython
    shell and Jupyter notebooks. These things are prerequisite knowledge for the remainder
    of the book. If you have Python experience already, you may instead choose to
    skim or skip these chapters.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未在 Python 中编程过，您可能需要花一些时间阅读 [第 2 章：Python 语言基础、IPython 和 Jupyter Notebooks](/book/python-basics)
    和 [第 3 章：内置数据结构、函数和文件](/book/python-builtin)，我在这里放置了有关 Python 语言特性、IPython shell
    和 Jupyter notebooks 的简明教程。这些内容是本书其余部分的先决知识。如果您已经有 Python 经验，您可以选择略读或跳过这些章节。
- en: 'Next, I give a short introduction to the key features of NumPy, leaving more
    advanced NumPy use for [Appendix A: Advanced NumPy](/book/advanced-numpy). Then,
    I introduce pandas and devote the rest of the book to data analysis topics applying
    pandas, NumPy, and matplotlib (for visualization). I have structured the material
    in an incremental fashion, though there is occasionally some minor crossover between
    chapters, with a few cases where concepts are used that haven''t been introduced
    yet.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我简要介绍了 NumPy 的关键特性，将更高级的 NumPy 使用留给 [附录 A：高级 NumPy](/book/advanced-numpy)。然后，我介绍了
    pandas，并将本书的其余部分专注于应用 pandas、NumPy 和 matplotlib 进行数据分析主题（用于可视化）。我以递增的方式组织了材料，尽管在章节之间偶尔会有一些轻微的交叉，有些概念可能尚未介绍。
- en: 'While readers may have many different end goals for their work, the tasks required
    generally fall into a number of different broad groups:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管读者可能对他们的工作有许多不同的最终目标，但通常所需的任务大致可以分为许多不同的广泛组别：
- en: Interacting with the outside world
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与外部世界互动
- en: Reading and writing with a variety of file formats and data stores
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用各种文件格式和数据存储进行读写
- en: Preparation
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 准备
- en: Cleaning, munging, combining, normalizing, reshaping, slicing and dicing, and
    transforming data for analysis
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 清理、整理、合并、规范化、重塑、切片和切块以及转换数据以进行分析
- en: Transformation
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 转换
- en: Applying mathematical and statistical operations to groups of datasets to derive
    new datasets (e.g., aggregating a large table by group variables)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据集组应用数学和统计操作以派生新数据集（例如，通过组变量对大表进行聚合）
- en: Modeling and computation
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 建模和计算
- en: Connecting your data to statistical models, machine learning algorithms, or
    other computational tools
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的数据连接到统计模型、机器学习算法或其他计算工具
- en: Presentation
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 演示
- en: Creating interactive or static graphical visualizations or textual summaries
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 创建交互式或静态图形可视化或文本摘要
- en: Code Examples
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码示例
- en: 'Most of the code examples in the book are shown with input and output as it
    would appear executed in the IPython shell or in Jupyter notebooks:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数代码示例都显示了输入和输出，就像在 IPython shell 或 Jupyter notebooks 中执行时一样：
- en: '[PRE12]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When you see a code example like this, the intent is for you to type the example
    code in the `In` block in your coding environment and execute it by pressing the
    Enter key (or Shift-Enter in Jupyter). You should see output similar to what is
    shown in the `Out` block.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 当您看到像这样的代码示例时，意图是让您在编码环境中的 `In` 区块中键入示例代码，并通过按 Enter 键（或在 Jupyter 中按 Shift-Enter）执行它。您应该看到类似于
    `Out` 区块中显示的输出。
- en: 'I changed the default console output settings in NumPy and pandas to improve
    readability and brevity throughout the book. For example, you may see more digits
    of precision printed in numeric data. To exactly match the output shown in the
    book, you can execute the following Python code before running the code examples:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我已更改了 NumPy 和 pandas 的默认控制台输出设置，以提高本书的可读性和简洁性。例如，您可能会看到在数字数据中打印更多位数的精度。要完全匹配书中显示的输出，您可以在运行代码示例之前执行以下
    Python 代码：
- en: '[PRE13]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Data for Examples
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例数据
- en: Datasets for the examples in each chapter are hosted in [a GitHub repository](https://github.com/wesm/pydata-book)
    (or in a [mirror on Gitee](https://gitee.com/wesmckinn/pydata-book) if you cannot
    access GitHub). You can download this data either by using the Git version control
    system on the command line or by downloading a zip file of the repository from
    the website. If you run into problems, navigate to [the book website](https://wesmckinney.com/book)
    for up-to-date instructions about obtaining the book materials.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章的示例数据集都托管在 [GitHub 仓库](https://github.com/wesm/pydata-book) 中（如果无法访问 GitHub，则可以在
    [Gitee 上的镜像](https://gitee.com/wesmckinn/pydata-book)）。您可以通过使用 Git 版本控制系统在命令行上下载这些数据，或者通过从网站下载仓库的
    zip 文件来获取数据。如果遇到问题，请转到 [书籍网站](https://wesmckinney.com/book) 获取有关获取书籍材料的最新说明。
- en: 'If you download a zip file containing the example datasets, you must then fully
    extract the contents of the zip file to a directory and navigate to that directory
    from the terminal before proceeding with running the book''s code examples:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您下载包含示例数据集的 zip 文件，则必须完全提取 zip 文件的内容到一个目录，并在终端中导航到该目录，然后才能继续运行本书的代码示例：
- en: '[PRE14]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'I have made every effort to ensure that the GitHub repository contains everything
    necessary to reproduce the examples, but I may have made some mistakes or omissions.
    If so, please send me an email: *book@wesmckinney.com*. The best way to report
    errors in the book is on the [errata page on the O''Reilly website](https://oreil.ly/kmhmQ).'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我已尽一切努力确保 GitHub 仓库包含重现示例所需的一切，但可能会出现一些错误或遗漏。如果有的话，请发送邮件至：*book@wesmckinney.com*。报告书中错误的最佳方式是在
    [O'Reilly 网站上的勘误页面](https://oreil.ly/kmhmQ)上。
- en: Import Conventions
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入约定
- en: 'The Python community has adopted a number of naming conventions for commonly
    used modules:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Python 社区已经采用了许多常用模块的命名约定：
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This means that when you see `np.arange`, this is a reference to the `arange`
    function in NumPy. This is done because it’s considered bad practice in Python
    software development to import everything (`from numpy import *`) from a large
    package like NumPy.*****
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当你看到`np.arange`时，这是对NumPy中`arange`函数的引用。这样做是因为在Python软件开发中，从像NumPy这样的大型包中导入所有内容（`from
    numpy import *`）被认为是不良实践。
